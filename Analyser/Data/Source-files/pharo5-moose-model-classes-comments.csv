"class","comment"
"CountingKeyPressedPlugin","I'm a simple plugin which displays the number of keystrokes at the bottom of Nautilus. I'm mainly an example."
"GTExampleDeclaredMethodMissing",""
"GTSpotterExceptionHandlerNotFound",""
"EncoderForLongFormV3","I am an alternate to EncoderForV3 that tries to use thje longest forms of bytecodes possible so as to avoid using as many bytecode as possible to allow for the unused portions of the bytecode set this makes available to be reassigned.I do not use the following ranges0 through 111	   0- 15 	0000iiii 	Push Receiver Variable #iiii	  16- 31 	0001iiii 	Push Temporary Location #iiii	  32- 63 	001iiiii 		Push Literal Constant #iiiii	  64- 95 	010iiiii 		Push Literal Variable #iiiii	  96-103 	01100iii 	Pop and Store Receiver Variable #iii	104-111 	01101iii 	Pop and Store Temporary Location #iii138-159	138-143 				Unused.	144-151 	10010iii 	Jump iii + 1 (i.e., 1 through 8).	152-159 	10011iii 	Pop and Jump 0n False iii +1 (i.e., 1 through 8).176-255	176-191 	1011iiii 	Send Arithmetic Message #iiii	192-207 	1100iiii 	Send Special Message #iiii	208-223 	1101iiii 	Send Literal Selector #iiii With No Arguments	224-239 	1110iiii 	Send Literal Selector #iiii With 1 Argument	240-255 	1111iiii 	Send Literal Selector #iiii With 2 Arguments= 112 + (160 - 138) + (256 - 176) =  214, or 84% of the bytecodes"
"GLMMorphicDropDownRenderer",""
"ZnServerSession","I am ZnServerSession.I represent an HTTP session in the context of a ZnServer.To get a reference to the current session, send #session to a ZnMessage (request or response).Part of Zinc HTTP Components."
"TestCaseEnded","This event is announced when testing a test case ends."
"PointerLayout","I am the superclass for all layouts with Slots."
"SimpleTestResourceCircular","I'm a simple test ressource for test purposes"
"ContinuationTest","I represent intentend to provide complete coverage for the Continuation class."
"RubFindTextChanged","I am raised when the text to find changed"
"TestResult","This implements the Collecting Parameter pattern for running a bunch of tests.  It holds tests that have run, sorted into the result categories of passed, failures and errors.TestResult is an interesting object to subclass or substitute. #runCase: is the external protocol you need to reproduce. TestResult subclasses can  handle multi-threaded tests (see SUnitXProcPatterns) and might record coverage information or send emails when the run completes."
"FullStackDebugAction","A FullStackDebugAction displays the entire stack in the stack widget."
"ManifestGraphicsDisplayObjects","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"Latin1Environment","This class provides the support for the languages in 'Latin-1' category.  Although we could have different language environments for different languages in the category, so far nobody seriously needed it."
"RBParseErrorNode","I am a node representing a source code segement that could not be parsed. I am manly used for source-code coloring where we should parse as far as possible and mark the rest as a failure."
"ByteSymbol","This class represents the symbols containing 8bit characters."
"AmbiguousSelector","An AmbiguousSelector is a notification produced by the Scanner/Parser/Compiler when encountering this ambiguous construct:1@-2Upper expression can be interpreted both1 @ -2 (regular st-80 and former Squeak syntax, the minus is attached to the literal number)1 @- 2 (extended binary selector, the minus sign is allowed at any position and thus part of the binary selector)"
"ZnConnectionAcceptedEvent","ZnConnectionAcceptedEvent is signalled when an HTTP server accepts an incoming connection from a client at address."
"RBReturnInEnsureRule","Checks for return statements within ensure: blocks that can have unintended side-effects."
"ZnMaximumNumberOfDictionaryEntries","I am ZnMaximumNumberOfDictionaryEntries.I am a DynamicVariable and a ProcessSpecificVariable.I am used to control the maximum number of entries being added to a limited ZnMultiValueDictionary."
"RBValueNode","RBValueNode is an abstract class that represents a node that returns some value.Subclasses must implement the following messages:	accessing		startWithoutParentheses		stopWithoutParentheses	testing		needsParenthesisInstance Variables:	parentheses	<SequenceableCollection of: Inteval>	the positions of the parethesis around this node. We need a collection of intervals for stupid code such as ""((3 + 4))"" that has multiple parethesis around the same expression."
"Set","I represent a set of objects without duplicates.  I can hold anything that responds to#hash and #=, except for nil.  My instances will automatically grow, if necessary,Note that I rely on #=, not #==.  If you want a set using #==, use IdentitySet.Instance structure:  array	An array whose non-nil elements are the elements of the set,		and whose nil elements are empty slots.  There is always at least one nil.		In fact I try to keep my ""load"" at 75% or less so that hashing will work well.  tally	The number of elements in the set.  The array size is always greater than this.The core operation is #findElementOrNil:, which either finds the position where anobject is stored in array, if it is present, or finds a suitable position holding nil, ifits argument is not present in array,"
"HelpBrowserTest","SUnit tests for the help browser"
"FLAnalysis","I am responsible of traversing the graph of references starting from a root object. I will produce a clusterization which the serializer will store on a stream.An example of use is:	(FLAnalyzer newDefault 		clusterizationOf: (Array with: 1@2 with: 3@4))		clusters."
"DelayMillisecondScheduler","This concrete subclass uses the millisecond primitive & clock, which are based on a 32-bit Integer, rolling over roughly every 6 days.  Special handling for clock rollover is scatter through the implementation.There are some code duplications with simbling classes for performance reasons.See parent class comment for more info."
"TextMorph","TextMorphs support display of text with emphasis.  They also support reasonable text-editing capabilities, as well as embedded hot links, and the ability to embed submorphs in the text.Late in life, TextMorph was made a subclass of BorderedMorph to provide border and background color if desired.  In order to keep things compatible, protocols have been redirected so that color (preferably textColor) relates to the text, and backgroundColor relates to the inner fill color.Text display is clipped to the innerBounds of the rectangle, and text composition is normally performed within a rectangle which is innerBounds inset by the margins parameter.If text has been embedded in another object, one can elect to fill the owner's shape, in which case the text will be laid out in the shape of the owner's shadow image (including any submorphs other than the text).  One can also elect to have the text avoid occlusions, in which case it will avoid the bounds of any sibling morphs that appear in front of it.  It may be necessary to update bounds in order for the text runaround to notice the presence of a new occluding shape.The optional autoFitContents property enables the following feature:  if the text contents changes, then the bounds of the morph will be adjusted to fit the minimum rectangle that encloses the text (plus any margins specified).  Similarly, any attempt to change the size of the morph will be resisted if this parameter is set.  Except...If the wrapFlag parameter is true, then text will be wrapped at word boundaries based on the composition width (innerBounds insetBy: margins) width.  Thus an attempt to resize the morph in autofit mode, if it changes the width, will cause the text to be recomposed with the new width, and then the bounds will be reset to the minimum enclosing rectangle.  Similarly, if the text contents are changed with the wrapFlag set to true, word wrap will be performed based on the current compostion width, after which the bounds will be set (or not), based on the autoFitcontents property.Note that fonts can only be applied to the TextMorph as a whole.  While you can change the size, color, and emphasis of a subsection of the text and have it apply to only that subsection, changing the font changes the font for the entire contents of the TextMorph. Still a TextMorph can be composed of several texts of different fonts| font1 font2 t1 t2 tMorph|tMorph := TextMorph new.font1 := (TextFontReference toFont: (StrikeFont familyName: 'Atlanta' size: 22)).font2 := (TextFontReference toFont: (StrikeFont familyName: 'Atlanta' size: 11)).t1 := 'this is font1' asText addAttribute: font1.t2 := ' and this is font2' asText addAttribute: font2.tMorph contents: (t1,t2).tMorph openInHand.Yet to do:Make a comprehensive control for the eyedropper, with border width and color, inner color and text color, and margin widths."
"SugsSuggestionTest","Superclass for SUnit tests for smart suggestions"
"TestReviver","I am a UI for test failures which have been serialized as fuel files. You can:* materialize the failed test process to debug* browse the test method.self open. "
"LocaleAnnouncementTests",""
"GLMMorphicSpotterTest",""
"OSTouchPinchDetector","I am the abstract class for all the Pinch gesture detectors"
"CodeChunk","I'm the abstract superclass of all the code declarations that should exist in an exported file."
"SystemResolverTest","SUnit tests for SystemResolver"
"RBDetectContainsRule","Checks for bytecodePrimEqual  using the do: method instead of using the contains: or detect: methods."
"NautilusShowPackagesChanged","A NautilusShowPackagesChanged is raised when the value of showPackages changed"
"WikiStyleHelpBuilder","I'm an HelpSystem builder which create an HelpSystem book from a wiki-like formatted string. ! Usage- Create a class-side method on the class you want to put documentation.- Add the pragma <wikiStyleHelp:> with the title of the book as parameter- The method should answer the documentation as a String (using Pier syntax. See http://www.piercms.com/doc/syntax ). ! ExampleMyClass class>>aMethod        <wikiStyleHelp: #'The name of the book I want to write'>        ^ ' ! Section 1 Some text for this section !! Subsection 1.1 !!! Subsection 1.1.1 !! Subsection 1.2 ! Section 2'"
"ScaledDecimalTest","I provide a test suite for ScaledDecimal values. Examine my tests to see how SmallIntegers should behave, and see how to use them."
"GLMButtonBrick","A GLMButtonBrick is a basic  button with label and icon to the left of the labelInstance Variables	iconBrick:		<GLMInteractableBrick>	labelBrick:		<GLMLabelBrick>iconBrick	- an icon to be displayed to the left of the labellabelBrick	- label showing button text"
"OSTouchFingerTracker","I am recording all movements and informations from a finger"
"MBCommandTests",""
"FBDDecompiler","I am the main class of FBD package.My job is to decompile a compiledMethod to get valid Abstract Syntax Tree (AST).The first step of decompilation is to give the byte code to the FBDLoopScanner, to annotate it. This will be important to detect all the loops in the method and handle it correctly in the Decompiler.The second step of decompilation is to interpret the byte code to create corresponding AST nodes. The decompiler will call the right ASTBuilder method and create a full AST. Then the AST is returned. The Flashback Decompiler's job stops there, because there are already some frameworks to generate Smalltalk code from an AST.The returned AST is does not take optimized messages into account. Use FBDOptimizdMessagesRewriter to recover the optimized messages.Instance Variables	simulatedStack <OrderedCollection> Simulates the bytecode stack, pushing AST nodes instead of concrete values	builder <FBDASTBuilder> change to another builder to build another AST than RB. By default, use a builder building RB nodes 	instructionStream <InstructionStream> used to decode the bytecode.	currentSequence <RBSequence> current AST sequence being decompiled	argCount <SmallInteger> counter to create args into the current sequence with a valid name	tempCount <SmallInteger> counter to create temps into the current sequence with a valid name	jumpSize <SmallInteger> used to remember a jump size during a dual branch message decompilation	loopsArray <Array> is the array containing informations about loops that the loop scanner gave me"
"ZnServerSocketReleasedEvent","ZnServerSocketReleasedEvent signals a new server socket on address:port is released (closed)."
"GTRawObjectVariablesBrowser","This is a helper browser for the Raw view in the GTInspector. It provides an overview of the slots and it offers an evaluator."
"GLMMatchingPresentationsChanged","A GLMMatchingPresentationsChanged is announced by the pane when the presentations that should be displayed change due to changes in the values of the ports of the pane."
"SharedPackageFilterPatternsHolder","A SharedPackageFilterPatternsHolder is used for package filter input. It shares historical values of the input among all the PackageTreeNautilus browsers. Variable lastValue keeps the last used value. It is used when a browser is opened from a system (e.g. World menu, anObject browse).Instance Variables	mutex:		Mutex	value:		OrderedCollection	lastValue:	String"
"LessonView","A LessonView displays a Lesson instance.LessonView new open"
"IRClosureStackCount","IRClosureStackCount is used to distinguish between a stack in the method scope and a stack within a closure block. Theclosure stack size is independent of the number of tempvars from the compiled method, therefore that number is subtractedfrom this stack size length."
"GLMMorphicAccumulatorRenderer",""
"OSWindow","I am a central class, which provides a top-level API for creating/controlling an operating-system windows.To create a new OS window with default attributes, just useOSWindow new.For better control of window creation, use OSWindow createWithAttributes: ...message. (See OSWindowAttributes for description).A newly created OSWindow instance can be used and controlled by application.To handle events (mouse/keyboard) of newly created window, one must bind own event handler to it (#eventHandler:) which must understand #handleEvent: message.To render on window's surface, first application must obtain an OSWindowRenderer instance.Currently there's two kinds of renderers available:- form renderer (to use existing form for updating window's contents)- opengl renderer (to render using OpenGL).OSWindow instance and its handle:  - all operations with window (like hiding/showing/resizing etc) is possible only if its handle is valid. If window gets destroyed, or image opened in a new session while window was created in previous session, the handle becomes invalid, and any operations will lead to error. To test if window is still valid, you can just use #isValid message."
"RBAbstractClassVariableRefactoring",""
"FLSqueakPlatform",""
"MetacelloPlatform",""
"RubSegmentMorph","3. The CLOSED and SEGMENTED variant looks like polygon. This is actually what you get when you do	PolygonMorph new openInWorldYou get a triangle. See below how to manipulate these objects...4. The CLOSED and SMOOTHED variant looks like blob (???)"
"MCVersionDependency","Dependencies"
"RelationSetTest",""
"FLFixedObjectCluster","I am a generic cluster for objects without indexable variables."
"CodeSimulationTests","SUnit tests for code simulation"
"FT2BitmapSize","Do not rearrange these fields!This structure models the size of a bitmap strike (i.e., a bitmapinstance of the font for a given resolution) in a fixed-size fontface.  It is used for the `availableSizes' field of theFT2Face structure.<Fields>height :: The (vertical) baseline-to-baseline distance in pixels.It makes most sense to define the height of a bitmapfont in this way.width  :: The average width of the font (in pixels).  Since thealgorithms to compute this value are different for thevarious bitmap formats, it can only give an additionalhint if the `height' value isn't sufficient to selectthe proper font.  For monospaced fonts the average widthis the same as the maximum width.size   :: The point size in 26.6 fractional format this font shallrepresent (for a given vertical resolution).x_ppem :: The horizontal ppem value (in 26.6 fractional format).y_ppem :: The vertical ppem value (in 26.6 fractional format).Usually, this is the `nominal' pixel height of the font.<Note>The values in this structure are taken from the bitmap font.  Ifthe font doesn't provide a parameter it is set to zero to indicatethat the information is not available.The following formula converts from dpi to ppem:ppem = size * dpi / 72where `size' is in points.Windows FNT:The `size' parameter is not reliable: There exist fonts (e.g.,app850.fon) which have a wrong size for some subfonts; x_ppemand y_ppem are thus set equal to pixel width and height given inin the Windows FNT header.TrueType embedded bitmaps:`size', `width', and `height' values are not contained in thebitmap strike itself.  They are computed from the global fontparameters."
"MCFileTreeRepository","A file tree repository"
"TabBar","I am a bar gathering tabs. I am the one managing the selected tab and related bahavior (unselecting the last one, updating the layout to make the selected tab on top of the other)"
"FileDirectoryWrapper",""
"ManifestKernel","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"RBBasicLintRuleTest",""
"ClassTraitTest",""
"SimplestClassListWithChunkExample","SimplestClassListWithChunkExample new openOn: Object"
"RBInlineParameterRefactoring",""
"FLBasicSerializationTest","SUnit tests for basic fuel serialization"
"TxSelectionChangedAnnouncement","i am announced each time when selection has changed"
"RBSmalltalkGlobalsRule","Do not send requests to ""Smalltalk"" (which models the whole image)  that are related to the envionment of defines classes and globals"
"KmGlobalDispatcher","I am a dispatcher that dispatches the global keymappings."
"SDL2Error","I am the Pharo Local Exception return that something wrong in SDL2"
"Cubic","I am a segment between to points. In the form of a cubic polynomial that can be evaluated between 0..1 to obtain the end points and intermediate values."
"GlobalIdentifierFuelPersistence","I serialize or materialize objects using FUEL framework. Create instance of me calling GlobalIdentifierPersistence fuel."
"UIManagerSessionHandler","I am a session handler that will initialize the UIManager during startup.This session handler makes the assumption that the current UIManager is a startup UI manager when its #startup: method gets called. Then, during startup he will install a Morphic UI manager.During shutdown we put back a startup ui manager, so we can handle startup actions during next startup without depending in the UI. (However, we shouldnt need a UI manager during the first startup actions)."
"FLCompiledMethodCluster","I am a cluster for CompiledMethod instances.How CompiledMethod trailers are serialized can be established using methods in 'configurating' class-side protocol."
"GTSpotterPaneBrick",""
"GLMCondition","GLMCondition is the abstract class for defininf a boolean condition applied on some input arguments. It is meant to be subclassed."
"ZnNullEncoder","I am ZnNullEncoder, a concrete subclass of ZnCharacterEncoder.I perform no encoding or decoding at all for all characters with a code value below 256.Note that in principle I could handle Latin1 (ISO-8859-1) or ASCII, although that is not completely correct. To get maximum efficiency, it remains an option.	Part of Zinc HTTP Components."
"SpecDebuggerStack","A SpecDebuggerStack is responsible for displaying and managing the stack. All actions from the context menu of the stack are loaded by using the pragmas 'self contextMenuDebuggingActions'."
"ZnUTF8Encoder","I am ZnUTF8Encoder, a concrete subclass of ZnCharacterEncoder.I implement the variable length UTF-8 encoding and decoding of Unicode according to RFC 3629.Wikipedia reference http://en.wikipedia.org/wiki/UTF-8Part of Zinc HTTP Components."
"RxmMarker","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A marker is used to remember positions of match of certain points of a regular expression. The marker receives an identifying key from the Matcher and uses that key to report positions of successful matches to the Matcher.Instance variables:	index	<Object> Something that makes sense for the Matcher. Received from the latter during initalization and later passed to it to identify the receiver."
"MTPackage","A MTPackage represents an internal depedency of a project, i.e a package located in the same MCPackage.Note: Metacello allows to describe external dependencies. In this case, transitive dependencies are not fetched. As this is not the good way to express dependencies, it is not supported here!"
"HowToMakeYourOwnTutorial","I'm a Pharo tutorial which teach to create a Pharo tutorial. Open me withProfStef goOn: HowToMakeYourOwnTutorial."
"AbstractNautilusUI","An AbstractNautilusUI is an abstraction of the UI handling packages and classes.Instance Variables	cachedHierarchy:		<Object>	classesSelection:		<Object>	commentButton:		<Object>	commentTextArea:		<Object>	currentDisplayChoice:		<Object>	firstColumn:		<Object>	groupsSelection:		<Object>	hierarchyClass:		<Object>	list:		<Object>	list2:		<Object>	model:		<Object>	packagesSelection:		<Object>	secondColumn:		<Object>	sourceCodeContainer:		<Object>	sourceCodePanel:		<Object>	sourceTextAreaLimit:		<Object>	window:		<Object>"
"ManifestNewValueHolder","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"KMShortcutTest",""
"DeflateStream","I'm the base class for ""stream compressor"". For example, my subclass GZipWriteStream can compress a stream contents using gzip algorithm.Try:gzData := String streamContents: [:aStream|         (GZipWriteStream on: aStream)                nextPutAll: 'Some data to be gzipped';                close. ].Transcript         show: gzData;         cr;        show: (GZipReadStream on: gzData) upToEnd;        cr.See InflateStream"
"RGMetatraitDefinitionTest","SUnit tests for Ring classtrait definitions"
"DAPackageAnalyzerPackageDependenciesWindow","UI merging SpecTreeModel cycles and Nautilus UI."
"RBTrueFalseDuplicationRule","Checks for ifTrue:ifFalse: blocks that have the same code at the beginning or end. Instead of having the same code in two places, you should move it outside the blocks."
"TxEmbeddedObjectTest",""
"AthensCharacterSpan","A text command to render a character span containing the range of characters for with same attributes"
"OpalEncoder","I encode names and literals into tree nodes with byte codes for the compiler. Byte codes for literals are not assigned until the tree-sizing pass of the compiler, because only then is it known which literals are actually needed. I also keep track of sourceCode ranges during parsing and code generation so I can provide an inverse map for the debugger."
"MBConfigurationRoot","MB stands for Metacello Borwser.MBConfigurationRoot is the root object holding information on all available configurations in the image.Instance Variables	announcer:		<Object>	configurations:	a collection of MBConfigurationInfo.	password:		<Object>	username:		<Object>"
"RBUncommonMessageSendRule","Sending messages with a common literal (e.g. ""Object self"") or an uppercase selector name are usually bugs, introduced through missing statement separators."
"KomitDefinitionNode","I am a node wrapping a KomitDefinition"
"IllegalName","I am raised on an attempt to use an illegal file name"
"PluggableTreeMorph","A pluggable tree morph."
"TimeMeasuringTest",""
"CheckBoxExample","A CheckBoxExample is a simple example of how to use CheckBoxes.CheckBoxExample new openWithSpec"
"MCMultiPackageLoader","A PackageLoader doing some additional cross-package checks"
"RBPullUpClassVariableRefactoring",""
"MessageBrowserTest","A MessageBrowserTest is a test class for testing the behavior of MessageBrowser"
"GlobalIdentifierStonPersistenceTest",""
"SemanticWarningIconStyler","I'm in charge to style an ast when there are semantic warnings"
"DateAndTimeEpochTest","I represent one of several Sunit test Cases intentended to provide complete coverage  for the Chronology set of classes as part of the external testing. The other Chronology sunit test cases are: DateTestCase DateAndTimeLeapTestCase, DurationTestCase, ScheduleTestCase TimeStampTestCase TimespanDoTestCase,  TimespanDoSpanAYearTestCase,  TimespanTestCase,  YearMonthWeekTestCase.  These tests attempt to exercise all public and private methods.  Except, they do not explicitly depreciated methods. tlkMy fixtures are:aDateAndTime = January 01, 1901 midnight (the start of the Squeak epoch) with localTimeZone = Grenwhich Meridian (local offset = 0 hours)aDuration = 1 day, 2 hours, 3, minutes, 4 seconds and 5 nano seconds.aTimeZone =  'Epoch Test Time Zone', 'ETZ' , offset: 12 hours, 15 minutes. "
"WordArray","WordArrays store 32-bit unsigned Integer values."
"MCPatchBrowser","The Monticello patch browser"
"GLMFinder","A GLMFinder models a browsers that behaves like the Mac Finder: whenever the selection port is set on one pane, a new one is created to the right with the selection as entity. The Finder opens the first pane on the entity.The Finder communicates with the Renderer Input ports:- entity: this is passed to the first paneOutput ports:- selection: this port is populated with the value from the last selection port from one of the panes"
"OCPerformTest","I test a primitive failure with perform:withArguments: which was raised when selectors with many arguments was called from methods with small stack sizes."
"CurrentImage","I am an object representing the current image to get all sorted packages for browsing.CurrentImage new packages	=> all packages in the image sorted"
"OSTouchHoldDetector","I am the abstract class for all the Hold gesture detectors"
"OSSDL2GenericRenderer","My instances implement OSWindowGenericRenderer interface by wrapping a SDL2 renderer."
"TxAthensCursor","i am a base class to display a cursor in text"
"GLMPaneTest",""
"SugsDebuggerContext","I know how to talk with a debugger and extract the information needed for the suggestions :)"
"CollectVisitorTest","SUnit tests for class CollectVisitor"
"MCPatch","I represent a set of patch operations which can be applied by sending message applyTo: to my instances. "
"MCLazyVersionInfo","A MCLazyVersionInfo puts ancestor and stepChilds data in WeakArrays to allow their memory to be reclaimed and reloaded on demand.For all purposes, a MCLazyVersionInfo behaves exactly like a MCVersionInfo with the same data, but:- let the ancestry (and step children) be garbage collected- and reload that ancestry (and stepChildren) from the MC repositories when accessed (MCLazyVersionInfo>>loadAncestorsAndStepChildren for the reload, MCLazyVersionInfo>>ancestors and MCLazyVersionInfo>>stepChildren for the access).MCLazyVersionInfo is installed just as the ancestor in a MCWorkingAncestry (the direct ancestry of a WorkingCopy, which is the state all packages take when they are loaded in an image). It allows a MCWorkingAncestry to still know which package it is coming from, and, of course, the MCLazyVersionInfo to be able to reload the relevant ancestry from the right package.Once installed, by flushing the Monticello package cache, all the stored ancestry is garbage collected, except the roots of those ancestry trees, which are the MCLazyVersionInfo instances inside the MCWorkingAncestry instances.Warnings:- Algorithms which traverse the entire ancestry chain of all packages will force a reload of all the packages contained in the image, which is a time and memory and network consuming process...- It degrades gracefully when reloading becomes impossible (returns an empty ancestry, keeps knowledge of the fact some ancestry is missing, reloading a full ancestry on when possible). This has been tested."
"ZnBasicCredential","I am ZnBasicCredential, a concrete subclass of ZnCredential.I implement basic HTTP authentication.I hold a username and password.Part of Zinc HTTP Components."
"InvalidGlobalName","I am a warning signaled when trying to build a class with invalid name."
"PanelMorph","A container morph that tracks the owner's pane colour unless an explicit fillStyle is specified. Additionally allows hooking of mouseOver events (no button down)."
"MarginBorder","Border with customisable inner margin."
"ZnCredential","I am ZnCredential, an abstract class representing credentials in a domain and realm.Part of Zinc HTTP Components."
"RubSHTextStylerST80","I extend SHTextStylerST80 and replace the links for methdos, classes and variables with the Rubric specific links."
"MetacelloPrePostLoadDirective",""
"OrderedDictionary","I am a collection that act as a Dictionary except that I use key insertion order when enumerating, printing, or returing collections of keys/values/associations, but not when testing for equality (but it does not matters in this case).I will assume that you know the Dictionary class in this comment.Description--------------------I work mainly as a Dictionary except that I also store the keys in an Array that keeps the order of elements. I should be used ONLY if you need to keep the keys ordered. Else you should use a Dictionary that is faster and keep less values into memory. (I duplicate the keys).Insertion, update, and inclusion testing have O(1) complexity while removing has O(n) worst-case.Public API and Key Messages--------------------- #at: aKey put: aValue / #at: aKey ifAbsentPut: aValue 		allow to add an element.  - #at: aKey / #at: aKey ifAbsent: aBlock / #at: aKey ifPresent: aBlock ifAbsent: aBlock 		allow to access my values.- #keysDo: aBlock / #valuesDo: aBlock / #associationsDo: 		allow to iterate on me effectively.		- #keyAtIndex: anIndex / KeyAtIndex: anIndex ifAbsent: aBlock 		allow to acess my keys from an index.Examples------------------	""For basic examples see Dictionary comment.""		ordDic := (Dictionary with: 1 -> $a with: 2 -> $b) asOrderedDictionary.	ordDic.   		""returns:  an OrderedDictionary(1->$a 2->$b)""	ordDic keyAtIndex: 2.		""returns:  2""	Internal Representation and Key Implementation Points.-------------------    Instance Variables	dictionary:			<Dictionary>		A dictionary where I store my keys and values.	orderedKeys:		<Array>			An ordered collection where I store my keys to maintain the order.I base my implementation on a Dictionary and when I need to execute an action where the order of the values is important I use the keys in my ordered collection."
"RBNegationCondition",""
"ZnBufferedReadStreamTests","I am ZnBufferedReadStreamTests."
"GLMStringBrick","A GLMStringBrick is low level String Brick. Text can't be drawn outside of Brick's bounds, which makes it very usefull for smart text shrinking.Instance Variables	familyName:		<Object>	font:		<Object>	fontSize:		<Object>	text:		<Object>	textColor:		<Object>	textPosition:		<Object>	textSize:		<Object>familyName	- xxxxxfont	- xxxxxfontSize	- xxxxxtext	- xxxxxtextColor	- xxxxxtextPosition	- xxxxxtextSize	- xxxxx"
"HashTester","I provide a simple way to test the hash properties of any object.  I am given an object that should be tested and I treat it like a prototype.  I take a copy of it when I am given it so that it can't change whilst I am holding on to it.  I can then test that multiple copies of this object all hash to the same value."
"MBInspectConfigurationCommand","Command to inspect a configuration in versionner"
"GLMBrickRenderer","A GLMBrickRenderer is most simple separate renderer of Bricks. It support only borders"
"FreeTypeFace","Do not rearrange these fields!"
"MCSubDirectoryRepository","A MCDirectoryRepository that looks in subdirectories too."
"RBTempVarOverridesInstVarRule","Finds methods whose temporary variables override an instance variable. This causes problems if you want to use the instance variable inside the method."
"ClassListExample","ClassListExample new openOn: Object"
"WarpBlt","WarpBlt is a little warp-drive added on to BitBlt.  It takes a quadrilateral as its source specification, while its destination is traversed and combined just like any other call to copyBits.The source quadrilateral is specified as an array of points starting with the corner that wants to end up in the topLeft, and proceding to the successive points that want to follow CCW around the destination rectangle.  Note that in specifying a plain old rectangle source, its non topLeft points must be actual pixels, not outside by 1, as with rectangle bottmRight, eg.  See the method Rectangle asQuad.WarpBlt does a fast job of rotation, reflection and scaling, and it can even produce a semblance of perspective.  Depth parameters are included for future improvements in this direction. but the primitve does not support this yet."
"OCCopyingTempVariable","A copying temp is a temp that is copied into a block that later reads this variable.Not: the temp vector is passed as a copying temp, too."
"GTEventMultiBundleFactoryTest","A GTEventMultiBundleFactoryTest is a test class for testing the behavior of GTEventMultiBundleFactory"
"DelayNullScheduler","This concrete subclass of DelayScheduler immediately signals the delaySemaphore, effectively eliminating the delay.  This can be useful to facilitate modifications to the DelayScheduler code hierarchy.The delay scehduler is in continual use every 20 - 50 milliseconds due to the UI loop, so it can be difficult to modify (particularly via a continuous integration validation service).  DelayNullScheduler is provided as a substitute to allow the UI loop to continue while the delay scheduler system is taken offline for modifications. If that proves insufficient, try temporarily bypassing the call to #interCyclePause from WorldState>>doOneCycleNow.Select either from ""System > Settings > System > Delay Scheduler"" or do... ""Delay delaySchedulerClass: DelayNullScheduler"""
"GLMTabulatorTest",""
"MetacelloProjectReferenceSpec",""
"FLSqueak4Platform",""
"ExternalFunction","This class represents an external function called from Smalltalk. Instances of ExternalFunction can be created if the address/parameters of the function are known by some other means than loading from a shared library or compiling the appropriate primitive specification.Instance variables:	flags	<Integer>	a set of flags encoding the calling convention	args	<Array of: ExternalType>		the parameters of the functionImplementation notes:The arguments consist of an array with the first element defining the return type, the remaining arguments defining the parameters of the call."
"MessageAsTempNode","This node represents accesses to temporary variables for do-its in the debugger.  Since they execute in another context, they must send a message to the original context to access the value of the temporary variable in that context."
"FFIUInt16","I'm an unsigned short type."
"MetacelloMemberListSpec",""
"Generator","A Generator transforms callback interfaces into stream interfaces. The Generator class was originally written by Paolo Bonzini and inspired from functional programming languages.With basic iterators, you specify an action to be perform to elements of a collection or stream but you do not control when computation pass from one element to the next one. In addition you cannot perform a lazzy computation on potentially infinite stream of objects. Generators offer a nice solution to such problem. Generators provide a way to use blocks to define a stream of values. The return values are computed one at a time, as needed, and hence need not even be finite. A generator needs a block and will make sure that the block is executed once at a time and that the block has the control to decide when to yield computation. A generator offers an API that is compatible with the one of stream since it act as a stream of objects. A generator should be instantiated using the expression ==Generator on: [...]==. The following code creates an infinite streams of 1. [[[| g | g := Generator on: [ :gen | [ gen yield: 1 ] repeat ].g next> 1g next > 1]]]!! Behavior The generator itself is passed to the block, and as soon as a message like ==next==, ==peek==, ==atEnd== or ==peekFor:== is sent to the generator, execution of the block starts/resumes and goes on until the generator's ==yield:== method is called: then the argument of ==yield:== will be the generator's next element. If the block goes on to the end without calling ==yield:==, the generator will produce no more elements and ==atEnd== will return true.A generator is a quick way to create a stream of objects. A generator is a kind of pluggable stream, in that a user-supplied blocks defines which values are in a stream.For example, here is an empty generator and two infinite generators:[[[Generator on: [ :gen | ]Generator on: [ :gen | [ gen yield: 1 ] repeat ]Generator inject: 1 into: [ :value | value + 1 ]]]]As a more concrete example taken from GNU Smalltalk implementation, these lines process a file and create Person objects out of the file:[[[lines := file lines.lines := lines select: [ :line | line ~ '^[A-Za-z]+ [0-9]+$' ].fields := lines collect: [ :line | line subStrings ].people := fields collect: [ :data |            Person name: data first age: data second asInteger ].]]]Let's see how to rewrite them to use a single Generator instead:[[[Generator on: [ :gen |    file linesDo: [ :line || data |        line ~ '^[A-Za-z]+ [0-9]+$' ifTrue: [            data := line subStrings.            gen yield: (Person name: data first age: data second asInteger) ] ] ].]]]As you can see, ==select:== becomes an if-statement, and the value from the final stream is yielded to the user of the generator.Generators use continuations, but they shield the users from their complexity by presenting the same simple interface as streams.Instance Variables	block:		<BlockClosure> The block associated with the generator.	continue:	<MethodContext>	The continuation to return to.	home:		<MethodContext>	The home (root) context of the activated block	next:		<Object>		The next object to return from the Generator."
"SettingBrowserTest","A SettingBrowserTest is a test class for testing the behavior of SettingBrowser"
"PackageTreeNodeModel","I'm a generic model for package tree nodes. "
"GTDebuggerHelp","A utility class containing the help for GT Debugger.Customs debuggers that want to provide a help topic should create a subclass and override GTMoldableDebugger class>>#helpClass.I dynamically build and display  the list of actions  available for a debugger."
"GTPlayBook","This class holds the pages that are loaded in the image.At class initialization time, it loads pages from the cacheDirectory and then maintains the pages in memory."
"InstanceVariableSlot","I add some special behavior: 	-  I override bytecode generation to generate ivar read and write bytecodes	- I print the definition as #name "
"ReMultipleCriticsEvent","A Renraku event with multiple critics."
"GLMSelectCurrentLine","I am event indicating to the renderer to select the entire line containing the cursor."
"RBDefinesEqualNotHashRule","This smell arises when a class defines #= also and not #hash. If #hash is not defined then the instances of the class might not be able to be used in sets since equal element must have the same hash.When a class defines = also and not hash, this can lead to really subtle bugs and behavior where sometimes it appears that an object is in a set and sometimes not. One pattern proposed by Kent Beck in Best Smalltalk Practices is to define hash in terms of instance variable hash xor. Here is an example:		Book>>= anotherBook		^ (self author = anotherBook author) and: [self title = anotherBook title]		Book>>hash		^ (self title hash bitXor: self title hash		"
"GTGoAndInspectBytecodeDebugAction","I am a debugging action that inspects the currently selected bytecode."
"GLMSelectedTextChanged",""
"RBYourselfNotUsedRule","Check for methods sending the yourself message when it is not necessary."
"FLByteArrayStreamStrategy","I am a strategy that emulate what we offer with FLSerializer class >> #serializeInMemory:  and  FLMaterializer class >> #materializeFromByteArray: "
"FLPositive24SmallIntegerCluster","unsigned, 24-bit integer"
"MTProjectModelChanged","A MTAnnouncement is used to signal a change on a MTProject model."
"MetacelloPreLoadDirective",""
"AthensTextRenderer","This is a text renderer, which pipelining a text command(s) , produced by AthensTextComposerinto a concrete calls to canvas.Its using a glyph renderer instance(s) to draw separate font glyphs on a surface in a most suitable/efficientmanner for given Athens surface."
"FLHeader","An instance of FLHeader is serialized together with the orignal object graph to serialize. This header is useful to:1) Attach additional state or metadata associated to the graph being serialized.2) Attach pre and post materialization actions"
"EmbeddedFreeTypeFontInstallerTest","An EmbeddedFreeTypeFontInstallerTest is a test class for testing the behavior of EmbeddedFreeTypeFontInstaller"
"MBAbstractVersionInfo","Abstract info for a version in Versionner"
"RBMoveInstVarToClassTest",""
"MorphTreeListManager","A manager caring about a morphic based tree"
"Path","I'm a private and abstract filesystem path, independent of the string representation used to describe paths on a specific filesystem. I provide methods for navigating the filesystem hierarchy and working with absolute and relative paths. I only refer to a concrete file or directory with regard to a specific filesystem. Normally users should not use me directly. Path independent representation of delimiter is defined by DiskFileSystem current delimiter.API instance creation:#* and #/ are mnemonic to . and /whose arguments should  be string file- or directory names, not fragments of Unix path notation intended to be parsed.#/ and #* provide a mini-DSL for building up paths, while#readFrom:delimiter: parses path strings.Note that (Path with: 'parent/child/') isRelative returns truebecause it creates to a relative path to a file/directory called'parent/child'. In bash you'd escape the slashes like this: parent\/child\/similarly (Path with: '/parent/child/') isRelative returns trueThat's a relative path to '/parent/child'. In bash: /\parent\/child\/(Path with: '') isRelative returns falseBecause this is an absolute path to the root of the file system. Absolute pathshave an empty first element. If you consider $/ the separator,'/usr/local/bin' has an empty first element."
"SystemWindow","SystemWindow is the Morphic equivalent of StandardSystemView -- a labelled container for rectangular views, with iconic facilities for close, collapse/expand, and resizing.The attribute onlyActiveOnTop, if set to true (and any call to activate will set this), determines that only the top member of a collection of such windows on the screen shall be active.  To be not active means that a mouse click in any region will only result in bringing the window to the top and then making it active."
"ZnServerSessionManager","I am ZnServerSessionManager.I manage a collection of ZnServerSession on behalf of a ZnServer.Session ids are stored in cookies.Part of Zinc HTTP Components."
"MetacelloConfigurationResource",""
"NewList","NewList is a new morph as replacement for PluggableListMorph.The API used is hardcoded, but NewListAdapter has been introduced to hold this ""pluggable"" behavior"
"KeyedTreeTest","SUnit tests for keyed trees"
"GTSUnitExampleWithSetUpAndTearDownTest","I am not a test! I provide usage examples for the SUnit debugger."
"GoferApiTest","SUnit tests for Gofer API"
"SelectRuleBrowser","To select rules."
"GLMWrapperTest",""
"GLMActionButtonBrick","A GLMActionButtonBrick is a basic iconified action button without label that supports mouse click, hover and unhover actions.action: with object argument to set on mouse clicked action.hoverAction action: with object argument to set on mouse hover action.unhoverAction: with object argument to set on mouse unhover action.User can set normal icon and icon that will be used when action button is hovered with mouse sending:icon: aFormhoverIcon: aFormInstance Variables	clickAction:		<Object>	hoverAction:		<Object>	unhoverAction:		<Object>clickAction	- action on mouse clickedhoverAction	- action on mouse hoveredunhoverAction	- action on mouse unhovered"
"GTFilterSubstrings",""
"MetacelloMCGroupSpecTestCase",""
"GTExampleAdded",""
"FFIExternalType","I'm an abstract class to implement FFI external types (types who will later be mapped to something understandable for a C library)"
"RBGlobalNode","I am a specialized variable node for temporary variables"
"AthensBezierConverter","I converting all bezier segments to a sequence of line segments, by approximating the curve along its path.This classs is used for generating strokes."
"STONWriterTests","STONWriterTests test serialization."
"EmbeddedFreeTypeFontFontDescription","Common superclass handling fonts that are not found on the disc but embedded in the image.Subclasses should redefine fontContents and originalFileName class methods. To do in the future:	- a proper way to load font file and install them to avoid bloating the image with text that represent binary font data in addition to font themselves!!"
"ZipStringMember","ZipStringMember instances are used to represent files that are going to be written to a ZipArchive.Their data comes from in-image strings, though."
"MetacelloMCProject",""
"RubMorphAnnouncement","I am an abstract class related to morph announcements"
"ZnLimitedReadStream","I am ZnLimitedReadStream, wrapping another read stream delegating to it but limiting reading to a fixed number of elements.I can be atEnd while my wrapped stream is not.My contentSpecies can be forced to be ByteArray (binary) or ByteString (ascii).I do byte/char conversions on the fly (support bivalent access).This implementation is really a kludge.Part of Zinc HTTP Components."
"SortHierarchically","A SortHierarchically is an algorithm used to display a list of classes where subclasses are indented and follow their superclass.Instance Variables	hierarchy: an array of SortHierarchicallyNodes correctly sorted"
"MorphicIconListAdapter","I am the adapter used to bridge an IconListModel and a PluggableIconListMorph"
"DADependencyFromClass","A PDDependencyFromClass is a dependency from the class. The source class is stored in the inst var."
"GLMHighlighterTextStylerDecorator",""
"ImageModel","An ImageModel is a spec model for images"
"LoginFailedException","Exception for signaling login failures of protocol clients."
"AthensQuadSegment","i represent a quadric Bezier path segment.Any quadratic spline can be expressed as a cubic (where the cubic term is zero). The end points of the cubic will be the same as the quadratic's.    CP0 = QP0    CP3 = QP2 The two control points for the cubic are:    CP1 = QP0 + 2/3 *(QP1-QP0)    CP2 = QP2 + 2/3 *(QP1-QP2) "
"STONShortListWriter","STONShortArrayWriter helps in writing short array based STON representations."
"StringMorph","StringMorph is a ""lightweight"" Morph to display a String. It supports only a single font, color, and emphasis combination. For multiple text styles, use TextMorph.Structure:instance var    	Type              Description font 			StrikeFont 		(normally nil; then the accessor #font gives back TextStyle 				or nil			defaultFont) emphasis 		SmallInteger	bitmask determining character attributes (underline, bold, 								italics, narrow, struckout) contents 		String 			The text that will be displayed. hasFocus 		Boolean 		Do I have the keyboard focus or not? If you shift-click on a StringMorph you can edit its string. This is accomplished the following way: StringMorph can launch a StringMorphEditor if it receives a #mouseDown event.A StringMorph may also be used like a SimpleButtonMorph to do an action when clicked. Use the menu 'extras' / 'add mouseUpAction'.The following propery will be defined:aStringMorph valueOfProperty: #mouseUpCodeToRun"
"RBPatternBlockToken","RBPatternBlockToken is the first-class representation of the pattern block token."
"MCOldDataStreamExtensions","This is an extension class for the MCDataStream, it should only used if you need backward compatibility. But we have tested that is only needed because is ""copy-pasted"" code. MC is not using at all the defined types id. This package is unloadeable."
"RBMetaclass",""
"VSCatalogAdderCommand","A VSCatalogAdderCommand adds methods to ConfigurationOf class to declare catalog metadata."
"SugsAccessesToInstVar","I know how to find accesses to an instance var"
"FFIExternalEnumerationTests",""
"MetacelloConfigurationTutorialPart1",""
"RBBlockLintRule","I am a special kind of rule where the verification is specified using a block. The methods checkClass: and checkMethods are the hooks to specify such verifications."
"RBClassRegexRefactoring",""
"True","True defines the behavior of its single instance, true -- logical assertion. Notice how the truth-value checks become direct message sends, without the need for explicit testing.Be aware however that most of these methods are not sent as real messages in normal use. Most are inline coded by the compiler as test and jump bytecodes - avoiding the overhead of the full message sends. So simply redefining these methods here will have no effect."
"WeakKeyToCollectionDictionaryTest","SUnit tests for weak key to collection dictionaries "
"MetacelloVersionNumber","# Metacello version formatThanks to [Mozilla Toolkit version format](https://developer.mozilla.org/en/Toolkit_version_format) for inspiration.##Version FormatA version string consists of one or more version parts, separated with dots or dashes.A version part with a leading dot is numeric. A version part with a leading dash is string.The rationale behind splitting a version part into a sequence of strings and numbers is that when comparing version parts, the numeric parts are compared as numbers, e.g. '1.0-pre.1' < '1.0-pre.10', while the strings are compared bytewise. See the next section for details on how versions are compared.##Comparing versionsWhen two version strings are compared, their version parts are compared left to right. Empty parts are ignored.If at some point a version part of one version string is greater than the corresponding version part of another version string, then the first version string is greater than the other one.If a version string has extra parts and the common parts are equal, the shorter version string is less than the longer version string (1.0 is less than 1.0.0).Otherwise, the version strings are equal. ##Comparing version partsVersion parts are also compared left to right, A string-part that exists is always less-then a nonexisting string-part (1.6-a is less than 1.6).Examples```1 == 1. < 1.0 == 1..--0< 1.1-a < 1.1-aa < 1.1-ab < 1.1-b < 1.1-c< 1.1-pre < 1.1-pre.0 < 1.1-pre.1-a < 1.1-pre.1-aa < 1.1-pre.1-b < 1.1-pre.1< 1.1-pre.2< 1.1-pre.10< 1.1 < 1.1.0 < 1.1.00< 1.10< 2.0```"
"CompositeTransform","A composite transform provides the effect of several levels of coordinate transformations."
"GLMPagerScrollButtonBrick",""
"WeakKeyToCollectionDictionary","This class represents an identity dictionary with weak keys, whose values are collections. Keys not in the dictionary are mapped to the empty collection.  Conversely, if a collection becomes empty, the mapping can be removed to save time and space.  However, because this requires re-hashing, it does not pay to do this to eagerly."
"GLMPortReference","A PortReference is used in Transmissions to bahavior that is specific to a Transmission instance."
"AGroupHasBeenRegistered","Notify that a group has been registered"
"RubTextChanged","I am raised when the text is modified"
"NECContext","A completion is started by the ECController. The controller creates me to compute the context of the completion. The most important information about the context are the receiverClass and the completionToken. I create a ECModel or subclass when requested by the 'model' method.I use SHParser and SHRange to parse the text input."
"AthensCairoSurface","i am a concrete implementation of Athens surface which using cairo graphics library for rendering.Cairo library, by itself can have multiple surface types.This class uses image surface (a bitmap located in system memory) and maps to cairo_image_surface_t* C type.**NOTE**As a workaround of bitblt bug, the actual Cairo surfaces, created internally is with 1 extra pixel higher than requested. This is, however completely hidden from users."
"DoesNotUnderstandDebugAction","A DoesNotUnderstandDebugAction is a debugging action that can create a method if the debugger was opened as a result of a #doesNotUnderstand mesage send."
"ReCriticDescriptionViewed","Happens when someone clicks a question mark and a popup with critic's description appears"
"MetacelloScriptingTestCase","##MetacelloScriptingTestCase**MetacelloScriptingTestCase** implements the test suite that validates the **Metacello** scripting API."
"MCMethodDefinition","A MCMethodDefinition represents a method definition. It captures the following information.Instance Variables	category:		<Object>	classIsMeta:		<Object>	className:		<Object>	selector:		<Object>	source:		<Object>	timeStamp:		<Object>"
"ZnCookie","I represent an HTTP Cookie token.Part of Zinc HTTP Components."
"VSCommitMajorCommand","I open commit tool to create a MAJOR version of target configuration."
"GTSpotterStepsBreadcrumb",""
"OSStateModifiers","i holding a collection of various key/button modifier flags, usually carried by certain events and accessible through #modifiers message."
"SUnitHelp","This is a custom help book for the SUnit framework."
"SugsExtractStatements","A SugsSelectedValidCodeAsMethod the action needed to extract the selection to another method in the same class.THe difference between SugsExtracMethod is that this actually uses the user selection.In fact we should replace the SugsExtracMethod  with this one."
"TxAdapterBindings",""
"RoundedBorder","Rounded corner border supporting radii of 1-4 pixels. Slower but more flexible than CornerRounder."
"GTEventRecorderError","I am an abstract class for all errors related to GT-EventRecorder."
"BitBlt","I represent a block transfer (BLT) of pixels into a rectangle (destX, destY, width, height) of the destinationForm.  The source of pixels may be a similar rectangle (at sourceX, sourceY) in the sourceForm, or a constant color, currently called halftoneForm.  If both are specified, their pixel values are combined with a logical AND function prior to transfer.  In any case, the pixels from the source are combined with those of the destination by as specified by the combinationRule.The combination rule whose value is 0 through 15 programs the transfer to produce 1 or 0 according to its 4-bit representation as follows:	8:	if source is 0 and destination is 0	4:	if source is 0 and destination is 1	2:	if source is 1 and destination is 0	1:	if source is 1 and destination is 1.At each pixel the corresponding bits of the source and destination pixel values determine one of these conditions;  if the combination rule has a 1 in the corresponding bit position, then the new destination value will be 1, otherwise it will be zero.  Forms may be of different depths, see the comment in class Form.In addition to the original 16 combination rules, this BitBlt supports	16	fails (to simulate paint bits)	17	fails (to simulate erase bits)	18	sourceWord + destinationWord	19	sourceWord - destinationWord	20	rgbAdd: sourceWord with: destinationWord.  Sum of color components	21	rgbSub: sourceWord with: destinationWord.  Difference of color components	22	OLDrgbDiff: sourceWord with: destinationWord.  Sum of abs of differences in components	23	OLDtallyIntoMap: destinationWord.  Tallies pixValues into a colorMap			these old versions don't do bitwise dest clipping.  Use 32 and 33 now.	24	alphaBlend: sourceWord with: destinationWord.  32-bit source and dest only	25	pixPaint: sourceWord with: destinationWord.  Wherever the sourceForm is non-zero, it replaces the destination.  Can be used with a 1-bit source color mapped to (0, FFFFFFFF), and a fillColor to fill the dest with that color wherever the source is 1.	26	pixMask: sourceWord with: destinationWord.  Like pixPaint, but fills with 0.	27	rgbMax: sourceWord with: destinationWord.  Max of each color component.	28	rgbMin: sourceWord with: destinationWord.  Min of each color component.	29	rgbMin: sourceWord bitInvert32 with: destinationWord.  Min with (max-source)	30	alphaBlendConst: sourceWord with: destinationWord.  alpha is an arg. works in 16 bits.	31	alphaPaintConst: sourceWord with: destinationWord.  alpha is an arg. works in 16 bits.	32	rgbDiff: sourceWord with: destinationWord.  Sum of abs of differences in components	33	tallyIntoMap: destinationWord.  Tallies pixValues into a colorMap	34	alphaBlendScaled: srcWord with: dstWord. Alpha blend of scaled srcWord and destWord.The color specified by halftoneForm may be either a Color or a Pattern.   A Color is converted to a pixelValue for the depth of the destinationForm.  If a Pattern, BitBlt will simply interpret its bitmap as an array of Color pixelValues.  BitBlt aligns the first element of this array with the top scanline of the destinationForm, the second with the second, and so on, cycling through the color array as necessary.  Within each scan line the 32-bit value is repeated from left to right across the form.  If the value repeats on pixels boudaries, the effect will be a constant color;  if not, it will produce a halftone that repeats on 32-bit boundaries.Any transfer specified is further clipped by the specified rectangle (clipX, clipY, clipWidth, clipHeight), and also by the bounds of the source and destination forms.	To make a small Form repeat and fill a big form, use an InfiniteForm as the source.	To write on a form and leave with both transparent and opapue areas, use a MaskedForm as the source.Pixels from a source to a destination whose pixels have a different depth are converted based on the optional colorMap.  If colorMap is nil, then conversion to more bits is done by filling the new high-order bits with zero, and conversion to fewer bits is done by truncating the lost high-order bits.  The colorMap, if specified, must be a either word array (ie Bitmap) with 2^n elements, where n is the pixel depth of the source, or a fully specified ColorMap which may contain a lookup table (ie Bitmap) and/or four separate masks and shifts which are applied to the pixels. For every source pixel, BitBlt will first perform masking and shifting and then index the lookup table, and select the corresponding pixelValue and mask it to the destination pixel size before storing.	When blitting from a 32 or 16 bit deep Form to one 8 bits or less, the default is truncation.  This will produce very strange colors, since truncation of the high bits does not produce the nearest encoded color.  Supply a 512 long colorMap, and red, green, and blue will be shifted down to 3 bits each, and mapped.  The message copybits...stdColors will use the best map to the standard colors for destinations of depths 8, 4, 2 and 1.  Two other sized of colorMaps are allowed, 4096 (4 bits per color) and 32786 (five bits per color).	Normal blits between 16 and 32 bit forms truncates or pads the colors automatically to provide the best preservation of colors.	Colors can be remapped at the same depth.  Sometimes a Form is in terms of colors that are not the standard colors for this depth, for example in a GIF file.  Convert the Form to a MaskedForm and send colorMap: the list of colors that the picture is in terms of.  MaskedForm will use the colorMap when copying to the display or another Form. (Note also that a Form can be copied to itself, and transformed in the process, if a non-nil colorMap is supplied.)"
"SHRange","I associate a type with a range of characters in a StringI have these instance variables...	start - the one based index of the first character of the range within the String.	end - the one based index of the last character  of the range within the String.	type - a Symbol describing the type of the range	A sequence of instances of me are created by an instance of SHParserST80 which can then used by an instance of  SHTextStyler to style Text. "
"RBGenerateEqualHashRefactoring",""
"PolygonMorphTest","This class holds tests for PolygonMorph"
"NumberParserTest","Provide tests for new clas aimed at parsing numbers.It duplicates NumberParsingTest, with few more tests."
"GLMWizardMorphicTest",""
"TutorialPlayer","I can navigate through an AbstractTutorial subclass. With #next and #previous you can go forward and backward through the tutorial. "
"MCPackageCache","I'm a kind of cache for versions and filenames of packages."
"LocaleIDTest","A unit test class for class LocaleID"
"GLMTabLabelBrick","A GLMTabLabelTurboBrick is  single resizable Tab Label used in LazyTabGroupMorph.Instance Variables	normalLabel:		<Object>	selectedLabel:		<Object>	tabSelector:		<Object>normalLabel	- xxxxxselectedLabel	- xxxxxtabSelector	- xxxxx"
"ExceptionSet","An ExceptionSet is a grouping of exception handlers which acts as a single handler.  Within the group, the most recently added handler will be the last handler found during a handler search (in the case where more than one handler in the group is capable of handling a given exception). "
"ReTrivialCritic","I am a trivial tritic that does not provide any more information other than my target and rule"
"CompiledMethodTrailerTest","SUnit tests for CompiledMethodTrailer"
"Bag","I represent an unordered collection of possibly duplicate elements.	I store these elements in a dictionary, tallying up occurrences of equal objects. Because I store an occurrence only once, my clients should beware that objects they store will not necessarily be retrieved such that == is true. If the client cares, a subclass of me should be created."
"TestWorkingSession","I'm a special working session for test purposes.I provide a way to escape from the UIManager. "
"IRJumpIf","Instruction ""if: boolean goto: labelNum1 otherwise: labelNum2"""
"TextURL","I'm a text attribute used to encode an URL."
"AnimatedGIFReadWriter","Read an animated GIF file.Example: open all images of an animated GIF file in a Morphic windowgifPath :=  '/path/to/my_animated.gif'.forms := (AnimatedGIFReadWriter formsFromFileNamed: gifPath) forms.content := UITheme builder newRow: (forms collect: [:aForm| UITheme builder newImage: aForm]).content openInWindowLabeled: 'Content of ', gifPath."
"ProtocolBrowser","I am a complete UI used to view the protocol methods (via a ProtocolViewer) as well as their source code.I am used to expose the construction of a spec UI in the Spec documentation."
"CheckBoxModel","A CheckboxModel is a spec model for CheckboxYou can also have a look at CheckBoxExample for a full example of how to use them with a group."
"SpecTableLayout","A SpecTableLayout is a variant of spec layout that uses TableLayout layout policy."
"SmallCogState3","Last state of a small cog turning animation"
"DynamicEyeElement","I am a dynamic eye element, if you are too lazy to create your own subclass of AbstractEyeElement, use it..."
"TxStyle","I organize attributes for a single text span.I maintain the following invariant: a span can have any number of attributes, but only one per kind (e.g. foreground color, font, etc)."
"WeakValueAssociation","I am a lookup key (acting like an association but) holding only weakly on my value."
"ConnectionTimedOut","Signals that a connection attempt timed out."
"Class","I add a number of facilities to those in ClassDescription:	A set of all my subclasses (defined in ClassDescription, but only used here and below)	A name by which I can be found in a SystemDictionary	A classPool for class variables shared between this class and its metaclass	A list of sharedPools which probably should be supplanted by some better mechanism.My instances describe the representation and behavior of objects. I add more comprehensive programming support facilities to the basic attributes of Behavior and the descriptive facilities of ClassDescription.The slot 'subclasses' is a redundant structure.  It is never used during execution, but is used by the development system to simplify or speed certain operations.  "
"DAInheritanceDependencyNode","A PDCycleNode is used to display a inheritance dependency in a tree."
"TextAttribute","Tells a piece of text to be a certain way.Select text, press Command-6, choose a attribute.  If selected text is of the form 	Hi There<Smalltalk beep>the part in angle brackets is saved for action, and the Hi There appears in the paragraph.  If selection has no angle brackets, use the whole thing as both the text and the action.TextDoIt  --  eval as a Smalltalk expression (the part in angle brackets)TextLink -- Show a method, class comment, class hierarchy, or class defintion.	<Point extent:>, <Point Comment>, <Point Hierarchy>, or <Point Defintion> are what you type.TextURL -- Show the web page. <www.disney.com>These attributes of text need to be stored on the disk in a regular file-out.  It is done in this form: 	Hi There   	in the text, and a Run containing   dSmalltalk beep;;	Click here to see the extent:   	in the text, and a Run containing   method LPoint extent:;See RunArray class scanFrom: where decoding is done."
"SDL2Handle","My subclasses represent various handles coming from SDL2 library"
"PlatformResolverTest","SUnit tests for PlatformResolver"
"GTFilterImplementor",""
"CustomHelpHelpBuilder","This builder builds help topics from a help topic description (which is typically storedin a class). The help topic description object has to understand the following messages:  #bookName - should return the name of the help book  #icon - should return the icon of the help book  #key - should return a unique key to identify the book  #pages - should return an array of method selectors to call to get the books pages"
"PopupChoiceDialogWindowWithMessage","I'm a dialog which ask the user to select a element in a list. See me in action:UIManager default inform:        (UIManager default                 chooseFrom: #(one two three)                 values: #('1' '2' '3')                  message: 'Select one'                 title: 'PopupChoiceDialogWindowWithMessage example')."
"RPackageTagTest","SUnit tests for RPackage tags"
"LayoutPolicy","A LayoutPolicy defines how submorphs of some morph should be arranged. Subclasses of the receiver define concrete layout policies."
"SpecRowLayout","A SpecRowLayout isthe layout used to specify a new row"
"DAMethodDependencyNode","A PDMethodNode is the superclass node for PDReferenceDependencyNode and PDExtensionDependencyNode. Indeed these two nodes have the same behavior to browse the dependency in the Nautilus UI."
"Komitter","I'm the entry point of this project.I'm a kind of application model for the Komitter - this is why (it could be discussed) I create the UI of the KommiterA classic invocation is| s k |s := KomitStagingArea current.k := Komitter new.k stagingArea: s.k open.k lastCommit  "
"InstVarRefLocator","My job is to scan bytecodes for instance variable references.BlockContext allInstances collect: [ :x |	{x. x hasInstVarRef}]."
"AGroupHasBeenCreated","Notify that a group has been created"
"TextDoIt","A doIt action on a text. When the text is clicked the text is seen as source code and evaluated"
"GTSpotterRecorderContextChangedEvent","A GTSpotterRecorderContextChangedEvent stores current query written in Spotter input field. This event stores the size of the query and wheather or not the current query is a refinment of a previous query.Instance Variables	text:		<String>text	- query writen in Spotter input field"
"RBWhileTrueRule","Checks for users of whileTrue: when the shorter to:do: would work.For example statements1. [index <= stop] 	whileTrue: 	[ 	blockStmts1. 	index := index + 1].statements2"
"KMFactory","I am a class used to access some of the main classes of Keymapping. See my class side to have an idea of what can I give you."
"SDL_JoyButtonDownEvent","SDL2 library structure representing a joystick button down event data."
"GTSpotterCandidatesProcessor","This processor adds the ability of computing and caching all possible candidates. It is useful when we know all candidates upfront."
"RBRuleIfNotEmptyDo","ifNotEmptyDo: should not be used as ifNotEmpty: works for blocks with arguments, too."
"CP1253TextConverter","Text converter for CP1253.  Windows code page used for Greek. "
"GLMDebugSelection","I am event indicating to the renderer to debug the currently selected text."
"MalWeightedHits",""
"GTSUnitActivationPredicate","I decide when the SUnit debugger should be active."
"OSTouchOneFingerDoubleTapEvent","A finger tapped quickly two time at the same position"
"GTPlayPageCachePersistence",""
"DAPackageRelationGraphTest",""
"FileSystemResolverTest","SUnit tests for FileSystemResolver"
"TraitDescription","I add a number of facilities (most defined by traits which are also used in ClassDescription):	Category organization for methods	The maintenance of a ChangeSet, and logging changes on a file	Most of the mechanism for fileOut.	Copying of methods to other traits/classes	Operators to create trait compositions"
"FLVariableObjectCluster","I am a generic cluster for objects with indexable variables."
"FFIExternalStructureFieldParserTests",""
"SDL2TuioObjectStateMachine",""
"SDL_Renderer","I represent a handle of SDL rendering context, coming from SDL2 library"
"SocketPrimitiveFailed","Notify that a socket primitive failed"
"GLMRubEditingAreaBrick","A GLMRubEditingAreaBrick is basic text editor brick used for multi line input fields. vShrinkWrap - height fits text size + vertical paddingshShrinkWrap - doesn't make any sense.vSpaceFill - fills parent vertically. Actual text editor height = parent height - vertical paddingshSpaceFill - doesn't really makes sense, since text area still shrinks to fit text"
"AthensSimpleTreeNode","A node in an AthensTreeView"
"ConfigurationOfRenraku","This is the code quality framework for Pharo. The main goal of Renraku is to provide a concept of quality as a first class entity that can be used by a different tools to improve programming experience.At the moment Renraku is used by:- QualityAssistant- ViDI (uses older version)"
"MCSerializationTest",""
"RubTextFieldArea","I am a TextArea that only has one line of text."
"GLMAnimation","A GLMAnimation class is a basic animation class that works in background thread and performs brick transformation in UI thread"
"StartupUIManager","I am a non interactive UI manager that is used only during image startup, where parts of the system are not fully initialized yet."
"GLMMorphicListRenderer",""
"SugsFormatCode","I know how to format the code"
"NECTypeInfo","I'm used in ECInstVarTypeGuesser to store found type informations."
"DAPackageDependency","A PDPackageDependency is a dependency between two packages.	source:		the source PDPackage 	target:	      the target PDPackage"
"HDTestCoverage","Used to measure test coverage for Hudson reports"
"AssemblyManifest","I store meta-data for a package assembly. I'm the common superclass of all package assemblies."
"BenchmarkResult","I am BenchmarkResult. I know how much iterations where executed in a specific elapsed time duration.I am the result of running the same piece of code multiple times.I can compute my average #frequencey (#executionsPerSecond) and #period (#timePerExecution).I have a human friendly print representation.BenchmarkResult new	iterations: 20000;	elapsedTime: 10 seconds;	yourself."
"ObjectsAsMethodsExample",""
"NautilusTest","A NautilusTest is a test class for testing the behavior of Nautilus"
"ReflectivityControlTest","Tests for Reflective method"
"MalKruskal","Kruskal's algorithm is a greedy algorithm in graph theory that finds a minimum spanning tree for a connected weighted graph. This means it finds a subset of the edges that forms a tree that includes every vertex, where the total weight of all the edges in the tree is minimized. If the graph is not connected, then it finds a minimum spanning forest (a minimum spanning tree for each connected component).See https://en.wikipedia.org/wiki/Kruskal%27s_algorithm"
"BIPrettyPrinterContext","I represent a set of settings that the BlueInk prettyprinter uses. I'm useful to set a prettyPrinter. "
"MetacelloIssueTestCase",""
"RBPushDownInstanceVariableTest",""
"VSReleaseDevelopmentVersionCommand","Turn the version into a release. It therefore appears as #stable afterward""."
"NECContextTest",""
"ZnFileUrlTests",""
"TxStyleTests",""
"RBThisContextNode","I represent the specialized variable named 'thisContext'"
"MetacelloMCProjectSpecTestCase",""
"GTEventBundleTest","A GTEventBundleTest is a test class for testing the behavior of GTEventBundle"
"DADependentPackageItemDiff","A PDDependentPackageItemDiff is a object which represent a dependent package who added/modified/removed from an old analysis."
"OCASTTranslator","I visit an abstract syntax tree and generate IR (intermediate representation) instructions for each node by sending the appropriate message to my methodBuilder (an IRBuilder).  I hold onto my two subclasses one for generating instructions for value, the other for generating instructions for effect."
"SugsSuggestionSwapMethodTest","SUnit tests for the swap method suggestion"
"GTEventTool","I simplify the process of downloading and extracting of recorded data.You likely want to use #ensureLocalDirectory that downloads and extracts server data or #unpackAll if you want to load all data into memory."
"KMShortcutSetting","I represent a shortcut setting. I relate a keymap with its default shortcut and its current shortcut, so it can be mutated."
"MetacelloNullRecordingMCSpecLoader",""
"GLMWhitespaceTheme","The theme is developed in the context of the Glamour project, and its goal is to create a look that:- does not look like a specific operating system.- maximizes whitespace.- is fast.!!Installation of the theme[[[	PolymorphSystemSettings desktopColor: Color white.	self defaultSettings: nil.	self beCurrent.	self setPreferredShoutColors]]]"
"GLMTreePresentation","A GLMTreePresentation  shows the given elements within a tree. The #children block is used to compute the children of an elements. It does not guard against infinite recursion.Instance Variables	allExpanded:		<Object>	children:		<Object>	expandLevel:		<Object>	rootsExpanded:		<Object>	tagsBlock:		<Object>	tagsFilterBlock:		<Object>allExpanded	- xxxxxchildren	- xxxxxexpandLevel	- xxxxxrootsExpanded	- xxxxxtagsBlock	- xxxxxtagsFilterBlock	- xxxxx"
"MorphicMultiColumnListAdapter","I am the adapter used to bridge a MultiColumnListModel and a PluggableMultiColumnListMorph"
"SDL_TouchFingerEvent","SDL2 library structure"
"ListDialogWindow","A ListDialogWindow is a dialog window used to search an element into a list.A text field is provided to on the fly reduce the field or search"
"PackageChecker","Utility class to check packages"
"RubAnnotationDisplayer","I represent a bar with annotations for the text area, like editing mode, line numbers etc"
"MCFileTreeAbstractStWriter","Abstract superclass for FileTree writers"
"SlotExamplePerson","A SlotExamplePerson is an example class to demonstrate the workings of relation slots."
"GLMAccumulatorTest",""
"TextContainer","A TextContainer models the shape of an ownerMorph, possibly occluded by one or more occludingMorphs, and scans this shape to provide a list of rectangles suitable for layout of text.  It does this by displaying the shadow of the ownerMorph in black, and any occludingMorphs in white, on its shadowForm.  It then scans horizontal strips of appropriate height to find unbroken intervals of black, greater than minWidth in extent.  Conputation of the rectangles is done on demand, and results are cached so that text can be redisplayed without having to recompute the rectangles."
"AbstractTutorial","Parent class of all Pharo tutorials.To create your own tutorial:- subclass AbstractTutorial- implement a few methods which returns a Lesson instance- implement tutorial which returns a Collection of selectors to the methods you've created.For example, see MockTutorial (minimalist) and PharoySntaxTutorial (default PharoTutorial one).See the PharoTutorial class comment to execute your own tutorial."
"GLMMorphicDiffRenderer",""
"DummyUIManager","I'm an alternative UIManager used to run an the image without GUI.  I redefine methods which requires user input as these requests are irrelevant in a headless environment. "
"GLMNumberOfVisiblePagesChanged",""
"RBBooleanPrecedenceRule","Checks precedence ordering of & and | with equality operators. Since | and & have the same precedence as =, there are common mistakes where parenthesis are missing around the equality operators."
"LazyClassListExample","LazyClassListExample new openOn: Object"
"GLMEditableLabelBrick","A GLMEditableLabelBrick is improved label that can be edited in-place double-clicking on it or using edit iconInstance Variables	editBrick:		<Object>	labelBrick:		<Object>editBrick	- xxxxxlabelBrick	- xxxxx"
"ProtocolClient","ProtocolClient is the abstract super class for a variety of network protocol clients.It uses a stream rather than the direct network access so it could also work for streams on serial connections etc.Structure:	stream				stream representing the connection to and from the server	connectInfo			information required for opening a connection	lastResponse			remembers the last response from the server.	progressObservers 	any object understanding #show: can be registered as a progress observer (login, transfer, etc)"
"ShoreLineReportSettings","A ShoreLineReportSettings is the setting manager for the ShoreLine Reporter."
"TimespanDoSpanAYearTest","I am one of several Sunit test Cases intentended to provide complete coverage for the Chronology set of classes as part of the external testing. See DateAndTimeEpochTestCase for a complete list. tlk.My fixtures include a Timespan that crosses over a year boundary:aDate = December 25, 2004, midnightaDuration = 91 daysaTimeSpan= 91 days, starting December 25, 2004, midnight"
"RubPluggableTextMorph","This class was introduced to ease the migration to Rubric.It is still based on change/update.Try to not use it "
"InstructionClient","My job is to make it easier to implement clients for InstructionStream. See InstVarRefLocatoras an example. "
"ByteArrayTest","SUnit tests for ByteArray"
"GLMFinderMorphicTest",""
"DoItChunk","I represent the declaration of some code to evaluate.  My contents are the code to evaluate.Sending me the message #import makes me evaluate the code and return the result of the computation.Be careful, my #import method also handles ChangeSet interaction so far, handling Changeset preambles and Postscripts."
"NECInstVarEntry","I represent an instance variable."
"ThumbnailMorph","A Morph that views another morph, its objectToView."
"LongTestCaseTestUnderTest",""
"GLMPhlowPharoMethodBrick",""
"AthensGenericTransform","I am an extended version of my supeclass,and I represent generic 3x3 matrix.<Currently I have no use>"
"GLMBrickScrollPositionChanged",""
"MetacelloEnsureFetchingMCSpecLoader",""
"GLMProfileSelection","I am event indicating to the renderer to profile the currently selected text."
"RBPatternBlockNode","RBPatternBlockNode is the node in matching parse trees (it never occurs in normal Smalltalk code) that executes a block to determine if a match occurs. valueBlock takes two arguments, the first is the actual node that we are trying to match against, and second node is the dictionary that contains all the metavariable bindings that the matcher has made thus far.Instance Variables:	valueBlock	<BlockClosure>	The block to execute when attempting to match this to a node."
"OCStoreIntoSpecialVariableError","Error when trying to assign to a special Variable.(like self )."
"TxEndSpan","End span is span which _always_ last span of text and only one. So this span used to denote end of text."
"GLMRubTextAreaBrick",""
"MetaLinkTest","Tests for MetaLink"
"ManifestSystemHashing","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"PragmaMenuAndShortcutRegistrationItem","A PragmaMenuAndShortcutRegistrationItem is an item of a menu or keymap"
"MorphTreeSelectionChanged","Used to announce the change of a selection in the tree"
"OCAbstractVariable","I am an entry in a Scope that gets associated with variable nodes of the same name. "
"WideCharacterSet","WideCharacterSet is used to store a Set of WideCharacter with fast access and inclusion test.Implementation should be efficient in memory if sets are sufficently sparse.Wide Characters are at most 32bits.We split them into 16 highBits and 16 lowBits.map is a dictionary key: 16 highBits value: map of 16 lowBits.Maps of lowBits  are stored as arrays of bits in a ByteArray.If a bit is set to 1, this indicate that corresponding character is present.8192 bytes are necessary in each lowmap.Empty lowmap are removed from the map Dictionary.A byteArrayMap is maintained in parallel with map for fast handling of ByteString.(byteArrayMap at: i+1) = 0 means that character of asciiValue i is absent, = 1 means present."
"EnumFontFamExProc","int CALLBACK EnumFontFamExProc(  ENUMLOGFONTEX *lpelfe,    // logical-font data  NEWTEXTMETRICEX *lpntme,  // physical-font data  DWORD FontType,           // type of font  LPARAM lParam             // application-defined data);"
"FinderPragmaNode","A FinderPragmaNode is a Node used to render a pragma in the Finder Tree"
"NetworkSystemSettings","I am NetworkSystemSettings, a class side API to manage various system network settings, mostly related to HTTP proxying."
"TxInsertOperation","a history record containing insert operation"
"RubCommentAnnotationDisplayer","Allow the annotation display in class comment pane"
"DAReferenceDependency","A PDReferenceDependency is a reference dependency between two packages. Instance Variables	reference:		the reference class	selector:		the selector that references the class	method : 		the CompiledMethod"
"PSMCClassChangeWrapper",""
"GroupHolder","A GroupsHolder is a simple object which manage a collection of groups"
"BenchmarkResultTest",""
"MTProjectBFSIterator","BFS (see http://en.wikipedia.org/wiki/Breadth-first_search)  iterator for an MTProject graph.We avoid to visit already visited children of a node."
"AthensWrapWorldMorph","An AthensWrapWorldMorph is a AthensWrapMorph holding a specialized Athens WorldMorph. This Athens WorldMorph draws the submorphs with an AthensCanvas.Instance Variables	worldmorph:		the Athens WorldMorph	wrappedWorldDisplay:		a display wrapper"
"FTSimpleDataSource","I'm a simple datasource and just implement a direct-to-table provision of my elements.  I can work with the default implementation of FTTableMorph. Users might want to subclass me to have better options."
"PlatformIndependentEnvironment","I'm a platform independent environment who is intent to work when none other works. Specially, I'm intended to work as a replacement for environments when there is no NativeBoost present, therefore I provide stubs for method calls that answers just default values. "
"GTSpotterBlockIterator",""
"RubSelectorChooserMorph",""
"MTDevelopmentWorkfowTest",""
"BlockLocalTempCounter","I am a support class for the decompiler that is used to find the number of local temps in a block by finding out what the stack offset is at the end of a block."
"GTSpotterCandidatesListProcessor","This is a candidates processor that can be parameterized via blocks."
"GLMAlertBrick",""
"ThirtyTwoBitRegister","I represent a 32-bit register. An instance of me can hold any non-negative integer in the range [0..(2^32 - 1)]. Operations are performed on my contents in place, like a hardware register, and results are always modulo 2^32.This class is primarily meant for use by the SecureHashAlgorithm class."
"RBFloatEqualityComparisonRule","Floating point types are imprecise. Using the operators = or ~= might not yield the expected result due to internal rounding differences."
"CairoFontOptions","i represent various font options exposed by cairo library"
"ZnConstants","I am ZnConstants, holding various constants that we use.Part of Zinc HTTP Components."
"GLMAccumulatorMorphicTest",""
"GLMCompileText","I am event indicating to the renderer to compile the code of the given presentation."
"FileListGrid","A grid for a list of files"
"KomitClassNode","I am a node in the Komit tree representing a class"
"FTExampleMethodModel","I'm a model for exposing method information.I'm an example to be used in FTExampleMethodListDataSource and FTExampleMethodTableDataSource."
"ExternalSemaphoreTable","By John M McIntosh johnmci@smalltalkconsulting.comThis class was written to mange the external semaphore table. When I was writing a Socket test server I discovered various race conditions on the access to the externalSemaphore table. This new class uses class side methods to restrict access using two mutex semaphores, one for removal and one for additions to the table. It seemed cleaner to deligate the reponsibility here versus adding more code and another class variable to SystemDictionary Note that in Smalltalk recreateSpecialObjectsArray we still directly play with the table.Henrik Sperre JohansenThe name is somewhat of a misnomer; the table can be used for any objects, not just semaphores.That is its main usage though, so a split which deals with semaphores and other external objects differently (In the same underlying table) is not currently worth it.Therefore, while in general not all users will care if the table is above a certain size, we still guard  against adding more objects than the limit above which external signals would be lost (on some VMs.)"
"MethodIsExampleAction","Action when the method is an example"
"RBUnreferencedVariablesRule","Check for variables not referenced. If a variable is not used in a class, it should be deleted."
"FTDisplayColumn","I'm a container for columns in the process of being shown in container. I have display column properties (that might or might not be in column it self).Originally I'm used to send data outside container that might be used (for example, resizing)."
"AthensBackgroundChange","Text display command for changing the background color"
"FFICalloutAPITests",""
"OSTextInputEvent","i am delivered when user enters some text"
"FLStreamStrategy","I am a strategy that help tests for writing (and then reading) on streams."
"DuplicatedVariableError","I am an error signalled when a variable is redeclared. For instance when a method is created wich has a temporary or argument with the same name as an instance variable."
"TabExample","I am an example of how to:	- instanciate tabs (#tabs)	- use a tab manager	Nothing really complicated here.self open"
"FLBadSignature","I represent an error produced during materialization when the serialized signature doesn't match the materializer's signature (accessible via FLMaterializer>>signature). A signature is a byte prefix that should prefix a well-serialized stream."
"JobProgressMorph","I combine a progress title and a JobPorgressBarMorph to a visual representation of a Job.Usually I am contained in the global instance of the SystemProgressMorph"
"ShortcutReminder","ShortcutReminder is an object used to bring up a notification whenever a menu entry that has a keyboard shortcut is clicked on instead of using the keyboard.It is configurable from the settings browser, where one can choose the location and size of the notification Morph. The notification also holds a count of how many times a specific menu entry has been reminded for, and will only notify up to that limit. It is possible to set this limit to -1 such that it will always notify."
"RBRuleIfNotNilDo","ifNotNilDo: should not be used as ifNotNil: works for blocks with arguments, too."
"GLMPagerException",""
"PackageManifest","I store meta-data for a package. I'm the common superclass of all package Manifest."
"TextFontReferenceTest","SUnit tests for TextFontReference"
"ZnRequestWrittenEvent","ZnRequestWrittenEvent signals that a request was written in duration milliseconds."
"Warning","A Warning is a Notification which by default should be brought to the attention of the user."
"RBAddRemoveDependentsRule","Check that the number of addDependent: message sends in a class is less than or equal to the number of removeDependent: messages. If there are more addDependent: messages that may signify that some dependents are not being released, which may lead to memory leaks."
"GTFuelPackingTest",""
"GLMScrollPaneBrick","A GLMScrollPaneBrick is a simple scrollpane with customisable scrollbarsInstance Variables	band:		<Object>	lastScrollTimeStamp:		<Object>	scrollPosition:		<Object>	velocity:		<Object>	verticalScrollbar:		<Object>band	- xxxxxlastScrollTimeStamp	- xxxxxscrollPosition	- xxxxxvelocity	- xxxxxverticalScrollbar	- xxxxx"
"MetacelloLinearLoadDirective",""
"GTInspectorPresentationFilter","A GTInspectorPresentationFilter is the root class for filters that can limit the number if visible presentations for an object.Subclasses need to implement  #shouldDisplayPresentationCreateBy: to indicate whether or not a give presentation should be displayed."
"FileHandle","I provide an interface for doing IO on an open file. I keep an id, which as an opaque identifier used by the FilePlugin primitives. I translate positions from the 1-based indexes used in Smalltalk to the 0-based offsets used by the primitives.I do not implement the primitives myself, instead delegating those to an instance of FilePluginPrimitives."
"RGMethodDefinition","RGMethodDefinition is a concrete representation of methods. It can be used to build browser for methods that are not in the image. It is polymorphic with CompiledMethod. * We can ask a RGMethodDefinition for its selector using the selector message.Example:	(Point>>#dist:) asRingDefinition selector		-> #distWe can also ask the ring object representation of its class or the Smalltalk class actually implementing the corresponding compiledMethod. * To access the ring class definition name, use parentName	aRGMethodDefinition parentName	Example:	(Point>>#dist:) asRingDefinition parentName		->  #Point		* If you have a complete model where classes and methods are ring definition, to access the ring class definition , use parent	aRGMethodDefinition parent	Example:	aRGMethodDefinition(Point>>#dist:) parent		->  aRGClassDefinition(Point)		* If you want to access the smalltalk class that contains the compiledMethod that is represented by a ringMethodDefinition, use realParent	aRGMethodDefinition realParent	Example:	(Point>>#dist:) asRingDefinition realParent		->  Point		Now a RingEntityDefinition offers two APIs: one that is generic and works for all the source code entities and this is the one we just presented: parent, parentName and realParent. Having such interface is important to build generic tools that could manipulate any entities in a polymorphic way (yes no isKindOf: everywhere).In addition, a ring method definition offers a specific interface that should only be used when you know that you are solely manipulatespecific entity such as class element: method definition, class comment, and variables. Here is the equivalence table	realParent 				realClass	parent					ringClass	parentName			className* The message class returns the class of the object :).Example:	(Point>>#dist:) asRingDefinition class		->  RingMethodDefinition		* The message className returns the name of the ring class defining the reingMethodDefinition.Example:	(Point>>#dist:) asRingDefinition className		->  #Point				* If you have a complete model where classes and methods are ring definition, to access the ring class definition , use parent	aRGMethodDefinition ringClass	Example:	aRGMethodDefinition(Point>>#dist:) ringClass		->  aRGClassDefinition(Point)				* If you want to access the smalltalk class that contains the compiledMethod that is represented by a ringMethodDefinition, use realClass	aRGMethodDefinition realClass	Example:	(Point>>#dist:) asRingDefinition realClass		->  Point"
"FFITestEnumeration",""
"TxTabDisplayCommand",""
"ManifestFiles","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"AthensCubicBezier","Cubic bezier with 4 control points encapsulation.Main purpose of this class is to keep subdivision logic in clean and separate place"
"EyeDictionaryInspector","Specialized version of inspector showing keys on left panel and values on description panel"
"MBPackageHistoryCommand","Command to browse package history in versionner"
"CollectionValueHolderTest",""
"FileExistsException","Notify when file exists"
"RBContainsRule","Checks for the common code fragment: ""(aCollection detect: [:each | ''some condition''] ifNone: [nil]) ~= nil"". contains: can simplify this code to ""aCollection contains: [:each | ''some condition'']"". Not only is the contains: variant shorter, it better signifies what the code is doing"
"MCMockClassI",""
"RPackageUnregistered","I am a public announcement sent when a new RPackage is unregistred ( kind  of removed from the system )"
"AbstractMethodReferenceConverter","Abstract wrapper for method references"
"TextStyleAsFontFamilyMember","TextStyleAsFont Family members"
"RBScannerTest","SUnit tests for RBScanner"
"GTSpotterContextChanged",""
"AnnouncementSetTest","SUnit tests for announcement sets"
"RBPharoBootstrapRule","I check that packages constituing the Pharo Bootstrap do not depend on any other package."
"CategoryWidget","CategoryWidget is an abstraction describing a widget used to manage categoriesNote however that the design is ugly because it mixes UI and Model. All the code in this hierarchy is conceptually bogus and should be rewritten."
"TxMouseCursorAttribute","I control the mouse cursor appearance when the user holds the mouse over it."
"GTPlayPagePersistence",""
"Break","I am a Breakpoint signal.use class Breakpoint to insert me reflectively"
"MCHttpRepository","I am general http repository for monticello.I support the general protocol for listing files in a remote repository."
"PharoTutorialHelpTutorialBuilder","I build HelpSystem topics to browse PharoTutorial tutorials"
"RBNullFormatter","A simple null formatter that just delegates  to source code and is not good when nodes are reflectively built.Will be replaced by RBSimpleFormatter"
"Shape","I am an abstract class that knows my bounds and if a point is contained in me."
"Komit","I am a representation of a commit.I am abstracted from Monticello to be able to be reused with other frameworks"
"FFIFunctionResolutionStrategy","I define a strategy of function resolution for doing callouts. By default, functions are obtained in first execution of it, in VM side (it just do a lookup of the symbol, and installs it in the ExternalLibraryFunction literal (no point in doing it every time). Sometimes we need to obtain this function pointers in different ways (for example when doing indirect calls: accessing functions installed in a global symbol, instead the real name of it). My children will implement different strategies to obtain this function pointers. They need to provide two methods: isApplicableFor:  ""answers true if function should be resolved using this strategy""resolveFunctionAddress: ""answers the solved function address (an ExternalAddress)"""
"MetacelloSpecLoader",""
"EyeAbstractInspector","I am the abstract superclass for all kind of inspectors"
"SpecTransferMorph","I am a Spec specific subclass of TransferMorph used to initialize the trasnfer morph state correctly with the Spec constraints"
"IRBytecodeGenerator","Handles the byte code generation of jumps, literals and similar things. Byte code independent. The encoder is bytecode dependent.I generate bytecodes in response to 'instructions' messages being sent to me.  I rewrite jumps at the end so their jump offsets are correct (see #bytecodes).  For example, to create a compiled method that compares first instVar to first arg and returns 'yes' or 'no' (same example as in IRBuilder), do:	BytecodeGenerator new		numArgs: 1;		pushInstVar: 1;		pushTemp: 1;		send: #>;		if: false goto: #else;		pushLiteral: 'yes';		returnTop;		label: #else;		pushLiteral: 'no';		returnTop;		compiledMethodYou can send #ir to the compiledMethod to decompile to its IRMethod, and you can send #methodNode to either to decompile to its parse tree.Instance Variables	additionalLiterals:		<OCLiteralSet> Those are literals evaluated for effect and optimized control flow messages selectors used in the method in order to be able to do sendersOf: on these literals with success.	bytes:		<OrderedCollection of bytes> current sequence of bytecodes being written 	encoder:		<BytecodeEncoder> Set the one you need depending on which bytecode set you want to use.	forceLongForm:		<Boolean> true if instance variable access requires a long form (typically, Context access)			Following inst vars are used to map bytecode pc to IR instruction		instrMap:		<OrderedCollection>	instrMaps:		<IdentityDictionary of OrderedCollection>				lastLiteral:		<Behavior> Basically in the case you would compile without annotating the method with its class and its selector, this literal is used to enforce the method class to be a literal to allow super sends.	lastSpecialReturn:		<Message> used to generate quick returns	literals:		<OCLiteralList> literals of the methods	numArgs:		<Smi> number of arguments of the method	numberOfTemps:		<Smi> number of temps of the method	primNumber:		<Smi> primitive number (or 0)	properties:		<AdditionalMethodState | nil> used to hold the additional method state (pragmas for examples)				Following inst vars are used to correctly map the jumps (See #initialize for extra information)	orderSeq:		<OrderedCollection> Reverse map of seq order	seqBytes:		<IdentityDictionary>	seqOrder:		<IdentityDictionary>	jumps:		<IdentityDictionary>	currentSeqId:		<Object>	currentSeqNum:		<Smi>				stack:		<Stack> simulated stack. Only simulates the depth of the stack. Store its maximum value in stacks instance variable.	stacks:		<IdentityDictionary (seqId -> stackCount)> used to find out the maximum depth of the method and therefore set the largeFrameBit"
"GroupNode","A group node in the morph tree"
"ColorChanged","I'm a Announcement used to indicate a color has changed. Example:(ColorSelectorDialogWindow new                        title: 'Choose a color';                        open;                        announcer) on: ColorChanged  do: [:ann|                                                                        UIManager inform: 'Selected color: ', ann newColor asString]."
"VSDetailsLeafNode","A VSDetailsLeafNode is used to display dependencies requirements or project loads in a tree."
"DosTimestampTest",""
"GTExampleProviderMethod",""
"GTPlaygroundBindingsList",""
"GTPlayPageStashPersistence",""
"UndoRedoRecord","An UndoRedoRecord is a leaf of an history tree. It  holds undo and redo commands. Such a command is represented by a MessageSend. Instance Variables	redoMessage:		<MessageSend>	undoMessage:		<MessageSend>redoMessage	- The command which is performed for redoingundoMessage	- The command which is performed for undoing"
"TabGroupMorph","Organises a set of pages sharing the same space and selected through the use of tabs along the top."
"ClassAnnouncement","I am an abstract class used to gather all the announcements related to class modifications."
"RBRenameInstanceVariableChange",""
"GLMMorphicVariablePanesFinderRenderer",""
"TheHeartOfSpec","A SpecExamples is the second sub-book of SpecHelpTopics. It contains the core of Spec briefly explained.See class side for selectors."
"RBDeprecateMethodRefactoring","A RBDeprecateMethodRefactoring is a class, that represents functionality of deprecate refactoring.Instance Variables	oldSelector	:	<Object>	newSelector:		<Object>oldSelector	- is a selector which shouldn't be used anymore, it's deprecatednewSelector	- is a selector which will be used instead of a deprecated one	Note: It is recommended to use this refactoring only if number of arguments is either equal in both selectors, or the new one has no arguments at all.If new selector has fewer number of arguments than the old one, it may lead to unexpected results.If you use it in other conditions an error may be be occured."
"FontFamilyMemberAbstract","Abstract member for a font family"
"MetacelloVersionValidator",""
"StoredSettingsMerger","I merge several stored settings together. If you ask me twice to store same stored settings, the last one wins. Collaborators: SystemSettingsPersistencePublic API and Key Messages- addStoredSetting:- addStoredSettings:- storedSettings   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	storedSettings:		<Collection of StoredSetting>"
"WindowLabelled","I am emitted when a window title changed. You can ask me for the windowand the changed label (no old/new label data is provided, just the actual one).This is usefull for window manager or window grouper that provide an overviewfor the active windows. Or like the window grouper, that creates tab panes and labelsthe tabs with the current window title."
"OCAbstractMethodScope","I am an abstract superclass for Block and Method scopes"
"RGMonticelloTest","SUnit tests for monticello"
"RubAnnouncement","I am an abstract announcement class. Extend me if you want to use an announcement related to a Rubric action  "
"FLClassWithRecursiveSubstitution","A test mock for a class with recursive substitution"
"PragmaCollectorReset","A PragmaCollectorReset is an announce which is announced by a PragamColllector when it is reset.see PragmaCollector>>reset.Instance Variables	collector:		<PragmaCollector>collector	- the collector which is reset"
"RbScriptingSetBeforeModel","You have to call scripting methods after #model: or it will not work"
"TxLineSeparator","I represent a line separator(NOT a new line in text).My size is always 1. And my textual representation is always Character cr.I have only two valid span positions: 0 - denotes the last valid position of the previous line (line end) 1 - denotes the first valid position of the next line (line start).My attributes define the default attributes of the new line, so even if the next spanis a line separator (meaning that the next line is empty), I can provide information about visual properties such as line height etc."
"GTSpotter","I am  the main model class.I handle the list of current search steps and provide the main functionality for spawning new search steps or removing old ones.I maintain search steps as a stack. I  trigger a search when the user enters a query (#setText:from:) and maintain the search text.To avoid crashes due to exceptions in search processors I can install an exception handler that prints exceptions to the transcript instead of opening a debugger (#beDeployment). Afternatively I can install an exception handler that  propagates exceptions (#beDeployment)"
"SystemDictionaryTest",""
"NBExternalStructureFields","I'm a stub class intended just to easy migration from NB to UFFI. There is no corresponding class to replace me (you should not need it).In case you still need it, please contact community (pharo-users, slack) to get support."
"EyeViewHierarchyInspector","A special tree inspector that displays the submorph hierarchy of the inspected morph."
"ZnBufferedReadStream","I am ZnBufferedReadStream.I wrap another ReadStream and add efficient buffering for the typical access pattern of parsers: sending lots of #next, #peek and #atEnd messages.By design I do not implement #position and #position: or anything based on that.I can wrap both binary or character streams and act accordingly.Part of Zinc HTTP Components."
"RubScrolledTextSideRuler","I am an abstract class to add decoration on a text area"
"PackageTreeTagSelection","I'm a tag selection."
"InvalidPackageName","I am a warning signaled when trying to build a class were the category is empty"
"GLMActionsToolbarMorphicTest",""
"DAPackageRelationGraph","I'm a package dependency graph. To build the dependency graph among packages, you have just to give a set of PDPackage on entry. Then :	- use the message computeStaticDependencies messages to retrieve all the dependency among the packages.	- use the message removeInternalDependencies if you want to remove all the internal dependency.	- finally use combineDependencies to combine each dependency which have the same source and the target into 	composite dependency.		"
"RBRefactoryDefinitionChange",""
"SystemSettingsPersistenceTest","A SystemSettingsTest is a test class for testing the behavior of SystemSettings"
"ClassEyeElement","I am an eye element for the class of an inspected element."
"GLMDynamicMorphicTest",""
"Clipboard","The Clipboard class is the abstract superclass for the concrete platform specific clipboard. The legacy clipboard support using the VM supplied primitives is implemented by Clipboard/ExternalClipboard.The Clipboard implements a basic buffering scheme for text. The currently selected text is also exported to the OS so that text can be copied from and to other applications. Commonly only a single instance is used (the default clipboard) but applications are free to use other than the default clipboard if necessary."
"RubCharacterBlockScanner",""
"SoundSystem","This is the base class for a sound system. A sound system offers a small protocol for playing sounds and making beeps. While SoundSystem is an abstract class, it acts as a facade to the actual SoundSystem.When the SoundPackage is not loaded, SoundSystem current refers to DummySoundSystem. SoundSystem current gives access to the currently installed SoundSystem.When no SoundSystem is available, a dummy one is installed as current.      SoundSystem soundEnabled: true.SoundSystem current beepSoundSystem current: BaseSoundSystem new"
"SetEyeElement","I am an eye element for sets, showing appropriate thing with indexes"
"PluggableThreePhaseButtonMorph","A PluggableThreePhaseButtonMorph is an extesion of ThreePhaseButtonMorph to make it pluggableThen a model can be defined, and queried for state, on image, off image and pressed image."
"SettingDeclaration","A SettingDeclaration is an handler for a writtable setting value. Its main responsibility is allow real value changing and to hold descriptive data about the setting. When the real value is changed, all declared listeners are notified. The standard event mechanism is used for that purpose. See #value: method which is call in order to change a setting value. Whatever object can declare its interest in the real value changes by sending #whenChangedSend:to: to a setting. See notification protocol.For convenience, my olds values are registered in a list. This list is used by the SystemSettingBrowser in order to easily retrieve previous values.The type instance variable is a Symbol. It is used by the SystemSettingBrowser in order to build the input widget of a setting.It can be the name of the class or the name of a superclass of the value. In that case, the input widget is built by #settingInputWidgetForNode: implemented by the class which name is the value of the type instance variable. As an example, the input widget for a Boolean is built by Boolean class>>settingInputWidgetForNode:.Type value is not limited to be a class name. It can also be whatever symbol. In that case, the selector corresponding to the message to send to the setting in order to build the inputWidget is built by SettingDeclaration>>localInputWidgetSelector. If the type instance variable is not set, then it is dynamically set to the class name of the value. See SettingManager comment for more explanations.Instance Variables	default:		<Object>	getSelector:		<Object>	ghostHelp:		<Object>	setSelector:		<Object>	type:		<Object>default	- xxxxxgetSelector	- xxxxxghostHelp	- xxxxxsetSelector	- xxxxxtype	- xxxxx"
"GTFilterStringMatch",""
"GLMMorphicVerticallyStackedRenderer",""
"GTPlaygroundPlayPagesList",""
"CP1252TextConverter","Text converter for CP1252.  Windows code page used in Western Europe."
"STONTestDomainObject","STONTestDomainObject is used to support unit tests.Instance Variables	boolean:		<Boolean>	bytes:			<ByteArray>	color:			<Symbol>	created:		<DateAndTime>	description:	<String>	float:			<Float>	integer:		<Integer>	modified:	<DateAndTime>	tags:			<Array of: Symbol>"
"IRJump","Instruction ""goto: labelNum"""
"VSValidateConfigurationCommandTest",""
"GTSpotterA3",""
"FFIOpaqueObjectType","I'm  an opaque object type (see ==FFIOpaqueObject== comment)"
"FLSqueak43Platform",""
"RBRenameClassTest",""
"AthensPathBuilder","i am abstract path builder, to specify an interface protocol which is available for building paths,by using  canvas or surface #createPath: method."
"MetacelloRemoveMemberSpec",""
"EventManagerTest",""
"OCAbstractLocalVariable","I am an argument or temporary variable of a method or block.index is not the index in the bytecode but just used for sorting(see tempVars). to be fixed..."
"SimpleEditor","See comment in Editor"
"GLMUpdateInterdependentPanesTest",""
"ZnNetworkingUtils","I am ZnNetworkingUtils holding various utilities related to HTTP networking.My class side is a general API.My instance side is a factory.ZnNetworkingUtils default socketStreamClass: SocketStream.ZnNetworkingUtils default socketStreamClass: ZdcSocketStream.Part of Zinc HTTP Components."
"VSLoadCommand","Load into your image the selected version or baseline. If you already have a version installed, then it will be simply overriden"
"TextEmphasis","A TextEmphasis, encodes a characteristic applicable to all fonts.  The encoding is as follows:	1	bold	2	itallic	4	underlined	8	narrow	16	struck out"
"OSWindowAttributesTest","An OSWindowAttributesTest is a test class for testing the behavior of OSWindowAttributes"
"UpdateFileNotLoaded","This warning is signalled if during the update process, certain update files cannot be found."
"DiffChangeMorph",""
"ManifestMultilingualEncodings","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"WeakSetTest","A trait for test purposes"
"GTSpotterGlobalShortcut","KMRepository reset"
"OCASTClosureAnalyzer","I visit the AST of method a second time (after OCASTSemanticAnalyzer) to analyze temps related to closures."
"ColorPresenterMorph","Displays a colour with alpha against a white, hatched and black background."
"ZnByteStringBecameWideString","I am ZnByteStringBecameWideString, a resumable Error signalled to indicate that some byteString was changed to a wideString.Used by ZnUTF8Encoder>>#readInto:startingAt:count:fromStream: to avoid a #becomeForward: when a ByteString automagically changes into a WideString.Part of Zinc HTTP Components."
"FFIOpaqueObject","I represent an opaque type (https://en.wikipedia.org/wiki/Opaque_data_type) living in the C heap. This is usefull when working with obscure types (types we do not know its composition).Take this as an example (taken from SQLite bindings): [ [ [ typedef struct sqlite3 sqlite3;typedef struct sqlite3_stmt sqlite3_stmt; ] ] ]this defines a type of a structure, and then is used along the api in this way: int sqlite3_open(char *filename, sqlite3 **handle);char *sqlite3_column_name(sqlite3_stmt* aStatement, int aColumn)this means we always access them through a reference. Now, we could declare the pointer to the structures, but then our declarations wouldn't be as close to C as we want. This i where I come to help. Instead using a FFIExternalObject, we use an FFIOpaqueObject. This means we will have a type reference (that we cannot use dereferenced, see ==FFIDereferencedOpaqueObjectError==).In the case of the example, it would work like this: [ [ [ TypeMap := Dictionary newFromPairs: #(	sqlite3		      	FFIOpaqueObject	sqlite3_stmt		FFIOpaqueObject).self ffiCall: #(int sqlite3_open(String filename, sqlite3 **handle)).... self ffiCall: #(const void *sqlite3_column_blob (sqlite3_stmt* aStatement, int aColumn)) ] ] ]"
"GLMHighlightAndEvaluate","I am event indicating to the renderer to execute the  highlighted text and perform an action with the result."
"GLMLabelBrick","A GLMLabelBrick is standard label Brick, that can shrink text if it's size becomes smaller then actual text size.Text shrinking works out of box, you don't need to do anythingInstance Variables	dotsBrick		<GLMStringBrick>	isDotsAdded:		<boolean>	stringBrick:		<GLMStringBrick>dotsBrick	- represents a Brick that is added at the end of the text when Brick's size becomes smaller than actual text sizeisDotsAdded	- true if dotsBrick is currently added visible, false otherwisestringBrick	- represents actual label text Brick"
"MetacelloRepositoriesSpec",""
"AssociationTest","SUnit tests for Associations"
"MethodNameEditor","A MethodNameEditor is an editor to set the name of a method.This class is imported from OB.Maybe it should be redone with Spec, but since it works well, I will not put more energy here."
"GLMFormatedPresentation","GLMFormatedPresentation is an abstract presentation that offers a format block to be used for formatting the rendering of the presentation. The renderer will use the formatDisplayValueOf: method."
"RubColumnDisplayer",""
"Alien","Copyright 2008 Cadence Design Systems, Inc.      Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0Instances of Alien represent actual parameters, return results and function pointers in FFI call-outs and call-backs and provide handles on external data.  See NewsqueakIA32ABIPlugin for the VM code that actually implements call-outs and call-backs.See the class-side examples category for some simple example workspaces.Aliens represent ABI (C language) data.  They can hold data directly in their bytes or indirectly by pointing to data on the C heap.  Alien instances are at least 5 bytes in length. The first 4 bytes of an Alien hold the size, as a signed integer, of the datum the instance is a proxy for.  If the size is positive then the Alien is ""direct"" and the actual datum resides in the object itself, starting at the 5th byte.  If the size is negative then the proxy is ""indirect"", is at least 8 bytes in length and the second 4 bytes hold the address of the datum, which is assumed to be on the C heap.  Any attempt to access data beyond the size will fail.  If the size is zero then the Alien is a pointer, the second 4 bytes hold a pointer, as for ""indirect"" Aliens, and accessing primitives indirect through the pointer to access data, but no bounds checking is performed.When Aliens are used as parameters in FFI calls then all are ""passed by value"", so that e.g. a 4 byte direct alien will have its 4 bytes of data passed, and a 12-byte indirect alien will have the 12 bytes its address references passed.  Pointer aliens will have their 4 byte pointer passed.  So indirect and pointer aliens are equivalent for accessing data but different when passed as parameters, indirect Aliens passing the data and pointer Aliens passing the pointer.Class Variables:GCMallocedAliens <AlienWeakTable of <Alien -> Integer>> - weak collection of malloced aliens, used to free malloced memory of Aliens allocated with newGC:LoadedLibraries <Dictionary of <String -> Alien>> - library name to library handle map"
"TextConverter","The abstract class for all different type of text converters.  nextFromStream: and nextPut:toStream: are the public accessible methods.  If you are going to make a subclass for a stateful text conversion, you should override restoreStateOf:with: and saveStateOf: along the line of CompoundTextConverter."
"RubScrolledTextMorph","I am the common morph to represent a text area. I should be created by my model, a RubScrolledTextModel. The tool should talk to my model and not me directly "
"ZnResponseTests",""
"OCMockCompilationClass",""
"MCVersion","A Metacello version"
"RBRemoveAssignmentWithoutEffectRule","See my #longDescription ."
"SDL_Joystick","I represent a handler for a joystick coming from SDL2."
"TraitTransformation","A trait transformation is an instance of one of my concrete subclasses, TraitAlias or TraitExclusion. These represent a transformation of a trait, specified by the alias and exclusion operators. I define an instance variable named subject which holds the object that is transformed.  Thus, an alias transformation has as its subject a trait, and a trait exclusion has as its subject either a trait alias or a trait. Each of the concrete transformation classes implement the method allSelectors according to the transformation it represents. (There was formerly a subclass called TraitHolder, which was the identity transformation and which did not modify the trait.  This was clearly redundant, and was removed.)"
"FFIFloat32","Float type. Represented as float in C side."
"Bitmap","My instances provide contiguous storage of bits, primarily to hold the graphical data of Forms. Forms and their subclasses provide the additional structural information as to how the bits should be interpreted in two dimensions."
"ManifestTextCore","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"MCTraitParser","A MCTraitParser extracts an MCTraitDefinition from the source."
"RubSurfaceSelectionShape",""
"MorphExtension","MorphExtension provides access to extra instance state that is not required in most simple morphs.  This allows simple morphs to remain relatively lightweight while still admitting more complex structures as necessary.  The otherProperties field takes this policy to the extreme of allowing any number of additional named attributes, albeit at a certain cost in speed and space."
"GLMMorphicCompositeRenderer",""
"MCWorkingCopy","MCWorkingCopy represents one version of a package in memory. It provides support for ancestry access, required packages and the repositories in which the package is managed.Instance Variables:	versionInfo	<MCAncestry>	ancestry	<MCWorkingAncestry>	counter	<Number>	repositoryGroup	<MCRepositoryGroup>	requiredPackages	<Collection>"
"SugsSuggestion","I'm the representation from a suggestion that can be executed.I have some information related to the suggestion."
"EditorFindReplaceDialogWindow","A find/replace dialog window for editors"
"TestValueWithinFix",""
"NECClassVarTypeGuesserTest",""
"KeymapBuilderTest",""
"IRTransformTest",""
"MCMcdWriter","Writing MCD format"
"RBGuardingClauseRule","Checks for ifTrue: or ifFalse: conditions at end of methods that have two or more statements inside their blocks. Such code might better represent the true meaning of the code if they returned self instead."
"GLMMorphMorphicTest",""
"RPackageReadOnlyCompleteSetupTest","The tests takes as fixture the following situation and exercises the readonly queries.We should be able to use a test resources to speed it up.P1 	A1DefinedInP1	A1DefinedInP1>>methodDefinedInP1	B1DefinedInP1		A2DefinedInP2>>methodDefinedInP1	P2	A2DefinedInP2	A2DefinedInP2>>methodDefinedInP2	B2DefinedInB2	P3	A3DefinedInP3		A2DefinedInP2>>methodDefinedInP3 "
"GTBytecodeDebuggerSmokeTest",""
"AbstractFieldModification","I am an abstract field modification.Field modifications encapsulate the changes required to migrated instances."
"AthensCompositeStrokePaint","i am used to convert CompositeBorderStyle into paint, used in Morphic.The ""withInset"" attribute defines whether each sub stroke  outlinesa smaller rectangle. If not, all strokes draw the same rectangle.(useful for multi-color-dashes)"
"RBShortAssignmentToken",""
"NewListModel","| m |m := NewListModel new.m items: (10 to: 50) asOrderedCollection.m headerTitle: 'Fubu'.m setSelectedIndex: 5.m openWithSpec."
"SDL_TouchFingerUpEvent","SDL2 library structure"
"IRReturnInstVar","specific node when returning an inst var"
"MultiColumnListModel","A MultiColumnListModel is a spec model for Multi columns list"
"SDL2AthensExample","Superclass to show how to use OSWindow properly with athens"
"ObjectFinalizerTests",""
"WaitfreeQueue","This is a thread-safe implementation of a queue with wait-free operations. It is guaranteed that any message sent to my instance (like adding new item, or fetching item) will not block sender,nor enter a waiting loop.The implementation is based on atomicity of simple assignment operations, which can't be interrupted in a middle,i.e. two assignment statements in a row, like:x:=y.y:=z.can't be interrupted by interpreter and can be seen as a single atomic operation.This implementation fits best for case, when multiple threads populating queue, but only single thread fetching items from it.In given implementation, inserting new items into queue can't block the sender and insertion operation always takes constant time (if we ignore the possible GC interference here).For reading/polling operations queue using a lock mechanism, which indicating that queue currently in the middle of extraction,and therefore, if some thread obtained a lock upon the queue, other threads must wait till one that obtained the lock will finish its operation(s) and release the lock.All operations which may block the sender will answer the default value(s) instead. "
"ZnClientFollowingRedirectEvent","ZnClientFollowingRedirectEvent signals that a redirect to target is being followed. How many redirects to follow, if any is configurable."
"UUIDPrimitivesTest","SUnit tests for UUIDPrimitives "
"DAPackage","I am a PDPackage and i represent a package (RPackageSet) and all his dependencies (PDPackageDependency).Instance variables :	- dependencies : a collection of PDPackageDependency (actually the nodes of a graph dependency, from a source PDPackage to a target PDPackage)	- included : says if the PDPackage is included or not in the set of packages at the beginning.	- rpackage : the instance of asRPackageSet 		- inStack : useful for tarjan algorithm and cycle algorithm. It avoid stack access	- tarjanIndex and tarjanLowLink : integer for the tarjan algorithm.	- bfsParent : see cycle algorithm	- seen : says if all dependencies have been added to the Package"
"ColorFillStyle","Simple fillstyle that draws a color at the specified origin with option extent."
"IRVisitorTest",""
"RBParserTest","SUnit tests for RBParser"
"AthensEllipticalArcSegment","I representing an elliptical arc, using endpoint parametrization:- initial endpoint (x0,y0), which comes from previous segment- final endpoint (x1,y1)- rh, rv , the radii of unrotated ellipse- Large arc flag: true if more than 180 degrees of the arc is to be traversed (as measured on the unscaled circle), false otherwise- Sweep flag: true if the arc is to be traversed in the counter-clockwise direction, false otherwise(not functional yet)"
"ZnStreamingEntity","I am ZnStreamingEntity, a concrete HTTP Entity based on a stream.I am a ZnEntity.When a ZnStreamingEntity is created using #readFrom: its content type and length are set but no body is actually read.Instead, stream is set to a ZnLimitedReadStream that clients can/mustuse to read from.When the client is done, either all data must be read or #consumeContent must be called.A client should normally not close the stream.A ZnStreamingEntity can also be instanciated with an existing read stream.During #writeOn: this stream is copied to the output stream.Part of Zinc HTTP Components."
"GTSpotterRecorderSearchFinishedEvent","A GTSpotterRecorderSearchFinishedEvent is triggered when spotter finished a search and displayed all the results. This event stores the size of the query."
"MetacelloMCProjectSpec",""
"OSTouchTwoFingersRotationMoveEvent","Two fingers are rotating"
"GLMMorphicPharoCodeRenderer",""
"RBAddParameterRefactoring",""
"VSCommitStrategy","I define the collection strategy for the commit: - should I commit dirty packages?- should I commit projects?- should I include nested projects?By default, strategy is complete (yes, yes and yes), but users can change if it convinces them.I'm included in a commit unit and I should not  be accessed outside it. "
"RubCodeSizeFeedback","I represent the colored feedback to alert a too long method"
"OCBlockScope","I modelt the scope of a block"
"BISettingsChanged","I am raised when a setting of BlueInk is changed"
"DAPackageAnalyzerWindow","A PDPackageAnalyzerWindow class is an abstract class.It represents the UI merging the SpecTreeModel (package dependencies or cycles) and Nautilus UI.The main feature is to browse automatically in the Nautilus when you click on a node (package or dependency)."
"SDL2TouchGestureExample2","Only one gesture at the time, you can scroll to move the circle, pinch to zoom, rotate to rotate, double tap to change the color of the circle and swipe to have a little surprise"
"UnixResolver","I am an expert on Unix filesystem conventions. I resolve origins according to these conventions."
"MBMonticelloPackagesResource","A test resource for test purposes for Versionner"
"ZdcSimpleSocketStream","I am ZdcSimpleSocketStream.I am a ZdcAbstractSocketStream.I do a minimal implementation of the requirements defined by my superclass.I rely on the rather inefficient implementation of my superclass' methods, funneling all access through #next and #nextPut."
"KomitterManager","I am used to temporarily store a version for a package while a cherry-picked slice is committed"
"SortAlphabeticallyClassList","Like SortHierarchically but sort by name and without indentation."
"RBSplitCascadeRefactoring",""
"FileSystemTest","I am an abstract file system test. I directly test - the public interface of a FileSystem using these methods directly- the FileSystem in general through the operation methods of the FileReference"
"OSNullWindowHandle","i am a handle for null window , created using OSNullWindowDriver."
"OCVectorTempVariable","I model a temp variable that is stored in a temp vector."
"IRReturnLiteral","specific node when returning a constant"
"RPackageCategorySynchronisationTest","SUnit tests for RPackage category synchronization"
"RBShouldntRaiseErrorRule","#shouldnt:raise: is a rather tricky method, it is mostly used to make atest ""read"" nicer, however it some severe drawbacks. Hence, it should onlybe used in certain cases. Consider the following examples.Example 1:----------	self		shouldnt: [ 1 somethingNotUnderstood ]		raise: MessageNotUnderstood.In this particular case the expectations meet the result, the test fails withan assertion failure since a MNU is raised.Example 2:----------	self shouldnt: [ 1/0 ] raise: MessageNotUnderstood.In this case the test will fail with a ZeroDivide. So in the negative case#shouldnt:raise: is not very helpful. As a result, #shouldnt:raise: does not change much on the test outcome, thestatement itself produces the same failures. However there is the third andmost common use case.Example 3:----------	self shouldnt: [ 1/0 ] raise: Error.In this case the test fails, as expected, however not on a ZeroDivide but aninternal error message that shadows the real error. Using Error as argument for#shouldnt:raise: shadows any possible error that might happen and thus shouldbe avoided."
"RGNamespace","A namespace is a container that in addition to managing classes and methods, it also knows how to treat pools and global variables"
"DockingBarMorph","I'm a kind of container which adhere to one edge of the screen. See me in action with: DockingBarMorph new 	addMorph: (SimpleButtonMorph new                                           label: 'Say hello';                                           target: [UIManager inform: 'Hello'];                                           actionSelector: #value);	addMorph: (SimpleButtonMorph new                                           label: 'Say bonjour';                                           target: [UIManager inform: 'Bonjour'];                                           actionSelector: #value);	addMorph: (SimpleButtonMorph new                                           label: 'Close';                                           target: [DockingBarMorph allInstances last delete];                                           actionSelector: #value);	adhereToBottom;	openInWorld."
"TestCaseAnnouncement","This is a common superclass for announcements related to SUnit test cases.Instance Variables        testCase:                       <TestCase>        testResult:                     <TestResult>        testSelector:           	   <Symbol>testCase        - The test casetestResult        - The result of the test casetestSelector        - The selector of the test method"
"SugsRenameClassVar","I know how to rename a class variable"
"Object","Object is the root class for almost all of the other classes in the class hierarchy. The exceptions are ProtoObject (the superclass of Object) and its subclasses.Class Object provides default behavior common to all normal objects, such as access, copying, comparison, error handling, message sending, and reflection. Also utility messages that all objects should respond to are defined here.Object has no instance variables, nor should any be added. This is due to several classes of objects that inherit from Object that have special implementations (SmallInteger and UndefinedObject for example) or the VM knows about and depends on the structure and layout of certain standard classes.Class Variables:	DependentsFields		an IdentityDictionary		Provides a virtual 'dependents' field so that any object may have one		or more dependent views, synchronized by the changed:/update: protocol.		Note that class Model has a real slot for its dependents, and overrides		the associated protocol with more efficient implementations.Because Object is the root of the inheritance tree, methods are often defined in Object to give all objects special behaviors needed by certain subsystems or applications, or to respond to certain general test messages such as isMorph.Miscellanous Discussions.About at: index accepting float and not only integers This behavior is also free in the sense that the failure code is only invoked when theprimitive fails and so adds nothing to the cost of successful accesses,which are the high dynamic frequency operation.  It will also show up underprofiling if one is concerned about efficiency, and so isn't a hidden cost.It is also in keeping with Smalltalk's mixed mode/arbitrary precisionimplicit coercion number system that one *can* use fractions or floats asindices.  Stripping out coercions like this will make the system more brittle.  So please do *not* remove this ""hack"".  I think it's a feature and a useful  one.Can you give me an example that demonstrates the usefulness of thisfeature?| a r |a := Array new: 10 withAll: 0.r := Random new.100 timesRepeat: [| v | v := r next * 10 + 1. a at: v put: (a at: v) + 1].ai.e. I didn't have to provide an explicit rounding step.  That's useful.  But in general anywhere where an index is derived by some calculation not having to provide the rounding step could be useful/helpful/more concise.  e.g. (n roundTo: 0.1) * 10 vs ((n roundTo: 0.1) * 10) asInteger.Some thought went into the original choice.  It is not a hack but there by intent.  The integers are simply a subset of the reals and forcing the programmer to use them is favouring the machine above the programmer.But I think you should justify getting rid of it rather than my having to justify keeping it.  Getting rid of it risks breaking code.  If it is there but does not harm then why get rid of it?best Eliot Miranda "
"CompiledMethodTest","This is the unit test for the class CompiledMethod. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"AbstractSessionHandler","API  to manage startup and shutdown of a session.On startup, isImageStarting indicates wheter the image is starting or just resuming from a save.On shutdown, isQuitting indicates if we save and quit the image  or if we just save  the image.  "
"NautilusBooleanAnnouncement","Announcement raised when a boolean value changed"
"SDL_ControllerDeviceAddedEvent","SDL2 library structure representing a controller device added event data."
"MCRepositoryInspector","Inspector for a repository"
"ErrorDialogWindow","A message dialog with an error icon."
"MetacelloMCPackagesSpecTestCase",""
"GLMAllNotNilCondition","Used to test if all defined arguments of a condition or not nil.We use this as a default condition for presentations. Usually, you will want to define a condition as a block such as '[ :class :category | (class isKindOf: Class) and: [ category isKindOf: Symbol ] ]' (or something like that) but sometimes you just want to make sure that all arguments are defined. Since we do not know the number of arguments in advance, we use this class to interpret #glamourValueWithArgs: and return true if all arguments are not nil."
"DiskStore","I am an abstract superclass for disk store implementations. My subclasses provide access to the actual data storage of a particular kind of filesystem. "
"IdentityBag","Like a Bag, except that items are compared with #== instead of #= .See the comment of IdentitySet for more information."
"RBBlockNode","RBBlockNode is an AST node that represents a block ""[...]"".Instance Variables:	arguments	<SequenceableCollection of: RBVariableNode>	the arguments for the block	bar	<Integer | nil>	position of the | after the arguments	body	<RBSequenceNode>	the code inside the block	colons	<SequenceableCollection of: Integer>	positions of each : before each argument	left	<Integer>	position of [	right	<Integer>	position of ]"
"SlotLayoutExtensionTest",""
"BlockFilter","A filter for blocks"
"FBDOptimizedMessagesRewriter","I am a tool that allows you to reoptimize messages into a decompiled method.I receive an AST and I replace non-optimized message nodes that have been reconstructed by the AST builder into optimized message nodes, then I return the AST.Public API : use rewriteAST: to transform it with optimized messages.example: FBDOptimizedMessagesRewriter rewriteAST: (Object >> #asString ) ast.I only rewrite nodes with ""reconstructed"" property to ensure that I reoptimize only the messages that were optimized in the non-decompiled method."
"GLMBrickTests",""
"DAPackageDependencyWrapper","Wrapper for dependent package (use in TreeModel)"
"GTSpotterProcessorFilter","I am the root class for filters that decide what processors can be loaded in a step. I have no conection whatsoever with the GTFilter hierarchy.Subclasses need to implement #shouldEnableProcessorsCreateBy: to indicate whether or not a given processor should be enabled.Subclasses can return a configuration block from #configurationBlockForProcessorsCreatedBy: if they want to customize a certain processor."
"SHRBTextStyler","I'm the one who visits node to coloring the code"
"MCVariableDefinition","A MCVariableDefinition represents a variable."
"AssignmentNode","AssignmentNode comment: 'I represent a (var_expr) construct.'"
"FLPositive8SmallIntegerCluster","unsigned, 8-bit integer"
"SugsTranscriptContext","I know how to use a Transcript to extract the information needed for the suggestions"
"RBSmalllintTest",""
"TabAction","I am a data object representing an action associated to a tab.I contains	- an action to be performed when clicked	- an icon to be rendered	- a label to add indication about what I am supposed to do"
"HookGeneratorForVariables","I am a version of the HookGenerator that is used when generating hooks for  first class variables like Globals, ClassVariables, Slots and TemporaryVariables "
"PaginatedMorphTreeMorph","A paginated tree morph"
"GoferBrowseRemoteChanges","Browse remote changes"
"ManifestRegexCore","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GLMSpawnBrowserAction",""
"PharoTutorialHelp","HelpSystem book documenting PharoTutorial"
"NECController","I live as an instance variable in a Browser, Debugger, Workspace or other window. I'm the glue between all participants of the completion system. I create the NECContext and pass myself to the NECMenuMorph. I process the keyboard events and pass them to the NECMenuMorph or close the morph if needed."
"MalBfsNode",""
"FFIConstantHandleTests",""
"KOI8RTextConverter","A KOI8RTextConverter class is used to convert cyrillic inputs."
"Latin2Environment","This class provides the support for the languages in 'Latin-2' category.  Although we could have different language environments for different languages in the category, so far nobody seriously needed it.  I (Yoshiki) don't have good knowledge in these language, so when Pavel Krivanek volunteered to implement the detail, it was a good test to see how flexible my m17n framework was.  There are a few glitches, but with several email conversations over a few days, we managed to make it work relatively painlessly.  I thought this went well.  There seem that some source of headache, as Windows doesn't exactly use Latin-2 encoded characters, but a little modified version called 'code page 1250'.  Similar to Japanese support, the encode interpreters are swapped based on the type of platform it is running on."
"SymbolicBytecode","I model a single bytecode. I know my value and my offset in the compiledMethod and know the compiledMethod I come fromI am a relatively heavyweight object, I am created on demand for inspecting bytecodes.See #symbolicBytecode."
"FFICallback","I define a callback for an external function call.I allow blocks to be evaluated when an external block funtion needs it. 	cb := FFICallback			signature:  #(int (const void *a, const void *b))			block: [ :arg1 :arg2 | ((arg1 doubleAt: 1) - (arg2 doubleAt: 1)) sign].argument types are calculated and converted using same parsing logic than FFICallout"
"OSWindowClipboard","This is a private class for handling clipboard text. There's no direct use of it.For setting/retrieving clipboard text, use clipboardText/clipboardText: accessors of OSWindow instances."
"AthensCairoMatrix","I implement an AthensAffineTransform interface."
"ManifestCodeImport","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"OSWindowJoystickExample","I am a basic example to show how we can draw something and use the joystick.To launch the example:self new open"
"ZnServerHandlerErrorEvent","ZnServerHandlerErrorEvent signals an error that occurred during handling by the delegate. This is considered a real error."
"GLMMorphicMorphRenderer",""
"GLMTextMorphForEditView","GLMTextMorphForEditView is meant to work with GLMPluggableTextMorph."
"MCChangeNotificationTest",""
"ZnHtmlOutputStream","I am ZnHtmlOutputStream. I wrap another character write stream to offer a richer API for generating correct HTML markup.See https://en.wikipedia.org/wiki/HTMLMy streaming protocol contains the traditional write stream operations. These are raw and do not do any conversions/escaping.My html protocols contains a rich API for generating correct HTML. String streamContents: [ :out | | html |	html := ZnHtmlOutputStream on: out.	html html5.	html tag: #html do: [ 		html tag: #body do: [			html tag: #div class: #main do: [				html tag: #p with: 'Hello World & Universe !'.				html tag: #hr.				html 					tag: #em 					attributes: #(class big id 1 disable nil) 					with: 'The END' ] ] ] ].	ZnHtmlOutputStream streamContents: [ :html |	html page: 'Hello World' do: [ 		html tag: #div class: #main do: [			html tag: #p with: 'Hello World & Universe !' ] ] ]Part of Zinc HTTP Components."
"FLCharacter32Cluster","I'm a cluster for Unicode characters."
"PNGReadWriter","I am a subclass of ImageReadWriter that decodes Portable Network Graphics(PNG) images.Submitted by Duane Maxwell"
"ZnEntityReader","I am ZnEntityReader, I help reading ZnEntities from a stream given meta data in headers.I deal with chunking and gzip decoding.I have several options:	- to read streaming entities, where the client has to do the actual reading	- to read binary entities, where textual content is not interpreted	- to allow reading up to end, when there is no content length setPart of Zinc HTTP Components."
"IRBytecodeScope","I am an internal class used by the  decompiler to recreat variable information"
"GLMMorphicSpotter",""
"PluginTreeNode","A PluginTreeNode is a node of a NautilusPluginManagerTree"
"MultiByteFileStreamFileOutTestClass","MultiByteFileStreamFileOutTestClass is used in MultiByteFileStreamTest>>#testFileOutNonAscii."
"ClassFactoryWithOrganizationTest","SUnit tests for ClassFactoryWithOrganization"
"SettingTokenFilter","A SettingTokenFilter is SettingFilter which makes use of a token (substring) in order to keep or not a SettingHandler.Instance Variables	token:		<String>"
"ClassAPIHelpBuilder","A builder to build the API Help for a classInstance Variables	addMethods:		<Boolean>	addSubclasses:		<Boolean>	subclassesAsSeparateTopic:		<Boolean>addMethods	- When true the builder will include method helpaddSubclasses	- When true the builder will recursively go through and add subclassessubclassesAsSeparateTopic	- xxxxx"
"Symbol","I represent Strings that are created uniquely. Thus, someString asSymbol == someString asSymbol."
"MorphicTransferAdapter","I am a morphic specific adapter used to build a transfer object during a drang and drop operation"
"SpecDebugger","A SpecDebugger is a UI build in Spec that provides Smalltalk debugging functionality by using a DebugSession.All the debugging logic is in DebugSession and the corresponding debugging actions. SpecDebugger only provides a graphical interface to access that functionality. The debugging actions are managed by the toolbar widget; the stack and all its related actions are managed by the stack widget."
"ProgressBarMorph","Instances of this morph get used by SystemProgressMorph or a JobProgressBar to display a bar (i.e., the rectangular part of a progress bar).Here is an example of how to use it. | p |p := ProgressBarMorph from: 0 to: 200.p extent: 200@20.p openInWorld.[	(1 to: 200) do: [ :i | p value: i.  (Delay forMilliseconds: 10) wait ].	p delete ] fork| p |p := ProgressBarMorph from: 0 to: 200.p extent: 600@7.p openInWorld.[	(1 to: 200) do: [ :i | p value: i.  (Delay forMilliseconds: 5) wait ].	p delete ] fork"
"CNGBTextConverter","Text converter for Simplified Chinese variation of EUC.  (Even though the name doesn't look so, it is what it is.)"
"ZnRequestTests",""
"GLMBrowserTest",""
"SaveCommandLineHandler","Usage: save <imageBaseName> [--delete-old] 	<imageName>     a base name for the image	--delete-old    remove the old image and changes file	Documentation:Saves the image and changes file under a new name.Examples:	# create a 'bar.image' and 'foo.changes'	pharo Pharo.image save bar	# create the same file as in the previous example but delete Foo.image and Foo.changes	pharo Pharo.image save bar --delete-old"
"ByteLayout","I am a raw data layout that holds bytes (8 bit)."
"BitBltClipBugsTest",""
"SimpleGridExample","SimpleGridExample new open"
"MCPackageManagerTest",""
"MacOSPlatform","I am a an object representing a Mac OS (pre OSX) platform. Use myself to access platform specific features."
"GTStonPacking","I serialize or materialize objects using STON framework. Create instance of me calling GTEventPacking ston."
"TxSelectionChangeOperation","a history record containing selection change operation"
"GLMMorphicPharoCodeRendererTest",""
"MCMockClassH",""
"MorphicTabAdapter","I am the adapter used to bridge a TabModel and a Tab"
"RFNewValueReification","reify newValue"
"FLGZippedBasicSerializationTest","SUnit tests for basic serialization that is zipped"
"ReRuleManager","I should be used as singleton which provides sets of rules for checking classes and methods.Use:ReRuleManager uniqueInstance classRules ""to get rules for checking classes""ReRuleManager uniqueInstance methodRules ""to get rules for checking methods"""
"FFIExternalStructureFieldParser","I'm a parser for fields in FFIExternalStructure"
"GLMMorphicTabulatorRenderer",""
"Margin","I represent a margin (for now of rectangle-based operations).It can be expressed as different objects:- A number. When specified using a number, it sets all the four values to be the same.- A point. When specified as a point, pairs top/bottom and left/right take their values from a point y and x. - Four numbers. They represent all the four directions.- A rectangle. (do not use this version because it is proposed just for migration and it may force you to create an unnecessary rectangle)."
"GTBrowseDebugAction","I am debugging action for sending a unary message to the debugger."
"ReLaterInvocationCritic","A critic which represents that the method is missing some required messages after the one in questiong"
"MetacelloProjectSpecLoadedNotification","**MetacelloLoadProjectSpecVersionNotification** is signalled to indicate that the given project spec was loaded into the image."
"IllegalResumeAttempt","This class is private to the EHS implementation.  An instance of it is signaled whenever an attempt is made to resume from an exception which answers false to #isResumable."
"DummySystemProgressItem","A dummy for a system progress item"
"NotYetImplemented","I am NotYetImplement, an exception signaled when a method is a stub for code that will be implemented in the future.This is used in incremental development, for example when doing Test First development.It is similar to ShouldBeImplemented, with a slightly different meaning."
"Error",">From the ANSI standard:This protocol describes the behavior of instances of class Error. These are used to represent error conditions that prevent the normal continuation of processing. Actual error exceptions used by an application may be subclasses of this class.As Error is explicitly specified  to be subclassable, conforming implementations must implement its behavior in a non-fragile manner.Additional notes:Error>defaultAction uses an explicit test for the presence of the Debugger class to decide whether or not it is in development mode.  In the future, TFEI hopes to enhance the semantics of #defaultAction to improve support for pluggable default handlers."
"PluggableTabBarMorph","This morph manages a set of PluggableTabButtonMorphs.  Each tab should be added in the left to right order that they should be displayed.  Each tab will be evenly sized to fit the available space.  This morph intercepts mouse clicks, figures out which tab was clicked, pops up the new tab as the active tab and triggers the registered event.  See PluggableTabButtonMorph for information on what a tab can consist of.Example:(PluggableTabBarMorph on: nil)	addTab: (Text fromString: 'Test') withAction: [Transcript show: 'Test'; cr];	addTab: (Text fromString: 'Another') withAction: [Transcript show: 'Another'; cr];	width: 200;	openInHand"
"RxsRange","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--I represent a range of characters as appear in character classes such as	[a-ZA-Z0-9].I appear in a syntax tree only as an element of RxsCharSet.Instance Variables:	first	<Character>	last	<Character>"
"RPackageObsoleteTest","SUnit tests for RPackage"
"LazyTabGroupMorph",""
"TextEmphasisTest","SUnit tests for TextEmphasis"
"CairoFreetypeFontRenderer","I am used to render freetype font(s) with cairo library.Before start rendering, you must set: - canvas - font"
"VSCommitPatchCommand","I open commit tool to create a PATCH version of target configuration."
"FreeTypeCacheConstants","Constants for the FreeType cache"
"MorphicButtonAdapter","SpecInterpreter	interpretASpec: MorphicButtonAdapter  defaultSpec	model: (MorphicButtonAdapter model: ButtonModel2 new)"
"MTModelComparator","A comparator that can be used to compare a whole dependency graph."
"MetacelloProjectSpec",""
"FFIIndirectFunctionResolution","I will perform an ""indirect function call"" as explained here: https://en.wikipedia.org/wiki/Function_pointerIn summary: I take a function pointer kept in a global symbol and execute it. I implement the option:  optIndirectCall "
"GLMBrick","A GLMBrick is the superclass of all Bricks. It subclasses cleaned morph with deleted layouting mechanismInstance Variables	brickBounds:		<GLMBrickBounds>	ports:		<Dictionary>brickBounds	- wrapper object for brick geometry.  		holds margin, padding properties.,		responsible for calculation of outer/inner bounds depending on margin/paddingports	- dictionary of phlow bindings. is not implemented yet"
"MorphicTreeAdapterTest",""
"ConfigurationOfNautilusGroupAutoBuilder","self load"
"GTSpotterStackedLayout",""
"RGAbstractContainer","This is the abstract class for container-based elements.Elements are separated in groups by kind (e.g classes, methods, pools, etc.)Subclasses have to define the kind of collection for a particular group of entities.For a container the use of a dictionary or another collection (e.g. SortedCollection) to store group of elements is independent."
"MCDoItParser","A MCDoItParser is a simple 'parser' which understand the addDefinitionsTo: message. Each parser can use the sourceand add definitions to the list of entities that is passed to them.MCDoitParser invokes automatically its subclasses to parse the correct source.Each Doit entities (entities which are defined as doits) extend this entry point to add specific behavior."
"String","A String is an indexed collection of Characters. Class String provides the abstract super class for ByteString (that represents an array of 8-bit Characters) and WideString (that represents an array of  32-bit characters).  In the similar manner of LargeInteger and SmallInteger, those subclasses are chosen accordingly for a string; namely as long as the system can figure out so, the String is used to represent the given string.Strings support a vast array of useful methods, which can best be learned by browsing and trying out examples as you find them in the code.Here are a few useful methods to look at...	String match:	String contractTo:String also inherits many useful methods from its hierarchy, such as	SequenceableCollection ,	SequenceableCollection copyReplaceAll:with:"
"MCChangeSelectionRequest","Notify about a change selection request"
"HashTableSizes","HashTableSizes is a helper class, used by hashedCollections to determine sizes for hash tables.Public protocol is all class-side:#goodSizeAtLeast: anInteger   answers a ""good"" integer greater than or equal to the given integer.An integer is not ""good"" as a hash table size if it is any of:* Not prime* Divides 256**k +- a, for small k and a* Close to a power of two* Close to dividing the hashMultiply constantSee Andres Valloud's hashing book, and Knuth TAOCP vol. 3.This class caches a table of selected good primes within the positive SmallInteger range. When this table must be rebuilt, it uses an instance to compute the table. Primes are selected to keep the table fairly small, with approximately five entries per power of two.The cached table is ordered, and is searched with a binary search to find the closest good size >= the requested size."
"FontProviderAbstract","Abstract superClass for fontProviders	examples of possible fontProviders are 		StrikeFontProvider		FreeTypeFontProvider		Win32NativeFontProvider		"
"RBNumberLiteralToken",""
"AnnouncementMockB","This is a simple test mock"
"MorphTreeMorphSelection","Superclass for selections in a morphic based tree"
"CCompilationContext","I am a copy of the CompilationContext.It is used-> in the old Compiler so it is independed from Opal-> in the new Compiler the class CompilationContext parametrizes Opal to use this Context so it can add instance variables to the context.The second option is a workaround, we will need a copy of Opal to develop itself *or* need to add transactions to the language ;--)"
"BagEyeElement","I am an eye element for bags, showing appropriate thing with occurrences"
"QAInitiateCriticBan","Announced when a developer has clicked the skip button and is about to deal with a dialog to choose on which level the critic will be banned."
"FLAnalyzer","I am responsible of traversing the graph of references starting from a root object. I will produce a clusterization which the serializer will store on a stream.An example of use is:	(FLAnalyzer newDefault 		clusterizationOf: (Array with: 1@2 with: 3@4))		clusters."
"SHStyleElementTest","I am testing the class SHStyleElement"
"GLMBrickLayoutProperties","A GLMBrickLayoutProperties is  a holder class of layout properties used by layout policyInstance Variables	horizontalPercent:		<Object>	marginBottom:		<Object>	marginLeft:		<Object>	marginRight:		<Object>	marginTop:		<Object>	maxHeightBlock:		<Object>	maxWidthBlock:		<Object>	minHeight:		<Object>	minWidth:		<Object>	paddingBottom:		<Object>	paddingLeft:		<Object>	paddingRight:		<Object>	paddingTop:		<Object>	verticalPercent:		<Object>horizontalPercent	- xxxxxmarginBottom	- xxxxxmarginLeft	- xxxxxmarginRight	- xxxxxmarginTop	- xxxxxmaxHeightBlock	- xxxxxmaxWidthBlock	- xxxxxminHeight	- xxxxxminWidth	- xxxxxpaddingBottom	- xxxxxpaddingLeft	- xxxxxpaddingRight	- xxxxxpaddingTop	- xxxxxverticalPercent	- xxxxx"
"ManifestCollectionsStrings","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"RBScanner","RBScanner is a stream that returns a sequence of token from the string that it is created on. The tokens know where they came from in the source code and which comments were attached to them.Instance Variables:	buffer	<PositionableStream>	Accumulates the text for the current token.	characterType	<ByteSymbol>	The type of the next character. (e.g. #alphabetic, etc.)	classificationTable	<Array of: Symbol>	Mapping from Character values to their characterType.	comments	<Collection of: Interval>	Source intervals of scanned comments that must be attached to the next token.	currentCharacter	<Character>	The character currently being processed.	errorBlock	<BlockClosure>	The block to execute on lexical errors.	extendedLiterals	<Boolean>	True if IBM-type literals are allowed. In VW, this is false.	nameSpaceCharacter	<Character>	The character used to separate namespaces.	numberType	<ByteSymbol>	The method to perform: to scan a number. 	separatorsInLiterals	<Boolean>	True if separators are allowed within literals.	stream	<PositionableStream>	Contains the text to be scanned.	tokenStart	<Integer>	The source position of the beginning of the current tokenClass Instance Variables:	classificationTable	<Array>		the default classification table for all charactersShared Variables:	PatternVariableCharacter	<Character>	the character that starts a pattern node"
"FLWeakVariableObjectCluster","I am a cluster for objects with weak indexable variables."
"GTGenericStackDebuggerSelectionChanged","A GTGenericStackDebuggerSelectionChanged is an event send to the debugger after the selection in the stack pane is changed."
"GLMStacker","A GLMStacker is an explicit browser that allows us to stack panes on top of each other and typically show them as tabs."
"RBDoNotSendSuperInitializeInClassSideRule","Don't send super initialize in class side because the class initialize methods of your superclass  may maintain state level shared state and it can be dangerous to automatically reinitialize it. For example, [[[  ZnServer class>>initialize	ManagedServers := IdentitySet new.	AlwaysRestart := true.	Smalltalk addToStartUpList: self.	Smalltalk addToShutDownList: self]]]"
"GLMBrickLayoutStacked",""
"ShouldBeImplemented","I am ShouldBeImplemented, an exception signaled when some method should have been implemented but was not.This is more like a placeholder during development."
"Announcement","This class is the superclass for events that someone might want to announce, such as a button click or an attribute change. Typically you create subclasses for your own events you want to announce. "
"MetacelloMethodSectionPath",""
"RBLocalMethodsOfAClassNotInItsTraitComposition","If a class has a method in its trait composition, the method should not be implemented in the class."
"ConfigurationOfPharoMetacello","Configuration used to load Metacello into Pharo through the integration tool.It specifies the git tag and groups/packages to load into Pharo. "
"MethodWidget","MethodWidget is the basic implementation of a wiget managing methods.Note however that the design is ugly because it mixes UI and Model. All the code in this hierarchy is conceptually bogus and should be rewritten."
"GLMPane","A GLMPane represents the ""physical"" building block of a browser. A pane is presented using a composite presentation (held in the presentations instance var).It announces:- GLMMatchingPresentationsChanged- GLMPresentationsChangedInstance Variables	browser:		Browser	lastActivePresentation:		Presentation	name:		Symbol	ports:		Collection of Ports	presentations:		CompositePresentation"
"GLMHorizontalScrollPaneBrick","A GLMHorizontalScrollPaneBrick is a very simple scrollpane with support of light scrollbar.Acceleration mechanism is used for scrolling, as longer user scrolls faster it becomes."
"TickSelectionCheckboxMorph","A TickSelectionCheckboxMorph is a checkbox which propagate a bit more the events"
"MorphicNewListAdapter","I am the adapter used to bridge a NewListModel and a NewList"
"ManifestJobs","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"ZnEncodedStream","I am ZnEncodedStream, an abstract support class for read and write streams on an encoded binary stream.Part of Zinc HTTP Components"
"PharoClassInstaller","I am the default class installer.I install a new or modified class in the globals dictionary and announce this change publicly.The default environment can be changed to any SystemDictionary.Example:	PharoClassInstaller example"
"ReCriticTest",""
"MetacelloAtomicLoadDirective",""
"GLMPhlowTableRowBrick",""
"DialogItemsChooser","Dialog for choosing from a list of items"
"SeparatorMorph","Simple themed separator morph."
"MorphicDialogWindowAdapter","I am the adapter used to bridge a DialogWindowModel and a DialogWindow"
"URLPlugin","An URLPlugin is a plugin which shows the URL of the current navigation"
"KeyPrinterMorph","I am a morph that prints the keys in the keyboard events.KeyPrinterMorph new openInWorld"
"GTDebugSelectionDebugAction","This action encapsulates the logic of debugging a selected piece of code from the code pane of the debugger."
"SystemNavigationTest","I am an sunit test for SystemNavigation with the default value for its environment (Smalltalk globals)."
"RBVariableNotDefinedRule","This check is similar to the ""References an undeclared variable"" check, but it looks for variables that are not defined in the class or in the undeclared dictionary. You probably had to work hard to get your code in this state."
"RxsLookaround","I lookaround is used for lookaheads and lookbehinds. They are used to check if the input matches a certain subexpression without consuming any characters (e.g. not advancing the match position).Lookarounds can be positive or negative. If they are positive the condition fails if the subexpression fails, if they are negative it is inverse."
"FTVisibleItemsStrategy","I am a Strategy that will use the function on the visible items of the tree.Description-----------------------I will search in the vsible items of the tree.As said in my superclass I am use by a FTTreeDataSource to help with a FTFunction.Public API and Key Messages------------------------ #realSearch 	is the method that will launch the search.Example-----------------------	| ds |	ds := FTTreeDataSource		roots:			((ProtoObject allSubclasses sort: [ :a :b | a asString < b asString ])				reject: [ :e | e asString endsWith: 'class' ])		children: [ :item | item subclasses sort: [ :a :b | a asString < b asString ] ].	ds searchStrategy: #default. ""This will say to the FTTreeDataSource to use me, but since this is the default, this is optional.""	FTTableMorph new		extent: 200 @ 400;		dataSource: ds;		explicitFunction;		openInWindow "
"FFITypesTests",""
"AthensQuartzSurface","The Quartz surface is used to render cairo graphics targeting the Apple OS X Quartz rendering system."
"TestRunner","<lint: #ignore rule: #classNotReferenced rational: 'this view is only accessed from menus'>Although tests can be most easily be run from a browser, I provide the ability to: * select sets of test suites to run. I am designed to make it easy to execute groups of tests* obtain a more detailed log of the results UI Description ___________ My left-most pane lists all of the categories that contain test classes (i.e., subclasses of TestCase); when some of these categories are selected, the test classes that they contain appear in the pane to the right. Abstract classes are italicized, and the test class hierarchy is shown by indentation, so subclasses of ClassTestCase are indented more than subclasses of TestCase. The tests that did not pass (if any) are listed in the right-hand panes of the Test Runner; if you want to debug one, to see why it failed, just click on the name."
"BitBltDisplayScanner","A BitBltDisplayScanner displays characters on Screen or other Form with help of a BitBlt.Instance Variables	bitBlt:		<BitBlt>	fillBlt:		<BitBlt>bitBlt	- the object which knows how to copy bits from one Form (the font glyph data) to another (the destination Form)fillBlt	- another object for copying form bits, initialized for displaying the background."
"RBEmptyExceptionHandlerRule","Empty exception handler blocks hide potential bugs. The situation should be handled in a more robust way.[  .... ]	on: Error	do: [  ]	having an empty block is a bad idea because the program silently fails."
"EyeSyntaxTreeInspector","I am an inspector showing abstract syntax trees. Instead of showing the full complexity, show the structure of the code by only showing the nodes.As an example, inspect 	(Object>>#halt) ast"
"RootEyeElement","RootEyeElement is used in the tree/explorer view for the initial, top root element. It shows a different label."
"FFIIntegerType","A generic (abstract) integer type."
"GLMReplacePresentationsStrategy","This strategy replaces the presentations from the pane of the destination port."
"OrderedIdentityDictionary","An IdentityDictionary version that uses == instead of = for key comparing.For more information about my usage, check OrderedDictionary and Dictionary comments.Examples------------------	object := Object new.	otherObject := Object new.	dict := OrderedIdentityDictionary new.	dict		at: object put: 1;		at: otherObject put: 2.	dict.		""returns: an OrderedIdentityDictionary(an Object->1 an Object->2)""	dict at: object put: 3.	dict 		""returns: an OrderedIdentityDictionary(an Object->3 an Object->2)"""
"SlReportPreDebugAction","A SlReportPreDebugAction is the debug action to submit a ShoreLine report."
"MCPatchTest",""
"MCFileTreeStReader","A reader for Smalltalk code"
"NECClassVarTypeGuesser","I'm a simple InstructionClient that tries to guess the type of a given class variable name of a class. "
"MCClassDefinition","A MCClassDefinition represents a class."
"MTDevelopmentWorkfow","This class is used to manage the development workflow for a dedicated project."
"DisplayScanner","A DisplayScanner is an abstract class for displaying characters.It is splitting text into elementary chunks of displayable String/Font pairs (see scanning protocol).Subclasses responsibility is to handle the effective rendering of these chunks on various backends.Instance Variables	backgroundColor:		<Color>	defaultTextColor:		<Color>	foregroundColor:		<Color>	ignoreColorChanges:		<Boolean>	lastDisplayableIndex:		<Integer>	lineY:		<Number>	morphicOffset:		<Point>	stopConditionsMustBeReset:		<Boolean>backgroundColor	- the background color for displaying next chunk of text.	Note that this can be set to Color transparent, in which case no background is displayed.defaultTextColor	- the default foreground color for displaying text in absence of other text attributes specification foregroundColor	- the foreground color for displaying next chunk of textignoreColorChanges	- indicates that any change of color specified in text attributes shall be ignored.	This is used for displaying text in a shadow mode, when dragging text for example.lastDisplayableIndex	- the index of last character to be displayed.	A different index than lastIndex is required in order to avoid display of control characters.	This variable must be updated by the stop condition at each inner scan loop.lineY	- the distance between destination form top and current line topmorphicOffset	- an offset for positionning the embedded morphs.	THE EXACT SPECIFICATION YET REMAINS TO BE WRITTENstopConditionsMustBeReset	- indicates that it's necessary to call setStopConditions in next scan loop.Notes:In order to correctly set the lastDisplayableIndex, the display scanner performs the stopCondition BEFORE displaying the string being scanned.This explains why the stopCondition must not reset the font immediately, but differ this reset AFTER the display, thanks to stopConditionsMustBeReset."
"GLMPharoMethodPresentation","I provide support for displaying a Smalltalk method.self pharoMethodPresentationExample"
"RxsMessagePredicate","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A message predicate represents a condition on a character that is tested (at the match time) by sending a unary message to the character expecting a Boolean answer.Instance variables:	selector		<Symbol>"
"FFIExternalStructureType","I'm a type to handle structures. "
"RubMethodEditingExample","self open"
"WeakActionSequence","Weak action sequences for events"
"TimeZone","TimeZone is a simple class to colect the information identifying a UTC time zone.offset			-	Duration	- the time zone's offset from UTCabbreviation	-	String		- the abbreviated name for the time zone.name			-	String		- the name of the time zone.TimeZone class >> #timeZones returns an array of the known time zonesTimeZone class >> #default returns the default time zone (Grenwich Mean Time)"
"PackageTreePackageGroupNodeModel","I'm a group node model for the package groups"
"SlReportExtractor","A SlReportExtractor is the abstract class that defines a strategy to extract information from the image and compose a report."
"TxMultilineSmallTextLayoutTest",""
"MorphTreeTransformMorph","A custom transform morph for a morphic based tree"
"FLPluggableSubstitutionTest","SUnit tests for fuels pluggable substitutions"
"ZnRespond","I am ZnRespond, a Notification to signal the end of #handleRequest: processing with a specific ZnResponse, earlier than normal stack unwinding.  ZnRespond signalWith: ZnResponse unauthorizedNormal #handleRequest: processing in a ZnServer delegate takes a ZnRequest object as input argument and needs to produce a ZnResponse as output, returning it as a regular result. Sometimes you do not want to keep managing this single result with many levels of condition on a complex or deep stack, but instead directly want to return a response: that is when you can use the ZnRespond notification."
"GLMDropDownMorphicTest",""
"RubTextSelectionColor",""
"RGVariableDefinition","A variable definition"
"RBLiteralArrayContainsCommaRule","Checks for literal arrays that contain the #, symbol. The user may have thought that it was a separator."
"MethodIsScriptAction","Action when the method is an executable script tagged with  the following pragmasomeMethod  <script>  ..."
"FLNegative8SmallIntegerCluster","A cluster of unsigned int 8bit"
"FFIFloat64","Float type. Represented as double in C side."
"ZdcAbstractSocketStream","I am ZdcAbstractSocketStream, a binary read/write stream for socket communication.Interally, IO is done through a read and a write ZdcIOBuffer.I am abstract, my subclasses should implement actual IO through a delegate."
"GTFilterSubstring",""
"OSSDL2AthensRenderer","I am an Athens renderer which uses SDL2."
"MetacelloStackCacheNotification",""
"MorphDropListMorph","Drop list supporting morphs in list."
"AbstractIconStyler","I'm in charge to styling an ast with highlighting. To highglight something I need the rubric text model in textModel."
"EUCJPTextConverter","Text converter for Japanese variation of EUC."
"MBCopyBaselineCommand","Command to copy a baseline in Versionner"
"GTObjectPrinter","This is a utility class for printing objects to Text or String."
"ConfigurationOfGTSpotter","ConfigurationOfGTSpotter loadDevelopment"
"GTSaveDebugAction","This debugger action is responsible for saving the current method from a debugger."
"OSWindowDriver","I am a basic (abstract) class, which represents an OS window driver.The driver connects an OSWindow instances with underlaying operating system window(s) through managing OSWindowHandle(s). Driver provides an implemenation of all OSWindow functionality, starting from its creation, setting/retrieving its attributes, and finishing with event handling and/or rendering window's contents on screen.The driver connects OSWindow(s) with operating system windows by providing the handle (see OSWindowHandle). The way how various OSWindow features and API are implemented is up to the concrete driver and thus considered private.The driver(s) responsible for initial window creation , proper setup and and managing external resources. Again, most of driver's functionality is considered private and application-level code should not rely on any of its features. Driver selection mechanism: - on session change, i scan all of my subclasses to pick a most suitable driver which will be used on current platform (see #current on my class side)"
"GLMCompositePresentationAsStartMorphicTest",""
"MetacelloProjectSpecForLoad",""
"SessionErrorHandlingTest",""
"OCSlotVariable","I am a slot in a class. Actual code generation is forwarded to the Slot class.e.g. an InstanceVariableSlot will generate bytecode for reading and writing an ivar, while other Slots either just call the reflective operations of the Slot (#read: and #write:to) or do their own code generation."
"MetacelloTutorialConfig",""
"ZdcSecureSocketStream","I am ZdcSecureSocketStream, a binary read/write stream for SSL communication.I am a ZdcOptimizedSocketStream.When I am used as a client, call #connect on me before using me as a normal stream.When I am used as a server, call #accept on me before using me as a normal stream.Currently, certificate management is ignored."
"SliderModel","A SliderModel is a spec model for a slider.See example:	self example"
"SDL_Version","A structure that contains information about the version of SDL in use. "
"SimpleTestResource","I'm a simple test ressource for test purposes"
"GlobalForTesting","I am used for testing"
"RBAtIfAbsentRule","Replaces at:ifAbsent: by at:ifAbsentPut:. Its leads to shorter and more readable code."
"WindowResizing","I am emitted when a window is resized.Collapsing and expanding a window changes the size and therefore it may trigger this announcement.I provide the old and new window size."
"MBConfigurationInfoChanged","A configuration info changed"
"DAPackageDependencyTest",""
"ToOneRelationSlot","I'm an relation slot  that  describes the one or zero side of an association."
"NotFoundError",""
"GLMNewScriptingTest",""
"SugsDelegateMethod","I know how to delegate the selected method in an instance variable and move the code to a class"
"HDLintReport","Hudson report for lint results"
"IRReconstructor","I am a specialized IRBuilder for the decompiler"
"TarArchive","This is a kind of archive that uses the TAR format (popular in Unix). It is here as a placeholder."
"InstanceVariableEyeElement","I am an eye element for instance variables."
"OCKeyedSet","Like Set except a key of every element is used for hashing and searching instead of the element itself.  keyBlock gets the key of an element."
"RBSendsDeprecatedMethodToGlobalRule","Checks for sends of deprecated messages that might be removed in upcoming releases of Pharo."
"AbstractEnumerationVisitorTest","SUnit tests for AbstractEnumerationVisitor"
"LineMorph","This is really only a shell for creating single-segment straight-line Shapes."
"GLMMorphicModel",""
"ZnClientTests",""
"FormCanvas","Note that when shadowDrawing is true, shadowStipple may be either a color, for a solid shadow of the given color, or it may be a stipple used to simulate gray shading when the display cannot support alpha blending."
"Base64MimeConverter","This class encodes and decodes data in Base64 format.  This is MIME encoding.  We translate a whole stream at once, taking a Stream as input and giving one as output.  Returns a whole stream for the caller to use.           0 A            17 R            34 i            51 z           1 B            18 S            35 j            52 0           2 C            19 T            36 k            53 1           3 D            20 U            37 l            54 2           4 E            21 V            38 m            55 3           5 F            22 W            39 n            56 4           6 G            23 X            40 o            57 5           7 H            24 Y            41 p            58 6           8 I            25 Z            42 q            59 7           9 J            26 a            43 r            60 8          10 K            27 b            44 s            61 9          11 L            28 c            45 t            62 +          12 M            29 d            46 u            63 /          13 N            30 e            47 v          14 O            31 f            48 w         (pad) =          15 P            32 g            49 x          16 Q            33 h            50 yOutbound: bytes are broken into 6 bit chunks, and the 0-63 value is converted to a character.  3 data bytes go into 4 characters.Inbound: Characters are translated in to 0-63 values and shifted into 8 bit bytes.(See: N. Borenstein, Bellcore, N. Freed, Innosoft, Network Working Group, Request for Comments: RFC 1521, September 1993, MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies. Sec 6.2)By Ted Kaehler, based on Tim Olson's Base64Filter."
"DateAndTime","I am DateAndTime.I represent a point in time or timestamp as defined by ISO 8601. I am a Magnitude. I have nanosecond precision.I am TimeZone aware. I have zero duration.  DateAndTime now.  DateAndTime now asUTC rounded.  DateAndTime fromString: '1969-07-20T20:17:40.123+02:00'.  DateAndTime fromString: '1969-07-20T20:17:40Z'.My implementation uses three SmallIntegers and a Duration:  julianDayNumber - julian day number (starting at midnight UTC rather than noon GMT).  seconds - number of seconds since midnight UTC. Always positive, between 0 and 86399.  nanos	 - the number of nanoseconds since the second. Always positive, between 0 and 999999999.  offset	- duration from UTC.The offset is used to print the date and time in a local time zone, but the date and time are handled in UTC internally.The nanosecond attribute is often zero but it defined for full ISO compliance and is suitable for timestamping."
"RBRefactoryTestDataApp",""
"TxAthensLayoutStrategy",""
"ZLibReadStream","A ZLib read stream"
"AbstractNautilusUITest","An AbstractNautilusUITest is a test class for testing the behavior of AbstractNautilusUI"
"BasicCommandLineHandler","I'm a command line handler who is not aware of any UI or Tools present in the system.I'm used as base handler for loading executing stripped images (kernel images, for example). My usage is the same as PharoCommandLineHandler, see his comment as better explanation."
"PharoKernelAssembly","I store metadata for this package assembly."
"RubEditingState","I represent datas of the current text area to manage undo operations etc"
"GoferOperation","Common superclass of Gofer operations"
"RBInlineParameterTest",""
"EllipseMorph","A round BorderedMorph. Supports borderWidth and borderColor. Only simple borderStyle is implemented.EllipseMorph new borderWidth:10; borderColor: Color green; openInWorld.EllipseMorph new borderStyle:(SimpleBorder width: 5 color: Color blue); openInWorld."
"ListSelectionModel","A ListSelectionModel is a basic example to show multi selection on lists| l |l := ListSelectionModel new.l openWithSpec"
"OSWindowFormRenderer","I provide a way of delivering form's bits to window's contents.To obtain my instance, first one create a valid OSWindow and then use #newFormRenderer: .Then you can render on form, and form's contents will serve as medium which will be displayed inside a window."
"OSJoyButtonEvent","I am the root of the joystick button events hierarchy.The which parameter identifies the joystick that produced this event.The button parameter is the joystick dependent index of the button that was pressed or released.The pressed parameter tells if the button was pressed or released.The  mapped  parameters tells if the button index have been mapped into a standard controller layout.The hasMapping parameters tells if this joystick is generating a mapped version of the event."
"TextEditor","See comment in Editor.My instances edit Text, this is, they support multiple lines and TextAttributes.They have no specific facilities for editing Smalltalk code. Those are found in SmalltalkEditor."
"GTSpotterCandidateAdded",""
"MalReducedGraphNode","Node used by the MalReducedGraph algorithm.It has an additional instance variable to track merged nodes."
"AthensMoveSegment","Move segment always indicates starting of a new contour.If contour ends with close command, then my insntance will have 'closed' flag set to true.See AthensPathBuilder , which is responsible for building paths."
"AGroupHasBeenAdded","Notify that a group has been added"
"SugsBreakConditionSuggestion","This class defines AST node menus for conditional  breakpoints"
"KomitNewSlice","I am a dummy object used to commit code in a new slice"
"RBImplementedNotSentRule","This smell arises when a method is implemented but never sent. If a method is not sent, it can be removed. This rule pays attention not to identify as unsent methods, methods with pragmas and test methods since they are likely to be sent through reflection.	Now if your code is used and extended by others better use a deprecation mechanism. To define a deprecate method follow the pattern: 		foo		self deprecated: ''Use bar instead ''. 		^ self bar		 "
"MethodIsScriptWithArgumentAction","Action when the method is an executable script tagged with the following pragmamyMethodReturningAForm    <script: 'self myMethodReturningAForm asMorph openInWorld'>    ..."
"NautilusKeyPressed","A NautilusKeyPressed is raised each time a key is pressed on a Nautilus ui"
"GTEventRegistry","I am weak holder of an object that uses GTEventCollector. If the object disappears from object memory (or #liberate message is sent), GTEventCollector can be removed from a GTEventRecorder object.For the Collaborators Part: GTEventCollectorPublic API and Key Messages- object: - liberate- isLiberatedInternal Representation and Key Implementation Points.    Instance Variables	weakHolder:		<Object>"
"FLGlobalSendSerializationTest","SUnit tests for fuel serialization of global sends"
"TxFontAttribute","I represent the font of a text span"
"WideSymbol","This class represents the symbols containing 32bit characters."
"FTDataSource","I am an abtract class to define the basic implementation of a DataSource. A DataSource is a Model for a FTTableMorph. My purpose is to provide content to it .Description--------------------My subclasses will store some values that will be use to feed a FTTableMorph. I work with a FTTableMorph so I store one.Public API and Key Messages--------------------- #elementAt: anIndex 		return an object to display for an index in the table.		- #numberOfRows 			return the max number of rows inside the table.			- #cellColumn: index1 row: idex2 		return a Morph (probably a FTCellMorph) that will be display in the table. The Morph need to contains the object at index2 and everything the user want to display for a data.		- #newDataSourceMatching: aRegex / #searchText: aString 		these methods are use with a FTFunction. For more information see FTSeachFunction or FTFilterFunction for mone information.Example-------------------This is an Abstract class, see subclasses for examples. Internal Representation and Key Implementation Points.-------------------    Instance Variables	table:		A FTTableMorph that use the dataSource."
"DAPotentialDependenciesNode","I'm a node allowing to compute and browse potential dependencies of a package, i.e. messages sent in the package but with no corresponding method in the package or in its dependencies."
"MCPatchOperation","I'm an abstract class that represent an single delta element between two packages: removal, addition or modification."
"RBMethodRefactoring",""
"DropFilesEvent","This event is sent when an external file is dropped into the image itself.The event can be used by any Morph implementing:#wantsDropFiles: anEvent #dropFiles: anEvent "
"IdentityMorphTreeListManager","An IdentityMorphTreeListManager is a MorphTreeListManager which always check for identity between items"
"AthensBalloonLinearGradient","i represent a linear gradient paint in balloon backend."
"RBExtractToTemporaryRefactoring",""
"FreeTypeSubPixelAntiAliasedGlyphRenderer","A SubPixel-AntiAliased GlyphRenderer for FreeType"
"AbstractObjectsAsMethod",""
"DateError","A generic error raised when try to instantiate dates."
"ZnCommonLogFormat","I am ZnCommonLogFormat, I can output ZnServerTransactionEvent objects using Apache Common Log Format (CLF).https://en.wikipedia.org/wiki/Common_Log_Formathttps://httpd.apache.org/docs/trunk/logs.html#common| formatter |formatter := ZnCommonLogFormat new.ZnLogEvent announcer   when: ZnServerTransactionEvent   do: [ :event |     formatter format: event on: Transcript.    Transcript cr; endEntry ]."
"MailComposition","a message being composed.  When finished, it will be submitted via a Celeste."
"FLPositive32SmallIntegerCluster","unsigned, 32-bit integer"
"RFThisContextReification","I can be used to pass the context to the meta object"
"FLSimpleStack","FLSimpleStack is a simple stack used in Fuel to avoid a recursion while traversing the graph to serialize. While analizing the content of an object (inst vars) we can encounter simple objects (direct string representation) or complex objects (composite). In the latter case we start analizing those instVars.So... Imagine object X with two instVars Y and Z. Imagine the method of the traverse is called #analye:.  So you do #analize: X.  Then, in such method you check whether X has regular pointers to regular objects, and if true, you analize them. So in this case you would send #analyze: Y and #analize: Z, generating the recursion. Right ?  Notice that the time between analyse: Y and analyse: Z is dependent on the graph that is attached to Y. Y can have objects that have further objects etc. So leaving X aside, Y can be the first object to serialize and Z the last.With this FLSimpleStack, instead of sending #analyze: Y and #analize: Z  what Fuel does is just to do a push on a stack:   #push: Y  and #push: Z. And then we are done with X, so we pop from the stack and we continue with the next object (at some point in the future we will pop Y and Z) When there are no more objects in the stack it means we are done. "
"RubTextSetInModel","I am raised when text is set in the model"
"WindowExpanded","This announcement is emitted when a window leaves a collapsed mode. This happens when you press on a window icon in the taskbar."
"MorphicEventDispatcher","The class represents a strategy for dispatching events to some immediate child of a morph. It is used by morphs to delegate the somewhat complex action of dispatching events accurately. "
"RGClassInstanceVariableDefinition","A class instance variable definition"
"GTEventRecorderTestServer","I represent a ZnServer that is used for testing purpose. I know how to start ZnServer that is started on a random port. For that reason I keep right URL that you can use sending #url message. "
"MCCacheRepository","I am a special monticello directory-based repository that is used for the global monticello cache.Most other repositories will first query the default cache repository for existing files before handling the request by themselves. For instance an http repository will first check if the file is in the caceh before doing a ""slow"" download."
"STONReaderError","STONReaderError is the error/exception signalled by STONReader when illegal/incorrect input is seen. "
"SourceMethodConverter","A SourceMessageConverter is a wrapper wich display the source code of the provided message"
"GTSUnitDebugSession","I am a debugging session for the SUnit debugger. I extract from the execution stack various data needed by the user interface of the SUnit debugger, like the test object and method.Public API and Key Messages- process:context: does the initialization of the session- data is provided using the methods in the accessing protocol    Instance Variables	actualResult:		<Object>	assertionContext:		<Object>	expectedResult:		<Object>	testObject:		<Object>"
"ReleaseTest","I contain tests that validate the integrity of the system."
"RBRenameMethodTest",""
"MatrixTransform2x3","This class represents a transformation for points, that is a combination of scale, offset, and rotation. It is implemented as a 2x3 matrix containing the transformation from the local coordinate system in the global coordinate system. Thus, transforming points from local to global coordinates is fast and cheap whereas transformations from global to local coordinate systems are relatively expensive.Implementation Note: It is assumed that the transformation deals with Integer points. All transformations will return Integer coordinates (even though float points may be passed in here)."
"CategoryRenamed","This announcement will be emited when renaming a category using:=> SystemOrganizer >> renameCategory:toBe:"
"GLMBandBrick","A GLMBandBrick is a simple Brick with height that shrinks to wrap subbricks.Usually used within scroll panes"
"LogicalFontManagerTest","A LogicalFontManagerTest is a test class for testing the behavior of LogicalFontManager"
"RBExtractToTemporaryTest",""
"AbstractWidgetModel","AbstractBasicWidget is an abstract class for basic widgets"
"GTBytecodeDebuggerSession","I provide debugging actions at the level of the bytecode.I also make sure  that step over only goes over one single bytecode instruction."
"RBNamespace",""
"RBFindBlockArgumentAssignment","Find assignment nodes with block arguments on its left side."
"GoferOperationTest","SUnit tests for Gofer operations"
"ProtocolViewer","I am a widget gathering a list of models with two protocol list:one for the methods in 'api', the other for the methods in 'api-events'.I am used to expose the construction of a spec UI in the Spec documentation."
"ZnInvalidUTF8","I am ZnInvalidUTF8.I am a ZnCharacterEncodingError.I am an Error.I signal when something goes wrong while encoding or decoding UTF8.Part of Zinc HTTP Components"
"TextStream","I'm a Stream of Text objects. ex:	|ts|	ts := TextStream on: (Text new: 50). 	ts nextPutAll: 'I ' asText.	ts nextPutAll: 'love' asText allBold. 	ts nextPutAll: ' Pharo'.	TextMorph new 		newContents: ts contents; 		openInWindowLabeled: 'TextStream test'"
"MCMockClassB","This comment has a bang! Bang! Bang!"
"KMTarget","I am the reification of the Keymap target.  I am the one that receives the actions."
"SDL_Color","SDL2 library structure"
"SlotAnnouncementsTest",""
"FileReference","I combine a filesystem and path, which is sufficient to refer to a concrete file or directory. I provide methods for navigating my filesystem, performing filesystem operations and opening and closing files.  I am the primary mechanism for working with files and directories. | working |working := FileSystem disk workingDirectory.working files | disk |disk := FileSystem disk.disk root.                               	""a reference to the root directory""disk working.                         	""a reference to the working directory"""
"DoubleLink","I am DoubleLink, the elementary part of a DoubleLinkedList.I hold a value, as well as a link to my successor (nextLink) and to my predecessor (previousLink) - both can be nil."
"GLMPopupBrick",""
"FinderMethodNode","A FinderMethodNode is a node used by the FinderUI's tree representing a Method"
"PluggableDictionary","Class PluggableDictionary allows the redefinition of hashing and equality by clients. This is in particular useful if the clients know about specific properties of the objects stored in the dictionary. See the class comment of PluggableSet for an example.Instance variables:	hashBlock	<BlockClosure>	A one-argument block used for hashing the keys.	equalBlock	<BlockClosure>	A two-argument block used for comparing the keys."
"MetacelloAtomicConfigurationResource",""
"SubscriptionRegistry","The subscription registry is a threadsafe storage for the subscriptions to an Announcer.In Pharo, subscriptionsFor: protocol is not implemented.This is because Announcer does not provide public access to its registery for encapsulation reasons.(We do not want access to the announcer from action blocks to break encapsulation to other subscribers)"
"MFClassA","I'm a dummy class just to have a package that is not empty."
"DelayNullSchedulerTest",""
"MCWorkingCopyTest",""
"ReadStreamTest","I am an SUnit test for ReadStream.I have no test fixtures."
"ConfigurationOfDependencyAnalyser","ConfigurationOfDependencyAnalyser is a new configuration for the dependencyAnalyser tool developed by B. Quide.(ConfigurationOfDependencyAnalyser project version: '1.0') load"
"FinderNode","A FinderNode is an abstract class used by the tree of FinderUI"
"RBStringConcatenationRule","Check for string concatenation inside some iteration message. Since string concatenation is O(n^2), it is better to use streaming since it is O(n) - assuming that n is large enough. As a general principal avoid , since the receiver is copied. Therefore chaining , messages will lead to multiple useless copies of the receiver. Instead of writing	| string | 	string := String new.	#(1 2 3) do: [ :each |		string := string, each asString].	^ stringWrite, it is much more efficient.	String streamContents: [:s | 		#(1 2 3)  do: [:each | s nextPutAll: each asString]]	or more concisely...	'''' join: {1. 1+1. 3}	"
"TabEnabled","I am the state of a tab enabled but not yet selected"
"Boolean","Boolean is an abstract class defining the protocol for logic testing operations and conditional control structures for the logical values represented by the instances of its subclasses True and False.Boolean redefines #new so no instances of Boolean can be created. It also redefines several messages in the 'copying' protocol to ensure that only one instance of each of its subclasses True (the global true, logical assertion) and False (the global false, logical negation) ever exist in the system."
"ClassFactoryForTestCase","I'm useful when classes needs to be created during the execution of the test. This avoid polluting your unit tests with dummy and mock classes.A typical usage of it is:TestCase subclass: #YourTest       instanceVariableNames: 'classFactory'YourTest>>setUp       classFactory := ClassFactoryForTestCase newYourTest>>tearDown       classFactory deleteClasses.YourTest>>testIsBehavior       | cls |       cls := classFactory newClass.       self assert: cls isBehavior"
"OSTouchSwipeDetector","I am the abstract class for all the Swipe gesture detectors"
"ZdcIOBufferTests","ZdcIOBufferTests holds unit tests for ZdcIOBuffer."
"MBAnnouncement","Common superclass for Versionner announcements"
"KMModifiedKeyCombination","I represent key combinations combining a single key + a modifier.The modifier could be a single modifier key (look at my subclasses) or a combination of them. For example, valid modified key combinations could be:- shift + a- ctrl + shift + cTo create a modified key combinations use the #command, #alt, #control or #shift messages. Like for example:$a command$b shift$1 control$z alt"
"GLMTabulator","A GLMTabulator is an explicit browser that allows us to place panes in columns and rows."
"MetacelloScriptEnsureProjectLoadedForDevelopment",""
"UTF8InvalidText","UTF8InvalidText"
"RBMoveMethodToClassRefactoring","A RBMoveMethodToClassRefactoring is a class that represents functionality of ""Move method to class"" refactoring.User chooses method, and than any of existiong classes.Refactoring moves chosen method to class.Instance Variables	method:		<RBMethod>method	- chosen method"
"GLMMorphicDynamicRenderer",""
"AGroupHasBeenRemoved","Notify that a group has been removed"
"GlobalIdentifierPersistence","I represent persistence strategy for GlobalIdentifier. I can load or save existing preferences (a dictionary) using #load: or #save: message. I know whare the preference file is stored (#preferences). I also know what previous persistence stategy was used; for that reason you should use #ensure: instead of #load: message. In that case, I will load the old file and then save it using new persistence strategy.Collaborators: GlobalIdentifier uses me for loading and saving values; in both cases GlobalIdentifier uses #ensure:Public API and Key Messages- ensure: it loads stored values, merge with existing in the image and saves the current state on the diskExample:	GlobalIdentifierPersistence ston		previous: (GlobalIdentifierPersistence fuel					preferences: FileLocator workingDirectory / 'example.fuel';					yourself);		preferences: FileLocator workingDirectory / 'example.ston';		ensure: (Dictionary new at: #a put: 1; at: #b put: 2);		yourselfInternal Representation and Key Implementation Points.    Instance Variables	preferences:				<FileReference>	previousPersistence:		<GlobalIdentifierPersistence>"
"ZipNewFileMember","ZipNewFileMember instances are used to represent files that are going to be written to a ZipArchive.Their data comes from external file streams."
"DialogWindowModel","A DialogWindowModel is a model used to describe a DialogWindow"
"MutexTest",""
"AnnotationPanePlugin","An IgorsPlugin is a plugin which displays info about the current selection"
"SubclassResponsibility","I am SubclassResponsibility, an exception signaled when an inherited method should have been implemented in a subclass but was not."
"DropListExample","A DropListExample is a simple example of how to use drop lists.DropListExample new openWithSpec"
"GLMImplicitBrowser","A GLMImplicitBrowser is an abstract implementation of a browser that defines an implicit flow of transmissions.When using implicit browsers, the developer does not have access to the internal transmissions."
"HashFunction","Common superclass for hash functions"
"PackageTreePackageSelection","I'm a package selection."
"ArrayTest","This is the unit test for the class Array. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)		- the sunit class category"
"GLMInteractableBrick","A GLMInteractableBrick is a subclass of GLMBrick to allow user interactions such as: mouseLeave, mouseEnter, mouseDown, mouseUp and for each state can change background color or background image, that resizes accordinately to Brick's size. Supports doubleClick out of box, but it should be enabled sending enableDoubleClick message. When doubleClick is enabled announces #onDoubleClicked.By default interactable brick is disabled and doesn't react to any user action. It should be first enabled sending enable message.Instance Variables	announcer:		<Announcer>	checkedColor:		<Object>	checkedImage:		<Object>	isChecked:		<Boolean>	isDoubleClickEnabled:		<Boolean>	isEnabled:		<Boolean>	isPressed:		<Boolean>	isSelected:		<Boolean>	normalColor:		<Object>	normalImage:		<Object>	pressedColor:		<Object>	pressedImage:		<Object>	selectedColor:		<Object>	selectedImage:		<Object>announcer	- xxxxxcheckedColor	- xxxxxcheckedImage	- xxxxxisChecked	- xxxxxisDoubleClickEnabled	- xxxxxisEnabled	- xxxxxisPressed	- xxxxxisSelected	- xxxxxnormalColor	- xxxxxnormalImage	- xxxxxpressedColor	- xxxxxpressedImage	- xxxxxselectedColor	- xxxxxselectedImage	- xxxxx"
"WorkspaceTest","SUnit tests for Workspace"
"GTInspectorVariableValuePairsTest",""
"TestSuite","This is a Composite of Tests, either TestCases or other TestSuites. The top-level protocol is #run.  This creates aTestResult and sends	self run: aTestResult.then ensures that any TestResources made available during the run are reset.  These, and the dependencies protocol, are common between this and TestCase."
"DualChangeSorterApplication","A DualChangeSorterApplication is a dual change sorter based on spec.DualChangeSorter shares the model between its two subcomponents (ChangeSorterApplication).ChangeSorterModel defines the application logic."
"MCMockDependentItem","Mock for dependency testing"
"GoferUpdate","Update"
"FLPerson","FLPerson is a class just to be able to change the hash of an object and try to test problems with hash."
"MCMockASubclass",""
"ISO88597TextConverter","Text converter for ISO 8859-7.  An international encoding used for Greek. "
"ZipDirectoryMember","ZipFileMember instances represent directories inside ZipArchives.They don't do much other than hold names and permissions (and extra fields).You can add files in subdirectories to a ZipArchive without using any ZipDirectoryMembers."
"PluggableTextEditorMorph","Multi-line text editor with support for accepting on both each change and/or when keyboard focus changes. Also supports custom selection colour and clickable highlights.Used for plain text, no styling, no code menu etc.to see later uses: TEnableOnHaloMenu"
"VSCommitAction","I'm a commit action. I can be executed to perform certain operations (commit packages to their repositories, generate new configurations, etc)"
"ExternalData","Instances of ExternalData explicitly describe objects with associated type. They can be used for describing atomic C types like arrays of atomic types (e.g., 'int[]') or pointer to atomic types (e.g., 'int *').Instance variables:	type	<Integer | Behavior>	The basic type of the receiver.The encoding of type is equivalent to that of the basic type in class ExternalType. The interpretation of whether the receiver describes an array of data or a pointer to data depends on the contents of the instance variable 'handle'. If handle contains an ExternalAddress the receiver is treated as pointer to type. If the handle contains a ByteArray the receiver is interpreted as describing an array of type. Note that both interpretations are treated equivalent in external calls, e.g., if one describes an argument to an external call as taking 'int*' then, depending on the type of handle either the actual contents (if ExternalAddress) or a pointer to the contents (if ByteArray) is passed."
"HTTPEncodingTest","SUnit tests for HTTPEncoding"
"RubHighlightSegmentMorph","A RubHighlightSegmentMorph is a volatile segment that deletes itself whenever the user interacts with the editor. It can be used to add selection-like segments."
"ExternalBrowser","Browser the current image:	ExternalBrowser openOn: CurrentImage new.Browse a FileOut	| internalStream |	internalStream := (String new: 1000) writeStream.	SystemOrganization 		fileOutCategory: 'Tool-ExternalBrowser'		on: internalStream.	ExternalBrowser browseStream: internalStream contents readStream."
"GTSpotterEventCollector","I represent a GTEventCollector for GTSpotter application.I am a bit spetial because I send only closed sessions. It means, bundle always end with closing event. The rest of the events are postponed for the next delivery cycle."
"Mutex","A Mutex is a light-weight MUTual EXclusion object being used when two or more processes need to access a shared resource concurrently. A Mutex grants ownership to a single process and will suspend any other process trying to aquire the mutex while in use. Waiting processes are granted access to the mutex in the order the access was requested.Instance variables:	semaphore	<Semaphore>		The (primitive) semaphore used for synchronization.	owner		<Process>		The process owning the mutex."
"ConfigurationOfFastTable","ConfigurationOfFastTable loadDevelopment.ConfigurationOfFastTable loadBleedingEdge"
"RBCascadeNode","RBCascadeNode is an AST node for cascaded messages (e.g., ""self print1 ; print2"").Instance Variables:	messages	<SequenceableCollection of: RBMessageNode>	the messages 	semicolons	<SequenceableCollection of: Integer>	positions of the ; between messages"
"GLMPresentationsChanged","A GLMPresentationsChanged is announced by the pane when the set of presentations changes."
"FLExtensionWrapper",""
"Context","Instance variables:	receiver: <Object> (self)	closureOrNil: <BlockClosure|nil> 		nil if I'm a method context		the blockClosure being executed if I'm a block context	method <CompiledMethod> 		method being executed if I'm a method context		method holding the block if I'm a block context	variable fields: <Object> temporary variables (including arguments)My instances hold all the dynamic state associated with the execution of either a method activation resulting from a message send or a block activation resulting from a block evaluation.	MethodContexts, though normal in their variable size, are actually only used in two sizes, small and large, which are determined by the temporary space required by the method being executed.MethodContexts must only be created using the method newForMethod:.  Note that it is impossible to determine the real object size of a MethodContext except by asking for the frameSize of its method.  Any fields above the stack pointer (stackp) are truly invisible -- even (and especially!) to the garbage collector.  Any store into stackp other than by the primitive method stackp: is potentially fatal."
"DAMessageSendAnalyzer","I analyze package sent messages to reveal dependencies.Examples:(self on: 'Kernel') difference(self on: 'Kernel') missingMethodsWithPotentialMatch(self on: 'Kernel') possibleDeadCode(self on: 'Kernel') missingDependencies(self on: 'Kernel') 	missingMethodsWithPotentialMatchAfterMissingDependenciesAddition"
"TextAnchorTest",""
"ZnHTTPSTests","ZnHTTPSTests.These require that the ZnZodiacNetworkingUtils socket stream factory is enabled:	ZnNetworkingUtils default: ZnZodiacNetworkingUtils new.	Part of Zinc HTTP Components"
"ReInspectorPresentationsNonlazyCode","If you execute some code during the method execution it will  slow down the inspector.Try to put all the code in blocks in the setup messages, such as #title:, #display:,  #when:. Buy doing this your code will be executed lazily when the presentation is selected."
"PrototypeTester","I am a simple holder of a prototype object and hand out copies when requested.My subclasses should define resultFor: a"
"RBExcessiveMethodsRule","This smell arises when a large class is found (with 40 or more methods). Large classes are indications that it has too much responsibility. Try to break it down, and reduce the size to something manageable. The defined number of methods can be edit in RBExcessiveMethodsRule>>methodsCount.A good design assigns one responsibility to a class. Ask yourself, ""what is the key responsibility of this class?"" Using the strategy design pattern may be a solution to structure and delegate some behavior. An indication that a class may have too many responsibilities is when different groups of methods access a subpart of the instance variables. In a large system, having some large classes is often inevitable; but when there are more than a couple of large classes, you should really reconsider your design. 	The defined number of methods can be edited in #methodsCount."
"GLMPresentationBoundPort","This is a fancy port that enables us to access the value of a port from outside of a browser. It is bound to a presentation in the sense that it asks the presentation dynamically for the pane. In this way, when a presentation is placed (or copied) in another pane, the value will be dynamically looked up.Instance Variables:	presentation	<GLMPresentation>"
"ZnBivalentWriteStreamTests",""
"CP1250TextConverter","Text converter for CP1250.  Windows code page used in Eastern Europe."
"IdentitySet","The same as a Set, except that items are compared using #== instead of #=.Almost any class named IdentityFoo is the same as Foo except for the way items are compared.  In Foo, #= is used, while in IdentityFoo, #== is used.  That is, identity collections will treat items as the same only if they have the same identity.For example, note that copies of a string are equal:	('abc' copy) = ('abc' copy)but they are not identitcal:	('abc' copy) == ('abc' copy)A regular Set will only include equal objects once:	| aSet |	aSet := Set new.	aSet add: 'abc' copy.	aSet add: 'abc' copy.	aSetAn IdentitySet will include multiple equal objects if they are not identical:	| aSet |	aSet := IdentitySet new.	aSet add: 'abc' copy.	aSet add: 'abc' copy.	aSet"
"Watchpoint","A wathchpoint save the change of values of expressions. I save them as an oredered collection of  key val association where the key is the timestamp an val is the actual value of the expression.To install a watchpoint in a node: Watchpoint in: aNode"
"RBPatternVariableNode","RBPatternVariableNode is an AST node that is used to match several other types of nodes (literals, variables, value nodes, statement nodes, and sequences of statement nodes).The different types of matches are determined by the name of the node. If the name contains a # character, then it will match a literal. If it contains, a . then it matches statements. If it contains no extra characters, then it matches only variables. These options are mutually exclusive.The @ character can be combined with the name to match lists of items. If combined with the . character, then it will match a list of statement nodes (0 or more). If used without the . or # character, then it matches anything except for list of statements. Combining the @ with the # is not supported.Adding another ` in the name will cause the search/replace to look for more matches inside the node that this node matched. This option should not be used for top level expressions since that would cause infinite recursion (e.g., searching only for ""``@anything"").Instance Variables:	isAnything	<Boolean>	can we match any type of node	isList	<Boolean>	can we match a list of items (@)	isLiteral	<Boolean>	only match a literal node (#)	isStatement	<Boolean>	only match statements (.)	recurseInto	<Boolean>	search for more matches in the node we match (`)"
"LIFOQueueTests","SUnit tests for LIFO queues"
"SugsPullUpMethod","I know how to pull up the method to my superclass"
"TextLineTest",""
"Callback","Callbacks encapsulate callbacks from the outside world.  They allow Smalltalk blocks to be evaluated and answer their results to external (e.g. C) callees.  Callbacks are created with signature:block:, e.g.	cb := Callback			signature:  #(int (*)(const void *, const void *))			block: [ :arg1 :arg2 | ((arg1 doubleAt: 1) - (arg2 doubleAt: 1)) sign].and passed through the FFI by passing their pointer, e.g.	self qui: data ck: data size so: 8 rt: cb pointerWhen the callback is made, the system arranges that the block is invoked with the arguments as defined by the signature, and the result of the block passed back, again as defined by the signature.Instance Variables:block <BlockClosure> - The Smalltalk code to be run in response to external code invoking the callback.thunk <FFICallbackThunk> - the wrapper around the machine-code thunk that initiates the callback and whose address should be passed to CargsProxyClass <Alien subclass> - legacy; unused; the wrapper around the thunk's incomming stack pointer, used to extract arguments from the stack.evaluator <Symbol> - the selector of the marshalling method to usenumEvaluatorArgs <Integer> - the arity of evaluatorClass Variables:ThunkToCallbackMap <Dictionary of: thunkAddress <Integer> -> callback <Callback>> - used to lookup the Callback associated with a specific thunk address on callback.  See FFICallbackThunk.ABI <String> - the name of the current ABIImplementation:The way that it works is in two parts- on callback the VM passes up a pointer to a structure from which all arguments, stacked and in registers (because the VM has copied the register args into the struct) can be accessed, and through which the result can be returned.- the image level provides marshalling methods that match the signature in the callbackSo e.g. with a callback of		Callback			signature:  #(int (*)(const void *, const void *))			block: [ :arg1 :arg2 | ((arg1 doubleAt: 1) - (arg2 doubleAt: 1)) sign]the marshalling methods are in Callback's signature protocol:Callback>>x86voidstarvoidstarRetint: callbackContext sp: spAlien	<signature: #(int (*)(const void *, const void *)) abi: 'IA32'>	^callbackContext wordResult:		(block			value: (Alien forPointer: (spAlien unsignedLongAt: 1))			value: (Alien forPointer: (spAlien unsignedLongAt: 5)))where spAlien is an Alien pointing to a VMCallbackContext32.For ARM support, where there the first four integer arguments are passed in registers, we can useCallback>>ARMV5voidstarvoidstarRetint: callbackContext sp: spAlien intRegArgs: regsAlien	<signature: #(int (*)(const void *, const void *)) abi: 'ARMV5'>	^callbackContext wordResult:		(block			value: (Alien forPointer: (regsAlien unsignedLongAt: 1))			value: (Alien forPointer: (regsAlien unsignedLongAt: 5)))The selector of the method doesn't matter, providing it doesn't cobflict with any other, except for the number of arguments.  What's important is the pragma which defines the signature and the ABI for which this is a valid marshalling method.When a callback is instantiated, Callback introspects to find the marshalling method that matches the signature and the current ABI.  If one doesn't already exist you can write one.  Hopefully we'll write an ABI compiler that will automatically generate these marshalling methods according to the platform's ABI, but for now its a manual process.; at least it's open and flexible.  When the callback is invoked the evaluator is performed with the current callbackContext and pointer(s) to the arguments.  There is a 32-bit and a 64-bit callback context, and it can have a stack pointer, integer register args and floating point register args, so it's general enough for any callback.To pass back the result, a value is assigned into the struct via the accessor in the marshalling method and control returns to teh point where teh callback comes in, and this uses a primitive to return.  Inside the callbackContext is a jmpbuf from a setjmp.  The primitive longjmp's back to the entry point in the VM which extracts the result and the code for the kind of result and returns.  See Callback class>>invokeCallbackContext:"
"RGOrganization","An organization with categories"
"ManifestSystemSessionManager","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"WindowModel","A WindowModel is a spec model for a Window"
"OSWindowMouseLeaveEvent","I am delivered when mouse leaves the area , covered by a window"
"OSWindowAnimated","I am an animated window who interacts with the OSWindowRenderThread"
"ConfigurationOfGTEventRecorder",""
"LiteralDictionary","A LiteralDictionary, like an IdentityDictionary, has a special test for equality.  In this case it is simple equality between objects of like class.  This allows equal Float or String literals to be shared without the possibility of erroneously sharing, say, 1 and 1.0"
"MetacelloDirective",""
"MTDependantProject","A dependant project represents an external projetc you are dependending on.Instance Variables	- configurationClass : the configurationClass this project represents	- repository : The core repository URL of this project"
"UTF8TextConverter","Text converter for UTF-8.  Since the BOM is used to distinguish the MacRoman code and UTF-8 code, BOM is written for UTF-8 by #writeBOMOn: which is called by client."
"TraitsTestCase",""
"MethodContainsBreakAction","I show an action for methods with breakpoints in the browser"
"KMKeymapTest",""
"AlienWeakTable","This class supports simple post-mortem finalization of values associated with gc'ed objects.  An object to be finalized is registered in the table together with another object called 'the tag'. The finalizable object is held onto by the table weakly, the tag object--strongly. A table is initialized with the owner object, which is the object that performs the actual finalization. Some time after a finalizable object is garbage-collected, the owner is sent the #finalize: message with the object's tag as the argument.Instance Variables:	accessProtect <Semaphore>  - A mutex protecting state	firstUnusedIndex <Integer> - The lowest index in strongArray that is empty (an invariant)	lastUsedIndex <Integer> - The highest index in strongArray that is not empty (an invariant)	weakArray <WeakArray> - The array of objects whose death we're interested in.	strongArray <Array> - The array of corresponding objects that wll be passed to the owner when their corresponding element in weakArray is garbage collected.	owner <Object> - The object that is sent finalize: with the tag of an object that has been garbage-collected."
"InterpolatedGradientFillStyle","Gradient fill style that uses proper alpha-aware interpolation."
"ExpanderMorph","A morph that can expand or collapse to show its contents."
"SessionManagerRegistrationTest",""
"MCRepositoryError","I am an MC-specific errror"
"GLMExtensionsTest",""
"GLMLogger","This is the abstract class for the Glamour loggers. These classes are typically used for debugging hte highly dynamic Glamour model."
"FLCompiledMethodSerializationTest",""
"ObjectLayout","I am the superclass of standard layouts for Objects."
"FreeTypeFontSelectorDialogWindow","I'm a dialog to select a font. Usage example:|fontSelector|fontSelector := FreeTypeFontSelectorDialogWindow new.UITheme builder openModal: fontSelector.fontSelector selectedFont inspect."
"GTSpotterIterator",""
"MCVersionNameAndMessageRequest","Notify to requests for version name and message"
"MetacelloTestsGoferUnload",""
"NECLocalEntry","I represent a local variable"
"ManifestSystemFileRegistry","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"OSTouchThreeFingersSwipeDetector","I am detecting the scrolls made with two fingers.I send these event back to my handler: 	- OSTouchThreeFingersSwipeBeginEvent 	- OSTouchThreeFingersSwipeMoveEvent 	- OSTouchThreeFingersSwipeEndEvent 	- OSTouchThreeFingersSwipeAbortEvent "
"MouseClickState","MouseClickState is a simple class managing the distinction between clicks, double clicks, and drag operations. It has been factored out of HandMorph due to the many instVars.Instance variables:	clickClient 	<Morph>		The client wishing to receive #click:, #dblClick:, or #drag messages	clickState 	<Symbol>	The internal state of handling the last event (#firstClickDown, #firstClickUp, #firstClickTimedOut)	firstClickDown 	<MorphicEvent>	The #mouseDown event after which the client wished to receive #click: or similar messages	firstClickUp 	<MorphicEvent>	The first mouse up event which came in before the double click time out was exceeded (it is sent if there is a timout after the first mouse up event occured)	firstClickTime 	<Integer>	The millisecond clock value of the first event	clickSelector 	<Symbol>	The selector to use for sending #click: messages	dblClickSelector 	<Symbol>	The selector to use for sending #doubleClick: messages	dblClickTime 	<Integer>	Timout in milliseconds for a double click operation	dragSelector 	<Symbol>	The selector to use for sending #drag: messages	dragThreshold 	<Integer>	Threshold used for determining if a #drag: message is sent (pixels!)"
"OpenToolTest","SUnit tests for opening of tools"
"HTTPProgress","I am HTTPProgress, a notification to show progress when using HTTP.I include	- total: The total size of the download/upload (if known)	- amount: The completed amount of the download/upload (if known)Use #total:, #amount: or #amountLeft: to set the appropriate byte counts to indicate progress.Use #fraction or #percentage as a value that indicates progress.Total and amount are optional and can be nil. Test using #isEmpty.You can try 	HTTPProgress example."
"BottomRightGripMorph","I am the handle in the right bottom of windows used for resizing them."
"RBReadBeforeWrittenTesterTest",""
"UnlimitedInstanceVariableSlot","We store state in a hidden array. Contrary to normal instance variables the number is unlimited."
"MCRemovalPreambleDefinition","A preamble evaluated before unloading/removing"
"RBAddMethodTest",""
"RBComment","A RBComment represents a text comment associated to an AST node."
"RBAddInstanceVariableTest",""
"FFITypeArrayType",""
"ProportionalLayout","I represent a layout that places all children of some morph in their given LayoutFrame."
"FFIUInt64","I'm an unsigned int type (64bits)I map to a ulonglong type. "
"DAPackageRelationGraphDiff","A PDPackageRelationGraphDiff do the diff between two PDPackageRelationGraph (an older and a newer) to detect : - which packages added/removed : packagesDiff. - which dependent packages added/removed from a package : dependentPackagesDiff. - which dependencies added/removed from a dependent package."
"AthensAbstractShape","In Athens, any object can play role of a shape.I demonstrating the minimal protocol which should be supportedby ""shape"" role, to be used with Athens canvas.See my methods comments for more details."
"RBParseTreeRule","RBParseTreeRule is the abstract superclass of all of the parse tree searching rules. A parse tree rule is the first class representation of a particular rule to search for. The owner of a rule is the algorithm that actually executes the search. This arrangement allows multiple searches to be conducted by a single Searcher.Instance Variables:	owner	<ParseTreeSearcher>	The searcher that is actually performing the search.	searchTree	<RBProgramNode>	The parse tree to be searched."
"FinderClassNode","A FinderClassNode is a node used by the FinderUI's tree representing a Class"
"ByteTextConverterTest","SUnit tests for ByteTextConverter"
"HistoryNodeTest",""
"TxTextPositionToViewCoordinatesTest",""
"FillStyleBorder","BorderStyle supporting general (potentially composite) fillstyles. "
"GradientFillStyle","A gradient fill style is a fill which interpolates smoothly between any number of colors.Instance variables:	colorRamp	<Array of: Association> Contains the colors and their relative positions along the fill, which is a number between zero and one.	pixelRamp	<Bitmap>		A cached version of the colorRamp to avoid needless recomputations.	radial		<Boolean>	If true, this fill describes a radial gradient. If false, it is a linear gradient.	isTranslucent	<Boolean>	A (cached) flag determining if there are any translucent colors involved.Class variables:	PixelRampCache <LRUCache>	Recently used pixelRamps. They tend to have high temporal locality and this saves space and time."
"MorphChanged","I am raised when a morph property changed, and should be propagated to dependents"
"ShiftedField","I represent the change of a shifted field on an instance.The old field and the new field correspond to the same Slot.In terms of method migration, it is only necessary to update the index of direct accessors/bytecodes to instance variable."
"RBRemoveClassRefactoring",""
"RubPlainSegmentMorph",""
"IRPopIntoRemoteTemp","pop into remote temp"
"ResolutionRequest","I represent a request for user assistance in resolving an origin. I am a resumable exception that gets raised when there is no way of automatically resolving a particular origin. "
"ConfigurationOfShoreLineReporter","Copy me to create a new configuration or edit and evaluate the following doits.        ""Create configuration class and initial baseline method""        MetacelloToolBox                 createBaseline: '1.0-baseline'                for: 'MyProject'                repository: 'http://www.example.com/MyProjectRepository'                requiredProjects: #('Gofer')                packages: #('MyProject-Core' 'MyProject-Tests')                dependencies:                        {('MyProject-Core' -> #('Gofer')).                         ('MyProject-Tests' -> #('MyProject-Core'))}                groups:                        {('default' -> #('Core')).                        ('Core' -> #('MyProject-Core')).                        ('Tests' -> #('MyProject-Tests'))}.	   ""create initial development method from the baseline""         MetacelloToolBox               createDevelopment: '1.0'               for: 'MyProject'                importFromBaseline: '1.0-baseline'                description: 'initial version'."
"IRInstruction","I am an instruction in the IR (intermediate representation) language.  The IR serves as the intermediary between the Smalltalk language and the bytecode language.  It is easier to optimize and translate to/from this language than it is to optimize/translate directly from Smalltalk to bytecodes.  The IR is generic and simple consisting of just twelve instructions.  They are:	goto: labelNum	if: boolean goto: labelNum1 otherwise: labelNum2	label: labelNum	popTop	pushDup	pushLiteral: object	pushTemp: name	blockReturn	returnTop	send: selector	send: selector toSuperOf: behavior	storeTemp: nameEach instruction is reified as an instance of one of my subclasses and grouped by basic block (IRSequence) into an IRMethod.  IRInterpreter visits each instruction in a IRMethod responding to the above instruction messages sent to it."
"GlobalIdentifierWithSton",""
"BIFormatSettingsExample","Some examples of the action of a pretty printing option "
"AuthorNameRequest","I am used to request a new author name."
"RubTextInsertionStrategy","I insert the notification directly in the text at the given position. (I alter the content of the text editor)"
"EyeSetInspector","Specialized version of inspector showing values only"
"Date","Instances of Date are Timespans with duration of 1 day.Their default creation assumes a start of midnight in the local time zone."
"MetacelloProjectSpecLoadConflict",""
"UIManager","UIManager is a dispatcher for various UI requests."
"KMKeymapBuilder","I am a specific builder to configure one shortcut."
"InstructionStream","Instance variables:	sender: <Context|nil> context that invoked this context	pc: <SmallInteger> (pc = program counter) offset of the bytecode instruction currently executedMy instances can interpret the byte-encoded Smalltalk instruction set. They maintain a program counter (pc) for streaming through CompiledMethods. My subclasses are Contexts, which inherit this capability. They store the return pointer in the instance variable sender, and the current position in their method in the instance variable pc. For other users, sender can hold a method to be similarly interpreted. The unclean re-use of sender to hold the method was to avoid a trivial subclass for the stand-alone scanning function."
"SnapshotDone","I am announced when the image has been saved. Note that the announcement is done *after* the execution was frozen. So you can send me #isNewImage to know if the current image instance is the same that started the save action."
"DockingBarToggleMenuItemMorph","A DockingBarToggleMenuItemMorph is a specialized version of its superclass for DockingBar behavior.There is a bit of duplication between DockingBarToggleMenuItemMorph and DockingBarMenuItemMorph because iof single inheritance limit: DockingBarToggleMenuItemMorph inherits from ToggleMenuItemMorph (and also from DockingBarMenuItemMorph).One of the problem is that in addition, the use of toggleMenuItem or simple menuItem looks random.DockingBarMenuItemMorph is created by	add: wordingString icon: aForm help: helpString subMenu: aMenuMorph 	and DockingBarToggleMenuItemMorph is created by	add: wordingString font: aFont icon: aForm help: helpString subMenu: aMenuMorph "
"RBRemoveInstanceVariableChange",""
"RBRenameTemporaryTest",""
"MetacelloAlternateResource",""
"MockSourceEditor","A mock object mocking a source editor"
"MetacelloVersionDiffReport",""
"GTProfileSelectionDebugAction","This action is responsible for profiling  a selected piece of code from the code pane of the debugger."
"MultipleSettingDeclaration","A declaration for multiple settings"
"RPackageAnnouncement","Common superclass for package related announcements"
"TraitExclusion","See comment of my superclass TraitTransformation."
"MetacelloGroupSpecTestCase",""
"ZnUTF16Encoder","I am ZnUTF16Encoder, a concrete subclass of ZnCharacterEncoder.I implement the variable length UTF-16 encoding and decoding of Unicode according to RFC 2781.Wikipedia reference http://en.wikipedia.org/wiki/UTF-16Part of Zinc HTTP Components."
"RBLiteralToken","RBLiteralToken is the first-class representation of a literal token (entire literals, even literal arrays, are a single token in the ST80 grammar.).Instance Variables:	stopPosition	<Integer>	The position within the source code where the token terminates."
"RBExtractMethodToComponentRefactoring",""
"ZnResourceMetaUtils","I am ZnResourceMetaUtils.I contain some class side utility methods.Part of Zinc HTTP Components."
"BytecodeEncoder","I am an abstract superclass for different bytecode set encoders.  Subclasses inherit the literal management of Encoder and encapsulate the mapping of opcodes to specific bytecodes."
"RBGuardClauseRule","Transforms single branch conditionals with multi-statement bodies into a sequence of statements guarded by a conditional return.For example[[[ foo 	statements. 	condition ifTrue: [ statement1. statement2 ]]]]is transformed into [[[  foo	statements.	condition ifFalse: [^self].	statement1.	statement2.]]]"
"MCWorkingHistoryBrowser","Browser for working history"
"AbstractEnumerationVisitor","I'm an abstract superclass for enumeration operations on directory entries. "
"OSJoyAxisEvent","I am the  joystick axis event.This event is generated when a joystick stick is moved.The which parameter gives the joystick index.The axis parameter is the index of the axis that moved.The value parameter is how much the axis was moved.The mapped parameter tells if the axis index has been mapped into the index of a standard layout.The hasMapping parameters tells if this joystick is generating a mapped version of the event."
"SpecLayout","A SpecPresenter is a object used to describe a user interface"
"MCVersionSorter","Sort versions"
"MorphDeleted","I'm an announcement raised when a morph is deleted. Subscribe to me when you want to do things after the morph is opened.Take into account that when a morph is deleted, all it's children also get deleted and they raise a similar announcement."
"SDL_ControllerDeviceRemovedEvent","SDL2 library structure representing a controller device removed data."
"Workspace","I'm workspace: a great place to execute top-level expressions to compute something useful, and it is a great place to develop bits of a program before those bits get put into class methods.To open a new workspace, execute one of the following expression:[[[	self open	self openContents: '''Pharo is cool'''	self openLabel: 'A cleaner workspace'		self open label: 'Tutu']]]"
"RBRemovePoolVariableChange",""
"ApplicationWithToolbar","I am a simple example showing how to use a menu model to have a menu toolbar.ApplicationWithToolbar new openWithSpec"
"SlReporter","A SlReportSender serializes and send a report generated by an exception to the server."
"MCWriter","Common superclass for metacello writers"
"RubKeystroke","I am raised when a keystroke is done"
"MCCredentialsRequest","I am used to prompt in a UI indepentent way for a username and a password.If the user successfully entered the two strings I return an MCServerCredential if not I return nil."
"RBCascadedNextPutAllsRule","Use cascaded nextPutAll:''s instead of #, in #nextPutAll:.Indeed this is really important to understand that the implementation of the concatenation of strings creates a new string for each uses of ,.Therefore if you use five , to concatenate an expression you create 5 intermediate strings for nothing. Using nextPutAll: just add the string in the stream.Have a look at  streamContents:. Here is an exampleString streamContents: [ :s|		s nextPutAll: '---'.		s nextPutAll: self.		s nextPutAll: '---' ]."
"GLMPharoScriptPresentation","I provide support for displaying snippets of Smalltalk code  (e.g. dealing with variable binding)"
"Unicode","This class holds the entry points for the utility functions around characters."
"RandomTest","SUnit tests for random generator"
"ClassOrMethodDefinitionAcceptor","I am an acceptor in the ""weird"" context when the text entered could be a class definition or a method definition.For example if a package and a class is selected but the user does not define a method but we new class."
"ManifestSystemAnnouncements","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"ManifestAnnouncementsCore","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"PharoTutorialTestGoOnMockTutorial","SUnit tests for tutorial navigation"
"AthensWrappedWorldDisplay","An AthensWrappedWorldDisplay acts as a DisplayScreenfor a wrapped WorldMorph.Instance Variables	realDisplay:		the realdisplay	wrapMorph:	the wrapped world"
"GTSpotterHeaderBrick",""
"LockableTab","I am a tab which can be locked/unlocked with according action and icon"
"MCFilteredVersionSorter","Sort filtered versions "
"FLWordObjectCluster","I am the generic cluster for storing and loading variable word objects. Most word-like objects are subclasses from ArrayedCollection. Hence, we may have used the method #writeOn: to serialize, and #newFromStream: to materialize. #writeOn: is slow because it ALWAYS encode wors in a big endian format. Most machines today are even little endian. Even worst, #newFromStream: has to always do a #restoreEndianness. #newFromStream: is fast because it uses the method #nextWordsInto: which is a hack but that is really fast. The problem is that #nextWordsInto: has to always do the #restoreEndianness when we are in little endian machines (most of the time).Hence, this cluster provives the best of both worlds: the serialization is done with a platform-dependen way, that is, the endianness will be the same of the machine where we are serializing. In addition, we serialize with the same hack that #nextWordsInto: uses, that is, the Bitmap >> hackBits:And the materialization will use a variation of #nextWordsInto:  (#fuelNextWordsInto:) that ONLY does the #restoreEndianness if the machine where we are materializing has a different endianness than where we have serialized the object. To do this, while serializing, we store in the header of the Fuel stream, the endianness. Then in materialization, we compare agains that. Conclusion: we only restore endianness when needed.Notice, in addition, that the method #newFromStream: sends the message #restoreEndianness. This method EXPECTS that the object was serialized in big endian format, and it will only change the endianness if we are materializing in a little endian machine. This means that if you serialize in little endian and materialize in big endian, you are screw.  For this reason, this cluster uses a method that always change the endianness, Bitmap class >> swapBytesIn:from:to: Future work: maybe we can modify and use the Bitmap hackBits:   not only for materialization but also for serialization. "
"MethodNode","I am the root of the parse tree."
"RubTextAccepted","I am raised when the text has been accepted"
"FLSingletonMockEnforced","A test mock where a new instance is enforced"
"MorphTreeNodeMorph","I draw the node part of a tree."
"LocaleChangedTest",""
"GTSpotterBreadcrumbVisibilityChanged",""
"MacOSResolver","I am an expert on Mac OS X filesystem conventions. I resolve origins according to these conventions."
"RadioButtonGroupExample","A RadioButtonGroupExample is an simple example about how to use RadioButtons and RadioGroup"
"SUnitTutorial","This is a custom help book providing a tutorial for the SUnit framework."
"RegexMatchingError","This class represents matching errors in regular expressions."
"OSWindowBench",""
"LazyTabPageAnnouncement",""
"TxVerticalSlider",""
"DAPackageTest",""
"TxBackColorAttribute","I represent the background color of a text span"
"GLMLoggerTest",""
"ZnBivalentWriteStream","I am ZnBivalentWriteStream, wrapping another write stream.I allow both Characters and Strings as well as Integers (0 to: 255) and ByteArrays to be writtten to me.The write stream that I wrap can be both binary as well as character based.Part of Zinc HTTP Components."
"FLDelayedSerializationMock",""
"LazyTabPage",""
"RGSliceTest","SUnit tests for slices"
"ZnDefaultCharacterEncoder","I am ZnDefaultCharacterEncoder.I am a DynamicVariable and a ProcessSpecificVariable.I can be used to modify the default ZnCharacteEncoder on a per process basis, for example:ZnDefaultCharacterEncoder 	value: ZnUTF8Encoder new	during: [ ^ ZnClient new get: 'http://zn.stfx.eu/zn/small.html' ]"
"JoinSection",""
"MetacelloScriptingResource",""
"ZnPercentEncoder","I am ZnPercentEncoder.I implement RFC 3986 percent encoding and decoding.All characters that are not part of a safe set are encoded using a percent (%) followed by a two digit hexadecimal number of a byte value. Non-ASCII characters are first encoded, normally using UTF-8.My #encode: and #decode: messages work from String to String.My decoder will accept + as an encoding for a space by default.See also http://en.wikipedia.org/wiki/Percent-encodingPart of Zinc HTTP Components"
"Parser","I parse Smalltalk syntax and create a MethodNode that is the root of the parse tree. I look one token ahead."
"Collection","I am the abstract superclass of all classes that represent a group of elements."
"MonticelloRepositoryBrowser","MonticelloRepositoryBrowser example"
"OSKeyDownEvent","This event is delivered when user pressing down a key"
"RegexHelp","This is a custom help book for the regular expression framework."
"ClassDefinitionAcceptor","I am an acceptor in the case a class definition has been entered.My action is then to compile the definition as a class object"
"KomitFtpRemote",""
"ColorMappingCanvas","I'm an abstract class which introduce a filter between a drawing request and the final output, handled by #mapColor:For each potential pixel operation like: source -> op -> outputit introducing a color mapping stage: source -> op -> mapping -> outputThen #mapColor: can be redefined in subclasses to implement more specific behavior. For example:- ShadowDrawingCanvas will replace the rendered color with the color of shadow (if not transparent).- AlphaBlendingCanvas will add or intensify alpha of rendered color.For an easy to understand example see  #drawPolygon:color:borderWidth:borderColor:"
"VileFinalizer","I am test object used for a WeakRegistry test.I add myself to a given WeakRegistry and on finalization I modify the very same registry by removing myself from it."
"FTSimpleSelection","I define the simple selection strategy. I allow tables using me to manage single selection rows."
"TxSliderAnnouncement",""
"PNGReadWriterTest",""
"ZnLogEvent","I am ZnLogEvent, the base class of a log events emitted by elements of the Zinc HTTP Components framework.I add a timestamp and a simple id attribute. The id can wrap around and should only be used to distinguish between events that have the same timestamp.ZnLogEvents are distributed as Announcement through a singleton Announcer that I maintain.I have a small convenience API to log to the Transcript or open a simple GUI on the emitted log events."
"TabSelected","I am the state of a selected tab"
"DelayWaitTimeout","DelayWaitTimeout is a special kind of Delay used in waitTimeoutMSecs: to avoid signaling the underlying semaphore when the wait times out."
"OCVariableSpecialisatioTest",""
"FileLocatorStoredSetting","I am responsible for storing information about FileLocator objects."
"RBDefineBasickCheckRule","Each rule should define a #basicCheck: method which accepts an entity to be validated by the rule.If the entity violates the rule, method should ruturn ""true"", otherwise - ""false"".It is recommended to reuse #basicCheck: functionality in #checkClass: and #checkMethod:"
"SingleCodeCriticResultList","I am a browser for the SmallLint Critics of a rule."
"FTTableMorph","I'm an implementation of a table, in a not-naive way. I assume I can have many rows, then I do not try to show all of them at once. Instead, I keep a datasource and I demand rows when needed (datasource implements a flyweight to fill the visible rows).I should not be subclasse. An extension of FastTable should happen on a data source an not here. Extend me ONLY if it is impossible to do what you want on the data source.Examples: -------------FTTableMorph new	extent: 200@400;	dataSource: (FTSimpleDataSource elements: (1 to: 10000) );	openInWindow.	You can check better examples in FTExamplesA FastTable have the possibility to be searchable, this is activate by default. You can disable this with the method #disableSearch.But you also have the possibility to make your FastTable filterable with the method #enableFilter. But search and filter cannot be use in the same time."
"MTDevelopmentWorkfowTestWithXMLParser",""
"ClassModification","I represent a modification in a class. "
"GraphicFontSettings","Settings for the fonts"
"OSTouchTwoFingersScrollMoveEvent","Two fingers are scrolling"
"DAPackageCycleGenerator","A PDGraphVizGenerator is a class able to generate a dot file from a package cycle (PDPackageCycle)"
"PharoTutorialHelpTutorialBuilderTest","SUnit tests for PharoTutorialHelpTutorialBuilder"
"ScriptLoaderTest",""
"DelayMillisecondSchedulerTest","Provide tests for DelayScheduler"
"GLMTableColumn","This is a helper class for the TablePresentation.Instance Variables:	title	<ProtoObject | PseudoContext>	computation	<ProtoObject | PseudoContext>"
"MBValidateAllConfigurationCommand","Command to validate all configurations in versionner"
"GTFilterAlike",""
"MCSnapshotBrowserTest",""
"FT2GlyphSlot","Do not rearrange these fields!face -- the FT2Face that owns this FT2GlyphSlot.Note that even when the glyph image is transformed, the metrics are not.linearHoriAdvance -- For scalable formats only, this field holds thelinearly scaled horizontal advance width for the glyph (i.e. the scaledand unhinted value of the hori advance).  This can be important toperform correct WYSIWYG layout.Note that this value is expressed by default in 16.16 pixels. However,when the glyph is loaded with the FT_LOAD_LINEAR_DESIGN flag, this fieldcontains simply the value of the advance in original font units.linearVertAdvance -- For scalable formats only, this field holds thelinearly scaled vertical advance height for the glyph.  SeelinearHoriAdvance for comments.advance -- This is the transformed advance width for the glyph.format -- This field indicates the format of the image contained in theglyph slot.  Typically FT_GLYPH_FORMAT_BITMAP, FT_GLYPH_FORMAT_OUTLINE,and FT_GLYPH_FORMAT_COMPOSITE, but others are possible.bitmap -- This field is used as a bitmap descriptor when the slot formatis FT_GLYPH_FORMAT_BITMAP.  Note that the address and content of thebitmap buffer can change between calls of @FT_Load_Glyph and a few otherfunctions.bitmap_left -- This is the bitmap's left bearing expressed in integerpixels.  Of course, this is only valid if the format isFT_GLYPH_FORMAT_BITMAP.bitmap_top -- This is the bitmap's top bearing expressed in integerpixels.  Remember that this is the distance from the baseline to thetop-most glyph scanline, upwards y-coordinates being *positive*.outline -- The outline descriptor for the current glyph image if itsformat is FT_GLYPH_FORMAT_OUTLINE.num_subglyphs -- The number of subglyphs in a composite glyph.  Thisfield is only valid for the composite glyph format that should normallyonly be loaded with the @FT_LOAD_NO_RECURSE flag.  For now this isinternal to FreeType.subglyphs -- An array of subglyph descriptors for composite glyphs.There are `num_subglyphs' elements in there.  Currently internal toFreeType.control_data -- Certain font drivers can also return the control datafor a given glyph image (e.g.  TrueType bytecode, Type 1 charstrings,etc.).  This field is a pointer to such data.control_len -- This is the length in bytes of the control data.other -- Really wicked formats can use this pointer to present their ownglyph image to client apps.  Note that the app will need to know aboutthe image format.width, height, hBearingX, hBearingY, hAdvance, vBearingX, vBearingY, vAdvance -- The metrics of the last loaded glyph in the slot.  Thereturned values depend on the last load flags (see the @FT_Load_GlyphAPI function) and can be expressed either in 26.6 fractional pixels orfont units."
"DelayMicrosecondScheduler","This concrete subclass uses the microsecond primitive & clock, which are based on a 64-bit LargePositiveInteger that rolls over roughly every 50,000 years.There are some code duplications with simbling classes for performance reasons.See parent class comment for more info."
"Number","Class Number holds the most general methods for dealing with numbers. Subclasses Float, Fraction, and Integer, and their subclasses, provide concrete representations of a numeric quantity.All of Number's subclasses participate in a simple type coercion mechanism that supports mixed-mode arithmetic and comparisons.  It works as follows:  If	self<typeA> op: arg<typeB>fails because of incompatible types, then it is retried in the following guise:	(arg adaptTypeA: self) op: arg adaptToTypeA.This gives the arg of typeB an opportunity to resolve the incompatibility, knowing exactly what two types are involved.  If self is more general, then arg will be converted, and viceVersa.  This mechanism is extensible to any new number classes that one might wish to add to Pharo.  The only requirement is that every subclass of Number must support a pair of conversion methods specific to each of the other subclasses of Number.Implementation notes----------------------------------The implementation of #degreeCos and #degreeSin is such that results are exact for any multiple of 90.Care is also taken to evaluate the sine between -90° and 90°, this will avoid #degreesToRadians and i386 FPU sine function to accumulate round off errors due to approximate representation of pi.We can thus evaluate 240 degreeCos with at most 1 ulp error. It's not perfect, but better than previous implementation.For cosine, we know that:	cosd(x)=cosd(abs(x))	cosd(x)=sind(90-x)thus the trick is to evaluate:	cosd(x)=sind(90-abs(x)) after appropriate modulo in [-180,180[This way, we are sure to evaluate the sine between -90° and 90°The #degreesToRadians and #sin are used rather than #degreeSin to avoid cycles.For sine, it would be necessary to evaluate eithersind(x) if abs(x) <=90or sind(180-x) if abs(x) >= 90A possible implementation would be:	| x |	x := 90 + self \\ 360 - 90.	x >= 180 ifTrue: [x := 180 - x].	^x degreesToRadians sinWe prefer evaluating cosd(90-x) thus providing a branch free implementation."
"TaskbarMorph","Themed synchronous taskbar (not using #step to poll windows). The buttons provide visual feedback as to whether a window is active or minimised (collapsed) plus a popup menu with options to restore, minimise, maximise and close the associated window. Optional (via settings) preview of the window while mouse is over a taskbar button."
"MenuRegistration","A MenuRegistration stores the declaration of a menu item. It is mainly an handler for a PluggableMenuItemSpec. A menu item is declared withing a particular method tagged with a pragma. This kind-of method takes a builder as argument and its evaluation results in the building of a MenuRegistration sub-tree which is stored in the builder.   As an example:MenuRegistrationExample class>>myOwnCoolToolRegistrationOn: aBuilder 	<worldMenuExample> 	(aBuilder item: #MyOwnCoolTool)		label: 'My own cool tool';		target: Workspace; 		selector: #openContents: ;		arguments: #('yep, my own cool tool can be opened from the world menu ! :)')	Evaluating this method results in the creation of a MenuRegistration which name is #MyOwnCoolTool. Thus, the resulting sub-tree is only made of a root node. After it has be built, this root node is recorded in the builder. To experiment this, just evaluate the following code:-------------| builder |builder := PragmaMenuBuilder new.MenuRegistrationExample myOwnCoolToolRegistrationOn: builder.builder explore-------------Using pragma allows the menu builder to dynamically discover which are the methods to evaluate in order to build a menu. Thus, a resulting menu is built by evaluating a set of methods which share the same pragma keyword.In the following example, all method having <worldMenuExample> are evaluated for the building of the resulting menu:---------------(PragmaMenuBuilder pragmaKeyword: 'worldMenuExample' model: nil) menu popUpInWorld---------------Within a method, three kind of declarations can be used: (1) item by item (2) an item with a sub-menu and (3) a group.1 -  item by item menu registration declaration:This kind of declaring is for the setting of one menu item and only one within a method.1.1 -  A simple menu item with an actionIn the following example, a menu item with the name #'Browser' and a action which consists in sending #openClassBrowser to StandardToolSet is declared:AClassSomewhere class>>openBrowserOn: aBuilder	<myMenuTest>	(aBuilder item: #'Browser') 		target: StandardToolSet; 		selector: #openClassBrowser.A simple action without any argument can also be set with a block:	(aBuilder item: #'Browser') action: [StandardToolSet openClassBrowser]You can also indicate a balloon help string and a particular icon:	(aBuilder item: #'Browser') 		action: [StandardToolSet openClassBrowser];		help: 'Open a system browser';		icon: MenuIcons smallSystemBrowserIconIf the action needs one or several arguments, you can also give it/them as follow:	(aBuilder item: #'Save and quit') 		target: SmalltalkImage current; 		selector: #snapshot:andQuit:.		arguments: #(true true)		By default, the item label is set with the item name but it can be explicitly given as follow:	(aBuilder item: #'Browser')		label: 'System browser'; 		target: StandardToolSet; 		selector: #openClassBrowser.1.2  -  Placing the menu item in a  menuThe resulting menu item of previous example will be placed at the root of the menu.In order to declare another place for it, you have to explicitly set its parent name.As an example, consider the following item which declares a simple entry with no action.Such item is typically used as a root for a sub-menu tree:AClassSomewhere class>>openToolsOn: aBuilder	<myMenuTest>	(aBuilder item: #'Tools')Now, a sub-menu item for #Tools can be declared separately, within another methodby using the #parent: message:AnotherClassSomewhere class>>myToolsOn: aBuilder	<myMenuTest>	(aBuilder item: #'CoolTool')		label: 'Cool tool';		parent: #Tools;Note that the argument of #parent: must be the name of another item. If it is not the case, then the parent name indication is simply ignored.1.3  -  Item orderingIf no ordering setting is indicated, items ordering is unpredicable (it depends on method retrieving order). If one want an item to appear at a certain position, it is possible to set it by sending #order: to a MenuRegistration. The #order: message takes a float as argument. As an example, see  the two following declarations, in the resulting menu, Wozy is placed before 'Wozy configuration'AnotherClassSomewhere class>>myWozySystemOpenOn: aBuilder	<myMenuTest>	(aBuilder item: #'Wozy')		parent: #CoolTool;		order: 1.0		AnotherClassSomewhere class>>myWozySystemConfigOn: aBuilder	<myMenuTest>	(aBuilder item: #'Wozy configuration')		parent: #CoolTool;		order: 2.02) Item with a submenuThe one menu item - one declaring method way can be ugly. When a set a menu items are known to be put all-together, it is possible to declare the sub-tree in one method. The following example show such a sub-tree with the #Tools item at root and four sub-items declared in a single method. Note a menu target declared for the root is shared by all sub-items. In that case, it also remains possible for a sub-item to declare its own target.AClassSomewhere class>>openToolsOn: aBuilder	<myMenuTest>	(aBuilder item: #'Tools')		target:  StandardToolSet; ""The target is shared by all children""		with: [ ""My sub-menu are given here""			(aBuilder item: #'System browser') selector: #openClassBrowser.			(aBuilder item: #Workspace) selector: #openWorkspace.			(aBuilder item: #'Test Runner') selector: #openTestRunner.			(aBuilder item: #'Monticello Browser') selector: #openMonticelloBrowser]		3) group of menu itemsWhen you want some items to be shown always grouped together, you can use a group. Its declaring is like an item with a submenu except that you are using the message #group: instead of #item:. The consequence is that only the children are shown in the menu. Of course, #label and #icon: are ignored for a group. Here is an example:AClassSomewhere class>>mostUsedToolsOn: aBuilder	<myMenuTest>	(aBuilder group: #MostUsedTools) ""My name can be also used as parent name""		withSeparatorAfter; ""A separator will be added after my last child""		order: 0; ""the entire group will be placed at the top""		target:  StandardToolSet; ""The target is shared by all children""		with: [			(aBuilder item: #'System browser') selector: #openClassBrowser.			(aBuilder item: #Workspace) selector: #openWorkspace.			(aBuilder item: #'Test Runner') selector: #openTestRunner.			(aBuilder item: #'Monticello Browser') selector: #openMonticelloBrowser]---------------------------		Instance Variables	isGroup:		<Boolean>	itemList:		<SortedCollection>	order:		<Number>	owner:		<MenuRegistration>	parentName:		<Symbol>	spec:		<PluggableMenuItemSpec>isGroup	- if true, then this item is ignored and flattenitemList	- all my MenuRegistration (my sub-menus or my elements if i'm a group)order	- my order in the owner listowner	- my ownerparentName	- the declared parent name which serve as basis for PragmaBenuBuilder>>#arrangeRegistrationsspec	- my PluggableMenuItemSpec"
"KomitSmalltalkhubRemote","I encapsulate a repository stored on smalltalkhub"
"MCTestCase",""
"WorkingSession","I am the unique object for the current smalltalk session (I.e. between a startup and a shutdown).On each image startup the current session is invalidated and a new session is created.I define how errors should be handled.ps: I replace the old Session class that was only used as a session identifier  "
"MetacelloReferenceConfig",""
"MCFileTreeStSnapshotReader","Snapshot reader"
"RFSenderReification","I reify the sender for message sends and methods"
"ZnStatusLine","I am an HTTP Status Line.I consist of an HTTP protocol version, an integer HTTP status code and an HTTP reason string.I can be used for generating and parsing.Part of Zinc HTTP Components."
"RFASTTranslatorForValue","WORKAROUND: copy of OCASTTranslatorForValue.Will be removed when the new Translor design is in place"
"RxmPredicate","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--Instance holds onto a one-argument block and matches exactly one character if the block evaluates to true when passed the character as the argument.Instance variables:	predicate		<BlockClosure>"
"ExternalClipboard","An ExternalClipboard is the abstract superclass for the platform specific clipboards based on the clipboard plugin (former ExtendedClipboardInterface originally developed for Sophie).Instance Variables	clipboard:		SmallIntegerclipboard	- handle for the external clipboard. If 0 the external clipboard is invalid"
"NNavDirectionFirstChild","I navigate throw the childs picking allways the firs one"
"FileWriteError","Notify about an error when trying to attempt to write to a file"
"ReStringBasedCritic","I am a critic that provides a selection interval by searching a 'faulty substring' in the target's source code. I also use the 'faulty substring' to enhence the critic's title"
"RBProgramNode","RBProgramNode is an abstract class that represents an abstract syntax tree node in a Smalltalk program.Subclasses must implement the following messages:	accessing		start		stop	visitor		acceptVisitor:The #start and #stop methods are used to find the source that corresponds to this node. ""source copyFrom: self start to: self stop"" should return the source for this node.The #acceptVisitor: method is used by RBProgramNodeVisitors (the visitor pattern). This will also require updating all the RBProgramNodeVisitors so that they know of the new node.Subclasses might also want to redefine match:inContext: and copyInContext: to do parse tree searching and replacing.Subclasses that contain other nodes should override equalTo:withMapping: to compare nodes while ignoring renaming temporary variables, and children that returns a collection of our children nodes.Instance Variables:	comments	<Collection of: Interval>	the intervals in the source that have comments for this node	parent	<RBProgramNode>	the node we're contained inShared Variables:	FormatterClass	<Behavior>	the formatter class that is used when we are formatted"
"MCReader","Common superclass for Monticello readers"
"ReCriticEvent","A Renraku critic event about an entity"
"DACompositeDependency","A PDCompositeDependency is a composite dependency. A composite pattern is using.Actually in all case this dependency contains the dependencies between two packages and the instance variable dependencies contains all the type of dependencies (Extension, Inheritance, Reference, Trait)."
"UserInputEvent","A general user input event like for keyboard or mouse"
"KMPlatformSpecificKeyCombination","I represent a platform specific key combination, one that should only be launched for a particular platform such as windows, unix or mac.I'm a sort of decorator of a key combination."
"ExceptionTests","SUnit tests for exceptions"
"RBTemporaryNode","I am a specialized variable node for temporary variables"
"FastDraggingFrameMorph","I represents the windows frame for window dragging or resizing when fast dragging or fast resizing is wanted (when  UITheme currentSettings fastDragging is set to true).For window resizing, I'm created by a corner or an edge grip when the mouse is clicked on it (see SystemWindow>>doFastWindowReframe:). For window dragging, I'm created when the top window bar is clicked (see SystemWindow>>doFastFrameDrag:).  I'm always created with the same bounds as the target window bounds. The mouse focus is given to me and my bounds are changed while the hand is moving. On mouse up, the window bounds is set to my own bounds and then I'm deleted.Instance Variables	location:		<Symbol>	startGap:		<Point>	target:		<SystemWindow>location	- The symbol representing the corner or the edge (#topLeft, #top, #topRight .... or #left). I'm set to nil for window draggingstartGap	- For window dragging, keep track of the distance between the window top bar first click location and the window positiontarget	- The window to be resized or dragged"
"NECControllerTest","A NECControllerTest is a test class for testing the behavior of NECController"
"IRBytecodeDecompiler","I interpret bytecode instructions, sending the appropriate instruction messages to my IRBuilder, resulting in an IRMethod."
"RxsEpsilon","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--This is an empty string.  It terminates some of the recursive constructs."
"RecentMessageList","MessageList is a simple object that holds a set of ordered method definitions.See MessageList example for an example.MessageList exampleInstance Variables:	methodReferenceList	<Collection>"
"MCPackageModified","An MCPackageModified is raised when a MCPackage is modified"
"VSBrowseVersionCommand","Open a browser on the selected version of a configuration.The receiver is a aCompiledMethod."
"VSLoadAndCreateNautilusGroupCommand","Load into your image the selected version or baseline. If you already have a version installed, then it will be simply overriden.After loading, it creates a group in Nautilus with all the loaded packages."
"RefactoringAborted","I am raised when the user cancels a refactoring."
"MFClassB","I'm a dummy class for test purposes  "
"FFITestNestingStructure",""
"Editor","New text editors.TextEditor provides most of the functionality that used to be in TextMorphEditor. This class is no longer a Controller!SmalltalkEditor has Smalltalk code specific features.SimpleEditor provides basic functionality for single line text editing. It does not handle fonts and styles, aligning and Smalltalk utilities. It handles one single line."
"GTSpotterProfiler",""
"ZnDigestAuthenticator","I am ZnDigestAuthenticator.I help servers handle HTTP Digest Authentication.I have a nonces dictionary with nonce->opaque associations. I generate a new nonce value for every 401 response I trigger.Part of Zinc HTTP Components."
"OkState","I am the state showing everything is ok"
"OSTouchComplexEvent","I am a touch event composed by several others basic events. "
"CombinedChar","Compositions classVar is a:<Dictionary       key: firstLetter charCode       value: (Dictionary             	  key: diacritical charCode              	 value: combined charCode)>	combined instVar is a <Character>"
"MBAbstractVersionInfoTest","Abstract superclass for version info tests for Versionner"
"FTNilFunction","I am a Function that do nothing to use a Null Object Pattern.	Example (Should only be create by a FTTableMorph)-------------------------------------------------FTNilFunction table: (FTTableMorph with: (1 to: 200))"
"AGroupHasBeenUnregistered","Notify that a group has been unregistered"
"OSJoyDeviceRemovedEvent","I am a joystick device added event.This event is generated when a joystick is disconnected from the computer."
"PasswordDialogWindow","I'm a Dialog whose TextEditors characters are replaced by *. Example:(UITheme builder openModal:         (PasswordDialogWindow new                title: 'Authentification';                textFont: StandardFonts defaultFont;                text: 'Enter your password')) entryText explore"
"GTCurrentSpotterExceptionHandler",""
"ExampleForTest11","An example class at level 2 (indirectly below Object) used for testing class hierarchy"
"ZnMagicCookieJarTests",""
"ReFeedbacker","I am reporting complaints about critics. No one should use me dirrectly. Use ReCritic>>#reportUselessness instead"
"MCSqueaksourceRepository","I am a specialized MCHttpRepository for http://squeaksource.com.I optimize checks for existing files by doing a head request instead of reloading the whole file list first."
"RealEstateAgent","Responsible for real-estate management on the screen, which is to say, controlling where new windows appear, with what sizes, etc.  5/20/96 sw"
"TextHighlightByBounds","Definition of a clickable highlighted range of text with optional borders."
"SortedCollection","I am a collection close to an OrderedCollection at the exception that I keep my elements sorted by using a Block.Description -------------------Like my superclass, I am a collection that can grow in size but I keep my elements sorted.Because of that you cannot add elements at a fix index (with #at:put: or #insert:before: methods for example).The sort block I use should return a boolean. It takes 2 elements and return true if the first parameter should be before the second, else false.I should be used only if you really need to keep the elements sorted all the time (but there are some exceptions, see at the end). If you do not need it, use OrderedCollection (and possibly his #sort: method).Public API and Key Messages-------------------- class method: #sortBlock:  aBlock 		is a contructor. 		- #sort: aBlock 		is a function to change the way I am sorted. I will also update the index of my elements with the new block.Example-------------------	sortColl := SortedCollection sortBlock: [ :elem1 :elem2 | elem1 < elem2 ].	sortColl		add: 4;		add: 2;		add: 1;		add: 2.	sortColl. 		""result: a SortedCollection(1 2 2 4)""		""But you can also add a collection.""		sortColl addAll: #(3 5 0 6).	sortColl. 		""result: a SortedCollection(0 1 2 2 3 4 5 6)""				""You can charge the block, imagine you have a collection with number and you want at the beginning the odd elements sorted by value then the even elements sorted by value.""		sortColl 		sort:			[ :int1 :int2 | 				((int1 even and: [ int2 even ]) or: [ int1 odd and: [ int2 odd ] ])					ifTrue: [ int1 < int2 ]					ifFalse: [ int1 odd ] 			].	sortColl 		""result: a SortedCollection(1 3 5 0 2 2 4 6)"" Internal Representation and Key Implementation Points.-------------------    Instance Variables	sortBlock:		<Block> 		This is  a sort block used to keep me sorted. I can take 2 parameters that are two values and I return true if the first parameter should be before the second.I refuse the methods that add elements at a fix index.When the user is adding an element, I use some methods like #reSort or #indexForInserting: to add an element at the right position.Discussion----------------(1) sort: and sortBlock: can be used to set an order to my elements but uses different implementation of the sort algorithm... See  https://pharo.fogbugz.com/f/cases/17925/Why-SortedCollection-sort-and-sortBlock-do-not-uses-the-same-method-to-sort.(2) DO NOT USE ADDLAST:!!!! https://pharo.fogbugz.com/f/cases/14812/addLast-should-not-work-in-SortedCollectionx := SortedCollection with: 4 with: 3 with: 2 with: 1 with: 7.y:=x addLast: 6; yourself.y isSorted ""-> false"""
"HowToContributeHelp",""
"Process","I represent an independent path of control in the system. This path of control may be stopped (by sending the message suspend) in such a way that it can later be restarted (by sending the message resume). When any one of several paths of control can be advanced, the single instance of ProcessorScheduler named Processor determines which one will actually be advanced partly using the value of priority.(If anyone ever makes a subclass of Process, be sure to use allSubInstances in anyProcessesAbove:.)Process-specific storage: 	An old implementation using #environmentAt: [ifAbsent:/put:] protocol are no longer supported.	One must not use a process-specific storage (PSS) methods directly, and instead use ProcessSpecificVariable (or subclass) instances to access process-specific storage.	A new implemention is a revision towards making an access to PSS faster.When new instance of ProcessSpecificVariable are created, it obtains an unique index, which is registered using #allocatePSKey: (see class side).This allows to dynamically create as many process-specific variables as needed, and access them in fast manner via simple array index (instead of dictionary lookup,as in previous implementation).Another important aspect of new implementation is that all values in PSS are held weakly. This is done to prevent accidental memory leaksas well as no need to manually unregistering a process-specific keys , once they are no longer in use."
"GLMTreeMorphicTest",""
"LargePositiveIntegerTest","SUnit tests for large positive integers"
"PanelMorphWithSplitters","A PanelMorphWithSplitters is which add splitters the way SystemWindow do it"
"GLMMorphicPaneRenderer",""
"AthensTextComposer","Compose text"
"OCMethodScope","I am the scope for a Method"
"MOPTestClassD",""
"RBInlineAllSendersRefactoring",""
"AthensTigerShape","The tiger shape (see VGTigerDemo runDemo)"
"RBGeneratePrintStringRefactoring",""
"RubScrollBar","I am a scroll bar"
"GLMStackedVerticallyArrangement",""
"MTProject","A project represents a software development project, and more presicely, its depdendencies (also known as configuration).Note: Need to add extra methods with ""for:"" parameter to handle platforms (e.g. for: #'pharo' do)Instance Variables	- configurationClass : the configurationClass this project represents	- repository : The core repository URL of this project	- packages : internal packages (MTPackage) the project depends on	- groups : definitions of set of dependencies (MTGroups)	- depedentProjects : list of external projects this project depends on (list of project names)"
"ComposableModel","ComposableModel is an abstract class which represent a applicative model made to be composed with other ComposableModel"
"RBAddClassVariableTest",""
"ReInspectorPresentationsNonBlockSetup","When setting up a glamorous presentation it is recommended to pass blocks (or literals) into the setup methods (#title:, #display:,  #when: ɩ instead of performing an evaluation right away.This affects the performance of inspector."
"GLMRubTextFieldMorph","A GLMRubTextFieldMorph is xxxxxxxxx.Instance Variables	customHeight:		<Object>customHeight	- xxxxxRaw functions to center textarea:	""for 16: 20,29 - 4""	""newTop := ((self height - self textArea height) / 2.0).	newTop := newTop truncated abs.""		""for 15: 20,28 - 3""	""newTop := ((self height - self textArea height) / 2.0) + 1.	newTop := newTop truncated abs.""		""for 14: 20,26 - 2""	""newTop := ((self height - self textArea height) / 2.0) + 1.	newTop := newTop truncated abs.""		""for 13: 20,24 - 1""	""newTop := ((self height - self textArea height) / 2.0) + 1.	newTop := newTop truncated abs.""		""for 12: 20,23 - 1""	""newTop := ((self height - self textArea height) / 2.0).	newTop := newTop truncated abs.""		""for 11:  20,21 - 0""	""newTop := ((self height - self textArea height) / 2.0).	newTop := newTop truncated abs.""		""for 10:  20,19 - 0""	""newTop := ((self height - self textArea height) / 2.0).	newTop := newTop truncated.""		""for 9: 20, 18 - 0""	""newTop := ((self height - self textArea height) / 2.0) - 1.	newTop := newTop truncated.""		""for 8: 20, 16 - 1""	""newTop := ((self height - self textArea height) / 2.0) - 1.	newTop := newTop truncated.""		""for 7: 20, 14 - 2""	""newTop := ((self height - self textArea height) / 2.0) - 1.	newTop := newTop truncated abs."""
"MetacelloVersionMethodSection",""
"FloatTest","I provide a test suite for Float values. Examine my tests to see how Floats should behave, and see how to use them."
"ExpressionEvaluated","This announcement correspond to code evaluation.  For example, a DoIt or PrintIt evaluated in a workspace raises one of this announcements."
"FTPluggableIconListMorphAdaptorDataSource","I'm a datasource to interpret messages in teh form provided for a PluggableIconListMorph."
"MetacelloSemanticVersionNumber","MetacelloSemanticVersionNumber conforms to version 2.0.0-rc.1 of  [Semantic Versioning 2.0.0-rc.1](http://semver.org/)The most important thing that you need to know is that: **A normal version number MUST take the form X.Y.Z where X, Y, and Z are non-negative integers.****Semantic Versioning Specification** extracted from [Semantic versioning 2.0.0-rc.1](https://github.com/mojombo/semver/blob/3c7f2e8df747ea0ca15208fdfc90e3275240184f/semver.md):Semantic Versioning Specification (SemVer)------------------------------------------The key words ""MUST"", ""MUST NOT"", ""REQUIRED"", ""SHALL"", ""SHALL NOT"", ""SHOULD"",""SHOULD NOT"", ""RECOMMENDED"", ""MAY"", and ""OPTIONAL"" in this document are to beinterpreted as described in RFC 2119.1. Software using Semantic Versioning MUST declare a public API. This APIcould be declared in the code itself or exist strictly in documentation.However it is done, it should be precise and comprehensive.1. A normal version number MUST take the form X.Y.Z where X, Y, and Z arenon-negative integers. X is the major version, Y is the minor version, and Zis the patch version. Each element MUST increase numerically by increments ofone. For instance: 1.9.0 -> 1.10.0 -> 1.11.0.1. Once a versioned package has been released, the contents of that versionMUST NOT be modified. Any modifications must be released as a new version.1. Major version zero (0.y.z) is for initial development. Anything may changeat any time. The public API should not be considered stable.1. Version 1.0.0 defines the public API. The way in which the version numberis incremented after this release is dependent on this public API and how itchanges.1. Patch version Z (x.y.Z | x > 0) MUST be incremented if only backwardscompatible bug fixes are introduced. A bug fix is defined as an internalchange that fixes incorrect behavior.1. Minor version Y (x.Y.z | x > 0) MUST be incremented if new, backwardscompatible functionality is introduced to the public API. It MUST beincremented if any public API functionality is marked as deprecated. It MAY beincremented if substantial new functionality or improvements are introducedwithin the private code. It MAY include patch level changes. Patch versionMUST be reset to 0 when minor version is incremented.1. Major version X (X.y.z | X > 0) MUST be incremented if any backwardsincompatible changes are introduced to the public API. It MAY include minorand patch level changes. Patch and minor version MUST be reset to 0 when majorversion is incremented.1. A pre-release version MAY be denoted by appending a hyphen and a series ofdot separated identifiers immediately following the patch version. IdentifiersMUST be comprised of only ASCII alphanumerics and dash [0-9A-Za-z-].Pre-release versions satisfy but have a lower precedence than the associatednormal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7,1.0.0-x.7.z.92.1. A build version MAY be denoted by appending a plus sign and a series of dotseparated identifiers immediately following the patch version or pre-releaseversion. Identifiers MUST be comprised of only ASCII alphanumerics and dash[0-9A-Za-z-]. Build versions satisfy and have a higher precedence than theassociated normal version. Examples: 1.0.0+build.1, 1.3.7+build.11.e0f985a.1. Precedence MUST be calculated by separating the version into major, minor,patch, pre-release, and build identifiers in that order. Major, minor, andpatch versions are always compared numerically. Pre-release and build versionprecedence MUST be determined by comparing each dot separated identifier asfollows: identifiers consisting of only digits are compared numerically andidentifiers with letters or dashes are compared lexically in ASCII sort order.Numeric identifiers always have lower precedence than non-numeric identifiers.Example: 1.0.0-alpha < 1.0.0-alpha.1 < 1.0.0-beta.2 < 1.0.0-beta.11 <1.0.0-rc.1 < 1.0.0-rc.1+build.1 < 1.0.0 < 1.0.0+0.3.7 < 1.3.7+build <1.3.7+build.2.b8f12d7 < 1.3.7+build.11.e0f985a.About-----The Semantic Versioning specification is authored by [TomPreston-Werner](http://tom.preston-werner.com), inventor of Gravatars andcofounder of GitHub.If you'd like to leave feedback, please [open an issue onGitHub](https://github.com/mojombo/semver/issues).License-------Creative Commons - CC BY 3.0http://creativecommons.org/licenses/by/3.0/"
"MetacelloDictionaryRepositoryTest",""
"ClassMethodBrowser","A ClassMethodBrowser is a simple browser using spec and reusing MethodBrowser to browse classes>>methods>>sourceCode.	| cb |	cb := ClassMethodBrowser new.	cb openWithSpec.	cb classes: Smalltalk allClasses."
"MCVersionHistoryBrowser","Browser for version history"
"RBMoveVariableDefinitionTest",""
"SocketTest","SUnit tests for sockets"
"GTMockSpotter",""
"Nautilus","I'm a new browser based on RPackage and Announcements with fancy goodies:	- groups ( you can create groups with your favorite classes)	- multi-selections	- environments	- iconic buttons	- hierarchy	- pragma based menus	Adding to context menus.On the class-side of your object, create a method that:	1. takes one argument (a PragmaMenuAndShortcutRegistration).	2. Begins with the pragma for whichever menu you want to extend (see AbstractNautilusUI ""menu pragmas"" protocol)		For example, to extend the menu for the method list pane:		methodMenu: aBuilder			<nautilusGlobalMethodMenu>				To see existing examples in your image, browse senders of that pragma"
"Fraction","Fraction provides methods for dealing with fractions like 1/3 as fractions (not as 0.33333...).  All public arithmetic operations answer reduced fractions (see examples).instance variables: 'numerator denominator 'Examples: (note the parentheses required to get the right answers in Smalltalk and Pharo):(2/3) + (2/3)(2/3) + (1/2)		 ""answers shows the reduced fraction"" (2/3) raisedToInteger: 5		 ""fractions also can have exponents"""
"AbstractFontSelectorDialogWindow","Dialog based font chooser with preview."
"MalDominanceNode",""
"MetacelloPackagesSpecTestCase",""
"PointArray","This class stores 32bit Integer points in place. It is used to pass data efficiently to the primitive level during high-bandwidth 2D graphics operations."
"AthensTextMorph","this class is subject of changes/removal. do not use it."
"MBConfigurationBranchTest","SUnit tests for configuration branches in Versionner"
"CairoLibrary","I provide access to cairo library. Since paths and names can be tricky in different versions, I have methods to solve this in any platforms I want cairo to run."
"RBParser","RBParser takes a source code string and generates an AST for it. This is a hand-written, recursive descent parser and has been optimized for speed. The simplest way to call this is either 'RBParser parseExpression: aString' if you want the AST for an expression, or 'RBParser parseMethod: aString' if you want to parse an entire method.Instance Variables:	currentToken	<RBToken>	The current token being processed.	emptyStatements	<Boolean>	True if empty statements are allowed. In IBM, they are, in VW they aren't.	errorBlock	<BlockClosure>	The block to evaluate on a syntax error.	nextToken	<RBToken>	The next token that will be processed. This allows one-token lookahead.	scanner	<RBScanner>	The scanner that generates a stream of tokens to parse.	source	<String>	The source code to parse	tags	<Collection of: Interval>	The source intervals of the tags appearing at the top of a method (e.g. Primitive calls)Shared Variables:	ParserType	<Symbol>	the type code we are parsing"
"KSX1001","This class represents the domestic character encoding called KS X 1001 used for Korean."
"DangerousClassNotifier","Some classes have special importance to the core system.  DangerousClassNotifier notifies users which class defiitions should not be modified. This class is refactored from the following Pharo2 methods:* Behaviour>>shouldNotBeRedefined* ClassBuilder>>tooDangerousClasses* ClassBuilder>>name:  inEnvironment:  subclassOf:  type:  instanceVariableNames:  classVariableNames:  poolDictionaries:  category:  unsafe: Instance Variables	enabled:		<Boolean>	restoreState:		<Boolean>enabled	- Specifies whether this checking is performed. Some system tests that check ""dangerous"" behaviour need this turned off. restoreState	- After disabling for testing, need to restore the previous state. "
"FLObsolete","I am an error produced during serialization, signaled when trying to serialize an obsolete class as global. It is a prevention, because such class is lekely to be absent during materialization."
"EyePointerWrapper","A wrapper used by the PointerExplorer.I wrap a reference so we can stop follwoing back pointers."
"ZnCharacterEncodingError","I am ZnCharacterEncodingError.I am an Error.I signal when something goes wrong while encoding or decoding characters.Part of Zinc HTTP Components"
"MorphicTransform","This class implements simple translation, scaling and rotation for points, as well as inverse transformations.  These transformations are used in TransformMorphs (clipping scrollers) and TransformationMorphs (general flex-morph wrappers) to map, eg, global mouse coords into local coords, and to invert, eg, local damage rectangles into global damage rectangles."
"FileServices","Registered file services for specific file types.To use me you can register a class by adding a method as: MyClass class>>fileReaderServicesForFile: fullName suffix: suffix	<fileService>		^ (FileStream isSourceFileSuffix: suffix)		ifTrue: [ { self mySimpleServiceEntry1 . self mySimpleServiceEntry2 }]		ifFalse: [#()]"
"RBSelfSentNotImplementedRule","This smell arises when a message is sent to self by a method,  but no class in the superclass chain implements such a message. This method sent will certainly cause a doesNotUnderstand: message when they are executed."
"GTMockSpotterTask",""
"GTDebuggerSmokeTest",""
"TestRPackagePrequisites","SUnit tests for RPackage prerequisites"
"AthensBalloonPath","i represent a path shape in balloon backend"
"RGGlobalDefinitionTest","SUnit tests for global definitions (pools, global variables)"
"TelnetProtocolClient","Abstract super class for protocol clients based on the generic telnet protocol ""<response code> <response>""Structure:	responseCode	the numerical (integer) value of the last response code"
"DigitalSignatureAlgorithm","This class implements the Digital Signature Algorithm (DSA) of the U.S. government's ""Digital Signature Standard"" (DSS). The DSA algorithm was proposed in 1991 and became a standard in May 1994. The official description is available as a Federal Information Processing Standards Publication (FIPS PUB 186, May 19, 1994). A companion standard, the Secure Hash Standard, or SHS (FIPS PUB 180-1, April 17, 1995), describes a 160-bit message digest algorithm known as the Secure Hash Algorithm (SHA). This message digest is used to compute the document signature.Here's how to use it:  1. The ""signer"" creates a pair of keys. One of these must be kept private. The other may be freely distributed. For example, it could be built into the signature checking code of an application.  2. When the signer wishes to sign a packet of data (a ""message"") , he uses the secure hash algorithm to create a 160-bit message digest (hash) which is used as the input to DSA. The result of this is a pair of large numbers called a ""signature"" that is attached to the original message.  3. When someone receives a signed message purported to have come from the signer, they compute the 160-bit hash of the message and pass that, along with the message signature and the signer's public key, to the signature verification algorithm. If the signature checks, then it is virtually guaranteed that the message originated from someone who had the signer's private key. That is, the message is not a forgery and has not been modified since it was signed. For example, if the message contains a program, and the recipient trusts the signer, then the recipient can run the program with the assurance that it won't do anything harmful. (At least, not intentionally. A digital signature is no guarantee against bugs! :->)The signer must keep the private key secure, since anyone who has the private key can forge the signer's signature on any message they like. As long as the secret key is not stolen, cryptographers believe it to be virtually impossible either to forge a signature, to find a message that matches an existing sigature, or to discover the signer's private key by analyzing message signatures. Knowing the public key (which, for example, could be recovered from an application that had it built in), does not weaken the security at all.An excellent reference work on digital signatures and cryptography in general is:  Schneier, Bruce  ""Applied Cryptography: Protocols, Algorithms, and Source Code in C""  John Wiley and Sons, 1996.I used this book as a guide to implementing many of the numerical algorithms required by DSA.Patents and Export Restrictions:Many digital signature technologies are patented. DSA is also patented, but the patent is owned by the U.S. government which has made DSA available royalty-free. There is a claim that the government patent infringes on an earlier patent by Schnorr, but the government is requiring the use of DSA, so they apparently believe this claim is not strong enough to be a serious threat to their own patent.Most cryptography technology, including digital signature technology, requires an export license for it to be distributed outside the U.S. Recent legislation may have relaxed the export license requirements, but it would be prudent to check the current regulations before exporting this code."
"AthensCanvas","The Athens canvas is a central object which is used to performs drawings on a surface.Please note, that Athens does not allows you to instantiate canvas directly, instead you obtain a ready for use instance as an argument in #drawDuring: message, sent to athens surface:surface drawDuring: [:canvas | .... ]Using canvas outside a #drawDuring: method is highly discouraged. Doing so may lead to unpredicted behavior/data corruption/image crash."
"GTEventDelivery","I know how to deliver usage and diagnostic data to a remote server.I start and maintain a process for sending data on a regular inteval (#standardDuration).I maintain a queue with the data that needs to be send. If a delivert fails I re-add the data to the queue.Data that is added to my queue must be packaged in an object of type GTEventBundle.  I use the url specified by the bundle.I send the recorder the message #pack to notify it that I enter the delivery cycle.Public API and Key Messages- #activate initializes the delivery process; clients must call this method; it's not called automatically on object creation. - #deliveryCycle implements  the main logic of the delivery process"
"RemotesManager","I am an user interface used to link mcpackages and remotes.RemotesManager new openWithSpec"
"FastTableModel","An FastTableModel is a spec model for a FastTable"
"OSWindowGLRenderer","i am abstract OpenGL renderer facade. "
"FLMaterializer","I am a binary object materializer. See an example of use in FLSerializer's documentation."
"Stdio","I am a facade class to access standard output streams:- standard input- standard output- standard errorI initialize standard streams in a lazy fashion, asking to the VM for the #stdioHandles. I cache those standard streams and release them on shutdown.Known Bugs / subtleties=======================Windows VMs do now support the stdioHandles primitive if they are not compiled specially as command line binaries. To overcome that, on windows this class will create a normal file for std output / input / error."
"TraitsResource","I define objects to be used for testing traits.Browsr references to myself."
"CommandLineHandlerTest",""
"MalTarjanNode","Node type used by the MalTarjan algorithm.Edges are not representated as full objects. We just keep a list of next nodes (following described directed edges)."
"ZnApplicationFormUrlEncodedEntity","I am ZnApplicationFormUrlEncodedEntity, a concrete HTTP Entity holding a set of fields (key value pairs) that is form URL encoded.I am a ZnEntity.Part of Zinc HTTP Components."
"RBRenameTemporaryRefactoring",""
"NewValueHolderTest",""
"PaginatedMorphTreeMorphTests",""
"RBChangeMethodNameRefactoring",""
"RBAddClassTraitChange",""
"STONCStyleCommentsSkipStreamTests",""
"ZnCharacterEncoderTests",""
"OSWindowResizeEvent","I am delivered when window resized by user or OS/window manager."
"ReInvocationSequenceRuleSequence","I simply hold the method names that have to be called before/after each other"
"PluggableCanvas","An abstract canvas which modifies the behavior of an underlying canvas in some way.  Subclasses should implement apply:, which takes a one argument block and an actual canvas to draw on.  See apply: for the specific definition."
"RBJustSendsSuperRule","This smell arises when a method just forwards the message to its superclass. This often happens due to code changes or when you simply forget that you wanted to extend the behavior of a superclass method. These methods can be removed."
"StrikeFont","I represent a compact encoding of a set of Forms corresponding to characters in the ASCII character set. All the forms are placed side by side in a large form whose height is the font height, and whose width is the sum of all the character widths. The xTable variable gives the left-x coordinates of the subforms corresponding to the glyphs. Characters are mapped to glyphs by using the characterToGyphMap.Subclasses can have non-trivial mapping rules as well as different representations for glyphs sizes (e.g., not using an xTable). If so, these classes should return nil when queried for xTable and/or the characterToGlyphMap. This will cause the CharacterScanner primitive to fail and query the font for the width of a character (so that a more programatical approach can be implemented).For display, fonts need to implement two messages:	#installOn: aDisplayContext foregroundColor: foregroundColor backgroundColor: backgroundColorThis method installs the receiver (a font) on the given DisplayContext (which may be an instance of BitBlt or Canvas (or any of it's subclasses). The font should take the appropriate action to initialize the display context so that further display operations can be optimized.	#displayString: aString on: aDisplayContext from: startIndex to: stopIndex at: aPoint kern: kernDeltaThis method is called for each subsequent run of characters in aString which is to be displayed with the (previously installed) settings."
"FLPharo14Platform",""
"ZipStore","I'm a specific store for Zip file systems"
"RBSizeCheckRule","Check for code that checks that a collection is non-empty before sending it an iteration message (e.g., do:, collect:, etc.). Since the collection iteration messages work for empty collections, we do not need to clutter up our method with the extra size check."
"PlatformResolver","I am an abstract superclass for platform-specific resolvers."
"MethodRepackaged","Notify about repackaging of a method"
"TxSliderScrollBackward",""
"MetacelloPharo30Platform","Class used to abstract specific code for the Pharo 3.0 platform."
"TabActionButton","I am a multi state button supporting icon.I am used to render tab actions"
"GLMHighlighterTextParserStyler",""
"MalLongestPath","A MalLongestPath is the implementation of the longest path algo.This is working only on graph not weighted and without circuitsSee tests for more informations"
"FullscreenMorph","Provides for another morph to occupy the full screen area (less docking bars)."
"RubReturnEntered","I am raised when enter is pressed"
"MCFileTreeFileUtils","Utility class for file access"
"RxmBranch","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--This is a branch of a matching process. Either `next' chain should match, or `alternative', if not nil, should match. Since this is also used to build loopbacks to match repetitions, `loopback' variable indicates whether the instance is a loopback: it affects the matcher-building operations (which of the paths through the branch is to consider as the primary when we have to find the ""tail"" of a matcher construct).Instance variables	alternative		<RxmLink> to match if `next' fails to match.	loopback		<Boolean>"
"ConfigurationOfGToolkitCore","ConfigurationOfGToolkitCore loadDevelopmentInstance Variables	project:		<Object>project	- xxxxx"
"GoferPush","Push a version"
"Loader","I'm an abstract class which collect some infos about package and system (versions, dirty).#currentChangedPackages instance method and #currentMajorVersionNumber class are missing and provided by my wellknown subclass ScriptLoader (see ScriptLoader comment).Stef: This is a class that was extracted from scriptLoader because I want to slowly get in place a loader infrastructure based on Metacello."
"AthensPaintMode","A paint mode controls how the incoming color (source) will be transferred to surface (destination).To set a paint mode for canvas, send a message with corresponding mode name to my instance.My instance(s) is available via canvas protocol, i.e. 'canvas paintMode'.For example, to set an 'over' paint mode, use following:	canvas paintMode over.If you want to restore original paint mode after performing drawing operations, which may change it, use #restoreAfter: method , i.e. 	canvas paintMode restoreAfter: [		.. perform any drawing operations here..		].Since different backends may support different set of paint modes, the default implementation in AthensPaintMode for all mode setters is to signal an error.To query a set of available paint modes, supported by backend, use #availableModes message."
"RBChildrenToSiblingsRefactoring",""
"SourceSansProRegular","http://sourceforge.net/projects/sourcesans.adobe/Copyright 2010, 2012 Adobe Systems Incorporated (http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe Systems Incorporated in the United States and/or other countries.This Font Software is licensed under the SIL Open Font License, Version 1.1.This license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL-----------------------------------------------------------SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007-----------------------------------------------------------PREAMBLEThe goals of the Open Font License (OFL) are to stimulate worldwidedevelopment of collaborative font projects, to support the font creationefforts of academic and linguistic communities, and to provide a free andopen framework in which fonts may be shared and improved in partnershipwith others.The OFL allows the licensed fonts to be used, studied, modified andredistributed freely as long as they are not sold by themselves. Thefonts, including any derivative works, can be bundled, embedded, redistributed and/or sold with any software provided that any reservednames are not used by derivative works. The fonts and derivatives,however, cannot be released under any other type of license. Therequirement for fonts to remain under this license does not applyto any document created using the fonts or their derivatives.DEFINITIONS""Font Software"" refers to the set of files released by the CopyrightHolder(s) under this license and clearly marked as such. This mayinclude source files, build scripts and documentation.""Reserved Font Name"" refers to any names specified as such after thecopyright statement(s).""Original Version"" refers to the collection of Font Software components asdistributed by the Copyright Holder(s).""Modified Version"" refers to any derivative made by adding to, deleting,or substituting -- in part or in whole -- any of the components of theOriginal Version, by changing formats or by porting the Font Software to anew environment.""Author"" refers to any designer, engineer, programmer, technicalwriter or other person who contributed to the Font Software.PERMISSION & CONDITIONSPermission is hereby granted, free of charge, to any person obtaininga copy of the Font Software, to use, study, copy, merge, embed, modify,redistribute, and sell modified and unmodified copies of the FontSoftware, subject to the following conditions:1) Neither the Font Software nor any of its individual components,in Original or Modified Versions, may be sold by itself.2) Original or Modified Versions of the Font Software may be bundled,redistributed and/or sold with any software, provided that each copycontains the above copyright notice and this license. These can beincluded either as stand-alone text files, human-readable headers orin the appropriate machine-readable metadata fields within text orbinary files as long as those fields can be easily viewed by the user.3) No Modified Version of the Font Software may use the Reserved FontName(s) unless explicit written permission is granted by the correspondingCopyright Holder. This restriction only applies to the primary font name aspresented to the users.4) The name(s) of the Copyright Holder(s) or the Author(s) of the FontSoftware shall not be used to promote, endorse or advertise anyModified Version, except to acknowledge the contribution(s) of theCopyright Holder(s) and the Author(s) or with their explicit writtenpermission.5) The Font Software, modified or unmodified, in part or in whole,must be distributed entirely under this license, and must not bedistributed under any other license. The requirement for fonts toremain under this license does not apply to any document createdusing the Font Software.TERMINATIONThis license becomes null and void if any of the above conditions arenot met.DISCLAIMERTHE FONT SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENTOF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THECOPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIALDAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISINGFROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROMOTHER DEALINGS IN THE FONT SOFTWARE."
"AthensDisplayScanner","An AthensDisplayScanner displays the paragraphs text on an AthensCanvas."
"NNavNavigateTest","I tests the navigations directions"
"SelectVisitorTest","SUnit tests for class SelectVistor"
"GLMPortIdentifier","This class is a simple data structure to be used for identifying a port by name."
"IRTempAccess","I model the pushTemporary Bytecode"
"MessageTallyTest","SUnit tests for MessageTally"
"IRStoreLiteralVariable","store literal variable"
"MCFileTreeWriter","Writer for the file tree"
"MCFileBasedRepository","A file based metacello repository"
"MBProjectInfo","Infos about a project"
"NOCEmptyModel","I implement a null object pattern related to NOCModel in order to mark the end of possible completions in the answer list. "
"WindowDeActivated","This announcement is emitted when the top window switches from ""this"" window to another. The new window will announce WindowActivated, while the old will announce this annoucnement."
"RBBinarySelectorToken","RBBinarySelectorToken is the first-class representation of a binary selector (e.g. +)"
"RBAddMetaclassChange",""
"GTEventBundle","I associate a piece of data that should be delivered to a remote server with the url of that remote server.Instances of me should be sent to a GTEventDelivery."
"ZipEncoderNode","ZipEncoderNode represents a node in a huffman tree for encoding ZipStreams.Instance variables:	value 		<Integer>	- Encoded value	frequency	<Integer>	- Number of occurences of the encoded value	height 		<Integer>	- Height of the node in the tree	bitLength 	<Integer>	- bit length of the code	code		<Integer>	- Assigned code for this node	parent		<ZipEncoderNode>		- Parent of this node	left			<ZipEncoderNode>		- First child of this node	right		<ZipEncoderNode>		- Second child of this node"
"AnnouncementMockC","This is a simple test mock"
"MCMcmWriter","Writer for Metacello MCM"
"ClassRecategorized","This announcement will be raised when:- we set a category to a class (see 'Class >>category:')- we set a category to a Trait (see Trait>>category:)It corresponds to the RecategorizedEvent"
"BaselineOf","You should use a *baseline* when you are using a disk-based sourcecode manager (SCM) like [git][1].When using a disk-based SCM it is not necessary to use the Metacello*version* method, because it is intended for use with `.mcz` files. With a disk-based SCM you only need a single `baseline:` method. Whenyou change the structure of your project you can change the baseline andsave everything in a single commit. So multiple `baseline:` methods areno longer needed.You may still need a *configuration* when using a *baseline*. The[Sample project][3] on GitHub has a good example of a configuration usedin conjunction with a *baseline*. See the [**ConfigurationOf** class comment][2] for information on creating a *configuration*.To create a new Metacello baseline:1. Create a subclass of the **BaselineOf** class. The baseline   class for your project should be named by appending the name of   your project to the string `BaselineOf`. The name of the category and   package should be the same as the name of the class:    ```Smalltalk    BaselineOf subclass: #BaselineOfExample      instanceVariableNames: ''      classVariableNames: ''      poolDictionaries: ''      category: 'BaselineOfExample'    ```2. Create a **baseline:** method where you specify the structure of your project:    ```Smalltalk    baseline: spec      <baseline>      spec for: #common do: [        spec          package: 'Example-Core';          package: 'Example-Tests' with: [            spec requires: 'Example-Core' ]].    ```3. Create a Monticello package for your **BaselineOf** class and save it in the repository where your packages are stored.4. To load a package from GitHub that contains a baseline evaluate the following:```Smalltalk| repositorySpec |""edit to match your username, repository name and branch""repositorySpec := 'dalehenrich/metacello-work:master'.Metacello new  baseline: 'Sample';  repository: 'github://', repositorySpec;  load.```For further documentation see For more information on the [github://](MetacelloScriptingAPI.md#github) url specifigation see the [Metacello Scripting APIreference](MetacelloScriptingAPI.md). There more information on [working with GitHub here](GettingStartedWithGitHub.md).[1]: http://git-scm.com/[2]: https://github.com/dalehenrich/metacello-work/blob/master/repository/Metacello-Base.package/ConfigurationOf.class/README.md[3]: https://github.com/dalehenrich/sample/tree/configuration/ConfigurationOfSample.package/ConfigurationOfSample.class"
"RFStoreIntoTempNode","I define a temp that I can store into"
"TimeTest","This is the unit test for the class Time."
"KomitMethodNode","I am a node in the Komit tree representing a method"
"VSMakeDevelopmentCommand","I'm a command to declare versions as development."
"FFIOop",""
"RGDefinition","I am the root class of the Ring meta-model.A Ring definition has a name, can be annotated and knows its environment"
"SourceCodeProRegular","http://sourceforge.net/projects/sourcecodepro.adobe/Copyright 2010, 2012 Adobe Systems Incorporated (http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe Systems Incorporated in the United States and/or other countries.This Font Software is licensed under the SIL Open Font License, Version 1.1.This license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL-----------------------------------------------------------SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007-----------------------------------------------------------PREAMBLEThe goals of the Open Font License (OFL) are to stimulate worldwidedevelopment of collaborative font projects, to support the font creationefforts of academic and linguistic communities, and to provide a free andopen framework in which fonts may be shared and improved in partnershipwith others.The OFL allows the licensed fonts to be used, studied, modified andredistributed freely as long as they are not sold by themselves. Thefonts, including any derivative works, can be bundled, embedded, redistributed and/or sold with any software provided that any reservednames are not used by derivative works. The fonts and derivatives,however, cannot be released under any other type of license. Therequirement for fonts to remain under this license does not applyto any document created using the fonts or their derivatives.DEFINITIONS""Font Software"" refers to the set of files released by the CopyrightHolder(s) under this license and clearly marked as such. This mayinclude source files, build scripts and documentation.""Reserved Font Name"" refers to any names specified as such after thecopyright statement(s).""Original Version"" refers to the collection of Font Software components asdistributed by the Copyright Holder(s).""Modified Version"" refers to any derivative made by adding to, deleting,or substituting -- in part or in whole -- any of the components of theOriginal Version, by changing formats or by porting the Font Software to anew environment.""Author"" refers to any designer, engineer, programmer, technicalwriter or other person who contributed to the Font Software.PERMISSION & CONDITIONSPermission is hereby granted, free of charge, to any person obtaininga copy of the Font Software, to use, study, copy, merge, embed, modify,redistribute, and sell modified and unmodified copies of the FontSoftware, subject to the following conditions:1) Neither the Font Software nor any of its individual components,in Original or Modified Versions, may be sold by itself.2) Original or Modified Versions of the Font Software may be bundled,redistributed and/or sold with any software, provided that each copycontains the above copyright notice and this license. These can beincluded either as stand-alone text files, human-readable headers orin the appropriate machine-readable metadata fields within text orbinary files as long as those fields can be easily viewed by the user.3) No Modified Version of the Font Software may use the Reserved FontName(s) unless explicit written permission is granted by the correspondingCopyright Holder. This restriction only applies to the primary font name aspresented to the users.4) The name(s) of the Copyright Holder(s) or the Author(s) of the FontSoftware shall not be used to promote, endorse or advertise anyModified Version, except to acknowledge the contribution(s) of theCopyright Holder(s) and the Author(s) or with their explicit writtenpermission.5) The Font Software, modified or unmodified, in part or in whole,must be distributed entirely under this license, and must not bedistributed under any other license. The requirement for fonts toremain under this license does not apply to any document createdusing the Font Software.TERMINATIONThis license becomes null and void if any of the above conditions arenot met.DISCLAIMERTHE FONT SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENTOF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THECOPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIALDAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISINGFROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROMOTHER DEALINGS IN THE FONT SOFTWARE."
"LocaleTest","A unit test class for class Locale"
"FTMultipleSelection","I define the multiple selection strategy. I allow tables using me to manage multiple selection rows."
"StickynessBugsTest","A StickynessBugz is for mantis #5500 rectangles and ellipses don't act sticky when rotated even when they are..Instance Variables"
"FFIFloatType","A generic (abstract) float type."
"PointerEyeElement","I am an element that wraps host and value in a PointerWrapper. Following back pointers stops at the wrapper, not showing the framwork related references e.g. of the tree."
"DelayTest",""
"PluggableTextFieldMorph","Single-line text field editor with DialogWindow key integration (return for default, escape for cancel) and keyboard focus navigation (tab/shift-tab). Additionally supports pluggable converters to translate between an object and its string form and vice-versa."
"WeakSlot","A WeakSlot is a slot that references weakly an object.Internally it is implemented with a weak array of size one. Writing into the slot writes the only field in the array. weakArray at: 1 put: aValue.Reading into the Slot reads the only field in the array.weakArray at: 1 .This slot inherits from IndexedSlot to guarantee that this slot has a real field inside an object."
"ExampleClassVariableTest",""
"OPENFILENAME","typedef struct tagOFN {   DWORD         lStructSize;   HWND          hwndOwner;   HINSTANCE     hInstance;   LPCTSTR       lpstrFilter;   LPTSTR        lpstrCustomFilter;   DWORD         nMaxCustFilter;   DWORD         nFilterIndex;   LPTSTR        lpstrFile;   DWORD         nMaxFile;   LPTSTR        lpstrFileTitle;   DWORD         nMaxFileTitle;   LPCTSTR       lpstrInitialDir;   LPCTSTR       lpstrTitle;   DWORD         Flags;   WORD          nFileOffset;   WORD          nFileExtension;   LPCTSTR       lpstrDefExt;   LPARAM        lCustData;   LPOFNHOOKPROC lpfnHook;   LPCTSTR       lpTemplateName; #if (_WIN32_WINNT >= 0x0500)  void *        pvReserved;  DWORD         dwReserved;  DWORD         FlagsEx;#endif // (_WIN32_WINNT >= 0x0500)} OPENFILENAME, *LPOPENFILENAME;"
"ZnEasy","I am ZnEasy, a simplified HTTP client for occasional use.My class side implements a number of convenience methods to do common HTTP client operations.	ZnEasy get: 'http://zn.stfx.eu/zn/small.html'.For most requests, I return a response object. For a couple of message, I return an image Form.	ZnEasy getPng: 'http://www.pharo-project.org/images/pharo.png'.For my implementation I use ZnClient, a full featured HTTP client.Part of Zinc HTTP Components."
"ZnImageExampleDelegate","I am ZnImageExampleDelegate.I am a implementation of the web app in 'Building and deploying your first web app in Pharo'.I serve an image that web clients can change by uploading a new one.  ZnServer startDefaultOn: 1701.  ZnImageExampleDelegate installInDefaultServer.  ZnServer stopDefault.I implement the following API or resources	GET /image - returns an HTML page showing our image and a form to upload a new image	GET /image?raw=true - directly serves the last uploaded image	POST /image - handler accepting a multipart form data entity with a file part containing GIF, JPEG or PNG bytes	Part of Zinc HTTP Components."
"FLSqueak5Platform",""
"EyeStringInspector","EyeStringInspector is is the EyeInspector for Strings.Right now, the only difference is that the list of elements for the tree is overridden to be empty."
"OSTouchGestureDetector","I am an abstract class for the gestures detector, to work I have to register with an OSWindowGestureHandler"
"GTEventMultiBundleFactory","I know how to create GTEventMultiBundle object from a collection of GTEventBundle objects."
"LanguageEnvironment","The name multilingualized suggests that you can use multiple language at one time.  This is true, of course, but the system still how to manage the primary language; that provides the interpretation of data going out or coming in from outside world. It also provides how to render strings, as there rendering rule could be different in one language to another, even if the code points in a string is the same.  Originally, LanguageEnvironment and its subclasses only has class side methods.  After merged with Diego's Babel work, it now has instance side methods.  Since this historical reason, the class side and instance side are not related well.  When we talk about the interface with the outside of the Squeak world, there are three different ""channels""; the keyboard input, clipboard output and input, and filename.  On a not-to-uncommon system such as a Unix system localized to Japan, all of these three can have (and does have) different encodings.  So we need to manage them separately.  Note that the encoding in a file can be anything.  While it is nice to provide a suggested guess for this 'default system file content encoding', it is not critical.  Rendering support is limited basic L-to-R rendering so far.  But you can provide different line-wrap rule, at least."
"SlotNotFound","I am an exception to indicate that a slot is found in a layout."
"FLSqueak42Platform",""
"ChangeSetClassChangesTest","Class category changes are not being properly added to the default changeset in Squeak 3.7. This test case will pass in Squeak 3.6, and fail in Squeak 3.[7-9]."
"UnsafeAlien","Instances of UnsafeAlien represent the addresses of heap-resident non-pointer Smalltalk objects as actual parameters in FFI call-outs.  An UnsafeAlien on (e.g.) a ByteString used as a parameter in an FFI call causes the FFI machinery to pass the address of the first byte in the ByteString.  THIS IS UNSAFE!  It is unsafe becausea) the garbage collector can potentially move the ByteString (or any other object) during the call, because the call may call-back, invoking the garbage collector,b) if external code retains the address for longer than the duration of the call and dereferences it in a subsequent call the object may have moved in the mean time,c) the address of the object is passed without any other potentially necessary conversions such as null-terminationd) the hundred other problems this benighted author hasn't thought of.Hence UnsafeAlien is to be used carefully by clients that know that the usage is safe.You have been warned ;)Create instances via	UnsafeAlien forPointerTo: 'You are on your own!', (ByteString with: (Character value: 0))"
"RBRefactoryChangeManager",""
"MetacelloValidationFailure",""
"RBMessageNode","RBMessageNode is an AST node that represents a message send.Instance Variables:	arguments	<SequenceableCollection of: RBValueNode>	our argument nodes	receiver	<RBValueNode>	the receiver's node	selector	<Symbol>	the selector we're sending	keywordsPositions	<IntegerArray | nil>	the positions of the selector keywords"
"MorphicAlarm","I represent a message to be scheduled by the WorldState.For example, you can see me in action with the following example which print 'alarm test' on Transcript one second after evaluating the code:Transcript open.MorphicUIManager currentWorld        addAlarm: #show:         withArguments: #('alarm test')         for: Transcript         at: (Time millisecondClockValue + 1000).* Note *Compared to doing:[(Delay forMilliseconds: 1000) wait. Transcript show: 'alarm test'] forkAt: Processor activeProcess priority +1.the alarm system has several distinctions:- Runs with the step refresh rate resolution.- Alarms only run for the active world. (Unless a non-standard scheduler is in use)- Alarms with the same scheduled time are guaranteed to be executed in the order they were added"
"OCClosureTests",""
"ValueNotFound","I am ValueNotFound, an exception indicating that a value was not found in a Dictionary."
"ManifestToolExternalBrowser","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GTEventRecorder","I represent an event recorder, an object that collects data and regularly sends them to a server. The data could represent user activity, tool usage, or any other statistic usefule for further analysis. I cover data collectors, packing, and delivery objects the way they cooperate together and the collected data are regularly send to server(s). It is not mandatory, but it is supposed that I represent a Singleton pattern.I collaborate with GTEventCollector objects, that are responsible for collecting data. I keep any number of those objects and whenever GTEventDelivery asks me for collected data, GTEventPacking object packs data from each GTEventCollector and hand them as collection of GTEventBundle objects to the GTEventDelivery. GTEventDelivery sends the bundles to server(s).Public API and Key Messages- addCollector: it adds GTEventCollector object and activates delivery process if inactive   - removeCollector: it removes  GTEventCollector object and deactivates delivery process if there are no other collectors.- activateDelivery: activates delivery process- deactivateDelivery: deactivates delivery processInternal Representation and Key Implementation Points.    Instance Variables	announcer:		<Annoucner>	collectors:		<GTEventCollectors>	delivery:		<GTEventDelivery>	packing:		<GTEventPacking>	privacy:		<true|false|ClosureBlock>"
"AlphaImageMorph","Displays an image with the specified alpha value (translucency) and optional scale and layout (scaled, top-right etc.)."
"FLBitsObjectCluster","I have the common behavior for generic storing and loading variable bits objects."
"OSWindowDropEvent","I am delivered when user drop something into the window (of course, if there's a drag and drop support by underlaying platform)."
"OCLiteralVariable","I am a global, pool, or class variable."
"ChunkImportTestCase",""
"ZnMimeType","I am ZnMimeType.Mime types are an element used in describing resources, more specifically their format.Here are some examples MIME types:	text/plain	text/html	text/plain;charset=utf-8	image/png	text/* A mime type has a main/sub form with optional parameters. For more information: http://en.wikipedia.org/wiki/MIME_typeI know whether I am binary or not and know my charset when applicable.My class side offers access to some common constants.Note that for text types we default to UTF-8 encoding.Examples:	ZnMimeType textPlain = 'text/plain;charset=utf-8' asZnMimeType.	ZnMimeType textPlain charSet.	ZnMimeType textHtml matches: ZnMimeType text.	ZnMimeType default matches: ZnMimeType any.	ZnMimeType imagePng isBinary.	ZnMimeType forFilenameExtension: 'html'.I started life as a copy of WAMineType.Part of Zinc HTTP Components."
"LOGFONTA","#define LF_FACESIZE 32typedef struct tagLOGFONT {   LONG lfHeight;   LONG lfWidth;   LONG lfEscapement;   LONG lfOrientation;   LONG lfWeight;   BYTE lfItalic;   BYTE lfUnderline;   BYTE lfStrikeOut;   BYTE lfCharSet;   BYTE lfOutPrecision;   BYTE lfClipPrecision;   BYTE lfQuality;   BYTE lfPitchAndFamily;   TCHAR lfFaceName[LF_FACESIZE]; } LOGFONT, *PLOGFONT;"
"ObjectFinalizerCollection","An ObjectFinalizerCollection is simple collection which is intended to hold ObjectFinalizers and be used by WeakRegistry."
"Slider",""
"MetacelloMethodSection",""
"MCStReader","I read Category/Classes/Methodes/.... definitions from Monticello source.st file format.See also MCStWriter.Example:|source|source := String streamContents: [:aStream| |writer|    writer := MCStWriter on: aStream.    writer writeDefinitions: {True asClassDefinition. False asClassDefinition}.].(MCStReader on: source readStream) definitions explore."
"CoverageDemoTest",""
"StandardFileStream","Provides a simple, platform-independent, interface to a file system. The instance variable rwmode, inherited from class PositionableStream, here is used to hold a Boolean -- true means opened for read-write, false means opened for read-only.  2/12/96 swI implement a simple read buffering scheme with the variables defined in PositionableStream (which are unused in me otherwise) in the following way:	collection	<ByteString> or <ByteArray>	This is the buffer.	position	<Integer>	The relative position in the buffer. Greater or equal to zero.	readLimit	<Integer>	The number of bytes buffered. Greater or equal to zero.Read buffering is enabled with #enableReadBuffering, disabled with #disableReadBuffering and it is enabled by default. The buffer is filled when a read attempt of an unbuffered absolute position is requested, or when a negative repositioning is made (with #position: with an argument < than the current absolute position) to an absolute position which is not buffered. In the first case, the buffer is positioned to the given absolute position. In the latter case the repositioning is made to the requested absolute position minus fourth of the buffer size. This means that further small negative repositionings won't result in buffer flushing. This is really useful when filing in code.The read buffer is flushed (#flushReadBuffer) whenever a write attempt is made.The buffer state is valid if and only if collection is not nil and position < readLimit."
"MetacelloSymbolicVersionSpec",""
"MockTranscript",""
"RegexSyntaxError","This class represents syntax errors in regular expressions."
"RBPatternParser","RBPatternParser is a subclass of RBParser that allows the extended syntax that creates matching trees. These trees can be used by the ParseTreeMatcher to search and transform source code."
"EmptyLayout","Empty top-level layout used to delimit the layout chains."
"MCFtpRepository","I am an monticello repository implementation for the FTP protocol."
"RBPatternScanner","RBPatternScanner is a subclass of RBScanner that allows the extended syntax of pattern matching trees."
"SharedQueue","An implementation of a shared queue based on class Monitor.  Clients may may place items on the queue using nextPut: or remove them using methods like next or nextOrNil.  Items are removed in first-in first-out (FIFO) order.  It is safe for multiple threads to access the same shared queue, which is why this is a ""shared"" queue.[monitor] is used to synchronize access from multiple threads.[items] is an ordered collection holding the items that are in the queue.  New items are added  at the end, and old items are removed from the beginning.All methods must hold the monitor while they run."
"OSTouchThreeFingersSwipeEvent","I am the abstract class for all three fingers swipe events"
"GLMFastTablePresentation","I'm a fast table presentation who introduces FTTableMorph into Glamour. Description--------------------I know how to render myself and I store some options for the Table.  I keep some options specific to the FastTable inside a Dictionary. I work with GLMMorphicFastTableRenderer to render the FastTable. I use TGLMFastTableFunctionsPresentation in order to manage some options.Public API and Key Messages--------------------You can use the public API of my super class. You also use the public API of TGLMFastTableFunctionsPresentation (See his class comment).For now I do not add any other api methods.Example--------------------GLMWrapper new 	show: [ :a | 		a fastTable			display: [ :x | 1 to: x ]; 			column: [:x | 'Numbers from 1 to ', x asString] evaluated: #asString;			column: 'Even' evaluated: [ :each | each even asString ];			column: 'Odd' evaluated: [ :each | each odd asString ]  ];	openOn: 1000.Internal Representation and Key Implementation Points.--------------------    Instance Variables	parameters:		This is a Dictionary use to store some options related to the FastTable."
"GTSpotterCategorySelected",""
"OCIfNotNilTests",""
"TxSliderScrollForward",""
"File","I represent a sequential binary File. I provide the minimum operations to:- move the cursor fo the file- reading- writing!Examples of usage""Creating a file""file := File named: 'asd.txt' asFileReference fullName.""Opening / closing it""file open.file openForAppend.file close.""Accessing the file properties""file size.file position.file position: 0.file seekAbsolute: 10.file seekRelative: 10.file atEnd.""Writing""file nextPutAll: 'sdd'.""Reading""file next: 2.""Buffered write""file next: 2 putAll: 'abc' startingAt: 2.""Buffered read""buffer := ByteArray new: 5.file readInto: buffer startingAt: 1 count: 5.buffer asString."
"FFICallbackTests",""
"GLMNestedBrowserTest",""
"TxViewContainer","I hold the view (or editor) morph and all decorators together (scollbars/line numbers etc).The model serves as an application-level object, that is a final client for text updates/changes/context menu etc."
"PackageMethodCategoryNodeExample","Example for a package method node"
"GTExampleAnnouncement",""
"TxAthensLayout","i represent the cached visual layout of given text.Note, that layout is considered a private information maintained by concerete view, and not accessible (userful) without having a view."
"FontSubstitutionDuringLoading","signaled by font loading code when reading a DiskProxy that calls for a missing font."
"RubEditingArea","I am the common class to use for editing text in an area"
"MCMock","Common superclass for mocks"
"Finder","I'm the finderUI model in the MVC pattern.I'm compute the search string and I construct a resultDictionary.Then I throw events everywhere and my views are redrawn."
"UndoRedoGroup","An UndoRedoGroup is a composite node of an history tree. It is made to allow redoing or undoing of several commands in one shot. See for example its use to record all text replacement when a ""replace all"" is performed from a FindReplaceService (see TextEditor>>replaceAll: with: startingAt:)Instance Variables"
"MetacelloTestsMCPackage",""
"FLPharo5Platform",""
"FLSortedCollectionSerializationTest","SUnit tests for fuel serialization of sorted collections"
"GLMTabulatorMorphicTest",""
"SmallIdentityDictionaryTest","SUnit tests for small identity dictionaries"
"NewListRenderer","NewListRenderer is the morph contained by a NewList used to render all the items and manage mouse events."
"Association","I represent a pair of associated objects--a key and a value. My instances can serve as entries in a dictionary.Implementation notes: Note that hash is not redefined even if the = was redefined because Association>>hash may cause extreme slowdowns in compiling Unicode methods. Association>>hash does not need to hash the value; it's slow and useless."
"RBReadBeforeWrittenTester","RBReadBeforeWrittenTester is a visitor that identifies variables that may have been read before they are initialized.Instance Variables:	checkNewTemps	<Boolean>	description of checkNewTemps	read	<Collection>	description of read	scopeStack	<OrderedCollection>	description of scopeStack"
"OSTouchTwoFingersPinchBeginEvent","Two fingers started pinching"
"RBConjunctiveCondition",""
"GLMPagerWidgetThemer",""
"FFICalloutAPI","I'm a façade to perform ffi nb calls."
"ClassTestCase","This class is intended for unit tests of individual classes and their metaclasses.It provides methods to determine the coverage of the unit tests.Subclasses are expected to re-implement #classesToBeTested and #selectorsToBeIgnored.They should also implement to confirm that all methods have been tested.#testCoverage	super testCoverage."
"OSWindowEventVisitor","i am a abstract visitor for handling events.. serving just to cover complete protocol, which user(s) will need to implement in order to act as an OSWindow event handler."
"CairoPNGPaint","I am a surface paint with lazy initialization scheme, that i loading image from .png filethe first time i will be used.<Do not use me, because i am really Cairo specific>"
"GTInspector","This is meant to be used for inspecting objects. It offers multiple views and it uses a finder as a navigation. One particular feature is that you can use the evaluator tab to enter code, and evaluating it results in opening another pane to the right.The object finder asks dynamically the object for the actual presentations that are displayed in each pane.Example:self openOn: Smalltalk.Register it as a replacement for explorer:self registerToolsOn: Smalltalk tools."
"MTVersion","A MTVersion describes a specific version of a dependency.Instance Variables	- author : the version author	- versionString : a version String that can be used to load the described version (e.g ConfigurationOfXXX project version: versionString)	- description : the version description 	- timestamp : the commit time of this version	- project : a reference to the described project"
"AthensCloseSegment","i represent close segment (when user issuing #close command to path builder)"
"FileSystemHandleTest","SUnit tests for FileSystemHandle"
"IdentifierChooserMorph","An IdentifierChooserMorph is a menu builder which takes a list of labels as input and build/popup  a menu for them. The morph could be made of one menu in one column for all labels of of several menus in a scrollabe row. The action which is performed when a menu item is selected is also parametrized (see examples below).The morph can take the keyboard focus and then, up, down, left and right arrows can be used to choose a menu item.It is the responsibility of the user of this morph to decide when and how the keyboard focus is token.The design is widely inpired from PopupChoiceDialogWindow.example 1A very simple example with three label. The nil value will be represented as a menu line in the resulting morph.(IdentifierChooserMorph 		labels: {'aaaaaa'. 'bbbbbbb'. nil. 'cccccccc'}		chooseBlock: [ :chosen | UIManager default inform: (chosen, (' has been chosen' translated))])			open			example 2The same except that a color is specified		(IdentifierChooserMorph 		labels: {'aaaaaa'. 'bbbbbbb'. nil. 'cccccccc'}		chooseBlock: [ :chosen | UIManager default inform: (chosen, (' has been chosen' translated))])			baseColor: Color white;			openexample 3Allows the presentation of one menu (one column) vith two fixed labels followed by the list of all classes.(IdentifierChooserMorph 		labels: ({'aaaaaa'. 'bbbbbbb'}, { nil }, (Object allSubclasses collect: [:c | c theNonMetaClass  name]) asSet asArray sort)		chooseBlock: [ :chosen | (Smalltalk globals at: chosen asSymbol) ifNotNil: [:c | c browse] ]) 			oneMenuOfWidth: 300;			baseColor: Color white;			openInstance Variables	baseColor:		<Color>	choiceMenus:		<Array>	choicesMorph:		<AlignmentMorph>	chooseBlock:		<Block>	labels:		<Array>	maxLines:		<Integer>	requestor:		<Morph>	scrollPaneWidth:		<Integer>baseColor	- The color used for the menu items and the receiverchoiceMenus	- The array of EmbeddedMenuMorphchoicesMorph	- The AlignmentMorph which contains all menuschooseBlock	- A block with one argument which is evaluated when a menu item is selected. The argument takes the chosen label as argumentlabels	- The array of labels maxLines	- If not nil, gives the maximum number of lines for one menurequestor	- if not nil, a Morph from which the receiver is builtscrollPaneWidth	- The maximum width of the scrollPane, this contraints the width of the receiver."
"IntegerArray","IntegerArrays store 32bit signed Integer values.Negative values are stored as 2's complement."
"DebugContext","A DebugContext is a helper that complements DebugSession. It is meant to be created dynamically on a context when the session wants to access the provided services.To create instances first call forContext: to set the current context, and then ifthe interrupted is different use topContext:Not sure if it is still a good idea to have this class. Instance Variables	context:		<Object>	method:		<Object>	methodNode:		<Object>	ranges:		<Object>	topContext:		<Object>context	- xxxxxmethod	- xxxxxmethodNode	- xxxxxranges	- xxxxxtopContext	- xxxxx"
"GLMTransmissionScriptingTest",""
"FFICalloutMethodBuilderTestRecuestor","I'm a callout for testing the method builder. Basically, I do not introspect any variable :P"
"OSJoyButtonDownEvent","This event is delivered when user pressing down a joystick button."
"GLMPaneReplaced","An old pane was replaced with a new oneInstance Variables	newPane:		<Object>	oldPane:		<Object>newPane	- the new pane	oldPane	- the old pane"
"MetacelloPackageSpec",""
"RFMessageNode",""
"GLMMorphic",""
"GTEventRegistryTest","A GTEventRegistryTest is a test class for testing the behavior of GTEventRegistry"
"FLClassSerializationTest","I have the common behavior for testing class serialization."
"AdditionalMethodStateTest","SUnit tests for AdditionalMethodState"
"LargeNegativeInteger","Just like LargePositiveInteger, but represents a negative number."
"MCMockClassG",""
"FTExampleMethodTableDataSource","I'm an example of fast table, who will use a list of methods as data source elements.self example1.self example2."
"GLMCustomCell",""
"ShouldNotImplement","I am ShouldNotImplement, an exception signaled when a method was implemented but should not have been.This can happen when an implementation is inherited."
"FLObjectNotFound","I represent an error which may happen during serialization, when trying to encode on the stream a reference to an object that should be encoded before, but it is not.This usually happens when the graph changes during serialization. Another possible cause is a bug in the analysis step of serialization."
"MCMcdReader","Reader for an MCD format"
"RingChunkImporter","I'm an object holding the result of loading a file containing Pharo code definitions in chunk format.I create ring definitions for the elements inside the chunk stream.Heavily inspired from FilePackage.| internalStream |internalStream := (String new: 1000) writeStream.SystemOrganization 	fileOutCategory: 'Tool-ExternalBrowser'	on: internalStream.RingChunkImporter fromStream: internalStream contents readStream."
"OrientedFillStyle","OrientedFill is an abstract superclass for fills which can be aligned appropriately.Instance variables:	origin	<Point>	The point at which to align the fill.	direction <Point>	The direction in which the fill is defined	normal	<Point>	Typically, just the direction rotated by 90 degrees."
"WidgetExamples","This class provides examples on how different widgets can be made.See the methods starting with ""example"" in my class side.Examples for different widgets:WidgetExamples exampleBasicControls.WidgetExamples exampleOtherControls.WidgetExamples exampleColorControls.WidgetExamples exampleDialogs.WidgetExamples exampleGroups.WidgetExamples exampleTextEntryWithCompletionDialog.WidgetExamples exampleWindowWithToolbars."
"SugsSuggestionExtractLocalTest","SUnit tests for extract locale suggestion"
"IntegerTest","SUnit tests for integers"
"GLMBrickDataChanged","A GLMBrickDataChanged is fired when GLMBrick>>data is changed"
"ClassCommentChunk","I represent the declaration of a class comment in a file.  My contents are the class comment to import, and the comment reader is the object who knows the class where to put the class comment.Sending me the message #import makes me install the comment into the class."
"RBExcessiveInheritanceRule","This smell arises when a deep inheritance is found (depth of ten or more), which is usually a sign of a design flaw. It should be broken down and reduced to something manageable. The defined inheritance depth can be edited in RBExcessiveInheritanceRule>>inheritanceDepth.Several possibilities can occur. Here are some hints:- check whether some classes in the hierarchy just do not add enough behavior to require a class in itself- check whether all the classes are the root of a kind of little inheritance hierarchy. Note that often a framework may already define a certain level of inheritance, with  other layers added by user code. This rule does not take these frameworks into account. 		The defined inheritance depth can be edited in #inheritanceDepth."
"FT2Constants","The various flags from the Freetype/2 header.The LoadXXXX flags can be used with primitiveLoadGlyph:flags: or with the Cairo primCairoFtFontCreateForFtFace:flags:scale: primitives.FT_LOAD_DEFAULT ::  Corresponding to 0, this value is used a default glyph load.  In this  case, the following will happen:                                                                          1. FreeType looks for a bitmap for the glyph corresponding to the     face's current size.  If one is found, the function returns.  The     bitmap data can be accessed from the glyph slot (see note below).                                                                          2. If no embedded bitmap is searched or found, FreeType looks for a     scalable outline.  If one is found, it is loaded from the font     file, scaled to device pixels, then ""hinted"" to the pixel grid in     order to optimize it.  The outline data can be accessed from the     glyph slot (see note below).                                                                          Note that by default, the glyph loader doesn't render outlines into  bitmaps.  The following flags are used to modify this default  behaviour to more specific and useful cases.                                                                        FT_LOAD_NO_SCALE ::  Don't scale the vector outline being loaded to 26.6 fractional  pixels, but kept in font units.  Note that this also disables  hinting and the loading of embedded bitmaps.  You should only use it  when you want to retrieve the original glyph outlines in font units.                                                                        FT_LOAD_NO_HINTING ::  Don't hint glyph outlines after their scaling to device pixels.  This generally generates ""blurrier"" glyphs in anti-aliased modes.                                                                          This flag is ignored if @FT_LOAD_NO_SCALE is set.                                                                        FT_LOAD_RENDER ::  Render the glyph outline immediately into a bitmap before the glyph  loader returns.  By default, the glyph is rendered for the  @FT_RENDER_MODE_NORMAL mode, which corresponds to 8-bit anti-aliased  bitmaps using 256 opacity levels.  You can use either  @FT_LOAD_TARGET_MONO or @FT_LOAD_MONOCHROME to render 1-bit  monochrome bitmaps.                                                                          This flag is ignored if @FT_LOAD_NO_SCALE is set.                                                                        FT_LOAD_NO_BITMAP ::  Don't look for bitmaps when loading the glyph.  Only scalable  outlines will be loaded when available, and scaled, hinted, or  rendered depending on other bit flags.                                                                          This does not prevent you from rendering outlines to bitmaps  with @FT_LOAD_RENDER, however.                                                                        FT_LOAD_VERTICAL_LAYOUT ::  Prepare the glyph image for vertical text layout.  This basically  means that `face.glyph.advance' will correspond to the vertical  advance height (instead of the default horizontal advance width),  and that the glyph image will be translated to match the vertical  bearings positions.                                                                        FT_LOAD_FORCE_AUTOHINT ::  Force the use of the FreeType auto-hinter when a glyph outline is  loaded.  You shouldn't need this in a typical application, since it  is mostly used to experiment with its algorithm.                                                                        FT_LOAD_CROP_BITMAP ::  Indicates that the glyph loader should try to crop the bitmap (i.e.,  remove all space around its black bits) when loading it.  This is  only useful when loading embedded bitmaps in certain fonts, since  bitmaps rendered with @FT_LOAD_RENDER are always cropped by default.                                                                        FT_LOAD_PEDANTIC ::  Indicates that the glyph loader should perform pedantic  verifications during glyph loading, rejecting invalid fonts.  This  is mostly used to detect broken glyphs in fonts.  By default,  FreeType tries to handle broken fonts also.                                                                        FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH ::  Indicates that the glyph loader should ignore the global advance  width defined in the font.  As far as we know, this is only used by  the X-TrueType font server, in order to deal correctly with the  incorrect metrics contained in DynaLab's TrueType CJK fonts.                                                                        FT_LOAD_NO_RECURSE ::  This flag is only used internally.  It merely indicates that the  glyph loader should not load composite glyphs recursively.  Instead,  it should set the `num_subglyph' and `subglyphs' values of the glyph  slot accordingly, and set ""glyph->format"" to  @FT_GLYPH_FORMAT_COMPOSITE.                                                                          The description of sub-glyphs is not available to client  applications for now.                                                                        FT_LOAD_IGNORE_TRANSFORM ::  Indicates that the glyph loader should not try to transform the  loaded glyph image.  This doesn't prevent scaling, hinting, or  rendering.                                                                        FT_LOAD_MONOCHROME ::  This flag is used with @FT_LOAD_RENDER to indicate that you want  to render a 1-bit monochrome glyph bitmap from a vectorial outline.                                                                          Note that this has no effect on the hinting algorithm used by the  glyph loader.  You should better use @FT_LOAD_TARGET_MONO if you  want to render monochrome-optimized glyph images instead.                                                                        FT_LOAD_LINEAR_DESIGN ::  Return the linearly scaled metrics expressed in original font units  instead of the default 16.16 pixel values.                                                                        FT_LOAD_NO_AUTOHINT ::  Indicates that the auto-hinter should never be used to hint glyph  outlines.  This doesn't prevent native format-specific hinters from  being used.  This can be important for certain fonts where unhinted  output is better than auto-hinted one.One of following flags (as LoadTargetXXX) can be used to further specify the result.   FT_RENDER_MODE_NORMAL ::                                               This is the default render mode; it corresponds to 8-bit             anti-aliased bitmaps, using 256 levels of opacity.                                                                                      FT_RENDER_MODE_LIGHT ::                                                This is similar to @FT_RENDER_MODE_NORMAL, except that this          changes the hinting to prevent stem width quantization.  This        results in glyph shapes that are more similar to the original,       while being a bit more fuzzy (""better shapes"", instead of            ""better contrast"" if you want :-).                                                                                                      FT_RENDER_MODE_MONO ::                                                 This mode corresponds to 1-bit bitmaps.                                                                                                 FT_RENDER_MODE_LCD ::                                                  This mode corresponds to horizontal RGB/BGR sub-pixel displays,      like LCD-screens.  It produces 8-bit bitmaps that are 3 times        the width of the original glyph outline in pixels, and which use     the @FT_PIXEL_MODE_LCD mode.                                                                                                            FT_RENDER_MODE_LCD_V ::                                                This mode corresponds to vertical RGB/BGR sub-pixel displays         (like PDA screens, rotated LCD displays, etc.).  It produces         8-bit bitmaps that are 3 times the height of the original            glyph outline in pixels and use the @FT_PIXEL_MODE_LCD_V mode.                                                                       <Note>                                                                 The LCD-optimized glyph bitmaps produced by FT_Render_Glyph are      _not filtered_ to reduce color-fringes.  It is up to the caller to   perform this pass.                                                 "
"LucidaGrandeRegular","I'm a stub to load Lucida Grande font in system. As is, it works just for macs, but the idea is to use it for showing shortcut symbols... which has sense just un mac :)"
"OCBytecodeDecompilerTest",""
"NautilusPluginManager","NautilusPluginManager is a manger of plugins used to set up plugin for Nautilus UI"
"MulticolumnLazyListMorph","A variant of LazyListMorph that can display multi-column lists."
"Integer","I am a common abstract superclass for all Integer implementations. My implementation subclasses are SmallInteger, LargePositiveInteger, and LargeNegativeInteger.	Integer division consists of:	/	exact division, answers a fraction if result is not a whole integer	//	answers an Integer, rounded towards negative infinity	\\	is modulo rounded towards negative infinity	quo: truncated division, rounded towards zero"
"IconicListItem","I am a wrapper used to display a morph with ahead an icon.Here is the way to use meIconicListItem new	icon: ThemeIcons current smallOkIcon asMorph;	morph: 'Accept' asMorph;	yourself;	openInWorld"
"SDL_MouseWheelEvent","SDL2 library structure"
"TaskListMorph","Themed task list/switcher to select the topmost window. Use cmd + left or right arrows (not ideal but the os typically handles cmd + tab/shift-tab).On Linux, release of the command key is not detected (vm issue), so press and release cmd again or move the mouse!"
"VersionListModel","A VersionListModel is a list model used to display package versions.It is needed to be able to override the okToChange method to be able to ask the user before he loose changes made on the selected version."
"FreeTypeEmbeddedFileInfo","File info for embbeded FreeType fonts"
"JISX0208","This class represents the domestic character encoding called JIS X 0208 used for Japanese."
"ChangeSorterApplication","A ChangeSorterApplication is spec version of the dual sorter.ChangeSorterApplication 	new openWithSpec"
"RBValueToken","RBValueToken is the abstract superclass of all tokens that have additional information attached. For example, the BinarySelector token holds onto the actual character (e.g. $+).Instance Variables:	value	<String>	The value of this token"
"GTSpotterCategoryTitleBrick",""
"ZnStaticFileServerDelegate","I am ZnStaticFileServerDelegate.I am a simple proof of concept implementation of a web server serving static files.I handle urls with an optional prefix as requests for files in a directory.I serve index.html or index.htm when a directory is requested and these files exist.I do a redirect when a path that is not does not end with a / refers to directory.I function as a delegate for ZnServer.ZnServer startDefaultOn: 1701.ZnServer default delegate: ((ZnStaticFileServerDelegate new) 									prefixFromString: 'apple/macosx'; 									directory: '/Library/WebServer/Documents' asFileReference; 									yourself).Part of Zinc HTTP Components."
"GlamourousBenchmark",""
"TxEditorOperation","my subclasses representing a concrete operation which modifies target text which is being edited,including changing the text or changing selection.i am kind of command, to support undo/redo operations."
"DynamicWidgetChange","I am a dummy proto to see how easy it is to replace a subwidget with another one dynamically.DynamicWidgetChange new openWithSpec"
"BehaviorOwnedChunk","I'm an abstract class grouping the behavior of the code declarations that will be instaled in a behavior, such as methods, class comments, organizations..."
"ZipFileSystemFile","I represent a zip file system entry for a file. Together with ZipFileSystemDirectory I take care of lazily accessing archive members."
"RubPluggableGetMenuPolicy","I am used to get the correct menu of common text areas"
"GTEventAnnouncement","I represent data that are sent to a server.When GTEventPacking object asks for data to send, the data are packed and added to #data:, then there are other general information about the bundle, e.g. computer id. I keep all those information. I can also unpack the data using #unpackedData.For the simple backward compatibility, all my data are stored in a dictionary.For the Collaborators Part:  - GTEventCollector creates instance of me and adds additional information about sent data, see GTEventCollector>>#updateAnnouncement:- GTEventPacking serialize #data and me in order to send me to a serverPublic API and Key Messages- unpackedData    Internal Representation and Key Implementation Points.    Instance Variables	dictionary:		<Dictionary>"
"FFIExternalEnumeration","FFIExternalEnumerationType reifies the enum declarations in C and offers a nice interface (especially in terms of debug/inspect).To use it just subclass the FFIExternalEnumeration and add an #enumDecl method to the class side such as:FFIExternalEnumeration subclass: #FFITestEnumeration	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NativeBoost-Tests'FFITestEnumeration class>>enumDecl	^ {(#AAA -> 1).	(#BBB -> 2).	(#CCC -> 3).	(#DDD -> 2400)} asDictionary DO NOT FORGET to call the #initialize method on your class. The rest is automatically done ;)You can use your new enum in two ways:	- add it to a client class poolDictionaries list (see  #FFIExternalEnumTests for an example), 		and then just write CCC in your code -- CCC here is an item of your enum	- send the name of an item to your class --- FFITestEnumeration DDDThe FFIExternalEnumeration implements  (instance and class) some more API methods like:	#itemAt: retrieves the item having a specific value  --- NBTestEnumeration itemAt: 2	#includes: checks the existence of a specific item in the enum --- FFITestEnumeration includes: #AAA"
"KeyboardEvent","I am a keyboard event. I contain the char code of the event pressed, the modifiers pressed, and the keycode of the key pressed."
"RBUsesAddRule","Check for possible uses of the result returned by an add: or addAll: messages. These messages return their arguments not the receiver. As a result, may uses of the results are wrong."
"ThisContextEyeElement","This eye element is used in the right panel of the debugger to show thiscontext instead of self as a label"
"SugsBreakpointSuggestion","This class is an abstrat class for defining breakpoint commands"
"GLMMorphicActionListRenderer",""
"ImageMorph","ImageMorph is a morph that displays a picture (Form). My extent is determined by the extent of my form.Use #image: to set my picture.Structure: instance var		Type 		Description image				Form		The Form to use when drawingCode examples:	ImageMorph new openInWorld; grabFromScreen	(Form fromFileNamed: 'myGraphicsFileName') asMorph openInWorldRelationship to SketchMorph: ImageMorph should be favored over SketchMorph, a parallel, legacy class -- see the Swiki FAQ for details ( http://minnow.cc.gatech.edu/squeak/1372 ). "
"NewValueHolder","I am a class holding any object inside its unique instance variable. Each time the instance variable value changes, an announcement is emitted. The instance variable is accessed through `value` and `value:` while the registration is done by `whenChangedDo: aBlock`. In addition, infinite loops of propagation are prevented. Use case: you have two lists A, and B, and you want to keep their selection synchronised. So when A selection changes, you set B selection. But since B selection changes, you set A selection, and so on… This case is prevented by the use of a `lock` variable."
"GLMExamples","I am an abstract class used to group a series of examples.My subclasses should define each example within a method and annotated the method with the pragma #glmBrowser:input: "
"AbstractTutorialTest","SUnit tests for AbstractTutorial"
"LoadingThenOk","Small widget displaying a small cog turning while loading, then a ok tick when loading is done"
"MCDiffyVersion","A diffy version"
"PolygonMorph","This class implements a morph which can behave as four different objects depending on the the following two facts:- is it OPEN or CLOSED?- is it SEGMENTED or SMOOTHED.1. The OPEN and SEGMENTED variant looks like polyline.2. The OPEN and SMOOTHED variant looks like spline (kind of curve)3. The CLOSED and SEGMENTED variant looks like polygon. This is actually what you get when you do	PolygonMorph new openInWorldYou get a triangle. See below how to manipulate these objects...4. The CLOSED and SMOOTHED variant looks like blob (???)Prototypes of this morph can also be found in ""Object Catalog"". Several (different variants) of this object are among ""Basic"" morphs.Explore the assiciated morph-menu. It enables you- to toggle showing of ""handles"". They make it possible to	- reposition already existing vertices (by moving yellow handles)	- create new vertices (by moving green handles)	- delete already existing vertices (by dragging and dropping one yellow handle closely	  nearby the adjacent yellow handle  Handles can be made visible/hidden by shift+leftclicking the morph. This way it is possible  to quickly show handles, adjust vertices and then again hide handles.- making closed polygon open, i.e. converting it to a curve (and vice versa)- toggle smoothed/segmented line/outline- set up custom dashing (for line, curves or borders of closed polygons- set up custom arrow-heads (for lines resp. curves)------------------------------------------------------------------------------------------Implementation notes:This class combines the old Polygon and Curve classes.The 1-bit fillForm to make display and containment tests reasonably fast.  However, this functionality is in the process of being supplanted by balloon capabilities, which should eventually provide anti-aliasing as well.wiz 7/18/2004 21:26s have made some changes to this class to1) correct some bugs associated with one vertex polygons.2) prepare for some enhancements with new curves.3) add shaping items to menu."
"WindowsResolver","I am an expert on Windows filesystem conventions. I resolve origins according to these conventions."
"MetacelloDevelopmentProcess",""
"FloatArray","FloatArrays store 32bit IEEE floating point numbers."
"MBCommand","MBCommand is a command design pattern for capturing actions."
"GLMPaneScroller",""
"VersionnerSpecBrowser","Tool used to manage project dependencies.This tool uses ToolBox and Metacello to manage project dependencies (ConfigurationOf*).The GUI is built with Spec.You can find Versionner in the World menu (Tools category).Otherwise, you can launch it with :   VersionnerSpecBrowser open."
"SpecLayouts","A SpecExamples is the third sub-book of SpecHelpTopics. Here you will find more complex ways of laying out Spec.See class side for selectors."
"TimespanTest","SUnit tests for Timespan class"
"LayoutFrameTest","SUnit tests for class LayoutFrame"
"CommandLineArgumentsTest","That class tests the API given by AbstractUserInput. Since that class is obviously abstract, it can't be instantiated, the tests are running on CommandLine (which inherits from AbstractUserInput)"
"RBMoveInstVarToClassRefactoring","RBMoveInstVarToClassRefactoring knows how to move instance variable from one class to another.Instance Variables	newClass:		<RBClass>newClass	- class, in which user moves an instance variable"
"SugsSuggestionRemoveArgTest","SUnit tests for the remove argument suggestion"
"ZnResponse","I am ZnResponse, representing an HTTP Response consisting of a status line, headers and an optional entity (body).I am a ZnMessage.I can be used for generating and parsing.Part of Zinc HTTP Components."
"GLMLipsumWithSegmentsExample","self new open"
"PackageGroup","A group containing packages"
"ManifestCodeImportCommandLineHandlers","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GLMCompositeArrangement","This is a strategy to capture the intended arrangement of multiple presentations of a composite presentation. The subclasses define the actual arrangement."
"GTSpecPreDebugWindow","I implement a pre debug window for GTDebugger. I reuse the debug window for the SpecDebugger and adapt the way stack frames are obtained from the debugger.I receive a instance to a full debugger that I'll open if the user continues debugging."
"FLMigrationTest","SUnit tests for migrations"
"WeakMessageSendTest","SUnit tests for WeakMessageSend"
"RFSemanticAnalyzer","I add Reflectivity link analysis to the Semantic analyzer.I add #beforeHooks and #afterHooks anotation and make sure to visit them for semantic analysis."
"GTObjectVariablesBrowser","This is a helper browser for the main view in the GTInspector.Example:self openOn: Smalltalk"
"ManifestKomitter","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"SDL_JoyDeviceEvent","SDL2 library structure representing a joystick device event data."
"GLMExpanderTest",""
"EdgeGripMorph","Similar to a ProportionalSplitterMorph but designed to attach to an edge of a single morph only."
"MetacelloCachingGoferResolvedReference",""
"ZnDispatcherDelegate","I am ZnDispatcherDelegate, doing a straight-forward dispatching to mapped URLs.ZnDispatcherDelegate API:(server := ZnServer startDefaultOn: 9090)	delegate: (ZnDispatcherDelegate new 		map: '/hello' to: [ :request :response | response entity: (ZnEntity html: '<h1>hello server</h1>') ];		map: '/counter' to: [ :request :response | counterApplication handleRequest: request response: response ])."
"AbstractAcceptor","I am an abstract acceptor.The goal of my children is to properly dispatch the behavior when text is accepted. Depending of the context, different actions could be triggered"
"EqualityTester","I provide a simple way to test the equality properties of any object."
"RBMissingTranslationsInMenusRule","This rule should be updated to verify the inverse no translated messsages should be sent to menu element."
"MorphTreeMorphTests","A MorphTreeMorphTests tests aspects of a MorphTreeMorph"
"MCClassTraitDefinition","A class trait definition"
"SugsRemoveMethod","I know how to remove a mehod"
"SocketStreamTest","SUnit tests for socket streams"
"RxMatcherTest","This class provides tests for the regular expression matcher."
"VGTigerDemo","self runDemo "
"SugsBrowseClassReferences","I know how to browse references from a class"
"TxAthensNoWrapStrategy","I'm a layout strategy that computes the layout of each text line from the starting position to the end of the line.Therefore, I compute the line as it is,  and its up to the view to clip all the characters outside of the layout view's extent."
"GTSpotterPreviewArrowBrick",""
"MCSnapshotBrowser","Browser for snapshots"
"GLMMorphicTableRenderer",""
"OSTouchEvent","i am the different touch events. As a lot of event should be raises at the same time I should be par of I have the same logic as the Android Event. For my realy first draw maybe I should be refined late, depending of the need.I am design to manage:	- Touch Event from mobile platform	- Touch Event from Graphical Tools (graphical palette)	Developpement version Todo Work in progress"
"ManifestCollectionsTests","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"PropertySlotTest",""
"TraitPureBehaviorTest",""
"BracketMorph","Morph displaying opposing arrows."
"FTRootItem","I represent the root item node in a FTTreeDataSource.Description-------------------------------------------------I am store by a FTTreeDataSource and my children are the roots elements of the dataSource.I store the a collection of Items build from the data of the dataSource.Example------------------------------------------------- FTRootItem data: Object allSubclasses from: aDataSource"
"LiteralNode","I am a parse tree leaf representing a literal string or number."
"MczInstaller","An installer for Monticello files with the *.mcz extension.    MczInstaller installFileNamed: 'MyKillerApp-Core-Author.1.mcz'"
"LargeNegativeIntegerTest","SUnit tests for large negative integers"
"SHA1Test","This is the unit test for the class SecureHashAlgorithm. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"CategoryRemoved","This announcement will be emited when removing a category using:=> SystemOrganizer >> removeCategory:"
"ContainerModel","I am a model for a container. My purpose is to hold multiple subwidgets to glue them together.I should not be used directly"
"Win32Platform","I am a an object representing a Windows platform. Use myself to access platform specific features.Please keep me polymorphic to the the other platform objects.To get the current platform, you can evaluate:OSPlatform current."
"CursorWithAlpha","A 32-bit ARGB Cursor of arbitrary extent (some platforms may limit the size). Compositing assumes alpha is pre-multiplied."
"SettingsStonWriterTest","A SettingsStonWriterTest is a test class for testing the behavior of SettingsStonWriter"
"KMComposedModifier","I represent a composed key modifier. I contain a collection of modifiers that should match with a keyboard event.Look at my superclass for a more detailed explanaition."
"RBMultiEnvironment",""
"TextModel","I handle basic multi-line text. Try:	""self example"".	My main purpose is to handle source code (I have editing shortcuts support)"
"GTSpotterRecorderExitAnnouncementEvent","A GTSpotterRecorderExitAnnouncementEvent  models the action of  exiting Spotter. Instance Variables	timestamp:		<Object>timestamp	- xxxxx"
"NaturalLanguageTranslatorTest","Tests for NaturalLanguageTranslator"
"IRPopIntoTemp","pop into temp"
"RPackageRenameTest",""
"ArrayedCollection","I am an abstract collection of elements with a fixed range of integers (from 1 to n>=0) as external keys."
"DAManuallyAddedDependentPackageNode","I'm a node  representing a dependency not computed automatically but added manually on the package Manifest."
"ReIntervalSourceAnchor","I allow to specify the interval in a source code"
"GLMPhlowTextBrick",""
"SizeMismatch","I am SizeMismatch, an exception indicating that an operation was attemptedon two or more collections that don't match in size. "
"MouseEvent","Superclass for mouse events"
"OSTouchActionPointerDownEvent","A non-primary pointer has gone down."
"AbstractEyeElement","I represent an abstract inspection element. In an EyeInspector, a eye element corresponds to a wrapper around a field element.Public API :label: display on left list panel of the eye inspectordescription: printed on the right panel of the eye inspectorhost: object inspected in the eye inspector value: object represented by this eye element "
"KeyNotFound","I am KeyNotFound, an exception indicating that a key was not found in a Dictionary."
"ZnUnknownHttpMethod","ZnUnknownHttpMethod is signalled when an unknown/unsupported HTTP method is found while parsing a request.I am resumable to allow non-standard methods.Part of Zinc HTTP Components. "
"GLMListMorphicTest",""
"NautilusSelectionAnnouncement","I am a common superclass for package, class, protocol and method selection. I contain all the state and functionality, my subclasses are there only to allow the distinction between announcements"
"MetacelloVersionDefinitionError",""
"GLMBrickPopupErrorThemer",""
"StartupAction","I am an atomic item used to execute a portion of code at image startup."
"MetacelloExternalScriptingTestCase",""
"ManifestRingCoreKernel","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"STONWriteAsciiOnlyReadTests",""
"Socket","A Socket represents a network connection point. Current sockets are designed to support the TCP/IP and UDP protocols. Sockets are the lowest level of networking object in Pharo and are not normally used directly. SocketStream is a higher level object wrapping a Socket in a stream like protocol.ProtocolClient and subclasses are in turn wrappers around a SocketStream to provide support for specific network protocols such as POP, NNTP, HTTP, and FTP."
"TraitMethodDescriptionTest",""
"ManifestTraits","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"MorphWrapper","A MorphWrapper is used to wrap a morph with a layout in the goal to be easily added to another morph"
"AthensCairoSolidPaint","i represent solid color paint in cairo backend"
"ReflectivityExamples","Examples for RF"
"UndefinedObject","I describe the behavior of my sole instance, nil. nil represents a prior value for variables that have not been initialized, or for results which are meaningless."
"RBFooLintRuleTest",""
"GLMAnnouncerTest",""
"RBVariableRefactoring",""
"GoferResource","SUnit test resource for Gofer testing"
"OSTouchTwoFingersPinchDetector","I am detecting the pinches made with two fingers.I send these event back to my handler: 	- OSTouchTwoFingersPinchBeginEvent 	- OSTouchTwoFingersPinchMoveEvent 	- OSTouchTwoFingersPinchEndEvent "
"AbstractTimeZone","I am an abstract superclass for timezones.See my subclasses for specific implementations.Timezones are used to encapsulate the offset from the Coordinated Univeral Time (UTC) used for proper Date and Time display and manipulations."
"OCOpalExamples","I am the central place for example code used in tests"
"ReInvocationSequenceRule","I am checking for the violation in message sequences.Subclass me and rewrite initialization method to all super initialize and then all the sequences with the methods for adding protocol.Check the class side examples for examples.You have to callReRuleManager resetto make changes take place!!!!!!!!!!!!!!!!"
"FTFilterFunctionWithAction","I am a Filter widget that also have an action button.Description-------------------------------------------------I am use as a FilterFunction but I also have a Button. I am use by FTTableMorph.Public API and Key Messages-------------------------------------------------- #table: aTableMorph action: aBlock named: aString	is my constructor. The block is the action to be executed by the button and the string is the name of the button.	Internal Representation and Key Implementation Points.-------------------------------------------------    Instance Variables	actionBlock:		I am a block that need to be executed when the user press the button	actionButton:		I am the button of the widgetThe action block can takes 3 parameters:- The filtered data source- The pattern on the filter field - The selected element on the table"
"MorphTreePager","A tree pager"
"MCMczInstallerTest",""
"ClassVariableTest",""
"FLLightGlobalMapper","I map classes, traits, and global objects that belong to Smalltalk dictionary. I collaborate in serialization default behavior. For example, the global Transcript as well as any class in the image, are mapped by me."
"TxCharacterWrappingStrategyTest",""
"SDL_Window","I represent a handle of SDL2 window, coming from SDL2 library"
"OSWindowMorphicEventHandler","I can be used to convert OSWindow-level events to Morphic events.So, that installing my instance as event handler for specific window would allow running Morphic World in it.Later, the Morphic can be integrated with OSWindow API to avoid unnecessary conversion and thus eliminating the need in having this class."
"GLMTableMorphicTest",""
"ZnStaticFileServerDelegateTests",""
"GLMPagerButtonSelected",""
"OSNullFormRenderer","i just a stub for rendering nothing , so that all update requests (like from Morhpic), are simply ignored"
"MetacelloRepositorySqueakCommonTestCase",""
"PharoSyntaxTutorial","The default Pharo tutorial to learn the Pharo syntax"
"MethodChunk","I represent the declaration of a method.  My contents are the source code to import, and the category reader is the object who knows the class, category and timestamp where to install the method.Sending me the message #import makes me install the method into the class."
"STONTestUser3","STONTestUser3 extends STONTestUser but wants nil instance variables to be written"
"RBRenameInstanceVariableTest",""
"OCAbstractScope","I am a symbol table where variable names are associated with SemVars.  Each context (method/closure) get a fresh scope that inherits from its outer scope."
"EyeInspectorTest",""
"TxTextEditorAnnouncement","This is root class of announcements related to text editor events."
"GLMSegmentWithHelpAndMouseUpActionExample","self new open"
"ReTransformationCritic","I am a result of a transformation rule. I have the transformed AST of the target that can be used for refactory change."
"InteractiveResolver","I resolve origins by consulting the user. I maintain a cache of the user's responses."
"DADependentPackageWrapper","Other wrapper for dependent package (use in TreeModel). Useful in reverse analysis."
"NewListAdapter","NewListAdapter is used to link the model and the list.It holds the ""pluggable"" part of the widget, aka the definition of the API"
"STONReference","STONReference holds a forward reference to another object during materialization."
"SMTPClient","This class implements the SMTP (mail sending) protocol specified in RFC 821.HELO <SP> <domain> <CRLF>MAIL <SP> FROM:<reverse-path> <CRLF>RCPT <SP> TO:<forward-path> <CRLF>DATA <CRLF>RSET <CRLF>SEND <SP> FROM:<reverse-path> <CRLF>SOML <SP> FROM:<reverse-path> <CRLF>SAML <SP> FROM:<reverse-path> <CRLF>VRFY <SP> <string> <CRLF>EXPN <SP> <string> <CRLF>HELP [<SP> <string>] <CRLF>NOOP <CRLF>QUIT <CRLF>TURN <CRLF>"
"AthensCairoDefs","I hold a lot of different constants needed to work with cairo library"
"RubExtraSelectionDecorator",""
"Announcer","The code is based on the announcements as described by Vassili Bykov in <http://www.cincomsmalltalk.com/userblogs/vbykov/blogView?searchCategory=Announcements%20Framework>. The implementation uses a threadsafe subscription registry, in the sense that registering, unregistering, and announcing from an announcer at the same time in different threads should never cause failures.For security reasons, registry is kept private, and has no accessor like in other implementations"
"FileExists","I am raised on an attempt to create a file or directory over top of an existing file."
"MetacelloVersionSpec",""
"FFIMethodArgument","I implement the push strategy for method arguments who are simple variables."
"OCNewCompilerWithChangesFunctionalTests",""
"AtomicQueueItem","i am a queue item , used by atomic queues.All my new instances are circular i.e. next=self"
"HandMorph","The cursor may be thought of as the HandMorph.  The hand's submorphs hold anything being carried by dragging.  There is some minimal support for multiple hands in the same world."
"MalDijkstraEdge",""
"ClassDescriptionTest","This is the unit test for the class ClassDescription. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"FLAbstractCollectionCluster","A FLAbstractCollectionCluster is the common behavior for all cluster collections. "
"EnvironmentChooser","I am widget for selecting environments."
"EUCKRTextConverter","Text converter for Korean variation of EUC."
"RBClassVariableCapitalizationRule","This smell arises when class or pool variable names do not start with an uppercase letter, which is a standard style in Smalltalk. In fact a lowercase character is used to represent variables with a local scope such as instance variables, temporary variables, method and block arguments. Uppercase is used to represent the case where the scope of a variable is either global (class name and global variables such as Transcript) or shared among different classes (class variables or pool variables)."
"MCFileTreeStWriter","A writer for Smalltalk code"
"FLPharo4Platform",""
"KMDescription","A KMDescription is a window showing the description of shortcuts for a specified set of symbols reprensenting KMCategories"
"OCSourceCode2BytecodeTest","I provide at least one test which corresponds to a message sent by InstructionStream>>#interpretNextInstructionFor: to its client."
"SimplestClassListExample","SimplestClassListExample new openOn: Object"
"RBRenameClassVariableRefactoring",""
"GLMPagerScrollSlidingBrick",""
"ExternalLibraryFunction","An ExternalLibraryFunction specifies a fully qualified function from an external library.Instance variables:	name			<String | Integer>	name or ordinal of function	module			<String | nil>		name of module (nil if bound in the VM).	errorCodeName <String | nil>		name of temp receiving error code, if any"
"ManifestNetworkUUID","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"SlotMethodRecompilationTest",""
"FLPluggableSubstitutionMapper","I map substituted objects. For example, suppose you want to substitute instances of WriteStream by nil. In such case, I will map every WriteStream instance to my substitutions cluster, and its factory block will value to nil with any argument."
"RBBadMessageRule","This smell arises when methods send messages that perform low level things. You might want to limit the number of such messages in your application. Messages such as #isKindOf: can signify a lack of polymorphism. You can see which methods are ""questionable"" by editing the RBBadMessageRule>>badSelectors method. Some examples are: #respondsTo: #isMemberOf: #performMethod: and #performMethod:arguments:"
"CompiledMethod","My instances are methods suitable for interpretation by the virtual machine.  This is the only class in the system whose instances intermix both indexable pointer fields and indexable integer fields.	The current format of a CompiledMethod is as follows:	header (4 bytes)	literals (4 bytes each)	bytecodes  (variable)	trailer (variable)The header is a 30-bit integer with the following format:(index 0)	9 bits:	main part of primitive number   (#primitive)(index 9)	8 bits:	number of literals (#numLiterals)(index 17)	1 bit:	whether a large frame size is needed (#frameSize)(index 18)	6 bits:	number of temporary variables (#numTemps)(index 24)	4 bits:	number of arguments to the method (#numArgs)(index 28)	1 bit:	high-bit of primitive number (#primitive)(index 29)	1 bit:	flag bit, ignored by the VM  (#flag)The trailer has two variant formats.  In the first variant, the last byte is at least 252 and the last four bytes represent a source pointer into one of the sources files (see #sourcePointer).  In the second variant, the last byte is less than 252, and the last several bytes are a compressed version of the names of the method's temporary variables.  The number of bytes used for this purpose is the value of the last byte in the method."
"DynamicSpecExample","I am an example of how to fully dynamically create a UI, and also how to dynamically redrawn a widget.==========================(DynamicSpecExample object: nil) open.(DynamicSpecExample object: 4) open.(DynamicSpecExample object: 'Hello World') open."
"DAPackageCycleDetectionTreeModel","A PDPackageDetectCycleTreeModel shows all cycles among packages from a graph of dependencies."
"StepThroughDebugAction","A StepThroughDebugAction through the execution until control returns to the current method."
"Pharo3DarkTheme","A dark theme for pharo, inspired on http://blog.jetbrains.com/blog/2013/06/11/inside-darcula-look-and-feel-an-interview-with-konstantin-bulenkov/This theme works well with the ""Dark"" text styling. You can have ""the full experience"", executing: self installFullTheme."
"Canvas","A canvas is a two-dimensional medium on which morphs are drawn in a device-independent manner. Canvases keep track of the origin and clipping rectangle, as well as the underlying drawing medium (such as a window, pixmap, or postscript script).Subclasses must implement (at least) the following methods:	* Drawing:		#fillOval:color:borderWidth:borderColor:		#frameAndFillRectangle:fillColor:borderWidth:borderColor:		#drawPolygon:color:borderWidth:borderColor:		#image:at:sourceRect:rule:		#stencil:at:sourceRect:rule:		#line:to:width:color:		#paragraph:bounds:color:		#text:bounds:font:color:	* Support		#clipBy:during:		#translateBy:during:		#translateBy:clippingTo:during:		#transformBy:clippingTo:during:"
"Compiler","The compiler accepts Smalltalk source code and compiles it with respect to a given class. The user of the compiler supplies a context so that temporary variables are accessible during compilation. If there is an error, a requestor (usually a kind of StringHolderController) is sent the message notify:at:in: so that the error message can be displayed. If there is no error, then the result of compilation is a MethodNode, which is the root of a parse tree whose nodes are kinds of ParseNodes. The parse tree can be sent messages to (1) generate code for a CompiledMethod (this is done for compiling methods or evaluating expressions); (2) pretty-print the code (for formatting); or (3) produce a map from object code back to source code (used by debugger program-counter selection). See also Parser, Encoder, ParseNode."
"LazyTabPageChanged",""
"FLGlobalNotFound","I represent an error produced during materialization when a serialized global name doesn't exist (at Smalltalk globals)."
"LabelModel","A LabelModel is a spec model for Labels"
"EncoderForLongFormV3PlusClosures","An encoder for the V3 bytecode set augmented with the following bytecodes that are part of the full closure implementation.	138   10001010 jkkkkkkk		Push (Array new: kkkkkkk) (j = 0)								or	Pop kkkkkkk elements into: (Array new: kkkkkkk) (j = 1)	140   10001100 kkkkkkkk jjjjjjjj 	Push Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	141   10001101 kkkkkkkk jjjjjjjj 	Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	142   10001110 kkkkkkkk jjjjjjjj 	Pop and Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	143   10001111 llllkkkk jjjjjjjj iiiiiiii	Push Closure Num Copied llll Num Args kkkk BlockSize jjjjjjjjiiiiiiiiThis is an exact duplicate of EncoderForV3PlusClosures.Could be a trait (or in Newspeak, a Mixin).For now we impose upon you to synchronise any and all changes between these two classes."
"HookGenerator","New version-> takes all links and one node-> returns the complete AST for the hook."
"FFICallbackType","I'm a FFICallback type. I can handle callback type parameters.What I actually do is to pass the content of #thunk instVar of the objectClass as parameter. Thunk needs to be a callback thunk (and then an ExternalAddress).The C side of a callback is void* (because is a pointer to a function)"
"TickSelectionListMorph","A TickSelectionListMorph is used to render the tick liststoreValue	- xxxxx"
"GLMMorphicPresentationToolbarModel",""
"RBNoClassCommentRule","This smell arises when a class has no comment. Classes should have comments to explain their purpose, collaborations with other classes, and optionally provide examples of use."
"MetalinkIconStyler","I'm in charge to style an ast when there are metalinks"
"StoredSettingsFactory","I am responsible for creating new StoredSetting objects from existing SettingNodes. I know how to create a StoredSetting from a SettingNode.Collaborators: SystemSettingsPersistencePublic API and Key Messages- from:- fromSettingNodes: Internal Representation and Key Implementation Points.    Instance Variables	storedSetting:		<StoredSettings>	storedSettings:		<Collection of StoredSettings>"
"ProcessBrowser","Change Set:		ProcessBrowserDate:			14 March 2000Author:			Ned Konzemail: ned@bike-nomad.comThis is distributed under the Squeak License.Added 14 March:	CPUWatcher integration	automatically start and stop CPUWatcher	added CPUWatcher to process list menuAdded 29 October:	MVC version	2.8, 2.7 compatibility	rearranged menus	added pointer inspection and chasing	added suspend/resume	recognized more well-known processes	misc. bug fixesAdded 26 October: highlight pc in source codeAdded 27 October: added 'signal semaphore'added 'inspect receiver', 'explore receiver', 'message tally' to stack list menuadded 'find context', 'next context' to process list menuadded 'change priority' and 'debug' choices to process list menu27 October mods by Bob Arning:alters process display in Ned's ProcessBrowser to - show process priority- drop 'a Process in' that appears on each line- show in priority order- prettier names for known processes- fix to Utilities to forget update downloading process when it ends (1 less deadprocess)- correct stack dump for the active process"
"OSWindowCloseEvent","I am delivered when user closing the window.The default action (unless suppressed) will also destroy the window."
"GTSpotterProcessor","This is the abstract class that models a processor that is associated with a spotter category. It can spot items to be displayed in that category by reacting to a filter: message. "
"NetNameResolverTest","SUnit tests for NetNameResolver "
"OCCompilerExceptionsTest",""
"GTExampleLinkContext",""
"OCCleanBockTest",""
"OSTouchThreeFingersScrollBeginEvent","Three fingers started to scroll"
"AthensArcSegment","i am abstract class , representing an arc segment"
"VSSetDescriptionCommand","Set the description on the selected development version"
"MethodRecategorized","This announcement will be emitted when:	=> a non-empty protocol is renamed in a class or a trait (using ClassOrganizer >> renameCategory:toBe:). If the protocol does not contain any method, the announcement will not be emitted. Therefore, if we rename a non-empty protocol, both SystemMethodRecategorizedAnnouncement and SystemClassReorganizedAnnouncement will be emitted	=> a method is removed from a category of a class or a trait (using ClassOrganizer >> removeElement:)	=> a method is RE-categorized in a protocol of a trait or a class, using Organizer>>classify:under:.  If the method is classify under its current protocol, the announcement will not be emitted"
"FreeTypeExternalMemory","FreeType externalMemory "
"ZnHttpSaveContentsToFile","I am ZnHttpSaveContentsToFile.I am a ZnUrlOperation.I implement the #saveContentsToFile: URL operation for HTTP(S) urls, which downloads the url resource to a file.  'http://zn.stfx.eu/zn/numbers.txt' asZnUrl saveContentsToFile: Path * 'numbers.txt'.Part of Zinc HTTP Components."
"ZnCurrentServer","I am ZnCurrentServer.I am a DynamicVariable and a ProcessSpecificVariable.I hold a reference to the current ZnServer instance during HTTP processing, during the dynamic scope of #handleRequest:"
"VSCommand","VSCommand is a command design pattern for capturing actions."
"GTSpotterExamples","I provide examples for the class GTSpotter as class side methods."
"RxsCharacter","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A character is a literal character that appears either in the expression itself or in a character set within an expression.Instance variables:	character		<Character>"
"WeakAnnouncementSubscription","A WeakAnnouncementSubscription is a subscription which is removed automatically when the subscriber is unreferenced.No support for ephemerons currently prevents this from working for Block actions (blocks hold their receiver, which is the default subscriber strongly). To switch between subscription types, use makeStrong/makeWeak on the subscription returned when initially registering with announcer.Note, that list and next must be first instance variables."
"SugsFindImplementors","I know how to find implementors for a message"
"GLMSpotterRequest",""
"MetacelloRepositorySpec",""
"MCVersionLoader","A MCVersionLoader is responsible for loading a given version. "
"FLVariablesMapping","I am used to materialize instance variables in an object, tolerating ""class shape changing"".Cases tolerated are:- instance variable added- instance variable order change- instance variable removed"
"FinderUI","A FinderUI is a UI used to render a Finder instance.This tool is used to look for selectors, class, source code or patterns through the system, or through a specified environment"
"BaselineOfRenraku","I am a baseline of Renraku, read more at: https://github.com/Uko/Renraku"
"RFSelectorReification","I am the selector of a message send or method"
"IRPushInstVar","push inst var"
"SystemProgressItemMorph","A SystemProgressItemMorph is 'bar' in a SystemProgressMorph. "
"LoadingMorph","I am a special iamge morph used to be displayed as an icon for loading"
"MCAddition","A MCAddition represents the operation to add an entity to a snapshot. "
"GTInspectorProtoObjectTest",""
"GLMTreeMorphSelectionChanged",""
"GLMSmalltalkCodePresentation","A GLMSmalltalkCodePresentation can display Smalltalk code. It offers support for syntax highlighting and can also deal with undeclared bindings, if used as an workspace.Instance Variables	highlightSmalltalkContext:		<Object>	isForScripting:		<Object>	variableBindingsBlock:		<Object>highlightSmalltalkContext	- xxxxxisForScripting	- xxxxxvariableBindingsBlock	- xxxxx"
"Message","I represent a selector and its argument values.	Generally, the system does not use instances of Message for efficiency reasons. However, when a message is not understood by its receiver, the interpreter will make up an instance of me in order to capture the information involved in an actual message transmission. This instance is sent it as an argument with the message doesNotUnderstand: to the receiver."
"SDL_MouseMotionEvent","SDL2 library structure"
"ZnUrlTests",""
"ExternalForm","An ExternalForm is a specialized Form whose pixel-data is stored in memory that the user provides a pointer to.  This can simply be memory on the C heap, or (the motivating use-case...) it can be a pointer that is temporarily ""mapped"" from GPU memory by an API such as OpenCL.The user is responsible for both releasing the image-memory, as well as destroying the surface handle (perhaps the latter should be handled by automatic finalization).Example usage:| extent form ptr |extent := 400@300.form := ExternalForm extent: extent depth: 32.ptr := ExternalAddress gcallocate: (extent x * extent y * 4).form setManualSurfacePointer: ptr.Display displayScaledOn: form.form displayAt: 0@0.form destroySurface."
"TestObjectsAsMethods",""
"WorkingCopyToolBar","WorkingCopyToolBar new openWithSpec"
"KernelClassesFilter","A filter for kernel classes"
"ResumeDebugAction","A ResumeDebugAction resumes the execution of the interrupted process and closes the debugger."
"RBLiteralArrayContainsSuspiciousTrueFalseOrNilRule","Some times ago, arrays were not allowed to contain true false and nil objects. They only contain their symbol representation: evaluating #(true false nil) returns #(#true #false #nil). Nowadays, #(true false nil) is equivalent to {true . false . nil }, i.e., it returns an array with the objects true, false, and nil. This smells checks methods having #(#true #false #nil) in their literal frame since it can be the source of potential bugs. 	 "
"DuplicatedSlotName","I am signaled when trying to build a class with a duplicated slot."
"RBRefactoringManager",""
"ZnConnectionTimeout","I am ZnConnectionTimeout.I am a DynamicVariable and a ProcessSpecificVariable.I can be used to modify the global default socket IO timeout on a per process basis, for example:ZnConnectionTimeout 	value: 5 	during: [ ^ ZnClient new get: 'http://zn.stfx.eu/zn/small.html' ]"
"TxAthensNullViewContainer","A view container is responsible is responsible for taking care about platform-specific duties like connecting view with outer world (like Morphic) in order to handle events etc.A null container simply ignores all notifications from view."
"GTSpotterRecorderCategorySelectedEvent","A GTSpotterRecorderCategorySelectedEvent  models the action of  selecting a category in the search results. This event stores the name of the category and the number of results that were matched by the current query.Instance Variables	categoryLabel:		<Object>	elementCount:		<Object>categoryLabel	- xxxxxelementCount	- xxxxx"
"ColorMap","I'm a transformation of pixel values. I apply up to four masks and shits to compute the transformed pixel value.I'm used when applying a BitBlt transfer, whenever pixels from a source to a destination have diferent depths. For further information refer to BitBlt class comments.To see me in action evaluate: BitBlt exampleColorMap"
"MalSndNode",""
"RGContainer","A concrete container already knows how to treat classes, methods and packages. "
"TxAthensLayoutLine","I represent a single text line, which belongs to specific layout.I carry various geometrical information, such as maximum ascent, line height and width.My commands are TxDisplayCommand-s which contain enough information to renderthe line correctly on canvas , as well as for measuring font metrics.I am certainly not the top level API and my implementation is considered private(in contrast to LayoutView)."
"TestLocalVariable","TestLocalVariable is a test class using in ProcessSpecificTest."
"MalCyclesCoverage",""
"GLMPortEventTest",""
"TestCoverage","I wrap a method in order to detect whether it has been called or not. Then I can be used to calculate test coverage for SUnit."
"DATraitDependencyNode","A PDCycleNode is used to display a trait dependency in a tree."
"PoolDefiner2","A pool used for testing purposes"
"MetacelloAllowProjectDowngrade",""
"MIMEHeaderValue","I contain the value portion of a MIME-compatible header.I must be only initialized with the value and not the field name.  E.g. in processing	Subject: This is the subjectthe MIMEHeaderValue should be given only 'This is the subject'For traditional non-MIME headers, the complete value returned for mainValue and paramaters returns an empty collection.For MIME headers, both mainValue and parameters are used."
"TraitFileOutTest",""
"GTPlayPageFilePersistence",""
"AthensTextScanner","I responsible for scanning the Text and transforming it into a list of AthensTextLine, where each line is a list of AthensTextDisplayCommand (sub)instances"
"GLMPopperNotificationStrategy","I opened a new popper window that displays the given notification. (I do not alter the content of the text editor.)"
"PluggableSetTest","SUnit tests for pluggable sets"
"ProcessAlreadyTerminating","I notify the sender of #terminate that the receiving process has already received a #terminate before.Use Process>>isTerminating to check for this."
"RBRefactoring",""
"GTSpotterAllCandidatesRemoved",""
"ManyTestResourceTestCase","SUnit tests for handling of many test resources"
"RubScrolledTextModel","I am the main model of a text area. I should be used to dialog with the container of the text area. I am able to communicate the necessary infos to the morph. "
"OSWindowAttributes","My instances hold a number of various attributes, used during initial window creation and its initialization:- initial bounds- title- icon- screen id- fullscreen or not- etc...Please note, that depending on driver used, some attributes can be ignored by driver and will have no any effect.  The preferableDriver attribute is special, that it allows user to bypass the default driver selection mechanism and tell directly, which driver shall be used for creating a window."
"TxSlider","position:  0..1thickness: 0..1"
"RGVariableDefinitionTest","SUnit tests for variable definitions"
"MBConfigurationInfoCommand","Common superclass for commands on configuration infos in Versionner"
"GLMStackedScrollPaneBrick","A GLMStackedScrollPaneBrick is a more complicated scrollpane, with scrollbars and stacking mechanism of subbricks that have #stack floating parameter"
"DAPackageItemDiffNode","A PDPackageNode is used to display a package diff in a tree."
"SessionManager","I'm the entry point of the session (betwen start/save/stop) management mechanism.I replace the old startup and shutdown list mechanism.There is a default instance of me used by the system accessible through:	self default.I can create new sessions and manage categories.I also provide a facade to register new session handlers.I can provide the list of handlers by order of priority (categories order and categories priority) either for the startup or the shutdown.	self default startupList.	self default shutdownList.Note: the shutdown list is just the startup list reversed"
"RBEqualsTrueRule","Check for a =, ==, ~=, or ~~ message being sent to true/false or with true/false as the argument. Many times these can be eliminated since their receivers are already booleans. For example, ""anObject isFoo == false"" could be replaced with ""anObject isFoo not"" if isFoo always returns a boolean. Sometimes variables might refer to true, false, and something else, but this is considered bad style since the variable has multiple types."
"RBAsOrderedCollectionNotNeededRule","A prior conversion to an Array or OrderedCollection is not necessary when adding all elements to a collection."
"BalloonState","This class is a repository for data which needs to be preserved during certain operations of BalloonCanvas."
"TxInterval","I am interval of text. I am immutable."
"MorphicUIManager","The Morphic ui manager. I was packaged in toolbuilder and I may change in the future. For the moment, the goal is to unload toolbuilder. "
"OSTouchOneFingerHoldEvent","One finger is down and has not moved on the screen"
"TransferMorph","This is a Morph that is used to visually indicate the progress of a drag operation, and also as a container for various bits of drag state information.It polls the shift state in its step method to update its copy state (shift pressed = should copy).And if you hit the Escape key while dragging, it aborts the drag operation."
"NOCCompletionTable","I keep track of symbols to be retrieved in ocompletion algorithm. Unlike ecompletion, I learn something and try to retrieve users last occurences of typing sequences first, then the system symbols which match. TODO remove stupid symbols (like packages and method extensions and timestamp)"
"GLMBrickedMorph","A GLMBrickedMorph is a direct subclass of Morph with removed layouting mechanism"
"TCPSocketEchoTest","TCPSocketEchoTest is both a unit test and an example.It implements and tests a TCP echo service.Input is read and send back in response.You can also run the example manually,by inspecting each expression separately.  TCPSocketEchoTest new runServer.  TCPSocketEchoTest new clientSend: 'Hello @ ', Time now asString.  TCPSocketEchoTest new clientSend: #quit.Each TCP client connection creates a worker process on the server handling the connection until it is closed. Each worker process reads input one time and sends it back.The server runs until it receives quit as input. If necessary, use the Process Browser to terminate a running server.Note: this example deliberately does not use SocketStream to show how to use Socket directly. In practice however, you should use SocketStream."
"GLMPager",""
"GTSpotterDeploymentExceptionHandlerMock",""
"FIFOQueueTests","SUnit tests for FIFO queues"
"GTSpotterStepPopped",""
"GLMItemChanged",""
"DAReversePackageNode","A PDReversePackageNode is a node to display a package in the tree during a reverse analysis."
"OCStoreIntoReadOnlyVariableError","Error when trying to assign to a non writeble Variable.(method arguments). For backward compatibility this error does not signal if the compilation context is not  interactive."
"PharoTutorialHelpTest","SUnit tests for PharoTutorialHelp"
"SDL_MouseButtonDownEvent","SDL2 library structure"
"MalDijkstraNode",""
"EncoderForV3PlusClosures","An encoder for the V3 bytecode set augmented with the following bytecodes that are part of the full closure implementation.	138   10001010 jkkkkkkk		Push (Array new: kkkkkkk) (j = 0)								or	Pop kkkkkkk elements into: (Array new: kkkkkkk) (j = 1)	140   10001100 kkkkkkkk jjjjjjjj 	Push Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	141   10001101 kkkkkkkk jjjjjjjj 	Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	142   10001110 kkkkkkkk jjjjjjjj 	Pop and Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	143   10001111 llllkkkk jjjjjjjj iiiiiiii	Push Closure Num Copied llll Num Args kkkk BlockSize jjjjjjjjiiiiiiiiThis is an exact duplicate of EncoderForLongFormV3PlusClosures.Could be a trait (or in Newspeak, a Mixin).For now we impose upon you to synchronise any and all changes between these two classes."
"OCInstanceScope","I include all variable enries for slots, self, super."
"ZipArchiveMember","Subinstances of me are members in a ZipArchive.They represent different data sources:	* ZipDirectoryMember -- a directory to be added to a zip file	* ZipFileMember -- a file or directory that is already in a zip file	* ZipNewFilemember -- a file that is to be added to a zip file	* ZipStringMember -- a string that is to be added to a zip fileThey can write their data to another stream either copying, compressing,or decompressing as desired."
"GLMBrickPopupHelpDarkThemer",""
"TxAthensTextTransformsTest",""
"SimpleTestResourceA","I'm a simple test ressource for test purposes"
"GTStringFilter","I provide the functionality for filtering items based on a query.I return the list of all items that match the filter but my subclasses should only send to the processor the first  #itemsLimit items ."
"KomitPackage","I am a simple object used to cache the patch in order to save a bit of time"
"SpecLayoutFrame","I am a wrapper for the layout of widget.Each framework can then adapt me as it wants in its adapters"
"RPackageWithDoTest","SUnit tests for RPackage"
"ManifestManifestTests","The manifest for Manifest-Tests package"
"ResumableTestFailure","A ResumableTestFailure triggers a TestFailure, but lets execution of the TestCase continue. this is useful when iterating through collections, and #assert: ing on each element. in combination with methods like testcase>>#assert:description:, this lets you run through a whole collection and note which tests pass.here''s an example:		(1 to: 30) do: [ :each |		self assert: each odd description: each printString, ' is even' resumable: true]for each element where #odd returns <false>, the element will be printed to the Transcript. "
"FLPointCluster","FLPointCluster is an optional class that optimizes Point instances, since there are a lot of instances in the system, it makes sense to optimize them. We take advantage of bytecode optimizations done by Pharo for messages like #@, #x and #y. In addition, we avoid the overhead of class reshape, etc. "
"RBAddClassRefactoring",""
"MetacelloExplicitLoadDirective",""
"IRTempVector","I model the tempVector.The tempvector is an array that stores all escaping variables of a block that are written to from outside."
"ZnUserAgentSession","I represent a session store for an HTTP client instance of ZnUserAgent. I hold the cookie jar for the session and any authentication credentials used by the client.Part of Zinc HTTP Components."
"MorphicMenuItemAdapter","I am the bridge between a MenuItemModel and a ToggleMenuItemMorph"
"AthensCurveFlattener","This converter flattens all curves by converting them to series of lines.This means that path can be rendered using simple polygon rendering techniqueand nothing else."
"WeakKeyDictionary","I am a dictionary holding only weakly on my keys. This is a bit dangerous since at any time my keys can go away. Clients are responsible to register my instances by WeakArray such that the appropriate actions can be taken upon loss of any keys. As key may disappear at any time, my reported size may be greater than the number of keys encountered in iterations.See WeakRegistry for an example of use.Implementation notes:I am a set of WeakAssociations. Each WeakAssociation can be in one of three states: a key is present, or the key has been garbage-collected, or the association is expired (meaning that the value has also been released). During finalization, associations with no key expire, but I still keep them to avoid rehashing the entire set. When adding a new entry, the new entry can either go into a slot that is nil, or one that has an expired association. I keep a count of expired associations and rehash when there are too many (currently, if they account for more than 25% of the space)."
"ProfStef","ProfStef is the Pharo teacher. To start the tutorial, evaluate:[[[ ProfStef go.]]]To go to the next lesson evaluate:[[[ProfStef next.]]]To execute your own tutorial:[[[ProfStef goOn: MyOwnTutorial]]]MyOwnTutorial should be a subclass of AbstractTutorial.To see a table of contents with all defined tutorials:[[[ProfStef contents Metacello Configuration Tutorial Part1	ProfStef goOn: MetacelloConfigurationTutorialPart1Metacello Configuration Tutorial Part2	ProfStef goOn: MetacelloConfigurationTutorialPart2Metacello Development Cycle	ProfStef goOn: MetacelloDevelopmentProcessInside Metacello Toolbox API	ProfStef goOn: MetacelloToolBoxTutorialPharo Syntax Tutorial	ProfStef goOn: PharoSyntaxTutorial']]]Metacello Configuration Tutorial Part1	ProfStef goOn: MetacelloConfigurationTutorialPart1Metacello Configuration Tutorial Part2	ProfStef goOn: MetacelloConfigurationTutorialPart2Metacello Development Cycle	ProfStef goOn: MetacelloDevelopmentProcessInside Metacello Toolbox API	PharoTutorial goOn: MetacelloToolBoxTutorialPharo Syntax Tutorial	ProfStef goOn: PharoSyntaxTutorial']]]"
"FLPharo1Platform",""
"GlobalIdentifierMergerTest","A GlobalIdentifierMergerTest is a test class for testing the behavior of GlobalIdentifierMerger"
"VSCommitProjectValidator","I'm a project validator. I check project configuration is ok. I check project development version is ok."
"GLMDropDownListMorphSelectionChanged",""
"GTSpotterShowPreview",""
"RubEncryptedDisplayScanner",""
"RGCommentDefinitionTest","SUnit tests for comment definitions"
"MalNodeWithNext","A basic node able to host the model and to represent edges with no additional class.Edges are navigable in one way through the nextNodes instance variable."
"SMTPClientTest","SUnit tests for SMTP client"
"WeakFinalizerItem","My instances is used by weak registry to hold a single weak referenceand executor(s).Once object, referenced weakly by my instance become garbage, a weak registry triggers its executionby sending #finalizeValues to my instance.Note, that a new VM finalization scheme does not implies to use this particular classin order to implement finalization scheme. VM refers only to WeakFinalizationList class. In this way, my class and its implementation can serve as an example for implementing various finalization actions, which may differ from this one, provided by default for use by weak registry.Once initialized, my instance should: - point to particular list (an instance of WeakFinalizationList), - next should be nil - executor or multiple executors initialized - weak reference slot should point to some object of interestAt the moment, when object, referenced weakly, become garbage, VM checks if its fist instance variable is an instance of WeakFinalizationList.If it so, then it adds a given object to this list, and also links the tail of list through 'next' instance variable. So, as a result of garbage collection, a list will contain all objects, which had weak references to garbage collected objects. It is a responsibility of application to manage the instances of WeakFinalizationList's , as well as clear this list before the next garbage collection.As a consequence of that you can: - use multiple different lists and manage them differently in order to react differently when some objects became garbage - you are not obliged to handle/clear the list(s) immediately after GC. You can clean up them periodically. - you can implement own kind of weak referencing object(s), which could use same finalization, provided by newer VMs.VM requires only that an object with weak reference having at least two instance variables,and its first instance variable points to instance of WeakFinalizationList. Everything else is optional."
"GLMWrapper","The GLMWrapper is a browser that has only one pane and that is typically used as a placeholder.The pane takes only entity as input."
"ConnectionClosed","Signals a prematurely closed connection."
"GLMMorphicFastTreeRenderer","I am a Morphic renderer for a GLMFastTreePresentation.Description--------------------I use a GLMFastTreeDataSource to manage the data of the tree."
"SmallInteger","My instances are 31-bit numbers, stored in twos complement form. The allowable range is approximately +- 1 billion (see SmallInteger minVal, maxVal)."
"FreeTypeSettings","Settings for FreeType"
"SharedQueueTest","SUnit tests for shared queues"
"RubCharacterScanner","I scan characters"
"FormTest","Various tests for class form."
"RBMethodSourceContainsLinefeedsRule","Pharo code should not contain linefeed characters."
"MorphTreeMorphMultipleSelection","Multiple selections in a morphic based tree"
"SocketAddress","I represent a socket (network) address consisting of a host internet address and a port number.  My contents are opaque and cannot be interpreted directly.  See the accessing protocol for methods that retrieve the information I contain."
"BaseSlot","I am a hidden non-virtual slot that the virtual slots BooleanSlot and PropertySlot store into.They, when a class is created containing it, makes sure that there is one slot of me defined. When the last virtual slot is removed, I am removed."
"GTUnprintableObjectTest","GTUnprintableObjectTest is a test that checks that print string does not trigger an error in the inspector."
"CurveWorkshop","An example from a workshop"
"SelectBrowser","A simple selection browser."
"RBRemoveClassVariableRefactoring",""
"TextLink","A link in text referring to class and methods. "
"MethodClassInitializeAction","Action when the method is a class initialize method"
"MCKomitSubmitter","I am a class dedicated to the transformation of a Komit object into a MCCommit and its submission"
"FLNegative32SmallIntegerCluster","A cluster of unsigned int 32bit"
"FLNegative24SmallIntegerCluster","A cluster of unsigned int 24bit"
"SettingNode","A SettingTreeNode is used by a SettingCollector as a node for setting trees. Built trees can be viewed by a SettingBrowserInstance Variables	contents:		<Collection of SettingTreeNode>	parentNode:		<SettingTreeNode or nil>contents	- the childrenparentNode	- the parent or nil if the node is a root"
"DummySoundSystem","A BeepingSoundSystem is a simple sound system just doing beep and niling everything else. "
"FTTreeDataSource","I am a data source to diplay tree in a FastTable.Description-------------------------------------------------I receive  a collection of objects and a block. The collection of objects will be the base of the tree.An  alternative is to pass a FTRootItem to myself.The block is use to calculate the children of the nodes. (More detail at the bottom)Since the search in Tree is can be complex you can customize it via the #searchStrateagy:. (See Public APIʦor more info.) I use FTTreeItem to manage my elements and I am use by a FTFastTable.Public API and Key Messages-------------------------------------------------- #roots: aCollection children: aBlock         A constructor to build the FTTreeDataSource  	- #maxDepth         Set the maxDepth to diplay on the Tree.  Roots items are at depth 0.- #searchStrategy:          Can take in parameter #default, #rootsOnly, #allItems.                #default is selected by default, it will search/filter the tree for all visible rows.                      #rootsOnly will search/filter only the first level of the tree               #allItems will search/filter all the Tree and open the needed items. BEʃAREFUL ! YOUʓHOULDʎOTʕSEʔHISʉFʊYOURʔREEʃANʈAVEʁNʉNFINITYʏFʃHILDREN! Example-------------------------------------------------	| ds |		ds := FTTreeDataSource roots: (ProtoObject allSubclasses sort: [ :a :b | a asString < b asString ]) children: [ :item | item subclasses sort: [ :a :b | a asString < b asString ] ].		ds maxDepth: 4;	searchStrategy: #allItems.		FTTableMorph new		extent: 200 @ 400;		dataSource: ds;		explicitFunction;		openInWindow		Internal Representation and Key Implementation Points.-------------------------------------------------    Instance Variables	childrenBlock:		I am a block use to generate the children of the Items. I can have 3 arguments: the current Item,   the collection of roots items and the depth of the item.	items:		I am a collection of FTTreeItem that old the items of the first level of the tree.	maxDepth:		I am an Integer that represent the max depth to dispaly.  If I am nil I display everything	searchStrategy: 	 	I am a symbole to know what kind of search/filter strategy I need to apply.			    Class Variables	SearchStrategies 		I am a Dictionary that map a Symbole (see searchStrategy) with a class that can search through a dataSource.  "
"Form","A rectangular array of pixels, used for holding images.  All pictures, including character images are Forms.  The depth of a Form is how many bits are used to specify the color at each pixel.  The actual bits are held in a Bitmap, whose internal structure is different at each depth.  Class Color allows you to deal with colors without knowing how they are actually encoded inside a Bitmap.	  The supported depths (in bits) are 1, 2, 4, 8, 16, and 32.  The number of actual colors at these depths are: 2, 4, 16, 256, 32768, and 16 million.	Forms are indexed starting at 0 instead of 1; thus, the top-left pixel of a Form has coordinates 0@0.	Forms are combined using BitBlt.  See the comment in class BitBlt.  Forms that repeat many times to fill a large destination are InfiniteForms.	colorAt: x@y		Returns the abstract Color at this location	displayAt: x@y		shows this form on the screen	displayOn: aMedium at: x@y	shows this form in a Window, a Form, or other DisplayMedium	fillColor: aColor		Set all the pixels to the color.	edit		launch an editor to change the bits of this form.	pixelValueAt: x@y	The encoded color.  The encoding depends on the depth."
"SDL_ControllerDeviceEvent","SDL2 library structure representing a controller device event data."
"AthensPathSegmentConverter","this class is subject of changes/removal. do not use it."
"FailingTestResourceTestCase","SUnit tests for failing test resources"
"OSTouchTwoFingersRotationEndEvent","Two fingers had stopped to rotate"
"GLMPagerSynchronizeScrollAnnouncement",""
"LessonTestInstanciation","SUnit tests for lessons"
"IRPrimitive","I represent a primitive.  I am more than just a number if I am a named primitive.Structure: num	<Integer>	Primitive number. spec	<Object>		Stored in first literal when num is 117 or 120."
"MetacelloSymbolicVersionMethodSpec",""
"GTSpotterBrickDarkThemer",""
"ClassModificationPropagation","I represent a modification in a class that is produced because of a change in one of its superclasses. This is called a propagation."
"JoinSide",""
"RubTextEditor","I represent the editor for plain text, I do the operations related to plain text"
"MustBeBooleanTests",""
"FinderPlugin","I show the finder bar within Nautilus"
"AuthorTest",""
"ListModel","A ListComposableModel is an applicative model which handle a basic list.| t |t := ListModel new.t openWithSpec.t items: (Smalltalk allClasses).self example| t |t := ListModel new.t openWithSpec.t sortingBlock: [:a :b| a name > b name].t items: (Smalltalk allClasses).| t |t := ListModel new.t openWithSpec.t filteringBlock: [:col | col select: [:each | each name beginsWith: 'Zn']].t sortingBlock: [:a :b| a name > b name].t items: (Smalltalk allClasses)."
"RGElementDefinition","RGElementDefinition is the abstract class for representing elements of a class-alike definition (i.e., methods, variables, comment).parent holds the RGClassDefinition or RGMetaclassDefinition defining this element.		Now a RingEntityDefinition offers two APIs: one that is generic and works for all the source code entities and this is the one we just presented: parent, parentName and realParent. Having such interface is important to build generic tools that could manipulate any entities in a polymorphic way (yes no isKindOf: everywhere).In addition, a ring method definition offers a specific interface that should only be used when you know that you are solely manipulatespecific entity such as class element: method definition, class comment, and variables. Here is the equivalence table	realParent 				realClass	parent					ringClass	parentName			className	For example for a methodDefinition we will have the following:GENERIC API------------------* To access the ring class definition name, use parentName	aRGMethodDefinition parentName	Example:	(Point>>#dist:) asRingDefinition parentName		->  #Point		* If you have a complete model where classes and methods are ring definition, to access the ring class definition , use parent	aRGMethodDefinition parent	Example:	aRGMethodDefinition(Point>>#dist:) parent		->  aRGClassDefinition(Point)		* If you want to access the smalltalk class that contains the compiledMethod that is represented by a ringMethodDefinition, use realParent	aRGMethodDefinition realParent	Example:	(Point>>#dist:) asRingDefinition realParent		->  Point		CLASS Element specific API------------------------------------------* The message class returns the class of the object :). Yes as you see we could not use class and className because class is already used to refer to the class of the object.Example:	(Point>>#dist:) asRingDefinition class		->  RingMethodDefinition		* The message className returns the name of the ring class defining the reingMethodDefinition.Example:	(Point>>#dist:) asRingDefinition className		->  #Point				* If you have a complete model where classes and methods are ring definition, to access the ring class definition , use parent	aRGMethodDefinition ringClass	Example:	aRGMethodDefinition(Point>>#dist:) ringClass		->  aRGClassDefinition(Point)				* If you want to access the smalltalk class that contains the compiledMethod that is represented by a ringMethodDefinition, use realClass	aRGMethodDefinition realClass	Example:	(Point>>#dist:) asRingDefinition realClass		->  Point"
"IRStackCount","This keeps track of the stack count for the BytecodeGenerator."
"DynamicComposableModel","I'm a compsable model with a dynamic behavior for managing subwidgets and the value holder communicates with them.The idea is that instead of having a fix set of valueHolders controlling various aspects of the model. I have a dioctionary to hold such elements.I'm specializing doesNotUnderstand: so that the programmer can simply use accessors to access my dynamic elements.  "
"ManifestCollectionsSupport","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GLMExpanderMorphicTest",""
"RubCancelEditRequestedInModel","I am raised when the edits are canceled in the model side"
"TimedOut","I am signalled by #duration:timeoutDo: if the receiving block takes too long to execute.I am signalled by a watchdog process spawned by #duration:timeoutDo: and caught in the same method. I am not intended to be used elsewhere."
"RePriorInvocationCritic","The critic tells that a required message is missing prior to the one in question"
"FTEasyListDataSource","I'm a datasource who works with FTEasyListMorph.I receive blocks to provide my contents. "
"FFIFunctionSpec","I am used to hold a parsed function signature, describing a C function.Since all C functions having return type, arguments and name (unless it anonymous one), same structure can be used to hold an information about it in my instances.However, what objects used to represent types and arguments is up to code generator."
"WeakOrderedCollection","I am just like an OrderedCollection except that I hold my objects weakly.In use, be aware that objects only referenced by me are not ""removed"" (like in OrderedCollection), but merely nilled. So guard against nils when iterating/accessing, and don't expect #size to represent the number of objects I hold. For more details, read my tests in WeakOrderedCollectionTest. "
"GLMFastTableDataSource","I'm a model datasource to handle glamour fast table presentations.Description --------------------I am a GLMFastListDataSource that can also manage multi columns.I work with a GLMFastTablePresentation and a GLMMorphicFastTableRenderer. "
"GTSpotterHideHints",""
"TxBasicTextPosition","I am an abstract class, defining the protocol for a text position."
"SolidFillStyle","SolidFillStyle is a fill which represents a color for the BalloonEngine.Instance variables:	color	<Color>	The color to use.	pixelValue32 <Integer>	The cached pixel value to use."
"InstructionClientTest","This is the unit test for the class InstructionClient. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"GLMLiveLabelBrick","A GLMLiveLabelBrick is simple extended label brick that updates text every world step. Text logic can be set by sending textLogic: message to me.Instance Variables	textLogic:		<BlockClosure>textLogic	- defines text updating logic"
"LineSegment","This class represents a straight line segment between two pointsInstance variables:	start	<Point>	start point of the line	end		<Point>	end point of the line"
"MCRepositoryAuthorizationTest",""
"SUnitAPIDocumentation","SUnit API documentation for help system"
"MalTarjan","I implement the well known Tarjan's algorithm. My purpose is to find the strongly connected components (aka circuits /cycles) of a graph in O(m+n).See https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm for more details."
"FileSystemTreeTest","SUnit tests for a file system tree"
"MCGemstoneRepository","An explicit subclass of MCHttpRepository to provide a template for gemstone repositories."
"ImagePreviewMorph","Displays an image scaled to a fixed size along with a label describing the original dimensions."
"IdentityMorphTreeMorph","An IdentityMorphTreeMorph is a MorphTreeMorph which always check for identity between items"
"OCSpecialVariable","I model self, thisContext and super"
"LeafNode","I represent a leaf node of the compiler parse tree. I am abstract.	Types (defined in class ParseNode):	1 LdInstType (which uses class VariableNode)	2 LdTempType (which uses class VariableNode)	3 LdLitType (which uses class LiteralNode)	4 LdLitIndType (which uses class VariableNode)	5 SendType (which uses class SelectorNode).Note that Squeak departs slightly from the Blue Book bytecode spec.In order to allow access to more than 63 literals and instance variables,bytecode 132 has been redefined as DoubleExtendedDoAnything:		byte2				byte3			Operation(hi 3 bits)  (lo 5 bits)	0		nargs			lit index			Send Literal Message 0-255	1		nargs			lit index			Super-Send Lit Msg 0-255	2		ignored			rcvr index		Push Receiver Variable 0-255	3		ignored			lit index			Push Literal Constant 0-255	4		ignored			lit index			Push Literal Variable 0-255	5		ignored			rcvr index		Store Receiver Variable 0-255	6		ignored			rcvr index		Store-pop Receiver Variable 0-255	7		ignored			lit index			Store Literal Variable 0-255	This has allowed bytecode 134 also to be redefined as a second extended send	that can access literals up to 64 for nargs up to 3 without needing three bytes.	It is just like 131, except that the extension byte is aallllll instead of aaalllll,	where aaa are bits of argument count, and lll are bits of literal index."
"TxCharacterStream","I am a specialized read-only stream for extracting  characters out of text. Text may hold any objects, not just characters. I will filter out those that can not be represented by characters.Please note: modifying the text while using gives undefined results, since any modification of text invalidates all external positions. Thus, special care must be taken to reinitialize my position to a valid  position. Handling the position updates is, of course, not the responsibility of this classs, since it cannot know, nor predict, what kind of modification it may be and where it will occur and how it will affect the position it holds.The only responsibility of this class is to provide a convenient stream for reading character data from text."
"FileSystemVisitor","I am an abstract superclass for objects that can perform operations on directory trees. My subclasses implement the visitor protocol, and process filesystem nodes shown to them by guides."
"DAInheritanceDependency","A PDInheritanceDependency is an inheritance dependency between two packages.	superclass:		the superclass that includes in the target PDPackag"
"RBMethod",""
"ExceptionSetWithExclusions","I am ExceptionSetWithExclusions, an ExceptionSet that explicitely does not handle a number of exclusion Exceptions."
"SDL2EventHandler","I am an interface (abstract) used for visiting the raw SDL2 events. "
"IndexedSlot","By default each Slot corresponds to an instance variable and vice versa. Hence there is a Slot for each instance variable."
"ExampleSlotWithDefaultValue","NOTE: this is an example of what can be done with Slots. It is *not* an example of what *should* be done with Slots.I am showing how a slot can initialize itself on object creation.#name => ExampleSlotWithDefaultValue default: 5"
"Stream","I am an abstract class that represents an accessor for a sequence of objects. This sequence is referred to as my ""contents""."
"MetalinkChanged",""
"RenderBugsTest","A RenderBugz is an infinite recursion bug test for TransformationMorphs.In 3.9 (7067) and before, when TransformationMorph has no rendee there are several methods that will infinitely recurse until manually stopped or the image runs out of memory.So far the ones I've caught are the getters and setters for heading and forwardDirection.So there  are tests for them here.Ideally there would be a way to run a test against a stopwatch to catch endless recursion.Found it. Now incorperated. And the tests should be both save to run and cleanup after themselves even when they fail. So far we have not tested the normal cases of rendering working. I will leave that as a separate task for another time. So this is an automatic test when the bugs are fixed and interactive (crash) tests when the bugs are present.Instance VariablesRevision notes. wiz 5/15/2008 22:58When running tests from the TestRunner browser the test would sporadically fail.When they failed a transfomation morph would be left on the screen and not removed by the ensureBlock. So I changed things to fall under MorphicUIBugTests because that had a cleanup mechansizm for left over morphs.I also added one routine to test for time and one parameter to determine the time limit.To my surprise doubling or tripling the time limit still produced sporadic errors when the test is run repeatedly enough ( I am using a 400mz iMac. )  So now the parameter is set to 4. Things will probably fail there if tried long enough. At that point try 5 etc. I am reluctant to make the number larger than necessary. The tighter the test the more you know what is working.I also added a dummy test to check specifically for the timing bug. It fails on the same sporadic basis as the other test went the time parameter is short enough. This lends confidence to the theory that the timing difficulty is coming from outside the test. The sunit runner puts up a progress morph for each test. So the morphic display stuff is busy and probably also the GC."
"GLMMorphicTabbedRenderer",""
"NoNetworkError","Signals that no network was found. This could happen, e.g., on dial-up connection when no connection was established when Squeak tried to access it."
"TxCharacterSpan","I am the span which holds characters. Usually i am most often used span type (along with line separator)."
"GTSpotterProcessorLink",""
"FTRowLayout","I'm a layout specifphic for rows in a fast table.I simplify my parent (in an attept to achieve speed), but most important, Itake into account cells width."
"SHA256Test","SHA256Tests contains unit tests for SHA256.Test vectors taken fromhttp://en.wikipedia.org/wiki/Sha256http://csrc.nist.gov/publications/fips/fips180-2/fips180-2withchangenotice.pdf"
"STONWriter","STONWriter serializes objects using the Smalltalk Object Notation format. Customization options are:- prettyPrint <Boolean> default is false	if true, produce pretty printed output- newLine <String> default is String cr	what sequence to use for EOL- asciiOnly <Boolean> default is false   if true, use \u escapes for all non-ASCII characters   most common control characters are still escaped- jsonMode <Boolean> default is false	if true, the follow changes occur	- strings are delimited with double quotes	- nil is encoded as null	- symbols are treated as strings	- only STON listClass and STON mapClass instances are allowed as composite objects	it is wise to also use either #error or #ignore as referencePolicy to avoid references- referencePolicy <#normal|#ignore|#error> default is #normal	if #normal, track and count object references and use references to implement sharing and break cycles	if #error, track object references and signal STONWriterError when a shared reference is encountered	if #ignore, don't track object references which might loop forever on cycles - keepNewLines <Boolean> default is false	if true, any newline sequence CR, LF or CRLF inside strings or symbols will not be escaped 	but will be written as the newline EOF convention	Note that in default STON mode I only use the following named character escapes: \b \t \n \f \' and \\ while in JSON mode \' is replaced by \"""
"GTSpotterExceptionMock4Filter",""
"RBInlineTemporaryRefactoring",""
"False","False defines the behavior of its single instance, false -- logical negation. Notice how the truth-value checks become direct message sends, without the need for explicit testing.Be aware however that most of these methods are not sent as real messages in normal use. Most are inline coded by the compiler as test and jump bytecodes - avoiding the overhead of the full message sends. So simply redefining these methods here will have no effect."
"FTFilterFunction","I define a filter function for a table. I respond to any alphanumeric element and I add a filter box to the  owner table. In general, my entry point is through #keyStroke:, because I intend to react to keyboard inputs in the owner table.I save an initial data source if the user want to see some result already filter.I use a semaphore in order to let a delay before I filter the table. With this the user is able to type more than 1 letter before I filter./!\ To use me the data source must implement the method #newDataSourceMatching: aRegex"
"ReCriticBanned","Announced when a critic gets banned."
"PreDebugDoesNotUnderstandAction","A PreDebugDoesNotUnderstandAction adds the DoesNotUnderstandDebugAction debugging actions to the pre debug window. When executed, it will further close the pre debug window and open the full debugger. Instance Variables	preDebugWindow:		<Object>preDebugWindow	- xxxxx"
"FFIFunctionParser","I parse function specs."
"ImageFillStyle","Simple fillstyle that draws a (potentially translucent) form at the specified origin. Direction and normal are unused."
"RBRemoveClassChange",""
"ListItemWrapper","Contributed by Bob Arning as part of the ObjectExplorer package."
"GTHelpDebugAction","I open a HelpBrowser for the currently active debugger.To specify a help topic a debugger has to override the class side method #helpClass."
"OCShadowVariableWarning","I get signalled when a variable in a block or method scope shadows a variable of the same name in an outer scope.  The default action is to allow it."
"KMCategory","I am a keymap category.  I represent a set of keymaps that can be attached to a morph, so morphs can share my keymaps."
"TextFontReference","A TextFontReference encodes a font change applicable over a given range of text.  The font reference is absolute:  unlike a TextFontChange, it is independent of the textStyle governing display of this text."
"FLSimpleCollectionCluster","A FLSimpleCollectionCluster is a special optional cluster that rather than using the default (variable object) serialization, uses #do: to iterate objects and #add: during materialization. So far we use it for Set, IdentitySet and OrderedCollection."
"ChooseDropListDialogWindow","Message dialog containing a drop list for selection of an item."
"ConnectionRefused","Signals that a connection to the specified host and port was refused.	host		host which refused the connection	port		prot to which the connection was refused"
"BlockStartLocator","Locates the start of a block"
"ZnSignalProgress","I am ZnSignalProgress.I am a DynamicVariable and a ProcessSpecificVariable.I can be used to indicate that Zn related code down the call stack has to signal HTTPProgress, for example:ZnSignalProgress 	value: true 	during: [ ^ ZnClient new get: 'http://zn.stfx.eu/zn/small.html' ]"
"GrafPort","Provides extended Graphic support like translucency"
"SugsMockContext","I'm a mock context with lot of stuff hardcoded.I'm used in the tests to make easier the configuration for detecting diferents context."
"GTSpotterStepBreadcrumbItem",""
"GLMMorphicRubricHighlightedTextRenderer",""
"RBParseTreeLintRule","A RBParseTreeLintRule is a rule that is expressed using a parse tree matcher on a method AST."
"RxsPiece","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A piece is an atom, possibly optional or repeated a number of times.Instance variables:	atom	<RxsCharacter|RxsCharSet|RxsPredicate|RxsRegex|RxsSpecial>	min		<Integer>	max		<Integer|nil> nil means infinity"
"Job","A Job is a task to run and potentially notified to the user.  [:job | job title: 'Let us get started'.	1 to: 10 do: [:each | 		job 			progress: (0.1 * each); 			title: 'Youpi ', each printString.		(Delay forMilliseconds: 100) wait. 		] ]  asJob run"
"ScrollPane","The scroller (a transform) of a scrollPane is driven by the scrollBar.  The scroll values vary from 0.0, meaning zero offset to 1.0 meaning sufficient offset such that the bottom of the scrollable material appears 3/4 of the way down the pane.  The total distance to achieve this range is called the totalScrollRange.Basic clue about utilization of the ScrollPane class is given in:	ScrollPane example1.	ScrollPane example2."
"KMPartialMatch","A KMPartialMatch is an announcement raised when a partial match is completed"
"AbstractCache","I am Cache.I am an abstract class.I am a limited cache holding onto key/value pairs.My primary interface is #at:ifAbsentPut: which takes two arguments: a key and a block. Either the key is found (cache hit) and its value is returned, or the key is not found (cache miss). If the latter case, block should compute a new value to cache. Because block takes the key as optional argument, you can specify a factory style argument as well. With an explicit factory specified, you can also use #at: to access me.For each addition to the cache, a weight is computed by #computeWeight (a selector or block) and added to #totalWeight. When #totalWeight is no longer below #maximumWeight, the least recently used item of the cache is evicted (removed) to make room. The default #computeWeight returns 1 for each value, effectively counting the number of entries. The default #maximumWeight is 16.I count hits and misses and can return my #hitRatio.Optionally, but not by default, I can be configured so that it is safe to access me from different threads/processess during my important operations. See #beThreadSafe."
"GLMNoStrategy","This is the default strategy that does nothing (an implementation of the Null pattern)"
"KomitDirectoryRemote","I encapsulate a gemstone repository"
"UnusedVariable","Notify about an unused temporary variable"
"RBInlineMethodTest",""
"MCFileTreePackageStructureStWriter","Writer for a package structure"
"Decompiler","I decompile a method in three phases:	Reverser: postfix byte codes -> prefix symbolic codes (nodes and atoms)	Parser: prefix symbolic codes -> node tree (same as the compiler)	Printer: node tree -> text (done by the nodes)	instance vars:	constructor <DecompilerConstructor> an auxiliary knowing how to generate Abstract Syntax Tree (node tree)	method <CompiledMethod> the method being decompiled	instVars <Array of: String> the instance variables of the class implementing method	tempVars <String | (OrderedCollection of: String)> hold the names of temporary variables (if known)		NOTE: POLYMORPHISM WILL BE RESOLVED IN #initSymbols:	constTable <Collection of: ParseNode> parse node associated with byte encoded constants (nil true false 0 1 -1 etc...)	stack <OrderedCollection of: (ParseNode | String | Integer) > multipurpose...	statements <OrderedCollection of: ParseNode> the statements of the method being decompiled 	lastPc <Integer>	exit <Integer>	caseExits <OrderedCollection of: Integer> - stack of exit addresses that have been seen in the branches of caseOf:'s	lastJumpPc <Integer>	lastReturnPc <Integer>	limit <Integer>	hasValue <Boolean>	blockStackBase <Integer>	numLocaltemps <Integer | Symbol> - number of temps local to a block; also a flag indicating decompiling a block	blockStartsToTempVars <Dictionary key: Integer value: (OrderedCollection of: String)>	tempVarCount <Integer> number of temp vars used by the method	lastJumpIfPcStack <OrderedCollection of: Integer> the value of program counter just before the last encountered conditional jumps"
"DoubleLinkedList","I am DoubleLinkedList, an ordered list data structure consisting of objects, most likely DoubleLinks or something compatible, connected to each other by forward and backwards links.Note that some of my API deals with the elements that I hold, like any other collection, while some of my API references the links that I use internally (those usually have the word link in the selector name). Some methods accepts both values or links as argument (like #add:). Because I expose some if my internal structure, I can be broken quite easily."
"IntegerDigitLogicTest","SUnit test to test digit logic of integers"
"SmallDictionaryTest","SUnit tests for small dictionaries"
"TestSkip","I mark a test as being skipped."
"TabManagerModelTest",""
"RePropertyAction","I am an action that appears in the Nautiluas qa plugin next the the item's title.icon - a Form that will appear on the button (green square by default)description - the description that will be present on popup on howeraction - a two (ortional) parameter block that is evaluated with the critic and the current code entity (class, method…) when the button is pressed No newline at end of file"
"RBProtectInstanceVariableRefactoring",""
"MorphicImageAdapter","I am the bridge between an ImageModel and a AlphaImageMorph"
"LongTestCase","I'm a TestCase which takes time to run. I can be disabled using #doNotRunLongTestCases and enabled again using #runLongTestCases.Tests that are long should be subclasses of myself.I also provide a setting for the SettingsBrowser"
"GLMErrorPopper","I am a popper that displays an error message.GLMErrorPopper simpleErrorPopper"
"GTBytecodeBrowser","This is a simple browser that displays bytecode and previews each node on the source code.Example:self openOn: (self>>#compose) "
"SugsInline","I know how to inline the method from a message"
"MergeDiffMorph",""
"DateAndTimeTest","SUnit tests for date and time"
"NNavDirectionPreviousSelection","I know how to go to the previous selection in the text"
"MCDataStream","This is the save-to-disk facility. A DataStream can store one or more objects in a persistent form.To handle objects with sharing and cycles, you must use aReferenceStream instead of a DataStream.  (Or SmartRefStream.)  ReferenceStream is typicallyfaster and produces smaller files because it doesn't repeatedly write the same Symbols.Here is the way to use DataStream and ReferenceStream:	rr := ReferenceStream fileNamed: 'test.obj'.	rr nextPut: <your object>.	rr close.To get it back:	rr := ReferenceStream fileNamed: 'test.obj'.	<your object> := rr next.	rr close.Each object to be stored has two opportunities to control what gets stored.  On the high level, objectToStoreOnDataStream allows you to substitute another object on the way out.  The low level hook is storeDataOn:. The read-in counterparts to these messages are comeFullyUpOnReload and (class) readDataFrom:size:. See these methods for more information about externalizing and internalizing.NOTE: A DataStream should be treated as a write-stream for writing.  It is a read-stream for reading.  It is not a ReadWriteStream."
"SmallCogInitialState","Initial state of a small cog turning animation"
"PragmaCollector","A PragmaCollector is used in order to collect some Pragma instances. A PragmaCollector makes use of SystemChangeNotifier event notifications in order to maintain its contents up-to-date according to its filter: when a method is added, removed or updated, if the method is defined with a pragma which is acceptable according to its filter, then the collector contents is updated. A PragmaCollector makes use of an announcer in order to notify all registered listeners when a pragma is added, removed or updated. A PragmaAnnouncement is announced when a Pragma is added, removed or updated. Corresponding announcement classes are, respectiveley, PragmaAdded, PragmaRemoved and PragmaUpdated. Explore the result of the expression below. In the collected instance variable should be stored all pragmas of the system:---------------------------(PragmaCollector filter: [:pragma | true]) reset---------------------------In the following example, collected pragma are thoses with the 'primitive:' keyword (<primitive:>)---------------------------(PragmaCollector filter: [:prg | prg keyword = 'primitive:']) reset---------------------------Instance Variables		announcer:		<Announcer>		collected:		<Collection>	filter:			<Block or MessageSend>				announcer	the announcer which is used to announce the adding, the removing or the updating of a method with an acceptable pragma declarationcollected			the current collection of Pragma	filter	a block or a message send which is used in order to filter the pragma. This is a one argument valuable. When evaluated, the candidate pragam is passed as argument and the result must be a boolean. 	"
"MouseWheelEvent","A mouse event generated by intercepting the keyboard events (ctrl+up/down arrow) generated by the VM in response to mouse wheel activity."
"OCASTSemanticAnalyzer","I visit each node in the abstract syntax tree while growing and shrinking a scope chain. Each method and block node is linked with its corresponding scope object, and each variable def and ref is linked with its corresponding OCVariable. Exceptions are raised for undefined variable references and so on (see subclasses of OCSemanticWarning)."
"GLMAnnouncer","This is a specialization of the Announcer. The main added functionality is the ability to suspend the announcements from this announcer."
"SettingRegexpFilter","A SettingRegexpFilter is SettingFilter which makes use of a regular expression in order to keep or not a SettingHandler.Instance Variables	regexp:		<String>regexp	- a regular expression string"
"ChunkReadStream","I am a read stream that reads and returns chunks of code. That is, pieces of text separated by!!symbols"
"PluggableDialogWindow","Pluggable form of dialog window supporting custom selector on model for applying changes along with configurable content and buttons."
"TextEntryDialogWindow","Single-line text entry dialog."
"SDL_MouseButtonUpEvent","SDL2 library structure"
"AbstractMethodConverter","An AbstractMessageConverter is a wrapper used to switch which information to retrieve from a method.This way, you can avoid switch case, you just have to use set the correct filter"
"GuideTest","Common superclass for tests of guidance through the filesystem"
"MCDefinitionIndex","I'm a simple container of MCDefinitions which can be added or removed."
"EyeMorphViewer","A simple inspector view that displays a morph"
"FloatReferencesRule","The rule detects if any Float system classes are refferenced by an AST"
"ItemNode","An item in the group UI"
"EyeMethodContextInspector","I am an eye inspector specified for MethodContext"
"MockExceptionWithPassAction","I am Exception used in the Weak collection tests which has a custom pass action.Instead of using the Exception's default pass mechanism I will call a customized block."
"TraitMethodDescription","Used by TraitComposition to encapsulates a collection of methods for one particular selector when querying for changes. According to the number and kind of those methods a provided method exists, there is a conflict or there are no provided nor conflicting methods at all. I provide the interface to query for those situations, e.g., effectiveMethod returns the provided method or the conflict marker method."
"GLMActionTest",""
"GLMMorphicPharoMethodRenderer",""
"PragmaSetting","A PragmaSetting is a holder for a setting. A setting is declared in a class method which contains a pragma (as examples, <menu> or <setting>). Settings can be collected on the fly by a PragmaCollector and browsed by a SettingBrowser. Settings are organized in trees.Instance Variables	allowedInStyle:		<Object>	description:		<Object>	dialog:		<Object>	icon:		<Object>	label:		<Object>	name:		<Object>	order:		<Object>	ordering:		<Object>	precondition:		<Object>	target:		<Object>	targetSelector:		<Object>allowedInStyle	- xxxxxdescription	- xxxxxdialog	- xxxxxicon	- xxxxxlabel	- xxxxxname	- xxxxxorder	- xxxxxordering	- xxxxxprecondition	- xxxxxtarget	- xxxxxtargetSelector	- xxxxx"
"GroupAlreadyExists","A GroupAreadyExists is an exception raised when a group with the provided name already exists"
"RemoteString","My instances provide an external file reference to a piece of text.  It may be the sourceCode of a method, or the class comments of a class.The changes file or file-in file usually has a chunk that is just the source string of a method:max: aNumber	^ self > aNumber ifTrue: [self] ifFalse: [aNumber]!I can return either a String or a Text.  Some a chunk is followed by a second chunk (beginning with ]style[) containing style information.  The encoding is like this:max: aNumber	^ self > aNumber ifTrue: [self] ifFalse: [aNumber]!]style[(14 50 312)f1,f1b,f1LInteger +;i!Allowed TextAttributes are TextFontChange, TextEmphasis, TextColor, TextDoIt, TextKern, TextLink, TextURL.  TextFontReference and TextAnchor are not supported.See PositionableStream nextChunkText and RunArray class scanFrom:."
"EmbeddedMenuMorph","Menu designed to be embedded in another morph rather than popped up directly."
"MockSettings","I contains some system settings that are used for testing."
"EvaluateCommandLineHandler","Usage: eval [--help] [--save] [ --no-quit ] <smalltalk expression>	--help                   list this help message	--save                   save the image after evaluation of the expression	--no-quit                if specified, the image continues runing after	                         evaluating the <smalltalk expression>	<smallltalk expression>  a valid Smalltalk expression which is evaluated and 	                         the result is printed on stdoutDocumentation:A CommandLineHandler that reads a string from the command line, outputs the evaluated result and quits the image. This handler either evaluates the arguments passed to the image:	pharo Pharo.image eval  1 + 2	or it can read directly from stdin:	echo ""1+2"" | $PHARO_VM my.image evalImportant: don't manually save the image at the end of the expression by calling something like 'Smalltalk snapshot: true andSave: true'! Instead, use the safer --save option."
"FTPClient","A minimal FTP client program.  Could store all state in inst vars, and use an instance to represent the full state of a connection in progress.  But simpler to do all that in one method and have it be a complete transaction.Always operates in passive mode (PASV).  All connections are initiated from client in order to get through firewalls.See ServerDirectory openFTP, ServerDirectory getFileNamed:, ServerDirectory putFile:named: for examples of use.See TCP/IP, second edition, by Dr. Sidnie Feit, McGraw-Hill, 1997, Chapter 14, p311."
"TextStyle","A textStyle comprises the formatting information for composing and displaying a unit (usually a paragraph) of text.  Typically one makes a copy of a master textStyle (such as TextStyle default), and then that copy may get altered in the process of editing.  Bad things can happen if you do not copy first.Each of my instances consists of...	fontArray		An array of StrikeFonts	fontFamilySize	unused	lineGrid			An integer; default line spacing for paragraphs	baseline			An integer; default baseline (dist from line top to bottom of an 'a')	alignment		An integer; text alignment, see TextStyle alignment:	firstIndent		An integer; indent of first line in pixels	restIndent		An integer; indent of remaining lines in pixels	rightIndent		An integer; indent of right margin rel to section	tabsArray		An array of integers giving tab offsets in pixels	marginTabsArray	An array of margin tabs	leading			An integer giving default vertical line separationFor a concrete example, look at TextStyle default copy inspect"
"VSPackageNode","Class used to display packages in a tree."
"GLMPanePort","A port that belongs to a pane.Bound ports have a few special characteristics in comparison to their superclass. For one, they don't just assign a value to themselves using #value: but rather generate a transmission that set the value so that the pane can handle the transmission and forward it to other ports if necessary, depending on the policy of the containing browser."
"FFIInt16","I'm an signed short type."
"MCSliceInfo","A slice info"
"GLMExpanderLabelNodeModel",""
"MCMockClassF",""
"RGMetatraitDefinition","RGMetatraitDefinition is a concrete representation of metaclasses of traits"
"MetacelloMCNamelessProjectSpec",""
"ZnHtmlOutputStreamTests",""
"ZnLineReader","I am ZnLineReader and I help reading CRLF terminated lines from a stream.I can work on ascii and binary streams doing conversions as necessary.I limit lines to a maximum length.I work with a reusable buffer.Part of Zinc HTTP Components."
"InflateStream","This class implements the Inflate decompression algorithm as defined by RFC1951 and used in PKZip, GZip and ZLib (and many, many more). It is a variant of the LZ77 compression algorithm described in[LZ77] Ziv J., Lempel A., ""A Universal Algorithm for Sequential Data Compression"", IEEE Transactions on Information Theory"", Vol. 23, No. 3, pp. 337-343.[RFC1951] Deutsch. P, ""DEFLATE Compressed Data Format Specification version 1.3""For more information see the above mentioned RFC 1951 which can for instance be found at	http://www.leo.org/pub/comp/doc/standards/rfc/index.htmlHuffman Tree Implementation Notes:===========================================The huffman tree used for decoding literal, distance and length codes in the inflate algorithm has been encoded in a single Array. The tree is made up of subsequent tables storing all entries at the current bit depth. Each entry in the table (e.g., a 32bit Integer value) is either a leaf or a non-leaf node. Leaf nodes store the immediate value in its low 16 bits whereas non-leaf nodes store the offset of the subtable in its low 16bits. The high 8 bits of non-leaf nodes contain the number of additional bits needed for the sub table (the high 8 bits of leaf-nodes are always zero). The first entry in each table is always a non-leaf node indicating how many bits we need to fetch initially. We can thus travel down the tree as follows (written in sort-of-pseudocode the actual implementation can be seen in InflateStream>>decodeValueFrom:):	table := initialTable.	bitsNeeded := high 8 bits of (table at: 1).		""Determine initial bits""	table := initialTable + (low 16 bits of (table at: 1)). ""Determine start of first real table""	[bits := fetch next bitsNeeded bits.			""Grab the bits""	value := table at: bits.						""Lookup the value""	value has high 8 bit set] whileTrue:[		""Check if it's leaf""		table := initialTable + (low 16 bits of value).	""No - compute new sub table start""		bitsNeeded := high 8 bit of value].		""Compute additional number of bits needed""	^value"
"LayoutClassScope","I am layout scope for classes."
"MetacelloStackCacheTestCase",""
"OSUnknownEvent","I am delivered , when driver don't knows how to interpret the event which comes from OS.Useful for debugging."
"GTSpotterRecorderOpenEvent","A GTSpotterRecorderOpenEvent  models the action of  opening Spotter.Instance Variables	timestamp:		<Object>timestamp	- xxxxx"
"PointArrayTest","SUnit Test for PointArray"
"UIThemeRegistry","Registry for UI themes"
"InputWidget","I am a generic widget far a user to enter a stringExample (printMe):	self example inspect."
"HelpBrowser","A HelpBrowser is used to display a hierarchy of help topics and their contents.Instance Variables	rootTopic: 		<HelpTopic>	window:			<StandardWindow>	 	treeMorph:		<PluggableTreeMorph>	contentMorph:		<Morph>			rootTopic	- xxxxxwindow	- xxxxxtreeMorph 	- xxxxxcontentMorph 	- xxxxx"
"BadEqualer","I am an object that doesn't always report #= correctly.  Used for testing the EqualityTester."
"GLMSystemWindow","This is the window in which the Glamour browsers are rendered in Morphic."
"InMidstOfFileinNotification","I am a Hack.  I am a notification used to know if the the current process is in the middle of a FileIn.  But I am used everywhere.  Probably I should be removed, but not now."
"MetacelloSpec",""
"WeakRegistry","This kind of WeakRegistry using a new VM feature,which allows a more robust finalization support.In contrast to old implementation, it doesn't spending linear time , checking what elements became garbage."
"ASTPluginMeaningOfLife","A simple example for a AST transforming compiler plugin.I replace 42 with a  'meaning of life'."
"RBClassNotReferencedRule","This smell arises when a class is not referenced either directly or indirectly by a symbol. If a class is not referenced, it can be removed."
"GLMDynamicPresentationTest",""
"KMPerInstanceTests",""
"GTSpotterExtensionSettings","This is a helper class that provides dynamically setting entries for all processors defined in the image. The user can use the settings browser to turn each processor on/off.To achieve this, the class side keeps track of disabledExtensions.As each setting requires selectors for setting/getting values, the class side implements a doesNotUnderstand: and maintains the disabledExtensions list."
"TestResource","Normally a test will set up all the objects it needs and tear them down again after it has run.  This self-containedness makes a test more robust.  Use TestResources only for objects that are needed by several tests and that are too 'expensive' (in time or otherwise) to recreate and destroy for each test.  A viable approach is to develop the code in MyTestCase's #setUp and #tearDown methods, then at some point refactor the code into the #setUp and #tearDown of a TestResource whose class is added to MyTestCase class>>resource method.TestResource uses the singleton pattern.  A TestResource class will set up a single instance of itself when first requested and tear it down again at the end of TestSuite>>run (or TestCase>>run, >>debug and >>debugAsFailure).  Normally, a TestResource, once setUp, remains active during the running of all remaining tests and is #reset after all tests have run.  For an exception, see subclass CompetingResource in SUnitResourcePatterns.  Users can choose to #reset a resource in the #tearDown of a test that alters it, sacrificing the performance gain of having a single #setUp of the resource for the certainty that other tests using it will not see the alterations.  Generally however, this should be the exception:  if you need to reset the resource for every test that uses it, its code should just be part of your test's #setUp and #tearDown code.To use, create a subclass of TestResource and override the following:	- TestCase class>>resources, to return a collection including the TestResource class, for all test case classes that need it		* a TestCase' resources are set up in the order returned and torn down in the reverse order	- TestResource class>>resources, if the resource itself always needs some other resource to be present before it can set up		* a TestResource's resource are set up before it and torn down after it, and are set up in the order returned and torn down in the reverse order	- TestResource>>setUp and tearDown, to define initial and final behaviour (just like a test)	- TestResource>>isAvailable, to return true if it is and false if it isn't (the framework calls this after setUp);  ideally, this call should not change the resource' state - that should be done in setUpTestResource implements the singleton pattern in its class-side #isAvailable and #reset methods.  Do not override these when creating specific resources;  unless you are developing a whole new pattern of use, it will always be correct to override instance-side #setUp, #tearDown and #isAvailable, and dangerous to override class>>isAvailable, class>>isAlreadyAvailable and class>>reset.Generally, users do not code interactions with a test's resources during the running of a test.  Code that reads a resource' values while leaving its state strictly alone is safe enough.  A test must leave a resource in a clean state:  always use #reset if a test must protect later-running tests from unsafe changes (and review whether in such a case a resource is the right thing to use in the first place).See my superclass' comment for assertion and logging information."
"PluggableTreeItemNode","Tree item for PluggableTreeMorph."
"ZnFastLineReader","I am ZnFastLineReader, a helper to efficiently read CR, LF or CRLF terminated lines from a character stream."
"ToManyRelationSlot","I'm a relation slot  that  describes  slots that contain collections."
"MethodModification","I collect and provide the information to update methods when a class changed."
"KomitMethod","I'm a komit object representing a change in a method.  I wrap an MC operation (addition/removal/definition)."
"RBExtractMethodTest",""
"CubeHelix","My instances represent a color gradient in the CubeHelix family.	CubeHelix new at: someValueBetweenZeroAndOneCubeHelix is a formula for color gradients which ensure a continuous increase in perceived intensity from black to white, with hue variations that increase  by following a tapered spiral around the diagonal of the RGB color cube. Converting the gradient back to grayscale produces a linear gradient.See http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/"
"IdentityTransform","Identity transformation"
"GLMWizardStep","A step in a wizard"
"RubLineNumberDisplayer","I am the displayer of line numbers in the text area"
"DummyPackageSelectedPlugin","A DummyPackageSelectedPlugin is a dummy plugin which displays the selected package"
"TabSelectorMorph","Row of tabs for a TabGroupMorph."
"MalGraphStructure",""
"HelpTopicListItemWrapper","This class implements a list item wrapper for help topics.Instance Variables"
"HelpHowToHelpTopicsFromCode","How to create help topics from code"
"AthensPath","This class represents an interface, which should be supported by all paths (special kind of shape) used for drawing with Athens framework.Path data organization is up to surface where it built,therefore paths are not interchangeable between different surfaces."
"RBChildrenToSiblingsTest",""
"RBUnwindBlocksRule","Move assignment out of unwind blocks.For example[[[[ statements. var := object ] ifCurtailed: block]]][[[ var := [ statements. 	    object] ifCurtailed: block]]]"
"RBCollectSelectNotUsedRule","Checks for senders of typical collection enumeration methods that return an unused result.For example, check that the result of a select: or detect: is used."
"AbstractCompiler","I define the public API of compilers that can be used as system compilers (e.g. overriding #compiler on the class side)."
"ZdcByteArrayManager","I manage the allocation and recycling of ByteArrays. For each size, I maintain up to limit instances, configurable using #limit:I never preallocate.I am threadsafe.My public API consists of just 2 messages: #byteArrayOfSize:zero: and #recyle:There is one global current instance for me, but I can be used as needed.	ZdcByteArrayManager current limit: 4.		ZdcByteArrayManager current limit: 0."
"AthensBorderStrokePaint","i am used to convert ComplexBorder (raised/inset) into paint, used in Morphic."
"GTDebuggerContextPredicate","I encapsulate a condition that can be verified against a Context.To add concrete conditions a subclass should be create that overrides the method #matchContext:Public API and Key Messages- #matches: - #hasMatched- #resultInstance Variablesresult:		the last value returned by matches:"
"WordLayout","I am a raw data layout that holds words (32 / 64 bit depending on the platform)."
"RBCompositeLintRule","A RBCompositeLintRule is a composite rule holding rules."
"DeleteVisitorTest","SUnit tests for class DeleteVisitor"
"MetacelloLoadData",""
"TabState","I represent the current state of a tab.This class is abstract so have a look at my subclasses to have a better overview.I have tree responsibilities:	- influence the rendering (color, border)	- point out if the state changement asked on my tab is relevant (trying to enable an enabled tab by example)	- provide the next state for each change (disable, enable, selected)"
"MetacelloCoreSymbolicVersionTest",""
"TxHighlightRendererTest",""
"FileDoesNotExist","I am raised when an operation is attempted on a file that does not exist. This includes cases where a file operation is attempted on a directory."
"DADependencyReport","I'm reporting dependencies of packages previously analysed byt the dependnecy checker."
"MetacelloProjectSpecGenerator",""
"GTPlayBindingDarkThemer",""
"TagMorphFactory","A TagMorph is a morph used to define some tags.It uses a rounded rectancle with a text inside.self example"
"RBRemoveMethodTest",""
"GLMBrickWrapper",""
"FFIBool","Bool type.Represented as single byte on C side."
"OrderedDictionaryTest","This class tests the OrderPreservingDictionary class using an empty dictionary, one with a single association and one with multiple associations."
"STCommandLineHandlerTest",""
"GTStepToBytecodeDebugAction","I am a debugging action for stepping to a selected bytecode."
"RBTemporaryToInstanceVariableTest",""
"AbstractNautilusPlugin","I'm the root of Nautilus plugins. You can get the list of Nautilus plugin using the Plugin Manager that you can find in the window menu (right menu on the window itself) of the Nautilus browser window. !! How to create Nautilus-PluginsHere we will give some brief explanations on how to create your own plugin. There are only two requirementsto create a Nautilus-Plugin:- the class should inherit from ==AbstractNautilusPlugin==- it should implement the method ==registerTo: aModel==[[[AbstractNautilusPlugin]]]!!! Announcement subscriptionThe method ==registerTo:== is used by the plugin to register itself to aModel announcements.[[[MyPlugin>>registerTo: aModel    aModel announcer   	 when: NautilusKeyPressed 	 send: #keyPressed: 	 to: self]]]In this example, the instance of ==MyPlugin== subscribes itself to ==NautilusKeyPressed==, andtell aModel's announcer to send the message  ==keyPressed== to the instance.So each time a key will be pressed in a Nautilus window the method ==keyPressed:== will be called.!!! DisplayIf you want your plugin to add a graphical widget to Nautilus you should override the ==display== method.This method should return the Morphic element you want Nautilus to display. By default the method returns nil tonotify Nautilus not to display anything.[[[MyPlugin>>display    morph := LabelMorph new contents: 'MyPlugin';        enabled: false; 		vResizing: #shrinkWrap; 		hResizing: #spaceFill; 		yourself.	^ morph]]]You can also redefine the following methods on the class side:- ==defaultPosition== defines the default position of the morph. Possible values are =={#top, #middle, #bottom, #none}==. The default value is ==#none==.- ==possiblePositions== answers a collection of the possible positions the widget could adopt.!!! Describing your pluginAnd finally you can redefine the ==pluginName== method to change the name displayed in the Nautilus Plugin Manager.[[[MyPlugin class>>description	^ 'MyPlugin']]][[[MyPlugin class>>description	^ 'A super cool plugin']]]"
"MetacelloProjectSpecLoadError",""
"MCFileInTest",""
"ReSourceAnchor","This object points to the source of the issue and may contain an interval of the involved source code, etc…"
"SlotExampleMovie","A SlotExampleMovie is an example class to demonstrate the workings of relation slots."
"MalHits",""
"FilteredMorphTreeModel","I'm a MorphTreeModel enriched with a filter text field. When a pattern is entered in the textfield, then only appropriate root items are drawn in the tree. Very useful to filter a list of items. This model should be used everywhere a filter is added on top of a list as in NautilusExamples:	""An example with auto-accept for the filter 	(accepted as you type is the default)""	| model morph |	model := FilteredMorphTreeModel new.	model rootItems: Morph allSubclasses.	morph :=  model defaultMorphIn: World.	morph extent: 300@500.	morph openInWorld		""Another example with a ghost string, and the user 	has to accept the filter contents explicitly 	with a return  or CMD-S in the text field""	| model morph |	model := FilteredMorphTreeModel new 		ghostString: 'Enter a pattern'; 		autoAccept: false; 		yourself.	model rootItems: Morph allSubclasses.	morph :=  model defaultMorphIn: World.	morph extent: 300@500.	morph openInWorld		""A dialog window with a filtered list""	| window m |	window := StandardWindow new model: self.	window title: 'Test runner'.	m := FilteredMorphTreeModel new		wrapBlockOrSelector: #selector;		rootItems: Morph methods.	window addMorph: (m defaultMorphIn: window) fullFrame: LayoutFrame identity.	window openInWorldInternal Representation and Key Implementation Points.The initial root item list is kept locally.See #rootItems:Instance Variables	ghostString:		<String>	autoAccept:		<Boolean>	initialItems:		<Collection>	patternModel:		<RubScrolledTextModel>"
"RBEquivalentSuperclassMethodsRule","This smell arises when a method is equivalent to its superclass method. The methods are equivalent when they have the same abstract syntax tree, except for variables names. Such method does not add anything to the computation and can be removed since the superclass method have the same behaviour. Furthermore, the methods #new and #initialize are ignored once they are often overridden for compatilbity with other platforms. The ignored methods can be edited in RBEquivalentSuperclassMethodsRule>>ignoredSelectors"
"FLSerializer","I am a binary object serializer.An example of use:| sourceArray loadedArray |sourceArray := 	Array 		with: 'a string' 		with: Transcript		with: [ Transcript show: 'a string' ].""Store to the file""FLSerializer serialize: sourceArray toFileNamed: 'example.FL'. ""Load from the file""loadedArray := FLMaterializer materializeFromFileNamed: 'example.FL'. ""The arrays are not the same""[ sourceArray ~~ loadedArray ] assert.""The strings are not the same""[ sourceArray first ~~ loadedArray first ] assert.[ sourceArray first = loadedArray first ] assert.""The global instance Transcript is the same""[ sourceArray second == loadedArray second ] assert.""Appreciate in Transcript that the loaded block prints a string""loadedArray third value."
"ProcessAndSessionLocalSourcesFileArray","I hold a read only copy of the SourcesFile which is specific to the active process and to the current session (Smalltalk session). See my references."
"TxHorizontalSlider",""
"GLMPageSwitched",""
"ColorTest",""
"PluggableMenuItemSpec","I'm a spec for an item menu. The World menu pragma based registration uses it for now. I'm moved in this package so that later we can decide what to do with it. We could probably avoid MenuSpec and just use MenuMorph instead. "
"ManifestRingMonticello","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GLMWizardGenericStep","A generic step in a wizardInstance Variables	numberOfDisplayBlock:		<Object>	size:		<Object>numberOfDisplayBlock	- xxxxxsize	- xxxxx"
"GLMBrickLayoutState",""
"GLMPhlowTableColumn",""
"KMCtrlModifier","I represent the Ctrl key modifier. Look at my superclass for a more detailed explanaition."
"GTExampleProxy",""
"TextMorphForEditView","I'm a TextMorph that must be embedded in a PluggableTextMorph.Multi-line text editor with support for accepting on both each change and/or when keyboard focus changes. Also supports custom selection colour and clickable highlights From PluggableTextEditorMorph.Instance Variables	acceptOnCR:		<Object>	acceptOnFocusChange:		<Object>	autoAccept:		<Object>	editView:		<Object>	selectionColor:		<Object>acceptOnCR	- xxxxxacceptOnFocusChange	- xxxxxautoAccept	- xxxxxeditView	- xxxxxselectionColor	- xxxxx"
"FileSystemHandle","I am an abstract superclass for file handle implementations. I provide a uniform interface that streams can use for read and write operations on a file regardless of the filesystem. I encapsulate the actual IO primitives."
"RubSegmentIconMenuMorph",""
"ZLibWriteStream","I use the zlib implementation of the deflate algorithm to compress a ByteArray. According to Wikipedia, ""this algorithm provides good compression on a wide variety of data with minimal use of system resources."" See http://en.wikipedia.org/wiki/DEFLATE for details on the deflate algorithm.This is how you get a compressed ByteArray from your input:zipStream := ZLibWriteStream on: (ByteArray new).zipStream 	nextPutAll: myByteArray;	close.compressed := zipStream encodedStream contents."
"FTAnnouncement","I'm a base announcement for FastTable announces."
"InvalidSocketStatusException","Signals if an operation on a Socket found it in a state invalid for that operation."
"MalHalNode",""
"RBSubclassOfClassToRename",""
"NautilusClassSelected","I announce when a class is selected, and also contain an information about selected package"
"PharoSourcesCondenser","I create a more compact version of the .sources file.I move the source code from all methods to a new .sources file where I keep only one version.Additionally I will empty the current .changes file."
"KomitTreeBuilder","I am builder class used to generate the tree nodes for a package or for all the dirty packages"
"MetacelloMCProjectReferenceSpecTestCase",""
"ChangeSorterModel","A ChangeSorterModel is a model used by Change Sorter UIs for computation"
"NumberParsingTest","Tests to verify parsing of numbers from streams and strings.Note: ScaledDecimalTest contains related tests for parsing ScaledDecimal."
"MetacelloLookupBaselineSpecForEnsureLoad",""
"FFITestPointerStructure",""
"ConfigurationGenerator","Probably to be removed to use metacello toolbox"
"RBSearchRule","RBSearchRule is a parse tree rule that simply searches for matches to the rule. Every time a match is found, answerBlock is evaluated with the node that matches and the cureent answer. This two-argument approach allows a collection to be formed from all of the matches (Think inject:into:).Instance Variables:	answerBlock	<BlockClosure>	Block to evaluate with the matching node and the current answer."
"WindowAnnouncement","I am the base class for all WindowAnnouncementsI define the common interface for WindowAnnouncements. You can check the type of the announcement (isMoved/isScrolled ...)My subclasses implement the specific window announcements and may provide further states."
"GTSpotterWidgetThemer","This is a themer for all spotter morphs.To customize it, it has to be subclassed and pointed to from:ACustomTheme>>spotterWidgetThemer"
"GTGenericStackDebuggerUITest",""
"GLMFastListOutlineDataSource","I'm a model datasource to handle glamour fast outline list presentations.Description --------------------My basics functionnalities works as in my superclass but I do not get my data at my creation. Instead I ask to my Glamour presentation to get them.I work with a GLMFastListPresentation and a GLMMorphicFastListRenderer. Internal Representation and Key Implementation Points.--------------------    Instance Variables	announcer:		This is an announcer use to work with Glamour workflow. 	glamourPresentation:		This is a glamour presentation use to get some informations as the data manage by myself.	tagsToFilterBy:		This is a list of filtering tags for the dasaSource."
"MBPackageInfo","Infos about a package"
"SugsExtractMethod","If you want to extract code in a new method I'm your guy"
"LinearGradientPaint","I represent a linear gradient paint.My start and stop points defining the position and direction of gradient fill in user space coordinates,so that the ramp color at 0 maps to starting pointand ramp color at 1 maps to stop point of linear gradient.Also check the comment of my superclass to know better how and when you can use me."
"MalGraphAlgorithm","I'm the common superclass for all Graphes related algorithms.I store edges and nodes and provides convenience methods to add, access and find nodes or edges.Once configured, send the run message to execute the algorithm."
"PragmaAdded","A PragmaAdded is announced by a PragamColllector when a method defined with an acceptable pragma according to the PragmaCollector filter is added.Instance Variables"
"PharoWelcomePage","Pharo 5.0=========Welcome to Pharo, an immersive live programming environment.""Pharo 5.0 already comes pre-loaded with a rich set of packages that you can use to explore the system and develop your own applications. However there is also a huge library of user contributed projects that you can also load using the 'Configurations Browser' by executing:""MetacelloConfigurationBrowser open.""This browser is also accessible from the World | Tools menu (just click the desktop, select Tools, and then Configuration Browser).You can find information about Pharo on http://www.pharo.org. Some useful starting points are:- Joining us and getting help http://www.pharo.org/get-help- Getting the Pharo By Example book (available as a free PDF): http://www.pharobyexample.org- Browser the documentation http://www.pharo.org/documentation- Reporting problems http://www.pharo.org/get-involvedAbout this release---------------------------There are more than 1600 issues treated in this release. Sumarized issues for 4.0:=========================New stuff---------- GTools (Playground, Inspector, Spotter)- Slots model instance variables as first class enities and enable meta-programming on this level.- ShoreLine reporter: submit information automatically when errors happen- TxModel, a modern text model who works with Athens (Preview)- OSWindow, a new way to handle windows and input events (Preview)- Glamour, a mature declarative browser builder- Dark themeUpdated stuff-------------- Zinc/Zodiac- Fuel- VersionnerAnd a lot more!You can check a more detailed explanation here: https://github.com/pharo-project/pharo-changelogs/blob/master/Pharo40ChangeLogs.md"""
"RBBrowserEnvironmentWrapper","I am a wrapper around special browser environment subclasses andthe base RBBrowserEnvironment class. I define common methodsfor my subclasses to act as a full environment.no public use."
"KMCategoryBinding","I am the reification of the relation morph<->category, created when a morph gets attached a category of shortcuts."
"ClassMultiplePoolUser","I'm a class using two shared pools. "
"TransformMorph","A TransformMorph introduces a 2-D transformation between its (global) coordinates and the (local) coordinates of its submorphs, while also clipping all display to its bounds.  Specifically, with no offset, angle or scaling, a submorph with coordinates (0@0) will appear exactly at the topLeft of the windowMorph (its position).  Rotation and scaling are relative to the local origin, (0@0).instance var	type				description transform		MorphicTransform	The coordinate transform between my coordinates and the									local coordinates of my submorphs. smoothing		anInteger in 1..3	Perform smoothing of my contents during drawing										1 No smoothing (#smoothingOff)										2 Smoothing w/ edge adjacent pixels (#smoothingOn)										3 Smoothing w/ edge and corner adj pixels			 localBounds	Rectangle or nil		caches the value of #localSubmorphBounds for performanceTransformMorphs operate with two different display strategies, depending on whether the transformation is a pure translation or not.  If so, then they simply use a clipping canvas and display their submorphs with the appropriate offset.  If the transformation includes scaling or rotation, then a caching canvas is used, whose active area covers the fullBounds of the submorphs intersected with the source quadrilateral corresponding to the window bounds."
"RBMethodNode","RBMethodNode is the AST that represents a Smalltalk method.Instance Variables:	arguments	<SequenceableCollection of: RBVariableNode>	the arguments to the method	body	<BRSequenceNode>	the body/statements of the method	nodeReplacements	<Dictionary>	a dictionary of oldNode -> newNode replacements	replacements	<Collection of: RBStringReplacement>	the collection of string replacements for each node replacement in the parse tree	selector	<Symbol>	the method name	keywordsPositions	<IntegerArray | nil>	the positions of the selector keywords	source	<String>	the source we compiled	tags	<Collection of: Interval>	the source location of any resource/primitive tags"
"MOPTraitTest",""
"VSConfigurationCommand","A command that apply to a project configuration."
"ZnServerLogEvent","I am ZnServerLogEvent, a ZnLogEvent generated by ZnServer and its subclasses.I hold a processId attribute.I hold an optional serverId attribute."
"SortHierarchicallyTests",""
"FLMaterializationError","I represent an error happened during materialization."
"AthensBalloonRadialGradient","i represent a radial gradient paint in balloon backend."
"ZipEncoderTree","ZipEncoderTree represents a huffman tree for encoding ZipStreams.Instance variables:	bitLengths	<WordArray>	 - Bit lengths of each generated code	codes		<WordArray>	 - Codes for each value	maxCode		<Integer>	- Maximum value with non-zero frequency"
"FLWeakObjectsTest","SUnit tests for fuel serialization of weak objects"
"FLSerialization","I implement the algorithm for serializing an object graph on a stream. FLSerializer known how to build instances of me."
"GZipWriteStream","gzip is an integral part of the VM. "
"ZnBase64EncoderTests",""
"MCPreambleDefinition","A preamble evaluated before load"
"MCPostscriptDefinition","A postscript evaluated after load"
"QARecordingSettings","i have settings for QA recording functions"
"TestAsserter","I understand methods beginning #assert:... and #deny:... (and my class-side understands #assert:description:).  I am the superclass of TestCase and TestResource and can also be the superclass of any test helper classes you create to factor out test behaviour.  I exist so that test code can be refactored between my subclasses without difficulty.Send #assert:description: when you want to check for an expected value. For example, you might say	self assert: socket isOpen description: 'We requested a socket but now it is not open'.to test whether or not a socket is open at a point in a test.  Use description strings both to give more information about where a test failed in debugger notifiers and logs, and to document the intent of a test.  Other methods include #assert:, #assert:description:resumable:, #deny:, #deny:description:, #deny:description:resumable:, #should:raise:, #should:raise:description:, #shouldnt:raise:, #shouldnt:raise:description:.  All these methods are defined on the superclass, TestAsserter.  (Any convenience assertion methods you create for general use should also be defined in my 'convenience' protocol.)Override my class-side #isLogging in subclasses to have failed assertion descriptions shown on the Transcript.  To have them appear elsewhere, also override my class-side #failureLog."
"GradientPaint","I am paint which using color gradient for fills.The gradient is defined using color ramp in range between 0 and 1where colors can be set at certain point. The color are interpolated between defined points.The color ramp is a collection of associations with keys - floating point values between 0 and 1and values with Colors, for example:{  0 -> Color white. 1 -> Color black }.My subclasses used to define a concrete kind of gradient,while me is an abstract class which has common properties for all gradients: color ramp.Also, note that my subclasses representing backend-neutral gradients,encapsulating all necessary data, which is then passed to corresponding surface factory method, likeAthensSurface>>#createLinearGradient:start:stop: , which answers backend-specific gradient paint.I am userful in cases when user wants to define a paint without needto have any Athens surface at hand.Sure thing, using backend-specific gradients is preferable, if possible,because conversion to backend-specific paint can be costly. Especially if gradient is statically defined (ramp values and other parameters never changing) and used many times during the life time of surface."
"MCPermissionDenied","I am signalled when a repositroy cannot save or access a version."
"GLMEmptyPopupBrick",""
"MBAbstractTest","Common superclass for test for Versionner"
"BreadthFirstGuide","I traverse the filesystem in breadth-first order. Given this hierarchy:alpha	beta	gammadelta	epsilonI would visit the nodes in the following order:  alpha, delta, beta, gamma, epsilon.I use my work instance variable as a queue, adding nodes to be visited to the end and retrieving them from the beginning."
"MCMergeBrowser","Browser to merge changes"
"SystemAnnouncement","The root announcement for the events coming from the Pharo system.Currently, it wraps the event that comes from the SystemChangeNotifier."
"SyntaxErrorDebugger","I am a special Debugger for syntax errors encountered when filing in class descriptions from a non-interactive source such as an external file. As a StringHolder, the string to be viewed is the method code or expression containing the error.The user may fix the error and accept the method to continue the fileIn."
"ProcessSpecificTest","A ProcessSpecificTest is a test case for process local and dynamic variables."
"BalloonEdgeData","BalloonEdgeData defines an entry in the internal edge table of the Balloon engine.Instance Variables:	index	<Integer>	The index into the external objects array of the associated graphics engine	xValue	<Integer>	The computed x-value of the requested operation	yValue	<Integer>	The y-value for the requested operation	height	<Integer>	The (remaining) height of the edge	source	<Object>		The object from the external objects array"
"TxSliderDragged",""
"MetacelloGenericProjectSpec",""
"FFICalloutMethodBuilderTest",""
"ExternalStructure","This class provides an abstract base for all structures that can be used by external functions. ExternalStructures have two possible handle types:	- ExternalAddress		If the handle is an external address then the object described does not reside in the Smalltalk object memory.	- ByteArray		If the handle is a byte array then the object described resides in Smalltalk memory.Useful methods should be implemented by subclasses of ExternalStructure using the common ByteArray/ExternalAddress platform dependent access protocol which will transparently access the correct memory location."
"FFIFunctionParserTests",""
"MBAbstractPackageInfo","A MBAbstractPackageInfo is an abstraction to represent both project and packages.Instance Variables	packageName:		name of the package	workingCopy:		a MCWorkingCopy representing the version of the package in memory"
"ManifestCollectionsSequenceable","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"SmalltalkImage","My singleton is a central entry point to the system.It has many roles and responsibilities (to be documented)	- startup/shutdown image	- source management	- namespace access	- tool access	- platform access	- VM information and parameters		Startup-----------At startup and shutdown the image execute the methods startUp: and shutdown: of registered classes (registered using addToStartUpList:, addToShutDownList:, ... methods and friends).	Startup phasesDuring the first stage of start up the UI manager, the default uimanager is switched to a specific non interactive ui manager (StartupUIManager). Note that this specific non interactive UIManager kills the system on any attempt to open windows and interaction. So be warned, don't use interaction in the first phase. Then all registered classes execute their start up procedures (which should not imply interactive behavior). After startup list is finished, any deferred startup actions are executed, which you can add using the methodaddDeferredStartupAction: method.  "
"AlignmentMorph","Used for layout.Since all morphs now support layoutPolicy the main use of this class is no longer needed.Kept around for compability. Supports a few methods not found elsewhere that can be convenient, eg. newRow"
"ZdcSecurePOP3Client","I am ZdcSecurePOP3Client.I open a ZdcSecureSocketStream to the POP3 server and connect it at the SSL level.ZdcSecurePOP3Client	retrieveMessagesFromGMailAccount: '<your-name>@gmail.com'	password: '<your-password>'	limit: 5."
"GoferCommit","Commit work"
"MetacelloGofer",""
"SDL_QuitEvent","SDL2 library structure"
"UTF8DecomposedTextConverter","An UTF8DecomposedTextConverter converts from decomposed UTF8 using the UnicodeCompositionStream.Instance Variables"
"FTSelectionStrategy","I define a strategy to handle selections. The sense of this class is shown in my children: I allow to handle the case of multiple and simple selection in a well designed way, instead using ifs everywhere."
"Monitor","A monitor provides process synchronization that is more high level than the one provided by a Semaphore. Similar to the classical definition of a Monitor it has the following properties:1) At any time, only one process can execute code inside a critical section of a monitor.2) A monitor is reentrant, which means that the active process in a monitor never gets blocked when it enters a (nested) critical section of the same monitor.3) Inside a critical section, a process can wait for an event that may be coupled to a certain condition. If the condition is not fulfilled, the process leaves the monitor temporarily (in order to let other processes enter) and waits until another process signals the event. Then, the original process checks the condition again (this is often necessary because the state of the monitor could have changed in the meantime) and continues if it is fulfilled.4) The monitor is fair, which means that the process that is waiting on a signaled condition the longest gets activated first.5) The monitor allows you to define timeouts after which a process gets activated automatically.Basic usage:Monitor>>critical: aBlockCritical section.Executes aBlock as a critical section. At any time, only one process can execute code in a critical section.NOTE: All the following synchronization operations are only valid inside the critical section of the monitor!Monitor>>waitUnconditional waiting for the default event.The current process gets blocked and leaves the monitor, which means that the monitor allows another process to execute critical code. When the default event is signaled, the original process is resumed.Monitor>>waitWhile: aBlockConditional waiting for the default event.The current process gets blocked and leaves the monitor only if the argument block evaluates to true. This means that another process can enter the monitor. When the default event is signaled, the original process is resumed, which means that the condition (argument block) is checked again. Only if it evaluates to false, does execution proceed. Otherwise, the process gets blocked and leaves the monitor again...Monitor>>waitUntil: aBlockConditional waiting for the default event.See Monitor>>waitWhile: aBlock.Monitor>>signalOne process waiting for the default event is woken up.Monitor>>signalAllAll processes waiting for the default event are woken up.Using non-default (specific) events:Monitor>>waitFor: aSymbolUnconditional waiting for the non-default event represented by the argument symbol.Same as Monitor>>wait, but the process gets only reactivated by the specific event and not the default event.Monitor>>waitWhile: aBlock for: aSymbolConfitional waiting for the non-default event represented by the argument symbol.Same as Monitor>>waitWhile:for:, but the process gets only reactivated by the specific event and not the default event.Monitor>>waitUntil: aBlock for: aSymbolConfitional waiting for the non-default event represented by the argument symbol.See Monitor>>waitWhile:for: aBlock.Monitor>>signal: aSymbolOne process waiting for the given event is woken up. If there is no process waiting for this specific event, a process waiting for the default event gets resumed.Monitor>>signalAll: aSymbolAll process waiting for the given event or the default event are woken up.Monitor>>signalReallyAllAll processes waiting for any events (default or specific) are woken up.Using timeoutsMonitor>>waitMaxMilliseconds: anIntegerMonitor>>waitFor: aSymbol maxMilliseconds: anIntegerSame as Monitor>>wait (resp. Monitor>>waitFor:), but the process gets automatically woken up when the specified time has passed.Monitor>>waitWhile: aBlock maxMilliseconds: anIntegerMonitor>>waitWhile: aBlock for: aSymbol maxMilliseconds: anIntegerSame as Monitor>>waitWhile: (resp. Monitor>>waitWhile:for:), but the process gets automatically woken up when the specified time has passed.Monitor>>waitUntil: aBlock maxMilliseconds: anIntegerMonitor>>waitUntil: aBlock for: aSymbol maxMilliseconds: anIntegerSame as Monitor>>waitUntil: (resp. Monitor>>waitUntil:for:), but the process gets automatically woken up when the specified time has passed."
"ZnServer","I am ZnServer, an abstract superclass of HTTP Servers.I am a facade for controlling a default server implementation.I delegate my public class protocol methods to #defaultServerClass.  ZnServer startDefaultOn: 1701.  ZnClient new get: 'http://localhost:1701'.Subclasses can register with me to have start/stop sent to them on System startUp/shutDown.The default server instance will be registered automatically when it is started.Part of Zinc HTTP Components."
"RFStorePopIntoTempNode","I define a temp that I can store into"
"AbstractAdapter","I am an abstract class.I'm the superclass of all the adapters used to link a Spec widget model to a framework specific widget (by example ButtonModel <-> PluggableButtonMorph).The current implementation installs my instances as dependent of the model and my changed: method propagates updates to the widget I create (via my buildWidget method). This implementation is not optimal. In the future my instances should just be responsible to create a widget and install all the communication between the model and the widget. I should not be a middle man. "
"CairoGlyphsArray","Captain obvious tells this is an array of CairoGlyph(s),corresponds to cairo_glyph_t structure:typedef struct {    unsigned long        index;    double               x;    double               y;} cairo_glyph_t;"
"TarArchiveMember","A member of a TAR archive"
"RBPushDownClassVariableRefactoring",""
"TheManifestBuilder","I'm a tool to build manifest that handles small lint false positive and other information.My name is strange but this is to avoid to match with a Manifest class which is recognized because it starts with Manifest*."
"MetacelloVisitedPackages",""
"PluggableListMorph","...When a PluggableListMorph is in focus, type in a letter (or severalletters quickly) to go to the next item that begins with that letter.Special keys (up, down, home, etc.) are also supported."
"MCFileTreeStCypressReader","Reader for Cypress formatsee https://github.com/CampSmalltalk/Cypress"
"IRAccess","IRAccess models all bytecodes that read or write variables or self/super/thisContext"
"RBRefactoringError","The receiver is signaled whenever a precondition of a refactoring is violated. The action block, if defined, might help the user to resolve the issue."
"FLIteratingCluster","I am a template class whose algorithm for serialize a collection of objects consists on delegate the serialization of each individual object to the subclass."
"BagTest","SUnit tests for bags"
"RFLiteralVariableNode","I am a global binding. "
"QACriticsSeen","Happens when nautilus plugin displays critics in the list. (critics collection can be empty)"
"SpecInterpreter","A SpecInterpreter is a interpreter for spec presenters"
"RPackageConflictError","I'm an error that happens when someone attempts to register a package with a conflicting name. Conflicting names can be of two ways: PackageA(tagB) conflicts with PackageA-BPackageA-B conflicts with PackageA(tagB)"
"SymbolicBytecodeBuilder","I parse a method and create a collection of SymbolicBytecode objects for introspection."
"ConfigurationOfGTDebugger","self loadDevelopment"
"AthensPaint","I am a base class, which defines a paint.My subclasses represent a concreate paint by implementing my protocol,  that actually draws a specific shapes with me. My subclasses usually backend-specific, but as long as you implement my protocol, any object can be treated as paint: - athensFillPath: aPath on: aCanvas - athensFillRectangle: aRectangle on: aCanvas - asStrokePaint"
"ImageCleaner","Used for cleaning the image"
"UTF16TextConverter","Text converter for UTF-16.  It supports the endianness and byte order mark.The default is to not use a BOM, make sure to set this if using the converter to write to a location where encoding metadata is not present / specified by the protocol.This usually means you want to write one when storing strings to files on disk, but not when transmitting encoded string to a web client, nor when sending data to a database."
"NBExternalObject","I'm a stub class intended just to easy migration from NB to UFFI. The corresponding class to replace me is: FFIExternalObject.MIGRATION NOTES: You probably need to implement #asExternalTypeOn: class side method."
"ConfigurationOfTxText","(ConfigurationOfTxText project version: '2.6') load: 'Tests'ConfigurationOfTxText loadDevelopment""last without Tool-TxWorkspace""(ConfigurationOfTxText project version: '2.7') load.""with Tool-TxWorkspace""(ConfigurationOfTxText project version: '2.8') load."
"EventManager","An EventManager is used to registers a 'observer' object's interest in in changes to an 'observed' object.  Then when the observered object is changed,  EventManager broadcasts the an update message to all objects with a registered interest.  Finally, the Event manager can be used to remove an object from the list of observer object.An interested object is said to be a dependant on the target object.  Registering an interest in an event is called adding a dependant. Deregistering is called removing  a dependant.  The EventManager's action map is a WeakIdentityDictionary that maps events (selectors) to dependants (objects & selectors) in a way that ensures the mapping is to specific objects (hence identity) and in a way that allows the object to be garbage collected if not other used (hence weak.)  EventManager class has ActionMaps which has one actionMap for each object.Classic uses of an EventManager are to implement the Observer Pattern, see ChangeNotification or the MorphicModle as examples."
"IRStoreRemoteTemp","store remote temp"
"ManifestSystemSupport","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"ShortIntegerArrayTest","SUnit Test for ShortIntegerArray"
"TxScrollbarDecorator",""
"ManifestCollectionsArithmetic","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"NNavNavigation","I'm the one who manage the navigation and I have memory from what I've been navigating"
"FTAllItemsStrategy","I am a Strategy that will use the function on all the tree.BE CAREFUL, do NOT use me if you are not sur that your tree is finish. If a branch is infinite I will go in an infinite loop. If you are sure about it, use this otherwise use other search strategies. Description-----------------------I will search in every item of the tree and I needed I will expand the items to show the results of the function.As said in my superclass I am use by a FTTreeDataSource to help with a FTFunction.Public API and Key Messages------------------------ #realSearch 	is the method that will launch the search.Example-----------------------	| ds |	ds := FTTreeDataSource		roots:			((ProtoObject allSubclasses sort: [ :a :b | a asString < b asString ])				reject: [ :e | e asString endsWith: 'class' ])		children: [ :item | item subclasses sort: [ :a :b | a asString < b asString ] ].	ds searchStrategy: #allItems. ""This will say to the FTTreeDataSource to use me.""	FTTableMorph new		extent: 200 @ 400;		dataSource: ds;		explicitFunction;		openInWindow Internal Representation and Key Implementation Points.-----------------------    Instance Variables	index:		I am the index of tfe elements I am testing now. 	result:		I am a collection of index that is the result of the search."
"VSValidateConfigurationCommand","This command allows you to check inconsistencies in a Configuration class."
"RBPharoBootstrapAnalyzerStubWithNoNewDependency","Stub class to do not compute dependencies of the given package butrather give pre-established responses back.#dependenciesOf will return  packages already in the bootsrap layer."
"FinderExampleClassNode","A FinderExampleClassNode is a node used by the FinderUI's tree representing the Class for the method deducedfrom an examples (by MethodFinder)"
"SessionManagerRegistrationOrderTest",""
"Paragraph","A Paragraph represents text that has been laid out, or composed, in some container.I also display the different kinds of text selection (secondary, find-replace and selection bar).Class collaborations   SelectionBlock instances are built by myself and stored in the extraSelectionBlocks instance variable in order to display supplementary selectionsClass main API   no particular main API.Instance Variables   extraSelectionBlocks: <Collection of SelectionBlock>   findReplaceSelectionRegex: <RxMatcher>   presentationLines: <Object>   presentationText: <Object>   refreshExtraSelection: <Boolean>   secondarySelection: <String>extraSelectionBlocks   - a collection of SelectionBlock for the drowing of the differents kind of text selectionfindReplaceSelectionRegex   - the find/replace matcher that is set from the editor of by the FindReplaceServicepresentationLines   - created for debugging purpose, should be removed ?presentationText   - created for debugging purpose, should be removed ?refreshExtraSelection   - a boolean that is set to tru when there is a need to refresh selectionssecondarySelection   - the string of the secondary selection that is set from the editor when a portion of text is selected	text 		A Text with encoded per-character emphasis.	textStyle	A TextStyle with font set, line height and horizontal alignment.	firstCharacterIndex    The starting index in text for this paragraph, allowing				composition of a long text into a number of containers.	container	A Rectangle or TextContainer that determines where text can go.	lines		An Array of TextLines comprising the final layout of the text				after it has been composed within its container.	positionWhenComposed   As its name implies.  Allows display at new locations				without the need to recompose the text.Lines are ordered vertically.  However, for a given y, there may be several lines in left to right order.  Lines must never be empty, even if text is empty.Notes on yet another hack - 5 Feb 2001We really need to clean up #composeLinesFrom:to:delta:into:priorLines:atY:!!!I added one more habdful of code to correct:This is an annoying bug that's been around for a couple of years, but I finally figured out how to duplicate the problem, so I figured I'd just report it now.  (It doesn't necessarily have to be fixed for 3.0 if it looks messy, but if it's a simple fix, it would be worth it.)In Morphic, if you have the following text in a workspace:This is line 1This is line 2**and** you have a return character after line 2, you will normally be able to click the mouse two times below line 2 in order to select all the text.  If you edit line 2 (e.g. so that it reads ""line number 2""), you can still select all the text by clicking below the second line.  However, if you edit line 1, you will not be able to select all the text from the bottom in the same way.  Things get messed up such that the last return character seems to be gone.  In this state, if you position the cursor immediately after the 2, and press the right arrow, the cursor jumps to the beginning of line 2... oof. (report by Doug Way)While I don't have a very deep understanding of the above mentioned method, I was able to determine that text ending in a CR worked better in the editor when the last entry in <lines> had a start of text size + 1 and a stop of text size. I have accordingly added code near the end to ensure this. It seems to have fixed the problem, but we do need to clean this baby up some day. - Bob"
"GLMDashboardTest",""
"MCMockDependency",""
"MetacelloMethodSpec",""
"FLPharo12Platform",""
"SubscriptOutOfBounds","I am SubscriptOutOfBounds, an exception indicating that some operation attempted to use a subscript outside allowed bounds.Normally, I hold the offending subscript and/or the allowed lowerBound and upperBound (inclusive).SubscriptOutOfBounds 	signalFor: 10 	lowerBound: 1 	upperBound: 5 	in: (Array new: 5)"
"RBkeysDoRule","Replaces keys/values do: by keysDo: and valuesDo:.  This rule is based on the observation that using aDict keys do: or aDict values do: create an intermediary collection. Dictionary>>keys	""Answer an Array containing the receiver's keys.""		^Array new: self size streamContents: [:s| self keysDo: [:key| s nextPut: key]]	This array can be quite large and using the keysDo: does not create such intermediate collection."
"FreeTypeCacheLinkedList","A linked list for the FreeTypeCache"
"FFIExternalReferenceType","I'm a abstract type for ""referenced"" types. See ==FFIExternalReference== for details."
"AthensSurface","I representing a surface, where all drawing operations will happen.I also having a number of factory methods to create paints, paths and other objects involved in drawing.AthensSurface is an abstract, while subclasses implement a specific kind of surface for one or another backend.The primary role of AthensSurface class is to define a public protocol for all Athens surfaces, which can be used by applications which using Athens framework.To get a new surface, use:<one of my subclasses> extent: x@yfor surfaces which don't need to have dimensions specified,it would just #new."
"EditingState","I store the current state of an editing session. An instance of mine is shared by all TextEditor instances that are created during an editing session managed by a TextMorph (see below for more explanations about editing session). The state data are basically made of an undo/redo manager and of all data needed in order to manage text editing undo and redo (mainly all informations for the current and previous selection intervals).I'm created by a TextEditor at the beginning of an editing session (see TextEditor>>editingStateClass and TextEditor>>editingState). Specializations can be introduced to fit a particular TextEditor subclass need.Editing session:An  editing session starts when a TextMorph is created (precisely, when a TextEditor instance is first assigned to a TextMorph editor instance variable). An editing session ends when a TextMorph is deleted. During an editing session, a TextMorph can make use of a lot of TextEditor instances, one at a time. As an example, each time a TextMorph is resized, its editor is released and a new one that fit the TextMorph physical properties  is created. Another example, when a TextMorph loses the keyboard focus, then its editor could be fully released; it is created again when the TextMorph retrieves the focus.When an editor is created by a TextMorph, the state of the previous TextEditor, stored in its associated EditingState instance, is got and passed to the newly created editor. Thus the editing session remains stable (see TextEditor >> #stateArray and TextMorph >> #installEditorToReplace:). So TextEditor instances are extremely volatile whereas its associated EditingState instance remains during the whole editing session.Instance Variables:   emphasisHere <Array of TextAttribute>   pointBlock <CharacterBlock>   markBlock <CharacterBlock>   startOfTyping <Integer>   previousInterval <Interval>   previousSelection <Text>   undoManager <HistoryIterator>   lastParenLocation <Integer>   mouseDownInterval <Interval>- emphasisHere:   The TextAttributes that are used for the newly entered text- pointBlock:   The CharacterBlock where a selection begins (where the mouse has first pointed)- markBlock:   The CharacterBlock where a selection ends- startOfTyping:   The index of the first character which has been entered during the currently undoable/redoable portion of text (see TextEditor>>#openTypeIn and TextEditor>>#doneTyping)- previousInterval:   Previous interval used for undo/redo actions- previousSelection:   The previously selected text for undo/redo actions- undoManager:   The undo/redo manager- lastParenLocation:   Keep the position of the open parenthesis which corresponds to the last entered close parenthesis- mouseDownInterval:   The position of the first mouse down in the editor"
"AthensCWArcSegment","i represent a circular arc, connecting  previous segment endpoint and my endpoingof given angle, passing in clockwise direction."
"KMCommandModifier","I represent the default modifier key for the current platform, late bound to Meta or Ctrl key modifier depending on the platform."
"SDL_JoyAxisEvent","SDL2 library structure representing a joystick axis event data."
"STONTestKnownObject","I am STONTestKnownObject. I support unit tests.I have an id and a description.When I am serialized, only my id is written out.  STONTestKnownObject['bb71b026-180c-0d00-b40c-38700aee7555']When I am materialized, the id is used to reconstruct the object, either by retrieving it from a collection of known objects, or it is created (it could also be a retrieval from somewhere else).I keep a collection of all my known instances, new instances are added to it automatically.Use my class side's #fromId: to access existing instances"
"OSJoyDeviceEvent","I am a joystick device event.The which parameter gives the joystick index.The  mapped  parameters tells if this device is axis and buttons are going to be mapped into a standard layout.The hasMapping parameters tells if this joystick is generating a mapped version of the event."
"TextComposer",""
"RPackageCompleteSetupButForModificationTest","SUnit tests for RPackage"
"DisplayScreen","There is only one instance of me, Display. It is a global and is used to handle general user requests to deal with the whole display screen. 	Although I offer no protocol, my name provides a way to distinguish this special instance from all other Forms. This is useful, for example, in dealing with saving and restoring the system.	To change the depth of your Display...		Display newDepth: 16.		Display newDepth: 8.		Display newDepth: 1.Valid display depths are 1, 2, 4, 8, 16 and 32.  It is suggested that you run with your monitors setting the same, for better speed and color fidelity.  Note that this can add up to 4Mb for the Display form.  Finally, note that newDepth: ends by executing a 'ControlManager restore' which currently terminates the active process, so nothing that follows in the doit will get executed.Depths 1, 2, 4 and 8 bits go through a color map to put color on the screen, but 16 and 32-bit color use the pixel values directly for RGB color (5 and 8 bits per, respectivlely).  The color choice an be observed by executing Color fromUser in whatever depth you are using."
"PolymorphSystemSettings","I provide settings for Morphic appearance (theme, fonts, colors, ...) that can be found and changed in the Settings browser."
"NECOverrideModelTest",""
"FooSharedPool","Just a class for testing."
"NECStringSortingTest",""
"GLMHorizontalLinearLayout",""
"TextFieldExample","A TextFieldExample is a simple example of how to use TextFields."
"MTDependencyTest",""
"LocaleID","The ID for localization"
"GTSpotterSelectedCandidateChanged",""
"LoadUpdatesCommandLineHandler","Usage: update [ --force ] [ --from-file=<updateFile> ]	--force        Continue loading updates with errors	--from-file    Use a local <updateFile> instead of http://updates.pharo.org	<updateFile>   An update file containing a cr-separated list of urls to .cs files	Documentation:	The update the image to the latest version.Usage:	pharo Pharo.image update	pharo Pharo.image update --from-file=udpates.list"
"FLPlatform",""
"PharoIssueTest",""
"FTExampleDataSource","I'm a simple example of fast table, who will use a list of classes and traits as data source elements.FTExamples example1.FTExamples example2."
"CornerRounder","This class is a quick hack to support rounded corners in morphic.Rather than produce rounded rectangles, it tweaks the display of corners.Rather than work for any radius, it only supports a radius of 6.Rather than work for any border width, it only supports widths 0, 1 and 2.The corners, while apparently transparent, still behave opaquely to mouse clicks.Worse than this, the approach relies on the ability to extract underlying bits from the canvas prior to display.  This ran afoul of top-down display, it seems, in SystemWindow spawnReframeHandle: (qv).  It will also make a postscript printer very unhappy.But, hey, it's cute."
"OSWindowGenericRendererExample","Example showing how to use the joystick."
"ClassModifiedClassDefinition","This announcement will be emitted when a class or a trait definition changes.For example, when an instance variable is added or when the trait composition is modified in a class definition."
"GLMPagerBarBrick",""
"ISOLanguageDefinitionTest",""
"Win32Environment","I am a specialized OSEnvironment for Windows"
"TxForeColorAttribute","I represent the foreground color of a text span"
"RBCollectionProtocolRule","Checks code using the do: method instead of using the collect: or select: methods. This often occurs with new people writing code. The collect: and select: variants express the source code''s intentions better."
"NullPharoIssue","I am an instance of the Null Object Pattern [1] so that users of PharoIssue do not have to put nil checks everywhere.1. http://en.wikipedia.org/wiki/Null_Object_pattern"
"NotFound","I am NotFound, an exception to indicate that something is not found in a collection.I am an Error and thus Exception.Typically, the thing not found is in my object instance variable.The collection where this thing was not found is in my inherited signaler instance variable.[ NotFound signalFor: 10 in: #(1 2 3) ] on: NotFound do: [ :exception | exception ]"
"MetacelloBasicScriptingTestCase",""
"RBMoveVariableDefinitionRefactoring",""
"MBAbstractInfoList","A MBAbstractInfoList is an abstraction used to hold information on groups, packages and projects.Instance Variables	groups:		a list of groups (MBGroupInfo instances)	infoList:		<Object>	packages:		<Object>	projects:		<Object>"
"SubclassPoolUser","I should be able to access the pool variables defined in my superclass."
"RBOverridesSpecialMessageRule","Checks that a class does not override a message that is essential to the base system. For example, if you override the #class method from object, you are likely to crash your image. #classShouldNotOverride returns the list of messages which should not be overriden."
"GLMScrollbarBrick","A GLMScrollbarBrick is vertical scollbar for a scrollpane. User can't interact with itInstance Variables	bar:		<Object>	scrollPane:		<Object>bar	- xxxxxscrollPane	- xxxxx"
"MCPTest",""
"TabModel","I am a spec model representing a single tab.I should not be used without being contained into a TabManagerModel.!! #retrievingBlock: warningIf you specify #retrievingBlock: directly, you should also set the ownership of the appropriate. (See TabModel>>#model:)"
"ZnMessageBenchmarkTests",""
"MetacelloCommonMCSpecLoader",""
"ZdcByteArrayManagerTests",""
"ZnCharacterReadStream","I am ZnCharacterReadStream.I wrap another binary ReadStream and use a ZnCharacerEncoder to allow Characters to be read.I am not positionable, but I do allow a one character peek using a one character internal buffer.Part of Zinc HTTP Components."
"ASTCacheResetTest",""
"AthensWorldMorph","An AthensWorldMorph is a special version of a WorldMorph.It is within a real Morph in a real morphic world. The Morph it is in defines the DisplayScreen dimension. (see AthensWrappedWorldDisplay)"
"SystemAnnouncerLiveTest","Tests verifiying the behaviour of the default SystemAnnouncer instance."
"MetacelloAtomicMonticelloResource",""
"RBPushDownMethodTest",""
"JobAnnouncement","I'm an abstract superclass for Job announcements. My subclasses are announced in Job jobAnnouncer."
"ManifestMonticelloOldDataStreamCompatibility","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GLMPresentIfNoneStrategy","This strategy sets presentations only if none exits in the pane of the destination port."
"GTExampleRemoved",""
"MBLabelInfo","A label info"
"OCASTCheckerTest",""
"MBConfigurationInfo","A MBConfigurationInfo holds information on a specific configuration, i.e. on the ConfigurationOf class of a project.Instance Variables	baselines:		list of baselines (MBBaseLineInfo instances) of this configuration.	branch:			??	configurationClass:	the configuration class (ConfigurationOf instance).	configurationRoot:		a link to the root object with all configurations.	currentVersion:		??	trimVersionLists:		true if ??	versions:			list of versions (MBVersionInfo instances) of this configuration.	workingCopy:	the Metacello working copy"
"StdioStream","I am a concrete subclass of AbstractBinaryFileStream for stdio streams. I cannot modify the position of the underlying file.Warning: Do not use me! You can access stdio streams through Stdio interface:Stdio stdin.Stdio stdout.Stdio stderr."
"ConfigurationCommandLineHandlerTest","SUnit tests for class ConfigurationCommandLineHandler"
"SelectPackageBrowser","To select packages."
"ZnManagingMultiThreadedServer","ZnManagingMultiThreadedServer is a ZnMultiThreadedServer that manages the socket stream connections used by the worker threads that are spawned.  ZnManagingMultiThreadedServer startDefaultOn: 1701.I keep track of all the connections that I spawn so that I can close them when I am stopped.Part of Zinc HTTP Components."
"ReBasicClassRule","I'm a basic root for all cless rules of renraku."
"MCWorkingAncestry","The interim record of ancestry for a working copy, gets merged version added to the ancestry, and is used to create the VersionInfo when the working copy becomes a version. "
"ThreePhaseButtonMorph","A button morph with separate images for on, off, and pressed with the mouse. When the event actWhen occurs, send actionSelector with 'arguments' to target.  For other events, default to my eventHandler.  The current event is not supplied in the arguments to the actionSelector.  image (a.k.a. onImage) may not be nil.  offImage and pressedImage may be nil.  nil there means be transparent and show the underlying object.  Tools for debugging:Display the images momentarily under program control (for positioning) (self is an instance).	self state: #on.  self state: #off.	self state: #pressed.  self state: #off.Display a rectangle where the button is.	Display fillWithColor: bounds + (self world viewBox origin).	self invalidRect: bounds."
"ReflectiveMethodTest",""
"FileSystemResolver","I am an abstract superclass for objects that can resolve origins into references. Such objects use the Chain of Responsibility pattern, and when unable to resolve a particular origin, delegate that resolution request to the next resolver in the list.next	The next resolver in the list, or nil"
"ClassOrganization","This object is in charge of system notifications.It manages the class comment, the class comment stamp and a protocol organizer"
"FLPharoPlatform",""
"SmallIntegerTest","I provide a test suite for SmallInteger values. Examine my tests to see how SmallIntegers should behave, and see how to use them."
"TxSpanWithStyle","i am common ancestor of spans which can carry separate (own) list of attributes."
"SharedRandom","I represent a Random number generator that can be shaded between different code.I wrap the For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	mutex:		<Object>    Implementation Points"
"RelativePath","I represent a relative path (a position starting from Path workingDirectory)"
"MetacelloAbstractPackageSpec",""
"RBMultiKeywordLiteralToken",""
"MenuGroupModel","I am a group of menu items.I am part of a menu, and groups items by meaning"
"IRPushArray","I model the pushArray bytecode.Used for setting up the temp vectors and for the brace array construct: { }."
"MacStore","I'm a specific store for OSX file systems"
"ManifestNonInteractiveTranscript","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"SpecTreeModel","I am tree model used by the Spec infrastructure to provide a ""pluggable"" api since we do not have multiple inheritance in Pharo"
"MorphTreeAnnounce","Announcements for morphic based trees"
"KMAltModifier","I represent the Alt key modifier. Look at my superclass for a more detailed explanaition."
"IRPushDup","Instruction ""pushDup"""
"FreeTypeFontFamilyMember","FreeType FontFamily member  "
"AccessorInstanceVariableSlot","NOTE: this is an example of what can be done with Slots. It is *not* an example of what *should* be done with Slots.I am a slot that compiles accessor methods in the Class that it is installes in.  When the slot is removed, the accessors are removed, too.This example shows how Slots can change the class that they are part of."
"ZnEasyTests",""
"TextColor","A TextColor encodes a text color change applicable over a given range of text."
"FLGlobalSendCluster","I clusterize objects that will be obtained on materialization via a message send to a global object. Explained with an example:Suppose we have a special instance of User that represents the admin user, and it is a unique instance in the image. In case the admin user is referenced in our graph, we want to treat that object as a global. We can do that in this way:User >> fuelAccept: aVisitor    ^self == User admin        ifTrue: [aVisitor visitGlobalSend: self]        ifFalse: [super fuelAccept: aVisitor]User >> fuelGlobalName    ^#UserUser >> fuelSelector    ^#adminSo what will happen is that during serialization, the admin user won't be completly serialized (with all its intance variables) but instead its global name and selector are stored. Then, at materialization time, Fuel will send the selector #admin to the class User, and use what that answers as the admin user of the materialized graph.We test this feature in FLGlobalSendSerializationTest."
"FT2Handle","handle holds a (typically 32-bit) pointer to an externally managed object."
"SDL_JoyDeviceRemovedEvent","SDL2 library structure representing a joystick device removed event data."
"JobEnd","A JobChange is an announcement for a job end.A JobChange is an announcement for a job change. To get notifySystemAnnouncer uniqueInstance 	on: JobEnd send: #XXX to: whoever."
"VariableLayout","I am the default layout for variable sized objects such as Array.I contain a fixed number of Slots plus.Instances of classes using this kind of layout have only a minimum given size. Instances have a custom number of additional fields which can be accessed with an index."
"RBLintRule","I represent an executable check applied on an environment (groups of classes, methods... )"
"RBUtilityMethodsRule","List methods that have one or more arguments and do no refer to self or an instance variable. These methods might be better defined in some other class or as class methods."
"RxMatchOptimizer","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A match start optimizer, handy for searching a string. Takes a regex syntax tree and sets itself up so that prefix characters or matcher states that cannot start a match are later recognized with #canStartMatch:in: method.Used by RxMatcher, but can be used by other matchers (if implemented) as well."
"SystemDictionary","I represent a special dictionary used as global namespace for class names :	Smalltalk globals classNames.and for traits too:	Smalltalk globals traitNames.	and a few other globals:	(Smalltalk globals keys		reject: [ :k | 			| g |			g := Smalltalk globals at: k.			g isBehavior or: [ g isTrait ] ]) collect: [ :k | k -> (Smalltalk globals at: k) class ].As the above example let you guess, the global namespace of Smalltalk system is accessed through:	Smalltalk globals."
"GLMOriginPortReference","Used by BundleTransmission to annotate its originating ports whether they are active or passive.When a BundleTransmission consideres a port as active, the browser will trigger it when the corresponding port changes."
"RBRenameClassRefactoring",""
"GLMMorphicPaneWithoutTitleRenderer",""
"MCAncestry","Abstract superclass of records of ancestry."
"RGTraitDefinitionTest","SUnit tests for trait definitions"
"ZnFileRetrieveContents","I am ZnFileRetrieveContents.I am a ZnUrlOperation.I implement the #retrieveContents URL operation for FILE urls.Part of Zinc HTTP Components."
"BooleanTest","This is the unit test for the class Boolean. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"MetacelloLookupProjectSpecForLoad","**MetacelloLookupProjectSpecForLoad** ends up returning an instance of **MetacelloProjectSpecForLoad**"
"ClassCommented","This announcement will be emitted when a class or a trait comment changes"
"UUID","A class to generate UUIDby John M McIntosh johnmci@smalltalkconsulting.comSee http://www.webdav.org/specs/draft-leach-uuids-guids-01.txtIf a plugin does not exist then we generate a UUID version 4 type GUUID"
"ClassFactoryForTestCaseTest","SUnit tests for ClassFactoryForTestCase "
"DebugSystemSettings","Settings for debugging"
"DAAbstractItemDiff","A PDAbstractItemDiff is a object which represent an item who added/modified/removed from an old analysis."
"NautilusShowCategoriesChanged","A NautilusShowCategoriesChanged is raised the value showCategories changed"
"TxBasicViewMorph",""
"SystemReporter","SystemReporter offers a window where information about the system is gathered. This can be easily copied to the clipboard and be attached to a bug report for better identification of the context the bug occured in.To extend the SystemReporter:	- add a method		reportXYZ: aStream	  to the reporting category	- insert a line		add: #XYZ method: #reportXYZ	  to the initialize method"
"OCCompileWithFailureTest","I have tests for the curious capability of Opal to compile code with syntax errors.Instead of raising syntax errors at runtime, they are raised at compile time."
"RFEntityReification","#entity stands for the structural entity that the link is installed on. It is #node for AST nodes, #variable for variables."
"CommandLineUIManager","I am UI manager for a headless setup.I block all UI manager API that uses Morphs and will trow an error instead."
"TxTextAdapter",""
"SourceCodeFonts","I'm a font setting for Source Code Pro fonts."
"GTEventCollectorsTest","A GTEventCollectorsTest is a test class for testing the behavior of GTEventCollectors"
"MacRomanTextConverter","Text converter for Mac Roman.  An encoding used for the languages originated from Western Europe area."
"FileSystemStore","I am an abstract superclass for store implementations. My subclasses provide access to the actual data storage of a particular kind of filesystem. The file system can be accessed via	FileSystem disk 	FileSystem memory	My associated filesystem can be accessed as follows:      DiskStore currentFileSystem"
"ZnServerStoppedEvent","ZnServerStoppedEvent notes the shutdown of an HTTP server is complete."
"SDL_Event","This is a raw SDL2 event"
"OpalEncoderForV3","I add behaviour to Encoder to size and emit bytecodes for the Squeak V3.x VM bytecode set.  The intention is for another subclass to restrict the range of bytecodes used to long forms only, allowing the bytecode set to be redefined by avoiding using the many short forms.  The short forms may then be reassigned."
"SlotSilentTest","I am an abstract class to silence certain parts of the system while running tests in my subclasses.Currently this class silences the SystemAnnouncer and sets the Author to the class name when a test is run. "
"GLMItemAdded",""
"MorphWithSubmorphsWrapper","Display a morph in a SimpleHierarchicalListMorph, and arrange to recursively display the morph's submorphs.  The ""item"" that is wrapped is the morph to display."
"ZnServerWriteErrorEvent","ZnServerWriteErrorEvent signals an error during the writing of a response. These errors are considered mostly benign and the connection gets closed."
"SpecTableLayoutSend","A SpecTableLayoutSend is a spec layout action used when a selector is sent to the layout. It differs from SpecLayoutSend by being independent from specific layout."
"AthensSimplePathBuilder","i building path containing from AthensPathSegment. the resulting path is backend neutral (while different backend may implement own builder which is more efficient)"
"BalloonEngineConstants","Constants for the baloon engine"
"MetacelloAllowLockedProjectChange",""
"ZnUserAgentSessionTests",""
"GLMBrickThemer","A GLMBrickThemer is the main Brick themer class where styles for core and basic Bricks are defined.Instance Variables	modules:		<Dictionary>modules	- dictionary with all registered style modules with association module name -> module"
"GeneralScrollPane","A scroll pane that handles its contents accurately."
"TxViewDecoratorMorph","This is not a decorator pattern."
"GTSpotterExceptionMock1",""
"DisplayTransform","This class represents a base for generic transformations of 2D points between different coordinate systems (including scaling and rotation). The transformations map objects between one coordinate system and another where it is assumed that a nested hierarchy of transformations can be defined.It is assumed that transformations deal with Integer points. All transformations should return Integer coordinates (even though float points may be passed in as argument).Compositions of transformations MUST work in the following order. A 'global' transformation (the argument in #composedWithGlobal:) is defined as a transformation that takes place between the receiver (the 'local') transformation and any 'global' point computations, whereas a 'local' transformation (e.g., the argument in #composedWithLocal:) takes place between the receiver ('global') and any 'local' points. For the transformation methods this means that combining a global and a local transformation will result in the following order:		globalPointToLocal: globalPoint			""globalPoint -> globalTransform -> localTransform -> locaPoint""			^localTransform globalPointToLocal:				(globalTransform globalPointToLocal: globalPoint)		localPointToGlobal: localPoint			""localPoint -> localTransform -> globalTransform -> globalPoint""			^globalTransform localPointToGlobal:				(localTransform localPointToGlobal: localPoint)"
"MetacelloValueHolderSpec",""
"SimpleHierarchicalListMorph","Display a hierarchical list of items.  Each item should be wrapped with a ListItemWrapper.For a simple example, look at submorphsExample.  For beefier examples, look at ObjectExplorer or FileList."
"TestSuiteEnded","This announcment is thrown when a test suite just finished (more precisly when hisoties are updated)"
"KeymapBrowser","A KeymapBrowser  shows a list of all defined keymappings.It shows a filterable list of keymap shortcuts,  name and categories.Use the context menu to browse the method that defines the shortcut."
"GLMCustomColumn",""
"GLMMorphicStackerRenderer",""
"BIConfigurableFormatterFormattingTest",""
"KMBuilder","I am a keymap builder that is used when configuring keymappings by pragmas.Send me the #shortcut: message with a keymap name, so I give you a specific builder to build a keymap.You can also tell me to install a category as global."
"HDCoverageReport","Hudson report for test coverage"
"StringTest","This is the unit test for the class String. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"ZnSimplifiedClientTransactionEvent","ZnSimplifiedClientTransactionEvent is a ZnClientLogEvent that notes the completion of a client side HTTP transaction (request/response). Only a limited number of simpler data is held. ZnClientTransactionEvent contains much more detailed data.Instance Variables	method: HTTP verb	url: ZnUrl requested	response:	numeric response code	size: number of bytes in response	duration: millisecondsZnSimplifiedClientTransactionEvent is ideal for classic HTTP logging with little overhead through its default string representation."
"OSTouchActionPointerUpEvent","A non-primary pointer has gone up."
"STONReaderTests","STONReaderTests test materialization."
"CollectionIsEmpty","I am CollectionIsEmpty, an exception indicating that an operation was attempted on an empty collection where that does not make sense.I am an Error and thus an Exception.The collection that is empty is in my inherited signaler instance variable."
"ConfigurationOfFuel","Fuel is a general-purpose object serialization framework.See more information in our website:http://rmod.lille.inria.fr/web/pier/software/Fuel/"
"CircleMorph","I am a specialization of EllipseMorph that knows enough to remain circular."
"GoferPackageReference","A GoferPackageReference refers to the latest version of a Monticello package."
"NNavDirectionSibling","I'm the one who knows how to navigate in an horizontal way visiting node in the same level statin from left to right "
"RBTemporaryToInstanceVariableRefactoring",""
"MBCommandMetacelloTests",""
"RBSuperSendsRule","Rewrite super messages to self messages when both refer to same method"
"TestCaseStarted","This event is announced when testing a test case starts."
"BMPReadWriter","I read and write BMP files.Example to save and load a screenshot of the world in a .bmp file:BMPReadWriter    putForm: (Form fromDisplay: (0@0 corner: 400@400))   onFileNamed: '/tmp/screenshot.bmp'.(ImageMorph withForm: (BMPReadWriter formFromFileNamed: '/tmp/screenshot.bmp')) openInWindow."
"RubSmalltalkScriptingMode","I represent the mode to use for editing smalltalk script (class creation script for example)"
"RBOnlyReadOrWrittenVariableRule","This smell arises when an instance variable is not both read and written. If an instance variable is only read, the reads can be replaced by nil, since it could not have been assigned a value. If the variable is only written, then it does not need to store the result since it is never used. This check does not work for the data model classes since they use the #instVarAt:put: messages to set instance variables."
"OCPragmaTest",""
"FT2Outline","@instVar: contoursSize - The number of contours in the outline.@instVar: pointsSize - The number of points in the outline.@instVar: points - an array of  26.6 fixed point integer pairs giving the outline's point coordinates.@instVar: tags	- an array of pointsSize bytes, giving each outline point's type. (counting from 0)If bit 0 is unset, the point is 'off' the curve, i.e., a Bézier control point, while it is 'on' when set.Bit 1 is meaningful for 'off' points only. If set, it indicates a third-order Bézier arc control point; and a second-order control point if unset.@instVar: contours - an array of contoursSize shorts, giving the end point of each contour within the outline. For example, the first contour is defined by the points '0' to 'contours[0]', the second one is defined by the points 'contours[0]+1' to 'contours[1]', etc.@instVar: flags - a set of bit flags used to characterize the outline and give hints to the scan-converter and hinter on how to convert/grid-fit it."
"ErrorNonInteractive","This error thrown when image runs in non-interactive mode (no user intervention possible nor expected),but application trying to use tools which require user's intervention.For example, in headless image application trying to query a user name, or dialog to confirm with proceeding some action."
"Text","I represent a character string that has been marked with abstract changes in character appearance. Actual display is performed in the presence of a TextStyle which indicates, for each abstract code, an actual font to be used.  A Text associates a set of TextAttributes with each character in its character string.  These attributes may be font numbers, emphases such as bold or italic, or hyperling actions.  Font numbers are interpreted relative to whatever textStyle appears, along with the text, in a Paragraph.  Since most characters have the same attributes as their neighbors, the attributes are stored in a RunArray for efficiency.  Each of my instances has	string		a String	runs		a RunArray"
"SingleTreeTest","SUnit tests for a single file system tree (depth one)"
"TelnetProtocolError","Abstract super class for exceptions signalled by clients based on the telnet protocol."
"CustomHelp","This is a common superclass for custom help. Subclasses of this class are automatically included into the system help.By default the informations provided on the receiver class are converted into help topics by a specific builder - here the CustomHelpHelpBuilder. Note that you can provide an own custom builder by overriding the #builder method"
"MetacelloProjectRegistration",""
"GLMMorphicExamplesTest",""
"ByteSymbolTest","SUnit tests for byte symbols"
"GLMCollapsableBrick",""
"ReparseAfterSourceEditing","Notify about the need to reparse after source code was edited"
"GLMTextPresentationTest",""
"TxApplicationWithToolbar","TxApplicationWithToolbar new openWithSpec"
"GLMMorphicTreeRenderer",""
"GTInspectorTagFilter","GTInspectorTagFilter implements a filtering strategy for presentations based on tags.A tag is defined as the parameter of the prama <gtInspectorTag:>. A method can have one or more tags.The filter returns true for a method if that method contains at least a tag selected in the filter. To be taken into account during filtering a tag must be first added to the filter and the selected. Only tags that have been first added can be selected.  If a method does not define any tags the filter threats that method as having a single tag stored in the #defaultTag instance variable. The default defaultTag is #custom. The #basic tag  groups the Raw and Meta presentations. Inspect 'GTInspectorTagFilter new allPragmasWithTag' to view all pragmas creating the tags."
"RubShoutStylerDecorator","I am the shout styler decorator for a text area, I highlight the text "
"TextEditorTest",""
"WeakValueDictionary","I am a dictionary holding only weakly on my values. Clients may expect to get a nil value for any object they request."
"DebugActionExecuted","A DebugActionExecuted is an event send to the debugger after a debugging action is executed.Instance Variables	actionId:		<Object>actionId	- xxxxx"
"VSCommitVersion","I ennumerate version kind (major.minor.patch)One commit can be just one of the 3.My children represent them clearly.I'm used to commit projects.  I try to represent semantic versionning. Please, visit: http://semver.org/ for lerning what it means."
"DelayExperimentalSpinScheduler","I determine the resume time of Delays, then schedule them to wake up at the appropriate time.  I consist of two inter-coupled parts:  1. a ""timing-priority"" side (i.e. thread running at the very highest priority in the system) that maintains the suspendedDelays Heap data structure containing Delays ordered on resume times, and at the appropriate time signal each Delay's  /delaySemaphore/.  Related methods belong to the ""timer process"" protocol.  2. an ""application-priority"" side used by application code, running at the same priority as the calling code, which pass Delays to the timing-priority side. Related methods belong to the ""low priority processes"" protocol.The two sides operate in a multi-producer single-consumer paradigm synchronised via /timingSemaphore/.  Only the timing-priority thread waits on /timingSemaphore/, while this is signalled by many application-priority processes as well as the VM.The timing-priority event loop cycles in #runTimerEventLoop, sleeping until /timingSemaphore/ is signalled, either from the VM at a time previously set by  #primSignal: atUTCMicroseconds: , or from application-priority code via #schedule: or #unschedule.  Actual processing is done in #handleTimerEvent:.To schedule a Delay, an application thread passes it via #schedule: into the /scheduledDelay/ variable, then signals a /timingSemaphore/ event that wakes up the timing-priority thread to process the /scheduledDelay/.  The system's implicit cooperative multiasking ensures no task-switch can occur between /scheduleDelay/ being set and timingSemaphore is signalled, which ensures /scheduledDelay/ is cleared to nil by the timing-priority thread before any other thread can overwrite /scheduledDelay/.  However, to be more robust in case of furture changes to the multiasking semantics change, I can be selected via ""World > System > Settings > Setting > Delay scheduler"".To compare the different delay schedulers...   1.   ""World > Tools > Process Browser"", and set to auto-update.   2.   Transcript open.   3.   DelayBenchmark runAll."
"QANautilusPluginMorph","I am a morph the plugin displays. I constist of list of critics and a refresh button"
"IRRemoteArray","I model the TempVector for the decompiler"
"MBBaselineInfo","A MBBaselineInfo holds information on a baselinf of a configuration."
"RBEndTrueFalseRule","Checks for ifTrue:ifFalse: blocks that have the same code at the beginning or end. While you might not originally write such code, as it is modified, it is easier to create such code. Instead of having the same code in two places, you should move it outside the blocks.For example, test 	ifTrue: [self foo. self bar ] 	ifFalse: [ self foo. self baz ] is equivalent to: self foo.  test 	ifTrue: [ self bar ] 	ifFalse: [ self baz ]"
"FFIConstants",""
"ZnEntity","I am ZnEntity, an abstract HTTP Entity.An entity has a content type (mime-type), a content length (byte length) and a contents.Entities can encode and decode themselves to and from binary streams.Part of Zinc HTTP Components."
"NautilusWindow","I am a subclass of StandardWindow with my own iconMaybe I'm useless, but right now I'm not on the top of the to do list"
"ZipWriteStreamTests",""
"TabLabelMorph","Specially themed label used for tab selector items. "
"FTSelectionChanged","I announce a selection change (usually a click, but can also be done with arrows up and down).Description-------------------I store the old selected rows and the new selected row. I should be use to act with the user when he interact with a Fast Table.Public API and Key Messages-------------------- #from: arrayOfIndexes to: arrayOfIndexes 		is the commun constructor. Internal Representation and Key Implementation Points.------------------    Instance Variables	newSelectedRowIndexes:		An array of indexes that store the new selection.	oldSelectedRowIndexes:		An array of indexes that store the old selection.			From the index you can get an object from the FTTableMorph with: aFTTableMorph dataSource elementAt: selectedRowIndex "
"RubTextAcceptRequest","I am raised when the text is accepted in the view"
"GLMBrickLayouter","A GLMBrickLayouter is Brick's brand new layout system.It builds a graph where each Brick corresponds two nodes: WidthNode and HeightNode.  Each node can have 4 states:1 - depends on parent2 - depends on children3 - depends on itself4 - depends on opposite node.Layouter traverses graph from root WidthNode. Depending on state it behaves differently:1) If layouter meets node with state 1 it checks if its parent already positioned and its height or width calculated. Otherwise it returns to such node later as soon as it finished with parent. If node with state 1 has parent with state 2 a LayoutCycleException must be reaised.2) If layouter meets node with state 2 it must skip it and continues traversing all children until all of them are not positioned. As soon as it happens it returns back to skipped node. In case any of children of node with state 2 has state 1 a LayoutCycleException must be reaised.3) If layouter meets node with state 3 it immidiately calculates corresponding value and applies it. Then it checks if there is an unvisited child node. If yes moves to it, otherwise returns to parent node.4) If layouter meets node with state 4 it swaps its working node to opposite and continues traversing. For WidthNode opposing node is HeightNode and for HeightNode it is WidthNode.  If both nodes have state 4 a LayoutCycleException must be raised.Instance Variables	rootHeightNode:		<Object>	rootWidthNode:		<Object>rootHeightNode	- xxxxxrootWidthNode	- xxxxx"
"SlotErrorsTest",""
"ManifestRingChunkImporter","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"AbstractFontStoredSetting","I am an abstract class and my subclasses are responsible for storing information about a font object. "
"KMKeyCombinationSequence","I represent a sequence of key combinations.In order to have a match between me and a user's key presses, all user events must match all of my inner shortcuts in the same exact order.To create a sequence of key combinations use the #, message. Like for example:$a command , $b shift"
"Point","I represent an x-y pair of numbers usually designating a location on the screen.My instances are created either using the message @ or x:y: or r:degrees: as follows:[[[| pt |pt := 10@20.pt x > 10pt y> 20 			 ]]][[[| pt |pt := Point x: 10 y: 20.pt x > 10pt y> 20 			 ]]]I define many nice messages that deal with point such as: - arithmetic such as +, *, reciprocal, min, abs,- comparison <, <=, =, >, >=, closeTo: - geometry such as sideOf:, to:intersects:to:, - polar coordinates,- extent such as scaleTo:- transformation such as negated, translatedBy:, scaleBy:- rounding with roundTo:, roundUpTo:, truncateTo:, truncated"
"DAClassNode","A PDClassDependencyNode is the superclass node for PDInheritanceNode and PDTraitDependencyNode. Indeed these two nodes have the same behavior to browse the dependency in the Nautilus UI."
"PharoTutorialTestNavigation","SUnit tests for tutorial navigation"
"GLMExamplesBrowser","self new  openOn: GLMBasicExamples"
"RubTextStopConditions","I represent the conditions to stop the scan"
"GLMHintableActionButtonBrick",""
"SimpleTestResourceA1","I'm a simple test ressource for test purposes"
"AthensCairoPath","i used to hold shapes built by path builder in cairo backend"
"SimplestClassListWithPagerExample","SimplestClassListWithPagerExample new openOn: Object"
"GoferLoad","Loading for specific packages using Gofer"
"GlobalIdentifierMerger","I am able to merge dictionaries of existing (in the image) and stored (on a disk) values.First, I identify if the image values belongs to the current computer. Then I decide to favor existing or stored values. It is importatnt to notice that I change the existing dictionary received by #existing: message. GlobalIdentifierPersistence used me when he needs to load values from the local disk.Collaborators: GlobalIdentifierPersistence Public API and Key Messages- existing:- stored: - mergeExample:	GlobalIdentifierMerger new		existing: (Dictionary newFromPairs: #(#a 1 #b  2));		stored: (Dictionary newFromPairs: #(#a 3 #c  4));		merge;		existing Internal Representation and Key Implementation Points.    Instance Variables	existing:		<Dictionary>	stored:		<Dictionary>"
"GLMTextMorphicTest",""
"ZnChunkedStreamTests",""
"GLMAccumulator","An GLMAccumulator is an implicit type of browser that has the following behavior:- each input entity has associated a pane without any relationship with the other panes- based on the input entity if there already exists a pane associated, it is selected via GLMPaneSelected- if there isnt a pane, a new pane is created- based on entityToSelect, the associated pane is searched and potentially selected- when a pane is selected in the user interface, the activeEntity is populated with the entity behind the selected paneInput ports:- entity- entityToSelectOutput ports:- activeEntity"
"RFObjectReification","Using the ObjectRefification, one can pass a pointer to the object where the link is installed in"
"AthensPluggableTextMorph","this class is subject of changes/removal. do not use it."
"RFArgumentsReification","reify args"
"VSCommitProjectAction","I'm a project action who makes a new configuration for a project and commits it to repository."
"MorphicDropListAdapter","I am the adapter used to bridget a DropListModel and a DropListMorph"
"GTSpotterContext",""
"ExternalAddress","An ExternalAddress is an opaque handle to objects outside Smalltalk memory (e.g., a pointer)."
"VSDirtyCollector","I'm a visitor to collect all dependencies of a package."
"EncodedCharSet","An abstract superclasss of the classes that represent encoded character sets.  In the old implementation, the charsets had more important role.  However, in the current implementation, the subclasses are used only for keeping the backward compatibility.	The other confusion comes from the name of ""Latin1"" class.  It used to mean the Latin-1 (ISO-8859-1) character set, but now it primarily means that the ""Western European languages that are covered by the characters in Latin-1 character set."
"SHStylingOrNotDependingOnModelState","I'm a example that shows how to have a simple editor in which text is highlighted or not depending on the editor model state.  Try it with:SHStylingOrNotDependingOnModelState new open.Thus, depending on the model state, the view should be styled or not styled. This is achieve by implementing a #shoutAboutToStyle: method in the model (here, an instance of myself). #shoutAboutToStyle: returns true if the view which is passed as argument must be styled. In this excample, if the value of the 'state' instance variable is #code, then the text is hilighted, else it is not.Instance Variables:	code	<Text>	codeEditing    <Boolean>"
"GTFilterRegex",""
"SDL2TouchStateMachine","my role is to record the movements of a finger and associate a color to this movement"
"RBRemoveParameterTest",""
"DAReferenceDependencyNode","A PDCycleNode is used to display a reference dependency in a tree."
"NautilusShowInstanceChanged","A NautilusShowInstanceChanged is raised when the value of showInstances is changed"
"MCGitBasedNetworkRepository",""
"FFIOpaqueObjectTests",""
"GLMListPresentationTest",""
"ZnEntityWriter","I am ZnEntityWriter, I help writing ZnEntities to a stream given meta data in headers.I deal with chunking and gzip encoding.Part of Zinc HTTP Components."
"PSMCPatchOperationWrapper",""
"InputEventSensor","An InputEventSensor is a replacement for the old Morphic EventSensor framework.It updates its state when events are received so that all state based users of Sensor (e.g., Sensor keyboard, Sensor leftShiftDown, Sensor mouseButtons) will work exactly as before. The usage of these funtions is discouraged. Instance variables:	mouseButtons <Integer>	- mouse button state as replacement for primMouseButtons	mousePosition <Point>	- mouse position as replacement for primMousePt	eventQueue <SharedQueue>	- an optional event queue for event driven applications	modifiers		<Integer>	- modifier statesClass variables:	ButtonDecodeTable	KeyDecodeTable"
"RBSendsMethodDictRule","Nobody should directly access the method dictionary. It is purely an implementation artefact that we use one dictionary and it might change in the future."
"MCAncestryTest",""
"GLMBoundPort",""
"RBRefactoringTest",""
"NBExternalArray","I'm a stub class intended just to easy migration from NB to UFFI. The corresponding class to replace me is: FFIExternalArray.MIGRATION NOTES: Translation from old NB arrays to UFFI arrays is not authomatic, but is fairly easy: you do not need to extend arrays (unless you want it)... look for senders of FFIExternalArray to know how to proceed properly."
"AthensParagraph","this class is subject of changes/removal. do not use it."
"ReturnValueDebugAction","A ReturnValueDebugAction forces a return of a given value to the previous context"
"WeakIdentityKeyDictionaryTest","SUnit tests for weak identity key dictionaries"
"ExampleForTest12","An example class at level 2 (indirectly below Object) used for testing class hierarchy"
"FLClusterization","I manage the clusters collected during the analysis step of serialization."
"MBConfigurationPackageHistoryCommand","Command to browse package history for configurations in versionner"
"GTSpotterCandidateSelectedMoved",""
"RGSlice","A slice is an arbitrary container of elements (working unit)By inheritance it knows how to treat classes and methods"
"MCOrganizationDefinition","A MCOrganizationDefinition represents a category change. "
"AthensBalloonSurface","I am concrete implementation of Athens surface which using balloon engine for rendering. "
"GLMTestAnnouncement2",""
"Interval","I represent a finite arithmetic progression (a range of number).Description--------------------------I allow to iterate easily on a range of number (for example to manupulate an index) with a define step (by default one by one).I know at which number I begin, at which number I end and the step.I work with the Number class. I manipulate some numbers and I can be created from a Number.  Public API and Key Messages--------------------------- I implement most of the classic Iterators as #do: or #collect:.- #from: to: and #from: to: by:  are my two common contructors. But I am usually created by a message send on Number  (See examples).Examples --------------------------To create an Interval from 1 to 100 there is many ways:	Interval from: 1 to: 100	or	Interval from: 1 to: 100 by: 1		or from a Number 		1 to: 100 	or 	1 to: 100 by: 1		You can also use floats or fractions: 		0.1 to: 0.5 by: 0.01	or	1/10 to: 1/2 by: 1/100		NB: both expressions will not give exactly the same result. The first will contains only floats and the second only fractions.	 Internal Representation and Key Implementation Points.--------------------------    Instance Variables	start:		<Number> 	The beginning of the Interval.	step:		<Number> 	The end of the Interval.	stop:		<Number> 	The step of the interval. If the step is 3 and we begin at 1 the interval will be 1, 4, 7, 10, 13… until the end."
"ConfigurationOfMooseAlgos","self loadDevelopment"
"CopyToClipboardDebugAction","A CopyToClipboardDebugAction copies a short debugging stack to the clipboard."
"IRPopIntoInstVar","Pop into instance variable."
"OSTouchHoldEvent","Fingers are staying on the screen"
"ReadWriteStreamTest","This is the unit test for the class ReadWriteStream.Unit tests are a good way to exercise thefunctionality of your system in a repeatable andautomatic manner. They are therefore recommended ifyou plan to release anything. For more information,see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"GTGenericStackDebugger","I am a browser that provides Smalltalk debugging functionality. "
"GLMTabSelectorBrick","A GLMTabSelectorBrick is a simplified TabSelectorMorph with support of smart tab resizing.New implementation doesn't have any scrollbars or scroll arrows.Instance Variables	controls:		<Object>	font:		<Object>	selectedIndex:		<Object>	tabs:		<Object>	visibleTabRange:		<Object>	wrapScrolling:		<Object>controls	- xxxxxfont	- xxxxxselectedIndex	- xxxxxtabs	- xxxxxvisibleTabRange	- xxxxxwrapScrolling	- xxxxx"
"ChunkFileFormatParser","I represent the chunk file format.  Right now I know how to parse chunks from a readStream, but not how to write them."
"FFIMethodRegistry","I keep a  registry of FFI prepared methods. Registry is used to know exactly which methods are executing FFI-NB calls and then which ones need to be recompiled when a platform has change."
"CheckboxButtonMorph","Checkbox/radio - button only."
"TxPasswordSpan","- this class need further revision. don't use"
"GLMCompositePresentation","A composite presentation offers means to control the composition of multiple presentations by providing the arrangement of these presentations."
"BlockClosure","I contain a sequence of operations. I am defined by Smalltalk expressions inside square brackets. I permit to defer the enclosed operations until I execute a variant of #value. I can have my own arguments and temporaries as a regular method, but I am also able to use external variables: my enclosing method or block temporaries, arguments and receiver.examples :[ 1 + 2 ] value[ :arg | 	| temp | 	temp := arg. 	temp ] value: 5[ ^ 5 ] valueMy return value corresponds to my final expression. A non local return (^) has the same effect as if I did not exist: it returns from my enclosing method, even if I'm nested in other blocks. Implementation:Instance variables:	outerContext <Context|nil> context that defined me	startpc: <SmallInteger> (pc = program counter) offset of my first bytecode instruction in the compiledMethod bytecode  	numArgs: <SmallInteger> my number of argumentsI am created at runtime through a special bytecode:closureNumCopied: x numArgs: y bytes z1 to z2On creation, the currently executed context is set to my outerContext, z1 is set as my startpc and y is set as my numArgs. After my creation, the current execution flow jumps to my last bytecode, z2, to skip the execution of my bytecode which is deferred until I execute a variant of #value.I am executed when I receive a variant of the message value. This message creates a new context, a block context <MethodContext>, which reference me in its variable closureOrNil. This new context executes my bytecode, which correspond to a subset of the bytecode of my enclosing method, starting at startpc and ending in blockReturn/return bytecode.Accessing variables of the my enclosing context is different depending on variables because of various optimizations:- self: I access the receiver of my enclosing method by accessing my context's receiver, which is always set to the enclosing method receiver.- copied variables: If I read a variable from an outerContext but I don't write into it and the variable is not modified after the BlockClosure creation, then the variable is copied in the blockClosure to be more efficient. - full variable: If I access and edit a variable from an outerContext, then the variable is stored in an external heap allocated array (named tempVector). The tempVector is known by the method and the block so they can both read and write these variables.Optimized block closures: Common blocks (2/3 of the blocks) are optimized directly in the compiler and have special behaviors. These blocks are the arguments/receiver of control structures: #ifNil:, #ifNotNil:, #ifTrue:, #ifFalse:, #whileTrue:, #whileFalse:, #to:do:, #to:by:do: ."
"MalDisjointSetsNextNode",""
"MorphTreeNavigationBar","I'm a pager control used to navigate in a MorphTreeMorph that has a lot of entries.You can see one of my subclass in action using:""May take a while to open""ClassListExample new open"
"SimpleTestResourceTestCase","SUnit tests for simple test resources"
"OpalBytecodeEncoder","I am an abstract superclass for different bytecode set encoders.  Subclasses inherit the literal management of Encoder and encapsulate the mapping of opcodes to specific bytecodes."
"UpdateStreamerTest","SUnit test for update streamer"
"FFIFloat128","I'm a 128bits (cuadruple precision) float. It is usually not used, but some compiler modes support it (__float128 in gcc)THIS IS NOT YET SUPPORTED"
"OSTouchTwoFingersRotationDetector","I am detecting the rotations made with two fingers.I send these event back to my handler: 	- OSTouchTwoFingersRotationBeginEvent 	- OSTouchTwoFingersRotationMoveEvent 	- OSTouchTwoFingersRotationEndEvent "
"IRSequence","A sequence is corresponds to a block in the control flow graph."
"MetacelloFetchingMCSpecLoader",""
"FFICalloutMethodBuilder","I build FFI method bytecodes for a call. "
"FileDialogWindow","Dialog based file chooser for selecting or saving files. Supports various types of answer (file stream, file name, directory path etc) with optional extension filters and image or text file preview."
"TxTextStyles","I manage styles for a text, providing at least a default.Implementation note: except for my default style, I hold the style list weakly, so they will be automatically removed if unused."
"GTStonPackingTest",""
"MetacelloGoferPackage",""
"ReMissingMethodCritic","This kind of critics occur when a method is missing. The critic cnows what is the selector of the missing method, and it's perspective class. Also a sourcecode of a method can be specified. For now there are two shortcuts for the source code, that set it to either subclassResponsability or shouldBeImplemented "
"MetacelloVersionDoesNotExistError",""
"VSCommitMinorCommand","I open commit tool to create a MINOR version of target configuration."
"MessageCatcher","Any message sent to me is returned as a Message object.""Message catcher"" creates an instance of me."
"MetacelloPackageSpecTestCase",""
"RubTextComposer","I represent the composer of a text, I am used to represent a paragraph"
"GLMFormBrick","A GLMFormBrick is scriptable html-like form with possibility to submit it."
"ExampleRadioButtonModel","Model used for radio buttons in example of basic controls (see ""UITheme exampleBasicControls"")."
"LazyMorphTreeNodeMorph","A node for ""lazy drawing"" in a morphic based tree"
"TraitCompositionException","Signal invalid trait compositions."
"SugsRenameTemporaryVar","I know how to rename a local variable."
"ProtocolList","I am widget displaying a list with a label.I am used to expose the construction of a spec UI in the Spec documentation."
"RBRefersToClassRule","This smell arises when a class has its class name directly in the source instead of ""self class"". The self class variant allows you to create subclasses without needing to redefine that method.However we cannot systematically replace Class reference by self class or self because a Class reference is static and a self expression is dynamic. So the programmer may want to send messages to root of an hierarchy and not to the leaf classes. "
"ManifestUIManager","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"STONTests","STONTests tests the API offered by STON."
"LabelMorph","String morph with enablement support. When disabled the text will appear inset."
"MCVersionLoaderStopped","Announcement sent when a Version has finished loading"
"RBVariableNodeTest",""
"EditableList","This widget allows you to edit a list of items :- add / remove an item to/from the list - order the list by moving elements up/down/top/bottom.The default behavior is to do a copy of the list. The widget works with its internal copy. It allows the user to accept / reject changes (for example by opening the widget in a DialogWindow) before affecting the original list. It is your responsability to copy EditableList items back to the original list.The addItemBlock is used to provide a way to give the item to add (e.g. a UIManager default chooseFrom: values:).Example:self example"
"CharacterSetComplement","CharacterSetComplement is a space efficient implementation of (CharacterSet complement) taking care of WideCharacter (code > 255)However, it will maintain a byteArrayMap for character <= 255 in a cache keeping instance variables:	absent <CharacterSet> contains character that are not in the set (i.e. my complement)	byteArrayMapCache <ByteArray | nil> cache this information because it has to be used in tight loops where efficiency matters"
"MockContainer","I'm only a fake container, since in some cases to build a context we use the wraped model, and build a full container isn't so simple... "
"DAExtensionDependency","A PDExtensionDependency is an extension dependency between two packages.Instance Variables	selector:		the selector 	method : 		the CompiledMethod		"
"HiddenInstanceVariableSlot","I am a hidden instance variable.I work just like any other ivar, but I am not shown when asking for the #slots of a class.The idea is that virtual slots can use hidden non-virtual slots to store their state. Example are PropertySlot, BooleanSlot..."
"OSTouchThreeFingersScrollEndEvent","Three fingers finished to scroll"
"FFITestStructure",""
"VSVersionMorph","A MTVersionMorph is morph used to display a Metacello version.It display the version string and optional tags (dev, stable, etc.)"
"ArithmeticError","I am ArithmeticError, the superclass of all exceptions related to arithmetic."
"SugsFindSenders","I know how to find senders from a message"
"CompositeFillStyle","Fillstyle supporting compositing of multiple sub-fillstyles."
"VersionnerProjectPackagesPanel","A VersionnerProjectPackagesPanel is the panel related to packages defined in a project (a configuration).It shows packages and provides actions on them.Instance Variables	addPackageButton:		ButtonModel 	editPackageButton:		ButtonModel	packageChangesButton:		ButtonModel	packages: 			A collection of MTPackage to display	packagesList:		IconListModel 	packagesLabel:		LabelModel	project: 	MTProject	savePackageButton:		ButtonModeladdPackageButton	- Add a new packageeditPackageButton	- Edit an existing packagepackageChangesButton	- Get changes on a packagepackages	- the list of packages that belongs to a specfied project (configuration)packagesLabel	- The top label of this paneproject 	- The project owning packages.	removePackageButton	- remove a declared package.savePackageButton	- Commit changes and update package version"
"MCWorkingCopyBrowserTest",""
"GTCodeDebugAction","A GTCodeDebugAction encapsulates the logic for accessing the codePresentation from a debugger."
"RBNotEliminationRule","Eliminate unnecessary not''s in relation of conditionals.For example test not ifTrue:[] is equivalent to test ifFalse:[]' [[[anObject not ifFalse: block']]]is transformed into[[[  anObject ifTrue: block']]][[[aCollection select: [ :each | ... anObject not ] ]]]	is transformed into 	[[[aCollection reject: [ :each | ... anObject ] ]]]"
"TestCaseTest","SUnit test for TestCase class"
"NOCDatedEntry","I keep a symbol entry, along with the last time it was used in the system. I am used to sort the possible answers."
"RBMethodName",""
"FileSystemDirectoryEntry","I am a cache for metadata about a file or directory. The information I hold is as follows:reference	A reference to the file or directory to which my data pertains.	creation	The creation date and time, stored as number seconds since the 	Smalltalk epoch.	modification	The modification date and time, number seconds since the Smalltalk epoch.	isDirectory 	True if my data pertains to a directory, false if a file.	size	Size in bytes for a file, 0 for a directory."
"SpecDebuggerDynamicToolbar","A toolbar that loads its actions dynamically based on pragmas. Only actions annotated with 'self debuggingActionsPragmas' that answer true to the message #appliesToDebugger: are taken into account. The toolbar updates itsetf every time a new value is put in the session (even if it is the same value).  If the session is set before opening the toolbar (before a spec is created) the message #update should be sent to the toolbar.Each debugging actions is displayed by using a SpecDebugActionButton."
"OCASTClosureAnalyzerTest",""
"EyeFloatInspector","I am EyeFloatInspector.I am an EyeInspector.I am a specialized Inspector for Floats.I add extra elements (sign, significand, exponent) of the Float object that I am inspecting.Note that these should be interpreted assign * significand * (2 raisedToInteger: exponent)"
"SDL_ControllerButtonUpEvent","SDL2 library structure representing a game controller button up event data."
"HDReport","A Hudson report"
"TextMorphTest",""
"AthensPathConverter","i am a base class for path conversion. i take a path as input and producing a path commands as output.My default implementation just passing all path commands without changes to destination without any conversionExample of use: converter := AthensXYZConverter dest: (AthensPolygonPath new).convertedPath := converter convert: sourcePath.You can chain multiple converters:basicConverter := AthensZYXConv dest: AthensPolygonPath new. compoundConverter := AthensABCConverter dest: basicConverter.compoundConverter convert: somePathin this case, an initial conversion is performed by instance of AthensABCConverter, and then conversion results are passed down to AthensZYXConv,and then finally to instance of AthensPolygonPath."
"CompositionScanner","A CompositionScanner measures text and determines where line breaks.Given a rectangular zone on input, it is used to split text in horizontal lines, and produce information about those lines on output (at which index a line starts/stops, which vertical space does the line require, which horizontal space if left for adjusting inter-word spacing, etc...)Instance Variables	baseline:		<Number>	baselineAtSpace:		<Number>	lastBreakIsNotASpace:		<Boolean>	lineHeight:		<Number>	lineHeightAtSpace:		<Number>	nextIndexAfterLineBreak:		<Integer>	spaceIndex:		<Integer>	spaceX:		<Number>baseline	- the distance between top of line and the base line (that is the bottom of latin characters abcdehiklmnorstuvwx in most fonts)baselineAtSpace	- memorize the baseline at last encountered space or other breakable character.	This is necessary because the CompositionScanner wants to break line at a breakable character.	If a word layout overflows the right margin, the scanner has to roll back and restore the line state to last encountered breakable character.lastBreakIsNotASpace	- indicates that the last breakable character was not a space.	This is necessary because handling a line break at a space differs from non space.	If line break occurs on space, the space won't be displayed in next line.	If it's another breakable character, it has to be displayed on next line.lineHeight	- the total line height from top to bottom, including inter-line spacing.lineHeightAtSpace	- the line height at last encountered space or other breakable character.	See baselineAtSpace for explanation.nextIndexAfterLineBreak	- the index of character after the last line break that was encountered.spaceIndex	- the index of last space or other breakable character that was encounteredspaceX	- the distance from left of composition zone to left of last encountered space or other breakable character 	See baselineAtSpace for explanation.Note: if a line breaks on a space, a linefeed or a carriage return, then the space, linefeed or carriage return is integrated in the line.If there is a carriage return - linefeed pair, the pair is integrated to the line as if it were a single line break for compatibility with legacy software."
"PostorderGuide","I traverse the filesystem in depth-first post order. Given this hierarchy:alpha	beta	gammadelta	epsilonI would visit the nodes in the following order:  beta, gamma, alpha, epsilon, delta.I use my work instance variable as a stack. I push messages that cause nodes to be traversed or visited, and execute them in reverse order."
"Categorizer","A Categorizer is responsible to manage the class categories and method protocols. Instances consist of an Array of category names (categoryArray), each of which refers to an Array of elements (elementArray). This association is made through an Array of stop indices (categoryStops), each of which is the index in elementArray of the last element (if any) of the corresponding category. For example: categories := Array with: 'firstCat' with: 'secondCat' with: 'thirdCat'. stops := Array with: 1 with: 4 with: 4. elements := Array with: #a with: #b with: #c with: #d. This means that category firstCat has only #a, secondCat has #b, #c, and #d, and thirdCat has no elements. This means that stops at: stops size must be the same as elements size. Instance Variables      categoryArray:          <SequenceableCollection of: Object>      categoryStops:          <SequenceableCollection of: Integer>      elementArray:           <SequenceableCollection of: Object>categoryArray       - holds the list of categories.       A category could be any Object but is generally a String or Symbol.       Categories should be unique (categoryArray asSet size = categoryArray size)categoryStops       - holds the index of last element belonging to each category.       There should be a category stop for each category (categoryStops size = categoryArray size).       The categoryStops should be sorted (categoryStops sorted = categoryStops).       A category stop equal to its predecessor (= 0 for the first category stop) denotes an empty category.elementArray      - holds the elements to be classified. The elements are sorted by category.Class variables       Default is the default category used to classify yet unclassified methods of a class       NullCategory is the category to be displayed in a Browser for a class having no method."
"ZnBufferedWriteStreamTests",""
"ChangeRecord","A ChangeRecord represents a change recorded on a file in fileOut format.It includes a type (more needs to be done here), and additional informationfor certain types such as method defs which need class and category."
"GTGenericStackDebuggerTest",""
"BaselineOfFileTree",""
"RBLiteralArrayToken",""
"GTSpotterA2",""
"WeakSubscriptionBuilder","I am a wrapper around an Announcer, used to create weak subscriptions at subscription time.Use me like this:anAnnouncer weak subscribe: Announcement send: #foo to: barObject.I raise an error for block subscriptions, as they require non-existing Ephemeron support to function correctly."
"KMNoShortcut","I do not match with any keyboard event.I respond to the Null object pattern, since I represent the inexistance of a key combination."
"MorphTreeModel","I'm the base class for tree models.  See ClassListExample for basic usage."
"ZnClientRetryingEvent","ZnClientRetryingEvent signals a client is retrying is main operation. The number of retries is configurable."
"GLMBrickBounds",""
"ZipConstants","This class defines magic numbers taken from RFC1951 [1b], and also possibly RFC1950 [1a] & RFC1952 [1c]. It presets some dictionary structures as described at [1a] 8.1. A class can import these bindings as 'class variables' by including the following in its class definition:    poolDictionaries: 'ZipFileConstants' Following are source references to these constants contained within several class side initialization methods. (These might be better spread through out those methods as time permits) initializeDeflateConstants     WindowSize [2e]""w_size"", [2a]""windowBits is the base two logarithm of windowSize where default windowBits=15""     WindowMask [2e]""w_mask""     MaxDistance [2e]""MAX_DIST""     MinMatch [2c]     MaxMatch [2c]     HashBits [2e]""hash_bits""     HashMask [2e]""hash_mask""     HashShift [2e]""hash_shift"" initializeDistanceCodes     BaseDistance [2f]     DistanceCodes [2f] initializeExtraBits     ExtraLengthBits [1]3.2.5, [2b]     ExtraDistanceBits [1]3.2.5, [2b]     ExtraBitLengthBits [2b]     BitLengthOrder [1]3.2.7, [2b] initializeFixedTrees     [1]3.2.6 initializeWriteStreamConstants     MaxBits [2d]     MaxBitLengthBits [2b]     EndBlock [2b]     StoredBlock [2c]     FixedBlock [2c]     DynamicBlock [2c] [1]3.2.3""BTYPE""     NumLiterals     MaxLengthCodes [2e]     MaxDistCodes [2e]     MaxBitLengthCodes [2e]     MaxLiteralCodes     Repeat3To6 [2b]     Repeat3To10 [2b]     Repeat11To138 [2b] [1a]  ""ZLIB Compressed Data Format Specification version 3.3"" http://www.ietf.org/rfc/rfc1950.txt[1b] ""DEFLATE Compressed Data Format Specification version 1.3"" http://www.ietf.org/rfc/rfc1951.txt[1c] ""GZIP file format specification version 4.3"" http://www.ietf.org/rfc/rfc1952.txt[2] ZLIB Source Code http://zlib.net/zlib-1.2.5.tar.gz[2a] zlib.h [2b] trees.c [2c] zutil.h [2d] inftrees.c [2e] deflate.h [2f] trees.h "
"Timespan","I represent a duration starting on a specific DateAndTime.
"
"MethodIsAbstractAction","Action when the method is abstract"
"BalloonCanvas","BalloonCanvas is a canvas using the BalloonEngine for drawing wherever possible. It has various methods which other canvases do not support due to the extra features of the balloon engine."
"FT2Library","This is a wrapper for the global 'library' in the plugin.It is provided for the use of Cairo APIs that take an FT_Library argument."
"SugsSuggestionPushDownTest","SUnit test for the push down suggestions"
"FindReplaceService","Model for a find and replace service in editors"
"GLMMorphicTest",""
"MetacelloBaselineOfMethodSpec",""
"ModelList","I am a simple list widgetI am used to expose the construction of a spec UI in the Spec documentation."
"GLMPluggableButtonMorph",""
"ObjectFinalizer","Represents an action that is to be taken when a target object (not referenced by the ObjectFinalizer) is garbage-collected."
"MailMessage","I represent an Internet mail or news message.	text - the raw text of my message	body - the body of my message, as a MIMEDocument	fields - a dictionary mapping lowercased field names into collections of MIMEHeaderValue's	parts - if I am a multipart message, then this is a cache of my parts"
"TabLabelItem","I am a special label morph for tabs.This way I can control which of my submorphs to show according to the tab size"
"RBInstanceVariableNode","I am a specialized variable node for instance variables"
"SpecLayoutAddWithSpec","A SpecLayoutAddWithSpec is an action representing an add in the spec layout with a spec selector precised"
"ZnUTF32Encoder","I am ZnUTF32Encoder, a concrete subclass of ZnCharacterEncoder.I implement the fixed length UTF-32 encoding and decoding of Unicode according to http://www.unicode.org/versions/Unicode8.0.0/ch03.pdf definitions D90, D99, D100 and D101.Wikipedia reference http://en.wikipedia.org/wiki/UTF-32UCS-4 is another name for the same encoding.Part of Zinc HTTP Components."
"SmallDictionary","RBSmallDictionary is a special dictionary optimized for small collections. In addition to the normal dictionary protocol, it also supports an #empty message which ""empties"" the collection but may hang on to the original elements (so it could collect garbage). Without #empty we would either need to create a new dictionary or explicitly remove everything from the dictionary. Both of these take more time and #empty.Instance Variables:keys <Array of: Object> array of keys (we don't use Associations for our key value pairs)size <Integer> the size of the dictionaryvalues <Array of: Object> array of our values"
"TraitTest",""
"FinderPragmaMethodNode","A FinderPragmaMethodNode is a method node for a selector name found by the pragma collector. Unlike a FinderMethod node, this node is not bound to unique compiled method, it is just the selector."
"IRPushThisContext","I model push thisContext bytecode"
"PrettyTextDiffBuilder","I'm like TextDiffBuilder, but I use the pretty-printed version of the source code if available.Instance Variables	sourceClass:		<Class>sourceClass	- this class provides the pretty-printer"
"RubCharacterBlock",""
"AverageCost","Part of an test resource to verify that super is well bound.See CompilerEvaluationTest"
"MessageSendDebugAction","A MessageSendDebugAction is an action that sends a message to a receiver with the right amount of arguments. To specify the receiver subclasses have to override the method #receiver. Furthermoe subclasses must specify an id. The selector is optional as the id will be used if no selector is present/Instance Variables	id:		<Object>	selector:		<Object>id	- xxxxxselector	- xxxxx"
"GTEventUnpackingError","I represent an error that appears when a data cannot be unpacked (materialized).Collaborators: GTEventUnpacking"
"MCConfiguration","An MCConfiguration specifies the configuration of a set of related Monticello packages. It maintains an ordered list of package versions and a list of repositories in which the packages may be found.An MCConfiguration may be filed out for storage as an array specification, and new instances can be created from a stored array specification."
"MorphChangedWithArguments","I am an announcement raised when a Morph changed and need to propagate the information to dependents. In addition, I also propagate a value"
"PreorderGuideTest","SUnit tests for class PreorderGuide"
"AbstractKeyPressedPlugin","AbstractKeyPressedPlugin is an abstract plugin which reacts to key strokes by sending the message keyPressed to the plugin."
"RBDetectIfNoneRule","Replaces detect:ifNone: when used with the semantics of anySatisfy: by anySatisfy:.For example, [[[ collection detect: [:each | .... ] ifNone: [nil]) notNil	]]]is transformed into [[[ collection anySatisfy: [ :each | .... ])]]]"
"PragmaType","This models the type of pragma instances.It essentially knows the keyword that defines the Pragma, and can obtain all occurences of that Pragma.!!Example[[[	PragmaType all]]]"
"GLMMorphicWizardRenderer",""
"UnhandledError","I am the ultimate error. By default if an Error or Exception is not handled by the code the default action is to raise an UnhandledError which in interactive mode triggers the UIManager to open a debugger.	Error signal	...	UnhandledError signalForException: error	...	UIManager opens a debugger	"
"FreeTypeFileInfo","File infos for a FreeType font"
"StandardFonts","I am a facade and a global reference to actual fonts to be used system wide in a number of predefined categories.I also provide methods to interactively choose these fonts, to reset all fonts to some default value, to set larger demo fonts, to construct a font menu and to manipulate the current settings as an external specification.The font categories that I know of are: ButtonFont, CodeFont, HaloFont, ListFont, MenuFont and WindowTitleFontExamples:- I open a dialog to choose the font for buttons with:StandardFonts chooseButtonFont.- To change base size for all fonts (when you want big fonts for a screencast or a presentation):StandardFonts setDemoFonts.- Then restore default fonts with:StandardFonts restoreDefaultFonts."
"RFASTTranslator","subclass of Opal that takes links into account"
"PositionableStream","I represent an accessor for a sequence of objects (a collection) that are externally named by indices so that the point of access can be repositioned. I am abstract in that I do not implement the messages next and nextPut: which are inherited from my superclass Stream."
"LazyMorphTreeMorph","I am a MorphTreeMorph, but I only render the rows lazily as they appear on screen. Caveat: There is no rendering in the background. This means that if a row takes too long to render, you can experience a shorter or longer freeze when scrolling."
"MetacelloConfigTemplateExample","Copy me to create a new configuration or edit and evaluate the following doits.        ""Create configuration class and initial baseline method""        MetacelloToolBox                 createBaseline: '1.0-baseline'                for: 'MyProject'                repository: 'http://www.example.com/MyProjectRepository'                requiredProjects: #('Gofer')                packages: #('MyProject-Core' 'MyProject-Tests')                dependencies:                        {('MyProject-Core' -> #('Gofer')).                         ('MyProject-Tests' -> #('MyProject-Core'))}                groups:                        {('default' -> #('Core')).                        ('Core' -> #('MyProject-Core')).                        ('Tests' -> #('MyProject-Tests'))}.	   ""create initial development method from the baseline""         MetacelloToolBox               createDevelopment: '1.0'               for: 'MyProject'                importFromBaseline: '1.0-baseline'                description: 'initial version'."
"JPEGHuffmanTable","I represent the table of values used to decode Huffman entropy-encoded bitstreams.  From the JFIF file header entropy values, I build a derived table of codes and values for faster decoding."
"OSMouseButtonPressEvent","i am delivered when user presses a mouse button"
"SharedPool","A shared pool represents a set of bindings which are accessible to all classes which import the pool in its 'pool dictionaries'. SharedPool is NOT a dictionary but rather a name space. Bindings are represented by 'class variables' - as long as we have no better way to represent them at least."
"FLReplacementMock",""
"RPackageRegistered","I am a public announcement sent when a new RPackage is created"
"RBRemoveMethodChange",""
"TxStartSpan","Start span is span which _always_ first span of text and only one of his kind per text model. So this span used to denote start of text."
"ZnRequestReadEvent","ZnRequestReadEvent is signalled when an HTTP server reads a request in duration milliseconds.Note that the duration can be misleading: when servicing multiple requests over a kept alive connection (the default for HTTP 1.1), the read time includes any wait time (as long as it is below the timeout). The first request read should not contain wait time."
"FTTreeItem","I am an abstract class to define an Item use by a tree data source of Fast table.Description-------------------------------------------------I define the basics methods needed by a FTTreeDataSource. I use FTTreeItem to manage my elements and I am use by a FTFastTable.Public API and Key Messages-------------------------------------------------- #data. anObject from: aFTTreeDataSource	This is my constructor that is use by FTTreeDataSource and myself	Example-------------------------------------------------Should not be instanciate. Internal Representation and Key Implementation Points.-------------------------------------------------    Instance Variables	dataSource:		I am the dataSource that holds this Item. 	children:		I am a collection of Items calculate by the item. I contains the chldren of the Item."
"DateAndTimeUnixEpochTest","Tests for unix epoch of DateAndTime"
"WindowMoved","I am emitted when a window is moved.I provide the old and new window position. A window position changes even when the topleft corner changed by a window resize operation or the windows collapses."
"MetacelloPackageSpecResolutionError",""
"WeakKeyDictionaryTest","SUnit tests for weak key dictionaries"
"NautilusGroupSelected","A NautilusGroupSelected is raised when a group is selected"
"ProtocolOrganizer","A ProtocolOrganizer is part of a ClassOrganizer. It manages the protocols of the class that owns it"
"GLMListingPresentation","This is the abstract class for a presentation that is supposed to show a list of elements. Thus, the displayValue should be a list.Instance Variables:	tagsBlock	<Object>	searchBlock	<MocketryProxy | Object | SMProxy>	filterBlock	<MocketryProxy | Object | SMProxy>	amountToShowBlock	<Object>	allowsMultipleSelection	<Boolean>	tagsFilterBlock	<MocketryProxy | Object | SMProxy>	allowsDeselection	<Boolean>	tagsStyle	<String>	helpMessage	<String>"
"NautilusPluginManagerTree","A NautilusPluginManagerTree is a tree which is used to render the plugins selection"
"SemaphoreTest","A SemaphoreTest is sunit test for simple and multiEx semaphoresInstance Variables none; does not have common test fixture accross all tests (because its testing differenct sorts of semaphores (could refactor into muliple testcases if there were more test conditions."
"MacOSClipboard","The clipboard for MacOS"
"TemporaryVariableTest",""
"RubEditsStateChangedInModel","I am raised when the user starts to edit a text area in the model side"
"CollectVisitor","I am a visitor that collects objects from the nodes I visit. I take a block similar to those passed to Collection>>collect:. I evaluate the block with DirectoryEntries for the nodes I visit, and collect the objects answered into an array.I can use any guide, and the objects in the array I produce will reflect the order imposed by the guide."
"SDL_JoyButtonUpEvent","SDL2 library structure representing a joystick button up event data."
"GTUnorderedFilter",""
"RGMetaclassDefinitionTest","SUnit tests for Ring metaclass definitions"
"CurrentJob","I am a DynamicVariable whose value is the current Job in a process."
"MessageNotUnderstood","This exception is provided to support Object>>doesNotUnderstand:."
"Link","An instance of me is a simple record of a pointer to another Link. I am an abstract class; my concrete subclasses, for example, Process, can be stored in a LinkedList structure."
"MetacelloPackagesSpec",""
"AbstractBinaryFileStream","Provides a simple, platform-independent, file stream. I am    - bynary   - not buffered   - provide no encoding/conversions!Examples of usage""Creating a file""stream := (File named: 'asd.txt' asFileReference fullName) readStream.""Accessing the stream properties""stream position.stream atEnd.""Writing""stream nextPut: 17.stream nextPutAll: 'sdd'.""Reading""stream next.stream next: 2.""Skipping""stream skip: 2. ""reading up to something""stream upTo: 23.stream upToAnyOf: #[ 13 30 ].""peeking""stream peek."
"FLPharo2Platform",""
"IconicButtonStateHolder","An IconicButtonStateHolder is a state holder for Iconic button.Since Nautilus cache the icon, I do not want to keep pointers to the iconic button's target.I use this state holder for the storage"
"OCLiteralList","Holds a unique ordered collection of literals"
"MaybeContextInstanceVariableNode","This class conspires to arrange that inst var access for contexts is done exclusively using the long-form instance variabl;e access bytecodes.  See InstructionStream class>>variablesAndOffsetsDo:.A virtual machine can benefit in performance by organizing method and block activations using a  more conventional stack organization than by using first-class activation records (contexts).  But such a virtual machine is also cabable of hiding the stack and making it appear as if contexts are still used.  This means the system has better performance but still has all the benefits of first-class activation records.  To pull this off the VM needs to intercept any and all accesses to context objects so that it can make contexts function as proxy objects for stack frames.Without help from the image such a virtual machine based on an interpreter would have to perform an expensive check on all instance variable accesses to determine if the instance variable was that of a context serving as a proxy for a stack frame.  A simple hack is to take advantage of the short and long forms of instance variable access bytecodes.  The BlueBook instruction set (and likely any bytecode set evolved from it) has short form bytecodes for fetching and storing the first few bytecodes (BlueBook fetch first 16, store first 8).  Contexts typically have at most 6 instance variables.  If we arrange to use the long-form bytecodes for all context inst var accesses then we only have to check for context inst var access in long-form bytecodes, and then only if the index is within the context inst var range.  This effectively makes the check free because on modern processors checking an index fetched from memory into a register against a constant costs far less than the memry read to fetch the index."
"TestCommandLineHandler","Usage: test [--junit-xml-output] [--fail-on-failure] [<package> ...]	--junit-xml-output    output the test results in a junit compatible format	--fail-on-failure     if there is a test error or failure, it will exit with error code 1	--fail-on-error       if there is a test error it will exit with error code 1	--save                save after executing tests	 <package>            a String matching a package name	Examples:	#Run all the tests in the Tests-Exceptions package	pharo Pharo.image test Tests-Exceptions		#Run all the tests in packages matching Test-.* and KernelTests	pharo Pharo.image test ""Tests-.*"" ""KernelTests-.*""		# Run test on a Hudson/Jenkins server	pharo Pharo.image test --junit-xml-output ""Tests-.*"" ""KernelTests-.*""	"
"FLIndexStreamTest","SUnit tests for index streams"
"TextClassLink","An active link in a text linking to a class"
"NautilusTextDisplayerChanged","A NautilusTextDisplayerChanged is raised when the way to display the method changed."
"MBRevertPackageCommand","Command to revert a package in versionner"
"SmalltalkImageTest",""
"FLGlobalEnvironmentTest","SUnit tests for global fuel environment"
"RestartDebugAction","A RestartDebugAction restarts the execution of the current context."
"TestDynamicVariable","TestDynamicVariable is a test class using in ProcessSpecificTest."
"GTProtoObjectVariablesBrowser","This is a specialization that works with ProtoObject and all its subclasses that except for Object that has its own specialization.Example:self openOn: ProtoObject new"
"RPackageRenamed","I am a public announcement sent when a new RPackage is renamed"
"Color","This class represents abstract color, regardless of the depth of bitmap it will be shown in.  At the very last moment a Color is converted to a pixelValue that depends on the depth of the actual Bitmap inside the Form it will be used with.  The supported depths (in bits) are 1, 2, 4, 8, 16, and 32.  The number of actual colors at these depths are: 2, 4, 16, 256, 32768, and 16 million.  (See comment in BitBlt.)  To change the depth of the Display and set how many colors you can see, execute: (Display newDepth: 8).  (See comment in DisplayMedium)	Color is represented as the amount of light in red, green, and blue.  White is (1.0, 1.0, 1.0) and black is (0, 0, 0).  Pure red is (1.0, 0, 0).  These colors are ""additive"".  Think of Color's instance variables as:	r	amount of red, a Float between 0.0 and 1.0.	g	amount of green, a Float between 0.0 and 1.0.	b	amount of blue, a Float between 0.0 and 1.0.(But, in fact, the three are encoded as values from 0 to 1023 and combined in a single integer, rgb.  The user does not need to know this.)	Many colors are named.  You find a color by name by sending a message to class Color, for example (Color lightBlue).  Also, (Color red: 0.2 green: 0.6 blue: 1.0) or (Color r: 0.2 g: 0.6 b: 1.0) creates a color. (see below)	A color is essentially immutable.  Once you set red, green, and blue, you cannot change them.  Instead, create a new Color and use it.	Applications such as contour maps and bar graphs will want to display one of a set of shades based on a number.  Convert the range of this number to an integer from 1 to N.  Then call (Color green lightShades: N) to get an Array of colors from white to green.  Use the Array messages at:, atPin:, or atWrap: to pull out the correct color from the array.  atPin: gives the first (or last) color if the index is out of range.  atWrap: wraps around to the other end if the index is out of range.	Here are some fun things to run in when your screen has color:		Pen new mandala: 30 diameter: Display height-100.		Pen new web  ""Draw with the mouse, opt-click to end""		Display fillWhite.  Pen new hilberts: 5.		Form toothpaste: 30  ""Draw with mouse, opt-click to end""You might also want to try the comment in	Form>class>examples>tinyText...Messages:	mixed: proportion with: aColor	Answer this color mixed with the given color additively. The proportion, a number between 0.0 and 1.0, determines what what fraction of the receiver to use in the mix.	+ 	add two colors	- 	subtract two colors	*	multiply the values of r, g, b by a number or an Array of factors.  ((Color named: #white) * 0.3) gives a darkish gray.  (aColor * #(0 0 0.9)) gives a color with slightly less blue.	/	divide a color by a factor or an array of three factors.	errorForDepth: d     How close the nearest color at this depth is to this abstract color.  Sum of the squares of the RGB differences, square rooted and normalized to 1.0.  Multiply by 100 to get percent.	hue			Returns the hue of the color. On a wheel from 0 to 360 with pure red at 0 and again at 360.	saturation	Returns the saturation of the color.  0.0 to 1.0	brightness	Returns the brightness of the color.  0.0 to 1.0	name    Look to see if this Color has a name.	display	Show a swatch of this color tracking the cursor.	lightShades: thisMany		An array of thisMany colors from white to the receiver. 	darkShades: thisMany		An array of thisMany colors from black to the receiver.  Array is of length num.	mix: color2 shades: thisMany		An array of thisMany colors from the receiver to color2.	wheel: thisMany			An array of thisMany colors around the color wheel starting and ending at the receiver.	pixelValueForDepth: d    Returns the bits that appear be in a Bitmap of this depth for this color.  Represents the nearest available color at this depth.  Normal users do not need to know which pixelValue is used for which color. Messages to Class Color.	red: r green: g blue: b		Return a color with the given r, g, and b components.	r: g: b:		Same as above, for fast typing. 	hue: h saturation: s brightness: b		Create a color with the given hue, saturation, and brightness.	pink 	blue	red ...	Many colors have messages that return an instance of Color.	canUnderstand: #brown	  Returns true if #brown is a defined color.	names		An OrderedCollection of the names of the colors.	named: #notAllThatGray put: aColor    Add a new color to the list and create an access message and a class variable for it.	fromUser	Shows the palette of colors available at this display depth.  Click anywhere to return the color you clicked on.	hotColdShades: thisMany	An array of thisMany colors showing temperature from blue to red to white hot.    stdColorsForDepth: d        An Array of colors available at this depth.  For 16 bit and 32 bits, returns a ColorGenerator.  It responds to at: with a Color for that index, simulating a very big Array.    colorFromPixelValue: value depth: d    Returns a Color whose bit pattern (inside a Bitmap) at this depth is the number specified.  Normal users do not need to use this.(See also comments in these classes: Form, Bitmap, BitBlt, Pattern, MaskedForm.)"
"ProcessorScheduler","My single instance, named Processor, coordinates the use of the physical processor by all Processes requiring service."
"RGCommentDefinition","RGCommentDefinition is a first-class representation of class's comments"
"SoundTheme","Groups a set of sounds to use with a UITheme.Note that, although instances may have their sounds changed the settings will still indicate the class of theme that is current."
"FFIExternalValueHolderTests",""
"RGTraitDefinition","RGTraitDefinition is the concrete representation of a trait (no class)"
"TimeStampMethodConverter","A TimeStampMessageConverter is a wrapper wich display the timestamp of the provided message"
"OCOptimizedBlockScope","In Smalltalk, methods like ifTrue: are inlined an there is no Block for the arguments of these message sends.To be consistent, these blocks need nevertheless a scope."
"UpdatingMenuItemMorph","I am a menu item morph with the ability to refresh periodically all my values (name, state, enablement, icon, submenu)Since it is not a good idea to change the shortcut, this ability is not available"
"ContributingToTheCatalogHelp","Help file on how to contribute to catalog"
"DAClassToDependencyNode",""
"ReBasicMethodRule","I'm a basic root for all mathod rules of renraku."
"GoferFetch","Fetch packages using Gofer"
"OCUndeclaredVariable","I am a Variable that is not declared.I am like a global an association, but instead of Smalltalk globals, I live in the Undeclared global dictionary."
"ZnChunkedReadStream","I am ZnChunkedReadStream, implementing HTTP 1.1 chunked transfer encoding on a wrapped streams.Clients should read me until I am atEnd.After I am completely read, I can tell you my totalSize and optional extraHeaders.Part of Zinc HTTP Components."
"VSPackageLeafNode","Abstract class used to display a package with its specific icons and no child in a tree."
"SourceFileArrayTest","This test documents the source pointer address conversion methods for ExpandedSourceFileArray.The available address space for source pointers in a traditional CompiledMethod is 16r1000000 through 16r4FFFFFF. StandardSourceFileArray maps positions in the sources file to address range 16r1000000 through 16r1FFFFFF and 16r3000000 through 16r3FFFFFF, and positions in the changes file to address range 16r2000000 through 16r2FFFFFF and 16r4000000 through 16r4FFFFFF. This permits a maximum file size of 16r2000000 (32MB) for both the sources file and the changes file. ExpandedSourceFileArray extends the source pointer address space using bit 25 of the source pointer to identify the external sources and changes files, with the remaining high order bits treated as address extension. This limits the number of external file references to two (the traditional sources and changes files). If additional external file references are needed in the future, some higher order bits in the source pointer address space should be allocated for that purpose.The use of bit 25 of the source pointer for file references permits backward compatibility with StandardSourceFileArray, with essentially unlimited address space expansion for the sources and changes files."
"CredentialEditor","I am a simple UI used to set the credentials of a remote"
"GLMVerticalLinearLayout",""
"TransformWithLayoutMorph","A transform morph that allows the use of a layout policy to arrange submorphs."
"TextPrintIt","A ""Print It"" action on a text. When the text is clicked the text is seen as source code and evaluated. After that the result is printed"
"STONMapWriter","STONDictionaryWriter helps in writing dictionary based STON representations."
"OSTouchThreeFingersSwipeMoveEvent","Three fingers are swiping"
"DirectoryEntryTest","SUnit tests for FileSystemDirectoryEntry"
"ConfigurationOfVersionnerTestBitmapCharacterSet","Simple Configuration class used to test Versionner behavior.This class is a rename of ConfigurationOfVersionnerTestBitmapCharacterSet-StephaneDucasse.2."
"PSMCChangeWrapper",""
"OSTouchTwoFingersPinchEvent","I am the abstract class for all two fingers pinch events"
"FileList","A FileList is a tool to deal with files.FileList open				""open FileList"""
"GLMMorphicSmalltalkCodeRenderer",""
"FFIInt8","I'm an signed byte."
"SimplifiedChineseEnvironment","This class provides the Simplified Chinese support (Used mainly in Mainland China).  Unfortunately, we haven't tested this yet, but as soon as we find somebody who understand the language, probably we can make it work in two days or so, as we have done for Czech support."
"MCClassVariableDefinition","A MCClassVariableDefinition represent a class variable."
"MBPackageChangesCommand","Command to browse package changes in versionner"
"MalHitsNode",""
"MCWorkingCopyBrowser","Browser for working copies"
"SugsSuggestionCreateAccessorsTest","SUnit tests for accessor creation"
"KomitGemstoneRemote","I encapsulate a gemstone repository"
"OSTouchSwipeEvent","Superclass of all swipes events"
"GLMMorphicFastTableRenderer","I am a Morphic renderer for a GLMFastTablePresentation.Description--------------------I use a GLMFastTableDataSource to manage the data of the table."
"SimpleServiceEntry","I represent a serviceprovider : the service providerlabel : to be display in a menuselector : to do the serviceuseLineAfterstateSelector : a secondary selector (to be able to query state of the provider for example)description : a description for balloon for exampleargumentGetter : a selector to get additional arguments with (if selector requres them)buttonLabel : a short labelThe entire client interface (provided by FileList and other users of the registry)is this (browse #getArgumentsFrom: and the senders of #argumentGetter:):fullName (returns a String with the full filename)dirAndFileName (returns {directory. fileName})readOnlyStream (returns an open read-only stream)"
"TxOneLineTextLayoutTest",""
"RubLipsumWithSegmentsExample","[self openWrapped] timeToRun     [self openNotWrapped] timeToRun "
"CopyVisitorTest","SUnit tests for CopyVisitor"
"RBToDoWithIncrementRule","Checks for users of to:do: that also increment or decrement a counter.In Pharo you do not increment or decrement counter but should use the message to:do:by:.1 to: 100 by: 3 do: [ :each | ... ]"
"OSWindowHandle","I am abstract class, representing an OSWindow handle.Each instance of OSWindow holds a handle, through which it communicates with underlaying operating system.The implementation of OSWindowHandle (and subclasses) is highly driver-specific and therefore considered private."
"SettingPackageFilter","A SettingPackageFilter is a SettingFilter used to select settings from a given list of packages: a setting is kept only if the package in which it is defined is present in the given package listInstance Variables	packages:		<Collection>packages	- The collection of PackageInfo the filter is currently using"
"AthensPathSegment","The path segment is path building block.Path is formed from list of connected path segments. At building stage, there is no container nor separately defined ""path"" object, just a linked list of segments.Later the segments are accumulated in backend-specific path object, and the way how it is organized may vary.My (sub)instances usually are not created directly by user, but instead by instanceof AthensPathBuilder.Therefore, all my subclasses are considered private and implementation detail."
"PluginBasedJPEGReadWriter","I provide fast JPEG compression and decompression. I require the VM pluginJPEGReadWriter2Plugin, which is typically stored in same directory as the Squeak virtual machine.JPEGReadWriter2Plugin is based on LIBJPEG library. This sentence applies to the plugin:   ""This software is based in part on the work of the Independent JPEG Group"".The LIBJPEG license allows it to be used free for any purpose so long as its origin and copyright are acknowledged. You can read more about LIBJPEG and get the complete source code at www.ijg.org."
"OutOfMemory","OutOfMemory is signaled when an allocation fails due to not having enough memory. Its default action signals the low-space semaphore.Originally suggested by A. Raab."
"MetacelloMCBaselineOfProjectSpec",""
"ZnServerErrorEvent","ZnServerErrorEvent is a ZnServerLogEvent related to an exception that occurred."
"FontChooserMorph","I'm the UI of a font chooser. FontChooser 	openWithWindowTitle: 'Choose the Menu Font' 	for: StandardFonts 	setSelector: #menuFont: 	getSelector: #menuFont	"
"ZipReadStream","ZipReadStream is intended for uncompressing the compressed contents of Zip archive members.Since Zip archive members keep their expected CRC value separately in Zip headers, this class does not attempt to read the CRC from its input stream.Instead, if you want the CRC verification to work you have to call #expectedCrc: with the expected CRC-32 value from the Zip member header."
"BreakpointIconStyler","I'm in charge to style an ast when there are breakpoints"
"ZnEntityTooLarge","ZnEntityTooLarge is signalled when too big an entity is read from a stream.This is a resumable exception"
"FFIExternalValueHolder","I am a generic meta class for creating a subclasses, which instances will hold a single value of specified C type.To create a new class for some concrete C type you need to declare an anonnymous class and indicate the type you want to use:[ [ [ floatHolderClass := FFIExternalValueHolder ofType: 'float' ] ] ]Then you can use  given class(es) as a value holders for type you specified:[ [ [  float := floatHolderClass new.float value:  1.5float value ] ] ]By combining this with class/pool variables we have a convenient way of defining a values, which are passed by pointer to a function.For instance, imagine that we need to create a binding to a function:[ [ [ void getFoo( SomeType * value)  ] ] ]which is not an unusual situation, when C function using pointer arguments for storing it's output there.And this is what ==FFIExternalValueHolder== is done for. To define a binding to this function you can declare a subclass named SomeType and then use it in function signature:[ [ [ getFoo: value  ^ self ffiCall: #(void getFoo ( SomeType *  value ))] ] ]and call it like: [ [ [ var := SomeType new.self getFoo: var.var value  ""will read the value"" ]]]"
"FLSingletonTest","SUnit tests for fuel serialization of singletons"
"RBProtocolEnvironment","I am a RBBrowserEnvironment on a set of protocols of a class.Example:(RBBrowserEnvironment new) forClass:Morph protocols:{'printing'}."
"BitBltTest",""
"MethodChunkCompilerRequestor","I am an Object used to interact with the OpalCompiler during compilation of a method chunk. I keep a reference to the original input so that error messages can be properly analyzed later-on."
"LayoutEmptyScope","I am the last layout scope in a scope chain."
"PharoChangesCondenser","I create a new more compact changes files with a single version of each method in the image."
"SelectorNode","I am a parse tree leaf representing a selector."
"MCMockClassA","This is a mock class. The Monticello tests manipulated it to simulate a developer modifying code in the image."
"ReAbstractCritic","I am an abstract critic class.My subclasses should define whether they provide a selection interval, or refactory change"
"FLSingletonMock","A mock for a singleton"
"OrderedCollection","I am one of the most common collection. I can grow, and elements can be added sequentially by the user.  Description -------------------I am more general than Array; my size grows on demand. I store data inside an Array and remember the first and last index. If I need, I can replace this Array by a larger one.I am usually used to store an unknown amount of objects. When my contents size will not move, one can send me the #asArray message to get better performances, but I cannot grow anymore (add: and remove: are not supported on Array).Public API and Key Messages-------------------	- #new / #withAll: aCollection / #with: anObject 	are common constructors- #add: anObject / #at: anIndex put: anObject / #at: anIndex ifAbsentPut: anObject 	allow to add new elements to myself.- #remove: anObject / #removeIndex: anIndex 	allow to remove an element.	- #do: aBlock / #collect: aBlock / #select: aBlock / #reject: aBlock 	are common iterators.Examples-------------------			""There is many ways to create an OrderedCollection, here are some:""	ordCol := OrderedCollection new.	ordCol		add: 'one';		add: 'two';		addFirst: 'zero';		addLast: 'three'.	ordCol.		""returns: an OrderedCollection('zero' 'one' 'two' 'three')""	""or""	ordCol := OrderedCollection with: 'one' with: 'two' with: 'three'.	ordCol.		""returns: an OrderedCollection('one' 'two' 'three')""	""or from an other collection""	ordCol := OrderedCollection withAll: #('one' 'two' 'three').	ordCol.		""returns: an OrderedCollection('one' 'two' 'three')""	""or""	#('one' 'two' 'three') asOrderedCollection.	""Some manipulations""	ordCol := OrderedCollection ofSize: 2.	ordCol		at: 1 put: 'one';		at: 2 put: 'two';		at: 2 ifAbsentPut: 'three'.	ordCol.		""returns: an OrderedCollection('one' 'two')""	ordCol		remove: 'two';		removeIndex: 1.	ordCol.		""returns:  an OrderedCollection()""	""A last one""	ordCol := OrderedCollection with: $b with: $c with: $a.	ordCol sort: [ :first :second | first < second ].		""returns: an OrderedCollection($a $b $c)""	ordCol collect: [ :element | element asUppercase ].		""returns:  an OrderedCollection($A $B $C)""	ordCol select: [ :element | element >= $b ].		""returns:  an OrderedCollection($b $c)""	ordCol do: [ :element | element inspect ].	ordCol asArray		""returns: #($a $b $c)""			 Internal Representation and Key Implementation Points.-------------------	    Instance Variables	array:			<Array> 		An Array where I store my elements. If I need a bigger one I can remove this one and create a new one.	firstIndex:		<Integer> 	The index of my first element.	lastIndex:		<Integer> 	The index of my last element.I store my elements inside an array. This array is AT LEAST of the size of my elements. If someone adds an element and my array is not large enough, I remove it and I create a new one larger with the same elements (usually, the size double)."
"ManifestMultilingualTextConverterOtherLanguages","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"CatalogBrowser","I'm a browser to show project catalog from pharo official repositories. I'm a replacement for the old Metacello Configuration Browser.I interact with a ==CatalogProvider== and manipulate ==CatalogProject== instances.Pharo catalog can be found at:  *http://catalog.pharo.org*[[[CatalogBrowser new open			]]]"
"LinkedListTest","A set of test cases which thoroughly test functionality of the LinkedList class."
"WeakAnnouncerTest","SUnit tests for weak announcements"
"FLMigration","I represent migration information about a class.See 'configuring-migration' protocol in FLMaterializer."
"RGPoolVariableDefinition","A pool variable definition"
"MalSccEdgeDecomposition",""
"MenuItemMorph","I represent an item in a menu.Instance variables:	isEnabled 	<Boolean>	True if the menu item can be executed.	subMenu 	<MenuMorph | nil>	The submenu to activate automatically when the user mouses over the item.	isSelected 	<Boolean>	True if the item is currently selected.	target 		<Object>		The target of the associated action.	selector 		<Symbol>	The associated action.	arguments 	<Array>		The arguments for the associated action.	icon		<Form | nil>	An optional icon form to be displayed to my left."
"GLMPagerButtonsPaneBrick",""
"STONWriteReadTests","STONWriteReadTests test serialization followed by materialization, these tests first write then read STON."
"FLPositive16SmallIntegerCluster","unsigned, 16-bit integer cluster"
"WeakValueDictionaryTest","SUnit tests for weak value dictionaries"
"AthensWrapMorph","I make sure that all my submorphs will be drawn using Athens, not Balloon. For that I use a separate surface."
"GTChangeDebuggerAction","I am an action for switching to another debugger.My class side methods register one such action for every debugger that can be used with the current execution."
"FileModifyingSimpleServiceEntry","I represent a service that may change the contents of a directory.Such changes include:* file creation* file deletion* file modification"
"VSCommitPatchVersion","I'm a patch version."
"FastInflateStream","This class adds the following optimizations to the basic Inflate decompression:a) Bit reversed accessIf we want to fetch the bits efficiently then we have them in the wrong bit order (e.g., when we should fetch 2r100 we would get 2r001). But since the huffman tree lookup determines the efficiency of the decompression, reversing the bits before traversal is expensive. Therefore the entries in each table are stored in REVERSE BIT ORDER. This is achieved by a reverse increment of the current table index in the huffman table construction phase (see method increment:bits:). According to my measures this speeds up the implementation by about 30-40%.b) Inplace storage of code meanings and extra bitsRather than looking up the meaning for each code during decompression of blocks we store the appropriate values directly in the huffman tables, using a pre-defined mapping. Even though this does not make a big difference in speed, it cleans up the code and allows easier translation into primitive code (which is clearly one goal of this implementation).c) Precomputed huffman tables for fixed blocksSo we don't have to compute the huffman tables from scratch. The precomputed tables are not in our superclass to avoid double storage (and my superclass is more intended for documentation anyways)."
"VSBrowseConfigurationCommand","Browse the configuration class."
"FinderSingleMethodNode","A FinderSingleMethodNode is a node used to display a selector implemented only once in the system"
"GLMDropDownListPresentation","A GLMDropDownListPresentation is takes a list of objects and displays them in a drop down view.For an example see GLMBasicExamples>>#dropDownList"
"GLMMorphicRubricTextRenderer",""
"HelpHowToHelpTopics","Explains help topics"
"FinderExampleMethodNode","A FinderExampleMethodNode is a node used by the FinderUI's tree representing a Method deducedfrom an examples (by MethodFinder)"
"KMNoModifier","I represent the absense of a key modifier. I fulfill the role of a null pattern, having as default no printing and not matching."
"RBAddClassVariableRefactoring",""
"RGNamespaceTest","SUnit tests for namespaces"
"SugsSuggestionFactory","I'm the guy who knows how to create the suggestions. I also categorize them."
"FLPharo11Platform",""
"SimpleBorder","see BorderedMorph"
"VSUpdateFromItsRepositoryCommand","Update the configuration from the version contained in its repository."
"AllInstVarsEyeElement","I am an eye element for all inst vars, printing a description of all the instance vriables (usually second field in the inspector)"
"IncrementalSliderMorph",""
"NullSound","The NullSound means silence "
"DiskFileSystemTest","SUnit tests for the disk filesystem"
"AthensLineSegment","i represent a line segment,created using 	#lineTo: command of AthensPathBuilder"
"ToolShortcutsCategory","ToolShortcuts defines some global keyboard shortcuts to open tools for workspaces, system browser, monticello browser, settings, transcript and also image saving. "
"FBDLoop","I represent a loop in the bytecode.My instances represent an unconditional loop. These loops can't fall through the code right after as it's infinite, however, it can finish if there is a return inside.Conditional loops are instances of my subclass.backjump <Smi> pc of the backjump instruction"
"ManifestZincCharacterEncodingCore","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"ZnCodePointReadStream","I am ZnCodePointReadStream.I wrap another binary ReadStream and use a ZnCharacerEncoder to allow Integer code points to be read.I am not positionable, but I do allow a one code point peek using a one code point internal buffer.Part of Zinc HTTP Components."
"WideCharacterSetTest","WideCharacterSetTest holds tests for WideCharacterSet"
"MalWeightedHitsNode",""
"HelpTopicTest","SUnit tests for HelpTopic class"
"ZdcAbstractSocketStreamTests","ZdcAbstractSocketStreamTests holds units tests for socket streams.This is an abstract class, subclasses should implement #socketStreamClass "
"RubOpeningClosingDelimiterDecorator","I am the decorator for highliting opposite character in a text area (like parenthese or square bracket)"
"RBUnnecessaryAssignmentRule","Checks for assignements to temporaries that are not used afterwards."
"MTPlatform","A MTPlatform reprensents targeted platforms (ex: pharo1.4.x, pharo2.x)"
"DAPackageTreeModel","A PDPackageTreeModel is an abstract class. It's a the superclass of the two tree model vizualisations (package dependency and cycle detection)."
"FileSystemPermission","I'm a set of permissions for a Directory Entry"
"DictionaryTest","SUnit tests for dictionaries"
"OSNullWindowDriver","I provide a mock (or null) driver, which can create a valid OSWindow instances, despite the fact that underlaying OS may not support any notion of windows or even graphical user interface.I can be used for testing (by picking as a preferrable driver in window attributes),or as a default driver while running image in headless mode.Using null driver allows most of the code which relies on existance of at least single main window to work flawlessly, by simply ignoring all requests/commands passed to it."
"GLMPort","GLMPort represents the abstract port. Any port has a name. Subclasses can provide further semantics to a port."
"FFIInstVarArgument","I implement the push strategy for method arguments who are  instance variables."
"FTOutlineDataSource","I'm a data source which will have many list of elements. My goal is to allow a FTOutlineTable to render me with separators between my differents items.Users might want to subclass me to have better options."
"GTSpotterTest",""
"InvalidSuperclass","I am a warning signaled when trying to build a class with an invalid superclass."
"SugsMonticelloToolContext","I am a general suggestion context for a monticello tools. I give the Suggestion framework information about the selection so it can propose the correct suggestions."
"GLMPluggableTextMorph","We subclass the default PluggableTextMorph just to raise the proper announcements when the text or when the selection changes."
"GTPrintSelectionDebugAction","This action is responsible for printing a selected piece of code from the code pane of the debugger."
"GreekEnvironment","This class provides the support for Greek.  It is here, but most of the methods are not implemented yet."
"MBConfigurationInfoDeleted","A configuration info was deleted"
"SetElement","I am a helper class for handling the contents of Set.My main purpose is to allow a Set to contain nil.Since nil represents an empty slot in a Set, it cannot be stored directly in the array of values. Instead, an instance of SetElement is used as a wrapper. See implementors and senders of #asElement for wrapping, and #enclosedSetElement for unwrapping."
"DebugActionAboutToExecute","A DebugActionAboutToExecute is an event send to the debugger before a debugging action is executed."
"MetacelloResolveProjectUpgrade",""
"SpecColumnLayout","A SpecColumnLayout is the layout used to specify a new column"
"ProtocolAdded","This class is not used, but should be used when we hook into the addition and removal of protocols. Right now, we only get ClassReorganizedAnnouncement"
"ThemeIconsStoredSetting","I am responsible for storing information about ThemeIcons objects."
"RubPositionChanged","I am raised when the left bounds of the text area are changed"
"SDL2Structure","Common things for all SDL2 structs"
"MBConfigurationRootTest","SUnit tests for configurations in Versionner"
"MTGroup","A MTGroup is a convenient way to group software dependencies (instances of MTDependency). Instance Variables	- dependencies : A collection of dependencies defiing the group."
"Metacello","# Metacello User GuideIn this guide we'll take a walk through a couple of common developmentscenarios and highlight some of the features of the *Metacello ScriptingAPI*.*For installatation and more detailed documentation on the MetacelloScripting API, see the [Metcello Scripting API Documentation][1].*## IntroductionThe number one job of the *Metacello Scripting API* is to simplify thejob of loading projects into your image. As you are probably alltoo aware, today it's a two step process where you first load theconfiguration into your image using [Gofer][2] and then load yourproject using Metacello:```SmalltalkGofer new  package: 'ConfigurationOfSeaside30';  squeaksource: 'MetacelloRepository';  load.((Smalltalk at: #ConfigurationOfSeaside30) version: #stable) load.```In the early days of Metacello (and Gofer) this was a great improvementover the alternatives, but today, 3 years after the introduction ofMetacello, there should be a better way...and there is.Using the *Metacello Scripting API* the above expression reduces to thefollowing:```SmalltalkMetacello new  configuration: 'Seaside30';  load.```## LoadingIn this example of the [`load` command][5] we are leveraging a couple ofdefault values, namely the `version` of the project and the `repository` where the**ConfigurationOfSeaside** package can be found:```SmalltalkMetacello new  configuration: 'Seaside30';  load.```Here is a variantof the same expression with the (current) default values explicitly specified:```SmalltalkMetacello new  configuration: 'Seaside30';  version: #stable;  squeaksource: 'MetacelloRepository';  load.```The `version` attribute can be any legal [version number][10].`squeaksource` is a [repository shortcut][4]. You can also specify thefull [repository description][3] as follows:```SmalltalkMetacello new  configuration: 'Seaside30';  version: #stable;  repository: 'http://www.squeaksource.com/MetacelloRepository';  load.```##ListingOnce you've loaded one or more projects into your image, you may want tolist them. The following is an example of the [`list` command][6]:```SmalltalkMetacello image  configuration: [:spec | true ];  list.```The `image` message tells Metacello that you'd like to lookat only loaded configurations. The *block* argument to the`configuration:` message is used to *select* against the list of loaded[MetacelloProjectSpec][7] instances in the [registry][8].The `list` command itself returns a list of [MetacelloProjectSpec][7] instances that can be printed, inspected or otherwise manipulated.In addition to a *select block*, you can specify a *select collection*specifying the names of the projects you'd like to select:```SmalltalkMetacello registry  configuration: #('Seaside30' 'MetacelloPreview');  list.```The `registry` message tells Metacello that you'd like tolook at all projects in the [registry][8] whether or not they are loaded.The *collection* argument to the `configuration:` message is used to*select* against the list of project names in the [registry][8].The `list` command can also be used to look at configurations inMonticello repositories. For example:```SmalltalkMetacello new  configuration: [:spec | spec name beginsWith: 'Seaside'];  squeaksource: 'MetacelloRepository';  list.```lists the configurations whose names (sans the `ConfigurationOf`) beginwith `Seaside` in the `MetacelloRepositry` in the[Squeaksource](http://www.squeaksource.com) repostory.## GettingOnce you've loaded a project into your image the next logical step isupgrading your project to a new version. Let's say that a new `#stable` version of Seaside30 has been releasedand that you want to upgrade. This is a two step process: * [get a new version of the configuration][11]* [load the new version][12]### Get a new version of the configurationThe following expression gets the latest version of theconfiguration:```SmalltalkMetacello image  configuration: 'Seaside30';  get.```By using the `image` message, you can leverage the fact that the [registry][8] remembersfrom which repository you loaded the original version of the configuration.The `get` command simply downloads the latest version of theconfiguration package from the repository.You may download the configuration from a different repository:```SmalltalkMetacello image  configuration: 'Seaside30';  squeaksource: 'Seaside30;  get.```The `get` command will update the [registry][8] with the newrepository location information.You may also use the `get` command to load a configuration for a projectinto your image without actually loading the project itself:```SmalltalkMetacello image  configuration: 'SeasideRest';  squeaksource: 'Seaside30';  get.```The 'SeasideRest' project information will be registered in the [registry][8] and markedas *unloaded*.### Load the new versionOnce you've got a new copy of the Seaside30 configuration loaded into your image, you mayupgrade your image with the following expression:```SmalltalkMetacello image  configuration: 'Seaside30';  version: #stable;  load.```By using the `image` message, you are asking Metacello to look theproject up in the [registry][8] before performing theoperation, so it isn't necessary to supply all of the project details for everycommand operation.Of course, the `load` command updates the [registry][8].If you want to load a project for which you've already done a `get`(like the SeasideRest project earlier), you can do the following:```SmalltalkMetacello registry  configuration: 'SeasideRest';  version: #stable;  load.```In this case you use the `registry` message to indicate that you areinterested in both *loaded* and *unloaded* projects.##LockingLet's say that you are using an older version of Seaside30 (say 3.0.5)instead of the #stable version (3.0.7) and that your application doesn'twork with newer versions of Seaside30 (you've tried and it's more workto get you application to work with the newer version of Seaside30 thanit's worth).Let's also say that you want to try out something in theSeasideRest project, but when you try loading SeasideRest, you end uphaving Seaside 3.0.7 loaded as well. This is an unfortunate side effect of Metacello trying to *do the rightthing*, only in your case it is the wrong thing.Fortunately, the [`lock` command][9] can give you control. First youneed to `lock` the Seaside30 project:```SmalltalkMetacello image  configuration: 'Seaside30';  lock.```The `image` message tells Metacello to do a lookup in the list of loadedprojects and then to put a lock on the loaded version of the project.If you want you can specify which version of the project you wantlocked:```SmalltalkMetacello image  configuration: 'Seaside30';  version: '3.0.5';  lock.```After a project is locked an error (**MetacelloLockedProjectError**) is thrown when you attempt to load a project that has a dependency upon a different version of Seaside30. The error is thrown before any packages are actually loaded.### Bypassing locksLet's say that you want to load the SeasideRest project even though it mayrequire a version of Seaside30 that is later than the version that you havelocked. To do that you need to suppress the upgrade of the Seaside30project during the load of the SeasideRest project and you can do thatwith the use of the `onUpgrade:` message:```SmalltalkMetacello new  configuration: 'SeasideRest';  version: #stable;  onUpgrade: [:ex :existing :new |     existing baseName = 'Seaside30'      ifTrue: [ ex disallow ].    ex pass ];  load.```The `onUpgrade:` block tells Metacello to disallow the upgrade of anyproject whose `baseName` is `Seaside30` and to continue with the load.Of course if there are any explicit dependencies between SeasideRest andthe later version of Seaside30 (missing classes, etc.) then you may verywell get load errors or errors while using the SeasideRest, but that'sthe price you pay for not upgrading.### Upgrading a locked projectIf you want to explicitly upgrade a locked project, you can use the`load` command. The following command will upgrade Seaside30 to version3.0.6 even if it is locked: ```SmalltalkMetacello image  configuration: 'Seaside30';  version: '3.0.6';  lock.```The newly loaded of the project will continue to be locked.[1]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md[2]: http://www.lukas-renggli.ch/blog/gofer[3]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md#repository-descriptions[4]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md#repository-shortcuts[5]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md#loading[6]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md#listing[7]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md#metacelloprojectspec[8]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md#metacello-project-registry[9]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md#locking[10]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md#metacello-version-numbers[11]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloUserGuide.md#get-a-new-version-of-the-configuration[12]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloUserGuide.md#load-the-new-version"
"GTSpotterStepTest",""
"BreadthFirstGuideTest","SUnit tests for class BreadthFirstGuide"
"BIInspector","Preview to see the effect of a setting on the behavior of the pretty printer.self new openWithSpec "
"SugsRemoveParameter","I know how to remove a parameter from a method"
"NECTestClass","I'm only for SUnit TestCases."
"ZnHeaders","I am ZnHeaders.I am a collection of HTTP headers.I can be used for generating and parsing.Header names are normalized and used case insensitive.Header values can be multi-valued.Part of Zinc HTTP Components."
"RBExtractMethodRefactoring",""
"FTStaticBasicItem","I am an Item of a tree that keep a data and I keep staticly my children. I cannot regenerate them. Description-------------------------------------------------I am created by a FTTreeFunctionStrategy for some filter. For example it is hard to be able to update a Tree when you filter all his elements. In that case the FTAllItemsStrategy create me during a filter.Public API and Key Messages-------------------------------------------------- #children: 	allow to set my childrens    Example-------------------------------------------------FTStaticBasicItem new		data: 5;		depth: 2;		children: aCollectionOfItems;		yourself. "
"VersionnerToolBox","This class is used to fill the gap between Versionner dependencies model and the flatten objects (collections, maps) expected by Metacello ToolBox."
"BadHasher","I am an object that doesn't always hash correctly.  I am used for testing the HashTester."
"IdentityBagTest","SUnit tests for identity bags"
"RBFooLintRuleTest1",""
"SourceFileArray","This is a variation on StandardSourceFileArray that provides a larger maximum changes file size.The available address space for source pointers in a traditional CompiledMethod is 16r1000000 through 16r4FFFFFF. StandardSourceFileArray maps positions in the sources file to address range 16r1000000 through 16r1FFFFFF and 16r3000000 through 16r3FFFFFF, and positions in the changes file to address range 16r2000000 through 16r2FFFFFF and 16r4000000 through 16r4FFFFFF. This permits a maximum file size of 16r2000000 (32MB) for both the sources file and the changes file. This implementation extends the source pointer address space using bit 25 of the source pointer to identify the external sources and changes files, with the remaining high order bits treated as address extension. This limits the number of external file references to two (the traditional sources and changes files). If additional external file references are needed in the future, some higher order bits in the source pointer address space should be allocated for that purpose.The use of bit 25 of the source pointer for file references permits backward compatibility with StandardSourceFileArray, with essentially unlimited address space expansion for the sources and changes files."
"FLIndexStream","I am an optimized stream for writing and reading *indexes*, i.e. positive integers with a known upper bound. "
"ZdcSecureSocketStreamTests","ZdcSecureSocketStreamTests tests ZdcSecureSocketStream "
"GoferReferenceTest","SUnit tests for GoferReference and subclasses"
"CharacterTest","This is the unit test for the class Character. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"GTSpotterScrollPageUp",""
"MultistateButtonMorph","A simple button that handles multiple fillstyle states:	Normal	Mouse-over	Mouse-down-inside	Mouse-down outside	with variants being a combination of passive/active and enabled/disabled."
"PathShape","I represent a model of an open sequence of connected points that can be queried forenclosing bounds and whether a point lies along any segment. I am typically used for drawing with a Canvas.ps := PathShape new        addVertex: 0@0;        addVertex: 30@30;        addVertex: 50@10.        self assert: (ps containsPoint: 24@24).self assert: (ps containsPoint: 40@30) not.Transcript show: ps calculatedBounds asString; cr."
"CircularHierarchyError","I am signaled if a new class introduces a circular class hierarchy."
"CairoGlyph","i correspond to cairo_glyph_t structure:typedef struct {    unsigned long        index;    double               x;    double               y;} cairo_glyph_t;"
"DAReverseDependentPackageNode","A PDReverseDependentPackageNode is used to display a dependent package in a reverse tree."
"MalDisjointSets",""
"BalloonSolidFillSimulation","This class is a simulation of the code that's run by the Balloon engine. For debugging purposes only."
"IRReturnReceiver","specific node when returning self"
"ZdcSecureSMTPClient","I am ZdcSecureSMTPClient.I open a ZdcSecureSocketStream to the SMTP server and connect it at the SSL level.| mailMessage |mailMessage := MailMessage empty.mailMessage setField: 'subject' toString: 'ZdcSecureSMTPClient Test'.mailMessage body: (MIMEDocument contentType: 'text/plain' content: 'This is test from Pharo Smalltalk').ZdcSecureSMTPClient	sendUsingGMailAccount: '<your-name>@gmail.com' 	password: '<your-password>'	to: '<email-address>' 	message: mailMessage"
"OSWindowRenderThread","I am a pharo process that performs all rendering calls. "
"ZnUnknownHttpVersion","ZnUnknownHttpVersion is signalled when an unknown/unsupported HTTP version is found.Part of Zinc HTTP Components. "
"NewArrayNode","I represent a node for the genPushNewArray: opcode."
"ManifestToolDiff","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"RemovedField","I represent the change of a removed field on an instance."
"FFIFloat16","I'm a 16bits (half precision) float. It is usually not used, but ARM processors support them (__fp16 in gcc). THIS IS NOT YET SUPPORTED"
"GTEventConsolidate","I consolidate GTEventCollector objects into one or more collectors according to their URL and category. That way we can pack together data, that belongs to the same application (= URL and category) and we can save them together on the server side as one bundle.For the Collaborators Part: - GTEventCollector objects that I consolidate- GTEventRecorder that uses me before packing process.Public API and Key Messages- collectors: set a collection of collectors that should be consolidated- consolidated returns collection of GTEventCollector objects. Internal Representation and Key Implementation Points.    Instance Variables	collectors:		<OrderedCollection>"
"RPackageOrganizerTest","RPackageOrganizerTest tests the behavior of PackageOrganizer. Note that it does not rely on announcement to be emitted to maintain invariants.Therefore the new created PackageOrganizer is not registered to listen to event."
"FreeTypeNameParser","A name parser"
"RBMoveMethodToClassTest",""
"MBCheckpointDevCommand","Command for a check point in Versionner"
"PlainGroupboxMorph","Groupbox without title with a vertical layout. Appears in a lighter colour than the owner's pane colour."
"SystemVersion","I am responsible for maintaining what version of Pharo and the VM is running.  I also track all of the update items that have been included in the image.I'm invoked at auto start to get the latest plugins, etc.Some queries are	SystemVersion current major	SystemVersion current minor	SystemVersion current suffix	SystemVersion current	highestUpdate"
"RegexCompilationError","This class represents compilation errors in regular expressions."
"GTSUnitExampleWithSetUpAndNoTearDownTest","I am not a test! I provide usage examples for the SUnit debugger."
"DeleteVisitor","I delete the directory tree that I visit. I use the PostorderGuide so that I can delete files before deleting their containing directories."
"PointTest","This is the unit test for the class Point. "
"HelpAPIDocumentation","This class represents the browsable package API help for the help system.Instance Variables"
"RBPragmaEnvironment","I am a RBBrowserEnvironment on a set of Pragmas.I containt all entities that define methods using this pragmas.Example:(RBBrowserEnvironment new) forPragmas:{ #primitive:}."
"RFEReceiverReification","I reify the receiver of a Message or a method"
"CRC","Parameterized implementation of the cyclic redundancy check (CRC) algorithm.INTRODUCTION=================This implementation is based on the (awesome) paper ""A Painless Guide to CRC Error Detection Algorithms"" by Ross Williams. You should find a copy of the paper here: http://www.ross.net/crc/. In this paper Ross describes a parameterized implementation that enables the different variations of the CRC algorithm to be used in a consistent way, simply by adjusting the parameters. If you don't have a clue about CRC (like me) then I strongly suggest reading the paper. It will also help you to understand how to make the best use of this implementation.The ""CRC RevEng"" project on sourceforge implements Williams's ""RockSoft"" parameterized CRC program (as does this class) and comes with a handy list of parameters for various CRC algorithm: http://reveng.sourceforge.net/crc-catalogue/.For ease of use and better performance, the two defacto standard variations ""CRC16"" and ""CRC32"" have been predefined. The lookup tables for these implementations are included on the class side. For all other variations the lookup table will be generated at runtime before the first run.If you want to define your own algorithm you can do so by using the methods in the ""accessing-parameters"" protocol. Note that there are no default values. Here's a short overview:	#width: 			defines the width of the register (usually 16 or 32)	#polynome: 		defines the polynome to use for polynome division / lookup table creation	#registerFill: 		defines the start content of the working register (usually all ones or all zeros)	#reflectInput: 		if true every byte will be reflected before processing (e.g. 100101 -> 101001)	#reflectOutpu: 		if true the entire register will be reflected before the final XOR stage	#finallyXorWith: 	defines the final XOR for the entire register	#lookupTable: 		the only OPTIONAL parameter. The lookup table will be generated at runtime if none has been supplied	#message: 			the message to calculate the CRC on 		EXAMPLES=================The simplest possible snippet uses the class side methods for ""CRC16"" and ""CRC32"":	CRC crc16FromCollection: 'some message'. --> 55709	CRC crc32FromCollection: 'some message'. --> 191312361Let's assume, you wanted to use ""CRC16 reversed"" (neither input nor output reflected). Then you would have to change the parameters like so (the reversed form uses a different polynome and a different start register content):	crc := CRC new		beCrc16;		polynome: 16r1021;		registerFill: 16rFFFF;		reflectInput: false;		reflectOutput: false;		message: 'some message';		yourself.	crc run. --> 46785	Using a single instance as in the code above will of course be faster than using the class side methods when performing multiple runs. But if you are really concerned about performance (see PERFORMANCE) you should use the ""raw"" methods (no checks! If you forget to set parameters there will be errors....):	crc := CRC new		beCrc16;		message: 'some message';		yourself.	crc runRefInRefOut. --> 55709		crc := CRC new		beCrc16;		polynome: 16r1021;		registerFill: 16rFFFF;		message: 'some message';		yourself.	crc runNonRefInNonRefOut. --> 46785	PERFORMANCE=================The performance of this implementation (tested for crc16) is equal to the performance of String>>crc16 if executed ""raw"" (see EXAMPLES). For the users sake however, the implementation does a few extra checks to improve ease of use. The cost is a loss of performance of about factor 1.15 (single instance) and 1.42 (one instance per run) (note that although I took an average of 10, the results will vary quite a bit each time you run the code):	crc := CRC new 		beCrc16; 		message: 'this is a test message'; 		yourself.		""String>>crc16""		times := OrderedCollection new.	10 timesRepeat: [ times add: [ 1000000 timesRepeat: [ 'this is a test message' crc16 ] ] timeToRun ].	times average floor. --> 530		""raw""	times := OrderedCollection new.	10 timesRepeat: [ times add: [ 1000000 timesRepeat: [ crc runRefInRefOut ] ] timeToRun ].	times average floor. --> 535		""user friendly, one instance""		times := OrderedCollection new.	10 timesRepeat: [ times add: [ 1000000 timesRepeat: [ crc run ] ] timeToRun ].	times average floor. --> 616		""user friendly, one instance per run""	times := OrderedCollection new.	10 timesRepeat: [ times add: [ 1000000 timesRepeat: [ CRC crc16FromCollection: 'this is a test message' ] ] timeToRun ].	times average floor. --> 759"
"RubDisplayScanner",""
"PragmaAnnouncement","A PragmaAnnouncement is announced by a PragmaCollector when it adds, removes or updates a PragmaHandler.Instance Variables	pragma:		<Pragma>pragma	- the pragma which has been added, removed or updated"
"CharacterSetTest","CharacterSetTest holds tests for CharacterSet"
"DateAndTimeLeapTest","I represent one of several Sunit test Cases intentended to provide complete coverage for the Chronology set of classes as part of the external testing. tlk.My fixtures are:aDateAndTime = February 29, 2004 1:33 PM with offset: 2 hoursaDuration = 15 days, 14 hours, 13 minutes, 12 seconds and 11 nano seconds.aTimeZone =  Grenwhich Meridian (local offset = 0 hours) "
"JPEGReadWriter","I am a subclass of ImageReadWriter that understands JFIF file streams, and can decode JPEG images.This code is based upon the Independent Joint Photographic Experts Group (IJPEG) software, originally written in C by Tom Lane, Philip Gladstone, Luis Ortiz, Jim Boucher, Lee Crocker, Julian Minguillon, George Phillips, Davide Rossi, Ge' Weijers, and other members of the Independent JPEG Group."
"TickSelectionListNode","A TickSelectionListNode is node for the tree used to render the tick listselected	- xxxxx"
"RBRenameVariableChange",""
"MultiCanvas","A canvas which forwards drawing commands to sub-canvases."
"RGPackageTest","SUnit tests for packages"
"MCVersionSaved","I announce that a MCVersion was saved into a MCRepository."
"OSTouchRotationEvent","Superclass of all rotation events"
"DecompilerConstructorForClosures","Similar to superclass but for closures"
"STONStreamWriter","STONStreamWriter helps in streaming writing STON representations.This is an abstract class."
"RBBetweenAndRule","Replaces ""a >= b and: [a <= c]"" by ""a between: b and: c."
"InternetConfiguration","I read several parameters related to the default web browser network preferences, through the InternetConfigPlugin VM module.For example, to get the default path where downloaded files should be placed:InternetConfiguration getDownloadPath.Seems to work only on MacOSX"
"GTSpotterExceptionMock3",""
"DependentsArray","Act as an array of (weak) dependents of some object.When dependents are reclaimed, they are replaced by an UndefinedObject in the DependentsArray.This is why instances of this class will take care to iterate only on non nil elements.These nil also cause loops written as (1 to: self size do: [:i | (self at: i) doSomething]) to be inefficient.This is because #size and #at: both require scanning for nils.For this reason, DependentsArray though sequenceable, is not a subclass of SequenceableCollection."
"AbstractKeymappingTest",""
"Time","This represents a particular point in time during any given day.  For example, '5:19:45 pm'.If you need a point in time on a particular day, use DateAndTime.  If you need a duration of time, use Duration."
"VersionBrowser","A VersionBrowser is a tool made for browsing the several versions of the provided method."
"GLMGenericAction","This is an action that is supposed to work in any context (e.g., Morphic or Seaside)"
"OSTouchDirectionnalGestureDetector","I detect gestures which needs all fingers to go on a certain direction (creating a delta distance)"
"MetacelloAllowConflictingProjectUpgrade",""
"MCFileTreeAbstractReader","Abstract reader superclass for FileTree"
"SimpleSwitchMorph","I represent a switch that can be either on or off.  I chnage my state in response to a mouse click.  When clicked, I also send my actionSelector to my target, just like a SimpleButtonMorph.	SimpleSwitchMorph new openInWorld"
"BoxedFloat64","My instances hold 64-bit Floats in heap objects.  This is the only representation on 32-bit systems.  But on 64-bit systems SmallFloat64 holds a subset of the full 64-bit double-precision range in immediate objects."
"ClassAdded","This announcement will be emitted when a class or a trait is added, using:	=> Trait >> named: (the notification is done in Trait >> named:uses:category:env:)	=> Class >> subclass:	"
"GTSUnitDebuggerHelp","A utility class containing the help for GT SUnitDebugger."
"DisplayObject","The abstract protocol for most display primitives that are used by Views for presenting information on the screen."
"TxSpanTestCase",""
"SDL_ControllerAxisEvent","SDL2 library structure representing a game controller axis event data."
"PackageTasksPlugin","This plugin shows the tasks in the current package.A task is a method which sends #flag: to mark it as #todo, or #fixme, or whatever task you want to fix.Clicking in the specific task makes you jump to the marked method."
"GTSpotterStepAdded",""
"PharoFilesOpener","My role is to open the .sources and .changes files. My only public methods are in the 'public' protocol. The most important method is #checkAndOpenSourcesAndChanges."
"GLMPhlowTableBrick",""
"NECGlobalEntry","I represent a global variable."
"MetacelloValidationNotification",""
"NullStreamTest",""
"MetacelloAbstractVersionConstructor",""
"ReSingleCriticEvent","A Renraku event with a single critic."
"NumberTest","SUnit tests for numbers"
"GoferRepositoryError","A GoferRepositoryError is the error thrown when a repository cannot be accessed."
"ObjectStringConverter","Generic object<->string converter for use with PluggableTextFieldMorph.Optional regex matching for validation.Optional transform blocks for each conversion direction."
"OpalEncoderForSistaV1","EncoderForSistaV1 encodes a bytecode set for Sista, the Speculative Inlining Smalltalk Architecture, a project by Cl√©ment Bera and Eliot Miranda.  Sista is an optimizer that exists in the Smalltalk image, /not/ in the VM,  and optimizes by substituting normal bytecoded methods by optimized bytecoded methods that may use special bytecodes for which the Cogit can generate faster code.  These bytecodes eliminate overheads such as bounds checks or polymorphic code (indexing Array, ByteArray, String etc).  But the bulk of the optimization performed is in inlining blocks and sends for the common path.  This bytecode set therefore differs from a normal Smalltalk set in providing a set of inlined primitives that do not validate their arguments that the compiler generates only when it can prove that the primitives' arguments are valid.The basic scheme is that the Cogit generates code containing performance counters.  When these counters trip, a callback into the image is performed, at which point Sista analyses some portion of the stack, looking at performance data for the methods on the stack, and optimises based on the stack and performance data.  Execution then resumes in the optimized code.The Sista Cogit (e.g. SistaStackToRegisterMappingCogit) adds counters to conditional branches.  Each branch has an executed and a taken count.  On execution the executed count is decremented and if the count goes below zero the VM sends a message at a special index in the specialObjectsArray (as of writing, conditionalCounterTrippedOn:).  Then if the branch is taken the taken count is decremented.  The two counter values allow the Sista optimizer to collect basic block execution paths and to know what are the ""hot"" paths through execution that are worth agressively optimizing.  Since conditional branches are about 1/6 as frequent as sends, and since they can be used to determine the hot path through code, they are a better choice to count than, for example, method or block entry.The VM provides a primitive that fills an Array with the state of the counters, and the state of each linked send in a method.  Tthe optimizer obtains the branch and send data for a method via this primitive.This bytecde set encodes a bytecode set for Smalltalk that lifts limits on the number of literals and branch distances, and extended push integer and push character bytecodes.  Bytecodes are ordered by length to make decoding easier.  Bytecodes marked with an * are extensible via a prefix bytecode.N.B.  Extension bytecodes can only come before extensible bytecodes, and only if valid (one cannot extend a bytecode extensible by Ext A with an Ext B).  An extensible bytecode consumes (and zeros) its extension(s).  Hence the hidden implicit variables holding extensions are always zero except after a valid sequence of extension bytecodes.Instance Variables (inherited)1 Byte Bytecodes	code	(note)	binary			name	0-15		0000 iiii 			Push Receiver Variable #iiii	16-31		0001 iiii			Push Literal Variable #iiii	32-63		001 iiiii				Push Literal #iiiii	64-71		01000 iii			Push Temp #iii	72-75		010010 ii			Push Temp #ii + 8	76			01001100			Push Receiver	77			01001101			Push true	78			01001110			Push false	79			01001111			Push nil	80			01010000			Push 0	81			01010001			Push 1*	82			01010010			Push thisContext, (then Extend B = 1 => push thisProcess)	83			01010011			Duplicate Stack Top	84-87		010101 ii			UNASSIGNED	88-91		010110 ii			Return Receiver/true/false/nil	92			01011100			Return top	93			01011101			BlockReturn nil*	94			01011110			BlockReturn Top [* return from enclosing block N, N = Extend A, then jump by Ext B ]*	95			01011111			Nop	96-111		0110 iiii			Send Arithmetic Message #iiii #(#+ #- #< #> #'<=' #'>=' #= #'~=' #* #/ #'\\' #@ #bitShift: #'//' #bitAnd: #bitOr:)	112-119	01110 iii			Send Special Message #iii #(#at: #at:put: #size #next #nextPut: #atEnd #'==' class)	120		01111000			UNASSIGNED (was: blockCopy:)	121		01111001			Send Special Message #value	122-123	0111101 i			Send Special Message #i #(#value: #do:)	124-127	011111 ii			Send Special Message #ii #(#new #new: #x #y))	128-143	1000 iiii			Send Literal Selector #iiii With 0 Argument	144-159	1001 iiii			Send Literal Selector #iiii With 1 Arguments	160-175	1010 iiii			Send Literal Selector #iiii With 2 Arguments	176-183	10110 iii			Jump iii + 1 (i.e., 1 through 8)	184-191	10111 iii			Pop and Jump 0n True iii +1 (i.e., 1 through 8)	192-199	11000 iii			Pop and Jump 0n False iii +1 (i.e., 1 through 8)	200-207	11001 iii			Pop and Store Receiver Variable #iii	208-215	11010 iii			Pop and Store Temporary Variable #iii	216		11011000			Pop Stack Top	217		11011001			Unconditionnal trap	218-219	1101101 i			UNASSIGNED	220-223	110111 ii			UNASSIGNED2 Byte Bytecodes*	224		11100000	aaaaaaaa	Extend A (Ext A = Ext A prev * 256 + Ext A)*	225		11100001	bbbbbbbb	Extend B (Ext B = Ext B prev * 256 + Ext B)*	226		11100010	iiiiiiii		Push Receiver Variable #iiiiiiii (+ Extend A * 256)*	227		11100011	iiiiiiii		Push Literal Variable #iiiiiiii (+ Extend A * 256)*	228		11100100	iiiiiiii		Push Literal #iiiiiiii (+ Extend A * 256)	229		11100101	iiiiiiii		Push Temporary Variable #iiiiiiii	230		11100110	iiiiiiii		PushNClosureTemps iiiiiiii	231		11100111	jkkkkkkk	Push (Array new: kkkkkkk) (j = 0)									&	Pop kkkkkkk elements into: (Array new: kkkkkkk) (j = 1)*	232		11101000	iiiiiiii		Push Integer #iiiiiiii (+ Extend B * 256, where bbbbbbbb = sddddddd, e.g. -32768 = i=0, a=0, s=1)*	233		11101001	iiiiiiii		Push Character #iiiiiiii (+ Extend B * 256)**	234		11101010	iiiiijjj		Send Literal Selector #iiiii (+ Extend A * 32) with jjj (+ Extend B * 8) Arguments**	235	(1)	11101011	iiiiijjj	ExtendB < 64										ifTrue: [Send To Superclass Literal Selector #iiiii (+ Extend A * 32) with jjj (+ Extend B * 8) Arguments]										ifFalse: [Send To Superclass of Stacked Class Literal Selector #iiiii (+ Extend A * 32) with jjj (+ (Extend B bitAnd: 63) * 8) Arguments]*	236		11101100	iiiiiiii		UNASSIGNED*	237		11101101	iiiiiiii		Jump #iiiiiiii (+ Extend B * 256, where bbbbbbbb = sddddddd, e.g. -32768 = i=0, a=0, s=1)*	238		11101110	iiiiiiii		Pop and Jump 0n True #iiiiiiii (+ Extend B * 256, where Extend B >= 0)*	239		11101111	iiiiiiii		Pop and Jump 0n False #iiiiiiii (+ Extend B * 256, where Extend B >= 0)*	240		11110000	iiiiiiii		Pop and Store Receiver Variable #iiiiiii (+ Extend A * 256)*	241		11110001	iiiiiiii		Pop and Store Literal Variable #iiiiiiii (+ Extend A * 256)	242		11110010	iiiiiiii		Pop and Store Temporary Variable #iiiiiiii*	243		11110011	iiiiiiii		Store Receiver Variable #iiiiiii (+ Extend A * 256)*	244		11110100	iiiiiiii		Store Literal Variable #iiiiiiii (+ Extend A * 256)	245		11110110	iiiiiiii		Store Temporary Variable #iiiiiiii	246-247	1111011 i	xxxxxxxx	UNASSIGNED3 Byte Bytecodes	248	(2)	11111000 	iiiiiiii		mjjjjjjj		Call Primitive #iiiiiiii + (jjjjjjj * 256) m=1 means inlined primitive, no hard return after execution.	249		11111001 	xxxxxxxx	syyyyyyy	Reserved for Push Float**	250		11111010 	eeiiikkk		jjjjjjjj		Push Closure Num Copied iii (+ExtA//16*8) Num Args kkk (+ ExtA\\16*8) BlockSize jjjjjjjj (+ExtB*256). ee = num extensions	251		11111011 	kkkkkkkk	jjjjjjjj		Push Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	252		11111100 	kkkkkkkk	jjjjjjjj		Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	253		11111101 	kkkkkkkk	jjjjjjjj		Pop and Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj**	254		11111110	kkkkkkkk	jjjjjjjj		branch If Not Instance Of Behavior/Array Of Behavior kkkkkkkk (+ Extend A * 256, where Extend A >= 0) distance jjjjjjjj (+ Extend B * 256, where Extend B >= 0)	255		11111111	xxxxxxxx	yyyyyyyy	UNASSIGNED(1) Bytecode 235 is a super send bytecode that starts the lookup in the superclass of some class.  It has two forms, ""norma;"" and ""directed"". In the normal form, the class is the value of the method's methodClassAssociation which must be the last literal.  In the directed form the class is the class on top of stack.(2) The Call Primitive Bytecode specifies either a primitive in the primitive table (m=0) or an inlined primitive (m=1). Non-inlined primtiives from the primitive table have index (jjjjjjj * 256) + iiiiiiii and return from the method if they succeed.  This bytecode is only valid as the first bytecode of a method.  Inline primitives have index (jjjjjjj * 256) + iiiiiiii, cannot fail, and do not return when they succeed, yielding a result (typically on top of stack after popping their arguments, but possibly in a byte data stack, for example for unboxed floating-point primitives).We sort the inline primitive operations by arity.  Nullary primitives occupy the 0-999 range.  Unary primitives occupy the 1-1999 range, etc.We define the following inlined primitives:1000	unchecked class1001	unchecked pointer numSlots1002	unchecked pointer basicSize1003	unchecked byte8Type format numBytes (includes CompiledMethod)1004	unchecked short16Type format numShorts1005	unchecked word32Type format numWords1006	unchecked doubleWord64Type format numDoubleWords2000	unchecked SmallInteger #+.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2001	unchecked SmallInteger #-.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2002	unchecked SmallInteger #*.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2003	unchecked SmallInteger #/.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2004	unchecked SmallInteger #//.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2005	unchecked SmallInteger #\\.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2006	unchecked SmallInteger #quo:.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2016	unchecked SmallInteger #bitAnd:.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2017	unchecked SmallInteger #bitOr:.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2018	unchecked SmallInteger #bitXor:.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2019	unchecked SmallInteger #bitShift:.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2032	unchecked SmallInteger #>.  Both arguments are SmallIntegers2033	unchecked SmallInteger #<.  Both arguments are SmallIntegers2034	unchecked SmallInteger #>=.  Both arguments are SmallIntegers2035	unchecked SmallInteger #<=.  Both arguments are SmallIntegers2036	unchecked SmallInteger #=.  Both arguments are SmallIntegers2037	unchecked SmallInteger #~=.  Both arguments are SmallIntegers2064	unchecked Pointer Object>>at:.		The receiver is guaranteed to be a pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger2065	unchecked Byte Object>>at:.			The receiver is guaranteed to be a non-pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger.  The result is a SmallInteger.2066	unchecked 16-bit Word Object>>at:.			The receiver is guaranteed to be a non-pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger.  The result is a SmallInteger.2067	unchecked Word Object>>at:.			The receiver is guaranteed to be a non-pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger.  The result is a SmallInteger.2068	unchecked DoubleWord Object>>at:.	The receiver is guaranteed to be a non-pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger.  The result is a SmallInteger or a LargePositiveInteger.2069	unchecked QuadWord Object>>at:.		The receiver is guaranteed to be a non-pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger.  The result is a SmallInteger or a LargePositiveInteger.3000	unchecked Pointer Object>>at:put:.			The receiver is guaranteed to be a pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger3001	unchecked Byte Object>>at:put:.			The receiver is guaranteed to be a non-pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger.  The argument is a SmallInteger.  The primitive stores the least significant 8 bits.3002	unchecked Word Object>>at:put:.			The receiver is guaranteed to be a non-pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger.  The argument is a SmallInteger.  The primitive stores the least significant 16 bits.3003	unchecked DoubleWord Object>>at:put:.	The receiver is guaranteed to be a non-pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger.  The argument is a SmallInteger.  The primitive stores the least significant 32 bits.3004	unchecked QuadWord Object>>at:put:.		The receiver is guaranteed to be a non-pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger.  The argument is a SmallInteger.  The primitive stores the least significant 64 bits."
"TxAthensCharacterWrappingStrategy","This layout strategy wraps text, so it never overflows the view horizontally.If the line is too long to be shown fully as a single text line in view,it is automatically wrapped to the next line.Therefore, the layout is calculated based on the view's extent.The 'rightMargin' can be used to wrap the text before it gets wider than view width, e.g:maxLineWidth := view width - rightMargin.By default, right margin is Zero, meaning the max line width is same as view width.Note, if you use this strategy, the view must never use horizontal scrolling,and its offset x must be always Zero (since it makes little sense to have otherwise with such a strategy)."
"MorphTreeColumnButton","A button in a morphic based tree"
"ZnHeadersTests",""
"MetacelloScriptApiExecutor","MetacelloScriptExecutor decodes script args and launches MetacelloScriptEngine to run for each projectSpec encounters...i,e., primarily here to handl array and block args to configuration:, baseline: or project:."
"GLMActionBrickPopupDarkThemer",""
"WindowsStore","I'm a specific store for Windows file systems"
"GLMDropListModel",""
"MetacelloCleanLoadNotification",""
"AthensTextDisplayCommand","An abstract base class for all text rendering commands.A text rendered takes a stream (or list) of my (sub)instances and in that way it renders the text"
"DAPackageDependenciesWelcome","Welcome user interface to browse dependencies packages. Availaible via tools menu."
"RBClassNameInSelectorRule","This smell arises when the class name is found in a selector. This is redundant since to call the you must already refer to the class name. For example, #openHierarchyBrowserFrom: is a redundant name for HierarchyBrowser."
"GLMActionBrickThemer",""
"SortHierarchicallyIndentNode","A SortHierarchicallyIndentNode is a wrapper around any object that is used by the sorting algorithm #XXX of SortHierarchically to store the indent level of this object."
"MetacelloCopyMemberSpec",""
"RBInlineMethodRefactoring",""
"SlotTraitsTest",""
"GLMFastTreePresentation","I'm a fast table presentation who introduces FTTableMorph into Glamour  as a Tree. Description--------------------I know how to render myself and I store some options for the Tree.  I keep some options specific to the FastTable inside a Dictionary. I work with GLMMorphicFastTreeRenderer to render the FastTable. I use TGLMFastTableFunctionsPresentation in order to manage some options.Public API and Key Messages--------------------You can use the public API of my super class. You also use the public API of TGLMFastTableFunctionsPresentation (See his class comment) and you can also use:- #maxDepth: anInteger 		to define a max depth for the tree.   		- #expandedUntil: aDepth 		this is use to expand the tree at the opening until a certain depth.		 - #strategy: aSymbole 		this is use to define a Strategy for the search or the filter inside a Tree. I can take in parameter #default, #rootsOnly, #allItems.                #default is selected by default, it will search/filter the tree for all visible rows.                      #rootsOnly will search/filter only the first level of the tree               #allItems will search/filter all the Tree and open the needed items. Do not use this if the tree is not finish.Example--------------------	GLMWrapper new		show:				[ :a | 			a fastTree				children: [ :x | x subclasses ];				enableFilterWithAction: [ :dataSource :pattern :item | item browse ];				strategy: #rootsOnly;				maxDepth: 3;				rootsExpanded ];		openOn: (Object subclasses) asArray Internal Representation and Key Implementation Points.--------------------    Instance Variables	parameters:		This is a Dictionary use to store some parameters of the presentation."
"PharoCommonTools","A PharoCommonTools is a ToolRegistry that knows about common tools that may be replaced by other packages. It manages a list of the recently registered tools and provides settings for reregistering to a former registered tool."
"PluggableTextMorph",""
"AndreasSystemProfiler","AndreasSystemProfiler uses sub-msec VM supported PC sampling.	In Memory of Andreas Raab.  Author, Friend, Colleague. 	http://forum.world.st/In-Memory-of-Andreas-Raab-td4663424.html	Released by Ron, Julie and DavidExample:AndreasSystemProfiler spyOn: [ 10000 timesRepeat: [ 3.14159 printString ] ]-=-=-=-=-=-=-=Apparently, the time taken to run the provided block is as twice as long as run without the profiler.-=-=-=-=-=-=-=Both AndreasSystemProfiler and MessageTally are periodic sampling profilers.  The essential difference between AndreasSystemProfiler and MessageTally is in how the current method is sampled.MessageTally is driven from a high-priority process in a loop waiting on a delay.  When the delay fires the lower-priority process being profiled is interrupted, its stack is walked to determine the methods along the call chain, and that data is recorded.  But since the sampling occurs when the high-priority process preempts the lower-priority process, a sample is only taken at a preemption point.  In particular, primitives are *not* profiled because they are not suspension points.  A process can only be suspended on method activation (a non-primitive method activation, or primitive failure) or on backward branch.  The cost of primitives is charged to a caller and is inferred by subtracting the cost of children of the caller from the caller itself (subtracting the number of samples in children of the caller form the number of samples in the caller itself).  Another problem is that using the clock that underlies Delay, which is typically the clock used by processes being profiled, causes sampling errors due to the sampling and sampled processes cohering.  Delays are limited in resolution (at best 1 millisecond) so if the profiled process waits on a delay it'll fire immediately after the profiling process (because the profiling process is at higher priority) and so the sampling process may only ever see the sampled process in a wait state.If MessageTally is used to profile multiple processes then a third problem is that if a primitive causes a process switch then its cost will end up being charged to the process switched-to, not switched from.  This is again because sampling can only occur after a primitive has completed (successfully or not).AndreasSystemProfiler is driven from a high-priority process in a loop waiting on a Semaphore known to the VM.  The profiling process uses a primitive to schedule a sample some number of ticks of the VM's high-performance clock in the future.  When the time is reached the VM samples the current method and the current process, *before any process preemption takes place*, and independently of the standard clock, and signals the semaphore.  The profiling process then collects the method,process pair via primitives.  So AndreasSystemProfiler provides much more accurate results.That said there are still limitations with primitives and Cog.  Currently Cog only samples ""interpreter"" primitives.  Those primitives it implements in machine code (integer and float arithmetic, closure evaluation, at:, identityHash) are not sampled and won't show up; they will be charged to the calling method.  This is fixable, since Cog actually compiles the sampling direct into interpreter primitive invocation when profiling is in effect and not at other times, but sampling could be a significant cost in these simple and performance-critical primitives."
"Behavior","My instances describe the behavior of other objects. I provide the minimum state necessary for compiling methods, and creating and running instances. Most objects are created as instances of the more fully supported subclass, Class, but I am a good starting point for providing instance-specific behavior (as in Metaclass)."
"Slice","I am a Slice representation. I am used only for double disptaching the way to submit me"
"AthensTransform","My instances represent an interface for coordinate system transformation defined by 3x3 matrix of following kind:| sx   shx   x   || shy sy     y   ||  w0  w1  w2 |sx and sy define scaling in the x and y directions, respectively;shx and shy define shearing in the x and y directions, respectively;tx and ty define translation in the x and y directions, respectively.AthensSurface are responsible for providing specific implementation of me, which is most appropriate for backend its using.My internal representation isnt available for manipulation, for example dont assume i'm a matrix. In short, do not copy my state or modify it directly, instead use methods such as #loadAffineTransformation:, and talk to my surface.My subclasses should implement a common protocol for applying generic types of affine transformationson coordinate system:- translate- rotate- shear- scale- matrix multiply- matrix loadSurface must support 4 kinds of transformations of coordinate system(s):- path-to-surface (#pathTransform) to transform path coordinates to surface space- image-to-surface (#imageTransform) to transform between user coordinates and surface pixels- fill-paint-to-user (#fillTransform)- stroke-paint-to-user (#strokeTransform)Given a (fill or stroke) paint-to-user transformation Tp and user-to-surface transformation Tu, the paint color and alpha of a pixel to be drawn with surface coordinates (x, y) is defined by mapping its center point (x + 1/2, y + 1/2) through the inverse transformation (Tu * Tp)^-1 , resulting in a sample point in the paint coordinate space.All transformations, except image-to-surface , ignoring w0 , w1 and w2 values and always assume them set to { 0 , 0 , 1 } respectively.For accessing a particular kind of transformation, send message to canvas, i.e.:canvas pathTransform translateBy: 10@10.It is safe to store transformation in temporary variable, as long as canvas is valid."
"SetTest","This is the unit test for the class Set. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"FileHandleTest","SUnit tests for file handles, the tests may be found in superclass"
"ReturnNode","I represent an expression of the form ^expr."
"ManifestCollectionsAbstract","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"MetacelloVersionMethodSpec",""
"RemoteTempVectorNode","I am a node for a vector of remote temps, created to share temps between closures when those temps are written to in closures other than their defining ones."
"RBClassToRename",""
"VSVersionCommand","A command that apply to a project version."
"IRFix","Fix the IR nodes.Transforms:store, pop => popIntosome returns => quick returns"
"NECEntryTest",""
"FLBinaryFileStreamSerializationTest",""
"RBInstVarInSubclassesRule","This smell arises when instance variables are defined in all subclasses. Many times you might want to pull the instance variable up into the class so that all the subclasses do not have to define it. In addition have a look at the initialize method in each of the subclasses because if the instance variable is really the same, it will be initialized similarly in different places."
"OSVMWindowHandle","An OSVMWindowHandle is created by VMWindowDriver. "
"AssertEqualSignIntoAssertEquals","Using assert:equals: produces better context on rule failure"
"NECUntypedModelTest",""
"TxDisplayCommand",""
"LRUCache","I am LRUCache.I am a Cache.I am a limited cache that evicts the least recently used entries. My implementation is properly O(1).Implementation NotesThe key/value pairs in the cache are held as Associations in a DoubleLinkedList, lruList, ordered from least to most recently used.The keyIndex Dictionary maps from each key to the actual DoubleLink inside lruList holding the matching key/value pair.New pairs are added at the end of the list.In case of a hit, a pair gets promoted to the end of the list (most recently used).In case of a full cache, the first pair of the list gets evicted (least recently used).See #validateInvariantWith: where the relationship between the 2 datastructures is checked."
"MergeJoinSection",""
"BISimpleFormatter","I'm a simple formatter that prints nodes (without using source code). I'm usefull when AST are programmatically assembled. I could be improved but the goal is to get the information is a more or less ok form."
"DiffMorph","I am a morph useful for visualising differences between two strings.When a classContext: is setted, the strings are highlighted using such contextual information."
"MCWorkingCopyCreated","A MCWorkingCopyCreated is a announcement raised when a new MCWorkingCopy is created"
"MBConfigurationChangesCommand","Command to browse changes on a configuration in versionner"
"DelaySchedulerBackgroundWorkerMorph","I provide the support to test Pharo Case 13755. Not quite sure how to plug this into the testing framewok.  Currently just run this test manually like this...    DelaySchedulerBackgroundWorkerMorph new openInWorldwhich will FREEZE THE UI when using the following...  * DelayMillisecondScheduler  * DelayMicrosecondSchedulerbut won't freeze when using  the following...  * DelayExperimentalSemaphoreScheduler  * DelayExperimentalSpinScheduler  * DelayExperimentalCourageousSchedulerClose my instance morphs via halos, or evaluate the following...    DelaySchedulerBackgroundWorkerMorph allInstances do: #delete."
"RFClassReification","request reification of the class"
"InvalidSlotName","I am signaled when the name of a Slot is an invalid variable name."
"RubTextLine","I represent a line of text"
"GTSpotterItemBrick",""
"LayoutProperties","This class provides a compact bit encoding for the most commonly used layout properties."
"GLMItemRemoved",""
"Character","I represent a character by storing its associated Unicode. The first 256 characters are created uniquely, so that all instances of latin1 characters ($R, for example) are identical.	The code point is based on Unicode.  Since Unicode is 21-bit wide character set, we have several bits available for other information.  As the Unicode Standard  states, a Unicode code point doesn't carry the language information.  This is going to be a problem with the languages so called CJK (Chinese, Japanese, Korean.  Or often CJKV including Vietnamese).  Since the characters of those languages are unified and given the same code point, it is impossible to display a bare Unicode code point in an inspector or such tools.  To utilize the extra available bits, we use them for identifying the languages.  Since the old implementation uses the bits to identify the character encoding, the bits are sometimes called ""encoding tag"" or neutrally ""leading char"", but the bits rigidly denotes the concept of languages.	The other languages can have the language tag if you like.  This will help to break the large default font (font set) into separately loadable chunk of fonts.  However, it is open to the each native speakers and writers to decide how to define the character equality, since the same Unicode code point may have different language tag thus simple #= comparison may return false.I represent a character by storing its associated ASCII code (extended to 256 codes). My instances are created uniquely, so that all instances of a character ($R, for example) are identical."
"RBMissingSuperSendsRule","Checks that methods that should always contain a super message send, actually contain a super message send. For example, the postCopy method should always contain a ""super postCopy"". The list of methods that should contain super message sends is in #superMessages."
"GLMMorphicWindowRenderer","This renders the top most browser or composite presentation in a window."
"KMCompleteMatch","I am an announcement raised when there is a full match between the key buffer and a shortcut."
"ZnEntityWriterTests",""
"NECUntypedModel","When no receiver class is known, I'm the right model. I store all temporary variables, instance variables of the selected class and all selectors in system. For performance reasons I only collect selectors when at least one character is known."
"MCMergeResolutionRequest","Notify to resolve conflicts by merging"
"OSJoyDeviceAddedEvent","I am a joystick device added event.This event is generated when a joystick is connected to the computer."
"NECInstVarTypeGuesserTest",""
"GTSpotterEventCollectorTest","A GTSpotterEventCollectorTest is a test class for testing the behavior of GTSpotterEventCollector"
"FLSerializationError","I represent an error happened during serialization."
"Schedule","I represent a powerful class for implementing recurring schedules."
"SDL2Types","Various types used by SDL2"
"RubFindReplaceService","RubFindReplaceService default newDialog openInWorldRubFindReplaceService "
"RBPlatformDependentUserInteractionRule","Check the methods that  use platform dependent user interactions.This rule should be updated."
"KMDispatchChain","I am an object that controls the dispatch order of keymaps given a hierarchy of morphs."
"OCCompiledMethodIntegrityTests",""
"BlockClosureTest","SUnit tests for BlockClosure"
"IdentityDictionaryTest","SUnit tests for identity dictionaries"
"Duration","I represent a duration of time. I have nanosecond precision"
"MCClassTraitParser","MCClassTraitParser identifies classTrait. "
"LargeInteger","I represent integers of more than 30 bits.  These values are beyond the range of SmallInteger, and are encoded here as an array of 8-bit digits. "
"SugsSwapMethod","I know how to move a method from instance side to class side and the oposit, depending the method."
"OSWindowFrameEvent","Some strange event nobody knows what it does.??"
"CairoUTF8Converter","i use persistent buffer to convert strings to utf-8 strings (an input neede by cairo)"
"GLMBrickLayoutTraverser",""
"GLMRubricTextModel",""
"SDL_Cursor","I represent  handle of a mouse cursor."
"VMCallbackContext64","A VMCallbackContext64 is anAlien for the 64-bit version of VMCallbackContext (defined in the VMMaker package), a struct that maintains all the necessary context for a callback.typedef struct {    void *thunkp;    char *stackptr;    long *intRegArgs;    double *floatRegArgs;    void *savedCStackPointer;    void *savedCFramePointer;    union {                            long vallong;                            struct { int low, high; } valleint64;                            struct { int high, low; } valbeint64;                            double valflt64;                            struct { void *addr; long size; } valstruct;                        }   rvs;    jmp_buf trampoline; } VMCallbackContext;Instance Variables"
"SymbolTest","This is the unit test for the class Symbol. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"ThreadSafeTranscript","I'm an output device.    Transcript show: 'hello'.I implement TTranscript.While ThreadSafeTranscript is threadsafe wrt stream access, the morphic code invoked by #changed: is not. So #changed: should not be sent from multiple threads (at random times) since this causes a morph's #update: method to conflict with the UI-thread running the morph's #drawOn: method in parallel. Whereas Morphic seems to assume that #update: and #drawOn: are run sequentially from the same thread.The #step method is assumed to be invoked only from the main UI thread, so from here it is safe to send #changed: and consequently #update:. Methods #clear and #endEntry are invoked from multiple threads, so these signal to #step to call #changed: with the required parameter (#clearText and #appendEntry respectively.)Method #contents should not directly return ==stream contents==, since even with a mutex around that, multiple calls from Morphic may unexpectedly get different results and fail.  #contents needs to return a value that is static between each #step (which is ==stepContents== that is only udpated in #step).The ==stream reset== is left to occur from #clear being invoked from multiple threads. The ==stream resetContents== is moved to #step so this occurs directly after ==stepContents== is set from ==stream contents==."
"GLMPaneSelected","A pane was selected"
"CompositeBorder","Border supporting multiple ""sub-borders""."
"GLMPrivacyAgreementBrick",""
"MorphTreeMorph","A MorphTreeMorph is a list and a tree in one easily customizable widget. A list or tree is made of nodes. Each node can be made of whatever object . This allows the use of morphs inside the tree. A MorphTreeMorph works with a model which must use the TMorphTreeModel trait. MorphTreeModel uses it and can serves  as the model or as a superclass for a specific tree model.Customizable columns:Several customizable columns can be viewed. Columns are separated by resizers used in order to increase or decrease the columns width with the mouse.A MorphTreeMorph can have a top header composed of buttons, one button per column. Such a button can have an icon and/or a title and may run some action when clicked on (a typical action is the ordering of the list). You can also allow column drag-and-drop so that a column  can be dynamically moved with a simple drop.See this in action with following example:-----------ClassListExample new openOn: Collection-----------By default, the last column is not bounded, so that no resizer is added for it and threre exists no unused space between the last scroller and the right side of the whole tree. But, in some case one want to have a resizer also for the last column. This is the case for data grid as an example This is possible by sending #makeLastColumnBounded to the MorphTreeMorph.Try it with:-----------SimpleGridExample new open-----------Single and multi-selection:A MorphTreeMorph implements single and multiple selection. Multi-selection is allowed by sending  #multiSelection: with true as argument. Several items can be selected with ctrl-click (or cmd-click on mac) or with shift-click (see MorphTreeMorphModel comments to see how to handle selection from the model).Try multi-selection with following example:------------SimplestClassListExample new openOn: Collection------------Double-click handling:You can allow double-click just by indicating the message to send to the model with the doubleClickSelector: selector.Try this with the package-tree example where double-clicking on a class node or or a method node open a browser on the class or on the method:------------PackageTreeExample new open------------Long list handling:For very long lists or trees, two kind of pager can be used to limit the number of items visible in the list. The idea  is that when you have very long lists, you most of the time do not  want to see all details but just want some visual support for what is in the list: - with a simple pager, you indicate how much items are to be seen in one page, the list items are viewed page by page,- with a chunk pager you can expand either incrementally or  all-together the number of items once you get to the bottom of the existing items.See SimplestClassListWithPagerExample and SimplestClassListWithChunkExample examples.Try them with:------------SimplestClassListWithPagerExample new openOn: Object.SimplestClassListWithChunkExample new openOn: Object.------------Columns/rows coloring:MorphTreeMorph makes it possible the coloring of either the columns or the rows. A MorphTreeMorph understands #rowColorForEven:odd: for rows coloring and columnColorForEven:odd: for columns coloring with two colors passed as argument (nil means no color). See following examples:-------------PackageTreeExample new open. ""For row coloring""ClassListExample new openOn: Collection. ""For column coloring""-------------Column drag and dropA column can be dragged. Inside the tree, a column can be dropped into another one. Then, the two columns are swapped (the roughly implemented)Try it with:-------------ClassListExample new openOn: Collection.-------------Instance Variables	autoDeselection:		<Object>	autoMultiSelection:		<Object>	columnColors:		<Object>	columnDropUnabled:		<Object>	columnInset:		<Object>	columnResizers:		<Object>	columns:		<Object>	doubleClickSelector:		<Object>	expandedToggleImage:		<Object>	gapAfterIcon:		<Object>	gapAfterToggle:		<Object>	getListSelector:		<Object>	getSelectionSelector:		<Object>	hasToggleAtRoot:		<Object>	iconReservedExtent:		<Object>	indentGap:		<Object>	keystrokeActionSelector:		<Object>	lastSelectedMorph:		<Object>	lineColor:		<Object>	multipleSelection:		<Object>	nodeList:		<Object>	nodeSortBlock:		<Object>	notExpandedToggleImage:		<Object>	pager:		<Object>	potentialDropMorph:		<Object>	preferedPaneColor:		<Object>	resizerWidth:		<Object>	rowColors:		<Object>	rowInset:		<Object>	scrollDeltaHeight:		<Object>	selectedMorphList:		<Object>	setSelectionSelector:		<Object>	shiftSelectedMorph:		<Object>	topHeader:		<Object>	topHeaderBackground:		<Object>	unboundLastColumn:		<Object>	withHLines:		<Object>autoDeselection	- xxxxxautoMultiSelection	- xxxxxcolumnColors	- xxxxxcolumnDropUnabled	- xxxxxcolumnInset	- xxxxxcolumnResizers	- xxxxxcolumns	- xxxxxdoubleClickSelector	- xxxxxexpandedToggleImage	- xxxxxgapAfterIcon	- xxxxxgapAfterToggle	- xxxxxgetListSelector	- xxxxxgetSelectionSelector	- xxxxxhasToggleAtRoot	- xxxxxiconReservedExtent	- xxxxxindentGap	- xxxxxkeystrokeActionSelector	- xxxxxlastSelectedMorph	- xxxxxlineColor	- xxxxxmultipleSelection	- xxxxxnodeList	- xxxxxnodeSortBlock	- xxxxxnotExpandedToggleImage	- xxxxxpager	- xxxxxpotentialDropMorph	- xxxxxpreferedPaneColor	- xxxxxresizerWidth	- xxxxxrowColors	- xxxxxrowInset	- xxxxxscrollDeltaHeight	- xxxxxselectedMorphList	- xxxxxsetSelectionSelector	- xxxxxshiftSelectedMorph	- xxxxxtopHeader	- xxxxxtopHeaderBackground	- xxxxxunboundLastColumn	- xxxxxwithHLines	- xxxxx"
"OSVMFormRenderer","My instances implement OSWindowFormRenderer interface for OSVMWindowHandle."
"ProtoObjectTest","This is the unit test for the class ProtoObject. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"DraggableCallback","I represent a callback to make the window draggable from any chosen rectangle. Useful for undecorated windows.Warning : Only available with SDL 2.0.4 or higher !"
"RBPharoBootstrapAnalyzerStubWithNewDependency","Stub class to do not compute dependencies of the given package butrather give pre-established responses back."
"MCMergeOrLoadWarning","A MCMergeOrLoadWarning is a simple warning used when amerge or a load action may override existing entities."
"RBCodeCruftLeftInMethodsRule","This smell arises when a breakpoint,  logging statement,  etc is found in a method. This debugging code should not be left in production code.  Here are messages currently checked: clearHaltOnce,  doOnlyOnce: ,  halt, halt:   onCount:  object2, haltOnCount: , haltOnce, hatIf: , inspectOnCount: , inspectOnce, inspectUntilCount: , rearmOneShot, setHaltOnce, flag: , isThisEverCalled, isThisEverCalled: , logEntry, logExecution, logExit, needsWork and Transcript  messages."
"MessageTally","My instances observe and report the amount of time spent in methods.NOTE: a higher-level user interface (combining the MessageTally result tree with a method browser) is available from TimeProfileBrowser. Note that TimeProfileBrowser was not fancy with the different setting possibilities.	TimeProfileBrowser spyOn:  [20 timesRepeat: 			[Transcript show: 100 factorial printString]]	Strategies-----------MessageTally provides two different strategies available for profiling:* spyOn: and friends use a high-priority Process to interrupt the block or process being spied on at periodic intervals. The interrupted call stack is then examined for caller information. See below for an example showing different settings* tallySends: and friends use the interpreter simulator to run the block, recording every method call.The two give you different results:	* spyOn: gives you a view of where the time is being spent in your program, at least on a rough statistical level (assuming you've run the 	block for long enough and have a high enough poll rate). If you're trying to optimize your code, start here and optimize the methods where 	most of the time is being spent first.	* tallySends: gives you accurate counts of how many times methods get called, and by exactly which route. If you're debugging, or trying to 	figure out if a given method is getting called too many times, this is your tool.Q: How do you interpret MessageTally>>tallySendsA: The methods #tallySends and #spyOn: measure two very different quantities, but broken down in the same who-called-who format.  #spyOn: is approximate, but more indicative of real time spent, whereas #tallySends is exact and a precise record of how many times each method got executed.Examples----------Here you can see all the processes computation time			[1000 timesRepeat: [3.14159 printString. Processor yield]] fork.		[1000 timesRepeat: [30 factorial. Processor yield]] fork.		[1000 timesRepeat: [30 factorial. Processor yield]] fork.		MessageTally spyAllOn: [ (Delay forMilliseconds: 100) wait] Settings---------You can change the printing format (that is, the whitespace and string compression) by using these instance methods: 	maxClassNameSize:	maxClassPlusSelectorSize:	maxTabs:You can change the default polling period (initially set to 1) by calling	MessageTally defaultPollPeriod: numberOfMillisecondsTo understand the difference----------------------------------Here we see all the processes	[1000 timesRepeat: [		100 timesRepeat: [120 factorial].		(Delay forMilliseconds: 10) wait		]] forkAt: 45 named: '45'.	MessageTally spyAllOn: [10000 timesRepeat: [1.23 printString]]		Here we only see the execution of the expression [10000 timesRepeat: [1.23 printString]	[1000 timesRepeat: [		100 timesRepeat: [120 factorial].		(Delay forMilliseconds: 10) wait		]] forkAt: 45 named: '45'.	MessageTally spyOn: [10000 timesRepeat: [1.23 printString]]	Here we only check the exact message sends: this is not a pc-sampling approach	[1000 timesRepeat: [		100 timesRepeat: [120 factorial].		(Delay forMilliseconds: 10) wait		]] forkAt: 45 named: '45'.	MessageTally tallySends: [10000 timesRepeat: [1.23 printString]]	"
"GLMExpander","GLMExpander aims to implement a Hopscotch-like browser. This is similar to a tree where each tree node content is itself a presentation."
"GLMMorphicBrowserRenderer",""
"WorldModel","I am a model representing Pharo World.This way, every spec application can be opened as the Pharo system window as window, to simulate native a application."
"OCBytecodeDecompilerExamplesTest",""
"QuestionDialogWindow","A yes/no/cancel message dialog. Cancel (escape & return) is the default."
"GLMTransmissionContext","This class models the context in which a set of transmissions take place. In essence, it records all ports that were reached after an outside event.  That is necessary for ensuring that transmissions do not get propagated forever. When the first transmission is triggered, a context is created and this context will then store all ports that any subsequent transmission touches. This info is used to break possible cyclesInstance Variables	ports:		Collection of Ports"
"RBPushDownInstanceVariableRefactoring",""
"SearchableList","SearchableList 	new items: #( aaa abc axz bbb bfbg bof c);	openWithSpec	should it be a subclass of LIstModel?Because now I will have to delegate a lot? and I cannot plug a IconListHow do I make textModel react to every keystroke without an accept"
"ZnLimitedReadStreamTests",""
"SystemOrganizer","My instances provide an organization for the classes in the system, just as a ClassOrganizer organizes the messages within a class. The only difference is the methods for fileIn/Out."
"QAFeedbackMorph","I provide a small morph for providing feedback about critics from Nautilus plugin"
"AGroupHasBeenRenamed","Notify that a group has been renamed"
"TempVariableNode","I am a parse tree leaf representing a temporary variable"
"Scanner","I scan a string or text, picking out Smalltalk syntactic tokens. I look one character ahead. I put each token found into the instance variable, token, and its type (a Symbol) into the variable, tokenType. At the end of the input stream, I pretend to see an endless sequence of special characters called doits."
"ClassOrganizationTest","SUnit tests for class organization"
"TextConstants","A pool for Text constants for space, tab, espace, ..."
"OCASTSemanticCleaner","I am cleaning the semantic analysis of the AST.-> scopes of Blocks and Methpd-> binding from Variables"
"GLMAnnouncementPropagationTest",""
"TestAutoFractionComputation","I am a widget used to verify that the mechanism used to compute rows and columns are still working."
"GTExampleNautilusAction",""
"GLMTreeMorphNodeModel",""
"ConfigurationOfCatalog","A configuration for Catalog browser"
"OSTouchThreeFingersSwipeBeginEvent","Three fingers started to swipe"
"GLMHelperTest",""
"AsyncFile","An asynchronous file allows simple file read and write operations to be performed in parallel with other processing. This is useful in multimedia applications that need to stream large amounts of sound or image data from or to a file while doing other work.Closing the file after its use is currently required to not leak external semaphores. "
"GLMPrintPopper","I am a popper that displays a notification message: I can display a given object or evaluate the selection of the attached text editor. I also offer a button for inspecting the object that is displayed.GLMPrintPopper simpleObjectPopper	GLMPrintPopper selectionEvaluationPopper"
"AColorSelectorMorph","ColorComponentSelector showing an alpha gradient over a hatched background."
"STONJSON","I am STONJSON, a class side facade to use STON as a simple JSON parser/writer.STON is more or less a superset of JSON and is backwards compatible with JSON while parsing, and can be compatible with it while writing. The important differences (and the whole reason why STON exists in the first place) are   - class information (except for lists (Array) and maps (Dictionary))  - proper handling of shared and circular references  - more Smalltalk like syntax (Symbols with #, single qouted Strings, nil instead of null)  - more defined special types (Date, Time, DataAndTime, ByteArray, Point)Parsing JSON is done using  #fromString:  #fromStream: with the results being composed of Arrays and Dictionaries.Writing objects as JSON is done using  #toString[Pretty]:  #put:onStream[Pretty]:Note that you can only write Arrays and Dictionaries ! Shared and circular references will be noted and signalled using an exception.E x a m p l e s  STONJSON toString: { 1. -1. Float pi. true. 'JSON' }.  STONJSON fromString: '[1,-1,3.141592653589793,true,""JSON""]'.  STONJSON toStringPretty: { #foo->1. #bar->2 } asDictionary.  STONJSON fromString: '{""foo"":1,""bar"":2,""sub"":{""a"":true,""b"":false},""flags"":[1,8,32]}'. For a much more sophisticated JSON parser/writer implementation, have a look at NeoJSON."
"RBRenameClassVariableTest",""
"ClassRenamed","the annoucement will be emitted when renaming a class or a trait using:  	=> RenameClassRefactoring >> rename:to:	=> class>>rename:The corresponding event is raised in: SystemDictionary>>renameClass:from:to:"
"MCPatcher","I can add or remove or modify definitions. My main purpose is to generate monticello snapshot out of multiple snapshots or definitions by using my most used method #apply:to:."
"DateParsingTests",""
"MethodClassifier","I am a method classifier that sets the protocl of methods using some simple rules.Example Usage:	MethodClassifier classify: MyClass >> #mySelector"
"FLDecoder","I am an abstraction used by the materialization algorithm to decode the graph from a stream."
"KMCombinationTests",""
"GLMMorphicSingleSpotter",""
"GB2312","This class represents the domestic character encoding called GB 2312 used for simplified Chinese."
"QAEventCollector","I log the usage data of quality assistant"
"SugsDeprecateMethod","I know how to deprecate method."
"Cursor","I am a Form that is a possible appearance for a mouse cursor.  My size is always 16x16, ever since the original implementation on the Alto.There are many examples available in the ""current cursor"" category of class methods.  For example, ""Cursor normal"" and ""Cursor wait"".  For example:	Cursor wait show"
"FLSignatureTest","SUnit tests for fuel serializations, here signatures"
"MessageBrowser","A MessageBrowser is a UI to browse a list of method, regardless of what they could be.example: MessageBrowser new	openWithSpec;	messages: (SystemNavigation new allSendersOf: #at:)	yourself"
"LazyTabGroupTest",""
"CursorWithMask","A Cursor which additionally has a 16x16 transparency bitmap called a ""mask"".  See the comment of beCursorWithMask: for details on how the mask is treated."
"RxsNode","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A generic syntax tree node, provides some common responses to the standard tests, as well as tree structure printing -- handy for debugging."
"ScrollBar","Inspired by an oiginal design of Hans-Martin Mosner, this ScrollBar is intended to exercise the handling of input events in Morphic.  With sufficient flexibility in this area, all particular behavior can be concentrated in this single class with no need to specialize any other morphs to achieve button, slider and menu-button behavior.Once we have this working, put in logic for horizontal operation as well.CachedImages was added to reduce the number of forms created and thrown away. This will be helpful for Nebraska and others as well."
"RBOnlyReadOrWrittenTemporaryRule","Checks that all temporary variables are both read and written. If an temporary variable is only read, you can replace all of the reads with nil, since it couldn''t have been assigned a value. If the variable is only written, then we don''t need to store the result since we never use it."
"GTExampleArgumentError",""
"GLMExpanderTreeMorphModel",""
"GTInspectSelectionDebugAction","This action is responsible for inspecting a selected piece of code from the code pane of the debugger."
"StackLayout",""
"ParagraphSelectionBlock",""
"ProcessLocalSlot","A ProcessLocal is a slot that references different objects in different processes.Internally it is implemented with a ProcessLocalVariable. Writing into the slot writes a field in the current process. myProcessLocalVariable value: anObjectReading into the Slot reads the only field in the array.myProcessLocalVariable value.This slot inherits from IndexedSlot to guarantee that this slot has a real field inside an object.This slot should be used wisely:1) The value is stored weakly, an example of this would be:obj := MyClass new.obj local: Object new.obj local. “anObject” <—— Now we see the objectSmalltalk garbageCollect.obj local. “nil” <—— Now we don’t2) This variable are stored in a WeakArray in the Process, so massive use of them will make the array in the processes start growing a lot and often."
"Locale","Main comment stating the purpose of this class and relevant relationship to other classes.	http://www.w3.org/WAI/ER/IG/ert/iso639.htm	http://www.oasis-open.org/cover/iso639a.html	See also	http://oss.software.ibm.com/cvs/icu/~checkout~/icuhtml/design/language_code_issues.html	http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.10	ISO 3166http://mitglied.lycos.de/buran/knowhow/codes/locales/"
"FLNotSerializable","I represent an error which may happen while tracing in the graph an object that is forbidden of being serialized."
"CriticToolbar","I am the toolbar for a selected SmallLint Critic in the critic browser.Instance Variables	browseModel:		<Object>	criticHolder:		<Object>	falsepositiveModel:		<Object>	ruleHolder:		<Object>	transformModel:		<Object>browseModel	- xxxxxcriticHolder	- xxxxxfalsepositiveModel	- xxxxxruleHolder	- xxxxxtransformModel	- xxxxx"
"GTBytecodeDebugger","I am a debugger that provides the ability to step through the execution at the bytecode level (e.g. one bytecode at a time)."
"TxEditorDecorator",""
"FloatingPointException","I am FloatingPointException, an ArithmeticError indicating a problem in a floating point calculation.Precision underflow or overflow could be considered FloatingPointExceptions.ZeroDivide, DomainError and NaNException are examples of more specific ArithmeticErrors that can be signaled before an operation is actually attempted."
"ExactFloatPrintPolicy","I am ExactFloatPrintPolicy.Through FloatPrintPolicy and double dispatch I force Float>>#printOn:base: to dynamically use the slower but accurate way to print Floats using Float>>#absPrintExactlyOn:base:"
"MethodFromTraitAction","Action when the method comes from a trait"
"AbstractClassInstaller","I take a ready class and install it in a given environment.My sublcasses implement custom strategies."
"Adler32","The Adler32 checksum algorithm was developed by Mark Adler for his ZLib algorithm. It is defined in IETF RFC 1950: http://tools.ietf.org/html/rfc1950#page-10.The purpose of this class is mainly grouping as the ZipPlugin already implements Adler32. See also the comment in #update:from:to:in:Note that Adler32 is not a CRC, strictly speaking."
"ZdcOptimizedSocketStream","I am ZnOptimizedSocketStream.I am a ZdcSimpleSocketStream.I re-implement the critical operations dealing with bulk input and output more efficiently to work with buffer sized chunks, bypassing #next and #nextPut:"
"NavigationHistory","I act as a web browser history"
"MTDependency","A MTDependency is an abstraction for project dependencies.Instance Variables	- name : The dependency name	- repository : The repository URL used to find this dependency	- version : The specific version describes by the dependency	- platforms : If not nil, the dependency is only applicable to specified platforms	- dependencies : A dependency could have dependencies	- project : The project root node	- parent: The owner of the dependency."
"GLMPresentationToolbarUpdated","A GLMPresentationToolbarUpdated is announced by the presentation when it's toolbar actions ned to be updated. By toolbar actions we refer to those actions that apply on the entire presentations and not those that apply on the selection (which are usually displayed in a context menu).Only the part of the morph that displays the actions is updated. "
"DAAddPackageModel","A simple CompasableModel to add new packages to the current package dependencies analysis.It implies to be open from a PDPackageAnalyzerWindowPackageDependencies instance. "
"ReflectiveMethod","I am a method, but not a compiled method storing bytecode, but a high-level model of a method referencing the AST.to be compatible to CompiledMethod, I forward sends to a compiled method of myself.When I am installed in a class, #run:with:in: will compile a new compiledMethod and install it. This compiledMethod has a reference to me. We form a ""twin"" were we reference each other and either can be installed.call #invalidate to force the installation of the ReflectiveMethod, and therefore code generation on the next execution."
"OCScopesCollector","I am a helper class to simplify tests related to scopes. I collect all scopes of the AST.This way one can easily check for scopes and variables even when the scopes are deeply nested.Simple example (with just a method scope):|ast scopes ivar|ast := (OCOpalExamples>>#exampleiVar) 		parseTree doSemanticAnalysisIn: OCOpalExamples.scopes := (OCScopesCollector new visitNode: ast) scopes.ivar := scopes first lookupVar: #iVar"
"WhereIsDebugAction","A WhereIsDebugAction highlights in the code editor the current instruction."
"GLMCompositePresentationTest",""
"FLSqueak44Platform",""
"AbsolutePath","I represent an absolute path (a position starting from Path root)"
"MetacelloGoferLoad",""
"GLMMorphicSpecRenderer",""
"HowToMakeYourOwnTutorialTest","Tests for HowToMakeYourOwnTutorial"
"UnknownSelector","Notify about an unknown selector"
"OSTouchTwoFingersRotationEvent","I am the abstract class for all two fingers rotation events"
"FLGlobalValueCluster","I am a cluster for known objects that belong to Smalltalk global dictionary.For example, Transcript could be serialized and materialized by me."
"SDL_SysWMinfo","A structure that contains system-dependent information about a window. "
"SpecAdapterBindings","I am an abstract classI am used to link a spec-oriented adapter name to a framework specific adapter class name"
"TxModel","I am the central class, representing the text.Internally my instances are organized as a double-linked list of spans (TxBasicSpan subclasses). There are multiple kinds of spans, like: CharacterSpan and LineSeparator.The list is terminated at both ends with special TxStartSpan and TxEndSpan instances (which means even empty text consists of at least two such spans). Spans carry the actual text content, like characters and attributes. The model is designed in a way that it should be fairly easy to extend it by introducing new kinds of spans later. I don't provide a direct interface for mutating/editing my data (and this is a very important point). Instead I am modified using position(s) (TxTextPosition) and/or selection(s) (TxInterval/TxSelection), providing a rich protocol for various operations over text. "
"PackageAbstractNodeExample","Example for abstract package nodes"
"TxTextPosition","I represent a position inside a text. I am immutable.I'm characterized by a span and position inside span.Usually, one does not specify an absolute position in text (using textIndex accessors),but instead a relative position, by starting from some known point (like an already known position, or text start/end),and navigating to the desired position using the navigation protocol (moveLeft/moveRight, etc). I provide operations to:	- query the position in a text (isAtEnd, isAtStart, isValid)	- compute a new position relative to the existing one (moveToLeft: 3, moveToUp)	- insert new text (#insert: ) or embedded object (#insertObject:).	I can also give access to an absolute position in text using #asTextIndex accessors, but they are much slower/ineffective compared to relative positioning, and should not be used unless necessary."
"UTF16TextConverterTest","SUnit tests for UTF16TextConverter "
"FFIInt64","I'm an signed int type (64bits)I map to a longlong type. "
"RubCurrentLineBarDecorator",""
"CheckboxMorph","Checkbox with box button and label with enablement support."
"OCSemanticWarning","If a variable is not found or some other problem occurs during checking (ASTChecker) than a particular subclass instance of me is signal, usually causing a notification to the user. If not handled, the default handling is done, and compiling continues."
"RBRenameClassChange",""
"MorphicMenuAdapter","I am the adapter used to build a MenuMorph from a MenuModel"
"MCClassDefinitionTest",""
"ZnUnknownHttpStatusCode","ZnUnknownHttpStatusCode is signalled when an unknown/unsupported HTTP status code is found.Part of Zinc HTTP Components. "
"MetacelloIssue108Resource",""
"OCCaseOfTest",""
"DADependentPackageNode","A PDDependentPackageNode is used to display a dependent package in a tree."
"TxActionAttribute","I have the following semantics:- when a UI event attempts to interact with my text, I run it through my filter, and trigger the action if it passes.Instance Variables:#value - an action block, with an optional argument to receive the event"
"MethodChangeRecord","MethodChangeRecords are used to record method changes.  Here is a simple summary of the relationship between the changeType symbol and the recording of prior state			|	prior == nil			|	prior not nil		---------	|----------------------------	|--------------------	add		|	add					|	change	---------	|----------------------------	|--------------------	remove	|	addedThenRemoved	|	removeStructure:changeType			symbol -- as summarized abovecurrentMethod	method				This is the current version of the method.				It can be used to assert this change upon entry to a layer. infoFromRemoval -- an array of size 2.				The first element is the source index of the last version of the method.				The second element is the category in which it was defined, so it				can be put back there if re-accepted from a version browser.Note that the above states each have an associated revoke action:	add --> remove	change --> change back	remove --> add back	addedThenRemoved --> no changeHowever all of these are accomplished trivially by restoring the original method dictionary."
"ZnUnknownScheme","ZnUnknownScheme is signalled when an unknown/unsupported URL scheme is found.Part of Zinc HTTP Components. "
"RadioButtonGroup","I am a group for radio buttons which ensures that only one button is activated at the same time."
"TreeColumnModel","I represent a tree column. I am used to specify how to render nodes, as well as the header title, icon , action on click and properties (resizable, initial width)"
"DelayBenchmark","The delay scheduling loop is THE highest priority code which is run in Pharo, in other words it is time-critical. The speed of this code is critical for accurate responses, it is critical for network services, it affects every last part of the system.DelayBenchmark provides a means for evaluating modifications.  This is fairly basic, providing only Transcript output of results.Over a number of trials the amount of concurrent delays is increased.  The durations are randomly pre-generated into an array to avoid that overhead in the trials.  A fixed seed is used to try and improve comparisons between runs. Uncomment the additional seeds to provide better averaging of results."
"RPackageMethodsSynchronisationTest","SUnit tests for RPackage method synchronization"
"PluggableListItemWrapper","luggableListItemWrapper makes it more easy for clients to use hierarchical lists. Rather than having to write a subclass of ListItemWrapper, a PluggableListItemWrapper can be used to provide the appropriate information straight from the model:	string - an explicit string representation (contrary to the 'item' which contains any kind of object)	getStringSelector - a message invoked to retrieve the sting representation of its item dynamically from its model (when a constant representation is undesirable)	hasContentsSelector - a message invoked in the model to answer whether the item has any children or not.	getContentsSelector - a message invoked in the model to retrieve the contents for its item.All callback selectors can have zero, one or two arguments with the item and the wrapper as first and second argument."
"RBUnclassifiedMethodsRule","All methods should be put into a protocol (method category) for better readability."
"FTPluggableIconListMorphAdaptor","I'm an adaptor to adapt a PluggableIconListMorph into a FastTable. I implement all required methods, but transform them to serve a table through a FTDataSource."
"MetacelloRepositorySpecTestCase",""
"OSTouchOneDirectionGestureDetector","I detect gestures which needs all fingers to go on the same direction"
"DAAbstractPackageNode","Abstract class from package node displaying in the tree."
"SpecDialogWindow","A SpecDialogWindow is a window made for embedding Spec models into dialog windows"
"FFILibrary","I'm an util to answer module libraries that can have different names in different platforms. I just implement a double dispatch with platform."
"TextAndTextStreamTest","At May 09, 2003 Tim Olson sent a bug report to the Squeak developers list that inspired me to examine the protocol of TextStream in greater detail.  (The bug that Tim reported was present in Squeak 3.4, it is shown in testExample1.) In a discussion that followed,  Daniel Vainsencher proposed that we should have tests for Text and TextStreams. This class is an attempt to implement that proposal. For Squeak 3.4, some of the test examples fail."
"RPackageMonticelloSynchronisationTest","SUnit tests for RPackage Monticello synchronization"
"RubExtentChanged","I am raised when the right bounds of the text area are changed"
"GrowlMorph","A GrowlMorph is a little Morph to announce event happening. Freely inspired from the MIT Snarl developed by  Tony Garnock-Jones. GrowlMorph new openInWorld.10 timesRepeat: [	(GrowlMorph openWithLabel: 'The time' contents: DateAndTime now)""		vanishDelay: 1000;		resetVanishTimer"".	World doOneCycle ].(GrowlMorph openWithLabel: 'The time' contents: DateAndTime now) 	actionBlock: [Transcript open]."
"UnmodifiedField","Ceci n'est pas une modifications.I am used to migrate non modified fields from the old to the new instance.Typically I am used when only certain fields are modified and others are left as is."
"ExampleSlotWithState","I am a simple example for a Slot.Instead of mapping to a field, I store the value myself. This means that all instances share theslot, similar to a class variable.I just overide the methods for reflective read and write (#read and #write:to:), I do not bother to emit bytecode myself but rely on the fallback that the compiler will generate code for reflective read and write (see the emit* method of my superclass).PharoClassInstaller make: [ :builder |	builder name: #A;	slots: { TestSlot named: #iv };	category: #Playground ].In class A we can implement accessors:iv	^iviv: anObject	iv := anObjectThey look like normal ivar accesses, but in the background, the compiler delegated to the Slot the code generation, calling emit*, which leadsto the bytecode e.g. for the read:21 <20> pushConstant: iv => TestSlot22 <70> self23 <E1> send: read:24 <7C> returnTopyou could override the emit* methods to generate faster code, but to get something running it is not needed.To test, e.g. you can set the slot from one object and read it from another:A new iv: 6A new iv Then inspect the slot: (A slotNamed: #iv) inspect"
"MethodPragmaTest","SUnit tests for method pragmas"
"MCMockRPackage","This class should be used instead of MCMockPackageInfo in the monticello tests"
"VersionnerToolBoxTest","test class for the versionner toolbox."
"IRBlockReturnTop","I model the bytecode for block returns."
"ZnParseError","ZnParseError is the superclass of all Zinc HTTP parsing related errors.Part of Zinc HTTP Components."
"KMCatcherMorph","I am a morph that captures keymappings, so they can be used for configuration/customization, or debugging."
"RBCreateAccessorsForVariableRefactoring",""
"FLNotSerializableMock","A test mock which is not serializable"
"SystemNavigationOnNewlyCreatedEnvironmentTest",""
"ClassDiffBuilder","I'm like TextDiffBuilder, but I split the input text by Character >> #separators, instead of new lines. I'm probably ment to create diffs of class definitions."
"RubTextFieldExample","self open.self openWithScrollbar.self openWithBorderOfWidth: 1.self openWithBorderOfWidth: 5.self openWithScrollbarAndBorderOfWidth: 0.self openWithScrollbarAndBorderOfWidth: 1.self openWithScrollbarAndBorderOfWidth: 5.self openAutoAccept."
"GTSpotterRecorderSelectedCandidateChangedEvent","A GTSpotterRecorderSelectedCandidateChangedEvent models the action of  selecting an element in the search results."
"QASettings","I hold settings for quality assistant"
"ToggleMenuItemShortcutWithSymbol","I prepare a shortcut as a combination of symbols (the command, alt, etc. symbols... check #symbolTable to have a detail). We also trust in the presence of FreeType fonts (a default nowadays) and ""Lucida Grande"" font, the mac font used to show menus. If any of this conditions are not fullfilled, ToggleMenuIttemMorph with not use me but my sibling."
"TxTextEditor","I control text edit operations by using selection and can support undo operations."
"FLSqueak41Platform",""
"GLMMorphicWrapperRenderer",""
"KoreanEnvironment","This class provides the Korean support.  Unfortunately, we haven't tested this yet.  We did have a working version in previous implementations, but not this new implementation. But as soon as we find somebody who understand the language, probably we can make it work in two days or so, as we have done for Czech support."
"WindowAnnouncementTest",""
"SDL2Example","Couple examples.."
"MCPackageTest",""
"TxContextMenuAnnouncement",""
"SimulationExceptionWrapper","Notify about an exception while simulating an execution"
"DebugSession","A DebugSession models a debuggeing session. It contains the interrupted context and process. Its main goal is to handle debugger actions such as restart or stepInto, as well as recomplilation of methods. It is the model used as an input to a ui.As it is just a model it does now contain any information related to the ui. For example, it does not know what a selection in the ui is. It is the job on the ui to maintain the selection and call this session with the propper context.To create sessions use the mehod 'process: aProcess context: aContext'. aContext must be a context belonging to aProcess, and aProcess must be an interrupted process.Instance Variables	context:		<Object>	errorWasInUIProcess:		<Object>	process:		<Object>context	- xxxxxerrorWasInUIProcess	- xxxxxprocess	- xxxxx"
"RBOrEnvironment","I am the combination of two RBEnvironments, a logical OR. That is: entity A is in this environment if it is in at least ONE environment I am constructed from.Do not construct instances of me directly, use method #| for two existing environments:env1 | env2 -> a RBOrEnvironment."
"ToolDockingBarMorph","A non user-moveable docking bar that uses theme-based fill styles."
"NECOverrideModel","I'm used when completing a method override. I contain all selectors of the superclass minus the already implemented selectors of the current class. When a completion occurs I complete a method template with a send to super."
"WikiStyleHelp","This help type extends the system with a wiki like help descriptions"
"RubConfigurationChange","I am raised when the configuration of a view changes"
"FFICallout","I'm implement a callout mechanism to be used with nb calls formatting.Callout arguments can be either:- an integer constant, boolean or nil- a type name (string or symbol)- a class name- a class variable- any other object, which responds to #asExternalTypeOn:Options: Options may change the execution/compilation of ffi calls. Not many are predefined, here a small explanation of them: optIndirectCall 		This will perform an ""indirect function call"" as explained here: https://en.wikipedia.org/wiki/Function_pointer"
"WinPlatform","I am a an object representing a Windows platform. Use myself to access platform specific features.Please keep me polymorphic to the the other platform objects.To get the current platform, you can evaluate:OSPlatform current."
"SHParserST80","I am a Smalltalk method / expression parser supporting syntax highligthing. "
"ReSystemAnnouncer","I announnce events related to Renraku and it's users.To see the possilbe announcements check ReCriticEvent hierarchy.To subscribe use:ReSystemAnnouncer uniqueInstance week ..."
"GoferSynchronize","Synchronize repos "
"GLMSingleUpdateAction","This class specifies that the updating announcement should come only from the single announcer object."
"NOCModel","I keep the state of the ocompletion algorithm. See comments of my parents for details. "
"RBProgramNodeVisitor","RBProgramNodeVisitor is an abstract visitor for the RBProgramNodes."
"OSWindowGenericRendererDrawingExample","I am a basic example to show how we can draw something.To launch the example:self new open"
"ResetWindow","A ResetWindow is simple UI to reset the currently analysed model."
"WideString","This class represents the array of 32 bit wide characters."
"GLMMorphicLabelRenderer",""
"GTSpotterRecorderHidePreviewEvent","A GTSpotterRecorderHidePreviewEvent  models the action of explicitly hidding the preview."
"MCStReaderTest",""
"NECInstVarTypeGuesser","I'm a simple InstructionClient that tries to guess the type of a given instance variable name of a class. "
"GLMPagerButtonClicked",""
"GTSpotterDropDownMorph",""
"FLMaterialization","I implement the algorithm for materializing an object graph on a stream. FLMaterializer known how to build instances of me."
"MCSnapshotResource",""
"RBAddMethodRefactoring",""
"MetacelloScriptNotification",""
"ZnMaximumEntitySize","I am ZnMaximumEntitySize.I am a DynamicVariable and a ProcessSpecificVariable.I am used to control the maximum size of entities being read from streams."
"BlockNode","I represent a bracketed block with 0 or more arguments and 1 or more statements. If I am initialized with no statements, I create one. I have a flag to tell whether my last statement returns a value from the enclosing method. My last three fields remember data needed for code generation. I can emit for value in the usual way, in which case I create a literal method (actually a context remotely copied) to be evaluated by sending it value: at run time. Or I can emit code to be evaluated in line; this only happens at the top level of a method and in conditionals and while-loops, none of which have arguments."
"CopyVisitor","I create a copy of the directory tree that I visit. I use the PreorderGuide so that I can create directories before creating their contents. "
"AthensDemoMorph","Demos for Athens, just run:   AthensDemoMorph exampleYou can find an implementation of each figure incorresponding #figure<#>: method"
"AthensFlakeDemo","AthensFlakeDemo new openInWindow"
"LiteralDictionaryTest","SUnit tests for literal dictionaries"
"StrikeFontSet","I am something acts like a font out of collection of fonts. First font in me is used as representative font to answer many messages.Examples:- display a font: StrikeFontSet allInstances first fontDisplay - calculate pixels width of a string for a font: StrikeFontSet allInstances first widthOfString: 'Pharo'"
"TextMessageLink","A link to a hidden mail message.  Clicking on it allows the message to be viewed or saved to disk."
"Privacy","I represent basic privacy question about collecting user activities and other data that helps to improve Pharo and related tools.Responsibility: I keep information about sending diagnostic and usage data. Collaborators:I only keep the privacy information. All services that collects diagnostic and usage data should do it only if #sendDiagnosticsAndUsageData is true. If you want to add more specific settings related to privacy, you can put it to the privacy group.Public API and Key Messages- sendDiagnosticsAndUsageData   "
"MorphTreeMorphSingleSelection","Single selections in a morphic based tree"
"GLMSimplePort","GLMSimplePort simply offers a hardcoded value. It is typically used in tests, but it can be useful in special cases when we need to simulate a Port.Instance Variables:	value	<ProtoObject | PseudoContext>"
"AbstractSpecLayoutAction","AbstractSpecLayoutAction is an abstract class representing a spec layout action."
"RubCancelEditRequested","I am raised when edits are cancelled in the text area"
"CoverageRubricStyler","A styler that highlight with green all executed statement.For simplicity we extend from MetaLinkIconStyler"
"TextAction","A sepcific text attribute to run actions on a text"
"MethodBrowser","A MethodBrowser is a simple browser using Spec to display a list of methods and their source code	| si |	si := MethodBrowser new.	si openWithSpec.	si methods: Object methodDict values"
"SHTextStylerST80","I style Smalltalk methods and expressions.My 'styleTable' class instance var holds an array ofArrays which control how each token is styled/coloured. See my defaultStyleTable class method for its structure.My styleTable can be changed by either modifying the defaultStyleTable class method and then executing SHTextStylerST80 initialize ; or by giving me a new styleTable through my #styleTable: class method.My 'textAttributesByPixelSize' class instance var contains a dictionary of dictionaries.	The key is a pixelSize and the value a Dictionary from token type Symbol to TextAttribute array.	It is created/maintained automatically.I reimplement #unstyledTextFrom: so that TextActions are preserved in the unstyled text 					 	"
"FreeTypeFont","A FreeType font"
"GTSpotterDeploymentExceptionHandlerMock5",""
"ZnHttpUnsuccessful","ZnHttpUnsuccessful is signalled when an HTTP client receives a non success response.See ZnResponse>>#isSuccessI hold the response that was unsuccessful.Part of Zinc HTTP Components. "
"MetacelloConfigTemplate","Copy me to create a new configuration or edit and evaluate the following doits.        ""Create configuration class and initial baseline method""        MetacelloToolBox                 createBaseline: '1.0-baseline'                for: 'MyProject'                repository: 'http://www.example.com/MyProjectRepository'                requiredProjects: #('Gofer')                packages: #('MyProject-Core' 'MyProject-Tests')                dependencies:                        {('MyProject-Core' -> #('Gofer')).                         ('MyProject-Tests' -> #('MyProject-Core'))}                groups:                        {('default' -> #('Core')).                        ('Core' -> #('MyProject-Core')).                        ('Tests' -> #('MyProject-Tests'))}.	   ""create initial development method from the baseline""         MetacelloToolBox               createDevelopment: '1.0'               for: 'MyProject'                importFromBaseline: '1.0-baseline'                description: 'initial version'."
"MethodRecompileStrategy","I am simple update strategy that recompiles all methods."
"RPackageSet","I'm a set who can be instantiated by pattern matching RPackages (""name"" and ""name-*"").My purpose is to provide a bridge between monticello and system packages, to allow backward compatibility with old packaging. "
"GLMBrickLayoutChildrenState",""
"NECEmptyModel","I am an empty completion Model. I am used if no completion is expected.For example, typing a message send and using constants (Strings/Numbers) for the arguments,we don't want to complete the constant arguments with any exisiting symbol containing that constant:3 + 12 should not show completion menu with entries like CP1250TextConverter, ExampleForTest12, ..."
"X11Encoding","X11 encoding"
"ManifestOpalCompilerTests","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"EmbossedStringMorph","A label that underdraws to the top-left and/or bottom-right with a lighter and/or darker colour to the receiver."
"PackageTreeTagNodeModel","I'm a tag node model."
"EphemeronLayout","A layout for ephemeron objects"
"UnixStore","I'm a specific store for Unix file systems"
"MetacelloCommonVersionNumberTestCase",""
"GTSpotterDiveInCategory",""
"StartupPreferencesHandler","I manage the links of the chain of responsibilites to retrieve the good preference file."
"GTSnippets","GTSnippets instance"
"PharoEnvironmentHelp","This is introductory help for the Pharo environment and tools. ! Keyboard ShortcutsPharo has a variety of useful keyboard shortcuts that help you navigate its environment without always using a mouse.!! Browser ShortcutsThere are many keyboard shortcuts available in Pharo:- A full list is available in the System Browser by clicking the window menu button (the triangle) at the top right of the browser title, and selecting the 'Shortcuts Description' menu item.  Alternatively you can evaluate (cmd-d) the following code now:KMDescription new categories: #(NautilusGlobalShortcuts); openWithSpec.- Shortcuts are typically multi-key combinations, where you hold a modifier key and press the listed secondary key. For example if something is listed as CMD-F, CMD-C you would press and hold the CMD key while typing  F and then C- The modifier key varies between platforms: - Windows = ALT - Mac/OSX = CMD - Linux = CTRL!! Spotter/Global searchSimilar to the Spotlight search on OSX, or the Windows Search charm - Pharo has a global code search tool that is activated using:  Shift+EnterThis search tool shows a popup window on the center of the screen where you can incrementally search for classes, packages, symbols,  pragmas, files, folders and many other types of data.  As you type a search query  all available searches are performed at the same time and results are displayed as they are discovered and grouped based on the type of the search.You can cursor/keyboard navigate through the results, or press enter to spawn a new tool to examine the selected result.The following shortcuts are available:	Ctrl+Arrow_right dives in and restricts the available types of searches only to the selected element.	Ctrl+Shift+Arrow_right dives in and shows all the rearch results from a category.	Ctrl+Arrow_left dives out to the previous search	Ctrl+p toggles the preview pane	Enter  spawns a new tool to examine the selected result	Ctrl+Shift+Arrow_down/Ctrl+Shift+Arrow_down navigatew through different types of searches	Shift highlights all butons from the UI (only works with newer VMs)!! Visual ExplorationA useful way of discovering how things work in Pharo, is to point your mouse cursor at something on the screen (e.g. a browser button) and invoke a visual Halo selection by pressing:   Alt+Shift + left mouse clickIf you continue clicking the left mouse button (while holding Alt+Shift), the halo will expand it's selection to the current item's parent. This is useful for traversing the lineage of graphical Morph's to see what contains what.The halo has a series of icons, which if you hover over them will give you some balloon help about their operation. For exploring, the spanner icon is useful for letting you inspect or browse the current item to locate where the actual code is implemented.To remove the halo,  simply click anywhere outside of the current halo.It is possible to directly explore a visual object and bypass using the halo mechanism by pressing:  Ctrl+Shift + left mouse clickThis will give you a menu for the current item with options to inspect, debug etc.! Browsing and Navigating CodeFinding and navigating through code in Pharo is an important part of developing programs in Smalltalk.!! System Browser (Nautilus)The System Browser (available in the desktop World menu), is the primary way of viewing your source code. This browser framework has been rewritten in Pharo and is often referred to as Nautilus (see the other top level help item for more technical details)!!! Showing HierarchiesNautilus defaults to a simple 'Flat' display of the list of classes that are in the currently selected package (far left). If you want to see the hierarchy of a particular class, first select it and then press (toggle) the 'Flat' button, to show show its 'Hierarchy'. Pressing this button again will toggle back to the 'Flat' model.!!! Browser HistoryThe browser records the history of methods and classes you have visited similar to a Web Browser. The dropdown list in the middle right of the panes (above the lower text pane) shows this history, and clicking on one of its items will navigate to that item. This is convenient if you have clicked on a different package, or navigated to superclass and want to return back to where you were. !!! CustomisingThe system browser can also be configured with a different title as well as optional plugins. These are all available in the window dropdown menu in the top right of the title bar (normally a small triangle).!! SpotterUse the Shift+Enter global keystroke to activate a popup window that lets you incrementally search for methods, classes, packages, pragmas, files, folders and many other types of data.!! Finder The code Finder browswer is available from the World | Tools menu. The Finder lets you enter some general text in top edit field and then categorize it as either text, or language construct in the dropdown list to refine your search. There are more detailed instructions in the bottom pane of the browser detailing the different options.!! WorkspaceIn any workspace you can type or select any text and then perform an 'code search' (context menu item) that will look for matching senders, implementors, references or method source.! IconsThere are many icons that are visible in the envionment, each with different meanings.!! GeneralAn orange smudge in the top right of any editable text field indicatest that the field has been modified and should be saved with CMD+S.!! Class PaneIn the System Browser class pane, you will see the following icons appear next to specific types of class objects:- Red exclamation mark: a missing class comment. The pharo team reccommend that all classes should describe their intent with a comment. - Gray dot: a TestCase - Yellow Lightening bolt: an Exception - 3 Coloured Balls: a Collection - Blue Speech bubble: an Announcement - Blue Paragraph symbol: a String - Gray Epsilon symbol: a Magniture - Blue Matrix box: a graphcial Morph - Purple Ball with T: a Trait!! Protocol PaneIn the System Browser protocol pane, you will see the following icons appear next to specific types of protocol objects:- Yellow diamond: initialisation methods- Red Square: private methods!! Method PaneIn the System Browser methods pane, you will see the following icons appear next to specific types of method objects:- Green Up Arrow: indicates this method overrides a method in a super class- Green Down Arrow: indicates this method is overriden in a subclass!! Source PaneIn the System Browser lower code source pane, you will see the following icons appear which have the following meaning:- Orange Smudge top right: the source has changed and should be saved- Yellow Stripe right margin: a long or complicated method that needs refactoring- Yellow Padlock top right: when locked, indicates the current method source will be displayed stacked with other locked methods in the source pane! Getting More HelpIf you need more detailed help, here are some additional places to look.!! Pharo TutorialTry using the Pharo Smalltalk tutorial by evaluating (CMD+D) the code below: 	ProfStef go.!! Online ResourcesYou can find more information about Pharo by visiting: 	http://www.pharo.orgIn particular, you may also be interested in:- Joining discussions and getting help at: http://pharo.org/community - The Pharo By Example book (available as a free PDF): http://www.pharobyexample.org- Browsing the online documentation: http://www.pharo.org/documentation- Reporting problems: http://pharo.org/contribute"
"AbstractTextChangedPlugin","An AbstractTextChangedPlugin is a plugin which simply log each time the method displayer changed"
"WorkspaceVariable","I am a binding in a Workspace. Used for non-defined temps"
"AthensStrokePaint","I representing a stroke paint object used by Athens.My subclasses provide backend-specific implementation.I am more serving to define the common protocols andrequirements for all backends (such as defaults).IMPORTANT NOTE: a stroke paint object provides a protocol only for setting stroke properties, but not retrieving them back.This is intentionally, because the way how these properties ismanaged are highly backend-specific. The stroke paint has following properties: - fill paint. A paint to use for filling strokes.	Can be any athens basic paint, except from stroke one. - stroke width. Can be set using #width:	Default: if width is not set explicitly for stroke paint,		it is assumed to be equal to 1.0.		 - join style. 		Currently there are 3 kinds of joins supported:			bevel			miter			round		To set join style for paint, use 			#joinBevel, #joinMiter or #joinRound methods.	Default: if join style is not explicitly set for stroke paint,		it will use bevel join style. - cap style		supported: butt, round and square.		To set cap style, use			#capButt, #capRound or #capSquare methods.	Default: if cap style is not explicitly set for stroke paint,		it will use butt cap style. - miter limit, set with #miterLimit: accessor.	(default and meaning of limit is not yet determined)Dashes: 	stroke can use dashing. 	Dash is special kind of stroke which won't draw a continuous	stroke connecting path segments, but instead stroke with	alternating fill-gap style , defined by provided input.		Protocol:		paint 		dashes: dashPattern 		offset: anOffset.			The dash pattern is a simple 	collection of alternating lengths, like: 	#(""fill"" 50 ""gap"" 50) 		in this example , first 50 length units of path	will be filled with stroke, and next 50 will be skipped,	forming a gap, then again filled and again skipped,	and so on until path ends.	The dash pattern can contain as many length elements	as needed. Just remember that each odd element represents	length to fill with stroke, and each even element, length to skip,	while traversing along the path.		The offset controls the shift in length units, 	relative to path start.		Default: if dash is not explicitly set for stroke paint,		it will fill the path using continuous stroke (no gaps). "
"MorphicDiffAdapter","I am an adpater to bridge a DiffModel and a DiffMorph"
"VSLoadProjectCommand","Load a project configuration into the image. The project should have a configuration class. It will always load the latest version of the configuration package."
"ManifestSystemFinalization","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"TabModelTest",""
"CacheWeight","I  am CacheWeight.I keep track of the weight of a cache.The weight of a cache is the sum of the weight of all values currently present. The simplest and default weight calculation returns a constant 1 for each value, effectively counting the number of values.The default maximum is 16.Using compute, a selector or block, applied to a value, different calculation can be made. Consider for example #sizeInMemory."
"RBAbstractClass",""
"ClassReorganized","This announcement corresponds to the ReorganizedEvent, which seems to (by looking at the references of ReorganizedEvent) be raised when:- we rename a protocol (see 'renameCategory:toBe: '). if The category is not empty, SystemMethodRecategorizedAnnouncement will also be emitted- we sort (modify the order of) protocols (see 'sortCategories')- we add a protocol (see 'addCategory:before:')- we remove a protocol (see 'removeCategory:' 'removeEmptyCategories')"
"GLMAction","Actions are elements of behavior that are executed upon a keyboard shortcut or other event.Instances of Action are stored and maintained by Presentations. The exact representation is determined by the renderer, but actions can define a keyboard shortcut that should trigger the action or a title, category and position to be able to use the action as a context menu item."
"VSCommitUnit","I'm a commit unit for a configuration handled with Versionner. A commit unit englobates all actions needed to perform a successful commit from a new version. Essentially, it will collect all dirty packages and its corresponfing configurations and it will: 1) commit dirty packages2) generate new configuration versions3) commit new configurationsExample:========A commit unit can create versions  by working over configurations, so the best way to act is doing something like this: ""This will create a new major version""(VSCommitUnit major: ConfigurationOfVersionner) execute.""This will create a new minor version""(VSCommitUnit patch: ConfigurationOfVersionner) execute.""This will create a new patch version""(VSCommitUnit patch: ConfigurationOfVersionner) execute."
"Transcripter","Transcripter is a dog-simple scrolling stream with display.  It is intended to operate with no support from MVC or color in a minimal, or headless version of Pharo.  No attention has been paid to appearance or performance.type exit (without quote) to exit the evaluatortype revert (without quote) to revert the last changes.Transcripter askForEmergencyEvaluatorOrExitWithText: 'Emergency Evaluator'Transcripter emergencyEvaluator"
"MorphicModel","MorphicModels are used to represent structures with state and behavior as well as graphical structure.  A morphicModel is usually the root of a morphic tree depicting its appearance.  The tree is constructed concretely by adding its consituent morphs to a world.When a part is named in a world, it is given a new slot in the model.  When a part is sensitized, it is named, and a set of mouse-driven methods is also generated in the model.  These may be edited to induce particular behavior.  When a variable is added through the morphic world, it is given a slot in the model, along with a set of access methods.In addition for public variables (and this is the default for now), methods are generated and called in any outer model in which this model gets embedded, thus propagating variable changes outward."
"GLMHaloBrick",""
"NOCContext","I keep the context of the ocompletion. I do the same as my parent but for this specific algorithm"
"ZnMimeTypeTests",""
"RBSentNotImplementedRule","This smell arises when a message is sent by a method,  but no class in the system implements such a message. This method sent will certainly cause a doesNotUnderstand: message when they are executed."
"FTColumnResizerMorph","A resizer morph for a fast table.I can be added to any place but in current implementation I'm used in table headers (because would be expensive to add to each cell)."
"GLMMorphicFTRenderer","I am an abstract class that define the way to render a FastTable related presentation.Description--------------------I manage a FastTable dataSource and a FastTable morph. I define how to build and render them. I try to manage the maximum of the rendering and I let my subclasses define some specialities. My subclasses are use by a FastTable related presentation as GLMFastListPresentation or GLMFastTreePresentation. I use a FTTableMorph to manage the rendering and a subclass of FTDataSource to manage the data. Public API and Key Messages--------------------- #render: aPresentation 		This method is the main method of the class It allow to render myself on the presentation.		My subclasses should manage: - #createDataSourceFrom: aPresentation 		This method have to return  a new dataSource that match the presentation.		- #specificTableMorphInitializiation and #specificDataSourceInitializiation 		are two methods  my subclasses can override to add functionalites to the FastTable.Internal Representation and Key Implementation Points.--------------------    Instance Variables	tableModel:		Is a DataSource for Glamour that will hold the data of the presentation.	tableMorph:		Is a FastTableMorph use to display the presentation."
"AthensCubicSegment","i represent a cubic Bezier path segment"
"SugsUseAccessorsForClassVar","I know how to replace the call of a class variable for the use of an accessor and create accessors if it's necessary."
"GLMTransmissionStrategy","The classes from this hierarchy define strategies for what should happen after the value have been set to the destination port."
"NumberParser","NumberParser is an abstract class for parsing and building numbers from string/stream.It offers a framework with utility methods and exception handling.Number syntax is not defined and should be subclassResponsibility.Instance variables:sourceStream <Stream> the stream of characters from which the number is readbase <Integer> the radix in which to interpret digitsneg <Boolean> true in case of minus signintegerPart <Integer> the integer part of the numberfractionPart <Integer> the fraction part of the number if anyexponent <Integer> the exponent used in scientific notation if anyscale <Integer> the scale used in case of ScaledDecimal number if anynDigits <Integer> number of digits read to form an IntegerlasNonZero <Integer> position of last non zero digit, starting at 1 from left, 0 if all digits are zerorequestor <?> could eventually be used to insert an error message in a text editorfailBlock <BlockClosure> Block to execute whenever an error occurs"
"MethodDefaultAction","Action by default, empty icon"
"MalSccNodeDecomposition",""
"FLLightGeneralMapper","I know how to map an object to its default cluster. I can map every object."
"ImageCleanerCommandLineHandler","Usage: clean [ --release ]	--release        do #cleanUpForRelease	--production   do #cleanUpForProduction	Documentation:	This allows to run the ImageCleaner from the commandLine.	With no special option it runs Smalltalk cleanUp: true.Usage:	pharo Pharo.image clean	pharo Pharo.image clean --release"
"GTDebuggerVariablesBrowser","I am a special browser that is used in the first pane of the inspector that is embedded in the debugger. Its main intention is to provide a unified list of variables that come from:- the instance variables of the receiver- the local variables from the context"
"SVColorSelectorMorph","A colour selector that displays an area with saturation on the x axis and volume on the y axis. Provides interactive selection of colour by mouse. For the moment it is event rather than model based.Setting the color will specify the hue and setting the selectedColor will specify the saturation and volume (may have a different hue to that displayed if not in sync)."
"GTSpotterUIThreadStream",""
"RBAddClassVariableChange",""
"ZnImageExampleDelegateTests",""
"GTPlayPage","It holds one page of code. It is the model behind the Playground.It also knows how to store itself on disk, and every time its content changes, it updates the corresponding file."
"RBRenameMethodRefactoring",""
"RxParser","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--The regular expression parser. Translates a regular expression read from a stream into a parse tree. ('accessing' protocol). The tree can later be passed to a matcher initialization method.  All other classes in this category implement the tree. Refer to their comments for any details.Instance variables:	input		<Stream> A stream with the regular expression being parsed.	lookahead	<Character>"
"ShouldTransformedIntoAssert","should: will be deprecated sooner or leater. Use assert: instead"
"AthensBalloonSurfaceExamples","Athens example using Ballon as surface "
"GLMScrollPaneBandBrick","A GLMScrollPaneBandBrick is a band that is used with GLMScrollPaneBrick. It supports force updating of Morph bounds that is triggered after small delay to have no influence on performanceInstance Variables	asyncTask:		<GLMAsyncTask>	scrollpane:		<GLMScrollPaneBrick>	shouldLayoutMorphs:		<Boolean>asyncTask	- asynchronous task used to delay the update of morph boundsscrollpane	- reference to my scrollpane, so that I could update scrollbarshouldLayoutMorphs	- true if I need to update morphic bounds, false otherwise"
"GlobalIdentifierStonPersistence","I serialize or materialize objects using STON framework. Create instance of me calling GlobalIdentifierPersistence ston."
"MCVersionLoaderStarted","Announcement sent when a Version is starting to load"
"RBLiteralArrayNode","A RBLiteralArrayNode is an AST node that represents literal arrays and literal byte arrays.Instance Variables	contents: <Array of: RBLiteralNode> literal nodes of the array	isByteArray: <Boolean> if the receiver is a literal byte array"
"SerialPort","This class supports a simple interface to the serial ports of the underlying platform, if it supports serial ports. The mapping of port numbers to hardware ports is platform specific, but typically follows platform ordering conventions. For example, on the Macintosh, port 0 is the modem port and port 1 is the printer port, since in the programmers documentation these ports are referred to as ports A and B."
"TxSelection","I represent a selection interval of a text."
"SelectionMorph","A selectionMorph supports the selection of multiple objects in a morphic world or pasteUp. Using command+shift you get a squared lazzo and you can grab morphs. After you can grab the selection as a morph.Structure:	selectedItems	an OrderedCollection of Morphs					These are the morphs that have been selected	slippage		a Point					Keeps track of actual movement between the 					steps of gridded movement	dupLoc		a Point					Notes the position when first duplicate request occurs from halo	dupDelta	a Point					Holds the final delta of the first duplicate plus subsequent moves."
"ModelDependentDialogWindow","DialogWindow that updates content based upon its model."
"RPackageExtensionMethodsSynchronisationTest","SUnit tests for RPackage extension methods"
"OrderedIdentityDictionaryTest",""
"PackageTreeMethodGroupNodeModel","I'm a group node model for the last modified methods group."
"ShortRunArray","I'm a class needed to load FFI and nothing else. FFI declares ExternalObject to be in the startup list after myself. That's why in my initialize class side method I declare myself to be in the startup list."
"DropEvent","I model the event produced when a hand drops a (grabbed) morph into another morph.I know the position of the drop, the dropped morph and the hand that produced me.To handle this event a morph should override one of these methods:#acceptDroppingMorph:event:#justDroppedInto:event:Additionaly, a morph can specify if it wants to accept a dropped morph by overriding #wantsDroppedMorph:event:. Symmetrically, the morph being dropped can specify if it wants to be dropped in another morph by overriding #wantsToBeDroppedInto:. Note that for a successful drop operation both parties need to agree.See HandMorph>>dropMorph:event: for an example of usage."
"GLMFoundationBrick","A GLMFoundationBrick is connection layer between brick widgets and morphic.See GLMBrick class comment for more info.Instance Variables	brickRoot:		<Object>brickRoot	- xxxxx"
"PackageAndClassChooser","I am a widget to select classes and packages from a tree."
"MultiByteFileStream","The central class to access the external file.  The interface of this object is similar to good old StandardFileStream, but internally it asks the converter, which is a sub-instance of TextConverter, and do the text conversion.  It also combined the good old CrLfFileStream.  CrLfFileStream class>>new now returns an instance of MultiByteFileStream.  There are several pitfalls:  * You always have to be careful about the binary/text distinction.  In #text mode, it usually interpret the bytes.  * A few file pointer operations treat the file as uninterpreted byte no matter what.  This means that if you use 'fileStream skip: -1', 'fileStream position: x', etc. in #text mode, the file position can be in the middle of multi byte character.  If you want to implement some function similar to #peek for example, call the saveStateOf: and restoreStateOf: methods to be able to get back to the original state.  * #lineEndConvention: and #wantsLineEndConversion: (and #binary) can cause some puzzling situation because the inst var lineEndConvention and wantsLineEndConversion are mutated.  If you have any suggestions to clean up the protocol, please let me know."
"ZnUrlOperation","I am ZnUrlOperation.I am an abtract superclass of operations that can be performed on ZnUrl objects.Some operations, like retrieving the contents of a resource described by a URL, depend on elements, most likely the scheme, of the URL. By creating the appropriate subclasses, this behavior can be added.I implement searching/matching logic on my class side.  #performOperation:with:on:which defaults to matching the #operation and #schemes.I am instanciated to be executed.   #performOperationA concrete example is ZnUrl>>#retrieveContents with subclasses ZnHttpRetrieveContents and ZnFileRetrieveContents.Part of Zinc HTTP Components."
"RBTempsReadBeforeWrittenRule","Checks that all temporaries are assigned before they are used. This can help find possible paths through the code where a variable might be unassigned when it is used."
"SugsExtractToLocalVariable","The classic option to extract a line of code in a local variable"
"StackFilter","A filter on the current stack for debugging"
"PSMCOrganizationChangeWrapper",""
"TxCaretCursor","In most command-line interfaces or text editors, the text cursor or caret navigation, is an underscore, a solid rectangle, or a vertical line, which may be flashing or steady, indicating where text will be placed when entered (the insertion point)."
"AthensBalloonGradientPaint","my subclasses used internally in balloon backend for Athens to represenet gradient paints."
"FillStyle","FillStyle is an abstract base class for fills in the BalloonEngine."
"CairoUTF8ConverterTest","A CairoUTF8ConverterTest is a test class for testing the behavior of CairoUTF8Converter"
"JPEGReadStream","Encapsulates huffman encoded access to JPEG data.The following layout is fixed for the JPEG primitives to work:	collection	<ByteArray | String>	position		<SmallInteger>	readLimit	<SmallInteger>	bitBuffer	<SmallInteger>	bitsInBuffer	<SmallInteger>"
"ManifestSystemBasicCommandLineHandler","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"ZnTestRunnerDelegate","I am ZnTestRunnerDelegate, a web service interface to run unit tests.	ZnTestRunnerDelegate startInServerOn: 1701.		ZnEasy get: 'http://localhost:1701/sunit/ZnUtilsTests'.	ZnEasy get: 'http://localhost:1701/sunit/ZnUtilsTests/testBase64'.Web Service API:	GET /sunit/MyTestCase	GET /sunit/MyTestCase/testOnePart of Zinc HTTP Components"
"SpecTableLayoutAdd","A SpecTableLayoutAdd represents the action to add a subwidget into a spec table layout"
"GTUrlProvider","This class was inspired from the Zinc SharedWorkspace project.Its job is to work with a UrlProvider that can provide (via get) and store (via post) strings."
"ByteTextConverter","A ByteTextConverter is the abstract class for text converters on single byte encodings."
"SupplyAnswerTests","A test for supplying answer "
"SystemSystemSettings","Settings for the system itself"
"AthensCairoPatternPaint","i am abstract class for different kinds of paints in cairo backend."
"IdentitySetTest","SUnit tests for identity sets"
"NameLookupFailure","Signals that a name lookup operation failed.	hostName	hostName for which the name loopup failed"
"AthensMorphicGradientPaint","i am used to convert gradient fill style(s) used in Morphic to appropriate paint(s) in Athens."
"WeakFinalizationList","IMPORTANT!!!This class is a special object, recognized by VM.Its only purpose is to a) identify a special kind of objects who usually having a weak references but  also having an instance of me held by first non-weak fixed slot (instance variable).b) a 'first' instance variable points to the head of a list of items, reported by VM which has weak references which became garbage during last garbage collectionAt my class side, there are some public behavior, which is used by finalization process to detect if VM supports new finalization scheme or should use the old one.Weak registry using #hasNewFinalization for switching to correct finalization logic,depending on VM it currently runs on."
"RGClassVariableDefinition","A class variable definition"
"RBRenameClassVariableChange",""
"GLMRubTextFieldBrick","A GLMRubTextFieldBrick is basic text editor brick used for single line input fields. Supports variety of layout properties: vShrinkWrap - height fits text size + vertical paddingshShrinkWrap - width fits text size + horizontal paddingsvSpaceFill - fills parent vertically. Actual text editor height = parent height - vertical paddingshSpaceFill - fills parent hprozontally. Actual text editor width = parent width - horizontal paddingsbeCentered - actuall text editor field will be centered verticallyInstance Variables	isCentered:		<Boolean>isCentered	- true if actual text editor field should be centered vertically,	   false otherwise"
"WindowClosed","I am emitted when a window is closed."
"GTSpotterItemActionbarBrick",""
"RBAbstractInstanceVariableRefactoring",""
"Exit","An Exit is an exception that quit the image without saving with a given success status.Exit signalFaillure: 'something went wrong'"
"RBMinMaxRule","The use of the messages #min: and #max: improves code readability and avoids heavily nested conditionals.For example [[[ 	a < b ifTrue: [a] ifFalse: [b]]]]			is transformed into [[[  a min: b]]]					"
"GLMMorphBrick","A GLMMorphBrick is used as container for morphs to embed them inside bricksInstance Variables	morph:		<Morph>morph	- xxxxx"
"SimpleBalloonMorph",""
"GTPlaygroundHelp","A utility class containing the help for the GT Playground."
"MCTool","Common superclass for Monticello toolsPlaceholder for a MCVersionCache for MCLazyVersionInfo"
"MetacelloValidationError","MetacelloValidationError indicates that errors are to be expected if an attempt to use the configuration/version is made"
"SlotBasicTest",""
"SpecTreeColumn","I am a Tree column made especially to be used by the Spec framework"
"ManifestMultilingualTextConversion","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"TestSessionHandler","I'm a session handler used for tests purposes.You can provide me blocks to be executed at startup or shutdown."
"SettingNodeBuilder","Used to build nodes from the settings framework"
"GLMPaginatedMorphTreeMorph",""
"ClassHierarchyTest","SUnit tests for the class hierarchy"
"ScheduleTest","SUnit tests for recurring schedules (class Schedule)."
"KomitDefinition","I'am a komit object representing a change in a class definition. I wrap MCModification instances.Notes from a maintainer: It may be interesting to see if my behavior cannot be simply merged into the MC hierarchy instead of somehow duplicating. "
"MetacelloTestsPackageSet","This class is used to speed up Metacello tests."
"MethodMapTests",""
"MorphTest","This is the unit test for the class Morph. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- http://minnow.cc.gatech.edu/squeak/1547	- the sunit class category"
"SpecLayoutAdd","A SpecLayoutAdd represents the action to add a subwidget into a spec layout"
"RBRefactoryVariableChange",""
"NautilusMethodSelected","I announce when a method is selected, and also contain an information about selected package, class and protocol"
"DictionaryValueHolder","I am designed specifically for dictionaries."
"GLMPagerModelTest",""
"MBLoadPackageCommand","Command to load a package in versionner"
"MethodWithCorrespondingTestAction","Action when the method has a corresponding test method"
"GLMMorphicFastListRenderer","I am a Morphic renderer for a GLMFastListPresentation.Description--------------------I use a GLMFastListDataSource to manage the data of the table."
"CalendarDayMorph","A CalendarDyaMorph represents a specific day on a monthly calendar.Instance Variables	bounds:		<Rectangle>	date:		<Date>	highlighted:	<Boolean>	owner:		<CalendarChooserMorph>bounds	- owner-relative bounding boxdate	- the specific date (year/month/day) the CalendarMorph representshighlighted	- flag to keep track of when a CalendarMorph has the mouse dragging over it, and is thus highlightedowner	- the morph that contains the CalendarMorph, and all its siblings"
"DeepCopier","DeepCopier does a veryDeepCopy.  It is a complete tree copy using a dictionary.  Any object that is in the tree twice is only copied once.  All references to the object in the copy of the tree will point to the new copy.  See Object|veryDeepCopy which calls (self veryDeepCopyWith: aDeepCopier).When a tree of morphs points at a morph outside of itself, that morph should not be copied.  Use our own kind of weak pointers for the 'potentially outside' morphs.   Default is that any new class will have all of its fields deeply copied.  If a field needs to be weakly copied, define veryDeepInner: and veryDeepFixupWith:.     veryDeepInner: has the loop that actually copies the fields.  If a class defines its own copy of veryDeepInner: (to leave some fields out), then veryDeepFixupWith: will be called on that object at the end.  veryDeepInner: can compute an alternate object to put in a field.  (Object veryDeepCopyWith: discovers which superclasses did not define veryDeepInner:, and very deeply copies the variables defined in those classes).	To decide if a class needs veryDeepInner: and veryDeepFixupWith:, ask this about an instance:  If I duplicate this object, does that mean that I also want to make duplicates of the things it holds onto?  If yes, (i.e. a Paragraph does want a new copy of its Text) then do nothing.  If no, (i.e. an undo command does not want to copy the objects it acts upon), then define veryDeepInner: and veryDeepFixupWith:.	Here is an analysis for the specific case of a morph being held by another morph.  Does field X contain a morph (or a Player whose costume is a morph)?  If not, no action needed.Is the morph in field X already a submorph of the object?  Is it down lower in the submorph tree?	If so, no action needed.Could the morph in field X every appear on the screen (be a submorph of some other morph)?	If not, no action needed.	If it could, you must write the methods veryDeepFixupWith:   and   veryDeepInner:, and in them, refrain from sending veryDeepCopyWith: to the contents of field X.----- Things Ted is still considering -----Rule:  If a morph stores a uniClass class (Player 57) as an object in a field, the new uniClass will not be stored there.   Each uniClass instance does have a new class created for it.  (fix this by putting the old class in references and allow lookup?  Wrong if encounter it before seeing an instance?)Rule: If object A has object C in a field, and A says (^ C) for the copy, but object B has A in a normal field and it gets deepCopied, and A in encountered first, then there will be two copies of C.  (just be aware of it)Dependents are now fixed up.  Suppose a model has a dependent view.  In the DependentFields dictionary, model -> (view ...).  	If only the model is copied, no dependents are created (no one knows about the new model).  	If only the view is copied, it is inserted into DependentFields on the right side.  model -> (view  copiedView ...).  	If both are copied, the new model has the new view as its dependent.	If additional things depend on a model that is copied, the caller must add them to its dependents."
"OptimizedBlockLocalTempReadBeforeWrittenVisitor","Answer the set of temporary variables that are read before they are written in the visited parse tree.  Used by the compiler to detect those block-local temporaries of blocks in optimized loops that require nilling to prevent a value from a previous iteration persisting into a subsequent one."
"SystemSettingsPersistence","I am a singleton responsible for storing and loading settings on a disk. I can handle a collection of settings or one setting in particular. I know where settings are stored.External Collaborators (those that use me): SettingNode, SettingBrowser.Internal Collaborators (those I use): SettingsStonReader, SettingsStonWriter, StoredSettingsFactory, StoredSettingsMergerPublic API and Key Messages- updateSettingNodes:- storeSettingNodes:- storedValueForSettingNode:- accessing instance: SystemSettingsPersistence defaultInternal Representation and Key Implementation Points.    Instance Variables	fileReference:		<FileReference>	settingTree:		<SettingTree>"
"OSWindowEvent","i am the root of various window events hierarchy"
"GLMPopupAction",""
"Archive","This is the abstract superclass for file archives. Archives can be read from or written to files, and contain members that represent files and directories."
"RubTextSegmentIconBox",""
"RPackageTag","I'm a class tag for an RPackage. Class tags can be any kind of metadata the user needs, but they are for now equivalent to class categories. "
"MD5NonPrimitive","This class implements the MD5 128-bit one-way hash function.  It relies onthe ThirtyTwoBitRegister class supplied as part of the ""Digital Signatures""functionality included in Squeak 2.7.  As of this date (1/20/2000), theU.S. Government has lifted many of the previous restrictions on the exportof encryption software, but you should check before exporting anythingincluding this code.  MD5 is commonly used for some secure Internetprotocols, including authentication in HTTP, which is why I wrote it.Submitted by Duane Maxwell"
"NECSelectorEntry","I represent a selector"
"TxCairoCharacterSpanDisplayCommand",""
"SpecTestCase",""
"MorphicShortcutHandler","I am a null shortcut handler for morphic. I register myself as a tool to be replaced by somebody else who really wants to handle shortcuts."
"RBUnpackagedCodeRule","Code that is not contained in a Monticello package is not versioned and cannot be brought into a different image."
"OSTouchOneFingerHoldDetector","I am the detector of the hold with one finger.I send these event back to my handler: 	- OSTouchOneFingerHoldEvent"
"FileReferenceTest","SUnit tests for file reference"
"FLPair","A test mock for pairs"
"MemoryHandleTest","SUnit tests for memory handles, the tests may be found in superclass"
"LimitingLineStreamWrapper","I'm a wrapper for a stream optimized for line-by-line access using #nextLine. My instances can be nested.I read one line ahead. Reading terminates when the stream ends, or if the limitingBlock evaluated with the line answers true. To skip the delimiting line for further reading use #skipThisLine.Character-based reading (#next) is permitted, too. Send #updatePosition when switching from line-based reading.See examples at the class side.--bf 2/19/1999 12:52"
"AbstractFont","AbstractFont defines the generic interface that all fonts need to implement."
"TxAttribute","I am separate property which can be applied to single text span.The concerete meaning or purpose of property defined by my subclasses."
"RBPullUpClassVariableTest",""
"GLMButtonModel",""
"GLMPagerPreviewUpdate",""
"GTGlamourWrapperDebuggingAction","I simply wrap an existing glamour action. Currently I just return the action when one send #asGlamourAction."
"MetacelloMergeMemberSpec",""
"TextInputFieldModel","I handle one line of text.I handle non source code text, that's why editing shortcuts are not supported (cmd+p just print a p by example)"
"DelayExperimentalSemaphoreScheduler","DelayExperimentalSemaphoreScheduler addresses a ""Delay scheduling deadlock"" problem of Case 14344 [1] seemingly due to multi-thread suspend/resume operations interacting badly with background morphs, causing the Image to lock up.  See the class comment of DelaySchedulerBackgroundWorkerMorph.My #schedule: and #unschedule: methods pass Delays from the user priority threads to the high priority #handleTimerEvent thread via  instance variables /scheduledDelay/ and /finishedDelay/.   The original implementation used mutexes to protect these in a shared-memory paradigm.   However it can also be considered a producer-consumer paradigm, so I throw away the mutexes and use semaphores. I have been demostrated to work without error,  however but am ""experimental"" due to limited time to test prior to Pharo 4 Release, and also no tests are included.I can be selected via ""World > System > Settings > Setting > Delay scheduler"".To compare the different delay schedulers...   1.   ""World > Tools > Process Browser"", and set to auto-update.   2.   Transcript open.   3.   DelayBenchmark runAll."
"MCClassInstanceVariableDefinition","A MCClassInstanceVariableDefinition represents a class instance variable."
"GLMPresentationTest",""
"KMShiftModifier","I represent the Shift key modifier. Look at my superclass for a more detailed explanaition."
"GoferTest","SUnit tests for Gofer"
"NaturalLanguageTranslator","A NaturalLanguageTranslator is a dummy translator.The localization framework is found in the gettext package usually overriding this class completely. As an alternative you can register a translator using     NaturalLanguageTranslator current: myTranslatorIf this is done the messages will be dispatched to it"
"FTExampleDropDataSource","I'm a simple example of fast table who will accept drops of classes.FTExamples exampleDragAndDrop1."
"FTBasicTreeListItem","FTBasicTreeListItem holds the state of a element in FTBasicTreeListDataSource.Instance variables: |< expanded >|< Private  >|< aBoolean >[ 	remembers if this it is currently expanded or not.}.|< depth >|< Private  >|< aNumber >[	The depth of this item from the root. ].< item > [  anyObject. 	The raw item which is wrapped by this class.	].< children > [ aCollection.	cache for holding currently expaned children ].< dataSource > [ aFBasicTreeListDataSource	reference to the datasource ]."
"EyeByteArrayInspector","Specialized version of inspector showing the hex and string representation of the byte array in some variations."
"GTSpotterContentsBrick",""
"GTSpotterStreamMock",""
"LazyListMorph","The morph that displays the list in a PluggableListMorph.  It is ""lazy"" because it will only request the list items that it actually needs to display.I will cache the maximum width of my items in maxWidth to avoid this potentially expensive and frequent computation."
"RBAssignmentToken","RBAssignmentToken is the first-class representation of the assignment token ':='"
"TxWorkspace","A workspace using TxTextStyler"
"ZnBufferedWriteStream","I am ZnBufferedWriteStream.I wrap a write stream and add buffering.Make sure to always send me #flush or #close when you're done,otherwise the last buffer might not yet have been written.My class side's #on:do: helps to ensure this.I can wrap both binary or character streams and act accordingly.Part of Zinc HTTP Components."
"HistoryLeaf","This class represents the abstract leaf structure of items stored in History tree. Composite nodes of such trees are made of HistoryNode instances. For a particular use, this class need to be subclassed. See for example UndoRedoRecord"
"GLMFlexiblePresentation","A presentation that flexibly changes it behavior depending on the current entity.If the entity is a collection, this class renders as a ListPresentation, otherwise as a TextPresentation."
"GTSpotterHidePreview",""
"RBRemoveMethodRefactoring",""
"ClassRenameFixTest",""
"TxTextStylesTest","A TxTextStylesTest is a test class for testing the behavior of TxTextStyles"
"DAMessageSendDependencyNode","I'm a tree node representing a specific message send in the package under analysis."
"MCModel2MTModelVisitorTest",""
"GlobalIdentifierFuelPersistenceTest","A GlobalIdentifierFuelPersistenceTest is a test class for testing the behavior of GlobalIdentifierFuelPersistence"
"GLMPagerBrick",""
"ProtocolClientError","Abstract super class for protocol clients	protocolInstance		reference to the protocol client throughing the exception. Exception handlers can access the client in order close, respond or whatever may be appropriate"
"GLMFastListDataSource","I'm a model datasource to handle glamour fast list presentations.Description --------------------My basics functionnalities works as in my superclass but I do not get my data at my creation. Instead I ask to my Glamour presentation to get them.I work with a GLMFastListPresentation and a GLMMorphicFastListRenderer. Internal Representation and Key Implementation Points.--------------------    Instance Variables	announcer:		This is an announcer use to work with Glamour workflow. 	glamourPresentation:		This is a glamour presentation use to get some informations as the data manage by myself.	tagsToFilterBy:		This is a list of filtering tags for the dasaSource."
"GLMAnnouncingCollection",""
"OrderedCollectionTest","These test cases demonstrate addition of items into an OrderedCollection as well as item removal.Some of the assertions are quite complicated and use a lot of collection protocol. Such methods do not test one single method, but protocol in general."
"GoferResolvedReference","A GoferVersionReference refers to a specific version of a Monticello package in a particular repository. This class is the only one that can actually load the version, because it is the only one knowing where to find it."
"MorphicEventHandlerTest",""
"MorphTreeChunkPager","A chunk pager"
"MCModification","A MCModification represents the operation to modify an entity to a snapshot. "
"GTSpotterDiveOut",""
"MethodContainsHaltAction","Action when the method contains a halt"
"FLSqueak45Platform",""
"GLMBrickGeneralWrapper",""
"Gofer",": Gofer, a person who runs errands. Origin 1960s: from go for, i.e. go and fetch.: ''The New Oxford American Dictionary''! SynopsisGofer is a small tool on top of Monticello that loads, updates, merges, diffs, reverts, commits, recompiles and unloads groups of Monticello packages. Contrary to existing tools Gofer makes sure that these operations are performed as clean as possible:- Gofer treats packages from one or more repository in one operation.- Gofer works with fixed versions or tries to find the ""latest"" version using a given package name.- Gofer automatically assigns repositories to all packages, so that the other tools are ready to be used on individual packages.- Gofer makes sure that there is only one repository instance registered for a single physical location.- Gofer works with Monticello dependencies and uniformly treats them like the primary package.- Gofer prefers to work with faster repositories if there is a choice.- Gofer cleans up after Monticello, no empty class categories and no empty method protocols are to be expected.- Gofer supports operations to sync remote and local repositories with each other.! InstallationGofer is included with the latest Pharo and GemStone distributions. To update to the latest version you can use Gofer itself:== Gofer upgradeIn case you are missing Gofer in your image, grab it from *http://source.lukas-renggli.ch/gofer.html*.! DescriptionGofer is very simple by design, the basic useage scenario is always the same and consists of three steps:# You specify one or more Monticello repository URLs. You can do this using the methods ==url:==, ==url:username:password:== (HTTP, FTP), ==directory:==, or ==repository:== if you need full control. You might also use the convenience methods like ==squeaksource:==, ==wiresong:==, or ==gemsource:== for well known repositories. Additionally the following settings are available:#- Gofer implicitly declares the local package cache as a repository. To disable the local package cache use the method ==disablePackageCache==, to re-enable use ==enablePackageCache==.#- Gofer throws an error if a repository is not reachable. To silently ignore repository erros use the message ==disableRepositoryErrors==, to re-enable use ==enableRepositoryErrors==.# You specify one or more Monticello packages you want to work with, by adding them to the Gofer instance. Use ==version:== to add a specific version, or use ==package:== to add the ""latest"" version in the given repository. Furthermore there is ==package:constraint:== that allows you to further constraint the version to be loaded in a block passed in as the second argument.# You specify one or more actions to be performed on the specified packages:| ==load==	| Load the specified packages.| ==update==	| Update the specified packages.| ==merge==	| Merge the specified packages into their working copies.| ==localChanges==	| Answer the changes between the base version and the working copy.| ==browseLocalChanges==	| Browse the changes between the base version and the working copy.| ==remoteChanges==	| Answer the changes between the working copy and the remote changes.| ==browseRemoteChanges==	| Browse the changes between the working copy and the remote changes.| ==cleanup==	| Cleans the specified packages.| ==commit==	| Commit the modified specified packages.| ==commit:==	| Commit the modified specified packages with the given commit message.| ==revert==	| Revert the specified packages to the currently loaded version.| ==recompile==	| Recompile the specified packages.| ==reinitialize==	| Call the class side initializers on the specified packages.| ==unload==	| Unload the specified packages.| ==fetch==     | Download versions from remote repositories into the local cache.| ==push==      | Upload local versions from local cache into remote repositories.! ExampleTo use Gofer to update to exact versions of the Kom Server, the 'latest' code of Seaside 2.8 and the 'latest' code of the Scriptaculous package that is committed by the author with the initials 'lr' one could evaluate:== Gofer new==     squeaksource: 'KomHttpServer';==     version: 'DynamicBindings-gc.7';==     version: 'KomServices-gc.19';==     version: 'KomHttpServer-gc.32';==     update.== Gofer new==     squeaksource: 'Seaside';==     package: 'Seaside2.8a';==     package: 'Scriptaculous' constraint: [ :version | version author = 'lr' ];==     load"
"ProtoObject","ProtoObject establishes minimal behavior required of any object in Pharo, even objects that should balk at normal object behavior. Generally these are proxy objects designed to read themselves in from the disk, or to perform some wrapper behavior, before responding to a message. ProtoObject has no instance variables, nor should any be added."
"RubPrimarySelectionMorph","I represent the morph which shows the current selection "
"ManifestReflectivity","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"AtomicCollection","I am just a base abstract class,containing common behavior for various queue types"
"RubPlainTextMode","I represent the mode to use to edit plain text (in menus, help browser etc)"
"ShadowDrawingCanvas","see ColorMappingCanvas comment."
"AbstractLayout","I'm a container for slots.There are special cases of layouts without slots, like NilLayout or BitsLayout."
"TabContainerMorph","A TabContainerMorph is a morph (which should be pluggable soon) which handle a first bar for tabs button and a container which is used to display the morph corresponding to the selected tab"
"PeelToFirstDebugAction","A PeelToFirstDebugAction peels the stack back to the second occurance of the currently selected message."
"ConfigurationOfSessionManager",""
"TextMorphForFieldView","Single-line text field editor with DialogWindow key integration (return for default, escape for cancel) and keyboard focus navigation (tab/shift-tab)."
"IRStoreTemp","store temp"
"FreeTypeCacheTest","SUnit tests for FreeType cache"
"WeightedAverageCost","Part of an test resource to verify that super is well bound.See CompilerEvaluationTest"
"AnnotationRequest","I am a private class used by AnnotationPanePlugin"
"RBExcessiveArgumentsRule","This smell arises when a method contains a long number of argument (five or more), which can indicate that a new object should be created to wrap the numerous parameters. The defined number of arguments can be edited in RBExcessiveArgumentsRule>>argumentsCount.If the arguments are used in multiple methods this is a clear indication for the creation of an object representing the context in which the computation should occur. 	The defined number of arguments can be edited in #argumentsCount."
"ZdcPluginSSLSession","I am ZdcPluginSSLSession, an object managing the secure communication between two parties.I am a ZdcAbstractSSLSession.I am a wrapper for the SqueakSSL plugin.I am probably too primitive to be used directly, see ZnSecureSocketStream for a higher level client.Ackowledgement: based on the original SqueakSSL code."
"RangeSettingDeclaration","A RangeSettingValue is a setting for which the value domain is an interval.  See SettingManager comment for more explanations.Instance Variables	range:		<Interval>range	- The interval which define the value domain"
"FilterTest","SUnit test for debugger filters"
"RBRemoveInstanceVariableTest",""
"NECVarTypeGuesser","I'm an InstructionClient that tries to guess the type of a given instance variable name of a class. "
"MethodFinderTest","To do:	- radix should be returned "
"RBKeywordToken","RBKeywordToken is the first-class representation of a keyword token (e.g. add:)"
"CompoundTextConverterState","This represents the state of CompoundTextConverter."
"OSWindowNullGenericRenderer","I am an implementation of the generic API for native window rendering that does nothing."
"TimeProfilerNode","A TimeProfilerNode represents a node in the tally tree"
"GLMFormattedPresentationTest",""
"SugsNullContext","I define a default null suggestion context that provides no suggestions"
"RBSmalllintTestObject",""
"MCDirectoryRepository","A metacello repository in a directory "
"ChangesLog","I represent the changes file and give access to him.  If you want to log a change, look at my #logChange: method.I have a default instance that is hearing SystemAnnouncements and logging the change logs in there.But you can have your own instance and log whatever you want."
"PluggableMorphListMorph","A type of PluggableListMorph that supports morphs for items. Useful for lists with icons etc."
"KMDispatcherTestCase",""
"STONTestMap","STONTestMap is used to support unit tests.I am a Dictionary but I don't print my elements during #printOn: to allow safe inspection of structures containing cycles that would otherwise lead to infinite loops."
"BooleanSlot","**Unfinished, see #todo**I am a Slot that does not allocate one field for each slot. Instead, all Booleanlots of the whole hierarchy are allocated in an integrer that is stored in an invisible slot ."
"AdvancedHelpBrowserDummy","This is a dummy for a custom Help browser that can be registered as a replacement for the HelpBrowser class.Instance Variables	rootTopic:		<HelpTopic>rootTopic	- The root help topic"
"RenrakuBaseTestCase","I check bindings i.e. how renraku model reacts to changes in mirrored entity"
"RBReplaceRule","RBReplaceRule is the abstract superclass of all of the transforming rules. The rules change the source code by replacing the node that matches the rule. Subclasses implement different strategies for this replacement.Subclasses must implement the following messages:	matching		foundMatchFor:Instance Variables:	verificationBlock	<BlockClosure>	Is evaluated with the matching node. This allows for further verification of a match beyond simple tree matching."
"FFITypeArray",""
"ClassFactoryWithOrganization","I'm a class to create classes with a category. I'm only used by Tests.I am similar to ClassFactoryForTestCase (i.e., I can be used in place of a ClassFactoryForTestCase), expect that classes may be created on a specific class category."
"EyeCollectionInspector","Specialized version of inspector showing the size of the inspected collection in title."
"VSMakeStableCommand","I'm a command to declare versions as stable."
"AthensStrikeFontRenderer","I am used to render font with cairo ""toy"" text api if no freetypefont is used.AthensCairoSurfaceExamples exampleDrawText"
"RBVariableEnvironment","I am a RBBrowserEnvironment for items referring class or instvars.Constructed by quering extisting environments with refering, reading or writing to the variables of a class.Example:(RBBrowserEnvironment new) instVarWritersTo:#color in: Morph.-> a RBVariableEnvironment"
"TickDialogWindow","A TickDialogWindow is a modal dialog window which contains a TickList where user can pick a list of items.See self example"
"RBFFICallPragma","additionnal smalltalk semantic for FFI calls"
"GeneralScrollBar","Support for GeneralScrollPane."
"TickingWindowModel","In addition to my superclass, I provide an API to execute the #step method every #stepTime."
"CollectionsAssembly","I contain all basic collections."
"UndeclaredVariableWarning","A warning for an undeclared variable in a method of a class"
"RBAbstractCondition",""
"RxmLink","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A matcher is built of a number of links interconnected into some intricate structure. Regardless of fancy stuff, any link (except for the terminator) has the next one. Any link can match against a stream of characters, recursively propagating the match to the next link. Any link supports a number of matcher-building messages. This superclass does all of the above. The class is not necessarily abstract. It may double as an empty string matcher: it recursively propagates the match to the next link, thus always matching nothing successfully.Principal method:	matchAgainst: aMatcher		Any subclass will reimplement this to test the state of the matcher, most		probably reading one or more characters from the matcher's stream, and		either decide it has matched and answer true, leaving matcher stream		positioned at the end of match, or answer false and restore the matcher		stream position to whatever it was before the matching attempt.Instance variables:	next		<RxmLink | RxmTerminator> The next link in the structure."
"FFIDereferencedOpaqueObjectError","I indicate that user tried to access an opaque type in a derreferenced way.Opaque types can just be accessed by reference (as a pointer to them). Example:self ffiCall: #( void function(FFIOpaqueObject  *var)  ""Correct""self ffiCall: #( void function(FFIOpaqueObject  var)  ""WRONG"""
"MIMEDocument","a MIME object, along with its type and the URL it was found at (if any)"
"EncoderForV3","I add behaviour to Encoder to size and emit bytecodes for the Squeak V3.x VM bytecode set.  The intention is for another subclass to restrict the range of bytecodes used to long forms only, allowing the bytecode set to be redefined by avoiding using the many short forms.  The short forms may then be reassigned."
"SDL_TouchFingerMotionEvent","SDL2 library structure"
"RBCreateCascadeRefactoring","A RBCreateCascadeRefactoring is a refactoring used to generate cascades in source code.Copied from OB-Refactory-Tools and should be moved into RB instead"
"GTBytecodeDebuggerVariablesBrowser","I provide a different view of all variables from  a Context suitable for a bytecode debugger:- I show the complete stack of variables stored by the context (both named and unnamed variables)- I show the slots of the receiver object using the notation rcv0, rcv1, etc., as this is how slots are accessed in bytecode instructions"
"RPackageTraitTest","SUnit tests for RPackage"
"OSWindowMoveEvent","I am delivered when window moved by user or OS/window manager."
"KomitSliceUI","I am a UI used to retrieve a Slice title using its issue number"
"GLMVariableBindingsChanged","I am event indicating to the renderer to update its variable bindings."
"RBCompositeLintRuleTest",""
"NautilusProtocolSelected","I announce when a protocol is selected, and also contain an information about selected package and class"
"OSTouchActionEvent","Super class of all action"
"TestFailure","The test framework distinguishes between failures and errors.  A failure is an event whose possibiity is explicitly anticipated and checked for in an assertion, whereas an error is an unanticipated problem like a division by 0 or an index out of bounds.  TestFailure is raised when the boolean parameter of an assert: ... or deny: ... call is the opposite of what the assertion claims."
"ExpanderMorphContracted","I am an Announcement that occurs when an ExpanderMorph is contracted (rolled-up). Example where visibility of another UI component depends on the expanded/contracted state of Expander 2 |builder expanders ex1 ex2 text list row|builder := UITheme builder.expanders := builder newColumn: { ex1 := builder newExpander: 'Expander 1'. ex2 := builder newExpander: 'Expander 2'}.expanders width: 100; hResizing: #rigid.text := builder newTextEditorFor: (ValueHolder new contents: 'Some text') getText: #contents setText: #contents:.list := (builder newListFor: (ListModel new list: #('One' 'Two' 'Three' 'Four'); selectionIndex: 3) list: #list selected: #selectionIndex changeSelected: #selectionIndex: help: 'This is a list')  minWidth: 120;  visible: false;  disableTableLayout: true.ex2 announcer when: ExpanderMorphContracted do: [list hide; disableTableLayout: true]; when: ExpanderMorphExpanded do: [list show; disableTableLayout: false].row := builder newRow: { expanders. (builder newRow: {text. list})  vResizing: #spaceFill}."
"ConfigurationOfZincHTTPComponents","I am ConfigurationOfZincHTTPComponents, the Metacello configuration of Zinc HTTP Components, an open-source Smalltalk framework to deal with the HTTP networking protocol.For more information, see http://zn.stfx.euHere are some ways to load this project:	ConfigurationOfZincHTTPComponents load.	ConfigurationOfZincHTTPComponents project latestVersion load.	ConfigurationOfZincHTTPComponents project latestVersion load: 'Tests'.	ConfigurationOfZincHTTPComponents project bleedingEdge load.Here is a list of available groups:	default - Core	Tests	Character-Encoding	Resource-Meta	Zodiac		AWS	REST	Seaside	WebSocket	SSO - SSO-OAuth1 - SSO-OAuth2 - SSO-OpenID - SSO-Demo		WebDAV	WWS	Patch-HTTPSocket	This is open-source software licensed under the MIT License."
"RBStringReplacement","RBStringReplacement represents replacing source in the original method with a different string. These are used when reformatting code after a parse tree change has been made. Depending on the change, it may be possible to minimally change the parse tree without needing to format it.Instance Variables:	startPosition	<Integer>	the start position in the original source	stopPosition	<Integer>	the end position in the original source	string	<String>	replaces everything from the startPosition to the endPosition with this string"
"FLSqueak46Platform",""
"CharacterScanner","A CharacterScanner holds the state associated with scanning text. Subclasses scan characters for specified purposes, such as computing a CharacterBlock or placing characters into Forms.Instance Variables	alignment:		<Integer>	destX:		<Number>	destY:		<Number>	emphasisCode:		<Object>	font:		<AbstractFont>	indentationLevel:		<Integer>	kern:		<Number>	lastIndex:		<Integer>	leftMargin:		<Number>	line:		<TextLine>	map:		<Array>	pendingKernX:		<Number>	rightMargin:		<Number>	runStopIndex:		<Integer>	spaceCount:		<Integer>	spaceWidth:		<Number>	stopConditions:		<Array>	text:		<Text>	textStyle:		<TextStyle>	wantsColumnBreaks:		<Boolean>	xTable:		<Array>alignment	- an Integer encoding the alignment of textdestX	- horizontal position for next character (distance from left of composition area)destY	- vertical position for next character (distance from top of composition area)emphasisCode	- an Integer encoding the current text emphasis to use (bold, italic, ...)font	- the current font used for measuring/composing/displaying charactersindentationLevel	- an Integer specifying a number of leading tabs to be inserted at beginning of new lineskern	- a Number specifying additional horizontal spacing to place between characters (spacing is reduced when kern is negative)lastIndex	- the Integer index of next character to be processed in the textleftMargin	- a Number specifying the distance between left of composition zone and left of first character in the line.line	- an object holding information about the line currently being displayed (like first and last index in text).	Note: this is either a TextLine in Morphic, or TextLineInterval for ST80 compatibilitymap	- an array mapping character code to glyph position.	This is used by primitive 103 only, in case of ByteString.pendingKernX	- a Number to be added to horizontal spacing of next char if ever it is in the same font than previous one.	The inner scan loop is interrupted by a change of text run.	But some changes won't change the font, so the kerning must be remembered and applied later.rightMargin	- a Number specifying the distance between right of composition zone and right of last character in the line.runStopIndex	- the Integer index of last character in current text run.spaceCount	- the number of spaces encoutered so far in current line. This is useful for adjusting the spacing in cas of Justified alignment.spaceWidth	- the width of space character in current font.stopConditions	- an Array mapping a table of characters codes for which special actions are to be taken.	These are typically control characters like carriage return or horizontal tab.text	- the text to be measured/composed/displayedtextStyle	- an object holding a context for the text style (which set of font to use, which margins, etc...)wantsColumnBreaks	- a Boolean indicating whether some special handling for multiple columns is requested.	THIS ONLY MAKES SENSE IN CompositionScanner AND SHOULD BE MOVED TO THE SUBCLASS	xTable	- an array mapping character code to glyph x coordinate in form.	This is used by primitive 103 only, in case of ByteString.	Implementation note: accelerated Character scanning with primitive 103 requires following order for 5 first instance variables, please don't alter:destX lastIndex xTable map destY"
"VariableNode","I am a parse tree leaf representing a variable. Note that my name and key are different for pool variables: the key is the Object Reference."
"GLMMorphTreeColumn",""
"NonfocusablePluggableIconListMorph","Same as PluggableIconListMorph list but does not accept focus "
"QANautilusPlugin","I plug nautilus with a feedback from smalllint"
"RadioButtonModel","A RadioButtonModel is a spec model for RadioButton! The method privateSetState: is really private and should only be used by RadioButtonGroup !You can also have a look at RadioButtonGroupExample for a full example of how to use them with a group."
"MOPTestClassC",""
"UnixClipboard","The Unix vm does not do line-ending conversion, thus this subclass which specifies we convert CR's to LF's when pasting to it"
"SystemOrganizerTest",""
"IRRemoteTempAccess","I model the pushRemoteTemporary Bytecode"
"GLMBrickBorder",""
"ConfigurationOfQualityAssistant","Hi, I''m your personal quality assistant. I run Smalllint rules on the code that you modify, and notify you about quality changes. https://github.com/Uko/QualityAssistant#qualityassistant"
"AthensBalloonImagePaint","i representing an image (form) paint  "
"DialogWindow","Dialog style window with no window controls (expand, collapse etc). Usually opened modally (the morph that is used to modally open determines the modal scope, use of World implies ""system modal"").Designed to be subclassed with content.Supports Escape key for cancel and Enter key for default button."
"AndreasSystemProfilerTest","SUnit tests for AndreasSystemProfiler"
"PackageAPIHelpBuilder","A builder for the API of the various packages"
"SugsMorphicTextAdapterContext","A SugsMorphicTextAdapterContext is a context that know how to work with the MorphicTextAdapter."
"GTBrowseMethodDebuggerAction","I am a debugging action for browsing the currently selected class."
"InstanceVariableNode","I am a parse tree leaf representing an instance variable."
"ConfigurationOfVersionnerTestXMLWriter","Simple Configuration class used to test Versionner behavior.This class is a rename of ConfigurationOfXMLWriter-StephaneDucasse.29."
"PluggableIconListMorph","A type of PluggableListMorph that supports a single icon (Form) for items. Useful for lists with icons."
"SearchableTree","I am a tree plus an input field to be able to filter the tree elements"
"NonInteractiveTranscript","I am NonInteractiveTranscript, a replacement for Transcript, writing everything to a file or stdout. I implement TTranscript.This is useful when running headless.	NonInteractiveTranscript file install.	To connect to the output stream of the virtual machine process choose stdout.	NonInteractiveTranscript stdout install.or 	NonInteractiveTranscript stderr install"
"GoferLocalChanges","Handling local changes"
"STONLargeWriteReadTests","STONLargeWriteReadTests test the optimalizations for large structures."
"SHWorkspaceEditingMode","By default, shout styling is into a method editing mode. If you need a script editor for example, then you have to setup shout into a workspace mode. In order to setup a workspace mode, one have to make it available the workspace instance to the view styler. Typically, the workspace inspace is the model instance itself. See the sent of the #workspace: message into the #open method:open	...	editor := window newTextEditorFor:  self getText:  #code setText: #code: getEnabled: nil. 	editor styler workspace: self. 	...	^ window openInWorldThe workspace class has also to implement #hasBindingOf: and #hasBindingThatBeginsWith:. In fact, #hasBindingOf: and #hasBindingThatBeginsWith: are sent to the workspace by shout during styling. As an example, see the #bindings method implemented here:bindings	^ #('shout' 'styling')It returns a list of symbols which is used by #hasBindingOf: and #hasBindingThatBeginsWith:. Then open an editor with:SHWorkspaceEditingMode new openIf you enter the word 'shout' as an example, you will see that the word is recognized as a variable name."
"EncoderForSistaV1","EncoderForSistaV1 encodes a bytecode set for Sista, the Speculative Inlining Smalltalk Architecture, a project by Cl√©ment Bera and Eliot Miranda.  Sista is an optimizer that exists in the Smalltalk image, /not/ in the VM,  and optimizes by substituting normal bytecoded methods by optimized bytecoded methods that may use special bytecodes for which the Cogit can generate faster code.  These bytecodes eliminate overheads such as bounds checks or polymorphic code (indexing Array, ByteArray, String etc).  But the bulk of the optimization performed is in inlining blocks and sends for the common path.  This bytecode set therefore differs from a normal Smalltalk set in providing a set of inlined primitives that do not validate their arguments that the compiler generates only when it can prove that the primitives' arguments are valid.The basic scheme is that the Cogit generates code containing performance counters.  When these counters trip, a callback into the image is performed, at which point Sista analyses some portion of the stack, looking at performance data for the methods on the stack, and optimises based on the stack and performance data.  Execution then resumes in the optimized code.The Sista Cogit (e.g. SistaStackToRegisterMappingCogit) adds counters to conditional branches.  Each branch has an executed and a taken count.  On execution the executed count is decremented and if the count goes below zero the VM sends a message at a special index in the specialObjectsArray (as of writing, conditionalCounterTrippedOn:).  Then if the branch is taken the taken count is decremented.  The two counter values allow the Sista optimizer to collect basic block execution paths and to know what are the ""hot"" paths through execution that are worth agressively optimizing.  Since conditional branches are about 1/6 as frequent as sends, and since they can be used to determine the hot path through code, they are a better choice to count than, for example, method or block entry.The VM provides a primitive that fills an Array with the state of the counters, and the state of each linked send in a method.  Tthe optimizer obtains the branch and send data for a method via this primitive.This bytecde set encodes a bytecode set for Smalltalk that lifts limits on the number of literals and branch distances, and extended push integer and push character bytecodes.  Bytecodes are ordered by length to make decoding easier.  Bytecodes marked with an * are extensible via a prefix bytecode.N.B.  Extension bytecodes can only come before extensible bytecodes, and only if valid (one cannot extend a bytecode extensible by Ext A with an Ext B).  An extensible bytecode consumes (and zeros) its extension(s).  Hence the hidden implicit variables holding extensions are always zero except after a valid sequence of extension bytecodes.Instance Variables (inherited)1 Byte Bytecodes	code	(note)	binary			name	0-15		0000 iiii 			Push Receiver Variable #iiii	16-31		0001 iiii			Push Literal Variable #iiii	32-63		001 iiiii				Push Literal #iiiii	64-71		01000 iii			Push Temp #iii	72-75		010010 ii			Push Temp #ii + 8	76			01001100			Push Receiver	77			01001101			Push true	78			01001110			Push false	79			01001111			Push nil	80			01010000			Push 0	81			01010001			Push 1*	82			01010010			Push thisContext, (then Extend B = 1 => push thisProcess)	83			01010011			Duplicate Stack Top	84-87		010101 ii			UNASSIGNED	88-91		010110 ii			Return Receiver/true/false/nil	92			01011100			Return top	93			01011101			BlockReturn nil*	94			01011110			BlockReturn Top [* return from enclosing block N, N = Extend A, then jump by Ext B ]*	95			01011111			Nop	96-111		0110 iiii			Send Arithmetic Message #iiii #(#+ #- #< #> #'<=' #'>=' #= #'~=' #* #/ #'\\' #@ #bitShift: #'//' #bitAnd: #bitOr:)	112-119	01110 iii			Send Special Message #iii #(#at: #at:put: #size #next #nextPut: #atEnd #'==' class)	120		01111000			UNASSIGNED (was: blockCopy:)	121		01111001			Send Special Message #value	122-123	0111101 i			Send Special Message #i #(#value: #do:)	124-127	011111 ii			Send Special Message #ii #(#new #new: #x #y))	128-143	1000 iiii			Send Literal Selector #iiii With 0 Argument	144-159	1001 iiii			Send Literal Selector #iiii With 1 Arguments	160-175	1010 iiii			Send Literal Selector #iiii With 2 Arguments	176-183	10110 iii			Jump iii + 1 (i.e., 1 through 8)	184-191	10111 iii			Pop and Jump 0n True iii +1 (i.e., 1 through 8)	192-199	11000 iii			Pop and Jump 0n False iii +1 (i.e., 1 through 8)	200-207	11001 iii			Pop and Store Receiver Variable #iii	208-215	11010 iii			Pop and Store Temporary Variable #iii	216		11011000			Pop Stack Top	217		11011001			Unconditionnal trap	218-219	1101101 i			UNASSIGNED	220-223	110111 ii			UNASSIGNED2 Byte Bytecodes*	224		11100000	aaaaaaaa	Extend A (Ext A = Ext A prev * 256 + Ext A)*	225		11100001	bbbbbbbb	Extend B (Ext B = Ext B prev * 256 + Ext B)*	226		11100010	iiiiiiii		Push Receiver Variable #iiiiiiii (+ Extend A * 256)*	227		11100011	iiiiiiii		Push Literal Variable #iiiiiiii (+ Extend A * 256)*	228		11100100	iiiiiiii		Push Literal #iiiiiiii (+ Extend A * 256)	229		11100101	iiiiiiii		Push Temporary Variable #iiiiiiii	230		11100110	iiiiiiii		PushNClosureTemps iiiiiiii	231		11100111	jkkkkkkk	Push (Array new: kkkkkkk) (j = 0)									&	Pop kkkkkkk elements into: (Array new: kkkkkkk) (j = 1)*	232		11101000	iiiiiiii		Push Integer #iiiiiiii (+ Extend B * 256, where bbbbbbbb = sddddddd, e.g. -32768 = i=0, a=0, s=1)*	233		11101001	iiiiiiii		Push Character #iiiiiiii (+ Extend B * 256)**	234		11101010	iiiiijjj		Send Literal Selector #iiiii (+ Extend A * 32) with jjj (+ Extend B * 8) Arguments**	235	(1)	11101011	iiiiijjj	ExtendB < 64										ifTrue: [Send To Superclass Literal Selector #iiiii (+ Extend A * 32) with jjj (+ Extend B * 8) Arguments]										ifFalse: [Send To Superclass of Stacked Class Literal Selector #iiiii (+ Extend A * 32) with jjj (+ (Extend B bitAnd: 63) * 8) Arguments]*	236		11101100	iiiiiiii		UNASSIGNED*	237		11101101	iiiiiiii		Jump #iiiiiiii (+ Extend B * 256, where bbbbbbbb = sddddddd, e.g. -32768 = i=0, a=0, s=1)*	238		11101110	iiiiiiii		Pop and Jump 0n True #iiiiiiii (+ Extend B * 256, where Extend B >= 0)*	239		11101111	iiiiiiii		Pop and Jump 0n False #iiiiiiii (+ Extend B * 256, where Extend B >= 0)*	240		11110000	iiiiiiii		Pop and Store Receiver Variable #iiiiiii (+ Extend A * 256)*	241		11110001	iiiiiiii		Pop and Store Literal Variable #iiiiiiii (+ Extend A * 256)	242		11110010	iiiiiiii		Pop and Store Temporary Variable #iiiiiiii*	243		11110011	iiiiiiii		Store Receiver Variable #iiiiiii (+ Extend A * 256)*	244		11110100	iiiiiiii		Store Literal Variable #iiiiiiii (+ Extend A * 256)	245		11110110	iiiiiiii		Store Temporary Variable #iiiiiiii	246-247	1111011 i	xxxxxxxx	UNASSIGNED3 Byte Bytecodes	248	(2)	11111000 	iiiiiiii		mjjjjjjj		Call Primitive #iiiiiiii + (jjjjjjj * 256) m=1 means inlined primitive, no hard return after execution.	249		11111001 	xxxxxxxx	syyyyyyy	Reserved for Push Float**	250		11111010 	eeiiikkk		jjjjjjjj		Push Closure Num Copied iii (+ExtA//16*8) Num Args kkk (+ ExtA\\16*8) BlockSize jjjjjjjj (+ExtB*256). ee = num extensions	251		11111011 	kkkkkkkk	jjjjjjjj		Push Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	252		11111100 	kkkkkkkk	jjjjjjjj		Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	253		11111101 	kkkkkkkk	jjjjjjjj		Pop and Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj**	254		11111110	kkkkkkkk	jjjjjjjj		branch If Not Instance Of Behavior/Array Of Behavior kkkkkkkk (+ Extend A * 256, where Extend A >= 0) distance jjjjjjjj (+ Extend B * 256, where Extend B >= 0)	255		11111111	xxxxxxxx	yyyyyyyy	UNASSIGNED(1) Bytecode 235 is a super send bytecode that starts the lookup in the superclass of some class.  It has two forms, ""norma;"" and ""directed"". In the normal form, the class is the value of the method's methodClassAssociation which must be the last literal.  In the directed form the class is the class on top of stack.(2) The Call Primitive Bytecode specifies either a primitive in the primitive table (m=0) or an inlined primitive (m=1). Non-inlined primtiives from the primitive table have index (jjjjjjj * 256) + iiiiiiii and return from the method if they succeed.  This bytecode is only valid as the first bytecode of a method.  Inline primitives have index (jjjjjjj * 256) + iiiiiiii, cannot fail, and do not return when they succeed, yielding a result (typically on top of stack after popping their arguments, but possibly in a byte data stack, for example for unboxed floating-point primitives).We sort the inline primitive operations by arity.  Nullary primitives occupy the 0-999 range.  Unary primitives occupy the 1-1999 range, etc.We define the following inlined primitives:1000	unchecked class1001	unchecked pointer numSlots1002	unchecked pointer basicSize1003	unchecked byte8Type format numBytes (includes CompiledMethod)1004	unchecked short16Type format numShorts1005	unchecked word32Type format numWords1006	unchecked doubleWord64Type format numDoubleWords2000	unchecked SmallInteger #+.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2001	unchecked SmallInteger #-.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2002	unchecked SmallInteger #*.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2003	unchecked SmallInteger #/.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2004	unchecked SmallInteger #//.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2005	unchecked SmallInteger #\\.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2006	unchecked SmallInteger #quo:.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2016	unchecked SmallInteger #bitAnd:.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2017	unchecked SmallInteger #bitOr:.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2018	unchecked SmallInteger #bitXor:.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2019	unchecked SmallInteger #bitShift:.  Both arguments are SmallIntegers and the result fits in a SmallInteger (* depends on word size)2032	unchecked SmallInteger #>.  Both arguments are SmallIntegers2033	unchecked SmallInteger #<.  Both arguments are SmallIntegers2034	unchecked SmallInteger #>=.  Both arguments are SmallIntegers2035	unchecked SmallInteger #<=.  Both arguments are SmallIntegers2036	unchecked SmallInteger #=.  Both arguments are SmallIntegers2037	unchecked SmallInteger #~=.  Both arguments are SmallIntegers2064	unchecked Pointer Object>>at:.		The receiver is guaranteed to be a pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger2065	unchecked Byte Object>>at:.			The receiver is guaranteed to be a non-pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger.  The result is a SmallInteger.2066	unchecked 16-bit Word Object>>at:.			The receiver is guaranteed to be a non-pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger.  The result is a SmallInteger.2067	unchecked Word Object>>at:.			The receiver is guaranteed to be a non-pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger.  The result is a SmallInteger.2068	unchecked DoubleWord Object>>at:.	The receiver is guaranteed to be a non-pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger.  The result is a SmallInteger or a LargePositiveInteger.2069	unchecked QuadWord Object>>at:.		The receiver is guaranteed to be a non-pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger.  The result is a SmallInteger or a LargePositiveInteger.3000	unchecked Pointer Object>>at:put:.			The receiver is guaranteed to be a pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger3001	unchecked Byte Object>>at:put:.			The receiver is guaranteed to be a non-pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger.  The argument is a SmallInteger.  The primitive stores the least significant 8 bits.3002	unchecked Word Object>>at:put:.			The receiver is guaranteed to be a non-pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger.  The argument is a SmallInteger.  The primitive stores the least significant 16 bits.3003	unchecked DoubleWord Object>>at:put:.	The receiver is guaranteed to be a non-pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger.  The argument is a SmallInteger.  The primitive stores the least significant 32 bits.3004	unchecked QuadWord Object>>at:put:.		The receiver is guaranteed to be a non-pointer object.  The 0-relative (1-relative?) index is an in-range SmallInteger.  The argument is a SmallInteger.  The primitive stores the least significant 64 bits."
"MCRepositoryTest",""
"LogicalFontStoredSetting","I am responsible for storing information about LogicalFont objects."
"SmalltalkEditor","The editor built specifically for Smalltalk code"
"GLMListPresentation","A GLMListPresentation simply shows the given elements within a list.Instance Variables	tagsBlock:		<Object>	tagsFilterBlock:		<Object>tagsBlock	- xxxxxtagsFilterBlock	- xxxxx"
"SlotIntegrationTest","I'm a test case of SlotClassBuilder integration in the system. Tipically, my tests assert over Class API."
"RBSearchingLiteralRule","Checks for repeated literal equalitity tests that should rather be implemented as a search in a literal collection."
"ReReuseBasickCkeck","It is recommended to reuse the #basickCheck: method in #checkClass:, #checkMethod: or #checkPackage:. This will increase the maintainability of lint rules."
"VSCommitProjectValidationError","I'm an error thrown whenever the project validation fails. I contain a project reference and a list of issues."
"FFIUInt8","I'm an unsigned byte."
"ExternalLibrary","An external library bundles calls to functions from the same library. It is provided mainly as convenience since every external function can be fully specified by the name and the module it resides in.Every external function that is defined in an external library by default will use the library it is defined in. This can always be modified by providing the appropriate module in the specification. "
"KMBuffer","I am a buffer of keyboard events. I am checked against key combinations to see if there is a match.I am cleared when the current morph loses focus or when a full match announcement is given."
"MetacelloMCBaselineProject","The **MetacelloMCBaselineProject**  is a wrapper for the **BaselineOf** version specification for file-based repositories.There is a single version in a **MetacelloMCBaselineProject**, named *'baseline'*.A typical **BaselineOf** is specification:```Smalltalkbaseline: spec    <baseline>    spec        package: 'External-Core';        package: 'External-Tests' with: [ spec requires: 'External-Core' ];        yourself.    spec        group: 'Core' with: #('External-Core');        group: 'default' with: #('Core');        group: 'Tests' with: #('External-Tests');        yourself```The `<baseline>` pragma marks the method containing the baseline specification."
"ManifestToolDependencyAnalyser","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"ZnRequestResponseHandledEvent","ZnRequestResponseHandledEvent signals that the handler (delegate) processed a request and produced a response in duration in milliseconds. This duration is thus the time taken by the application itself."
"CairoScaledFont","my instances map tocairo_scaled_font_t * data type"
"EventSensorConstants","This is a constants, used by EventSensor to identify various event types and theirs contents.NOTE: A constant values should be kept in sync with VM-side, which are defined in sq.h header file."
"MetacelloScriptRegistryExecutor",""
"ManifestSystemChanges","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"StackTest","SUnit tests for stacks"
"GTSimpleRBTreeBrowser","This is a simple browser that displays the rb tree and previews each node on the source code.Example:self openOn: (self>>#compose) parseTree"
"OSWindowEventGestureVisitor","I am a abstract visitor for handling events.. serving just to cover the complete gesture protocol."
"RBClassEnvironment","I am a RBBrowserEnvironment on a set of classes.I containt all entities of this set.Example:(RBBrowserEnvironment new) forClasses: Number withAllSubclasses."
"PluggableTabButtonMorph","This is a specialized pluggable button morph that is meant to represent a tab in a set of tabs arranged horizontally.  Each tab will overlap slightly when drawn.  All but one tab will be drawn in left to right order in the specified color, but lighter.  The active tab will be drawn last in the full color and slightly taller to indicate that it is selected.  Clicking the active tab has no effect but clicking any other tab will change the active tab to the clicked tab.This morph does not itself accept any events.  The parent tab set will grab the mouse clicks and handle notifying the appropriate tabs that they have been activated or deactivated.There is a single selector which provides the text for the button label and affects the width of the tab.  When the width changes the tab will inform its parent that it has changed and that the layout needs to be updated.  The model for the text selector of course should be the client for the tab set.The button label can be a String, Text, or Morph.  Texts work better than plain Strings."
"UIThemeWatery","Watery UI theme"
"SugsMessageBrowserContext","I know how to use a Text model that came from a SmalltalkEditor and extract the information needed for the suggestions :)"
"ZdcReferenceSocketStreamTests","ZdcReferenceSocketStreamTests test the reference SocketStream in the image"
"VSCommitMajorVersion","I'm a major version."
"CommandLineTestRunner","I am command line test runner. I run a TestSuite and outpout the progress in a terminal friendly way."
"GoferConstraintReference","A GoferPackageReference refers to the latest version of a Monticello package satisfying an additional constraint."
"KMShortcutHandler","I am a shortcut handler that installs keymappings in the system."
"MetacelloScriptingStdTstHarness",""
"ManifestSystemCommandLineHandler","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"DAPackageCycleTest",""
"ManifestOpalCompilerCore","This is the Manifest for Opal for recording false positive of the code critique tool"
"GLMAccordionArrangement",""
"MetacelloRepositoriesSpecTestCase",""
"RubTextUpdatedInModel","I am raised when the model text is changed"
"MBSavePackageCommand","Command to save a package in versionner"
"RBProgramNodeTest","SUnit tests for RBProgramNode"
"DisplayMedium","I am a display object which can both paint myself on a medium (displayOn: messages), and can act as a medium myself. My chief subclass is Form."
"SettingBrowser","<help>! The User interfaceA SettingBrowser allows the browsing as well as the editing of setting values.For each setting, a label and an input widget allowing the change of the setting value are shown.!! Browsing standards settingsIn order to open a setting browser one can also use the expression below:--------------------SettingBrowser open--------------------It opens a SettingBrowser for all settings declared with the standard 'systemsettings' pragma keyword. To see how these settings are declared in the image, you can browse all senders of #systemsettings:--------------SystemNavigation new  browseAllSendersOf: #systemsettings--------------!! Browsing application specific settingsFor specific applications, other pragma keywords can be used. These keywords can be passed as follow:--------------------(SettingBrowser forKeywords: #('blob')) open.--------------------Then, only settings which are declared with the keyword 'blob' are viewed. Here is an example of such a setting declared in the class side of a class BlobSettings --------------------BlobSettings class>>blobSettingOn: aBuilder	<blob>	(aBuilder group: #blobEditing) 		label: 'Editing' translated;		parent: #blobBrowsing; 		description: 'All settings concerned with blob editing' translated;		with: [				(aBuilder setting: #color)	...--------------------The expression 'SettingBrowser open' is then equivalent to the '(SettingBrowser forKeywords: #('systemsettings')) open' expression.!! FilteringThe SettingBrowser has a filtering functionality to limitate the number of settings. You can enter a token in the input field of the toolbar in order to show only settings that are matching the token.Two filtering modes are allowed:  with a substring or with a regular expression.- with a substring: only settings which name, description, pragma class or method selector includes this substring are viewed; - with a regular expression: the same as with a substring except that the input is used as a regular expression. This filtering is applied if the Regexp checkbox is checked.! How to declare a settingA setting is declared with a method class side. This kind of method takes a builder as argument and a standard setting is tagged with the <systemsettings> pragma. The builder argument serves as a facade for the declaration.!!A simple boolean setting exampleLet's start with a setting declaration example:CodeHolderSystemSettings class>>caseSensitiveFindsSettingsOn: aBuilder	<systemsettings>	(aBuilder setting: #caseSensitiveFinds) 		label: 'Case sensitive search' translated;		description: 'If true, then the ""find"" command in text will always make its searches in a case-sensitive fashion' translated;		setSelector: #caseSensitiveFinds:;		getSelector: #caseSensitiveFinds;		target: TextEditor;		parent: #codeEditing.For this setting to be declared, we make the asumption that we have TextEditor class>>caseSensitiveFinds and TextEditor class>>caseSensitiveFinds: methods in order to change the preference value. To declare a setting, just send #setting: to the builder with its identifier, a Symbol passed as argument. It creates a setting node. Then you can set the label, the description with #label: and #description sent to the newly created setting node. You also have to set the selectors for setting and getting the preference value as well as the target to which these accessors are sent  (often a class). This is done by sending respectively, #setSelector:, #getSelector: and #target: to the setting node.Because all settings are organized in trees we need a way to indicate what is the position of the setting node in the overall setting trees list. In fact it can be done two ways. The first way is to use the #parent: message (A second possibility is to declare a subtree in one method, it is explained later in this documentation).The #parent: message is send for non root settings. #parent takes the identifier of the parent setting as argument.You may notice that in this example,  if we don't take into account the $: at the end of the setting accessor, the getting and the setting accessors are the same. This is often the case. You can simply set the setter and the getter by sending the #selector: message to the setting node. Thus the declaration is simplified as follow:CodeHolderSystemSettings class>>caseSensitiveFindsSettingsOn: aBuilder	<systemsettings>	(aBuilder setting: #caseSensitiveFinds) 		label: 'Case sensitive search' translated;		description: 'If true, then the ""find"" command in text will always make its searches in a case-sensitive fashion' translated;		selector: #caseSensitiveFinds;		target: TextEditor;		parent: #codeEditing.You may also notice that the identifier of the setting is then the same as the selector. In this case, you can omit to set the selector because by default, the identifier is used as the selector for getting the preference value and the identifier concatenated with a $: at the end is used as the setting selector. Thus the declaration is simplified again as follow:CodeHolderSystemSettings class>>caseSensitiveFindsSettingsOn: aBuilder	<systemsettings>	(aBuilder setting: #caseSensitiveFinds) 		label: 'Case sensitive search' translated;		description: 'If true, then the ""find"" command in text will always make its searches in a case-sensitive fashion' translated;		target: TextEditor;		parent: #codeEditing.Finally, if you decide to declare a setting directly in the class which implements the selector, the target information can be also omitted because the class in which the setting is declared is used by default. Thus the simplest declaration can be:TextEditor class>>caseSensitiveFindsSettingsOn: aBuilder	<systemsettings>	(aBuilder setting: #caseSensitiveFinds) 		label: 'Case sensitive search' translated;		description: 'If true, then the ""find"" command in text will always make its searches in a case-sensitive fashion' translated;		parent: #codeEditing.!!Declaring a subtree in one single methodDirectly declaring a sub-tree of settings in one method is also possible. Then, typically, a root group is declared for the application settings and the children settings themselves are also declared within the same method as in the example below in which #formatCommentWithStatements and #indentString are directly declared as children of the #configurableFormatter setting:RBConfigurableFormatter class>>settingsOn: aBuilder	<systemsettings>		(aBuilder group: #configurableFormatter)		target: self;		parent: #refactoring;		label: 'Configurable Formatter' translated;		description: 'Settings related to the formatter' translated;		with: [			(aBuilder setting: #formatCommentWithStatements)				label: 'Format comment with statements' translated.			(aBuilder setting: #indentString)				label: 'Indent string' translated]!!Optional settingAny setting can have children. In the case where a boolean setting is used as a parent, then, its children are chown only if the parent preference value is true.!!Range settingYou send the #range: message to the builder instead of the #setting: message. In addition, you send the #range: message to the setting with an interval as argument in order to indicate the valid range.screenMarginSettingOn: aBuilder	<systemsettings>	(aBuilder range: #fullscreenMargin)		target: SystemWindow;		parent: #windows;		label: 'Fullscreen margin' translated;		description: 'Specify the amount of space that is let around a windows when it''s opened fullscreen' translated;		range: (-5 to: 100).!!List settingFor this kind of setting, the SettingBrowser will show a drop list. Here is an example for the window position strategy. Notice that the setting is declared by sending the #pickOne message to the builder. Notice also that the list of valid values are given by sending the #domainValues: message to the setting. The argument is an array of association. Each association key is the label that is shown and the corresponding association value gives the value that will be assigned to the preference.windowPositionStrategySettingsOn: aBuilder	<systemsettings>	(aBuilder pickOne: #usedStrategy) 		label: 'Window position strategy' translated;		target: RealEstateAgent;		domainValues: {			'Reverse Stagger' translated -> #staggerFor:initialExtent:world:. 			'Cascade' translated -> #cascadeFor:initialExtent:world:. 			'Standard' translated -> #standardFor:initialExtent:world:};!!LauncherA launcher is a particular setting. It allows to launch a script directly from the setting browser. Imagine that you have changed some settings and that you need to evaluate a script in order to update some other objets. It can be used also to configurate globally a package of the entire image.As an example, in order to use True Type Fonts, the system must be updated by collecting all the available TT fonts. This can be done by evaluating the following expression:-------------FreeTypeFontProvider current updateFromSystem-------------In order to be able to launch this script from the setting browser, you have to declare a launcher. For example, look-at how the script for the TT fonts is declared in GraphicFontSettings class >> #standardFontsSettingsOn:.GraphicFontSettings class >> #standardFontsSettingsOn:	<systemsettings>	(aBuilder group: #standardFonts)		...		(aBuilder launcher: #updateFromSystem)				order: 1; 				target: FreeTypeFontProvider;				targetSelector: #current;				description: 'Update available fonts by scanning the current system';				script: #updateFromSystem;				label: 'Update fonts from system' translated.Notice that you send #launcher: to the builder in order to create the setting node, then you send #script: to the created node with the selector of the script passed as argument.</help>Implementation detailsSee also SettingNode, SettingTree, SettingNodeBuilder and SettingTreeBuilder classes.Instance Variables	roots:		<Collection of SettingTreeNode>	searchedText:		<String>	status:		<WriteStream>	collector:		<SettingCollector>roots	- the roots of the viewed setting treessearchedText	- the string used as a filter token or regexp in order to select viewed settingsstatus	- a WriteStream used in order to store useful information which are shown when no current item is selectedcollector	- The SettingCollector which has the responsibility to collect settings and to build viewed trees"
"GlobalVariable","I model Globals. I am stored as a binding in the Smalltalk globals.The compiler forwards bytecode generation to me for accessing the variable."
"MethodQueryTest",""
"GLMBrickMorphWrapper",""
"ZnLineTooLong","ZnLineTooLong is signalled when an HTTP CRLF terminated input line exceeds a predefined limit.Part of Zinc HTTP Components. "
"RBInconsistentMethodClassificationRule","This smell arises when a method protocol is not equivalent to the one defined in the superclass of such method class. All methods should be put into a protocol (method category) that is equivalent to the one of the superclass, which is a standard style in Pharo. Furthermore, methods which are extended in the superclass are ignored, since they may have different protocol name. Pay attention when you apply automatic recategorisation because it may move method in antoher package if the method is defined in the superclass as an extension."
"FLOptimizedObjectCluster","I have shared behavior of some optional clusters."
"SugsDiffModelContext",""
"ParseNodeVisitor","I am an abstract superclass for ParseNode visitors that functions as a null visitor.  Here's the code that defines my interface:(SystemNavigation new allImplementorsOf: #accept: localTo: ParseNode) do:	[:methodReference|	methodReference compiledMethod messages do:		[:sel|		((sel beginsWith: 'visit')		and: [sel numArgs = 1]) ifTrue:			[ParseNodeVisitor				compile: (String streamContents:							[:str|							str nextPutAll: sel;								space;								nextPut: $a.							methodReference classSymbol first isVowel ifTrue:								[str nextPut: $n].							str nextPutAll: methodReference classSymbol])				classified: 'visiting']]]"
"STONTestAssociation","STONTestAssociation is used to support unit tests."
"RBUnoptimizedAndOrRule","Checks for inefficient nesting of logical conditions."
"RBLongMethodsRule","This smell arises when a long method is found (with 10 or more statements). Note that, it counts statements, not lines. Long methods should often be split into several smaller ones. Long methods should often be split into several smaller ones. When you start to need an empty line to separate groups of statements, this is an indication that you should probably define a new method. 	Do not forget that methods are points of extension in an object-oriented language. It means that each time you define a method, a subclass may override and extend it while taking advantage and reusing the calling context of your method. This is the basis for the Hook and Template Design Pattern and central to good object-oriented design. So keep your methods short. Use the extract method refactoring, which even checks whether the method you are extracting already exists in the class. 	The defined number of statements can be edited in #longMethodSize. In the future such rule should hold state and not be based on method redefinition for its customization. "
"GTNullFilter",""
"SDL_KeyboardEvent","SDL2 library structure"
"OCSelfVariable","I model self variables "
"Morph","A Morph (from the Greek ""shape"" or ""form"") is an interactive graphical object. General information on the Morphic system can be found at http://minnow.cc.gatech.edu/squeak/30. Morphs exist in a tree, rooted at a World (generally a PasteUpMorph). The morphs owned by a morph are its submorphs. Morphs are drawn recursively; if a Morph has no owner it never gets drawn. To hide a Morph and its submorphs, set its #visible property to false using the #visible: method. The World (screen) coordinate system is used for most coordinates, but can be changed if there is a TransformMorph somewhere in the owner chain. My instance variables have accessor methods (e.g., #bounds, #bounds:). Most users should use the accessor methods instead of using the instance variables directly.Structure:instance var 	Type 			Description bounds 			Rectangle 		A Rectangle indicating my position and a size that will enclose 									me. owner 			Morph		 	My parent Morph, or nil for the top-level Morph, which is a 				or nil			world, typically a PasteUpMorph.submorphs 		Array 			My child Morphs. fullBounds 		Rectangle 		A Rectangle minimally enclosing me and my submorphs. color 			Color 			My primary color. Subclasses can use this in different ways. extension 		MorphExtension Allows extra properties to be stored without adding a				or nil  				storage burden to all morphs. By default, Morphs do not position their submorphs. Morphs may position their submorphs directly or use a LayoutPolicy to automatically control their submorph positioning.Although Morph has some support for BorderStyle, most users should use BorderedMorph if they want borders."
"SmallFloat64","My instances represent 64-bit Floats whose exponent fits in 8 bits as immediate objects.  This representation is only available on 64-bit systems, not 32-bit systems."
"GLMPortEvent","A GLMPortEvent is passed to the parent pane every time a Port changes.Instance Variables	oldValue:		<Object>	port:		Port	transmission:		Transmission	transmissionContext:	TransmissionContext"
"ZnReadEvalPrintDelegate","I am ZnReadEvalPrintDelegate, I export a REPL Web Service.You can use this service to work with a headless image.	ZnReadEvalPrintDelegate startInServerOn: 1701.		ZnClient new		url: 'http://localhost:1701/repl';		contents: '42 factorial';		post.	Web Service API:	POST /repl <some Smalltalk code>	 Here is an example terminal session:$ curl http://localhost:1701/repl# Pharo Smalltalk REPL. POST expressions to evaluate# Here is one way (type ctrl-d to end input)curl -X POST -H'Content-Type:text/plain' --data-binary @- http://localhost:1701/repl$ curl -X POST -H'Content-Type:text/plain' -d '42 factorial' http://localhost:1701/repl1405006117752879898543142606244511569936384000000000$ curl -X POST -H'Content-Type:text/plain' --data-binary @- http://localhost:1701/repl{ (1 to: 10) sum. (1 to: 10) average }{55. (11/2)}There is error handling as well:$ curl -X POST -H'Content-Type:text/plain' --data-binary @- http://localhost:1701/repl1 plus: 2MessageNotUnderstood: SmallInteger>>plus:SmallInteger(Object)>>doesNotUnderstand: #plus:	Receiver: 1	Arguments and temporary variables: 		aMessage: 	plus: 2		exception: 	MessageNotUnderstood: SmallInteger>>plus:		resumeValue: 	nil	Receiver's instance variables: 1UndefinedObject>>DoItCompiler>>evaluate:in:to:notifying:ifFail:logged:Compiler>>evaluate:in:to:notifying:ifFail:Compiler>>evaluate:in:to:ZnReadEvalPrintDelegate>>evaluate: in Block: [| result |...BlockClosure>>on:do:ZnReadEvalPrintDelegate>>evaluate: in Block: [:out | [| result |...String class(SequenceableCollection class)>>new:streamContents:WARNING: never open this service beyond your local network !This service gives you absolute control over and access to everything in your image. For example, the following will kill your image:$ curl -X POST -H'Content-Type:text/plain' -d 'Smalltalk quitPrimitive' http://localhost:1701/replPart of Zinc HTTP Components. "
"ZnMagicCookieTests",""
"MenuCapturingMorph","It's difficult to test whether menus appear because the test might block the UI thread and prevent it.I use Morphic stepping to monitor the world for a new menu. If I find one, you can get it by sending me #menu."
"GLMUpdateMorphicTest",""
"RegexError","This is a common superclass for errors in regular expressions."
"GLMMockSimpleTransmission",""
"GTEventRecorderTest",""
"SlotClassBuilder","I'm responsible for building and verifying new classes. The update and modification/installation of classes are managed by installers (AbstractClassInstallation).The class builder is responsible for the structural part of modifying a class or creating a new class. It relies on the installer to fetch the old version of the class. It then uses the class modification model to compute the method modification and instance modification models. It then validates if these changes are semantically sound.Example:	see PharoClassInstaller"
"MorphicGenericAdapter","I am a generic adapter used to embed directly a Morph in spec.Be aware that when you use this, you broke Spec plateform independency and force you application to run only on top of Morphic"
"SDL_CommonEvent","SDL2 library structure"
"RBRealizeClassRefactoring","Make a given class concrete, by providing empty templates for all the abstract methods."
"IRLiteralVariableAccess","LiteralVariables are -> Globals-> Pool access-> Class Var access"
"CollectionCombinator","For a collection of collections, enumerate all elements of the cartesian product. The code shows how recursion is used to implement variable nesting of loops.The cartesian product is usually a huge collection, that should not be kept in memory. Therefore the user of the class has to provide a block with one argument that is called each time a tuple is constructed. When possible, that block should not build a collection of all these tuples, but should immediately drop unsuitable tuples. To get a first impression, try this with 'inspect it':     | result |     result := OrderedCollection new.    CollectionCombinator new         forArrays:  (OrderedCollection with: #(#a #b #c)                                             with: #(1 2 3 4 5)                                             with: #('v' 'w' 'x' 'y' 'z')                                             with: #('one' 'two' 'three')                         )         processWith: [:item |result addLast: item].    result         "
"FFIVoid","I'm a void type. I'm used always as pointer type, otherwise it does not have any sense. "
"SugsStoresIntoInstVar","I know how to find stores into for an instance var"
"GTMockSpotterStep",""
"AbstractFileReference","I am an abstract superclass for FileLocator and FileReference. By implementing most of the methods on myself most code duplucation between the locator and the reference can be avoided"
"LoadingState","I am the state used while loading"
"FLLargeIdentityDictionary","I am an IdentityDictionary optimized for including a large number of elements."
"JPEGColorComponent","I represent a single component of color in JPEG YCbCr color space.  I can accept a list of blocks in my component from the current MCU, then stream the samples from this block for use in color conversion.  I also store the running DC sample value for my component, used by the Huffman decoder.The following layout is fixed for the JPEG primitives to work:	currentX 		<SmallInteger>	currentY 		<SmallInteger>	hSampleFactor 	<SmallInteger>	vSampleFactor 	<SmallInteger>	mcuBlocks 		<Array of: <IntegerArray of: DCTSize2 * Integer>>	widthInBlocks 	<SmallInteger>	heightInBlocks 	<SmallInteger>	dctSize 			<SmallInteger>	mcuWidth 		<SmallInteger>	mcuHeight 		<SmallInteger>	priorDCValue 	<SmallInteger>"
"NautilusRefactoring","NautilusRefactoring is a facade for refactorings:- class- method- inst var- class var- source code"
"YearTest","SUnit tests for year handling"
"CPUWatcher","CPUWatcher implements a simple runaway process monitoring toolthat will suspend a process that is taking up too much of Pharo'stime and allow user interaction. By default it watches for a Process thatis taking more than 80% of the time; this threshold can be changed.CPUWatcher can also be used to show cpu percentages for each process from within the ProcessBrowser.	CPUWatcher startMonitoring.	""process period 20 seconds, sample rate 100 msec""	CPUWatcher current monitorProcessPeriod: 10 sampleRate: 20.	CPUWatcher current threshold: 0.5.	""change from 80% to 50%""	CPUWatcher stopMonitoring."
"IRBuilder","I provide a simple interface for constructing an IRMethod.  For example, to create an ir method that compares first instVar to first arg and returns 'yes' or 'no' (same example as in BytecodeGenerator), do:	IRBuilder new		numArgs: 1;		addTemps: #(a z);		pushReceiver;		pushInstVar: 1;		pushTemp: #a;		send: #>;		jumpAheadTo: #else if: false;		pushLiteral: 'yes';		returnTop;		jumpAheadTarget: #else;		pushLiteral: 'no';		returnTop;		irSending #compiledMethod to an ir method will generate its compiledMethod.  Sending #methodNode to it will decompile to its parse tree."
"GLMTreePresentationTest",""
"MCSnapshot","MCSnapshot represents a list of entities compared to a given base entities. It holds a list of definitions (instances of MCDefinition subclasses). It can install these entities or update a package."
"IntervalTest","SUnit tests for intervals"
"SugsAddParameter","I know how to add a parameter to a method"
"GTFuelPacking","I serialize or materialize objects using FUEL framework. Create instance of me calling GTEventPacking fuel."
"GLMApproximateScrollbarBrick","A GLMApproximateScrollbarBrick can be used only with GLMScrollListBrick or with other lists that uses adaptors.Approximates the height of band depending on average height of all visible items."
"RBCondition",""
"MBSpecInfo","A MBSpecInfo holds information on Metacello specifications.Instance Variables	configurationInfo:		the object holding information on the whole configuration.	spec:		the specification of this object (a MetacelloSpec)."
"EntryCompletion","An EntryCompletion is a handler for the driving of the completion menu in a PluggableTextFieldMorph. The completion menu is an IdentifierChooserMorph which is typically built and popup when a character is entered in a PluggableTextFieldMorph. Instance Variables	chooseBlock:		<Block>	chooser:		<IdentifierChooserMorph>	dataSourceBlock:		<Block>	filterBlock:		<Block>	previousToken:		<String>chooseBlock	- One argument block which is evaluated when a token is chosen, the token is passed as argumentchooser	- The IdentifierChooserMorph which is currently openeddataSourceBlock	- The block that is evaluated in order to get the list of itemsfilterBlock	- The block used to filter the dataSource list, it takes 2 args, the first is an item from the current dataSource list element, the second is the token fetched from the requestor (the PluggableTextFieldMorph). It returns true if the current dataSource list element is to be keptpreviousToken	- Used to be able to not open the list if the current text in the PluggableTextFieldMorph was the previous chosen one"
"SDL_WindowEvent","SDL2 library structure"
"AboutDialogWindow","Default superclass for application about dialogs."
"TextSelectionColor","I represent a text selection attribute that can be added to a text for a text emphazing (text color). I have a color block (colorBlock) which is evaluated in order to get the text color. I have three instances, one for the primary selection and the two others for the secondary selection and the find replace selection. PrimarySelection is used in TextEditor>>#storeSelectionInParagraph in order to emphasize the selection text if the selection text color setting is not nil.SecondarySelection and FindReplaceSelection are manage by MultiNewParagraph if secondary selection text and find replace selection text colors are not nil.Instance Variables	colorBlock:		<Block>colorBlock	- The block which is evaluated in order to get the text color"
"VSConfigurationValidationIssuesDisplayCommand","Display errors found in a configuration validation."
"CRCError","CRC failed"
"FFIExternalStructure","I'm an extension of ExternalStructure.I extend my parent functionality by adding: - field description - field accessing implementation - ..."
"FLBinaryFileStreamStrategy","Specific to BinaryFileStream"
"AnonymousClassInstaller","I am a class installer that does not expose the class to the global environment nor announces that a new class has been created.As it's name suggest it is used for anonymous classes, for instance in Tests."
"TxLayoutViewChanged",""
"ZeroDivide","I am ZeroDivide, an ArithmeticError that may be signaled when a mathematical division by 0 is attempted."
"GLMTablePresentation","A GLMTablePresentation shows the given elements within a table.  If the #children block is set then it support a tree-like table where elements can be expanded.Each column of the presetation can have its own tags and its own sorting block.Instance Variables	children:		<Object>	columns:		<Object>	rootsExpanded:		<Object>children	- xxxxxcolumns	- xxxxxrootsExpanded	- xxxxx"
"ZnBasicAuthenticator","I am ZnBasicAuthenticator.I help servers handle HTTP Basic Authentication.I implement the required #authenticateRequest:do:I have a credentials dictionary with username->password associations.Part of Zinc HTTP Components."
"KomitClass","I am encapsulating a class and the operations which has been applied to it.I implement a flyweight DP"
"DATraitDependency","A PDTraitDependency is a trait dependency between two packages. Instance Variable	trait:		the trait"
"MCRepositoryRemoved","Announcement sent when a Repository is removed from  a Repository group."
"MethodToolbar","A MethodToolbar is xxxxxxxxx.| b |b := MethodToolbar new.b openWithSpec.b method: (ButtonModel>>#state:).b method: nil"
"ReduceTest","SUnit tests for reducing collections"
"BlockClosuresTestCase","This test case collects examples for block uses that require full block closures."
"AbstractStoredSettingTest","An AbstractStoredSettingTest is a test class for testing the behavior of AbstractStoredSetting"
"StepOverDebugAction","A StepOverDebugAction the current context."
"BasicIndexedEyeElement","I am an eye element for indexable fields. (basicAt:)"
"ProcessAndSessionLocalVariable","My subclasses have values specific to the active process and to the current session (Smalltalk session). They can be read with #value and set with #value:"
"RGBehaviorDefinition","An RGBehaviorDefinition is an abstract definition for class-alike entities (e.g. classes, traits)Instance Variables	methods:		<Collection>	protocols:		<Collection>	superclass:		<Object>"
"ZnMultiValueDictionary","I am ZnMultiValueDictionary. I am a Dictionary.I offer an #at:add: method to transparently create Array valued multi entries when needed.My #keysAndValuesDo: is overwritten to transparently deal with multi entries.To merge two instance preserving multiple values you can use #addAllMulti:I normally limit the number of entries to protect me from resource abuse.Note that most other methods will show the actual value.Part of Zinc HTTP Components."
"MetacelloVersionSpecTestCase",""
"SugsMenuBuilderTest","SUnit tests for the Smart suggestions menu builder"
"MetacelloVersionNumberTestCase",""
"MetacelloCleanLoadAndTestsNotification",""
"ManifestSlot","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"CatalogProvider","I'm a provider for projects in the pharo catalog. Pharo projects are represented as CatalogProject instances. Usually  I fetch projects from http://catalog.pharo.org/catalog/json and create CatalogProject from such description. Use my default instance, I will cache the catalog data for 24 hours.	CatalogProvider default projects."
"PackageTreeNautilusTest",""
"KomitLeaf","I am an abstract class for tree leaves"
"TextIndent","create a hanging indent. "
"CommandLineArguments","The CommandLineArguments represents the arguments passed to the image.In the following case,	$PHARO_VM myImage.image --foo bar	`CommandLineArguments default` contains {'--foo'. 'bar'}."
"SimpleTestResourceB","I'm a simple test ressource for test purposes"
"CodeImporter","I'm an object in charge of import source files.  I know a format object that knows how to parse the files, and I import the parsed results into the image.I handle doIts normally, but some special cases like class organization, class comment or methods are handled via a double dispatch (See my method extensions for that).=-=-=- How to use me -=-=-=If you want to fileIn the code -aka compile/evaluate it:CodeImporter evaluateReadStream: '2+2!' readStream.orCodeImporter evaluateString: '2+2!'orCodeImporter evaluateFileNamed: 'something.st'orCodeImporter evaluateFileStream: (FileStream readOnlyFileNamed: 'something.st')Now, you can also generate a model of code declarations inside a file by just creating an instance:CodeImporter fileStream: (FileStream readOnlyFileNamed: 'something.st').And then query me sending the message#codeDeclarationsInstances of me can be created through #fromString:#readStream:#fileNamed:#fileStream:"
"DropListModel","A DropListModel is a Spec model for drop lists.I am assume there is a little problem on an empty list, but frankly, who creates an empty drop list ?See DropListExample for an example"
"DependentsArrayTest",""
"IRPushLiteral","Instruction ""pushLiteral: object"""
"FLGlobalSendNotPresentMock","A test mock where a global send is not present"
"GLMVariableBindingsAccessRequest","Request to perform an action on the current bindings from the editor."
"GTEventCollector","I represent a collection of data that should be sent to a specific URL. I am responsible for collecting data (#add: method) and for giving collected data to GTEventPacking object (#bundle method).You should consider to set #category. This value is used for separating data on the server to directories. That way you will then easier receive your collected data. If you creates a subclass of me, you can override #defaultCategory method.You should also consider set #occupant:. This could be an object that uses me and feeds me with data. I keep this occupant weakly. So, if the object is removed from the memory, GTEventRecorder knows that I can be removed too. I collaborate with GTEventPacking object that receives collected data and URL, serilize the collected data, and creates GTEventBundle object. My subclasses can handle differently what data to send together to server by rewritting #bundle method.Public API and Key Messages- bundle   - url- category- occupant:- registerExample for playing with me:	GTEventCollector new		category: #testingForFun;		occupant: nil ""object that represents your application"";		add: 42;		add: 'Hallo Pharo user';		yourself.Example for serious use:	GTEventCollector new		category: #testingForReal;		occupant: nil ""object that represents your application, if nil, the collector will be removed from GTEventRecorder object once collected data are sent"";		register; ""please do not register just for fun, because we collects those data""		yourself Internal Representation and Key Implementation Points.    Instance Variables	recordedEvents:		<WaitfreeQueue>	url:		<ZnUrl>"
"ZdcPluginMissing","I am ZdcPluginMissing, signaled when a plugin required by Zodiac is missing.You can find more information on Zodiac's website	http://zdc.stfx.eu"
"ExternalDropHandler","Handle a number of dropped files from the OS"
"AbsolutePathStoredSetting","I am responsible for storing information about AbsolutePath objects."
"NullTaskList","I stand in when the task list is not open in the world."
"KMCategoryTarget","I am the reification of the relation morph<->category, created when a morph gets attached a category of shortcuts."
"GLMMultiValue","GLMMultiValue is helper class that is used in #glamourValue:."
"TextFontChange","A TextFontChange encodes a font change applicable over a given range of text.  The font number is interpreted relative to the textStyle governing display of this text."
"IndexedEyeElement","I am an eye element for indexable fields. (at:)"
"MOPTestClassA",""
"ISOLanguageDefinition","The language definitions from International Organization for Standardization.You can obtain the list of the all the ISOCountries and languages."
"WPDummy","I am a dummy class to test watchpoints"
"TxHighlightRenderer","I highlight text backgroung e.g. to show a selection. I require a layout view, paint, and text interval."
"CustomQuestionDialogWindow","QuestionDialog supporting custom text/buttons for yes/no choices."
"ZnServerGenericLogEvent","I am ZnServerGenericLogEvent, a ZnServerLogEvent and ZnLogEvent that holds a generic subject, possibly not limited to a String.Here are two examples:(ZnServerGenericLogEvent subject: 'You can''t do that, Dave') emit.(ZnServerGenericLogEvent subject: { #id->123. #reason->#timeout } asDictionary) emit."
"RFNodeReification","I am the node that the link is installed on"
"ManifestCompression","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GTSpotterCandidateSelected",""
"RubHorizontalScrolled","I am raised when a horizontal scroll is done"
"RFC2047MimeConverter","I do quoted printable MIME decoding as specified in RFC 2047 """"MIME Part Three: Message Header Extensions for Non-ASCII Text"". See String>>decodeMimeHeader"
"MorphOpened","I'm an announcement raised when a morph is opened.  Subscribe to me when you want to do things after the morph is opened.Take into account that when a morph is opened, all it's children also get opened and they raise a similar announcement."
"RPackage","A RPackage is a new implementation of package. Note that it does not touch classes but it is just a layer on top of classes therefore removing a method from a package does not change the underlying class. Instance Variables	classDefinedSelectors:		Dictionary	classExtensionSelectors:		Dictionary	metaclassDefinedSelectors:		Dictionary	metaclassExtensionSelectors:		Dictionary	packageName:		String	classes: OrderedCollection of Symbols	classTags: is a mapping from tags to classNamesThe reason we use four dictionaries is that this way we only store #Point in both as the class and the metaclass are involved. We do not have to with Point_class problem when comparing defined and extended classes. The idea is taken from the RBSelectorEnvironment. 							Class Invariant one:	Classes should not contain metaclass name, but only class names		Implementation notes ====================This class went over 3 internal representations implementation. 	- first: 	a list of class + two dictionaries: class * methods	This was not good since we add to go all the time over the list of classes.	- second: 4 dictionaries class * selectors 	This was not good since we want to have defined classes without methods. 	- third: 4 dictionaries + definedClassesOriginally I wanted to avoid to have a defined class list and I wanted to avoid to have to declare the class as defined. But this is not really good since	- we will want to know if a class definition (without method for example is defined in a given package)	- second this is easier to hook the packageOf: behavior (we register the package class when the class is 	added to the package).defined classes information is redundant with the dictionary keys of defined methods but we would have to check and register the class to the packageOrganizer the first time a method is defined then also check on remove to unregister the class from the packageOrganizer.Adding a method does not define the class as a defined package class. This has to be done explictly. The reason for this choice is that a class should register to the packageOrganizer and that I do not want to do it each time a method is added and I do not want to test it each time a method is added. Now this is done only when the class is declared as defined. We could also give the complete freedom to the client to register the class but I thought it was a good compromise. 		ClassTag are tags that can be associated to classes. They help user organizing their class internal. So that we can have a package infrastructure as follows:	Package1		ClassA		ClassB	in case there is no tags associated to the package	or	Package2			Tag1			ClassA			ClassB		Tag2			ClassC			ClassD			ClassE			ClassA			Todo====	Next: 	- finish 	- build up a synchronizer that import PackageInfo.			"
"GLMPaneRemoved","A new pane was removed"
"RubFindReplaceWindowRequired","I am an announcement to signal there is a need of find and replace window"
"RBUndeclaredReferenceRule","Checks for references to variables in the Undeclared dictionary. If you remove a referenced variable from a class, you will create an undeclared variable reference for those methods that accessed the variable."
"RBStringReplaceRule","RBStringReplaceRule replaces a matched tree with another tree (which may include metavariable from the matching tree). This is a very succint syntax for specifying most rewrites.Instance Variables:	replaceTree	<RBProgramNode>	The tree to replace the matched tree with."
"ZdcSocketStreamTests","ZdcSocketStreamTests tests ZdcSocketStream"
"BIConfigurableFormatter","BIConfigurableFormatter formats the Refactoring Browser's parse trees. It has many more formatting options than the default formatter used by the RB. To change the RB to use this formatter, execute ""RBProgramNode formatterClass: BIConfigurableFormatter"". For some refactorings the RB must reformat the code after the change, so it is good to have a formatter configured to your tastes.Instance Variables:	codeStream	<PositionableStream>	the stream we are writing our output to	indent	<Integer>	how many times are we indenting a new line -- indents are normally tabs but could be any whitespace string	lineStart	<Integer>	the position of the character that started the current line. This is used for calculating the line length.	lookaheadCode	<Dictionary key: RBProgramNode value: String>	sometimes we need to lookahead while formatting, this dictionary contains the nodes that have already been formatted by lookahead	originalSource	<String>	the original source before we started formatting. This is used to extract the comments from the original source.BIConfigurableFormatter new"
"GLMTabbedArrangement",""
"GLMMorphicValidatorPaneRenderer",""
"Exception","This is the main class used to implement the exception handling system (EHS).  It plays two distinct roles:  that of the exception, and that of the exception handler.  More specifically, it implements the bulk of the protocols laid out in the ANSI specification - those protocol names are reflected in the message categories.Exception is an abstract class.  Instances should neither be created nor trapped.  In most cases, subclasses should inherit from Error or Notification rather than directly from Exception.Exceptions have an optional #messageText that can be set when they are signaled.Exceptions also have the concept of #signaler, the object that is the subject of the exception.This will be set automatically (to the #receiver), but can be set when the exception is signaled. In implementing this EHS, The Fourth Estate Inc. incorporated some ideas and code from Craig Latta's EHS.  His insights were crucial in allowing us to implement Context>>valueUninterruptably (and by extension, #ensure: and #ifCurtailed:), and we imported the following methods with little or no modification:Context>>terminateTo:Context>>terminateContext>>receiver:Context>>answer:Thanks, Craig!"
"FontSet","FontSet provides a mechanism for storing a set of fonts as a class that can be conveniently filedOut, filedIn, and installed as a TextStyle.The most common use is...	Find a font you like.	Use BitFont to convert a bunch of sizes to data files named, eg, LovelyNN.BF	Use FontSet convertFontsNamed: 'Lovely' to produce a FontSet named Lovely.	FileOut that FontSet for later use.	Use Lovely installAsTextStyle to make all sizes available in a TextStyle		named #Lovely in the TextConstants dictionary.	Use ctrl-k in any text pane to select the new Lovely style for that paragraph.	Then use cmd-1 through 5 or cmd-k to set the point-size for any selection."
"RubSegmentIconMenuItemMorph",""
"OCArgumentVariable","I model argument variables. By definition, an argument variable is always initialized, and can't be written to."
"WatchpointWindow","I am a minimal user interface that shows the last entries in the watchpoint history."
"PostorderGuideTest","SUnit tests for class PostorderGuide"
"MetacelloValidationCriticalWarning","MetacelloValidationCriticalWarning indicates that there is a logical inconsistency that may not be intentional and that could cause incorrect loads"
"WorldMorph","A WorldMorph is a special morph that represents the world.It is a paste up and it holds active hand.A World, the entire Smalltalk screen, is a PasteUpMorph.  A World responds true to isWorld."
"Slot","I'm a meta-object for accessing a slot in an Object. I define a protocol to read (#read:) and to write (#write:to:) values. For customizing a subclass can override the meta-object-protocol methods. See subclasses for examples.Vocabulary:- variable: named accessor for a Slot- Slot: class-side meta-object, mapping of names to values using a MOP to fields- field: space occupied in an object, used to hold values accessed via Slots"
"TextDiffBuilder","I implement the diff algorithm. I can show the differences between two texts. See my method comments for further information.Instance Variables	xLines:		<Array>	yLines:		<Array>xLines	- an Array of DiffElement which is created from the first input textyLines	- an Array of DiffElement which is created from the second input text"
"WeakOrderedCollectionTest","A trait for test purposes"
"ZnResourceMetaUtilsTests",""
"AnnouncementsHelp","This is a custom help book for the announcements framework."
"JobChange","A JobChange is an announcement for a job change. To get notifySystemAnnouncer uniqueInstance 	on: JobChange send: #XXX to: whoever."
"CharacterBlockScanner","A CharacterScanner does scan text to compute the CharacterBlock for a character specified by its index in the text or its proximity to the cursor location. The CharacterBlock stores information both about character layout and character index in the text.This class is essential for selecting text with the mouse or with arrow keys.Instance Variables	characterIndex:		<Integer | nil>	characterPoint:		<Point>	lastCharacterWidth:		<Number | nil>	nextLeftMargin:		<Number>	specialWidth:		<Number | nil>characterIndex	- the index of character for which the layout information is searched, or nil when the layout is searched by cursor locationcharacterPoint	- the cursor location for which nearest character index and layout are searched.lastCharacterWidth	- a number indicating the width of last character being processed.	Note that this variable is left to nil during the inner scan loop, and only set on stopConditions.nextLeftMargin	- a number specifying the distance between left of composition zone and left of first character for the next line.specialWidth	- a number holding the width of an embedded object if any, or nil if none."
"RGMethodDefinitionTest","SUnit tests for method definitions"
"SDL2SpecialCharacterMapping","This class keeps a maps for key symbols that are represented by Morphic as special characters."
"BrowseDebugAction","A BrowseDebugAction is a debugging actions sending a unary message to the stack widget."
"FTTreeFunctionStrategy","I am an abstract class that describe a Strategy to search/filter a FTTreeDataSource.Description----------------------I have a dataSource that I can use and I can have a seach pattern which I use to search/filter the dataSource if needed.I am use by a FTTreeDataSource and I help it with the possible FTFunction of his FTTableMorph. Public API and Key Messages----------------------- #search    	activate a search of the dataSource with the current pattern.	- #filter    	activate the filter of the dataSource with the current pattern.	- #searchWith: aString dataSource: dataSource 	is one of my constructors, it return the result of a search.-#filterWith: aRegex dataSource: dataSource 	is an other of my constructor, it returns a new dataSource filtered by the regex. 	Example----------------------I am an abstract class. I should not be use. Internal Representation and Key Implementation Points.----------------------    Instance Variables	dataSource:		The data source I need to search/filter.	pattern:		The search pattern in need to use,  this is a String or a Regex."
"WindowEdgeGripMorph","Window edge gripper allowing resizing of a window by a particular side."
"AbstractClassModification","I represent a class modification. I content field modifications."
"FTColumn","I'm a column definition for a fast  table.Description ------------------ I keep an id and relevant information of my behaviour, but this behaviour is better defined in FTDataSource>>#headerTable:column: Internal Representation and Key Implementation Points.-----------------    Instance Variables	id:		An id for the column	width:		An Integer that represent the width of a column."
"OSTouchTwoFingersScrollBeginEvent","Two fingers started to scroll"
"MCWorkingCopyDeleted","A MCWorkingCopyDeleted class is an announcement raised when a MCWorkingCopy is removed"
"TxAthensTextTest",""
"MetacelloSymbolicVersionNotDefinedError",""
"MalHal",""
"ReSearchStringSourceAnchor","I allow to provide a string that should be matched in the source entity and converted to an interval"
"MCSubDirectoryRepositoryTest","I am not a subclass of MCRepositoryTest because my purpose was to show that a bug had been fixed and my author didn't feel like implementing all the reuirements of MCRepositoryTests"
"FileSystemGuide","I am an abstract superclass for objects that fulfill the Guide role in the Guide/Visitor pattern. My subclasses know how to traverse a filesystem in a specific order, ""showing"" the files and directories they encounter to a visitor.visitor	An object that fulfills the Visitor role and implements the visitor protocol.	work	An OrderedCollection, used to keep track of filesystem nodes that have not yet been visited"
"IRPrinterTest",""
"Pragma","I represent an occurrence of a pragma in a compiled method.  A pragma is a literal message pattern that occurs between angle brackets at the start of a method after any temporaries.  A common example is the primitive pragma:	<primitive: 123 errorCode: 'errorCode'>but one can add one's own and use them as metadata attached to a method.  Because pragmas are messages one can browse senders and implementors and perform them.  One can query a method for its pragmas by sendng it the pragmas message, which answers an Array of instances of me, one for each pragma in the method.I can provide information about the defining class, method, its selector, as well as the information about the pragma keyword and its arguments. See the two 'accessing' protocols for details. 'accessing-method' provides information about the method the pragma is found in, while 'accessing-pragma' is about the pragma itself.Instances are retrieved using one of the pragma search methods of the 'finding' protocol on the class side.To browse all methods with pragmas in the system evaluate	SystemNavigation new browseAllSelect: [:m| m pragmas notEmpty]and to browse all nonprimitive methods with pragmas evaluate	SystemNavigation new browseAllSelect: [:m| m primitive isZero and: [m pragmas notEmpty]]"
"MTModelComparatorTest",""
"SugsBreakAlwaysSuggestion","This class defines AST node menus for breakpoints"
"OCTempVariable","I model temp variables. With Closures, there are two kinds: Copying and those that are stores in a so called temp vector, a heap allocated array that itself is stored in an un-named copying temp variable."
"OSWindowAthensRenderer","I am an abstract Athens renderer. "
"DAMessageSendDependency","I represent a potential Dependency on a Package because it implements a method called by the package under analysis but the method is not implemented in the package, neither in the static dependencies of this package (inheritence, reference, trait, extension)."
"BalloonEngine","BalloonEngine is the representative for the Balloon engine inside Squeak. For most purposes it should not be used directly but via BalloonCanvas since this ensures proper initialization and is polymorphic with other canvas uses."
"TxTextRenderer",""
"SystemVersionTest","I am an sunit test for SystemVersion.  Originally created to test SqueakMapSystemVersionFix change set.I have no test fixtures."
"MethodContextTest","I am an SUnit Test of MethodContext and its super type, ContextPart. See also BlockContextTest.See pages 430-437 of A. Goldberg and D. Robson's  Smalltalk-80 The Language (aka the purple book), which deal with Contexts. My fixtures are from their example. (The Squeak byte codes are not quite the same as Smalltalk-80.)My fixtures are:aReceiver         - just some arbitrary object, ""Rectangle origin: 100@100 corner: 200@200""aSender           - just some arbitrary object, thisContextaCompiledMethod - just some arbitrary method, ""Rectangle rightCenter"".aMethodContext   - just some arbitray context ...  "
"MCPoolImportDefinition","A MCPoolImportDefinition represents a pool definition."
"AlphaBlendingCanvas","see ColorMappingCanvas comment."
"MorphLostFocus","I'm an announcement raised when a morph losts keyboard focus."
"MCChangeSelector","Monticello selector for changes"
"MyResumableTestError","A resumable error for tests"
"NNavDirectionChild","I'm the one who knowshow to navigate inside the child nodes"
"OSTouchDoubleTapEvent","I am the abstract class for all double tap gestures"
"GLMMemoryLogger","This class stores the announcements raised by the Glamour model in an ordered collection.The collection can later be used for debugging."
"RBRemoveClassTest",""
"ConfigurationOf","You must use a *configuration* when your project is stored in arepository using `.mcz` files.If you are using a source code manager (SCM) like [git][1] and havecreated a *baseline* (see the [**BaselineOf** class comment][3] for more info)you may use a *configuration* to associate a specificgit commit (SHA, branch name, tag name) with a [Metacello version][2].To create a new Metacello configuration:1. Create a subclass of the **ConfigurationOf** class. The configuration   class for your project should be names by appending the name of   your project to the string `ConfigurationOf`. The name of the   category and package should be the same as the name of the class:    ```Smalltalk    ConfigurationOf subclass: #ConfigurationOfExample      instanceVariableNames: ''      classVariableNames: ''      poolDictionaries: ''      category: 'ConfigurationOfExample'    ```2. Create a **baselineXXXX:** method where you specify the structure of your project:    ```Smalltalk    baseline0100: spec      <baseline: '1.0-baseline'>      spec for: #common do: [        spec repository: 'http://ss3.gemstone.com/ss/Example'.        spec          package: 'Example-Core';          package: 'Example-Tests' with: [            spec requires: 'Example-Core' ]].    ```3. Create a **versionXXXX:** method where you specify the specific   versions of the packages to be loaded for this version:    ```Smalltalk    version01000: spec      <version: '1.0' imports: #('1.0-baseline')>      spec for: #common do: [        spec blessing: #release.        spec          package: 'Example-Core' with: 'Example-Core';          package: 'Example-Tests' with: 'Example-Tests' ].    ```4. Create a Monticello package for your **ConfigurationOf** class and save it in the repository where your packages are stored. [1]: http://git-scm.com/[2]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md#metacello-version-numbers[3]: https://github.com/dalehenrich/metacello-work/blob/master/repository/Metacello-Base.package/BaselineOf.class/README.md"
"MCFileTreeJsonParser","JSON parser"
"RegisterableTranslatorMock","I'm a mock object to mock a translator"
"KMDispatchChainTest",""
"GlobalVariableTest",""
"InsetBorder","see BorderedMorph"
"SimpleTestResourceA2","I'm a simple test ressource for test purposes"
"SDL2TouchGestureExample","You can move the circle by scrolling and change his size by pinching"
"ReadStream","I represent an accessor for a sequence of objects that can only read objects from the sequence."
"IRPushLiteralVariable","push literal variable"
"OSJoyButtonUpEvent","This event is delivered when user releases a previously pressed joystick button."
"MCPseudoFileStream","A pseudo file stream which can be used for updates."
"AthensCanvasWrapper","I am a wrapper for a (Form-)Canvas that implements the Canvas API on top of an AthensCanvas."
"GTSpotterExceptionMock5Filter",""
"DashedBorder","Border style supporting dashed lines of configurable patterns and colours."
"TxBlockCursor","Most of this object is currently just copied from TxCaretCursor. Possibly it would be better to have one Cursor class with a pluggable drawing strategy..."
"RubFindReplaceDialogWindow","I am the window to find and replace text in a text area"
"SimulateMouseSpecification",""
"NECDetailMorph","I display some detail information for a selected ECEntry in the ECMenuMorph.The content I show, is provided by an ECDetailContentProvider subclass. "
"InteractiveResolverTest","SUnit tests for InteractiveResolver"
"FLUserGuidesTest","SUnit tests to guide users with fuel serialization"
"GLMActionBrickPopupThemer",""
"FontFamilyAbstract","Abstract font family"
"ZnFastLineReaderTests",""
"OSTouchThreeFingersScrollDetector","I am detecting the scrolls made with three fingers.I send these event back to my handler: 	- OSTouchThreeFingersScrollBeginEvent 	- OSTouchThreeFingersScrollMoveEvent 	- OSTouchThreeFingersScrollEndEvent "
"GTEventInitializationError","I represent an error because of unitialized object.Collaborators: GTEventUnpacking"
"RBSwapMethodRefactoring","Move a method from the class to the instance side, or vice versa. Normally this is not considered to be a refactoring."
"TestSharedPool","I am a shared pool used for testing."
"RxsContextCondition","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--One of a few special nodes more often representing special state of the match rather than a predicate on a character.  The ugly exception is the #any condition which *is* a predicate on a character.Instance variables:	kind		<Selector>"
"ZipFileConstants","This class defines magic numbers taken from the PKWARE ZIP Application Note [1] approved by ISO/IEC JTC 1/SC 34 N 1621 in July 2011 [2] to be the international normative reference for the zip file format.  A class imports these bindings as 'class variables' by including the following in its class definition:     poolDictionaries: 'ZipFileConstants' There is a single method on the class side to initialise the values. [1] http://www.pkware.com/documents/casestudies/APPNOTE.TXT[2] http://www.itscj.ipsj.or.jp/sc34/open/1621.pdfFollowing are pertinent extracts from the PKWARE ZIP Application Note.... All values are stored in little-endian byte order unless otherwise specified. A. local file header signature     4 bytes  (0x04034b50) C. Data descriptor:            crc-32                          4 bytes            compressed size                 4 bytes            uncompressed size               4 bytes F. central file header signature   4 bytes  (0x02014b50) I. end of central dir signature    4 bytes  (0x06054b50) J.  Explanation of fields:      * version made by (2 bytes)             0 - MS-DOS and OS/2 (FAT / VFAT / FAT32 file systems)             3 - UNIX             1,2,4-20 not implemented      * compression method: (2 bytes)             0 - The file is stored (no compression)             6 - The file is Imploded             8 - The file is Deflated             1-7,9-19,97,98 not implemented       * For Methods 8 and 9 - Deflating             Bit 2  Bit 1               0      0    Normal (-en) compression option was used.              0      1    Maximum (-exx/-ex) compression option was used.               1      0    Fast (-ef) compression option was used.              1      1    Super Fast (-es) compression option was used.                                       * internal file attributes: (2 bytes)             Bits 1 and 2 are reserved for use by PKWARE. The lowest bit of this field indicates, if set, that the file is apparently an ASCII or text file.  If not set, that the file apparently contains binary data. Note the following do not appear in the PKWARE ZIP Application Note.   Should they be defined elsewhere? ""Unix permission bits"" DefaultDirectoryPermissions    := 8r040755. DefaultFilePermissions        := 8r0100666. DirectoryAttrib         := 8r040000. FileAttrib             := 8r0100000. "
"ManifestRPackageCore","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"RBUnaryAccessingMethodWithoutReturnRule","Checks for any unary ""accessing"" methods without explicit return statements."
"ConfigurationOfVersionner","Configuration class for Versionner."
"GoferVersionReference","A GoferVersionReference refers to a specific version of a Monticello package."
"TopRightGripMorph","I am the handle in the right top of windows used for resizing them."
"EyePointerExplorer","A variant on the TreeInspector that works ""backwards"".By default it shows both weak and strong references (#openOn:) but I can be configured to omit weak refs with #openStrongOn:Like the TreeInspector, it shows a tree of objects, but expanding a node won't show the objects which that node references, but rather the objects that reference that node.  Its main use is to track down memory leaks: if you want to know why a particular object is still alive, open a PointerExplorer on it and drill down until you find the root object that's referencing it.  For example, find all the references to the symbol #zot with:EyePointerExplorer openOn: #zotFor the ""name"" of the object, the PointerExplorer shows each object's identityHash, to allow the user to identify when two similar objects are identical and notice cycles."
"SelectionValueHolder","I am especially designed to contain a list selection (an index + an object)"
"CriticBrowser","I display code critics, the results obtained when running a lint rule.Example: | rule env |rule :=  RBExcessiveArgumentsRule new.env := (RBPackageEnvironment packageName: 'Manifest-Core').(CriticBrowser openOnRule: rule onEnvironment: env)."
"GLMMorphicAction","A GLMMorphicAction is special GLMAction that is only active when rendering Glamour browsers with Morphic."
"AthensSurfaceExamples","AthensCairoSurfaceExamples example1.AthensCairoSurfaceExamples example2.AthensBalloonSurfaceExamples example6."
"Random","This Random Number Generator graciously contributed by David N. Smith.  It is an adaptation of the Park-Miller RNG [1] which uses Floats to avoid the need for LargeInteger arithmetic.If you just want a quick random integer, use:		10 atRandomEvery integer interval can give a random number:		(6 to: 12) atRandomSequenceableCollections can give randomly selected elements:		'pick one of these letters randomly' atRandomSequenceableCollections also respond to shuffled, as in:		($A to: $Z) shuffledThe correct way to use class Random is to store one in an instance or class variable:		myGenerator := Random new.Then use it every time you need another number between 0.0 and 1.0 (excluding)		myGenerator nextYou can also generate a positive integer		myGenerator nextInt: 10		[1] 'Random Number Generators:  Good Ones Are Hard to Find' by Stephen K. Park and Keith W. Miller (Comm. Asso. Comp. Mach., 31(10):1192--1201, 1988). http://www.firstpr.com.au/dsp/rand31/p1192-park.pdf"
"GLMHorizontalBandBrick","A GLMHorizontalBandBrick is a simple Brick with width that shrinks to wrap  subbricks.Usually used within horizontal scroll panes"
"OCRequestorScope","A special scope for tools: variables in the worspace have their own scope, for example"
"ConfigurationOfGTInspectorCore","Core configuration of GTInspector for integrating with Pharo.self loadDevelopment"
"SlotClassBuilderTest",""
"GLMPagerButtonDeselected",""
"KMLog","I am a simple log utility that can be enabled by sending the #setDebug and disabled by using #removeDebug. I trace the keymapping events."
"RBBasicLintRule","I am a rule that has a result. It is not clear why it is not merged with its superclass but this is ok too."
"SpecWindow","I am a window used by WindowSpec.I have been introduced since it's currently the best solution to prevent to add dozen of respondsTo: in StandardWindow or add dirty extensions to Object (because all models are not subclasses of Model)"
"EyeBagInspector","Specialized version of inspector showing occurrences of items of the bag"
"RBParseTreeSearcher","ParseTreeSearcher walks over a normal source code parse tree using the visitor pattern, and then matches these nodes against the meta-nodes using the match:inContext: methods defined for the meta-nodes.Instance Variables:	answer	<Object>	the ""answer"" that is propagated between matches	argumentSearches	<Collection of: (Association key: RBProgramNode value: BlockClosure)>	argument searches (search for the BRProgramNode and perform the BlockClosure when its found)	context	<RBSmallDictionary>	a dictionary that contains what each meta-node matches against. This could be a normal Dictionary that is created for each search, but is created once and reused (efficiency).	messages	<Collection>	the sent messages in our searches	searches	<Collection of: (Association key: RBProgramNode value: BlockClosure)>	non-argument searches (search for the BRProgramNode and perform the BlockClosure when its found)"
"ExecutionDisplayPlugin","I'm a Demo that show the usage of Metalink. When I'm installed in Nautilus I glow red whenever the selected method is being executed anywhere in the system "
"SimpleTextGlyphInfo","Simple glyph infos"
"HashedCollection","I am an abstract collection of objects that implement hash and equality in a consitent way. This means that whenever two objects are equal, their hashes have to be equal too. If two objects are equal then I can only store one of them. Hashes are expected to be integers (preferably SmallIntegers). I also expect that the objects contained by me do not change their hashes. If that happens, hash invariants have to be re-established, which can be done by #rehash.Since I'm abstract, no instances of me should exist. My subclasses should implement #scanFor:, #fixCollisionsFrom: and #noCheckNoGrowFillFrom:.Instance Variables	array:		<ArrayedCollection> (typically Array or WeakArray)	tally:		<Integer> (non-negative)array	- An array whose size is a prime number, it's non-nil elements are the elements of the collection, and whose nil elements are empty slots. There is always at least one nil. In fact I try to keep my ""load"" at 75% or less so that hashing will work well.tally	- The number of elements in the collection. The array size is always greater than this.Implementation details:I implement a hash table which uses open addressing with linear probing as the method of collision resolution. Searching for an element or a free slot for an element is done by #scanFor: which should return the index of the slot in array corresponding to it's argument. When an element is removed #fixCollisionsFrom: should rehash all elements in array between the original index of the removed element, wrapping around after the last slot until reaching an empty slot. My maximum load factor (75%) is hardcoded in #atNewIndex:put:, so it can only be changed by overriding that method. When my load factor reaches this limit I replace my array with a larger one (see #grow) ensuring that my load factor will be less than or equal to 50%. The new array is filled by #noCheckNoGrowFillFrom: which should use #scanForEmptySlotFor: instead of #scanFor: for better performance. I do not shrink."
"ZnFileSystemUtils","I am ZnFileSystemUtils.I help is abstracting over API differences pre and post the introduction of FileSystem in Pharo 2.0Part of Zinc HTTP Components."
"FLGlobalTraitSerializationTest","I test the serialization of traits as *external* objects, i.e. the traits has to be present in the image at materialization time."
"MorphHandlingMiddleButton","I log when the middle mouse button has been clicked on me, which is useful for testing."
"RunToSelectionDebugAction","A RunToSelectionDebugAction resumes the execution until the selected position in the source code is reached."
"RBPrecedenceRule","Checks for mathematical expressions that might be evaluated different (from left-to-right) than the developer thinks."
"AthensBalloonEngine","- balloon engine using only first 4 variables of receiver instance: - work buffer - span - bitBlt (Bitblt object) - forms"
"HDChangeReport","A change report"
"RBCompositeRefactoryChange",""
"STCommandLineHandler","Usage: st [--help] [ --quit ] <FILE>	--help    list this help message	--quit    if specified, the image exits without saving after evaluating FILE	--save    if specified, save the image after evaluating FILE	<FILE>    a file containing valid Pharo expressionsDocumentation:The ST command line handler runs Pharo code stored in a file without quiting.Example:	pharo Pharo.image st code.st		# By default files ending in .st are recognized and evaluated	pharo Pharo.image code.st"
"CornerGripMorph","I am the superclass of a hierarchy of morph specialized in allowing the user to resize windows."
"ScrollSyncExample","I am an example that exposes to the world how to use a ScrollPane announcement to have a nice morph being in sync with the current vertical scrollbar position.Invoke me with:	ScrollSyncExample new openWithSpec"
"LegacyWeakSubscription","I am a subclass which work when VM does not supports finalization lists.I am about 3 times slower when it comes to finalizing items"
"StepMessage","I'm a MorphicAlarm to be queued in WorldState list of stepping actions. I hold the stepTime (refresh period) of my receiver / Morph (if nil, the #stepTime value of my receiver is used).See - WordState>>runLocalStepMethodsIn:   (where the stepping actions are sent).- WorldState>>startStepping:at:selector:arguments:stepTime:  (to queue a new StepMessage)Example:MorphicUIManager currentWorld        startStepping: (Morph new openInWorld)        at: Time millisecondClockValue        selector: #toggleVisible        arguments: nil        stepTime: 500."
"ClassAPIHelpBuilderTest","SUnit tests for ClassAPIHelpBuilder"
"ManifestCollectionsUnordered","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"LinkedList","I am a sequential collection where adjecent objects are linked.Description-------------------I can store any kind of objects that I will wrap into a Link (See implementation points).I act pretty much as an OrderedCollection, but my access times differs: the method #atIndex: is depending of the number of elements so is not constant. In the worse case, the whole list must be crossed.Using the message #addFirst: / #removeLast causes the receiver to behave as a stack; using #addLast: / #removeFirst causes the receiver to behave as a queue.I use the Link class (or his subclasses) in my implementation. Public API and Key Messages-------------------- #new / #withAll: aCollection / #with: anObject 	are common constructors- #add: anObject / #at: anIndex put: anObject 	allow to add new elements to myself.- #remove: anObject 	allow to remove an element.	- #do: aBlock / #collect: aBlock / #select: aBlock / #reject: aBlock 	are common iterators.Example ------------------- 	""There is many ways to create a LinkedList, here are some:""	linkedList := LinkedList new.	linkedList		add: 'one';		add: 'two';		addFirst: 'zero';		addLast: 'three'.	linkedList.		""returns: a LinkedList('zero' 'one' 'two' 'three')""	""or""	linkedList := LinkedList with: 'one' with: 'two' with: 'three'.	linkedList.		""returns: a LinkedList('one' 'two' 'three')""	""or from an other collection (here an Array)""	linkedList := LinkedList withAll: #('one' 'two' 'three').	linkedList.		""returns: a LinkedList('one' 'two' 'three')""	""Some manipulations""	linkedList := LinkedList new.	linkedList		add: 1;		add: 2.	linkedList.		""returns: a LinkedList(1 2)""	linkedList remove: 1.	linkedList.		""returns: a LinkedList(2)""	""A last one""	linkedList := LinkedList with: $b with: $c with: $a.	linkedList sort: [ :first :second | first < second ].			""returns: a LinkedList($a $b $c)""	linkedList collect: [ :element | element asUppercase ].	""returns:  a LinkedList($A $B $C)""	linkedList select: [ :element | element >= $b ].			""returns:  a LinkedList($b $c)""	linkedList do: [ :element | element inspect ].	linkedList asArray									""returns: #($a $b $c)""			Internal Representation and Key Implementation Points.-------------------    Instance Variables	firstLink:		 <Link> 	A link that contains the first value of the LinkedList.	lastLink:		 <Link> 	A link that contains the last value of the LinkedList.If you attempt to add any object into a LinkedList that is not a Link, it will automatically be wrapped by a ValueLink."
"PackageTreeGroupSelection","I'm a group selection for group."
"OpalCompilerTests",""
"SpecDebuggerTest","SUnit tests for SpecDebugger"
"GLMFallbackScrollListBrick","Use me in case something went wrong on production"
"SplitJoinTest","""Evaluate me to view the SplitJoin documentation:""self showDocumentation""CHANGES LOG:- merged implementations by Keith Hodges (Join) and Damiena Pollet  and Oscar Nierstrasz (RubyShards) into SplitJoin package- moved all extension methods to *splitjoin method category- merged all tests into SplitJoinTest- fixed protocol in SequenceableCollection to splitOn: and joinUsing:  and split: join: for splitters and joiners- added Object>>joinTo: aStream and SequenceableCollection>>joinTo: aStream  to support joining of either sequences or sequences of sequences- prepared some documentation- added systematic tests for all split/join cases- added Object>>join:- prepared split/join tests for all 16 cases- prepares split+join tests for 4 standard cases- reviewed/merged old tests- changed splitjoin tests to use different joiner- added separate test for split+join=id cases- adapted documentation -- join result type is type of joiner or array or string- fix split tests to check result asOrderedCollection- added split tests for OrderedCollection and SortedCollection- new join: method for OrderedCollection and SortedCollection  (uses appendTo: in Object and SequenceableCollection)- reviewed all split: implementations -- removed unnecessary helper methods- check boundary conditions -- split on empty sequence ..."""
"InlineTextDiffBuilder",""
"GLMMorphicRenderer","This is the class responsible for the binding to Morphic.| browser |browser := GLMTabulator new.browser column: #one; column: #two.browser transmit to: #one; andShow: [:a | a list.].browser transmit to: #two; from: #one; andShow: [ :a |	a text.].browser openOn: #(a b c d)"
"IconListModel","An IconListModel is a spec model for icon list"
"OSKeyUpEvent","This event is delivered when user releases previously pressed key"
"MetacelloCleanNotification",""
"HColorSelectorMorph","ColorComponentSelector showing a hue rainbow palette."
"TokenTreeFilter","I am a filter for a token.If a node item contains my token I accept it"
"NautilusUITest","A NautilusUITest is a test class for testing the behavior of NautilusUI"
"FileListGridNode","A node in the file list grid"
"FT2Version","Do not rearrange these fields!This is used to report FT2 version information. Its fields must remain unchanged, or you must change FT2Plugin>>primitiveVersion."
"MorphSlot","An Example how Slots can be useful for Morphic.A Slot for a morph Ivar where the use case is to hold a reference to some morph, and changing that Ivar follows the pattern of:setIvar: aMorph	 ivar ifNotNil: [ ivar delete ].	 ivar := aMorph"
"OCScannerTest",""
"AssertionFailure","AsssertionFailure is the exception signaled from Object>>assert: when the assertion block evaluates to false."
"AthensPolygon","i am special kind of shape which using only straight line segments, unlike from more generic paths."
"MatrixTest","SUnit tests for matrix"
"RBExpandReferencedPoolsRefactoring",""
"RBCategoryEnvironment","I am a RBBrowserEnvironment on a set of category names.I containt all entities using this category name.I am more restricted to the exact category name comparedto a package environment.Example, all Morph subclasses in category Morphic-Base-Menus(RBBrowserEnvironment new forClasses: Morph withAllSubclasses) forCategories: {#'Morphic-Base-Menus'}"
"RBRefactoringFailure","This error is signalled whenever there is a non recoverable error during refactorings."
"ChangesBrowserTest","A ChangesBrowserTest is a test class for testing the behavior of ChangesBrowser"
"RBInstanceVariableCapitalizationRule","This smell arises when instance variable names (in instance and class side) do not start with an lowercase letter, which is a standard style in Smalltalk.Instance variable names on the instance- and class-side should start with a lowercase letter. A lowercase letter is used to represent variables with a local scope such as instance variables, temporary variables, method and block arguments. Uppercase is used to represent the case where the scope of a variable is either global (class name and global variables such Transcript) or shared mong different classes (class variables or pool variables)."
"ENUMLOGFONTEXA","#define LF_FULLFACESIZE 64typedef struct tagENUMLOGFONTEX {  LOGFONT  elfLogFont;  TCHAR  elfFullName[LF_FULLFACESIZE];  TCHAR  elfStyle[LF_FACESIZE];  TCHAR  elfScript[LF_FACESIZE];} ENUMLOGFONTEX, *LPENUMLOGFONTEX;"
"MessageSend","Instances of MessageSend encapsulate message sends to objects. Arguments can be either predefined or supplied when the message send is performed. Use #value to perform a message send with its predefined arguments and #valueWithArguments: if additonal arguments have to supplied.Structure: receiver		Object -- object receiving the message send selector		Symbol -- message selector arguments		Array -- bound arguments"
"ValueRemoved","A ValueRemoved  is an announcement raised when an item (or a collection of items) was removed from CollectionValueHolder."
"ZnPortNotANumber","ZnPortNotANumber is signalled when an URL is parsed containing an illegal port specification.Part of Zinc HTTP Components."
"LiteralVariable","I am abstract. Subclasses of me model meta objects for global variables (Class, Global, Pool), called ""Literal Variables"" in Smalltalk.I am just a subclass of Association, modeling the binding of the global in either the Smalltalk globals, Undeclared or classPools.When chaning emit* methods, do not forget to recompile exisiting code:aGlobal usingMethods do: #recompile ***NOTE***When moving binding from Undeclared, we change the class of that binding to either ClassVariable or GlobalVariable.==> when we use Global subclasses, we will either need to restrict adding variables or add a slow path where we create a new binding and update all users. But this can be done later."
"RBClassRefactoring",""
"MessageDialogWindow","Dialog window displaying a message with a single OK button. Escape/return will close. Icon is a themed information icon."
"GoferBrowseLocalChanges","Browse local changes"
"TextKern","A TextKern encodes a kerning change applicable over a given range of text.  Positive values of kern spread letters out, negative kern will cause them to overlap more.  Note that kerns other than 0 will display somewhat slower, as kerning is not yet supported in the text scanning primitive. "
"GTEventRecorderSettings","I represents Privacy settings. You can open Settings Browser and see Privacy group.Execute: SettingBrowser open"
"ManifestIssueTrackingTests","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"DAPackageCycleDetector","I'm able to detect all the cycles in a package dependency graph.Analysis is done in three steps: build the dependency graph, isolating the strongly connected components (SCC), and for each SCC detect all the elementary cycles.Use the message runAlgorithm to run the algorithm to retrieve the elementary cycles in the package dependency graph. At the end, all the cycles are in the collection ""cycles""."
"WeakMessageSend","Instances of WeakMessageSend encapsulate message sends to objects, like MessageSend. Unlike MessageSend it is not necessarily a valid mesage.  A request to value only results in a send if infact it is valid. See MessageSendComments also. WeakMessageSend is used primarily for event regristration. Unlike MessageSend WeakMessageSend stoes receiver (object receiving the message send) as a the first and only element of its array as opposed to a named ivar.But like MessageSend, it does have selector		Symbol -- message selector arguments		Array -- bound argumentsand it also has shouldBeNil		Boolean --  used to ensure array of arguments is not all nils"
"FLError","I represent an error produced during Fuel operation."
"LiteralVariableNode","I am a parse tree leaf representing a literal variable."
"MCSnapshotReader","I am an abstract class defining the interface for reading sources containing class and method definitions.I should define loadDefinitions as a subclassResponsibility, but don't.MCVersionReader could be a subclass of me for reading sources containing additional metadata, but isn't. I'm useless and can be safely removed. I'm only referenced in MCMczReader>>extractDefinitionsFrom: and it can be replaced by MCReader."
"VTermTestRunner","I am command line test runner. I run a TestSuite and outpout the progress in a terminal friendly way with XTerm characters."
"SpecWrapper","I am a small wrapper used to encapsulate data created and used during spec interpretation"
"FileDoesNotExistException","Notify when fie does not exist"
"RBDefineEntityComplianceCheckRule","The rule checks if the class rule in question specifies which entities it can check"
"UnreferencedSharedPool","Just a class for testing"
"IVsAndClassVarNamesConflictTest","SUnit tests to tests conflicts for instance variables and class variable names"
"OSTouchPinchEvent","Superclass of all pinches events"
"MCScanner","I scan / tokenize metadata  (package name, version info, ancestry, dependencies, ...) found in .mcz files.For example, try:MCScanner scan:  '(name ''MyPackage-ll.6'' message ''Fix bug xxx'' id ''b21dbd73-f1c3-2746-a3cc-92f1d4edea28'')' readStream"
"FFIConst",""
"SpecLayoutSend","A SpecLayoutSend is a spec layout action used when a selector is sent to the layout"
"MetacelloValueHolderSpecTestCase",""
"ZnMissingHost","ZnMissingHost is signalled when a host should be specified but was not.Part of Zinc HTTP Components. "
"MetacelloAddMemberSpec",""
"AthensCairoSDLSurface","I'm a cairo surface who renders directly to a SDL2 surface."
"GLMFinderTest",""
"InputEventHandler","An InputEventHandler is the abstract superclass for all input event handlers.Subclasses need to implement handleEvent:.Instance Variables	eventFetcher:		<InputEventFetcher>eventFetcher	- the event fetcher I'm registered with and receiving my events from."
"MailAddressTokenizer","Divides an address into tokens, as specified in RFC 822.  Used by MailAddressParser."
"FLSubstitutionCluster","I am a cluster for objects that have to be replaced in the object graph by another one (at serialization time).Examples of use:1) Suppose you want to substitute instances of WriteStream by nil. In such case, WriteStream has to implement this method:fuelAccept: aVisitor	^aVisitor visitSubstitution: self by: nil2) Suppose you want to substitute every integer in the graph by its string representation. In such case you should configure the analyzer through:anAnalyzer when: [:x | x isInteger] substituteBy: [:x | x printString].In this way, when you serialize #(1 2), you will then materialize #('1' '2')"
"MCFrontier","Utility class"
"GLMTransmissionContextTest",""
"KMSingleKeyCombination","I represent a single key press, the simplest key combination.I match with a keyboard event when that event key is the same as me and the key event is not modified.To create a single key combination use the #asShortcut message. Like for example:$a asShortcut"
"IRPushReceiver","I am modelling the push self bytecode"
"MetacelloPharoCommonPlatform","MetacelloPharoPlatform contains all Pharo specific code to load Metacello."
"IRPopIntoLiteralVariable","pop into literal variable"
"RubTextScrollPane","I am a text morph with a scrollbar "
"VSUnloadUnit",""
"MalGraphReducer","The reduced graph of G is the graph G where each strongly connected components was merged into one vertice / node.circuitsNodes instance variabel will collect all nodes created by merging nodes in a circuit."
"FFISelfArgument","I represent a ""self"" argument. This means a call on the form: #(void function ( self ) )To be able to pass an object as ""self "" it need to accomplish one of this conditions: - it has to be an object mappable to an atomic type (that means: a number, a char, a string, ...)- it class needs to have an instance variable 'handle', who will be taken as the real value to transmit (usually, this will be a en ExternalAddress)"
"AthensCCWArcSegment","i represent a circular arc, connecting  previous segment endpoint and my endpoingof given angle, passing in counter-clockwise direction."
"TxAthensLayoutView","I represent a view for a portion of text, laid out using the specified layout strategy.The view is defined using the following inputs:- position in the text- view extent (width and height)- surface, which will be used to render the view.I support rendering via #renderOn:, as well as translating between a view point and a text position (but only in the area of the view itself).The surface is responsible for providing the font renderer, which is used to measure text metrics and lay it out properly using the specified strategy, and keep synchronized with what the renderer produces on the surface.Please note, that the view's layout is computed only for the portion of text neccessary to display the area visible through the view (unless the text fully fits into it), which makes the view completely independent from the size of the text.The text layout needs to be adjusted/reset when:  - view's text position changes - view is scrolled up/down (which indirectly changes view's text position) - text is modified - layout strategy is changed - drawing surface is changed "
"EyeMethodEditor","A simple editor for complied methods."
"OSMouseMoveEvent","i am delivered when user moves a mouse"
"OSPlatform","An OSPlatform is an abstract representation of a 'OS platform'.Platforms can be hierarchical, e.g., a ""general"" platform as superclass and more specific platforms as subclasses as long as the subclasses provide sufficient means to identify themselves.The original implementation was for Tweak.Current		holds the current OSPlatform subclassArchitectural considerations:most platform specific methods that need to be added to the platform class should be in the form of extensions rather then adding them directly to this package. Otherwise the platform class will degenerate very quickly into a dependence hub for all kinds of sub systems."
"RelativePathStoredSetting","I am responsible for storing information about RelativePath objects."
"HelpTopicListItemWrapperTest","SUnit tests for class HelpTopicListItemWrapper"
"ZnMultiValueDictionaryTests",""
"RBReturnsIfTrueRule","Check for methods that return the value of an ifTrue: or ifFalse: message. These statements return nil when the block is not executed."
"StoredSettingsMergerTest","A StoredSettingsMergerTest is a test class for testing the behavior of StoredSettingsMerger"
"WikiStyleHelpBuilderTest","SUnit tests for class WikiStyleHelpBuilder"
"GLMPopper","This is a morph used for displaying various notifications.It has a special ability to delete itself either when Esc is pressed, or when the focus is lost.When opened the user has to spefify a text morph whose position and cursor are user to position this morph.When triggered from a context menu action the class method installAlarmFor: should be used to open the popper as the text morph gets back the focus after the action was executed (and, hence, the popper is closed)."
"ZnMonticelloServerDelegate","I am ZnMonticelloServerDelegate.I am a proof of concept implementation of a basic Monticello server.I function as a delegate for ZnServer.ZnServer startDefaultOn: 1701.ZnServer default delegate: ((ZnMonticelloServerDelegate new) 									directory: '/tmp/monticello'; 									yourself).Part of Zinc HTTP Components."
"DAMethodImplementationNode","I'm a tree node representing a method implementation"
"LargePositiveInteger","I represent positive integers of more than 30 bits (ie, >= 1073741824).  These values are beyond the range of SmallInteger, and are encoded here as an array of 8-bit digits.  Care must be taken, when new values are computed, that any result that COULD BE a SmallInteger IS a SmallInteger (see normalize).Note that the bit manipulation primitives, bitAnd:, bitShift:, etc., = and ~= run without failure (and therefore fast) if the value fits in 32 bits.  This is a great help to the simulator."
"MemoryFileSystemFile","I represent a memory file system entry for a regular file"
"RBAbstractInstanceVariableTest",""
"AnnouncementsAPIDocumentation","This is a custom help book providing the API documentation for the announcements framework."
"OSTouchTwoFingersRotationBeginEvent","Two fingers had began to rotate"
"PackageTreeSelection","I'm a base selection of an item from package tree. "
"Continuation","I permit to save the execution flow and to restart it later. I was originally used in seaside.Example :You have an object with the instance variable executionFlow.You save the current execution flow with :Continuation currentDo: [ :cc | executionFlow := cc]You restart the execution flow with :executionFlow value: true"
"RBSelectorEnvironment","I am a RBBrowserEnvironment for a set of selectors. Usually I am constructed as a result of a query on another environment:env referencesTo:#aselector -> a RBSelectorEnvironments."
"GTEventMultiBundle","I keep all GTEventBundle objects that should be delivered to the same remote server. That way, all data can be sent to the server at one HTTP request.By calling #entity, you receive ZnMultiPartFormDataEntity object that contains ZnMimePart objects in a sequence 'category', 'data', 'category', 'data', etc. Server is then responsible for spliting this object into the parts and store each data in to a right position (directory).For the Collaborators Part: - GTEventBundle: I keep collection of those objects and asks them for a ZnEntity object calling #entity.- GTEventMultiBundleFactory knows how to create instances.- GTEventDelivery knows how to send my #entity to a server.Internal Representation and Key Implementation Points.    Instance Variables	bundles:		<Collection>	url:			<ZnUrl>"
"ZdcSocketStream","I am ZdcSocketStream.I am a ZdcOptimizedSocketStream.I further optimize my superclass' methods dealing with bulk input and outputto transparently bypass the internal buffers when this makes sense."
"ProcessList","I am a VM Special class! Do not break me!I am a linked list that contains processes as Nodes. My implementation is tied to the VM: - every node I contain should have as first instance variable the next node in the list.My main user is ProcessScheduler, which contains an array with instances of myself. Each entry in that array a priority for processes. Processes are queues in each process list by the VM automatically."
"SugsAbstractContext","I'm the API used by smart suggestions with facilities to know the selected text, and having all the needed information for execute the commands."
"RBMethodHasNoTimeStampRule","For proper versioning, every method should have a timestamp."
"RGGlobalVariableDefinition","A global variable definition"
"MorphEventSubscription","I represent a subscription to an event.  I'm kind of an announcement, that's why I will be replaced by them soon :)"
"ReBasicTreeRule","I'm a basic root for all ast-based rules. My basicCheck: gets a method AST as the parameter"
"GlyphRenderer","Renderer for font glyphs"
"GTPlaygroundEditableTabLabel",""
"MorphicLabelAdapter","I am the adapter used to bridget a LabelModel and a LabelMorph"
"RBAddTraitChange",""
"RubCompositionScanner","I scan a paragraph"
"GlobalIdentifierPersistenceTest","A GlobalIdentifierPersistenceTest is a test class for testing the behavior of GlobalIdentifierPersistence"
"MCMethodDefinitionTest",""
"RBAddClassTest",""
"ManifestSystemPlatforms","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"CoverageDemo","I'm an example of how metalinks can be used to show the coverage of an execution.self new openWithSpec"
"GIFReadWriter","Copyright (c) Kazuki Yasumatsu, 1995. All rights reserved.Used with permission.  Modified for use in Squeak."
"SugsRenameClass","I know how to rename a class"
"MultiByteBinaryOrTextStream","It is similar to MultiByteFileStream, but works on in memory stream."
"OSSDL2WindowHandle","i am the OSWindowHandle interface implemented using SDL2 librarymy handle is an SDL_Window"
"RBCategoryRegexRefactoring",""
"PluggableDictionaryTest","SUnit tests for pluggable dictionaries"
"VSOpenRepositoryCommand","Open an inspector on the remote repository."
"InputEventFetcher","EventFetcher is responsible for fetching the raw VM events and forward them to the registered event handlers. Event fetching is done in a high priority process, so even with other processes (e.g. the Morphic UI process) being busy events will still be fetched.Instance Variables	inputSemaphore:		<Semaphore>	eventHandlers		<OrderedCollection>	fetcherProcess		<Process>inputSemaphore	- a semaphore registered with the VM to signal availability of an event. Currently not supported on all platforms.eventHandlers	- registered event handlers. Event buffers are cloned before sent to each handler.fetcherProcess	- a process that fetches the events from the VM. Either polling (InputEventPollingFetcher) or waiting on the inputSemaphore.Event format:The current event format is very simple. Each event is recorded into an 8 element array. All events must provide some SmallInteger ID (the first field in the event buffer) and a time stamp (the second field in the event buffer), so that the difference between the time stamp of an event and the current time can be reported.Currently, the following events are defined:Null event=============The Null event is returned when the ST side asks for more events but no more events are available.Structure:[1]		- event type 0[2-8]	- unusedMouse event structure==========================Mouse events are generated when mouse input is detected.Structure:[1]	- event type 1[2]	- time stamp[3]	- mouse x position[4]	- mouse y position[5]	- button state; bitfield with the following entries:		1	-	yellow (e.g., right) button		2	-	blue (e.g., middle) button		4	-	red (e.g., left) button		[all other bits are currently undefined][6]	- modifier keys; bitfield with the following entries:		1	-	shift key		2	-	ctrl key		4	-	(Mac specific) option key		8	-	Cmd/Alt key		[all other bits are currently undefined][7]	- reserved.[8]	- reserved.Keyboard events====================Keyboard events are generated when keyboard input is detected.[1]	- event type 2[2]	- time stamp[3]	- character code		For now the character code is in Mac Roman encoding.[4]	- press state; integer with the following meaning		0	-	character		1	-	key press (down)		2	- 	key release (up)[5]	- modifier keys (same as in mouse events)[6]	- reserved.[7]	- reserved.[8]	- reserved."
"RubParagraph","I represent a paragraph of a text area"
"NautilusAnnotationDisplayer","Allow the annotation display in source code pane"
"SugsPushDownMethod","I know how to push down the method to my subclass"
"ZnUTFEncoder","I am ZnUTFEncoder. I am a ZnCharacterEncoder. My subclasses deal with the full range of Unicode character code points."
"ZnEncodedReadStream","I am ZnEncodedReadStream, an abstract support class for read streams on a binary encoded wrapped stream.Part of Zinc HTTP Components"
"RBPullUpMethodRefactoring",""
"Halt","Halt is provided to support Object>>halt."
"MCVersionInfo","Adds to the record of ancestry, other identifying details."
"SettingsStonReader","I am a reader of system settings from a file (stream). I know how to load the settings and I return those stored settings.Collaborators: SystemSettingsPersistencePublic API and Key Messages- stream:   - secureLoad - loadInternal Representation and Key Implementation Points.    Instance Variables	storedSettings:		<Array>	stream:				<ReadStream>"
"PotentialOutDatedDependencyWarning","Warning signaled when a dependency manually declared has no match in potential dependencies."
"ManifestManifestCore","I stores metadata on true and false positive critics. These meta data are used by the SmalllintManifestChecker and the critics Browser"
"GTEventUnpackingTest","A GTEventUnpackingTest is a test class for testing the behavior of GTEventUnpacking"
"GLMDiffPresentation","GLMDiffPresentation is meant to show the difference between two input text objects.The convention is that the transformed entity should provide a collection with two elements."
"RxsCharSet","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A character set corresponds to a [...] construct in the regular expression.Instance variables:	elements	<OrderedCollection> An element can be one of: RxsCharacter, RxsRange, or RxsPredicate.	negated		<Boolean>"
"ZnHttpRetrieveContents","I am ZnHttpRetrieveContents.I am a ZnUrlOperation.I implement the #retrieveContents URL operation for HTTP(S) urls.  'http://zn.stfx.eu/zn/numbers.txt' asZnUrl retrieveContents.Part of Zinc HTTP Components."
"CharacterBlock","I describe the location of one character displayed on the screen. My instances are used to return the results of methods:	Paragraph characterBlockAtPoint: aPoint and	Paragraph characterBlockForIndex: stringIndex.Any recomposition or movement of a Paragraph can make the information I store stale.text (Text): The text where my character is fromstringIndex (Integer): The index of my character in the text, starting from 1textLine (TextLine): The displayed line my character is onorigin (Point): The top-left corner of the area allocated for displaying my		character's glyph, in pixels, counting right then down from the		top-left corner of the text display area, and starting from 0@0corner (Point): The bottom-right corner of the area allocated for displaying my		character's glyph, in pixels, counting right then down from the		top-left corner of the text display area, and starting from 0@0"
"CatalogSettings","Settings for catalog"
"SlotEnvironmentTest",""
"SpecInterpreterTest","A SpecInterpreterTest is a test class for testing the behavior of SpecInterpreter"
"RPackageClassesSynchronisationTest","SUnit tests for RPackage classes synchronisation"
"BooleanSlotTest",""
"MetacelloConfigurationSpecGenerator",""
"ProtocolRemovalException","A ProtocolRemovalException is an error raised when someone try to remove a protocol that should not be removed"
"LayoutAbstractScope","Layout scopes reify how classes extend the layout of their superclass."
"MBDevCycleCommands","Common superclass for Versionner commands related to the development cycle"
"OverflowRowMorph","Instances of this class accept, via #baseMorph:, a morph that is expected to be row-like containing submorphs.Based on the receiver's layout, the base morphs that are able to fit within the receiver (subject to minExtents) are layed out along with, if necessary, a button to pop-up a column of any remaining, unfittable, base morphs.Handy for button bars etc.Example:(OverflowRowMorph new	baseMorph: (UITheme builder newRow: ((1 to: 6) collect: [:i | |label|		label := 'Button ', i asString.		(UITheme builder			newButtonFor: Transcript			getState: nil			action: #show:			arguments: {label}			getEnabled: nil			label: label			help: nil)			hResizing: #spaceFill]))) openInWindow			"
"RubMorphEdited","I am raised when a morph is edited"
"ZnStringEntity","I am ZnStringEntity, a concrete HTTP Entity based on a String.It is used to hold textual (non-binary) data.I am a ZnEntity.Optionally, an encoding is used to convert to and from bytes.The default encoding it UTF-8.Note that content length is the encoded byte count, not the number of characters in the string.Part of Zinc HTTP Components."
"ZdcSimpleSocketStreamTests","ZdcSimpleSocketStreamTests tests ZdcSimpleSocketStream"
"ConfigurationOfGTPlaygroundCore","Core configuration of GTPlayground for integrating with Pharo.self loadDevelopment"
"ManifestSystemCommandLine","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"KMRepository","I have a singleton instance which can be accessed by executing the following:""self default""I am currently a god object to be refactored =D."
"CairoBackendCache","I providing a simple [weak]key->value storage used to cache various objects used by Athens for Cairo backend, like fonts/forms etc.The cache is global (there's only a single instance of me used at a time) andcache is visible globally by all entities of Cairo backend.The cached objects is held weakly.The cache is flushed for a new image session."
"RubScrolledTextMorphThemer",""
"ContextTempEyeElement","I am an eye element for temporaries in context"
"AthensCompositePaint","i am used to convert CompositeFillStyle into paint, used in Morphic."
"GTSpotterCandidatesListTest",""
"DomainError","I am DomainError, an ArithmeticException indicating that some argument falls outside an expected domain, [from, to]When my valid interval is left- or right-open, use signal: creation protocol to provide a custom messageText rather than the default [from, to] notation."
"MailAddressParserTest","This is the unit test for the class MailAddressParser. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"GroupboxMorph","Groupbox with title with a vertical layout. Appears in a lighter colour than the owner's pane colour."
"FFICalloutObjectForTest",""
"PluggableMultiColumnListMorph","This morph can be used to show a list having multiple columns,  The columns are self width sized to make the largest entry in each list fit.  In some cases the pane may then be too narrow.Use it like a regular PluggableListMorph except pass in an array of lists instead of a single list.There are base assumptions made here that each list in the array of lists is the same size.Also, the highlight color for the selection is easy to modify in the #highlightSelection method.  I used bluewhen testing just to see it work."
"RegexAPIDocumentation","This is a custom help book providing the API documentation for the regular expression framework."
"Tab","I represent a simple tabI have a IconicListItem which wrap my label and my icon.I also have a morph to display when selected.This morph can in fact be anything responding to #asMorph. Moreover it could be a block for lazy initialization.I also have a state representing if I am selecting or not, enabled or not, etc"
"MenuModelTest",""
"GLMPagerScrollPositionChanged",""
"MCPackageLoader","A MCPackageLoader is responsible for loading packages.  It gets used by VersionLoader, so it is eventually responsible for loading everything.Instance Variables	additions:		<Definitions>  Definitions that need to be added	errorDefinitions:		<Object>	obsoletions:		<Object>	provisions:		<Object>	removals:		<Object>	requirements:		<Object>	unloadableDefinitions:		<Object>	methodAdditions  <MethodAdditions> MethodDefinitions corresponding to the Definitions in ""additions"" that have been added so far."
"RectangleTest",""
"GTSpotterRevealHints",""
"SpecWrapperTableLayout","A SpecWrapperTableLayout is a variant of SpecTableLayout that is a  wrapper around a single element.It is used to set hResizing, vResizing, and/or some other properties affecting layout."
"MetacelloBaseConfiguration","You should be using ConfigurationOf instead of MetacelloBaseConfiguration. The class is being kept around because many extant Metacello configurations use MetacelloBaseConfiguration as a sentinel class to indicate whether or not Metacello is loaded..Once the Metacello scripting API becomes prevalent (the api has it's own ensureMetacello logic) this class can be removed."
"GLMTransmissionTest",""
"VersionnerReleasePanel","Window used to release a version.You can specify the version number and ask for symbolic versions resolution.self new openDialogWithSpec"
"PragmaMenuBuilder","For the impatients, see MenuRegistrationExample class methods and try it with:---------------((PragmaMenuBuilder pragmaKeyword: MenuRegistrationExample pragmaKeyword model: nil) menuEntitled: 'World') popUpInWorld---------------PragmaMenuBuilder is for the dynamic building of menus based on pragmas. A PragmaMenuBuilder instance is the root of a tree of MenuRegistration instances.The basic principle is that each menu sub-tree is specified by a method which is tagged by a specific pragma. Such methods are dynamically retrieved and then evaluated with a MenuRegistration passed as argument (see #retrieveRegistrations). The result is a tree of MenuRegistration which roots are stored in my itemList inst. var.After the tree of MenuRegistration has been built, it is re-organized (re-organization is based on the parent declaration) and is re-ordered (based on the MenuRegistration order indications). Then the tree of MenuRegistration can serve as input for the building of a PluggableMenuSpec. The PluggableMenuSpec is itself used in order to build a MenuMorph with the help of the current ToolBuilder. (see MenuRegistration comment for more informations about how to specify menu entries).The tree of MenuRegistration is built by #buildTree in three steps (1) the  collecting of the MenuRegistration instances (2) the re-organization and (3) the sorting:1) The first step consists in evaluating all pragma methods by passing a builder (a PragmaMenuBuilder instance) as argument. Each pragma method invocation build a sub-tree which root is added to the builder itemList collection. (see #collectRegistrations).As an example, this first step could produce a tree as follow (stored in a PragmaMenuBuilder itemList inst var) :				#Tools						#'Other tool', parentName: #Tools				/	\										|	(#Worspace)	(#browser)						(#'Test runner' )2) The second step consists is re-organizing the tree. A MenuRegistration can be declared with a particular parent name (by sending #parent: to it with a symbol as argument). If the parentName of a MenuRegistration X is the name of another MenuRegistration Z, then it means that X must be placed as a child of Z. This is the goal of this re-arrangement step which moves badly placed nodes at their good place. (see #arrangeRegistrations).With previous example, the second step produces:						#Tools												/		|			\	(#Worspace)	(#browser)		#'Other tool' , parentName: #Tools											|									(#'Test runner')2) The third step consists in sorting the tree according to the order inst. var. value of each MenuRegistration. This is done in two passes: the first pass tries to assign as much order inst. var. as possible (If an item is given with a specific order, then, previous and following items order can be automatically computed - see #assignOrderWithBlock: and #orderAssignBlock). The second pass consists in a smple sort according to a sort block given by #itemSortBlock.Instance Variables	model:		<Object>	pragmaCollector:		<PragmaCollection>	pragmaKeywords:		<Collection of Symbol>	currentRoot: 			<MenuRegistration>model	- Serves as the default target for the menu. Note that a default target can also be declared at menu item levelpragmaKeywords	- The list of pragma keywords used for the declaring of my menu itemspragmaCollector	- The PragmaCollector associated with this builder. When a method declared with the same pragma as my pragmaKeyword is updated/added/removed my menu items are recomputed so that the resulting menu is always in sync with currently declared items.	currentRoot	- the current MenuRegistration in which new items are to be added"
"TxTextCursor","I am just like a normal text position, but mutable."
"MorphicRadioButtonAdapter","I am the adapter used to link a RadioButtonModel with a CheckboxMorph (which can also act as a radio button)"
"FTTableContainerMorph","I am a Morph that contain visible rows in a FTTableMorph. Description ------------------I am the main Morph of the FastTable that is responsible of displaying all the rows of a Table. My owner need to be a FTTableMorph and I will use his dataSource to display the needed informations.Public API and Key Messages-----------------		- #updateAllRows - #updateExposedRows- #ipdateHeaderRow Internal Representation and Key Implementation Points.----------------    Instance Variables	exposedRows:		A dictionary of index/row with all the exposed rows.	headerRow:			When not nil contains the header row of the container.	needsRefreshExposedRows:		A boolean that is true if the container need a refresh. The method #drawOn: is responsible of my rendering."
"GLMBrickHeightTraverser",""
"TaskbarTask","Holds the state of a taskbar/tasklist entry."
"ReadWriteStream","I represent an accessor for a sequence of objects. My instances can both read and store objects."
"DAMessageSendNode","I'm a tree node representing a specific message send in the package under analysis."
"GoferRevert","Revert work"
"GTSUnitDebuggerJumpToTestAction","I implement a debugging action for selecting in the stack the context containing the test  method.  I am only valid if the context that triggered the failed assertion is diffferent than the context containing the test method (e.g., the assertion method was called from an utility method of the test)"
"PharoShortcuts","I am a class defining the current shortcuts of the system. My main purpose is to avoid the duplication of shortcut definition amongst basic tools and to allow to change the shortcuts from a single place.Users may query me to know the key combinations used to accept or cancel an action, browse or inspect an object.EXAMPLESPharoShortcuts current browseShortcut => Cmd-BATTENTION - I'm not still finished. My #current method returns always a new instance of myself instead of a configured one.NEXT Steps: Allow one to configure the shortcuts and to define several shortcut configurations via settings."
"OCCompilerASTPlugin","I am an abtract superclass for compiler plugings.The compiler consists of multiple passes:source 	- [ Scanner/Parser ]  -> AST 	- [ SemCheck ] -> AST   <<HERE>>	- [ ASTTranslator ] -> IR 	- [ IRBuilder ] -> CompiledMethodThese plugins are called <<HERE>>, that is, after semantic analysis before generating the IR.They are sorted by #priority and handed a *copy* of the AST."
"ComplexBorder","see BorderedMorph.poly := polygon250 baseColor := Color blue twiceLighter.border := (ComplexBorder framed: 10) baseColor: poly color.border frameRectangle: ((100@100 extent: 200@200) insetBy: -5) on: Display getCanvas.baseColor := Color red twiceLighter.border := (ComplexBorder framed: 10) baseColor: baseColor.border drawPolygon: {100@100. 300@100. 300@300. 100@300} on: Display getCanvas.border drawPolyPatchFrom: 100@200 via: 100@100 via: 200@100 to: 200@200 on: Display getCanvas.border drawPolyPatchFrom: 100@100 via: 200@100 via: 200@200 to: 100@200 on: Display getCanvas.border drawPolyPatchFrom: 200@100 via: 200@200 via: 100@200 to: 100@100 on: Display getCanvas.border drawPolyPatchFrom: 200@200 via: 100@200 via: 100@100 to: 200@100 on: Display getCanvas.border := (ComplexBorder raised: 10) baseColor: poly color.border drawPolygon: poly getVertices on: Display getCanvas360 / 16.0 22.5points := (0 to: 15) collect:[:i| (Point r: 100 degrees: i*22.5) + 200].Display getCanvas fillOval: (100@100 extent: 200@200) color: baseColor.border drawPolygon: points on: Display getCanvas.-1 to: points size + 1 do:[:i|	border drawPolyPatchFrom: (points atWrap: i) via: (points atWrap: i+1) via: (points atWrap: i+2) to: (points atWrap: i+3) on: Display getCanvas.].Display getCanvas fillOval: (100@100 extent: 200@200) color: baseColor.0 to: 36 do:[:i|	border drawLineFrom: (Point r: 100 degrees: i*10) + 200 to: (Point r: 100 degrees: i+1*10) + 200		on: Display getCanvas.].drawPolygon:Point r: 1.0 degrees: 10MessageTally spyOn:[Display deferUpdates: true.t1 := [1 to: 1000 do:[:i|	border drawLineFrom: (100@100) to: (300@100) on: Display getCanvas.	border drawLineFrom: (300@100) to: (300@300) on: Display getCanvas.	border drawLineFrom: (300@300) to: (100@300) on: Display getCanvas.	border drawLineFrom: (100@300) to: (100@100) on: Display getCanvas]] timeToRun.Display deferUpdates: false.].MessageTally spyOn:[Display deferUpdates: true.t2 := [1 to: 1000 do:[:i|	border drawLine2From: (100@100) to: (300@100) on: Display getCanvas.	border drawLine2From: (300@100) to: (300@300) on: Display getCanvas.	border drawLine2From: (300@300) to: (100@300) on: Display getCanvas.	border drawLine2From: (100@300) to: (100@100) on: Display getCanvas]] timeToRun.Display deferUpdates: false.]."
"KMNamedCharKeyCombination","Similar to KMUntypeableSingleKeyCombination I am used for special keys that don't only rely on their key character.The difference to KMUntypeableSingleKeyCombination is that I amtypeable but in shortcut descriptions I use a special name for my character. For example, a key combnation for the space key is a KMNamedCharKeyCombination and will be printed as""Shift + SPACE""rather than""Shift +  "" "
"Notification","A Notification is an indication that something interesting has occurred.  If it is not handled, it will pass by without effect."
"OSWindowGenericRendererExampleEventHandler","I am the event handler linked to the SDL2JoystickExample"
"TopLeftGripMorph","I am the handle in the left top of windows used for resizing them."
"LIFOQueue","This is a thread-safe LIFO (last-in-first-out) queue (also known as stack) implementation, based on atomic operations."
"CalendarMorph","A CalendarMorph is a standalone morph that represents a selectable monthly calendar.CalendarMorph openOn: Date todayInstance Variables	date:		<Date>	days:		<OrderedCollection of: <CalendarChooserDay>>	touchPoints:	<Dictionary key: <Rectangle> value: <Symbol>>date	- the currently selected date (always within the current month)days	- all the days that are visible, including days from the previous month, the current month, and the next monthtouchPoints	- extra hotspots that are touch-responsive (key rectangle is in world coordinates)"
"RGTraitDescriptionDefinition","RGTraitDescriptionDefinition is the common parent for traits and metatraits that know their users (ie. classes/metaclasses)"
"GTOpalScopeBrowser","This is a simple browser that displays the scopes that the Opal Semantic Analysis add to te rb tree and previews each node on the source code.Example:self openOn: (self>>#compose) ast "
"RBArchitectureLintRule","I represent an architectural rule.I work at the package level and check dependencies among packages."
"BracketSliderMorph","Abstract superclass for morphs that are used to select a component (R, G, B or A) of a colour."
"PragmaMenuAndShortcutRegistration","A PragmaMenuAndShortcutRegistration is the list items holder"
"CompiledMethodLayout","I am a special layout version for CompiledMethods. Unlike default Object layouts, CompiledMethods define a custom format integer since they mix bytes and pointer types.See CompiledMethod for more details."
"DateAndTimeDosEpochTest","SUnit test for dos epoch (see DateAndTime)"
"EyeInspectorToolBar","Toolbar to explore previous or next inpected elements"
"EyeDebuggerContextInspector","Specific context inspector for the bottom right of the debugger"
"RBUnoptimizedToDoRule","Checks for inefficient uses of to:do: that create an unnecessary Interval instance.( 1 to: 10 ) do: aBlockcan be more efficiently expressed as 1 to: 10 do: aBlock"
"RBToDoCollectRule","Checks for users of to:do: when the shorter collect: would work."
"VSCommitPackageAction","I'm a commit action to perform a package commit. "
"SettingTreeBuilder","A builder for the settings tree"
"SDL_Texture","I represent a handle of GL texture, coming from SDL2 library"
"BinaryFileStream","I am a concrete subclass of AbstractBinaryFileStream for normal files. Regardless the position of the file, I will make my operarions on my position and then return the file it's own position.In addition to my superclass' API I provide the following methods.stream upToEnd""reads the full stream up to the end and returns the contents"""
"GLMWindowRequest","I indicate to the renderer to execute a message on the window that rendered this presentation. It will only execute if the presentation is directly rendered in a window (i.e., if this is the presentation to which #openWith: was sent)"
"FLGZipStrategy","I am a strategy for using GZipStream."
"KomitSqueakSourceRemote","I encapsulate a repository stored on squeaksource"
"MethodMapExamples",""
"EyeEditor","I am an abstract view model for editors displayed in the inspector"
"ToggleMenuItemMorph","A menu item that supports on/off state (using standard icons), enablement and display of ""accelerator"" key text."
"DecompilerConstructor","I construct the node tree for a Decompiler."
"ScriptLoader","Pharo Process Description. This comment contains: 	- some points on infrastructure	- some scripts description 		- main behavior of the scriptLoader.	General points on infrastructure ---------------------------------------------------------------------------------------------------------------------------------An enhancement	- should be added to the bug tracker https://pharo.fogbugz.com	- announced to the mailing-list	- asked for feedback 	- results should be added to the BT entryFixedToInclude tag means ready for integration.FixToreview means that people should have a look and give feedback (often just need to FixToInclude)A bug detected and discussed via the mailing-list should be added to the bug tracker. When a fix is provided, it should be either posted on the bug tracker as a slice in the PharoInbox - (a slice is an emtpy package that has as requirement other package composing the fix).- Repositories---------------------For each Pharo version, we have three projects:	Pharo	PharoInbox	(PharoTreatedInbox - was used in Pharo20 and we hope to get it back)	A fix goes either from inbox to treatedInbox or to Pharo.If a fix does not work it is moved to the TreatedInbox.If a fix works it is integrated as follow - it will be moved from the Inbox to the TreatedInboxand integrated and published in the Pharo projectIt is now a bit old but to help browsing multiple repositories use the following expression: ScriptLoader new addExtraRepositories	self addRepository39ToAllPackages.	self addRepository310ToAllPackages.	self addRepositoryTaskForcesToAllPackages.	self addRepositorySqueakTrunkToAllPackages.	self addRepositoryMCToAllPackages.	self addRepositoryTreatedToAllPackages.System Scripts-------------------------Before starting and you need to download (only once) the pharo-updates folder from git hub:	git clone https://github.com/pharo-project/pharo-update.git	cd pharo-update	git checkout 40to work on the right branchTypically before any integration, execute the script prepare.sh ----------------------------------------------------------------------------#! /bin/bashversion=3.0working_dir=currentprevious_dir=previouszip_name=latest.zipif [ -e $zip_name ]; then        rm $zip_namefiwget --no-check-certificate http://files.pharo.org/image/30/$zip_namerm -Rf $previous_dirmv $working_dir $previous_dirunzip -d $working_dir $zip_name  mv $working_dir/Pharo*.image $working_dir/Pharo.imagemv $working_dir/Pharo*.changes $working_dir/Pharo.changescp PharoPass.txt $working_dir/PharoPass.txt./scripts/getupdateslist.shpharo $working_dir/Pharo.imagethe script getupdateslist.sh is defined as follows: ----------------------------------------------------------------------------#!/bin/bashflatten_version=30updates_dir=./pharo-updateworking_dir=currentcurrent_dir=`pwd`cd $updates_dirgit pullcd $current_dircp $updates_dir/updates$flatten_version.staged $working_dirLater when you will be done and you will kick the integration server you will need the following publish script.The publish.sh script is defined as follows:#! /bin/bashversion=3.0updates_dir=./pharo-updatecurrent_dir=currentprevious_dir=previouscp $current_dir/*.cs $updates_dircp $current_dir/*.staged $updates_dir./scripts/publish.sh4 Steps of the integration process------------------------------------------------------Precondition: you have run the ./prepare.sh scripts and before that one you should do a git clone of the pharo-update repository.The integration works in 4 main steps which can be steered by the following expressionScriptLoader releaseMenuor via the menu that can be shown/hidden using 	ScriptLoader showIntegrationMenu	ScriptLoader hideIntegrationMenu---------------------------------------------------------------------------------------------------------------------------------1.) 'Prepare new update' :  Start up a recent and clean image	ScriptLoader new prepareNewUpdate		This step will 		- load the latest updates				- load the latest version of the ScriptLoader package from the Pharo repository.		Indeed when we work on improving the ScriptLoader it may not be published in the update stream. 		New versions can be available on the server but not part of the latest updates.		Therefore the process always loads the latest version of scriptloader from the pharo repository.		This point is important because when an integration failed, you have to check and optionally 		remove the scriptloader package from the pharo repository or republished a previous version with a more recent 		number to override the last one.				- check that the update.list (which contains the cs to load the packages) is in sync		with the image current version. The update was done automatically by the prepare bash script (which pulls from git).				- snapshot the package version to detect dirty or changed but non dirty packages.2.) Apply changes	Once you are done and select the second menu item or  			ScriptLoader new doneApplyingChanges		This step will 		- create an update method with can trigger the load of the packages and some pre/post actions		- create a script method with describes all the package versions and it used by the update methods		- save all the packages that are different (except some filtered packages)			into a local folder named 'package-to-be-tested'.		ScriptLoader, SLICE*.... and a couple of other packages are not considered to be included in the script method			(check method packagesNotToSavePatternNames)		3.) Verify changes	==> in a ***new*** image (in the current folder) execute:	ScriptLoader new verifyNewUpdate	This step will 		- load in any order (so may break) the packages previously saved		in the 'package-to-be-tested' folder.		- this step is important because you may get simple changes with unexpected side effects and that 		may break the load.		4.) If there are problems go to 2.) to fix them, else you can commit the changes.	ScriptLoader new publishChanges	This step will		- generate a new cs file whose purpose is to load the given version of the scriptloader and trigger the 		correct update method.		- add the name of the cs file to the end of the updates.staged file local to the disc		- copy all the package from the local directory to the Pharo			At the current time (August 2013), you will get the contents of the mail that you can send to the list. 	Now you will have to wait before sending it because you need to kick in the ci integration process. 			Execute the publish.sh bash script to publish the cs and the staged file in git.		Then go to the https://ci.inria.fr/pharo/? page.	You will see that the ci will validate your integration automatically.		First it will load the code (strangely named: Step-1-Tracker) 		Second it will validate it: Step-2-Validation 		Third it will release it: Step-3-Release 		Fourth it will publish it: Step-4-Publish 		As a result the pharo-update and a new image will be published.	You can then send the mail of the new update.				5) in case of problems.If a problem arrives during the step 4, your update.staged file and your image may not in sync! Do not stress! Normally it should be easy to fix.		 If the ci integration failed previously: 		- 1. Load the previous version of the Scriptloader, modify it to get the package dirty and republish it. It will get a newer number and the setting up of the integration will load it instead of a version of ScriptLoader containing an integration that did not finish.		-2 just throw away your current directory. Do not worry about the fact that the changeset has been added to git. When you will integrate, the process will create a file with the same number and erase the committed one. Note that if you have to rollback the created image you have to access the file repository to remove the latest image.		The file server is available at		 files.pharo.org			Server:		193.51.235.3			Address:	193.51.235.3#53		It may be possible that you do not access and need to get your ssh files there first. Other notes.--------------------CurrentMajorVersionNumber should contains a string '1.0', '1.1'....This string will determine on which folder on the server the updates.list should be loaded.	i.e., updates/pharo1.0, updates/pharo1.1 ....--- Not to forget ---To change the release streamadd a new method for each releaseStream	ScriptLoader toPharoOne	ScriptLoader toPharoOneDotOne"
"CompilationContext","The compilationContext holds all information that is needed in the whole compiler chain."
"FFIExternalString","String type.Represented as char* on C side."
"ZnUnexpectedContentType","ZnUnexpectedContentType is signalled when a different content type (mime type) was expected.I hold the expected and actual content types.Part of Zinc HTTP Components. "
"ZnCodePointWriteStream","I am ZnCodePointWriteStream.I wrap another binary WriteStream and use a ZnCharacerEncoder to allow Integer code points to be written.Part of Zinc HTTP Components."
"LoadingThenOkState","I am an abstract class representing the state of the LoadingThenOk widgetthe different states are: ok, error, loading.I must define an image used to render the state"
"ClassParentRenamed","This announcement will be emitted when a class or a traits superclass is renamed.The class definition and structure may be unaffected if just the name of the superclass changes. But toolsshowing the class definition or package organizer depending on the changed class definition string/command and may need to be updated or track the changes."
"Array","Array is a fixed-sized collection of elements accessed by integer indices. Contrary to the C convention, the first element of a Smalltalk array is at position 1 and not 0. The main protocol to access array elements is the method at: and at:put:. - at: anInteger returns the element at index anInteger. - at: anInteger put: anObject puts anObject at index anInteger. Arrays are fixed-size collections therefore we cannot add or remove elements at the end of an array. The following code creates an array of size 5, puts values in the first 3 locations and returns the first element.[[[ | anArray |anArray := Array new: 5. anArray at: 1 put: 4. anArray at: 2 put: 3/2. anArray at: 3 put: 'ssss'. anArray at: 1			> 4]]]#() creates literal arrays with static (or “literal”) elements that have to be known when the expression is compiled, and not when it is executed. The following code creates an array of size 2 where the first element is the (literal) number 1 and the second the (literal) string 'here'.[[[  #(1 'here') size > 2]]]{ } is a way to create arrays in a more dynamic manner.[[[ | array |array := (Array new: 2). array	at: 1 put: (Point x: 10 y: 20);	at: 2 put: (Point x: 10 y: 20). 	array			]]]is equivalent to [[[{(10@20) . (10@20)}{Point x: 10 y: 20 . Point x: 10 y: 20}]]]"
"GLMPaneAnnouncement","These announcements are used by the browser to communicate with the renderer whenever the panes configuration is modified in some way.Instance Variables:	pane	<GLMPane>	browser	<GLMBrowser>	position	<Integer>"
"ZnRequest","I am ZnRequest, representing an HTTP Request, consisting of a request line, headers and an optional entity (body).I am a ZnMessage.I can be used for generating and parsing.Part of Zinc HTTP Components."
"MetacelloIgnorePackageLoaded",""
"MalCseEdge",""
"ZnServerTransactionEvent","ZnServerTransactionEvent is a ZnServerLogEvent that notes the completion of a server side HTTP transaction (request/response).Instance Variables	request: a ZnRequest	response:	a ZnResponse	timing: a ZnServerTransactionTimingNote that this can be quite large since it includes the entities transferred. See ZnSimplifiedServerTransactionEvent for a more compact representation."
"Rectangle","I represent a rectangular area of the screen. Arithmetic functions take points as arguments and carry out scaling and translating operations to create new instances of me. Rectangle functions create new instances by determining intersections of rectangles with rectangles.Note 1: only rectangles parallel to reference frame (Screen) can be represented by this class.Note 2: the Rectangle is represented by two extremities of one diagonal. By convention, it must be the diagonal:	from rectangle origin (the point having smallest coordinates in reference frame),	to rectangle corner (the point having largest coordinates in reference frame).Note 3: Screen coordinates conventions are:	x is horizontal axis, zero at left border, oriented toward right;	y is vertical axis, zero at top border, oriented toward bottom.This corresponds to the latin convention for writing text from left to right and top to bottom.Note 4: the Rectangle extent is obtained by subtracting rectangle origin to rectangle corner coordinates.If this leads to a negative width (extent x coordinate) and/or a negative height (extent y coordinate), then the Rectangle is degenerated and considered empty.Instance variables:	origin	<Point> the coordinates of corner having smallest coordinates (top left in Screen coordinates)	corner	<Point> the coordinates of corner having largest coordinates (bottom right in Screen coordinates)"
"MetacelloScriptGitBasedDownloadNotification",""
"DelayMicrosecondSchedulerTest",""
"MetacelloValidationWarning","MetacelloValidationWarning indicates that there is a logical inconsistency that is not likely to cause any functional problems"
"Stack","I implement a simple Stack. #push: adds a new object of any kind on top of the stack. #pop returns the first element and remove it from the stack. #top answer the first element of the stack without removing it."
"ManifestToolBase","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"AthensCairoPatternSurfacePaint","i represent texture/image/form/surface paints in cairo backend."
"DosTimestamp","DOS stores timestamps, in local time, as 32 bit integers with the following format:	32 bits (low to high):		Low 16 bits:			Bits 0-4: seconds / 2	 		Bits 5-10: minutes 0-59			Bits 11-15: hours 0-23		High 16 bits:			16-20: day of month 1-31	 		21-24: month 1-12			25-31: year offset from 1980 (e.g. 1981 -> 1)References (with visual aids): http://blogs.msdn.com/b/oldnewthing/archive/2003/09/05/54806.aspx & http://mindprod.com/jgloss/zip.html"
"InstVarRefLocatorTest","This is the unit test for the class InstVarRefLocator. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"KMNoKeymap","I am a Null object representing the absence of a Keymap."
"ExampleForTest112","An example class at level 3 (indirectly below Object) used for testing class hierarchy"
"DebuggerModelTest","SUnit tests for the debugger model"
"OCCompilerNotifyingTest","A CompilerNotifyingTest is a TestCase for checking that Compiler/Parser notifications are inserted at the right place in a TextEditor.Instance Variables	expectedErrorPositions:		<Array of: Integer>	expectedErrors:		<Array of: String>	failure:		<Object>	morph:		<TextMorph>	text:		<String>errorPositions	- the position where error text should be inserted for each chunk of text evaluatederrors	- the error text that should be inserted on evaluation of each chunk of text evaluatedfailure	- an object returned in case of evaluation error and whose identity can be uniquely recognized as a failure	morph	- the Morph holding the text	text	- the string containing all the chunks to be evaluated (separated by %)	  and the expected error messages (`enclosed in back quotes`)	  this text will be stripped of the error messages before being evaluated."
"ZnRequestLine","I am an HTTP Request Line.I consist of an HTTP method, an URI and an HTTP protocol version.I can be used for generating and parsing.Part of Zinc HTTP Components."
"FTExampleMethodListDataSource","I'm an example of fast table, who will use a list of methods as data source elements.self example1.self example2.self example3.self example4.self example5."
"RBSuperSendsNewRule","This rule checks for method that wrongly initialize an object twice. Contrary to other Smalltalk implementations Pharo automatically calls #initiailize on object creation.A warning is raised when the statement self new initialize is found in a method."
"RunArray","My instances provide space-efficient storage of data which tends to be constant over long runs of the possible indices. Essentially repeated values are stored singly and then associated with a ""run"" length that denotes the number of consecutive occurrences of the value.My two important variables are	runs	An array of how many elements are in each run	values	An array of what the value is over those elementsThe variables lastIndex, lastRun and lastOffset cache the last accessso that streaming through RunArrays is not an N-squared process.Many complexities of access can be bypassed by using the method	RunArray withStartStopAndValueDo:"
"ManifestFileSystemDisk","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"MetacelloProjectRegistrationVersionInfo",""
"ManifestFuel","Manifest for Fuel package"
"GTSpotterCurrentStepChanged",""
"ZnSecureServer","I am ZnSecureServer, an implementation of an HTTPS server.I am a ZnMultiThreadedServer(ZnSecureServer on: 1443)	certificate: '/home/sven/ssl/key-cert.pem';	logToTranscript;	start;	yourself.	Disclaimer: this is an experimental proof of concept."
"ZnClientTransactionEvent","ZnClientTransactionEvent is a ZnClientLogEvent that notes the completion of a client side HTTP transaction (request/response).Instance Variables	request: a ZnRequest	requestDuration:	 milliseconds	response:	a ZnResponse	responseDuration: milliseconds	Note that this can be quite large since it includes the entities transferred. See ZnSimplifiedClientTransactionEvent for a more compact representation."
"RubScrolledTextExtraSurface",""
"HelpIcons","This class is used to store help icons for the help browser. Typically one implements a method returning a 12x12 Form instance whichshould not be called directly.Since the class provides an internal icon cache (so the icons can be reused without creating too many new instances) the icons should be accessed using the #iconNamed: message with the method selector as argument.To create a form from an icon file stored on disk you can use the following code:   | image stream |	image := ColorForm fromFileNamed: '/path/to/icon.png'.	stream := WriteStream with: String new.	image storeOn: stream.	stream contents inspect."
"OSWindowMinimizedEvent","I am delivered when the window got minimized."
"RBParseTreeRewriterTest",""
"MCDictionaryRepositoryTest",""
"FLBadVersion","I represent an error produced during materialization when the serialized version doesn't match the materializer's version (accessible via FLMaterializer>>version). A version is encoded in 16 bits and is enconded heading the serialized stream, after the signature."
"MCScriptParser","A MCScriptParser identifies script and add MCScriptDefinition. "
"SelfEvaluatingObjectTest","SUnit tests for self evaluting objects "
"PragmaUpdated","A PragmaUpdated is announced by a PragamColllector when a method defined with an acceptable pragma according to the PragmaCollector filter is updated (recompiled).Instance Variables"
"ZnClientLogEvent","I am ZnClientLogEvent, a ZnLogEvent generated by ZnClient.I hold an optional clientId attribute."
"GTEventPackingTest","A GTEventPackingTest is a test class for testing the behavior of GTEventPacking"
"DropListMorph","Displays a selected item and a drop button. When pressed will popup a list to enable changing of the selection. Supports enablement."
"MCThreeWayMerger","A MCThreeWayMerger is more advanced merge operation.Operations are subclasses of MCPatchOperation:  addition (MCAddition), modification of an entity (MCModification ) and removal (MCRemoval)."
"SlotMigrationTest",""
"GLMMorphicPopupActionRenderer",""
"HDTestReport","Hudson report for test results"
"IRStoreInstVar","store inst var"
"SDL_JoyButtonEvent","SDL2 library structure representing a joystick button event data."
"ValueLink","A ValueLink is a Link containing a Value.Adding an object to a LinkedList which is not a Link will create a ValueLink containing that object.value - The object this link points to."
"OSWindowMaximizedEvent","I am delivered when the window got maximized."
"KomitStagingArea","I encapsulate the context just before a commit."
"ManifestTextScanning","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"BMPReadWriterTest",""
"QAViewedDiff","Announced when a user views a diff for a critic's autofix"
"BaselineOfQualityAssistant","I am a baseline of quality assistant. Read more at: https://github.com/Uko/QualityAssistant"
"MCPackage","MCPackage represents a package. It is merely a wrapper on top of a package set or packageInfo.Strangely enough it does not inherit from MCDefinition.Its most important method is snapshot which returns a snapshot with all the entities that should be saved. "
"MorphicTextAdapter","I am the adapter used to bridge a TextModel and a PluggableTextMorph"
"NOCController","I am the entrance door to the ocompletion algorithm. I can resolve the queried sequences and retrieve a list of answers according to ocompletion algorithm based on the last accepted sequences from the user."
"RenrakuTest",""
"FFIFunctionArgument","I'm an abstract class to implement the pushing strategy for method arguments. My children define different pushing strategies for the valid types or argument (usually an atomic type object, and external object or a ""self"" instruction)"
"GLMFastTableColumn","I'm a glamour column for fast tables."
"FLHookPrimitiveCluster","I am a cluster for simple objects who define serialization and materialization via hooks on their classes."
"NBExternalStructure","I'm a stub class intended just to easy migration from NB to UFFI. The corresponding class to replace me is: FFIExternalStructure.MIGRATION NOTES: Structures in UFFI are very different to NB ones, but not much changes should be necessary. One important change is the fact that accessors are not installed dynamically anymore, instead, we recommend you to execute ==MyStructure rebuildFieldAccessors== once to have access to fields. "
"GTIRBrowser","This is a simple browser that displays the Opal IR and previews each instructions on the source code.Example:self openOn: (self>>#compose) ast ir"
"EyeCompiledMethodInspector","Specialized version of inspector showing bytecodes symbolic representation, ast, ir, literals."
"AthensColorChange","A command to change the current font color"
"PackageRemotesManager","I am an user interface used to link mcpackages and remotesPackageRemotesManager new openWithSpec"
"HSVColorSelectorMorph","Colour selector featuring a saturation/volume area and a hue selection strip."
"NonBooleanReceiver","Some constructs are optimized in the compiler :#whileTrue:#whileFalse:#ifTrue:#ifFalse:#ifTrue:ifFalse:#ifFalse:ifTrue:So you cannot by default use them on non boolean objects.	If you really need to use optimized constructs, you can enable Opal compiler and do one of the following :		- recompile your method with the pragma : <compilerOptions: #(+ optIlineNone)>		- recompile your class with the method : MyClass class>>compiler 			^ super compiler options: #(+ optIlineNone)		- call from this method by Object>>#mustBeBooleanInMagic:"""
"ShortIntegerArray","ShortIntegerArray is an array for efficiently representing integers in the 16bit range."
"GTSpotterPreviewBrick",""
"DAPackageRelationGraphDiffTest",""
"MetacelloVersion",""
"MCFileTreeFileSystemUtils",""
"SDL_KeyDownEvent","SDL2 library structure"
"RBEqualNotUsedRule","Checks for senders of comparator messages that do not use the result of the comparison."
"MCRemovalPostscriptDefinition","A postscript evaluated after unloading/removing"
"SDL_Palette","SDL2 library structure"
"TextAlignmentTest","SUnit tests for class TextAlignment"
"RBPharoBootstrapRuleTest",""
"RubGetMenuPolicy","I am an abstract class to get the correct menu of a text area"
"GLMMorphicExpanderRenderer",""
"GLMDynamicPresentation","A GLMDynamicPresentation is a presentation that takes the actual presentation from the display value. Like this, we can have the block of display return a presentation depending on the input.A usage for this behavior is the Glamorous Editor, which takes the text as input and based on this it displays the browser."
"SDL_Keysym","SDL2 library structure"
"MailAddressParser","Parse mail addresses.  The basic syntax is:	addressList := MailAddressParser addressesIn: aStringThis currently only returns the bare addresses, but it could also return a list of the address ""source codes"".  For example, if you give it ""Joe <joe@foo>, <jane>"", it will currently return a list ('joe@foo' 'jane').  It would be nice to also get a list ('Joe <joe@foo>'  '<jane>')."
"RowLayout","A simple row layout."
"ParseNode","This superclass of most compiler/decompiler classes declares common class variables, default messages, and the code emitters for jumps. Some of the class variables are initialized here; the rest are initialized in class VariableNode."
"GLMRenderer","A GLMRenderer is the abstract class for the renderer hierarchy. This should be subclassed for each rendering platform (e.g. Morphic)"
"RBNotEnvironment","I am the complement of RBEnvironments, a logical NOT. That is: entity A is in this environment if it is in NOT in the environment I am constructed from.Do not construct instances of me directly, use method #not for an existing environment:env1 not -> a RBNotEnvironment."
"Bezier3Segment","This class represents a cubic bezier segment between two pointsInstance variables:	via1, via2	<Point>	The additional control points (OFF the curve)"
"GLMActionListPresentation","The goal of a GLMActionListPresentation is to group together and display a set of actions.  Actions should be added using the normal API from GLMPresentation.The rendred will decide the actual way in which the actions are displayed (usually using a set of buttons).For an example see GLMBasicExamples>>#simpleActionList"
"BalloonBuffer","BalloonBuffer is a repository for primitive data used by the BalloonEngine."
"ProvideAnswerNotification","Notify to provide an answer"
"AthensBalloonStrokePaint","i represent stroke paint for balloon backend"
"CharacterSet","A set of characters.  Lookups for inclusion are very fast."
"MorphicUIBugTest","A MorphicUIBugTest is a class for testing the shortcomings and repairs of the MorphicUI manager..Instance Variables	cases:		<aCollection>cases	- a list of morphs that may need to be deleted during teardown.	the tests are expected to fill this list it starts out empty by default.		"
"OCBytecodeGeneratorTest",""
"ChangeSet","ChangeSets keep track of the changes made to a system, so they can be written on a file as source code (a ""fileOut""). ---preamble and postscript:  two strings that serve as prefix (useful for documentation) and suffix (useful for doits) to the fileout of the changeSet.changeRecords -  Dictionary {class name -> a ClassChangeRecord}.These classChangeRecords (qv) remember all of the system changes."
"ManifestCollectionsNative","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"FLIgnoredVariablesTest","SUnit tests for serialization with ignored variables"
"FFICallbackFunctionResolution","I install callbacks as functions (to be used with ffiCall: later)I can register any callback with a name, the callback thunk will be used as an entry point for this function.I implement the option:  optCallbackCall 	Example: ========callAbsoluteMethod	 |  callback |	callback := FFICallback 		signature: #(double (double x)) 		block: [ :x | x abs ].	FFICallbackFunctionResolution register:  callback as:  #absolute.	self absolute: 42.0.absolute: aNumber	self ffiCall: #(double absolute (double aNumber)) options: #(+optCallbackCall)	"
"GLMTextChanged",""
"SearchMorph","I am a searchfield with a dropdown for the history. It is a minor extension to the EditableDropListMorph managing the search history directly in the morph. Typical use-case:	^ SearchMorph new		model: self;		setIndexSelector: #classSearchAccept:; ""sends the search result to the model""		searchList: self class classSearchList; ""sent on creation to get the initial search list""		yourself		"
"MockTutorial2","Mocking another tutorial for test purposes"
"EndianDetector","I am EndianDetector, a class responsible of detecting the endianess in the current machine.I do so in my #calcEndianess method, which works as follows: - it creates a float object, whose endianess is managed automatically by the VM. - copy the raw data of that float object into a bytes object (instance of my class) - then, we can check in the raw copy if the data of the float is in the least or more significant word of the object.Internally, I do the raw data copy by changing the class of the float into me. To do that I have the following properties:- I'm a compact class (required to change the class)- I'm in the startup list to check this on every startup"
"NautilusShowHierarchyChanged","A NautilusShowHierarchyChanged is raised when the value of howHierarchy is switched"
"MetacelloConflictingProjectError",""
"InstanceModification","I collect and provide the information to migrate instances when a class changed."
"WindowCollapsed","This announcement is emitted when a window is collapsed, by pressing the '-' top left button of a window."
"MemoryFileSystemTest","SUnit tests for MemoryFileSystem"
"AthensCairoSurfaceExamples","self example1"
"TabPanelBorder","Specialist border for a TabGroup panel. Does not draw border beneath selected tab."
"MetacelloCoreVersionQueryTestCase",""
"SugsSmalltalkEditorContext","I am a context that know how to work with the SmalltalkEditor."
"MenuMorph","Instance variables:	defaultTarget 	<Object>				The default target for creating menu items	selectedItem		<MenuItemMorph> 	The currently selected item in the receiver	stayUp 			<Boolean>			True if the receiver should stay up after clicks	popUpOwner 	<MenuItemMorph>	The menu item that automatically invoked the receiver, if any.	activeSubMenu 	<MenuMorph>		The currently active submenu."
"SystemResolver","I resolve origins that are related to the currently running Smalltalk system, using primitives provided by the VM. "
"ReflectivityReificationTest",""
"ZipFileSystemDirectory","I represent a zip file system entry for a directory. Together with ZipFileSystemFile I take care of lazily accessing archive members."
"ZnUtils","I am ZnUtils holding various utilities related to HTTP handling.Part of Zinc HTTP Components."
"HelpOnHelp","Welcome to Pharo Smalltalk Help System"
"ManifestSystemModel","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"OSTouchScrollEvent","Superclass of all scrolls events"
"SDL_DropEvent","SDL2 library structure representing a dropped file into the window."
"AthensBalloonPaint","i am an abstract root of many balloon-specific paints"
"FTFunctionWithField","I am an abstract class. My subclasses are some functions for a FastTable that need a field when they are use explicitely.Description-------------------------------------------------I act as my superclass but I manage a field. When the user type in the field an Announcement will call #update:Public API and Key Messages-------------------------------------------------- #update: anAnnoucement	is call when the user type something into the field	Example (Should only be create by a FTTableMorph)-------------------------------------------------FTFunctionWithField table: (FTTableMorph with: (1 to: 200))Internal Representation and Key Implementation Points.-------------------------------------------------    Instance Variables	field:		I am the field to display at the bottom of the FTTableMorph"
"MetaLink","Metalinks are used to annotate other AST nodes. An annotated AST is expanded, compiled and executed on the fly thanks to the ReflectiveMethod/CompiledMethod Twin. For a given node metalinks can be put at different positions:- before: The metalink is executed before the execution of the node.  - instead: The metalink is executed insted the node.- after: The metalink is executed after the execution of the node.(... later: onError,  Do we have an #around instead of #instead?)Not all the nodes provide all the position. For example, literals don't provide onError and onSuccess positions.metaObject: The target object to callselector: send this selectorargumentscondition:  turn link on/off level: Meta Level at which the link is active------ Examples -----MetaLink new 	metaObject: Halt;	selector: #now.	MetaObject new 	metaObject: [ self halt ];	selector: #value."
"RBTransformationRule","A RBTransformationRule is a special rule that not only detects problems but also can automatically transform the good."
"PackageClassNodeExample","Example for a package class node"
"TxModelTest",""
"SugsContextTest","SUnit tests for the Smart suggestions context"
"CatalogCommandLineHandler","Command line handler for dealing with projects from the command lineUsage: get [--help] ProjectName [--version=<version>]	--help                        Show this help message	ProjectName         The name of the project in catalog	<version>                A valid version for the given configuration (default is #stable)	Examples:	# installs Seaside3 	pharo Pharo.image get Seaside3		# installs Seaside3 version 3.1.2	pharo Pharo.image get Seaside3 --version=3.1.2"
"SimpleGridNodeExample","Example for a simple grid node"
"GTSpotterResultsBrick",""
"FLSimpleStackTest",""
"RBRefactoryTyper",""
"MenuRegistrationExample","I'm here to show you how to use the menu registration. See class side methods and try it with:----------------(PragmaMenuBuilder pragmaKeyword: 'worldMenuExample' model: nil) menu popUpInWorld----------------"
"MethodAddition","I represent the addition of a method to a class.  I can produce the CompiledMethod, install it, and then notify the system that the method has been added.  This allows Monticello to implement atomic addition.  A loader can compile all classes and methods first and then install all methods only after they have been all compiled, and in a way that executes little code.ß"
"MCStWriter","I write Category/Classes/Methods/.... definitions into Monticello source.st file format found in .mcz packages.    See also MCStReaderExample:String streamContents: [:aStream| |writer|    writer := MCStWriter on: aStream.    writer writeDefinitions: {True asClassDefinition. False asClassDefinition}.]"
"MalBreadthFirstSearchPath","Breadth-first search (BFS) is an algorithm for traversing or searching tree or graph data structures. It starts at the tree root (or some arbitrary node of a graph, sometimes referred to as a `search key') and explores the neighbor nodes first, before moving to the next level neighbours. (source: Wikipedia)"
"KMKeyCombinationChoice","I representing a choice between key combinations.A keyboard event will match with me when any of my key combinations matches with it."
"TxMockAttribute","this is mock, go away"
"GLMDataSourceUpdated","I am an annoucement use by Glamour to signal that the dataSource of a Renderer changed.Description --------------------I keep a pointer to the new dataSource. I can be use when the user filter a FastTable for example.I am use by a Fast related renderer in GLMMorphicFTRenderer.Public API and Key Messages------------------- newDataSource: aDataSource 		is my constructor.		Internal Representation and Key Implementation Points.------------------     Instance Variables	newDataSource:		The new DataSource."
"MCVersionReader","A version reader"
"ManifestCollectionsStack","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"HandleMorph","A HandleMorph provides mouse-up control behavior."
"MenuModel","I am a simple model describing a menu.I only contains a list of menu groups. Each group is separated by a splitter"
"AdditionalMethodState","I am class holding state for compiled methods. All my instance variables should be actually part of the CompiledMethod itself, but the current implementation of the VM doesn't allow this.  Currently I hold the selector and any pragmas or properties the compiled method has.  Pragmas and properties are stored in indexable fields; pragmas as instances of Pragma, properties as instances of Association.I am a reimplementation of much of MethodProperties, but eliminating the explicit properties and pragmas dictionaries.  Hence I answer true to isMethodProperties."
"FLContextCluster","I am a cluster for MethodContexts."
"MetacelloClearStackCacheNotification",""
"MBBaselineInfoTest","SUnit tests for MBBaselineInfo in Versionner"
"RBVariableNode","RBVariableNode is an AST node that represent a variable (global, inst var, temp, etc.).Instance Variables:	name	<RBValueToken>	the variable's name I represent	nameStart <Integer>	the position where I was found at the source code"
"SpecTableLayoutAddSpacer","A SpecTableLayoutAddSpring class is a description of the addition of a spacer to a table layout.Can be either:- flexible (fills available space; default) - of a fixed sizeNote that flexible spacers do not work with wrapDirection other than #none."
"BottomLeftGripMorph","I am the handle in the left bottom of windows used for resizing them."
"TextVariableLink","An active link in a text linking to a variable"
"FTCellMorph","I represent a cell for the table. Description------------------I contains other Morph that need to be render. I should be answered in FTDataSource>>#cellTable:column:row:, with this method a FTTableContainer can display all the needed cells.Technically, FTDataSource can answer  any kind of morph, but I'm better prepared  for the role so is recommendable  to  use me.Public API and Key Messages-------------------- #withTopSeparator 		this is use to put a separator before the cell. (For exmple on a FTOutlineDataSource).Example-------------------FTCellMorph new		addMorphBack: 'Example' asMorph;		withTopSeparator;		openInWindow. Internal Representation and Key Implementation Points.-----------------    Instance Variables	topSeparator:		This is a boolean to know if the cell need a topSeparator."
"ISO88592TextConverter","Text converter for ISO 8859-2.  An international encoding used in Eastern Europe."
"MCTraitDefinition","A MCTraitDefinition represents a trait."
"MCVersionTest",""
"ConfigurationOfVersionnerTestXMLParserTemplate","Simple Configuration class used to test Versionner behavior.This class is a rename of ConfigurationOfXMLParser-StephaneDucasse.11."
"TxAthensLayoutTest",""
"MetacelloMCConfigurationOfProjectSpec",""
"GTSpotterAnnouncement",""
"CodeSearchingRule","A CodeSearchingRule is rule using a RBParseTreeSearcherfor the search.use #matcher: for setting the parse tree searcher."
"FLGlobalCluster","I am a cluster for objects that are reachables from Smalltalk global dictionary."
"DelayExperimentalCourageousScheduler","I determine the resume time of Delays, then schedule them to wake up at the appropriate time.  I consist of two inter-coupled parts:  1. a ""timing-priority"" side (i.e. thread running at the very highest priority in the system) that maintains the suspendedDelays Heap data structure containing Delays ordered on resume times, and at the appropriate time signal each Delay's  /delaySemaphore/.  Related methods belong to the ""timer process"" protocol.  2. an ""application-priority"" side used by application code, running at the same priority as the calling code, which pass Delays to the timing-priority side. Related methods belong to the ""low priority processes"" protocol.The two sides operate in a multi-producer single-consumer paradigm synchronised via /timingSemaphore/.  Only the timing-priority thread waits on /timingSemaphore/, while this is signalled by many application-priority processes as well as the VM.The timing-priority event loop cycles in #runTimerEventLoop, sleeping until /timingSemaphore/ is signalled, either from the VM at a time previously set by  #primSignal: atUTCMicroseconds: , or from application-priority code via #schedule: or #unschedule.  Actual processing is done in #handleTimerEvent:.To schedule a Delay, an application thread passes it via #schedule: into the /scheduledDelay/ variable, then signals a /timingSemaphore/ event that wakes up the timing-priority thread to process the /scheduledDelay/.  The system's implicit cooperative multiasking ensures no task-switch can occur between /scheduleDelay/ being set and timingSemaphore is signalled, which ensures /scheduledDelay/ is cleared to nil by the timing-priority thread before any other thread can overwrite /scheduledDelay/.I can be selected via ""World > System > Settings > Setting > Delay scheduler"".To compare the different delay schedulers...   1.   ""World > Tools > Process Browser"", and set to auto-update.   2.   Transcript open.   3.   DelayBenchmark runAll."
"OSTouchPunctualGestureDetector","I am an abstract class for gestures which sends events that are puntuals"
"SHStyleElement","A Shout style element"
"SDL2Constants","Pool of various SDL2 library constants"
"SmalltalkEditingState","See EditingState comments.SmalltalkEditingState is made to manage data for Smalltalk code editing sessions (such as a selector chooser).Instance Variables:   selectorChooser <SelectorChooserMorph>- selectorChooserThe basic selector chooser which is popup to fetch available selectors or class names begining with a prefix. The prefix is token from the current caret location (see SelectorChooserMorph comments)."
"TxTextStyler","(TxTextStyler new	styleMethod: (TxTextStyler >> #initializeStylesFor:))	editInWindow- supports some ast-based navigation: 	- cmd-click on message selection to show implementors of it	- shift-cmd-click to show senders of it	- cmd-click on class name to browse it"
"MTProjectBFSIteratorTest",""
"Matrix","I represent a mathematical matrix or a two-dimensional array. I provide methods for creating matrices, operating on them arithmetically and algebraically. Structure: - numberOfRows : a non-negative integer saying how many rows there are. - numberOfColumns : a non-negative integer saying how many columns there are. - contents : an Array holding the elements in row-major order.  That is, for a 2x3 array the contents are (11 12 13 21 22 23).  Element-wise matrix arithmetic works; you can freely mix matrices and numbers butdon't try to mix matrices and arrays (yet).Matrix multiplication, using the symbol +* (derived from APL's +.x), works between(Matrix or Array) +* (Matrix or Array).  Don't try to use a number as an argument of +*.Matrix * Number and Number * Matrix work fine, so you don't need +* with numbers."
"RadialGradientPaint","I represent a radial gradient paint.The center point and radius defining a circle where gradient will be drawn in user space coordinates.The gradient's ramp color at 0 maps to the focal point and ramp color at 1 maps to the edge of the circle,interpolating colors in between.Also check the comment of my superclass to know better how and when you can use me."
"MetacelloMCVersionValidator","Performs configuration validation.For programmatically decoding reason codes use:  MetacellMCVersionValidator fullDescriptionForReasonCode: <reasonCode>Warning reason codes:	#notDevelopmentVersion			- the symbolic version #development refers to a non-development literal version.	#loadWarning 						- Warning signalled during load [load validation].	#onlyBaselineVersion 				- one or more baseline versions have been defined, but no non-baseline versions are defined.	#stableDevelopmentVersion		- a version whose blessing is #development has been declared as a #stable versionCritical Warning reason codes:	#duplicateVersionDefinitions 		         - there are multiple pragma methods specifying the same version	#loadDeprecation					         - deprecation warning signalled while loading configuration [load validation]	#missingRecommendedProjectSpecField - missing recommended fields in project reference (versionString). The versionString should be specified so that #bleedingEdge loads will be predictable and repeatable	#noLoadableVersions 				         - no non #baseline versions defined in configuration	#noTests 							         - no test cases defined in loaded configuration [load validation]	#noVersionSpecified 				         - no version defined for the project reference or package. The version specified in the baseline or the latest version of the project or package in the repository will be used.	#packageNameMismatch 			         - the name in the packageSpec does not match the name of the mcz file	#projectClassNameFileMismatch 	         - the class name of the configuration does not match the mcz file containing the configuration	#testDeprecation 					         - deprecation warning signalled while running configuration tests [load validation]Error reason codes:	#cannotResolveVersion 			- the version (project reference or symbolic version) was not found in the specified configuration	#duplicateNames 					- multiple independent definitions for an entity with same name (project, package, or group)	#incompleteProjectSpec 			- missing required fields in project reference (className and/or repository)	#incorrectVersionString 			- the version declared in pragma doesn't match version in versionSpec	#invalidDoItSelector 				- doit select must be a Symbol	#invalidVersionString 				- versionString must be a String	#loadError 							- error occured while loading configuration [load validation]	#missingVersionImport 			- version specified in import pragma not defined in configuration	#noVersionsDefined 				- no usable baseline or version defined in configuration ... configuration cannot be loaded	#projectCreationError 				- error occured while resolving project reference	#shadowedNames 					- name duplication between packages and projects	#testFailures						- test failures while running tests [load validation]	#versionCompositionError 			- error while creating versionSpec from pragmas"
"GLMTextModel",""
"MorphicTreeAdapter","I am the adapter used to bridge a TreeModel and a MorphTreeMorph"
"TutorialPlayerTestTutorialAccessor","SUnit tests for tutorial player"
"MCFileRepositoryInspector","I'm a monticello tool composed of three panes to browse repositories and the packages they contain. You get an instance of me when you click on a repository in Monticello browser and press open. My left pane presents the packages, my right one their versions and the bottom one the commit log of the selected package versions.I underline the packages you already loaded, and highlight the ones you don't have updated to the last version. I also highlight the versions you did not load yet.Example: I can browse packages of PharoInbox with:(MCFileRepositoryInspector 	repository: (MCHttpRepository					location: 'http://www.squeaksource.com/PharoInbox'					user: ''					password: '')	workingCopy: nil) show.	COTDC - S.Ducasse, G.Polito, L.Laffont"
"DADependencyChecker","Utility class to easily check  dependencies of packages.DADependencyChecker new dependenciesOf: #CargoPackageManager.DADependencyChecker new transitiveDependenciesOf: #'CargoPackageManager-Minimal'.DADependencyChecker new dependentsOf: #CargoPackageManager."
"NOCMenuMorph","I am a morphic item used to show ocompletion entries. "
"SmalllintManifestCheckerTest","SUnit tests for SmalllintManifestChecker"
"GoferUnload","Unload"
"RxMatcher","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--This is a recursive regex matcher. Not strikingly efficient, but simple. Also, keeps track of matched subexpressions.  The life cycle goes as follows:1. Initialization. Accepts a syntax tree (presumably produced by RxParser) and compiles it into a matcher built of other classes in this category.2. Matching. Accepts a stream or a string and returns a boolean indicating whether the whole stream or its prefix -- depending on the message sent -- matches the regex.3. Subexpression query. After a successful match, and before any other match, the matcher may be queried about the range of specific stream (string) positions that matched to certain parenthesized subexpressions of the original expression.Any number of queries may follow a successful match, and any number or matches may follow a successful initialization.Note that `matcher' is actually a sort of a misnomer. The actual matcher is a web of Rxm* instances built by RxMatcher during initialization. RxMatcher is just the interface facade of this network.  It is also a builder of it, and also provides a stream-like protocol to easily access the stream being matched.Instance variables:	matcher				<RxmLink> The entry point into the actual matcher.	stream				<Stream> The stream currently being matched against.	markerPositions		<Array of: Integer> Positions of markers' matches.	markerCount		<Integer> Number of markers.	lastResult 			<Boolean> Whether the latest match attempt succeeded or not.	lastChar			<Character | nil> character last seen in the matcher stream"
"FLGlobalSendMock","A mock for a global send"
"SystemAnnouncer","This class plays the role of the announcer for events raised by the Pharo system.BEWARE: You should not need to subclass me. Think about just using me to send your announces (if you need system behavior) or using your own announcers as instance or class  variables."
"MCMcmReader","Reader for Metacello MCM"
"EyeIntegerInspector","Specialized version of inspector showing hex, octal and binary representations.If within Unicode range, show a Character having using the Integer value as code point."
"TxCharacterStreamTest",""
"RBSelfNode","I am a specialized version for the 'self'"
"SDL_MouseButtonEvent","SDL2 library structure"
"SugsCreateClassVarAccessors","I know how to create accessors for a class var"
"SDL_PixelFormat","SDL2 library structure"
"DebuggerMethodMapOpal","I provide helper methods deadling with-> pc to text mapping-> temporary variables for contexts-> reading and setting tempary variablesAll methods here should be moved to MethodContext."
"QuotedPrintableMimeConverterTest","SUnit tests for QuotedPrintableMimeConverter"
"MCDependencySorter","A MCDependencySorter computes the dependencies to a set of entities."
"Author","I am responsible for the full name used to identify the current code author."
"Lesson","See class side messages #welcome, #doingVSPrinting...."
"RubTextAcceptedInModel","I am raised when the text is accepted in the model side"
"EyeFileSystemInspector","I am an inspector dedicated to the visualization of file systems"
"BorderStyle","See BorderedMorphBorderedMorh new borderStyle: (BorderStyle inset width: 2); openInWorld."
"MCMergingTest",""
"AthensTreeView","A tree visualization using Athens for display"
"NBFFICallback","I'm a stub class intended just to easy migration from NB to UFFI. The corresponding class to replace me is: FFICallback.MIGRATION NOTES: Translation from old NB callbacks to UFFI callbacks is not  authomatic, but is fairly easy: you do not need to extend callbacks, instead, you just declare your callbacks as something like: callback := FFICallback	signature:  #(int (const void *arg1, const void *arg2))	block: [ :arg1 :arg2 | ((arg1 doubleAt: 1) - (arg2 doubleAt: 1)) sign ]."
"AthensCairoPathBuilder","i implement cairo-specific path builder. see my superclass for more details."
"BuilderManifestTest","A ManifestBuilderTest is a class to test the behavior of ManifestBuilder"
"OSSDL2GLRenderer","My instances implement OSWindowGLRenderer interface using SDL2 library"
"OSMouseButtonEvent","i am the root of various mouse button events."
"Dictionary","I am a collection of elements that associate a key object with a value object.Description--------------------------I  can be viewed from one of two perspectives: a set of associations, or a container of values that are externally named where the name can be any object that responds to #=. The external name is referred to as the key.  I inherit many operations from Set.I use the #= method to locate a key. If you want a collection that use the #== method (same pointers) you can use an IdentityDictionary.I am use when we need a collection of objects which I can access with a key. For example if you associate some words with a definition, the word will be the key and the definition will be the value. Both of them can be any kind of objects.Internally I use Associations. The Association class can help to use me. (See examples lower)Public API and Key Messages--------------------------- #at: aKey put: aValue / #at: aKey ifAbsentPut: aValue 		allow to add an element.  - #at: aKey / #at: aKey ifAbsent: aBlock / #at: aKey ifPresent: aBlock ifAbsent: aBlock 		allow to access my values.- #keysDo: aBlock / #valuesDo: aBlock / #associationsDo: 		allow to iterate on me effectivelyExamples --------------------------To create a dictiony with indexes as key: 	Dictionary withAll: #(7 3 1 3)   		""returns:  a Dictionary(1->7 2->3 3->1 4->3 ""To use Objects as key (here symbols): 	colors := Dictionary new 				at: #yellow put: Color yellow; 				at: #blue put: Color blue;				at: #red put: Color red;				yourself.					colors at: #yellow. 	""returns:  Color yellow""	colors keys          ""returns: a Set(#blue #yellow #red)""	colors values       ""returns:  {Color blue. Color yellow. Color red}""  You can also directly use Associations: 	colors := Dictionary with: #yellow -> Color yellow with: #blue -> Color blue.	colors add: #red -> Color red.		colors associations  	""returns: {#yellow->Color yellow. #red->Color red. #blue->Color blue}""		Here some more examples: 	colors := Dictionary newFrom: { #blue->Color blue . #red->Color red . #yellow->Color yellow }. 	colors removeKey: #blue. 	colors at: #red ifPresent: [ :color |  color darker] ifAbsent: [ Error signal: 'The red color should be here.' ] .		""return: (Color r: 0.92 g: 0.0 b: 0.0 alpha: 1.0)""	colors associations 		 ""{#yellow->Color yellow. #red->Color red}"" Internal Representation and Key Implementation Points.--------------------------I am just a collection of associations. If I need my keys I will just return the keys of my associations. Idem for my values.I use the #= method in order to manipulate my keys. I cannot have two associations that are equals with the #= method."
"RubBoundsChanged","I am an abstract announcement relates to text area bounds changing"
"SmalllintManifestChecker","SmalllintManifestChecker is responsible for running a set of rules on a given subsystem.| rules checker | rules := RBCompositeLintRule allGoodRules resetResult.""the resetResult is necessary because it will build a knid of cache of the resultand this cannot be done automatically (for example you may want to run several rules without invalidating the results). ""checker := SmalllintManifestChecker new	runRules: rules onPackage: (RPackageOrganizer default packageNamed: #'Manifest-Core')."
"TraitCompositionTest",""
"RPackageOrganizer","A RPackageOrganizer is responsible for providing all the package currently defined in the system.In addition it provides a back pointer from the class to its package.The classPackageMapping and the classExtendingPackageMapping should be moved in the future to the classes themselves. For tests or actions that could destroy the package organizer,  do not access directly the singleton of RPackageOrganizer.Use instead 		RPackage withOrganizer: aNewOrganizer do: ablock			or via RPackage organizer			RPackageOrganizer fillUp will fill up the system from the current PackageOrganizer	""self fillUp""	-----------------------------------------------------------------------------------------------------------------------------------------------			A rpackageOrganizer update itself when some changes are made in the system. It does that by registering to a systemAnnoucer, specifying an action when an annoucement is triggered.Here is what I (Cyrille Delaunay) propose to do for each annocuement triggered:SystemCategoryAddedAnnouncement 		=> I would just register a new RPackage (if it does not already exist) in the RPackageOrganizer	SystemCategoryRemovedAnnouncement      => I would just unregister the RPackage concerned from the organizerSystemCategoryRenamedAnnouncement     => I would update the RPackage concerned, by changing its name     => I would update the 'packages' dictionary of the organizer, putting the new name as keySystemClassAddedAnnouncement     => Import the class in the RPackage concerned (RPackage >> importClass:)    => Register the class in the 'classPackageMapping' dictionary of the organizer (RPackageOrganizer >> registerPackage:forClass)    (=> maybe we should pay attention if both the class and the metaclass launch this kind of event ?)SystemClassRecategorizedAnnouncement    => I would update the old RPackage concerned:            => unregister the class            => unregister all defined methods of the class    => I would update the new RPackage:            => Import the class in the RPackage (importClass:)    => I would update the organizer:            => update the 'classPackageDictionary' to point on the new RPackage SystemClassRemovedAnnouncement    => I would update the RPackake concerned             => unregister the class             => unregister all defined methods of the class    => I would update the organizer:             => update the 'classPackageDictionary' to remove the classSystemClassRenamedAnnouncement    => I would update the RPackage in which the class is defined:             => update the 'classDefinedSelectors' dictionary (replace the old key by the new one)             => update the 'metaclassDefinedSelectors' dictionary (replace the old key by the new one)    => I would update all RPackages extending this class             => update the 'classExtensionsSelectors' dictionary (replace the old key by the new one)             => update the 'metaclassclassExtensionsSelectors' dictionary (replace the old key by the new one)    => I would update the organizer             => update the 'classPackageDictionary' to replace the key with the new class name             => update the 'classExtendingPackagesMapping' to replace the key with the new class name                          SystemClassReorganizedAnnouncement     (=> I guess we should check if extensions have not been added or removed ?       (to retrieve this information, the only thing I found is ClassDescription >> organization, and then check each category begining with '*' and compare with the organizer. seems to be painful, no?))	=> when an extension is removed, all methods inside are removed. Therefore, the MethodRemovedAnnounecement will do the job. Not sur this one still usefullSystemProtocolAddedAnnouncement    => I don't see anything to do for this annoucementSystemProtocolRemovedAnnoucement    => If the category is an extension from a package, I would move all the methods concerned, from the extending RPackage to the class RPackageSystemMethodAddedAnnouncement       => I would check the category in which the method has been defined               => if it correspond to an extending package -> add the method to the extending RPackage               => if not, add the method to the class parentPackageSystemMethodModifiedAnnouncement       this annoucement can correspond to several kind of modifications:	       *  a method has been renamed                       => I would update the rPackage in which the method is defined to replace the old selector by the new one		* a method has been move to another category 			-maybe from a classic category to an extending package                             => we should move the method from the  method class parentPackage to extendingPackage package			-maybe from an extending package to another extending package                             => we should move the method from the  extendingPackage package to the other extendingPackage package			-maybe from an extending package to a classic category                             =>  we should move the method from the  extendingPackage to the method class parentPackage		        -maybe from a classic category to another classic category                             => we have nothing to do			SystemMethodRecategorizedAnnouncement          same thing than aboveSystemMethodRemovedAnnouncement       => I would simply remove the method from the RPackage in which it is register"
"GTDummyEvent","I represent an object that is kept by a GTEventCollector. I serve only for the testing purpose."
"GTSpotterRecorderDiveInElementEvent","A GTSpotterRecorderDiveInElementEvent models the action of diving in a selected element."
"FFITestArrayStructure",""
"GLMMorphicFinderRenderer",""
"FFIExternalResourceExecutor","I am responsible for finalizing an external resource, registered using external resource manager.When object, registered as external resource being garbage collected,I tell an object's class to finalize it's associated data (by passing an object,received from #resourceData message sent to an object at registration time).I automatically keep tracking for session change (image save/boot), and ignore finalization of resources of old sessions (since they are not longer valid,and cannot be freed since session changed).Like that, a users of NBExternalResourceManager don't need to implement a session checking logic, and need only to:a) register object as external resource:     FFIExternalResourceManager addResource: anObject.an object should understand the #resourceData message, which is remembered at registration point (it can be any external resource like, id, handle or memory pointer).Then, when object is garbage collected, its class will receive a message to finalize the resource data in #finalizeResourceData:The passed data is exactly same as previously returned by #resourceData method.An example:Imagine that you want to represent an external resource by keeping its handle.Object subclass: #MyExternalObject 	instanceVariableNames: 'handle'	classVariableNames: ''	poolDictionaries: ''	category: 'XYZ'	To let your object(s) to be managed by external resource manager, you need to register it.Usually you do it after successfully claiming an external resource:MyExternalObject>>initialize	handle := self createNewExternalResource.  ""claim resource""	self assert: self handleIsValid. ""etc...""		""Now, register receiver as external resource"" 	FFIExternalResourceManager addResource: self ""Another form of use is: 	FFIExternalResourceManager addResource: self data: handle.""----  If you used #addResource: method for registration, you should provide an implementation of #resourceData method:MyExternalObject>>resourceData	^ handle ""since we need only handle to identify external resource""----	Now, for properly finalizing the external resource we should implement:MyExternalObject class>> finalizeResourceData: aHandle	^ self destroyHandle: aHandle. ""do whatever is needed to destroy the handle""Note that in #finalizeResourceData: you cannot access any other properties of your instance, since it is already garbage collected. You also don't need to do a session checking, since it is done automatically by resource manager. "
"FLFileStreamStrategy","I am a strategy for traditional file streams."
"RubCursor","I represent a cursor for the mouse "
"ProcessLocalVariable","My subclasses have values specific to the active process. They can be read with #value and set with #value:"
"ProtocolAnnouncement","I'm an abstract announcement for protocols"
"ManifestMonticelloGUI","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"VTermOutputDriver","I convert high-level terminal commands like moving the cursor or setting the color to characters sequences understood by the terminal.Furthermore I do some bookkeeping to reduce the number of characters sent to the terminal.Example of usage:	out := VTermOutputDriver stdout.	out << 'normal text'.	out lf.	'red text' do: [ :c | out color256: Color red. out << c ].	out lf.	'bold text' do: [ :c | out bold. out << c ].	out clear.	out lf."
"VSProjectLeafNode","Abstract class used to display a project with its specific icons and no child in a tree."
"DAAssemblyNode","I reprensent a package assembly (i.e. a set of packages).I collect all dependencies related to the assembly parts."
"UUIDGenerator","This class generates a pseudo-random UUIDby John M McIntosh johnmci@smalltalkconsulting.comSee http://www.webdav.org/specs/draft-leach-uuids-guids-01.txt"
"GLMFormSubmitted",""
"GTDebuggerInspector","This is a specialized inspector that is embedded in  GTDebugger.It is special in two ways:- the first presentation is different in that it shows all variables active in the debugging context- the looking up of presentation ignores the default state presentation because the vertical splitting of state and workspace does not work in the context of the debugger due to space limitations. Instead, the workspace is offered in a separate presentation."
"UndeclaredVariable","Notify about an undeclared variable"
"GTSpotterRecorderDiveOutEvent","A GTSpotterRecorderDiveOutEvent  models the action of  diving out a step."
"Protocol","A Protocol is a simple value holder representing a protocol.It's composed of a name and a set of method selectors"
"LocaleChanged","Announce that a locale was changed"
"GLMUIThemeExtraIcons","This class offers a number of extra icons that work with the Glamorous Theme."
"SDL2AthensDrawingExample","I am a basic example to show how we can handle an event and draw something with this event.Left mouse button = draw lines Other mouse buttons = clear sketchTo launch the example:self new open"
"Breakpoint","A Breakpoint is an object used for stopping the execution of the program in a determined instruction, normally with debugging purposes. There are three types of breakpoints:-halt once: These are triggered once, and then removed.-halt always: Once installed, they have to be explicitly removed (by using #remove on the instance side, or #removeAll on class side)-halt on condition: Before being installed prompts the user for a condition (a block with a boolean expression), and it is only triggered when that condition is met.Breakpoints are installed via SmartSuggestions menu (available for RBMethodNode, RBMessageNode and RBAssignmentNode), or programmatically:""(Breakpoint inMethod: (Bar>>#foo2) inNode: ((Bar>>#foo2) ast allChildren at: 9) )break: #when: withArguments: { [ RFCounter counter isZero ] }"""
"WeakKeyAssociation","I am an association holding only weakly on my key."
"FuzzyLabelMorph","A label that underdraws to the top-left, top-right, bottom-right and bottom left by a specifed offset in a contrasting colour to the receiver's with a specified alpha value."
"MetacelloVersionLoadDirective",""
"RBAccessorClassRefactoring",""
"AthensShape","This class represents an interface, which should be supported by all shapes used for drawing with Athens framework.Shapes do not have to inherit directly from me, for example Rectangle implements my protocol (via extensions), and as result can be used as a valid shape for drawing with Athens."
"ActiveMetaContext","I am a process local variable that stores the currently active meta level "
"RBAddInstanceVariableChange",""
"NautilusExtendCommentSwitch","A NautilusExtendCommentSwitch is raised when the button to maximize the class comment is switched"
"MorphicTextInputFieldAdapter","I am the adapter used to bridge a TextInputFieldModel and a PluggableTextFieldMorph"
"RBSendsUnknownMessageToGlobalRule","Checks for messages that are sent but not implemented by a global. Reported methods will certainly cause a doesNotUnderstand: message when they are executed."
"OSSDL2Driver","A window driver used for running things using SDL2 library"
"DynamicVariable","My subclasses are dynamic variables: each subclass represents a variablewhose value persists inside the block passed to #value:during:. There isno way to change the value inside such a block, but it is possible totemporarirly rebind it in a nested manner."
"BalloonLineSimulation","This class is a simulation of the code that's run by the Balloon engine. For debugging purposes only."
"TxEmbeddedObjectCommand",""
"GoferReference","A GoferReference is an abstract superclass for various kinds of references to Monticello packages and versions."
"TableLayoutProperties",""
"GLMCustomRow",""
"OSWindowRenderer","My instances are used for updating the OSWindow contents by rendering on it.There is no way to obtain a valid instance of window renderer other than asking a valid instance of OSWindow for window renderer instance.See newFormRenderer: / newOpenGLRenderer factory methods."
"GLMBrickPopupSuccessThemer",""
"MetacelloMCVersionSpecLoader",""
"VirtualMachine","I am exposing a various attributes of smalltalk virtual machine.The direct use of this class is not recommended. All attributes are normally should be accessed viaSmalltalk vm someAttributeinstead of VirtualMachine someAttribute"
"MouseButtonEvent","A button event from a mouse"
"LRUCacheTests","I am NeoLRUCacheTests."
"ClassBuilderError","I represent an error raised while building a class. "
"ZdcIOBuffer","I am ZdcIOBuffer.I manage a fixed SequenceableCollection buffer for simultaneous input and output.I maintain a readPointer and a writePointer.When data is written to me, it is stored at the end, past my writePointer.When data is read from me, it is retrieved from the front, past my readPointer.Invariant: readPointer <= writePointerMy valid contents for reading is defined from contentsStart to contentsEnd, from readPointer + 1 to writePointer.Data can be added to the free space defined from freeSpaceStart to freeSpaceEnd, from writePointer + 1 to the buffer's' size.There can be a gap at my front. Compacting moves data if necessary to make (more) room at the end."
"PSMCMergeMorph","A PSMCMergeMorph is a graphical tool to navigate changes and select changes in case of conflicts."
"GLMCompositePresentationMorphicTest",""
"Beeper","Beeper provides simple audio (or in some other way) feedback to the user.The recommended use is ""Beeper beep"" to give the user the equivalence of a beep. If you want to force the beep to use the primitive in the VM for beeping, then use ""Beeper beepPrimitive"". In either case, if sounds are disabled there will be no beep.The actual beeping, when you use ""Beeper beep"", is done by sending a #play message to a registered playable object. You can register your own playable object by invoking the class side method #setDefault: passing in an object that responds to the #play message.The default playable object is an instance of Beeper itself which implements #play on the instance side. That implementation delegates the playing of the beep to the default SoundService.Note that #play is introduced as a common interface between AbstractSound and Beeper.This way we can register instances of AbstractSound as playable entities, for example:	Beeper setDefault: (SampledSound new						setSamples: self coffeeCupClink						samplingRate: 12000).Then ""Beeper beep"" will play the coffeeCup sound."
"GLMUpdateAction","GLMUpdateAction is used for controlling the updating of a presentation when an announcement. is sent by the announcerObjects.Instance Variables:	condition	<Boolean>	presentation	<GLMPresentation>	announcement	<Announcement>	announcerObjects	<(Collection of: Objects)>	transformation	<BlockClosure>"
"GTSpotterExceptionMock2",""
"NECWorkspaceController","I'm a specialized controller, that works with Workspaces."
"ColorChooserMorph","ColorPresenter that opens a colour selector when clicked."
"ZnServerTransactionTiming","I am ZnServerTransactionTiming.I hold timing information related to the handling of an HTTP transaction by a server."
"RBInlineMethodFromComponentRefactoring",""
"CatalogProject","I'm a project from an official pharo repository. I can load 	- stable versions	- just configurations.My class side provides some helper to access distribution repositories.[[[self pharoDistributionRepository			]]]			[[[self availableRepositoryURLStrings		 ]]]"
"UITheme","Common superclass for User Interface themes. Provides methods for creating new morphs in a standard way, various ""services"" like a file dialog, message dialogs etc. and also methods for customising aspects of the appearance of various morphs.Though conceptually abstract, no code is ""missing"". Subclasses, therefore, should override the aspects they wish to change."
"StopwatchTest","SUnit tests for the stopwatch "
"PharoIssue","I represent a Pharo development issue.Responsibilities:- create text templates (e.g. for the mailing list or issue tracker comments) for common events like issue creation and slice submission- communicate with the issue trackerCollaborators:- ZnClient - my link to the issue tracker- MCSliceInfo - I can get you one if you need itPublic API and Key Messages:Most of my behavior is illustrated in my tests. The noticable exception are my text template creation messages, the testing of which seemed to hurt as much in duplication as it added in QA."
"DiffModel","I am a Spec widget useful for visualising differences between two strings.When a classContext: is setted, the strings are highlighted using such contextual information.Examples:self exampleWithoutOptions.self exampleWithOptions."
"MemoryHandle","I provide ""primitives"" for doing IO on files in a MemoryFileSystem. I delegate most of my actions to the MemoryFile. This way there is only one place needed where the data is stored."
"GLMTestAnnouncement",""
"ErrorState","I am the state when there was an error during the loading"
"SessionCreationTest",""
"GTPlaygroundBasicTest",""
"FFIExternalStructureTests",""
"OSEvent","I am a basic class of OSEvent hierarchy.The specific events are coming from operating system and converted to corresponding OSEvent subinstance(s) in order to handle them.Events can implement a default action, which will be performed after dispatch on event handling,unless they are suppressed using #suppressDefaultAction message."
"FFIExternalEnumerationType",""
"TxDeletedTextAnnouncement","I am announced when editor deletes the portion of text.The announcement triggered right after the operation."
"GLMSelectedPageChanged",""
"GTSelector","This is a helper class for modeling a selector. We need this in order to support diving in such a selector and to offer specific processors (like implementors or senders) in Spotter ."
"PreDebugAction","A PreDebugAction is a debugging actions sending a unary message to the pre debug window."
"Magnitude","I'm the abstract class Magnitude that provides common protocol for objects that havethe ability to be compared along a linear dimension, such as dates or times.Subclasses of Magnitude include Date, ArithmeticValue, and Time, as well asCharacter and LookupKey.  My subclasses should implement  < aMagnitude   = aMagnitude   hashHere are some example of my protocol:     3 > 4     5 = 6     100 max: 9	7 between: 5 and: 10 "
"DAPackageItemDiff","A PDAbstractItemDiff is a object which represent a package who added/modified/removed from an old analysis."
"PharoTutorialAPIHelp","I'm a PharoTutorial which builds a HelpSystem book by collecting comment from classes and method."
"RelationSlotTest",""
"EllipseMidpointTracer","Utility class for calculating"
"RubScrolledTextExtra","RubScrolledTextExtra represents the root of rulers graphical representations (which add specific behavior to the scrolledText on which they are attached).Subinstances are the graphical representation of the associated decorators defined in the . the main methods are 	- computedExtentFrom:	- computedHeightFrom: 	- computedPositionFrom:	- computedWidthFrom:	"
"SpecLayoutAddColumn","A SpecLayoutAddColumn is an action representing the addition of a column to a layout"
"RelationSet","I'm a Set like collection that is used to hold collections of associated objects. When an object is added to or removed from this collection the inverse side is also updated."
"SimplestPaginatedClassListExample","Example for a paginated class list"
"OSMouseEvent","i am the root of various mouse events.Note, that my subclasses care to represent only the most basic events, not the synthethic ones, like click or double-click, which are result of interpreting the sequence of raw events."
"ConfigurationOfSton","I am ConfigurationOfSton, a Metacello configuration to load the STON (Smalltalk Object Notation) project.	ConfigurationOfSton load.Smalltalk Object Notation (STON) is a lightweight, text-based, human-readable data interchange format for class-based object-oriented languages like Smalltalk. It can be used to serialize domain level objects, either for persistency or network transport. As its name suggests, it is based on JSON (Javascript Object Notation). It adds symbols as a primitive value, class tags for object values and references.See class STON which has an API on the class side and describes the syntax in its class comment."
"TxNewLineDisplayCommand",""
"WindowActivated","Emitted when navigating between windows. "
"AnimationSettings","Animation settings"
"GTSpotterExceptionMock5",""
"StyleChunk","I'm the declaration of a style stuff into a file.  I'm not really used, but I'm here to make parsing an homogeneous process and backwards compatibility.Sending me the #import message does nothing :)."
"NECEntry","I represent a completion entry that is management by a ECModel and shown in the ECMenuMorph as a menu entry."
"MorphTreeNodeModel","I wrap an item to be displayed in a TreeMorph, so I can answer content and representation in a polymorphic way. My hierarchy usually follows TreeMorphModel one."
"IndentingListItemMorph","An IndentingListItemMorph is a StringMorph that draws itself with an optional toggle at its left, as part of the display of the SimpleHierarchicalListMorph.It will also display lines around the toggle depending on UITheme settingsInstance variables:indentLevel <SmallInteger> 	the indent level, from 0 at the root and increasing by 1 at each level of the hierarchy.isExpanded <Boolean>		true if this item is expanded (showing its children)complexContents <ListItemWrapper>	an adapter wrapping my represented item that can answer its children, etc.	firstChild <IndentingListItemMorph|nil>	my first child, or nil if none	container <SimpleHierarchicalListMorph>	my container	nextSibling <IndentingListItemMorph|nil>	the next item in the linked list of siblings, or nil if none.Contributed by Bob Arning as part of the ObjectExplorer package.Don't blame him if it's not perfect.  We wanted to get it out for people to play with."
"AtomicSharedQueue","I am using semaphore to signal/wait for new items available in queueI am introducing extra protocol - #next,which blocks the sender until it can successfully fetch next item from queue."
"RubGhostTextDisplayer",""
"FTBasicItem","I am an Item of a tree that keep a data and know how to calculate the children of this data for a Fast Tree.Description-------------------------------------------------I am created by a FTTreeDataSource or a FTItem and I hold a data. I can use a childrenBlock from my dataSource to generate the children of my data.Myself I use some FTBasicItems to creale my children.I also know how to generate a button for a FTTreeDataSource if needed. This button can be use to extand or unextand me.Public API and Key Messages-------------------------------------------------- #expand/#unexpand        Allow to expand me or unexpand me and update the Tree..    - #depth        Return my depth in the tree.Create me as as my superclass with an object as data.Example-------------------------------------------------(FTBasicItem data: Object from: (FTTreeDataSource roots: {} children: [ :item | item subclasses ]))		depth: 2;		yourself Internal Representation and Key Implementation Points.-------------------------------------------------    Instance Variables	data:		I am an object hold by the item.	depth:		I am the depth of the Item on the tree.	isExpanded:		I am a Boolean that remember if I am expanded or not.	recentlyChanged: 		I am a boolean that return true fi the item was really recently collapsed/expanded. Don't play with me, I am use to update the selection when we collapse/expand an item.			I calculate my children with a block that is inside my dataSource. I execute this block with my data, the roots items of the dataSource and my level as arguments."
"Model","Provides a superclass for classes that function as models.  The only behavior provided is fast dependents maintenance, which bypasses the generic DependentsFields mechanism.  1/23/96 sw"
"AthensCairoText","do not use this class. this is subject of change or removal"
"GTTemporaryPreDebugChangeDebuggerAction","This action adds the possibility of opening a GTDebugger from the PreDebugWindow."
"GeneratorTest","SUnit tests for class Generator"
"RBPullUpInstanceVariableRefactoring",""
"GLMActionAnnouncement",""
"ManifestCollectionsStreams","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"EUCTextConverter","Text converter for Extended Unix Character.  This is an abstract class.  The CJK variations are implemented as subclasses."
"DialogGroupManagerUI","Dialog UI for the group manager"
"LookupKey","I represent a key for looking up entries in a data structure. Subclasses of me, such as Association, typically represent dictionary entries."
"ManifestIssueTracking","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"ReProperty","I'm an external property of some entity. I have a source anchor to it…"
"RBPatternMethodNode","RBPatternMethodNode is a RBMethodNode that will match other method nodes without their selectors being equal. Instance Variables:	isList	<Boolean>	are we matching each keyword or matching all keywords together (e.g., `keyword1: would match a one argument method whereas `@keywords: would match 0 or more arguments)"
"VersionnerProjectBrowser","A VersionnerProjectBrowser can be used to browse a Metacello configuration.You can display and edit project versions and dependencies.Quick overview:VersionnerProjectBrowser example"
"FreeTypeGlyphRenderer","This class produces glyphs for a FreeTypeFont.It can be subclassed to provide, for example, sub-pixel anti-aliased glyphs."
"OCSourceCodeChanged","An OCSourceCodeChanged is used to pass corrected source code from OCUndeclaredVariableWarning back to OpalCompiler>>compile  so that parsing can be restarted,. Introduced to resolve Case 12954."
"FLStandardFileStreamSerializationTest",""
"MenuItemModel","I represent a menu item.I have a name, a description, an icon, a shortcut, and an action to perform (aBlock).I can also have a sub menu.(and usually I do NOT have an action AND a sub menu)"
"RBRegexRefactoring",""
"GLMLabelPresentation",""
"MorphicListAdapter","I am the adapter used to bridge a ListModel and a PluggableListMorph"
"TransformationMorph","A TransformationMorph is like a transformMorph, except that it does not clip, and its bounds include its entire submorph.  TransformationMorphs are assumed to have only one submorph -- the idea is that it is a wrapper that enables its submorph to scale and rotate.  A TransformationMorph may come to have more than one submorph if, eg, a menu sprouts a sub menu, using the transformationMorph temporarily as its world, but this ability is only sparsely supported (as in layoutChanged).See TransformationMorph class example1 method."
"RubUnderlinedSegmentMorph",""
"MalNodeWithPreviousAndNext","A basic node able to host the model and to represent edges with no additional class.Edges are navigable in both way through the nextNodes and prevousNodes instances variables."
"MethodIsTestAction","Aciton when the method is a test"
"RBInlineTemporaryTest",""
"RGClassDescriptionDefinition","RGClassDescriptionDefinition is the common parent for classes and metaclasses defining instance variables"
"RBCollectionMessagesToExternalObjectRule","Checks for methods that appear to be modifying a collection that is owned by another object. Such modifications can cause problems especially if other variables are modified when the collection is modified. For example, CompositePart must set the containers of all its parts when adding a new component."
"SpecWindowTest",""
"SDL_TextInputEvent","SDL2 library structure"
"FileException","Common superclass for exceptions while using file streams"
"RBTemporaryVariableCapitalizationRule","This smell arises when a temporary or argument variable do not start with a lowercase letter, which is a standart style in Smalltalk."
"StrikeFontSetStoredSetting","I am responsible for storing information about StrikeFontSet objects."
"MorphicCheckBoxAdapter","I am an adapter to ease the bridge a CheckBoxModel and a CheckboxMorph"
"ClassListNodeExample","Example for a class list node"
"OSWindowTouchEventHandler","I am the basic event handler for the example"
"MorphicContainerAdapter","I am the adapter providing the correct container class: PanelMorph"
"Polygon","I'm a Polygon PathShape (see PathShape)."
"MCScriptDefinition","Common superclass for script definitions"
"FileSystem","I present a low-level protocol for interacting with filesystems. I hold a reference toa store (a subinstance of FileSystemStore) which takes care of the details of performing file and directory operations on the filesystem I represent. I keep track of the current directory, and am responsible for resolving all paths thatI pass into my store. My store acts as a factory and offers platform specific actions.FileSystem instances know two methods that return a Reference object: workingDirectory and root.FileSystem disk workingDirectoryFileSystem disk root"
"WindowEvent","I'm an event related to the host window, only dispatched to the World. "
"MalDijkstra","Dijkstra's algorithm is an algorithm for finding the shortest paths between nodes in a graph, which may represent, for example, road networks. It was conceived by computer scientist Edsger W. Dijkstra in 1956 and published in 1959. The algorithm exists in many variants; Dijkstra's original variant found the shortest path between two nodes, but a more common variant fixes a single node as the ""source"" node and finds shortest paths from the source to all other nodes in the graph, producing a shortest path tree. (source: Wikipedia)"
"RGInstanceVariableDefinition","An instance variable definition"
"GLMBrickAnnouncement","A GLMBrickAnnouncement is default announcement used for any purpose by bricks.Instance Variables	data:		<Object>data	- xxxxx"
"GLMPresentation","A GLMPresentation is the abstract class for the hierarchy of presentations. A presentation specifies how the pane (held in the pane instance variable) is going to be displayed. It typically reads at least the #entity port of a pane and populates at least the #selection port.updateActions holds a collection of GLMUpdateAction that are used to update the presentation via announcements.rawSelectionTransmissions holds a collection of transmission whose origins are this presentation's #rawSelection port. Destinations of this transmissions are on the pane. This collection always contains at least one transmission to the pane's #selection port. To transform the values travelling through this transmission use #send:. To add new transmissions, use #send:as:.Because Glamour has a prototype-based design it relies on copying the presentations before installing them in panes (via transmissions). The parentPrototype instance variable keeps track of the presentation from which the current one was copied.It raises:- GLMContextChanged to let the world know that something has changed in the containing pane. This is typically used by the renderer to update the rendering.- GLMPresentationUpdated to let the world know that the presentations wants to be updated because of reasons other than the pane context changed."
"BoundedGradientFillStyle","Gradient fillstyle that draws with optional extent."
"GLMAbstractWizardStep","Abstract step in a wizardInstance Variables	input:		<Object>	name:		<Object>	numberOfDisplay:		<Object>	presentationBlock:		<Object>	previousStep:		<Object>input	- xxxxxname	- xxxxxnumberOfDisplay	- xxxxxpresentationBlock	- xxxxxpreviousStep	- xxxxx"
"ZnResponseReadEvent","ZnResponseReadEvent signals that a response was read in duration milliseconds. This time includes all waiting, server processing and networking."
"SugsCreateInstanceVarAccessors","I know how to create accessors for an instance var"
"SystemNavigation","I support the navigation of the system. I act as a facade but as I could require some state or different way of navigating the system all my behavior are on the instance side.I should (it is not complety done yet) be parametrized by an environment (aSystemDictionary) that scopes my queries."
"FLHookedSubstitutionTest","SUnit tests for hooked serialization using fuel"
"GLMMenuInvoked",""
"DelayScheduler","I provide the high priority process that interacts with the VM via /timingSempahore/ to manage scheduling of Delays.  The original pre-2014 code on the class-side of Delay was refactored to a singleton pattern in DelayScheduler, then further refactored into two subclasses... * DelayMillisecondScheduler (pre-2014, 6 day clock rollover) * DelayMicrosecondScheduler (new, 50,000 year rollover)A fair amount of code is duplicated in the subclasses for both performance and helping with the live transition to the new code (some cleanup required after the new code has been in use for a while)You can switch between different DelayScheduler implementations using Settings Browser > System. You can observe which delay scheduler is running using Tools > Process Browser.Original word of advice:DelayScheduler is THE highest priority code which is run in Pharo.  In other words it is time-critical. The speed of this code is critical for accurate responses, it is critical for network services, it affects every last part of the system. Don't fix it if it ain't broken! This code isn't supposed to be beautiful, it's supposed to be fast! The reason for duplicating code is to make it fast. The reason for not using ifNil:[]ifNotNil:[] is that the compiler might not inline those. Since the effect of changes are VERY hard to predict it is best to leave things as they are for now unless there is an actual need to change anything.Revised word of advice:Now you can swap between different schedulers on the fly, have a go. Create your own subclass of  DelayScheduler and use DelayBenchmark to compare the alternatives.  Tip: If while experimenting you have trouble with the UI locking (which prevents debugging), in WorldState>>doOneCycleFor: comment out the call to #interCyclePause: ."
"DialogItemsChooserUI","unselectedItems is the original list to search inselectItems is the list of the selected items"
"RBSuperNode","I am a specialized variable node for 'super'"
"StringMorphAttributeScanner","A StringMorphAttributeScanner provides the interface of a CharacterScanner so that text attributes may be collected from a Text and used elsewhere, like in setting the attributes of a StringMorph."
"Week","I represent a week."
"GLMPortTest",""
"SDL_Rect","SDL2 library structure"
"RGClassDefinition","RGClassDefinition is the concrete representation of a class (no trait)"
"UndefinedObjectTest","This is the unit test for the class UndefinedObject. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"CannotDeleteFileException","Notfify when not able to delete"
"TestingComposableModel","A TestingComposableModel is a stupid composable model used to test SpecInterpreter"
"TxTextEditorMorph",""
"StepIntoDebugAction","A StepIntoDebugAction the current context."
"CascadeNode","The first message has the common receiver, the rest have receiver == nil, which signifies cascading."
"OCThisContextVariable","I model thisContext variables"
"SlotLayoutEqualityTest",""
"MTDependantProjectTest","Test clas for a dependant project"
"TransferModel","I am a model representing a transfer during a drag and drop operation. I keep a pointer the source of the drag, and a pointer to what is dragged"
"SpecPragmaCollector","A SpecPragmaCollector is a specialized PragmaCollector.Sonce we just want specs defined on class side, we do not have to check the whole system, then to restrain."
"SugsInlineTemporary","This inline a variable in an assignment sentence"
"SparseLargeArray","A version of SparseLargeTable that does not populate its bins until a value other than the default is stored.!"
"GLMRubricHighlightedTextPresentation","|browser|browser := GLMTabulator new.browser row: #row.browser transmit to: #row; andShow: [ :composite |	composite custom: (GLMRubricHighlightedTextPresentation new		editingMode: [GLMHighlighterTextRubEditingMode 			withStylerDecorator: (RbEPersonDecorator new				styler:  (GLMHighlighterTextParserStyler new					parser: RbEPersonColorizer new))]) ].	browser openOn: 'person {		name	=	''Phil'';	age = ''23'';	}person {}'."
"MorphTreeResizerMorph","A resizer morph for a morphic based tree"
"StandardWindow","Themed SystemWindow that avoids being picked up except via the title bar. Supports opening in ""fullscreen"" mode, taking docking bars into account.Prevents yellow button menu.Uses TEasilyThemed for easy theme access to subclasses."
"SDL_ControllerButtonDownEvent","SDL2 library structure representing a game controller button down event data."
"ColorSelectorDialogWindow","Standard dialog for selecting a colour by HSVA colour selector, picking from the screen or editing of values."
"MetacelloSpecTestCase",""
"GTSpotterAllCandidatesAdded",""
"FilePluginPrims","I provide an interface to the primitives in the FilePlugin."
"GTSpotterRecorderShowPreviewEvent","A GTSpotterRecorderShowPreviewEvent models the action of explicitly closing the preview of an object."
"SettingTree","A SettingTree is responsible for the building of system setting trees from a collection of pragma.Built tree nodes are instances of SettingNode. Built trees are suitable for tree browsing with the help of a MorphTreeMorph (see SettingBrowser>>treeMorphIn: and SettingBrowser>>roots to know how a SettingBrowser is initializing its MorphTreeMorph with the help of a SettingTree). Below, two examples of tree building with a SettingCollector are shown.---------------(SettingTree acceptableKeywords: #(#'systemsettings')) settingTreeRoots. ""get system setting trees""---------------Instance Variables	collector		<PragmaCollector>	nodeList		<A list of SettingNode>"
"FileDialogWindowTest",""
"NECSymbols","I retrieve the symbols for the ecompletion algorithm.TODO remove stupid symbols (like packages and timestamps)"
"ClassSessionHandler","I handle a Session for a specific class, providing the API the class should implement.Handlers will be triggered by the SessionManager."
"RBCollectionCopyEmptyRule","Checks that all subclasses of the Collection classes that add an instance variable also redefine the copyEmpty method. This method is used when the collection grows. It copies over the necessary instance variables to the new larger collection."
"DecoratorStream","I am a basic decorator stream that will wrap a stream and forward messages to my decoree.Subclass me to write a decorator that reuses some methods."
"MCModel2MTModelVisitor","A MCModel2MTModelVisitor visits a Metacello model to transform it to a MT Model .Instance variables:	- project : the root element (an MTProject) of the target model		MCModel2MTModelVisitor new 	visitConfiguration: ConfigurationOfVersionner  	withVersion: (ConfigurationOfVersionner project version: #development)"
"ToolRegistry","I am serving as a system-wide hub for various tools.Instead of using direct class names for tools, which is not always nice because can introduce inter-packagedependencies, i provide a uniform way for accessing tools, via Smalltalk global:Smalltalk tools someToolName,where 'someToolName' is a name of the tool , under which some tool are registered.Tools are adding themselves to registry by implementing #registerToolsOn: message at class side, for example:MyClass>>registerToolsOn: registry   registry register: self as: #myToolRegisters a MyClass as a tool under name #myTool, and can be accessed via:Smalltalk tools myTool and avoid putting 'MyClass' reference into code.You can add  ' self registerToolsOn: Smalltalk tools ' in class #initialize,so your new tool(s) can be registered during package loading.To reset tool registry to defaults , use: Smalltalk resetTools.Also registry storing a map of inspector types. This is to replace an old scheme which using #inspectorClass , and introducing dependencies.Now, an inspecting class dont needs to have any knowledge about its specialized inspector.Instead, a specialized inspector could tell registry that it is available for inspecting instances of given class (see #registerInspector:for:  senders).This allows to avoid dependency from instance class to its inspector class or using extension methods.WARNING: The point of the tools registry is NOT to be a facade full of protocols but to be a registration for tools that get loaded. So, the tools registry should NOT hold specific tool's protocol.  the tool's client should invoke the correct methods of the tool.----------- The category 'menu' is for backward compatibility with ToolSet. We should remove it."
"Metaclass","My instances add instance-specific behavior to various class-describing objects in the system. This typically includes messages for initializing class variables and instance creation messages particular to a class. There is only one instance of a particular Metaclass, namely the class which is being described. A Metaclass shares the class variables of its instance.	[Subtle] In general, the superclass hierarchy for metaclasses parallels that for classes. Thus,	Integer superclass == Number, and	Integer class superclass == Number class.However there is a singularity at Object. Here the class hierarchy terminates, but the metaclass hierarchy must wrap around to Class, since ALL metaclasses are subclasses of Class. Thus,	Object superclass == nil, and	Object class superclass == Class.[Subtle detail] A class is know by name to an environment.  Typically this is the SystemDictionary named Smalltalk.  If we ever make lightweight classes that are not in Smalltalk, they must be in some environment.  Specifically, the code that sets 'wasPresent' in name:inEnvironment:subclassOf:instanceVariableNames:variable:words:pointers:classVariableNames:poolDictionaries:category:comment:changed: must continue to work."
"RussianEnvironment","EncodedCharSet initialize.LanguageEnvironment resetKnownEnvironments.Locale switchToID: (LocaleID isoLanguage: 'ru')."
"WideStringTest","This is the unit test for the class String. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"GTSpotterDiveInElement",""
"DiffMapMorph",""
"ExampleBuilderMorph","Morph with an inset border by default and theme access. Overrides openModal: to allow multiple free example dialogs to be presented."
"FloatArrayTest","These tests are used to assert that FloatArrayPlugin has same results as Float asIEEE32BitWord"
"ExpanderMorphAnnouncement",""
"ManifestSystemSources","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"FFITypeArrayTests",""
"ModifiedField","I encapsulate the modification of a slot.The two use-cases are: slot renaming or a changed slot type.Both cases enforce recompilation of all the methods accessing the corresponding variable.This is unlike the ShiftedField modification which is only used when the type of the slot does not change."
"FFIExternalStructureReferenceHandle","I'm an offset accessor for nested structures. The idea is that I remap the accessing to an offseted byte array, thus providing access to the inner structure without copying the values. This is useful when you have nested structures, something like this: struct StructNested {	int value;}struct StructA {	int one;	struct StructNested theNest;}then you can do something like this: s := StructA new.s theNest value: 42. And the value will be set in the StructA instance, not in a copy as before. "
"OSKeyboardEvent","i am the root of keyboard events hierarchy.The scan code represents an unique number identifying a key and comes directly from OS.Some keys can be directly translated to corresponding character(s) by OS and thus such events will carry character ~= nil. "
"RBProtectInstanceVariableTest",""
"SHPreferences","Preferences for Shout"
"FTFunction","I am an abstract class. My subclasses are some functions for a FastTable as search or filter.Description-------------------------------------------------I can be use in two way.  Implicitely I will not appear on the FastTable. Explicitely I can display a Widget on the FastTable.I work with  a FTTableMorph. I cannot be use alone.Public API and Key Messages-------------------------------------------------- #table: aTableMorph	is my constructor	- #keyStroke: anEvent	This is the method that will allow to use me implicitely. With this I will receive an event from the FastTable.	- #beExplicite	This method will make my functionnality explicit. For example the FTFilterFunction will display a filter field.	Example (Should only be create by a FTTableMorph)-------------------------------------------------FTFunction table: (FTTableMorph with: (1 to: 200))Internal Representation and Key Implementation Points.-------------------------------------------------    Instance Variables	table 	I am a FTTableMorph that use this function."
"GLMMorphPresentation","This presentation offers a means to embed a Morph. It makes sense only for the Morph Renderer."
"ExternalObject","External objects represent entities that are not part of the Smalltalk universe. They are accessed using a unique handle which is interpreted depending on the actual entity that is represented. Instance variables:	handle	<ByteArray | ExternalAddress>"
"TxViewCoordinatesToTextPositionTest",""
"ManifestUnicodeInitialization","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"IRPushTemp","push temp"
"RBRemoveClassVariableTest",""
"GoferRemoteChanges","Handling remote changes"
"RBPullUpInstanceVariableTest",""
"ZnServerSocketBoundEvent","ZnServerSocketBoundEvent signals a new server socket on address:port is bound (opened)."
"RBExcessiveVariablesRule","Sometimes instance variables are used instead of method arguments or temporaries. You can check if an instance variable's value is always valid during the complete lifetime of an object. In addition, looking at methods used together by a group of methods may be an indication that a new object should be created. Large classes often exhibit a large number of instance variables. Some people also confuse classes and namespaces. The defined number of instance variables can be edited in #variablesCount."
"MockTutorial","Mocking a tutorial for test purposes"
"GLMLinearLayout",""
"MCVersionMerger","Merge versions"
"FLNegative16SmallIntegerCluster","A cluster of unsigned int 16bit"
"NBExternalTypeValue","I'm a stub class intended just to easy migration from NB to UFFI. There is no corresponding class to replace me (you should not need it). In case you still need it, please contact community (pharo-users, slack) to get support."
"IRVisitor","I visit an IRMethod instructions and write them out to a print stream."
"MBSaveConfigurationCommand","Command to load a configuration in versionner"
"RBBrowserEnvironment","I am the base class for environments of the refactoring framework.I define the common interface for all environments.And I act as a factory for various specialized environments. See my 'environment' protocol.I am used by different tools to create a 'views' of subsets of the whole system environment to browse or act on (searching/validations/refactoring)create instances:RBBrowserEnvironment new forClasses:  Number withAllSubclasses.RBBrowserEnvironment new forPackageNames: { #Kernel }.query:|env|env := RBBrowserEnvironment new forPackageNames: { #Kernel }.env referencesTo:#asArray.-> RBSelectorEnvironment.browse:|env|env := RBBrowserEnvironment new forPackageNames: { #Kernel }.(Smalltalk tools browser browsedEnvironment: env) open."
"PopupChoiceDialogWindow","Presents a list of options in a popup format. If the list is long it will split into multiple columns. If very long, the columns will be scrollable. Maximum extent of the content area is half the display extent."
"RFASTClosureAnalyzer","We need to analyse the #after hook: it is a block"
"GTSpotterWidgetDarkThemer",""
"FTBasicTreeListDataSource","Simple tree list data source.For example usage see methods on the class side under the protocol ""examples"". "
"PragmaTest","SUnit tests for Pragma class"
"ZipFileMember","ZipNewFileMember instances are used to represent files that have been read from a ZipArchive.Their data stays in the file on disk, so the original Zip file cannot be directly overwritten."
"JobStart","A JobStart is announcement announcing the start of a job execution.SystemAnnouncer uniqueInstance 	on: JobStart send: #XXX to: whoever."
"GTSpotterHelp","A helper class containing the help for GT Spotter."
"ConfigurationOfUnifiedFFI",""
"MCDataStreamTest",""
"DAPackageAnalyzerTreeModel","A PDPackageAnalyzerTreeModel shows all dependent packages from a set of packages. Also you can see all type of the dependency, and browse them."
"FTEasyListMorph","I'm an easy list used to simplify the creation of lists.My parent is too powerful, I'm just a simplification of it (and no, I will not go to the psy to deal with that). Example: =========FTEasyListMorph new	extent: 300@550;	elements: Morph methods;	display: [ :method | method selector ];			openInWindow.	"
"MetacelloToolBoxConstructor",""
"IRInstVarAccess","I am a bytecode accessing an instance variable. As such, I have an index."
"MCBitbucketRepository",""
"GTSUnitDebuggerSmokeTest",""
"Latin1","This class represents the domestic character encoding called ISO-8859-1, also known as Latin-1 used for Most of the Western European Languages."
"SDL_Surface","SDL2 library structure"
"FLMethodNotFound","I represent an error produced during materialization when a serialized method in a class or trait name doesn't exist (at Smalltalk globals)."
"FileLocator","I am a late-bound reference. I refer to a file or directory in relation to a well-known location on the filesystem, called an origin. When asked to perform concrete operation, I look up the current location of my origin, and resolve my path against it. Usage----------FileLocator vmDirectory parent pathString	> '/Applications'FileLocator desktop.FileLocator desktop basename.FileLocator home basename.FileLocator image.FileLocator vmBinary asAbsolute pathString 	>  '/Applications/CogVM.app/Contents/MacOS/CogVM'FileLocator vmBinary pathString 	> '/Applications/CogVM.app/Contents/MacOS/CogVM'		Implementation------------------------origin 	A symbolic name for base reference I use to resolve myself.path	A relative path that is resolved against my origin""		"
"ParseNodeEnumerator","ParseNodeEnumerator implements ParseNode>>nodesDo:.  It can be used to enumerate an entire tree via	aParseNode accept: (ParseNodeEnumerator ofBlock: aBlock)or selectively, excluding the node and subnodes for which selectBlock answers false, via	aParseNode accept: (ParseNodeEnumerator							ofBlock: aBlock							select: selectBlock)Here's a doIt that generates and compiles the visiting methods:self superclass selectors do:	[:s|	self compile: (String streamContents:		[:str| | arg |		arg := 'a', (s allButFirst: 5) allButLast.		str nextPutAll: s, ' ', arg; crtab;			nextPutAll: '(theSelectBlock isNil or: [theSelectBlock value: '; nextPutAll: arg; nextPutAll: ']) ifFalse:'; crtab;			tab: 2; nextPutAll: '[^nil].'; crtab;			nextPutAll: 'theBlock value: '; nextPutAll: arg; nextPut: $.; crtab;			nextPutAll: '^super '; nextPutAll: s, ' ', arg])]"
"NetNameResolver","This class implements TCP/IP style network name lookup and translation facilities.Attempt to keep track of whether there is a network available.HaveNetwork	true if last attempt to contact the network was successful.LastContact		Time of that contact (totalSeconds).haveNetwork	returns true, false, or #expired.  True means there was contact in the last 30 minutes.  False means contact failed or was false last time we asked.  Get out of false state by making contact with a server in some way (FileList or updates)."
"GLMTreeMorphModel","ClassTree new openOn: Collection"
"GLMPortUpdater","This is a strategy that populates a portSymbol with the result of evaluating valueBlock."
"MetacelloScriptProjectSpecNotification",""
"RFMetaContext","I model the meta level when activating a MetaLink."
"GLMNoBrowser","A NoBrowser is a browser without behavior and that does not require a container pane. The root pane is always placed in a NoBrowser.Given that it has no behavior, a NoBrowser is a singleton to avoid multiple unnecessary instances."
"RBArgumentNode","I am a specific variable node for method and block arguments."
"MetacelloProjectRefTutorialConfig",""
"LabelClicked","I am an announcement raised when someone click on the label of a CheckboxMorph"
"ExampleForTest1","An example class at level 1 (directly below Object) used for testing class hierarchy"
"TxInsertedTextAnnouncement","I am announced right after some text are inserted into text."
"TraitAlias","See comment of my superclass TraitTransformation."
"GLMPortReferenceTest",""
"TextFontChangeTest","SUnit tests for class TextFontChange"
"PrintVersionCommandLineHandler","Usage: printVersion [ --numeric | --release ]	--numeric   Print the full version number only (e.g. 12345)	--release   Print the major relase number only (e.g. 1.2)	Documentation:Prints the version number in an easy to parse format. This can be used in Jenkins with the ""Description Setter"" Plugin. Configure it like this:Regular expression:  \[version\] (.*)Description: \1Examples:	pharo Pharo.image printVersion	#result will be something like:	[version] 3.0 #30100	pharo Pharo.image printVersion --numeric	# will print a simpler version	30100		pharo Pharo.image printVersion --release	# prints the Pharo release version	3.0"
"GLMBrickThemerModule",""
"ClassDescription","I add a number of facilities to basic Behaviors:	Named instance variables	Category organization for methods	The notion of a name of this class (implemented as subclass responsibility)	The maintenance of a ChangeSet, and logging changes on a file	Most of the mechanism for fileOut.	I am an abstract class, in particular, my facilities are intended for inheritance by two subclasses, Class and Metaclass."
"ZipArchive","A ZipArchive represents an archive that is read and/or written using the PKZIP file format.ZipArchive instances know how to read and write such archives; their members are subinstances of ZipArchiveMember."
"SearchFacade","SearchFacade is a facade for creating searching dialog window"
"MCMockClassD",""
"DynamicMessageImplementorTest","SUnit tests for class DynamicMessageImplementor"
"OSWindowTest","An OSWindowTest is a test class for testing the behavior of OSWindow"
"OSWindowFocusInEvent","I am delivered when window obtains a user input focus."
"RBConsistencyCheckRule","Checks for code using equality tests instead of the message sends. Since the code ""aCollection size = 0"" works for all objects, it is more difficult for someone reading such code to determine that ""aCollection"" is a collection. Whereas, if you say ""aCollection isEmpty"" then aCollection must be a collection since isEmpty is only defined for collections."
"IntegerArrayTest","SUnit tests for integer arrays"
"KMShortcutDeclaration","I represent a shortcut declaration for the settings pharo framework."
"MBConfigurationInfoTest","SUnit tests for MBConfigurationInfo in Versionner"
"AnnouncerTest","An AnnouncerTest is a test class used to test Announcer.Instance Variables	announcer:		<Announcer>  the announcer to testannouncer	- the announcer that is tested"
"NullStream","I am a stream that does nothing i.e. generates and consumes an infinite number of elements (NullObject pattern). I can be used as an equivalent of /dev/null (for example a logging in off mode) or for performance benchmarks."
"Bezier2Segment","This class represents a quadratic bezier segment between two pointsInstance variables:	via		<Point>	The additional control point (OFF the curve)"
"GLMMorphicFixedPanesFinderRenderer",""
"TextKernTest","SUnit tests for class TextKern"
"FLRectangleCluster","FLRectangleCluster is an optional class that optimizes Rectangle instances, since there are a lot of instances in the system, it makes sense to optimize them. We take advantage of bytecode optimizations done by Pharo for messages like #new, #@, #x and #y. In addition, we avoid the overhead of class reshape, etc. "
"GTSUnitExampleFailingTest","I am not a test! I provide usage examples for the SUnit debugger."
"FLGlobalClassSideCluster","I am a cluster for those Metaclasses and ClassTrait who are not stored in detail."
"MBSetUserCommand","Command to bset the user in Versionner"
"MetacelloProjectSpecTestCase",""
"IRPushClosureCopy","Instruction push closure copy bytecodeI am modelled as a Jump as the bytecode of the block is inlined into the method, with the execution jumping over these embedded bytecodes. "
"GLMInteractableBrickRenderer","A GLMInteractableBrickRenderer is more advanced Brick renderer, that is used in all interactable Bricks to allow on-fly change of background color or image"
"GLMMorphicActionRenderer",""
"OSTouchTwoFingersScrollDetector","I am detecting the scrolls made with two fingers.I send these event back to my handler: 	- OSTouchTwoFingersScrollBeginEvent 	- OSTouchTwoFingersScrollMoveEvent 	- OSTouchTwoFingersScrollEndEvent "
"GLMBrickLayoutDummState",""
"ParseStack","I keep track of the current and high position of the stack that will be needed by code being compiled."
"LayoutFrame","I define a transformation frame relative to some rectangle. I'm basic data structure used for graphics.Instance variables:	leftFraction 	topFraction 	rightFraction 	bottomFraction 	<Float>		The fractional distance (between 0 and 1) to place the morph in its owner's bounds	leftOffset 	topOffset 	rightOffset 	bottomOffset 	<Integer>	Fixed pixel offset to apply after fractional positioning (e.g., ""10 pixel right of the center of the owner"")"
"SpaceTally","I'm responsible to help getting information about system space usage. The information I compute is represented by a spaceTallyItemtry something like: ((SpaceTally new spaceTally: (Array with: TextMorph with: Point)) 	asSortedCollection: [:a :b | a spaceForInstances > b spaceForInstances]) SpaceTally new systemWideSpaceTallyThis class has been created from a part of SystemDictionary. It still deserves a niceclean, such as using object instead of array having 4 slots.sd-20 June 2003"
"GTSpotterSearchFinished",""
"RBToken","RBToken is the abstract superclass of all of the RB tokens. These tokens (unlike the standard parser's) remember where they came from in the original source code.Subclasses must implement the following messages:	accessing		lengthInstance Variables:	sourcePointer	<Integer>	The position in the original source code where this token began."
"WelcomeHelp","I'm the help page for welcoming new users. I pass through basic concepts to getting started with Pharo."
"MetacelloLoaderPolicy",""
"HaloSpec","Sets spec's for how handles are layed out in a halo."
"AGroupContentHasBeenModified","Notify that a group content has been modified"
"ArchiveMember","This is the abstract superclass for archive members, which are files or directories stored in archives."
"SystemHelp","This class defines Help for the system in front of you.It defines the default contents when you open a help browser.So ""HelpBrowser open"" is the same as ""HelpBrowser openOn: SystemHelp""."
"ReEntityCriticized","I am an event of an entity being criticized by the rules. Happens when #critics is called"
"MetacelloMCVersion",""
"Year","I represent a year."
"PackageMethodNodeExample","Example for a package method node"
"FalseTest","SUnit tests for false/False class"
"MailAddressToken","a single token from an RFC822 mail address.  Used internally in MailAddressParser"
"SizeInMemoryTest","SUnit tests for the size of objects in memory"
"ClassTrait","While every class has an associated metaclass, a trait can have an associated classtrait, an instance of me. To preserve metaclass compatibility, the associated classtrait (if there is one) is automatically applied to the metaclass, whenever a trait is applied to a class. Consequently, a trait with an associated classtrait can only be applied to classes, whereas a trait without a classtrait can be applied to both classes and metaclasses."
"ClassChangeRecord","A ClassChangeRecorder keeps track of most substantive changes premissible in a project, isolated or not.Structure:inForce		a boolean			Tells whether these changes are in effect.			true for all changeSets in and above the current project.			It should be sufficient only to record this for the changeSet			as a whole, but this redundancy could help in error recovery.classIsLocal	a boolean			True if and only if this class is defined in this layer of the			project structure.changeTypes an identitySet			Summarizes which changes have been made in this class.			Values include #comment, #reorganize, #rename,			and the four more summarized below.thisName	a string			Retains the class name for this layer.priorName	a string			Preserves the prior name.thisComment	a text			Retains the class comment for this layer.priorComment	a text			Preserves the prior comment.thisOrganization	a classOrganizer			Retains the class organization for this layer.priorOrganization	a classOrganizer			Preserves the prior organization.thisMD	a methodDictionary			Used to prepare changes for nearly atomic invocation			of this layer (see below).priorMD	a methodDictionary			Preserves the state of an altered class as it exists in the next			outer layer of the project structure.methodChanges		a dictionary of classChangeRecords			Retains all the method changes for this layer.Four of the possible changeTypes are maintained in a mutually exclusive set, analogously to MethodChangeRecords.  Here is a simple summary of the relationship between these four changeType symbols and the recording of prior state			|	prior == nil			|	prior not nil		---------	|----------------------------	|--------------------	add		|	add					|	change	---------	|----------------------------	|--------------------	remove	|	addedThenRemoved	|	removeA classChangeRecorder is notified of changes by the method		noteMethodChange: <ClassChangeRecord>.ClassChangeRecorders are designed to invoke a set of changes relative to the definition of a class in an prior layer.  It is important that both invocation and revocation of these changes take place in a nearly atomic fashion so that interdependent changes will be adopted as a whole, and so that only one flush of the method cache should be necessary.  A further reason for revocation to be simple is that it may be requested as an attempt to recover from an error in a project that is failing."
"GTSpotterCandidatesAmountChanged",""
"GTSimpleMethodsBrowser","This browser is used to browse the class structure of every object in the inspector.Example:self openOn: World"
"FLDictionaryCollectionCluster","A FLDictionaryCollectionCluster is a special optional cluster that rather than using the default (variable object) serialization, uses #keysAndValuesDo: to iterate objects and #add: during materialization. This way we avoid analyzing/serializing lots of nil. Also, the rehash is not needed. So far we use it for Dictionary, IdentityDictionary and MethodDictionary."
"TickingSpecWindow","TickingSpecWindow new openInWorld"
"ExceptionTester","Utility class to test exceptions"
"ComposableMorph","Morph with an inset border by default and theme access."
"GLMBrickLayoutParentState",""
"FTExamples","A list of examples. See class side."
"OCCompilerTest","CompilerTest is a holder for SUnit test of Compiler"
"GLMBrowserClosed","Browser is closed"
"OSSDL2MultiTouchDriver","A window driver used for running things using SDL2 library with multi touch handling	"
"MBGroupInfoTest","SUnit tests for MBGroupInfo in Versionner"
"MCServerCredentials","I store a username and password."
"NECModel","I'm an abstract class that stores the entries to be completed."
"DebugAction","A DebugAction is the entry point for creating debugging actions.A new debugging action is created by subclassing it and implementing, by default, the method executeAction (This can be configured by using the method actionSelector).  An id must also be provided uniquely identifying the action among all the others.The initialize method should only set default values or initialize attributes that are independent of the debugger or session. The others must be initilized in the method forDebugger:.A debugging action has the following lifecycle: 	- the action is created using #new and #initialized is called	- #appliesToDebugger:, and for contextual actions #appliesToContext: are called	- if the actions applies to the current situation #forDebugger: is used to set the debugger	- #execute is called when the user triggers the action.	- when the debugger updates its action this process is repeated."
"ManifestRingCoreContainers","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"Trait","Each trait in the system is represented as an instance of me. Like Class, I concretize my superclass by providing instance variables for the name and the environment. Since traits do not define variables, I not provide facilities for pool variables. However, I declare an instance variable to hold the associated classtrait, which is an instance of the class ClassTrait. "
"GTExampleModified",""
"GlyphForm","A specialized form for glyphs"
"OCBC2IR2BCSymbolic",""
"RBAddPoolVariableChange",""
"RubAbstractSmalltalkMode","I am an abstract class to set a mode of editing for smalltalk"
"MCSmalltalkhubRepository","I am specialized version of an MCHttpRepository for http://smalltalkhub.com.I support a faster mcz listing that does not rely on parsing an html size."
"TextEditorDialogWindow","Multi-line text entry dialog."
"ZnServerTests",""
"CairoFontMetricsProvider","Provide font metrics (Cairo)"
"GTSpotterEventCollectorBackwardCompatibilityTest",""
"StringMorphEditor","I am a textMorph used as a pop-up editor for StringMorphs.  I present a yellow background and I go away when a CR is typed or when the user clicks elsewhere."
"GTSpotterScrollPageDown",""
"MorphicWindowAdapter","I am the adapter used to bridge a WindowModel and a SystemWindow"
"UUIDTest","SUnit tests for UUID"
"TxWrappingMorph","Any morphs embedded in the text should use me as a wrapper.This class is private (you are not supposed to create its instances by yourself).This morph wraps a user morph, embedded in a text,and provides some helpers for the morph's positioning etc.An example of using an embedded object can be found in #exampleWithEmbeddedObjectTo insert sanembedded object send #insertObject: to a text position, for example:text endPosition insertObject: 123."
"GLMExplicitBrowser","A GLMExplicitBrowser is a browser that allows the user to explicitly define the panes and the flow of transmissions between them."
"SystemAnnouncerTest",""
"GTSpotterBreadcrumbSeparatorRenderer",""
"Heap","Heap implements a special data structure commonly referred to as 'heap' [ http://en.wikipedia.org/wiki/Heap_%28data_structure%29 ]Heaps are good at handling priority queues because:	1) greatest priority element according to the sort block will be stored in first position and thus accessed in O(1) operations	2) worse time for inserting or removing an element is in O(log n) operations, where n is the size of the Heap	Insertion/Removal times are more efficient than above upper bound, provided that:		a) Elements are only removed at the beginning		b) Elements are added with arbitrary sort order.	3) there is no need to fully sort the Heap, which makes it more efficient than a SortedCollectionThe heap can be fully sorted by sending the message #fullySort.Worse time for fully sorting the Heap is in O(n log n) operations, but this is rarely used a feature.Remind that the Heap does not fully sort the collection if you don't ask.Thus don't expect #do: and other iterators to enumerate elements according to the sortBlock order.Instance variables:       array           <Array>         The data repository       tally           <Integer>       The number of elements in the heap       sortBlock       <Block|nil>     A two-argument block defining the sort order,                                                       or nil in which case the default sort order is                                                               [:element1 :element2| element1 <= element2]       indexUpdateBlock        <Block|nil>                                                       A two-argument block of the form [:data :index | ... ]                                                       which allows an application object to keep track of its                                                       index within the heap.  Useful for quick heap update                                                       when object's sort value changes (for example, when an                                                       object in a priority queue has its priority increased                                                       by an external event, you don't want to have to search                                                       through the whole heap to find the index before fixing                                                      the heap).  No update occurs if nil.The Heap can be viewed as a binary tree (every node in the tree has at most two children).The root is stored in first slot of internal array.The children are stored in next two slots.The children of children in next four slots.etc...For a node A of index i (1 based), the two children B1 and B2 are thus stored in indices (2*i) and (2*i+1).Of course, the children indices must be less than the tally otherwise they are considered inexistent.The Heap does arrange to preserve the following invariant:For any children B of a node A, A is sorted before B, in other words, (self sort: A before: B) = trueThis implies that the root is always the first element according to sort order."
"MissingClassError","I'm a specialized error that is invoked when trying to load a method for a non existing class. By default this exception is not resumable but it can be set and used for example as follow:	[ FileStream fileIn: aFile ]		on: MissingClassError		do: [ :exception | 				exception defineClass. 				exception asResumable.				exception resume. ]						So we give the possibility to compile and resume compution.The method defineClass defines a simple class inheriting from Object (or from the class specified using #superclassName:)The idea is that if later the effective class is loaded its definition will override  this one. "
"FTSearchFunction","I define a search function for a table. I respond to any alphanumeric element and I add a search box to the  owner table. I use FTDataSource>>#searchTable:text: as input for my searchs. In general, my entry point is through #keyStroke:, because I intend to react to keyboard inputs in the owner table."
"IRTranslatorV2","I visit IRMethod instructions, sending the appropriate bytecode messages to my BytecodeGenerator (gen). "
"FFICalloutMethodBuilderTestContext","I'm a context for make tests run. I'm polymorphic with Context and in some way also with CompiledMethod (but just in the context of the execution of the tests for method builder)."
"MBGroupInfo","A MBGroupInfo holds information on a group defintiion.Instance Variables	groupContents:		an array with group contents as literals ."
"GLMFastTreeDataSource","I'm a model datasource to handle glamour fast tree presentations.Description --------------------My basics functionnalities works as in my superclass but I do not get my data at my creation. Instead I ask to my Glamour presentation to get them.I work with a GLMFastTreePresentation and a GLMMorphicFastTreeRenderer. Internal Representation and Key Implementation Points.--------------------    Instance Variables	announcer:		This is an announcer use to work with Glamour workflow. 	glamourPresentation:		This is a glamour presentation use to get some informations as the data manage by myself.	tagsToFilterBy:		This is a list of filtering tags for the dasaSource."
"ZnTooManyDictionaryEntries","ZnTooManyDictionaryEntries is signalled when too many entries are added to a limited ZnMultiValueDictionary.Part of Zinc HTTP Components. "
"RBAddInstanceVariableRefactoring",""
"ColorForm","ColorForm is a normal Form plus a color map of up to 2^depth Colors. Typically, one reserves one entry in the color map for transparent. This allows 1, 3, 15, or 255 non-transparent colors in ColorForms of depths 1, 2, 4, and 8 bits per pixel. ColorForms don't support depths greater than 8 bits because that would require excessively large color maps with little real benefit, since 16-bit and 32-bit depths already support thousands and millions of colors.ColorForms have several uses:  1) Precise colors. You can have up to 256 true colors, instead being limited to the 8-bit color palette.  2) Easy transparency. Just store (Color transparent) at the desired position in the color map.  3) Cheap color remapping by changing the color map.A color map is an Array of up to 2^depth Color objects. A Bitmap colorMap is automatically computed and cached for rapid display. Note that if you change the color map, you must resubmit it via the colors: method to flush this cache.ColorForms can be a bit tricky. Note that:  a) When you BitBlt from one ColorForm to another, you must remember to copy the color map of the source ColorForm to the destination ColorForm.  b) A ColorForm's color map is an array of depth-independent Color objects. BitBlt requires a BitMap of actual pixel values, adjusted to the destination depth. These are different things! ColorForms automatically maintain a cache of the BitBlt-style color map corresponding to the colors array for the last depth on which the ColorForm was displayed, so there should be little need for clients to work with BitBlt-style color maps.  c) The default map for 8 bit depth has black in the first entry, not transparent.  Say (cform colors at: 1 put: Color transparent)."
"GoferMetacelloLoad","I am a Gofer Operation that extracts a metacello configuration from the current repository and loads the given version."
"RPackageTraitSynchronisationTest","SUnit tests for RPackage trait synchronization"
"FBDDecompilerTest",""
"BalloonBezierSimulation","This class is a simulation of the code that's run by the Balloon engine. For debugging purposes only."
"ReflectivitySourceCodeAgroupation","I'm an agroupation of ReflectivityCodeMorph"
"MetacelloMCValueHolderSpecTestCase",""
"GLMSomeNotNilCondition","Used to test if at least a defined  arguments of a condition is not nil."
"GLMMenuItemSelected",""
"AthensCairoCanvas","my instances representing a low-level cairo context and mapped to cairo_t * C type"
"RBPatternWrapperBlockNode","RBPatternWrapperBlockNode allows further matching using a block after a node has been matched by a pattern node.Instance Variables:	wrappedNode	<RBProgramNode>	The original pattern node to match"
"GLMBrowser","The Browser is one of the core components in Glamour.It contains panes and transmissions between their ports. These transformations can either be explicitely defined by the user (such as in the Tabulator) or implicitely defined (such as in the Finder).Browsers serve as composition managers. They determine when and under which conditions transmissions should be triggered and how they connect the ports of panes. In return, panes inform the browsers when event occur on their ports so that the browser can make an informed decission on what to do.A Browser is a Presentation which means that it can be nested into other browsers."
"ZdcAbstractSSLSession","I am ZdcAbstractSSLSession, an object managing the secure communication between two parties.I define the abstract interface for my subclasses.More specifically, I handle connection setup handshaking as well as the encryptionand decryption of data travelling between two parties.Apart from instanciating and later explicitely destroying me, I am used by feeding data into me using the methods in my operations protocol. These might result in data thathas to be sent to the other side.I am propably too primitive to be used directly, see ZdcSecureSocketStream for a higher level client."
"GLMExplicitBrowserCopyTest",""
"DropListItem","A DropListItem is an item (wrapper) designed to fit into a DropList"
"GLMFocusedPageChanged",""
"RBSubclassResponsibilityNotDefinedRule","This rule checks if all subclassResponsibility methods are defined in all leaf classes. if such a method is not overridden, a subclassResponsibility message can be occur when this method is called."
"ScaledDecimal","ScaledDecimal implement a special kind of Fraction that prints in decimal notation.It uses a limited number of digits (scale) after the decimal separation dot and round the result.Note that a ScaledDecimal does not printOn: exactly, however it will storeOn: exactly because the full precision fraction is kept in memory.This is mostly usefull with denominators being powers of 10."
"SystemSettingLauncher","Used to launch a setting"
"OSTouchGestureNeedingThresholdDetector","I am a gesture detector for gestures who has to travel a certain distance before being detected"
"TableContainerModel","I am a model for a container with table layout. My purpose is to hold multiple subwidgets to glue them together.I should not be used directly"
"KomitRemote","I am an abstract class representing a remote repository"
"GTSpotterTriangleRenderer",""
"GTSpotterDoubleLinkedList",""
"ManifestToolTranscript","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"RBSequenceNode","RBSequenceNode is an AST node that represents a sequence of statements. Both RBBlockNodes and RBMethodNodes contain these.Instance Variables:	leftBar	<Integer | nil>	the position of the left | in the temporaries definition	periods	<SequenceableCollection of: Integer>	the positions of all the periods that separate the statements	rightBar	<Integer | nil>	the position of the right | in the temporaries definition	statements	<SequenceableCollection of: RBStatementNode>	the statement nodes	temporaries	<SequenceableCollection of: RBVariableNode>	the temporaries defined"
"IRSend","Instruction ""send: selector"" or ""send: selector toSuperOf: behavior"""
"WeakLayout","I am a special layout for weak variable sized objects such as WeakArray.I contain a fixed number of Slots plus.Instances of classes using this kind of layout have only a minimum given size. Instances have a custom number of additional weak fields which can be accessed with an index.References held in the variable part are held weakly and might be nilled out by the garbage collector at any time. References in the named section are held strongly as in the default layout."
"GLMPresentStrategy","The abstract strategy that deals with setting of presentations on the pane of the destination port."
"ISO885915TextConverter","Text converter for ISO 8859-15.  An international encoding used in Western Europe, similar to ISO 8859-1 but adds the Euro symbol and drops others like one quarter."
"MCVersionInfoWriter","I serialize an MCVersionInfo into a given stream.If the version info has been serialized before I output a compacted version consiting of the id."
"AthensAffineTransform","I support the same protocol than AthensTransform,but in addition I store a plain 2x3 matrix with state accessible at any moment.This is different to AthensTransform because it does not expose its internal storage, because it can be backend specific."
"CollectionValueHolder","I am designed specifically for collections."
"TraitBehavior","I declare the instance variables methodDict, traitComposition and localSelectors that normally would be defined on PureBehavior (see class comment of PureBehavior). Furthermore I keep track of where I am used and I provide compatibility methods to make me useable in tools where originally a class was expected."
"MessageNode","I represent a receiver and its message.	Precedence codes:	1 unary	2 binary	3 keyword	4 other	If special>0, I compile special code in-line instead of sending messages with literal methods as remotely copied contexts."
"GoferMerge","Merge work"
"MalGraphNode","Default representation of a graph vertice (node)."
"RubNotificationStrategy","I encapsulate the logic that gets executed when, during compilation, a RubSmalltalkEditor receives a notification from the compiler. I am an abstract class. My subclasses define the actual behaviour."
"GLMSmalltalkCodeModel",""
"GTFilterBlock",""
"GLMTestPane",""
"ConfigurationCommandLineHandler","Command line handler for dealing with Metacello configurations from the command lineUsage: config [--help] <repository url> [<configuration>] [--install[=<version>]] [--group=<group>] [--username=<username>] [--password=<password>]	--help              show this help message	<repository url>    A Monticello repository name 	<configuration>     A valid Metacello Configuration name	<version>           A valid version for the given configuration	<group>             A valid Metacello group name	<username>          An optional username to access the configuration's repository	<password>          An optional password to access the configuration's repository	Examples:	# display this help message	pharo Pharo.image config		# list all configurations of a repository	pharo Pharo.image config $MC_REPOS_URL		# list all the available versions of a confgurtation	pharo Pharo.image config $MC_REPOS_URL ConfigurationOfFoo		# install the stable version	pharo Pharo.image config $MC_REPOS_URL ConfigurationOfFoo --install		#install a specific version '1.5'	pharo Pharo.image config $MC_REPOS_URL ConfigurationOfFoo --install=1.5		#install a specific version '1.5' and only a specific group 'Tests'	pharo Pharo.image config $MC_REPOS_URL ConfigurationOfFoo --install=1.5 --group=Tests"
"RubPluggableTextMorphExample","shows how to use a RubPluggableTextMorph.see example class side"
"GTSpotterMorph",""
"RBThreeElementPointRule","Checks arithmetic statements for possible three element points (i.e., a point that has another point in its x or y part)."
"FFIExternalValueHolderType","I'm an external value holder type (see ==FFIExternalValueHolder==  comment)."
"GTEventConsolidateTest","A GTEventConsolidateTest is a test class for testing the behavior of GTEventConsolidate"
"GLMMorphicPharoScriptRenderer",""
"MethodDictionaryTest","SUnit tests for MethodDictionary"
"ImageReadWriter","Copyright (c) Kazuki Yasumatsu, 1995. All rights reserved.I am an abstract class to provide for encoding and/or decoding an image on a stream.Instance Variables:	stream		<ReadStream | WriteStream>	stream for image storagesClass Variables:	ImageNotStoredSignal		<Signal>	image not stored error signal	MagicNumberErrorSignal		<Signal>	magic number error signalSubclasses must implement the following messages:	accessing		nextImage		nextPutImage:	testing		canUnderstand         (added tao 10/26/97)"
"MetacelloValidationIssue",""
"MBVersionCommand","Superclass for commands on versions"
"QSystemTally","Tally for assembling system profiles. It's a subclass of Link so we can chain tallies together in the receivers list."
"MemoryStore","I'm a specific store for memory file system"
"MBAddRepositoryCommand","Command to add a repository in Versionner"
"LayoutCell","I am used in table layouts to hold temporary values while the layout is being computed.Instance variables:	target 		<Morph>		The morph contained in this cell	cellSize 		<Point>		The size of the cell	extraSpace 	<nil | Point>	Additional space to add after this cell	nextCell 	<nil | LayoutCell>	The next cell in the arrangement.Implementation note:Both, cellSize and extraSpace contains points where	x - represents the primary table direction	y - represents the secondary table direction"
"FLProxyThatBecomesItsContent","Used at #testObjectByProxyThatBecomesItsContent"
"AnnouncementsTutorial","This is a custom help book providing a tutorial for the announcements framework."
"GTSpotterExceptionsTest",""
"ZnEncodedWriteStream","I am ZnEncodedWriteStream, an abstract support class for write streams on a binary encoded wrapped stream.Part of Zinc HTTP Components"
"PSMCChangesGrouper","I am a visitor on MCDefinition objects. I will group a collection of definitions into a tree that will be shown in the PSMCPatchMorph."
"DiffMorphChangeRecordConverter","A DiffMorphChangeRecordConverter is a converter used to show the diff between two methodreferences with a side by side view."
"SelectorFilter","A filter for selectors"
"GLMBrickListModel","A GLMBrickListAdaptor is scriptable implementation of adaptor that is mostly used with list scroll brickInstance Variables	countLogic:		<Object>	morphLogic:		<Object>	origin:		<Object>countLogic	- xxxxxmorphLogic	- xxxxxorigin	- xxxxx"
"DAPackageAnalyzerCycleDetectionWindow","UI merging SpecTreeModel package dependencies and Nautilus UI."
"SpecExamples","A SpecExamples is the first sub-book of SpecHelpTopics. It contains examples of using Spec.See class side for selectors."
"RBRefactoringBrowserTest",""
"STONListWriter","STONArrayWriter helps in writing array based STON representations."
"MorphicTreeColumnAdapter","I am the bridge between a TreeColumnModel and a MorphTreeColumn.Ialso add support for on the fly refresh"
"GTExampleFinder",""
"TabWithNoContents","Error raised when a tab is asked its contents but have no morph and no retrieving block, or the retrieving block is returning nil."
"LimitedWriteStream","A LimitedWriteStream is a specialized WriteStream that has a maximum size of the collection it streams over. When this limit is reached a special limitBlock is executed. This can for example be used to ""bail out"" of lengthy streaming operations before they have finished.  For a simple example take a look at the universal Object printString.The message SequenceableCollection class streamContents:limitedTo: creates a LimitedWriteStream. In this case it prevents very large (or possibly recursive) object structures to ""overdo"" their textual representation. "
"OSWindowAthensExampleEventHandler","I am the event handler linked to the SDL2AthensExample"
"GLMPagerScrollBrick",""
"AthensMorphScene","Allows to render a morph as a scene in athens"
"SDL_Point","SDL2 library structure"
"MCScannerTest",""
"MCVersionInspector","I am a tool that visually represents an MCVersion. While I can be opened on anMCVersion, you've probably seen me most often after saving a package in the Monticello Browser. I have buttons to perform common version-related actions - like browsing, loading, and viewing changes. In my main text area, I display the following information about my version - name, author, timestamp, UUID, ancestors and log message."
"GTSpotterDebuggingExceptionHandler",""
"BalloonMorph","A balloon with text used for the display of explanatory information.Balloon help is integrated into Morphic as follows:If a Morph has the property #balloonText, then it will respond to #showBalloon by adding a text balloon to the world, and to #deleteBalloon by removing the balloon.Moreover, if mouseOverEnabled is true (see class msg), then the Hand will arrange to cause display of the balloon after the mouse has lingered over the morph for a while, and removal of the balloon when the mouse leaves the bounds of that morph.  In any case, the Hand will attempt to remove any such balloons before handling mouseDown events, or displaying other balloons.Balloons should not be duplicated with veryDeepCopy unless their target is also duplicated at the same time."
"SDL_TouchFingerDownEvent","SDL2 library structure"
"MetacelloScriptExecutor","MetacelloScriptExecutor decodes script args and launches MetacelloScriptEngine to run for each projectSpec encounters...i,e., primarily here to handl array and block args to configuration:, baseline: or project:."
"FLByteObjectCluster","I am the generic cluster for storing and loading variable byte objects."
"TestInWorldMorph","Helper class for MorphTest"
"NBExternalAddress","I'm a stub class intended just to easy migration from NB to UFFI. The corresponding class to replace me is: ExternalAddress."
"PropertySlot","I am a Slot that does not allocate one field for each slot. Instead, all PropertySlots of the whole hierarchy are allocated in a dictionary that is stored in an invisible slot (see PropertyBaseSlot)Keep in mind:- I am slower than instance variables- there is the overhead of the Dictionary. Only if there are multiple ones of me in the class hierarchy you will save memory"
"NoBroadcastAllowed","A socket primitive failed due to no broadcast being allowed on this socket.This failure is fairly specific, as IPv6 does not include broadcast, and it is not supported by the TCP protocol.Usually, the cause is one of two things;- We tried sending to the wrong address- We should have #setOption: 'SO_BROADCAST' value: true on the (UDP) socket"
"NewHandleMorph",""
"FLBlockClosureSerializationTest","SUnit tests for fuel serialization of block closures"
"GTInspectorMethodListFilter","GTInspectorMethodListFilter implements a filtering strategy for presentations based on method signatures (method selector and class).The filter returns true for a method if the signature of that method is selected in the filter. To be taken into account during filtering a signature must be first added to the filter and the selected. Only signatures that have been first added can be selected. "
"TTLCache","I am TTLCache. I am an LRUCache.I record a timestamp when I store a value for a key.Upon a cache hit, I check if the timestamp of the stored value does not exceed the allowed time to live duration - if so, the value has become stale and I will retrieve the value again.The default timeToLive is 1 hour.Note that eviction, making room in a full cache, still happens according to the LRU algorithm from my superclass - stale entries to not get evicted automatically.I can remove all my stale values in O(n), see #removeStaleValues.Implementation NotesI extend my superclass by storing TTLAssociations (which also hold a timestamp) instead of Associations in the DoubleLinkedList, lruList, ordered from least to most recently used.In case of a hit, there is now an additional check to see if the value has become stale (exceeded its time to live). If so, the value is computed again.Timestamps are implemented using Integer seconds (Time totalSeconds) for performance reasons."
"RBRemoveParameterRefactoring",""
"FLClassNotFound","I represent an error produced during materialization when a serialized class or trait name doesn't exist."
"VSSaveProjectCommand","A command to save all dirty packages of a project, including the configuration."
"MorphicEvent","This class represents the base for all events.Instance variables:	stamp	<Integer>	The millisecond clock time stamp (based on Time millisecondClock)	source	<Hand | nil>	If non-nil the hand that generated the event."
"Key","I represent a keyboard Key. I am mapped from the platform specific keycodes into a common keycode base, by using my class side methods."
"GTSpotterCandidateLink",""
"SDL_GameController","I represent a handler for a game controller coming from SDL2. A game controller is a joystick with an mapping. According to the SDL2 documentation, if a game es being executed via Steam, the game controller mapping is provided automatically."
"SocketStream","SocketStream is a wrapper for class Socket making it easy to write networking code by giving the programmer a stream-like protocol. A Socket is a two way communication link with two logically separate channels - input and output. The Socket class is the lowest level in Pharo for network communication and using it directly can be difficult and bug prone.A SocketStream can be in binary or ascii mode, ascii is the default which means you are transmitting and receiving Strings. Most Internet protocols are in clear text ascii, like for example HTTP. Another setting is what timeout you want to use - default is the standardTimeout from Socket. More settings can be found in the method category 'configuration'.Simplest example of connecting, sending/receiving and closing:| stream result |stream := SocketStream openConnectionToHostNamed: 'www.pharo-project.org' port: 80.[[stream nextPutAll: 'GET / HTTP/1.0'; crlf; crlf; flush.result := stream upToEnd. ""Give us all data until the socket is closed.""Transcript show: result; cr.]	ensure: [stream close]]		on: ConnectionTimedOut		do: [:ex | Transcript show: ex asString;cr. ex resume]There are two important things to note above:	- The methods in category ""stream in"" can signal two exceptions (unless turned off with #shouldSignal:):		ConnectionClosed and ConnectionTimedOut	- We close the stream using #ensure:, that is to make sure it isn't left opened.	- We use #on:do: to catch any signal. In this case we do not need to catch ConnectionClosed since #upToEnd does that for us intrinsically.----------------SocketStream (below called SS) is a reimplementation of 'Old'-SocketStream (below called OSS) - the class that originates from the original Comanche implementation but now is included in standard Squeak. SS has the same protocol as OSS and is meant to replace it. SS is faster, more flexible, is better documented and adds a few features:1. #shouldSignal:, which decides if SS should signal low level Socket exceptions (true) or if it should swallow them like original OSS did. Default is true. The only reason I added this is for backwards compatibility - not signalling causes problems - see bug 4 below.2. #nextAllInBuffer, #nextInBuffer:, #skip:, #receiveData:, #nextPutAllFlush: and #recentlyRead are new additions to the public protocol.It also fixes various bugs:1. #isDataAvailable could theoretically answer false, when there actually is some in the buffer in OSS. If #receiveDataIfAvailable reads the last byte then the following ""socket dataAvailable"" would answer false. So the last byte would be sitting in the inStream missed.2. #upToAll: in OSS has several problems, for example - #positionOfSubCollection:ifAbsent: which was introduced answers one position too low. This was compensated in upToAll:, but only in the pushBack: call, not the actual result being returned which was cut short 1 byte. Amusingly this makes KomHttpServer not use ""Keep-Alive"" since the last $e in 'Alive' was cut short. :)3. SS doesn't inherit from PositionableStream since that just breaks various inherited messages, like for example #skip:. OSS should IMHO be changed to inherit from Object - or of course, replaced in full with SS. :)4. Since SocketStream by default signals closes and timeouts the SocketStreamTest now passes. The reason for SocketStream to fail is that while it does timeout on a low level (#SocketStream>>receiveData doesn't hang forever) - the callers of #receiveData sometimes loop - like in #next:, and thus eliminates the timeout. SS warns about some methods (in their method comments) not honouring timeouts if shouldSignal is false, I really don't know what they should do in that case:	#next:, #upTo:, #upToAll: and #upToEnd (and #receiveData:)The primary reason for the SS implementation is optimal performance. The main differences in implementation with the old OSS are:1. SS uses two buffers directly (inBuffer and outBuffer) with pointers marking start and stop within the buffer. OSS instead uses two regular streams, a ReadStream and a WriteStream. Using internal buffers makes it possible to avoid copying and reallocation in various ways, it also makes SS be able to have specialized growing/buffer moving behaviour.2. #upTo:, #upToAll: and #peekForAll: uses selectged String messages that in turn uses fast primitives for searching. OSS used other messages that fell back on byte per byte reading.3. #receiveData in OSS creates a temporary buffer stream for each call! During a long read operation, like say #upToAll: (which for example is used when uploading files using HTTP POST forms), this is devastating - especially since the default size is only 2000 bytes - and leads to a very high number of low level read operations on the Socket, typically 100 times more calls than with OSS. The buffer in OSS is held in an instvar (not recreated for each call), is larger from the start and above all - grows dynamically by doubling. OSS can also avoid a grow/reallocation by doing a ""move down"" if data has been read from the SS as it comes in and through that making room in the lower part of the inBuffer. The net result is that upToAll: for large files is about 10 times faster.4. The implementation of upTo: and upToAll: tries to avoid doing unnecessary find operations in the buffer and is greedy by default, which means it favors reading more data - if available - before searching for the stop sequence. If we had #findString:startingAt:stoppingAt: this wouldn't have to be greedy and we wouldn't be needlessly scanning dead buffer area. VM hackers? Also, while you are at it - make it work for ByteArrays too. :)SS can not be run unbuffered, since that seems unneeded. The option to autoFlush is still available, with it set to true SocketStream (just like OSS) will flush on its own on each nextPut:/nextPutAll:, otherwise flushing it will have to be done manually but is done on close.The first performance tests shows that, as noted above, receiving large amounts of data using #upToAll: is greatly improved - factor of 10. Serving HTTP with small payloads seemed at first not be faster at all - but this is due to the high overhead of Socket connect/close and other things. Increasing payloads show a difference and especially with keep alive on - where the new SS roughly doubles the throughput!"
"ManifestCollectionsAtomic","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"MCRepositoryAdded","Announcement sent when a Repository is added to a Repository group."
"AthensSceneView","i am simple morph for representing some scene.The scene is any object which implements #renderOn: method,or a block with single argument.(an argument passed is an Athens canvas).I implement a simple view panning and zooming with mouse drag and mouse-wheel (correspondigly).Example1: open scene view, by passing a simple rendering block.| view |view  := AthensSceneView new.view scene: [:canvas |	canvas surface clear:  Color black.	canvas setPaint: Color red.	canvas drawShape: (0@0 corner:120@100)].view openInWindow.Example2: open scene view on imported SVG file (note you need 'Athens-SVG' package loaded):| view |view  := AthensSceneView new.view scene: (AthensSVGConverter fromFile: 'lion.svg').view openInWindow."
"AllProtocol","An AllProtocol is a special protocol to hanlde the ""all"" case"
"Group","AbstractGroup3 is an abstraction of what a group is."
"FLSerializationTest","Superclass for serialization tests"
"TickSelectionListNodeMorph","A TickSelectionListNodeMorph is the morph used to render the tree used to render te tick list"
"SDL2","A bunch of functions in a single class for accessing SDL2 interface"
"DirectoryExists","I am raised on an attempt to create a directory that already exists."
"VSDevCycleCommand","Versionnner commands related to the development workflow."
"ZipEncoder","A ZIP encoder"
"SlotTest",""
"TextMethodLink","An active link in a text linking to a method"
"UnixEnvironment","I am a specialized OSEnvironment version for *nix systems (Linux, OSX)."
"EyeCharacterInspector","I am  EyeCharacterInspector.I am a EyeInspector.I offer a specialized inspector to look at Character instances. I show the Unicode code point in standard notation, like U+0041 for $A."
"RBBrowserEnvironmentTest",""
"RBPatternMessageNode","RBPatternMessageNode is a RBMessageNode that will match other message nodes without their selectors being equal. Instance Variables:	isCascadeList	<Boolean>	are we matching a list of message nodes in a cascaded message	isList	<Boolean>	are we matching each keyword or matching all keywords together (e.g., `keyword1: would match a one argument method whereas `@keywords: would match 0 or more arguments)"
"GZipReadStream","gzip is an integral part of the VM. "
"SDL_ControllerButtonEvent","SDL2 library structure representing a game controller button event data."
"UnixPlatform","I am a an object representing a Unix platform. Use myself to access platform specific features.Please keep me polymorphic to the the other platform objects.To get the current platform, you can evaluate:OSPlatform current."
"MBAbstractPackageCommand","For grouping package commands"
"Pharo3TabPanelBorder","Specialized border for TabGroup. Does not draw border beneath the selectd tab and only draws on top."
"RBAddClassChange",""
"MethodDefinitionAcceptor","I am an acceptor in the context of method definition"
"OCSemanticError","Raises a semantic error during semantic analysis"
"ConfigurationOfRubric","ConfigurationOfRubric loadDevelopment."
"PaneScrolling","I am an announcement raised when a scroll pane is scrolled.My two attributes are	- step: a point representing the scrollbar movement	- scrollPane: a pointer to the widget raising the announcement"
"DockingBarMenuLineMorph","A DockingBarMenuLineMorph is specialized version of its superclass for DockingBar behavior."
"PaginatedMorphTreeModel","A morphic based tree model with pagination"
"TxCharacterSpanDisplayCommand",""
"OCASTTranslatorForValue","I override some methods in my super to generate instructions for effect and value only."
"RBSmalllintContext",""
"DATarjanAlgorithmTest",""
"AthensCairoTransform","i implement AthensTransform protocol using cairo-specific functions."
"WeakSet","I'm a Set with weak elements. Implementation.	flag is a special object that indicates that at a given slot the set has a free entry."
"RBErrorToken","I'm an scanned error.I can have multiple causes."
"TextDiffBuilderTest","Tests for the new algorithm that is diffing changes.Tests from L. Uzonyi (from squeak trunk System.ul207and 208)"
"RBAbstractVariablesRefactoring",""
"GLMTransmissionTriggered","A GLMTransmissionTriggered is announced by a browser when a transmission brokered by the browser is triggered."
"MetacelloPackageLoadDirective",""
"RBExtraBlockRule","Check for blocks that are immediately evaluated. Since the block is immediately evaluated, there is no need for the statements to be in a block.For example, [:x | 1 + x] value: 4 is equivalent to 1 + 4"
"DAPackageRelationGraphGenerator","A PDGraphVizGenerator is a class able to generate a dot file from a relationGraph (PDPackageRelationGraph)"
"WidgetBuilt","I am raised when a widget has been built"
"MCMockDefinition","A mock definition used for testing purposes"
"ListModelTest","testing ListComposableModel"
"AthensCairoStrokePaint","i represent stroke paint in cairo backend"
"DATarjanAlgorithm","A class to do Tarjan Algorithm on a PDPackageRelation, in order to detect strongly connected components.Give a package dependency graph (PDPackageRelationGraph)  in entry of the message run to run the Tarjan algorithm and retrieve all the strongly connected components graph."
"RubWorkspaceExample","self open"
"MetacelloScriptingError",""
"MethodModified","This announcement is emited when we RE-compile a method in a class or a trait, with: ClassDescription >> compile: or TraitDescription >> compile:. If the method is not yet registered in the class or the trait, the announcement will not be emitted.The action of renaming a method will be handled by SystemMethodRemovedAnnouncement and SystemMethodAddedAnnouncement, since this refactoring is concretely composed by removing the old method and add a new with the new name  "
"FileStream","I represent a Stream that accesses a FilePage from a File. One use for my instance is to access larger ""virtual Strings"" than can be stored contiguously in main memory. I restrict the objects stored and retrieved to be Integers or Characters. An end of file pointer terminates reading; it can be extended by writing past it, or the file can be explicitly truncated.	To use the file system for most applications, you typically create a FileStream. This is done by sending a message to a FileDirectory (file:, oldFile:, newFile:, rename:newName:) which creates an instance of me. Accesses to the file are then done via my instance.*** On DOS, files cannot be shortened!  ***  To overwrite a file with a shorter one, first delete the old file (FileDirectory deleteFilePath: 'Hard Disk:aFolder:dataFolder:foo') or (aFileDirectory deleteFileNamed: 'foo').  Then write your new shorter version."
"PackageCreatorTreeModel","I am the model to manage packages selection to add them in groups"
"OCASTTranslatorForEffect","I override some methods in my super to generate instructions for effect only."
"OpalEncoderForLongFormV3PlusClosures","An encoder for the V3 bytecode set augmented with the following bytecodes that are part of the full closure implementation.	138   10001010 jkkkkkkk		Push (Array new: kkkkkkk) (j = 0)								or	Pop kkkkkkk elements into: (Array new: kkkkkkk) (j = 1)	140   10001100 kkkkkkkk jjjjjjjj 	Push Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	141   10001101 kkkkkkkk jjjjjjjj 	Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	142   10001110 kkkkkkkk jjjjjjjj 	Pop and Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	143   10001111 llllkkkk jjjjjjjj iiiiiiii	Push Closure Num Copied llll Num Args kkkk BlockSize jjjjjjjjiiiiiiiiThis is an exact duplicate of EncoderForV3PlusClosures.Could be a trait (or in Newspeak, a Mixin).For now we impose upon you to synchronise any and all changes between these two classes."
"Encoder","I encode names and literals into tree nodes with byte codes for the compiler. Byte codes for literals are not assigned until the tree-sizing pass of the compiler, because only then is it known which literals are actually needed. I also keep track of sourceCode ranges during parsing and code generation so I can provide an inverse map for the debugger."
"RBAbstractClassVariableTest",""
"RBPushDownMethodRefactoring",""
"GLMPortIdentifierTest",""
"FLMultiByteStreamStrategy","I am a strategy for MultiByteBinaryOrTextStream.."
"NBExternalEnumeration","I'm a stub class intended just to easy migration from NB to UFFI. The corresponding class to replace me is: FFIExternalEnumeration."
"WriteStream","I represent an accessor for a sequence of objects that can only store objects in the sequence."
"GroupWindowMorph","I'm a morph where you can drag windows to group them as tabs.Try:(GroupWindowMorph new openInWindowLabeled: 'Window organizer') extent: 400@400."
"RBAndEnvironment","I am the combination of two RBEnvironments, a logical AND. That is: entity A is in this environment if it is in BOTH environment I am constructed from.Do not construct instances of me directly, use method #& for two existing environments:env1 & env2 -> a RBAndEnvironment."
"HSVAColorSelectorMorph","Colour selector featuring a saturation/volume area, hue selection strip and alpha selection strip."
"FFIExternalArrayType",""
"RBPullUpMethodTest",""
"GLMMorphicValidatorRenderer",""
"GLMBasicExamples","self open"
"RGGlobalDefinition","An RGGlobalDefinition is an abstract superclass for representing classes, global variables and shared pools"
"MCFileTreeStCypressWriter","Writer for Cypress format see https://github.com/CampSmalltalk/Cypress"
"SelectorChooserMorph","A SelectorChooserMorph is an IdentifierChooserMorph specialized to allow a selector query from a selector prefix and for a TextMorph. When the prefix starts with an uppercase, then, only globals names and class names that begins with the prefix are shown.Otherwise, all systems symbols that begins with the prefix are presented (the string comparison is not case sensitive).It takes the keyboard focus when a navigation key (up, down, left or right key) is first pressed in the TextMorph from which it has been opened.Instance Variables	prefix: <String>	requestorPos <Point>	prefix	- The prefix which has been used to compute the labels list.requestorPos	- private, used to be able to automatically close the menu if the position of the requestor is changing"
"ConfigurationOfAthens","""Load latest stable version ""self loadStable.""Load latest development version""self loadDevelopment Extras:Tutorialself project lastVersion load: 'Tutorial'""SVG importer""(note before doing this you need to load XMLParser,which you can find in Configurations browser)self project lastVersion load: 'SVG'"
"RBAddMethodChange",""
"SugsRenameInstanceVar","I know how to rename an instance variable"
"MethodGroup","A group containing methods"
"IRMethod","I am a method in the IR (intermediate representation) language consisting of IRInstructions grouped by IRSequence (basic block).  The IRSequences form a control graph (therefore I only have to hold onto the starting sequence).  #compiledMethod will convert me to a CompiledMethod.  #methodNode will convert me back to a parse tree."
"NautilusMonticello","A NautilusMonticello is a class used to handle monticello integration into Nautilus by creating the menu entries"
"RBInlineAllMethodTest",""
"RubLipsumBasicExample","""When the text is wrapped, it is slower but the text has 1798 lines""[self openWrapped] timeToRun       ""Enjoy the speed when not wrapped! ""[self openNotWrapped] timeToRun  "
"RubSelectionChanged","I am raised when the current selection is modified "
"Base64MimeConverterTest","This is the unit test for the class Base64MimeConverter. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"NullTextStyler","This class is a styler NullObject"
"TTLAssociation","I am TTLAssociation. I am an Assiciation.I maintain a timestamp that gets updated each time my value changes.I decide myself when I am stale, using a cache defined default time to live."
"WatchpointTests",""
"FFIExternalStructureFieldSpec","I'm a field spec for fields in FFIExternalStructure"
"CompiledMethodTrailer","I am responsible for encoding and decoding various kinds of compiled method trailer data.I should not expose any binary data outside of myself, so all tools which working with compiled methodsshould ask me to encode the meta-data, they want to be added to the compiled method trailer, as well as retrieve it.To add a new kind of trailer, you should give it a proper name and define it in the #trailerKinds method at my class side.Then you need to implement a corresponding #encode<your name> and #decode<your name> methods at instance side. Then add any public accessor methods, which will use a newly introduced trailer kind for communicating with outer layer(s).An encodeXXX methods should store result (byte array) into encodedData instance variable.A decodeXXX methods should read the data from compiled method instance, held by 'method' ivar,and always set 'size' ivar (denoting a total length of trailer in compiled method) and optionally 'data' ivar which should keep a decoded data, ready to be used by outer layer(s) using accessor method(s) you providing.The kind of compiled method trailer is determined by the last byte of compiled method.The byte format used is following: 	""2rkkkkkkdd""where 'k' bits stands for 'kind' , allowing totally 64 different kinds of method trailerand 'd' bits is data.Following is the list of currently defined trailer kinds:NoTrailer , k = 000000, dd unusedmethod has no trailer, and total trailer size bytes is always 1ClearedTrailer, k = 000001, method has cleared trailer (it was set to something else, but then cleared) dd+1  determines the number of bytes for size field, and size is a total length of trailer bytesSo a total length of trailer is: 1 + (dd + 1) + sizeTempsNamesQCompress, k = 000010the trailer contains a list of method temp names,  compressed using qCompress: method. dd+1  determines the number of bytes for size field, and size is a number of bytes of compressed buffer.So a total length of trailer is:  1 + (dd + 1) + sizeTempsNamesZip, k = 000011the trailer contains a list of method temp names,  compressed using GZIP compression method. dd+1  determines the number of bytes for size field, and size is a number of bytes of compressed bufferSo a total length of trailer is: 1 + (dd + 1) + sizeSourceBySelector, k = 000100the trailer indicates , that method source is determined by a class + selector where it is installed to. Trailer size = 1.SourceByStringIdentifier, k = 000101the trailer indicates , that method source is determined by a class + some ByteString identifier. dd+1  determines the number of bytes for size of ByteString identifier, and size is number of bytes of string.A total length of trailer is:  1 + (dd + 1) + sizeEmbeddedSourceQCompress, k = 000110the trailer contains an utf-8 encoded method source code, compressed using qCompress methoddd+1  determines the number of bytes for size field, and size is a number of bytes of compressed source codeA total length of trailer is:  1 + (dd + 1) + sizeEmbeddedSourceZip, k = 000111the trailer contains an utf-8 encoded method source code, comressed using GZIP dd+1  determines the number of bytes for size field, and size is a number of bytes of compressed bufferA total length of trailer is:  1 + (dd + 1) + sizeVarLengthSourcePointer, k = 001000the trailer is variable-length encoded source pointer. dd bits is unused.ExtendedKind, k = 001001the next byte of trailer (one that prepends the last byte of compiled method)denotes an extended kind of trailer, allowing to use additional 256 kinds of encoding method's trailer in future. SourcePointer, k = 111111 the trailer is encoded source pointer. Total trailer size is 4-bytes (this kind of encoding is backwards compatible with most of existing compiled methods)"
"MetacelloNameNotDefinedError",""
"FLInMemoryBasicSerializationTest","SUnit tests for basic in memory serialization"
"WriteStreamTest","A trait for test purposes"
"NECTypedModel","I'm the model for a typed completion, that means when a receiver class is known. I only have selectors. I have an expand toggle: When false I filter out Object and ProtoObject selectors. The default value is true."
"CategoryAdded","This announcement will be emited when adding a category using:=> SystemOrganizer >> addCategory:"
"TextStyleAsFontFamily","Text style as font family"
"SmallIdentityDictionary","I'm a SmallDictionary (this means faster than default one when dealing with limited number of items)but I check my key based on identity."
"OSTouchTwoFingersScrollEndEvent","Two fingers stopped to scroll"
"TutorialPlayerTestWithMockTutorial","SUnit tests for tutorial player"
"TxAthensRenderingTest",""
"FixedFaceFont","I am a font for special purpose like password or fallback.I can show same form whenever someone requests any character.Variable displaySelector is future use to show a form dynamically.(Although it would be unnecessary...)"
"MD5Test",""
"NECClassVarEntry","I represent a class Variable"
"GTSpotterBrickThemer",""
"ZnResponseWrittenEvent","ZnResponseWrittenEvent signals that response was written in duration milliseconds."
"PharoCommandLineHandler","Usage: [--no-preferences|--preference-file=<FILE>][<subcommand>] [--help] [--copyright] [--version] [--list] [ --no-quit ]	--help       print this help message	--copyright  print the copyrights	--version    print the version for the image and the vm	--list       list a description of all active command line handlers	--no-quit    keep the image running without activating any other command line handler	<subcommand> a valid subcommand in --list		Preference File Modification:	--preference-file   load the preferences from the given <FILE>	--no-default-preferences    do not load any preferences from the default locations	Documentation:A PharoCommandLineHandler handles default command line arguments and options.The PharoCommandLineHandler is activated before all other handlers. It first checks if another handler is available. If so it will activate the found handler."
"RubTextFieldMorph","I am a morph for a text area which has only one line, like search field"
"IconSetChanged","I'm announced when an IconSet has been changed. "
"GLMExplicitBrowserTest",""
"RunArrayTest","SUnit tests for class RunArray"
"MCServerRegistry","Registry for metacello servers"
"FileSystemError","I am an abstract superclass for errors that may occur during filesystem operations."
"RelationSlot","I'm a Slot that represents one side of a relationship. If this side of the relationship is updated I take care of keeping the other side up to date.I'm abstract, use  the ToOne or ToMany  subclass depending on the cardinality.Instance Variables	inverseName:		<String>	inverseSlot:		<RelationSlot>	targetClass:		<Class> or <Symbol>inverseName	- the name  of the slot of the other side of the relationshipinverseSlot	- the slot of the other side of the relationshiptargetClass	- the class or the name of the class this slot refers to"
"ASTCacheReset","Announcement signaled to tell that the default AST Cache has been reset.Tools that want persistant AST annotations can subscribe to this announcement to reinstall annotations."
"GoferReinitialize","I'm a private and internal class to Gofer. I'm a command used to call the class side initializers on all package code."
"Semaphore","I provide synchronized communication of a single bit of information (a ""signal"") between Processes. A signal is sent by sending the message signal and received by sending the message wait. If no signal has been sent when a wait message is sent, the sending Process will be suspended until a signal is sent."
"SpecSplitterVertical","A SpecSplitterVertical is the description of the addition of a vertical splitter"
"KMStorage","I am a storage of shortcuts. I store and provide facilities to access named and annonimous shortcuts."
"STONWritePrettyPrinterReadTests","STONWritePrettyPrinterReadTests tests pretty printed serialization followed by materialization."
"UpdateStreamer","I'm a little class inspired heavily from Utilities that download update.list and launch update.you can tell me to update throw a given number of update or to be verbose.UpdateStreamer new 	beVerbose;	updateFromServer	This will update all the updates available and show up dialogs	"
"AthensTextRenderTest","Visual tests for correct rendering of text using Athens"
"MultistateLabelMorph",""
"OSTouchStateGestureDetector","I am a gesture detector who detects gestures with a begin, current and end state"
"MailMessageTest","SUnit tests for MailMessage"
"BehaviorTest","SUnit tests for Behavior"
"GTSpotterStep","It models one step in the spotter search.A step knows:- the origin object - the active processors that handle the query, and the candidates- the selected candidate, and- the list of all filtered candidatesIt also knows the stream through which the list of candidates is affected.The key method is process:"
"ZnMessage","I am ZnMessage, an abstract class representing an HTTP Message.Part of Zinc HTTP Components."
"PluggableToggleButtonMorphExample","I keep some examples on how to use a PluggableToggleButtonMorph"
"ASTTransformExamplePluginActive","This class changes the default compiler used to compile itself to include the AST transforming plugin ASTPluginMeaningOfLife.#example42 does not mean what you think it means (see bytecode)"
"GLMBrickAbstractModel","A GLMBrickAbstractAdaptor is an interface for all adaptors to be used with brick lazy widgets"
"OCClosureCompilerTest",""
"ZnConnectionEstablishedEvent","ZnConnectionEstablishedEvent signals that a client HTTP connection to hostname:port (address:port) was established in duration milliseconds. This time includes DNS resolving."
"MCDependencySorterTest",""
"QACriticClickedOn","Happens when someone clicks on a critic to highlight the thing"
"SugsWorkspaceContext","I am a context that know how to work with a basic  Workspace."
"NECPreferences","I control the preferences for completion framework. It is the same for NECompletion and NOCompletion (and other potential completion algorithms should be configured here too)"
"DateModel","A DateModel is a widget for choosing dates. It consists of:- A text box, into which you can type any string which can be converted into a Smalltalk date- A button, which displays a calendar, from which you can select a dateUsage:- the simplest way is to add a DateModel in your UI, and send #date when you want its value.- or, register to be notified when the date changes:	DateModel new		date: self date;		whenDateChanged: [ :newDate | self date: newDate ].As it is Spec-based, it can be easily adapted and composed into a larger UI."
"WindowOpened","I am emitted when a window opened."
"SpecDropListMorph","I am a special DropList with icons"
"MyTestError","An error for tests"
"MorphAnnouncement","I am an abstract announcement for morphic events.  I carry the morph where the event has ocurred.My subclasses should add information for more precise events."
"AbstractWidget","AbstractWidget is an abstraction for the different widget which could be used to compose the Nautilus UI.Note however that the design is ugly because it mixes UI and Model. All the code in this hierarchy is conceptually bogus and should be rewritten."
"RBUnderscoreAssignmentRule","Replace _ by :="
"MetacelloPostLoadDirective",""
"ZnEntityTests",""
"RBAssignmentInBlockRule","Checks ensure:, ifCurtailed:, and showWhile: blocks for assignments or returns that are the last statement in the block. These assignments or returns can be moved outside the block since these messages return the value of the block."
"ZnEntityReaderTests",""
"ASTCache","I am a simple cache for AST nodes corresponding to CompiledMethods in the image. The cache is emptied when the image is saved."
"LazyTabPageRemoved",""
"PackageWidget","PackageWidget is the basic implementation of a wiget managing Packages and Groups.Note however that the design is ugly because it mixes UI and Model. All the code in this hierarchy is conceptually bogus and should be rewritten."
"RxCharSetParser","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--I am a parser created to parse the insides of a character set ([...]) construct. I create and answer a collection of ""elements"", each being an instance of one of: RxsCharacter, RxsRange, or RxsPredicate.Instance Variables:	source	<Stream>	open on whatever is inside the square brackets we have to parse.	lookahead	<Character>	The current lookahead character	elements	<Collection of: <RxsCharacter|RxsRange|RxsPredicate>> Parsing result"
"CurrentChangeSetChanged","Announce that the current change set has changed"
"BorderedMorph","BorderedMorph introduce borders to morph. Borders have the instanceVariables borderWidth and borderColor. BorderedMorph new borderColor: Color red; borderWidth: 10; openInWorld.BorderedMorph also have a varaity of border styles: simple, inset, raised, complexAltFramed, complexAltInset, complexAltRaised, complexFramed, complexInset, complexRaised.These styles are set using the classes BorderStyle, SimpleBorder, RaisedBorder, InsetBorder and ComplexBorder.BorderedMorph new borderStyle: (SimpleBorder width: 1 color: Color white); openInWorld.BorderedMorph new borderStyle: (BorderStyle inset width: 2); openInWorld."
"TextLineEndingsTest","This is a test case for Text>>withSqueakLineEndings and String>>withSqueakLineEndings.The main problem we've seen with the Text version is that it doesn't preserve formatting correctly."
"FLMapper","The purpose of my hierarchy is to map objects with clusters."
"MetacelloBaselineConstructor","##MetacelloBaselineConstructor**MetacelloBaselineConstructor** extracts the #baseline pragma from a **BaselineOfConfiguration** and produces a **MetacelloVersion**:.```SmalltalkMetacelloBaselineConstructor on: BaselineOfExample```"
"GLMMockPagerModel",""
"GLMContextChanged","A GLMContextChanged is announced by a presentation when an outer port event raises."
"DADependencyItemDiff","A PDDependencyItemDiff is a object which represent a dependent package who added/removed from an old analysis."
"GLMActionBrickDarkThemer",""
"PluggableTextAttribute","An attribute which evaluates an arbitrary block when it is selected."
"HMAC","HMAC is a mechanism for message authentication using cryptographic hash functions. HMAC can be used with any iterative cryptographic hash function, e.g., MD5, SHA-1, in combination with a secret shared key.  The cryptographic strength of HMAC depends on the properties of the underlying hash function.See RFC 2114."
"RBExtractMethodToComponentTest",""
"OSWindowGenericRenderer","I am an abstract renderer that provides a generic API for native window rendering."
"AbstractTreeFilter","I am an abstract class for tree filters.My children should propose a filter for tree nodes"
"ZnMultiThreadedServer","I am ZnMultiThreadedServer.I inherit most features from ZnSingleThreadedServer.  ZnMultiThreadedServer startDefaultOn: 1701.  ZnMultiThreadedServer default authenticator: (ZnBasicAuthenticator username: 'foo' password: 'secret').  ZnClient new username: 'foo' password: 'secret'; get: 'http://localhost:1701'.I am multi threaded, I fork a new process for each incoming request.I try to keep connections alive in each process.Part of Zinc HTTP Components."
"NautilusPackageSelected","I announce when a package is selected"
"TraitComposition","I hold a collection of trait transformations and provide important facilities to query the trait composition. For each trait in the composition clause there exists exactly one transformation in the collection.Note, that directly manipulating the composition of a class or trait does not effect changes automatically. Use PureBehavior>>setTraitComposition: to do this. You have to make a copy of the old trait composition before changing it because only the difference between the new and the old composition is updated!"
"MetacelloProjectRegistry",""
"InfiniteForm","I represent a Form obtained by replicating a pattern form indefinitely in all directions."
"SugsProcessBrowserContext","I know how to use a ProcessBrowser to extract the information needed for the suggestions"
"TextAnchor","TextAnchors support anchoring of images in text.  A TextAnchor exists as an attribute of a special text placeholder - ""(Character value: 1) asText"".  Depending on whether its anchoredMorph is a Morph or a Form, it repositions the morph, or displays the form respectively.  The coordination between composition, display and selection can best be understood by browsing the various implementations of placeEmbeddedObject:.In the morphic world, simply embed any form or morph in text.	| textWithForm |	textWithForm := (Text withAll: 'Text with -->'), (Text string: (String value: 1) attribute: (TextAnchor new anchoredMorph: ThemeIcons current homeIcon)), (Text withAll: '<-- embedded Form').	textWithForm asMorph openInHand.	| textWithMorph |	textWithMorph := (Text withAll: 'Text with -->'), (Text string: (String value: 1) attribute: (TextAnchor new anchoredMorph: EllipseMorph new)), (Text withAll: '<-- embedded Morph').	textWithMorph asMorph openInHand."
"RubSmalltalkCodeMode","I represent the mode to use for editing smalltalk code"
"RGMetaclassDefinition","RGMetaclassDefinition is a concrete representation of metaclasses of classes (traits are excluded)"
"PreDebugResumeDebugAction","A PreDebugResumeDebugAction adds the ResumeDebugAction to the pre debug window.Instance Variables	preDebugWindow:		<Object>preDebugWindow	- xxxxx"
"FilePathEncoder","This class absorb the difference of internal and external representation of the file path.  The idea is to keep the internal one as much as possible, and only when it goes to a primitive, the encoded file path, i.e. the native platform representation is passsed to the primitive.	The converter used is obtained by ""LanguageEnvironment defaultFileNameConverter""."
"FLPharo3Platform","A FLPharo3Platform is xxxxxxxxx."
"CollapsedMorph","This Morph is used to show  a collapsed Morph when the World lacks a Taskbar. "
"DateParser","Read a Date from the stream based on the pattern which can include the tokens:			y = A year with 1 to n digits (after 2000)		yy = A year with 2 digits (after 2000)		yyyy = A year with 4 digits		m = A month with 1 or 2 digits		mm = A month with 2 digits		d = A day with 1 or 2 digits		dd = A day with 2 digits			...and any other Strings inbetween. Representing $y, $m and $d is done using	\y, \m and \d and slash itself with \\. Simple example patterns:		'yyyy-mm-dd'		'yyyymmdd'		'yy.mm.dd'		'y-m-d'"
"ClassVariable","I model Class Variables and therefore Pool Variables, too. I am stored as a binding in the classPool of the class defining me.The compiler forwards bytecode generation to me for accessing the variable.You can subclass me and implement #read and #write: for creating special kinds of globals that can be used as special class Variables (similar to special Slots)."
"NECEntryDescription","A NECEntryDescription is a holder for some information to be displayed."
"ArgumentNamesTest","SUnit tests for generating argument names"
"SpecHelpTopics","A SpecHelpTopics is the main class which holds the documentation of Spec. This documentation can be accessed from the Help Browser.See class side for selectors."
"OCContextTempMappingTest","This testcase tests that we can correctly get the value of the temp vars from a context. That is, - it finds the correct context where the variable is defined to get the value - it handles well copying and temp vectorsProbably tests are missing covering all possible combinations of   - temps  - copying temps  - temp vectors  - nested blocks  - blocks from dead contexts  - optimized blocksHowever this class is a starting point for this."
"ClassTreeExample","ClassTreeExample new openOn: Object"
"AlphaInfiniteForm","Alpha aware InfiniteForm."
"InformationLinePlugin","A little line to show information...."
"GLMTextEditorRequest","I indicate to the renderer to execute a message on the text editor morph that contains the actual text."
"FLDelayedSerializerMock",""
"ToggleMenuItemShortcutWithText","I show a menu as a text. I'm the simplest mechanism and then, the default."
"TextLine","A TextLine embodies the layout of a line of composed text.	left right top bottom		The full line rectangle	firstIndex lastIndex		Starting and stopping indices in the full text	internalSpaces		Number of spaces to share paddingWidth	paddingWidth		Number of pixels of extra space in full line	baseline				Distance of baseline below the top of the line	leftMargin			Left margin due to paragraph indentationTextLine's rather verbose message protocol is required for compatibility with the old CharacterScanners."
"ReflectivityCodeMorph","I'm a morph that shows the source codes of a compiled method "
"ColorArray","An array of colors"
"MCMczWriter","Writing MCZ format"
"RBSmalllintChecker","I apply a lint rule to all classes and methods in a given environment.My main API is - ==run== which resets and runs the rules."
"PluggableSliderMorph","A pluggable slider (rather than one that auto-generates access selectors). Needs to be themed..."
"OSMouseWheelEvent","i am delivered when user scrolling the mouse wheel"
"ClassRepackaged","Notify about repackaging of a class"
"PackageTreePackageNodeModel","I'm a package node model."
"SortedCollectionTest","SUnit tests for sorted collections"
"SimpleTestResourceCircular1","I'm a simple test ressource for test purposes"
"ExampleForTest111","An example class at level 3 (indirectly below Object) used for testing class hierarchy"
"SDL2TouchExample","Example for multi-touch devices."
"KomitterUI","I am a new UI to help Pharo coder to save their code with a finer granularity that a whole package"
"ParserNotification","Common superclass for parser notifications"
"FontChooser","I'm an object holding information to choose a font from a list of fonts."
"GLMBrickPopupDarkThemer","I'm a style module related to popup and modified for Dark Theme"
"GTSpotterDeploymentExceptionHandler",""
"DenyDialogWindow","Dialog window displaying a message with a single OK button. Escape/return will close. Icon is a themed lock icon."
"MetacelloMCVersionSpecTestCase",""
"ZipCrcTests",""
"GTSpotterA1",""
"TabManager","I am the entry point for tabs.I am composed of a TabBar and a Morph used as a canvas to render the morph represented by the selected tab.I am very stupid (as you can see only four methods). I just listen to selected tab, and render it"
"HistoryIterator","A HistoryIterator holds an UndoRedoGroup in order to store an history of commands with the possibility of undoing and redoing. The iterator cursor is represented by the index inst var. Index always contains the position of the command that can be currently undone. So, undo decrease index and redo increase index. When a new record is stored, then, index contains the newly added record position.See HistoryIteratorTest for examples.Instance Variables	index:		<Integer>	maxSize:		<Integer>	plugged:		<Boolean>	recorder:		<UndoRedoGroup>index	- the iterator cursormaxSize	- the maximum number of records that can be added in the root group.plugged	- if false, then adding of command is not allowed. Useful to prevent bad history recording recurssions (record while undoing or redoing).recorder	- The root of the history tree which records undo/redo commands"
"TestCase","A TestCase is an implementation of the Command pattern to run a test.  TestCase instances are created with the class method #selector:, passing the symbol that names the method to be executed when the test case runs.  Various UIs exist to run these instances and they can also be created and run programmatically.When you discover a new fixture, subclass TestCase and create a #test... method for the first test.  As that method develops and more #test... methods are added, you will find yourself refactoring temps into instance variables for the objects in the fixture and overriding #setUp to initialize these variables.  As required, override #tearDown to nil references, release objects and deallocate.See my superclass' comment for assertion and logging information."
"TimeProfiler","TimeProfiler is a graphical front end of MessageTally. It gives nice facilities to navigate and browse a profile.Use examples:TimeProfiler new openTimeProfiler new openOnBlock: [SimpleGridExample new open]TimeProfiler new openOnBlock: [ClassTreeExample new openOn: Object] MessageTally spyAllOn: [ClassTreeExample new openOn: Object]"
"GTSpotterCandidatesList","A model utility class that provides a way to handle the list of candidates shown in the spotter result.The candidates are stored in a linked list."
"SimpleTestResourceB1","I'm a simple test ressource for test purposes"
"CodeRewritingAcceptor","I am an acceptor in the context of code rewriting using RBTreeRewriting"
"ZnDigestAuthenticatorTests",""
"ZnPercentEncoderTests",""
"GLMExpanderContentsNodeModel",""
"GLMMultipleUpdateAction","This class simply specifies that the updating announcement could come from any of the objects in the announcer objects collection."
"STONReader","STONReader materializes objects using the Smalltalk Object Notation format.This parser is backwards compatible with standard JSON.Customization options are:- acceptUnknownClasses <Boolean> default is false	if true, unknown class names are allowed, the standard #mapClass (Dictionary) is instanciated and the class name is added under #classNameKey (#className)	if false, unknown class names result in a NotFound error- convertNewLines <Boolean> default is false	if true, any unescaped EOL sequence CR, LF or CRLF inside strings or symbols is read and converted as the chosen EOL sequence	if false, CR, LF and CRLF are read unmodified- newLine <String> default is String cr	sequence to use as EOL"
"RubScrolledTextMorphThemerForGLMWhitespaceTheme",""
"GLMBrickPopupThemer","I'm a style module related to popup"
"ClassStoredSetting","I am responsible for keeping class name."
"LazyMorphListMorph","Support for morph lists in PluggableMorphListMorph."
"FLGlobalCompiledMethodCluster","I clusterize CompiledMethods that will be obtained on materialization accessing method dictionary of the corresponding class in Smalltalk globals."
"AllocationTest","Test originally from Andreas Raab"
"ZnSimplifiedByteEncoder","I am ZnSimplifiedByteEncoder, a concrete subclass of ZnCharacterEncoder.I handle single byte encodings where byte values 0 to 127 map to ASCII and 128 to 255 are a permutation to Unicode characters.I am like ZnByteEncoder, a subclass of me, but I implement just two mappings, latin1 or iso-8859-1 and ASCII, to conserve memory."
"IRBuilderTest",""
"DAPackageUnderAnalysisNode","A PDPackageNode is used to display a package in a tree."
"FLGlobalClassSerializationTest","I test the serialization of classes as *global* objects, i.e. the classes has to be present in the image at materialization time."
"TTLCacheTests",""
"FileLocatorTest","SUnit test for FileLocator"
"MenuTitleMorph","This is a TitleMorph used by MenuMorph.""	Example usage:	| menu |		menu := MenuMorph new.	menu buildTitle: [ :titleMorph | titleMorph		title: 'aCoolTitle';		icon: self theme icons alertIcon;		withCloseBox;		withPinBox;		color: Color purple			].	... "" add items"" ...		menu popUpInWorld"
"IdentityNewValueHolder","I am a special because I announce changes only if the new value set is different from the current value."
"GLMKeyStroke",""
"GTEventUnpacking","I represent an unpacking object that is able to receive serialized objects, e.g., FUEL or STON, and tries all available packing systems to unpack the serialized objects.Others can ask me for materializing an object by sending me #unpack:. I resent the request to GTEventPacking objects and if anyone is able to materialize it, I will return the materialized object. Otherwise, I raise an error.Collaborators Part: GTEventPacking, GTEventInitializationError, GTEventUnpackingError.Public API and Key Messages- unpack: aByteArray- addPacking: aGTEventPacking- how to create instances: #default on the class side.Example:	(GTEventUnpacking default		unpack: (GTEventPacking ston 					pack: (GTEventCollector new 							add: 1; add: 2; add: 3; yourself)) 			data) unpackedData Internal Representation and Key Implementation Points.    Instance Variables	packings:		<OrderedCollection>"
"Float","My instances represent IEEE-754 floating-point double-precision numbers.  They have about 16 digits of accuracy and their range is between plus and minus 10^307. Some valid examples are:		8.0 13.3 0.3 2.5e6 1.27e-30 1.27e-31 -12.987654e12Mainly: no embedded blanks, little e for tens power, and a digit on both sides of the decimal point.  It is actually possible to specify a radix for Float constants.  This is great for teaching about numbers, but may be confusing to the average reader:	3r20.2 --> 6.66666666666667	8r20.2 --> 16.25If you don't have access to the definition of IEEE-754, you can figure out what is going on by printing various simple values in Float hex.  It may help you to know that the basic format is...	sign		1 bit	exponent	11 bits with bias of 1023 (16r3FF) to produce an exponent						in the range -1023 .. +1024				- 16r000:					significand = 0: Float zero					significand ~= 0: Denormalized number (exp = -1024, no hidden '1' bit)				- 16r7FF:					significand = 0: Infinity					significand ~= 0: Not A Number (NaN) representation	mantissa	53 bits, but only 52 are stored (20 in the first word, 32 in the second).  This is because a normalized mantissa, by definition, has a 1 to the right of its floating point, and IEEE-754 omits this redundant bit to gain an extra bit of precision instead.  People talk about the mantissa without its leading one as the FRACTION, and with its leading 1 as the SIGNFICAND.The single-precision format is...	sign		1 bit	exponent	8 bits, with bias of 127, to represent -126 to +127                    - 0x0 and 0xFF reserved for Float zero (mantissa is ignored)                    - 16r7F reserved for Float underflow/overflow (mantissa is ignored)	mantissa	24 bits, but only 23 are storedThis format is used in FloatArray (qv), and much can be learned from the conversion routines, Float asIEEE32BitWord, and Float class fromIEEE32Bit:.Thanks to Rich Harmon for asking many questions and to Tim Olson, Bruce Cohen, Rick Zaccone and others for the answers that I have collected here."
"TotalCost","Part of an test resource to verify that super is well bound.See CompilerEvaluationTest"
"ZnUrl","I am ZnUrl, an implementation of an interpreted URL/URI.URLs are an element used in describing resources, more specifically to identify them.I consist of the following parts:  - scheme - like #http, #https, #ws, #wws, #file or nil  - host - hostname string or nil  - port - port integer or nil  - segments - collection of path segments, ends with #/ for directories  - query - query dictionary or nil  - fragment - fragment string or nil  - username - username string or nil  - password - password string or nilThe syntax of my external representation informally looks like this  scheme://username:password@host:port/segments?query#fragmentI am most often created by parsing my external representation using either my #fromString: class method or by sending the #asZnUrl convenience method to a String. Using #asZnUrl helps in accepting both Strings and ZnUrls arguments.  ZnUrl fromString: 'http://www.google.com/search?q=Smalltalk'.I can also be constucted programmatically.  ZnUrl new     scheme: #https;     host: 'encrypted.google.com';     addPathSegment: 'search';     queryAt: 'q' put: 'Smalltalk';     yourself.  My components can be manipulated destructively. Here is an example:  'http://www.google.com/?one=1&two=2' asZnUrl    queryAt: 'three' put: '3';    queryRemoveKey: 'one';    yourself.Some characters of parts of a URL are illegal because they would interfere with the syntax and further processing and thus have to be encoded. The methods in accessing protocols do not do any encoding, those in parsing and printing do. Here is an example:  'http://www.google.com' asZnUrl    addPathSegment: 'some encoding here';    queryAt: 'and some encoding' put: 'here, too';    yourselfMy parser is somewhat forgiving and accepts some unencoded URLs as well, like most browsers would.  'http://www.example.com:8888/a path?q=a, b, c' asZnUrl.I can parse in the context of a default scheme, like a browser would do.  ZnUrl fromString: 'www.example.com' defaultScheme: #httpGiven a scheme, I know its default port, try #portOrDefault.A path defaults to what is commonly referred to as slash, test with #isSlash. Paths are most often (but don't have to be) interpreted as filesystem paths. To support this, I have #isFilePath and #isDirectoryPath tests and #file and #directory accessors.I have some support to handle one URL in the context of another one, this is also known as a relative URL in the context of an absolute URL. Refer to #isAbsolute, #isRelative and #inContextOf:  '/folder/file.txt' asZnUrl inContextOf: 'http://fileserver.example.net:4400' asZnUrl.Incomplete relative references can be parsed and resolved in the context of a base URL using #withRelativeReference:  'http://www.site.com/static/html/home.html' asZnUrl withRelativeReference: '../js/menu.js'.Sometimes, the combination of my host and port are referred to as authority, see #authority.URL/URI/URN (Uniform/Universal Resource Locator/Identifier/Name) are closely related and can be and are used as synonyms is many contexts. Refer to http://en.wikipedia.org/wiki/Url for more information.There is a convenience method #retrieveContents to download the resource a ZnUrl points to,  'http://zn.stfx.eu/zn/numbers.txt' asZnUrl retrieveContents.This is implemented using a ZnUrlOperation. Part of Zinc HTTP Components."
"ClassBuilderWarning","I represent a warning signaled while building a class."
"MCFileTreeStSnapshotWriter","Snapshot writer"
"ZnClientIgnoringExceptionOnConnectionReuseEvent","ZnClientIgnoringExceptionOnConnectionReuseEvent signals that a client connection was reused and that an exception occurred. Normally, there is one retry after that, trying to reconnect."
"OSTouchTwoFingersScrollEvent","I am the abstract class for all two fingers scroll events"
"ZnLineReaderTests",""
"FLWeakClassMock","Test mock for a weak class"
"FTTableRowMorph","I'm a row for a table.All my work is to keep cells."
"GLMScrollListBrick",""
"StartupLoader","Deprecated => use StartupPreferenceLoader"
"SlotExampleMovieAndPersonTest",""
"FFIExternalResourceManager","I am responsible for managing a finalization of external resources.When object, registered as external resource being garbage collected,i telling an object's class to finalize it's associated data (by passing an object,received from #resourceData message sent to an object at registration time).I automatically keep tracking for session change (image save/boot), and ignore finalization of resources of old sessions (since they are not longer valid,and cannot be freed since session changed).Like that, a user of FFIExternalResourceManager don't need to implement a session checking logic, and need only to:a) register object as external resource:     FFIExternalResourceManager addResource: anObject.b) an object should understand the #resourceData message, which is remembered at registration point (it can be any external resource like, id, handle or memory pointer).Then, when object is garbage collected, its class will receive a message to finalize the resource data in #finalizeResourceData:The passed data is exactly same as previously returned by #resourceData method.An example:Imagine that you want to represent an external resource by keeping its handle.Object subclass: #MyExternalObject 	instanceVariableNames: 'handle'	classVariableNames: ''	poolDictionaries: ''	category: 'XYZ'	To let your object(s) to be managed by external resource manager, you need to register it.Usually you do it after successfully claiming an external resource:MyExternalObject>>initialize	handle := self createNewExternalResource.  ""claim resource""	self assert: self handleIsValid. ""etc...""		""Now, register receiver as external resource"" 	FFIExternalResourceManager addResource: self ""Another form of use is: 	FFIExternalResourceManager addResource: self data: handle.""----  If you used #addResource: method for registration, you should provide an implementation of #resourceData method:MyExternalObject>>resourceData	^ handle ""since we need only handle to identify external resource""----	Now, for properly finalizing the external resource we should implement:MyExternalObject class>> finalizeResourceData: aHandle	^ self destroyHandle: aHandle. ""do whatever is needed to destroy the handle""Note that in #finalizeResourceData: you cannot access any other properties of your instance, since it is already garbage collected. You also don't need to do a session checking, since it is done automatically by resource manager. "
"RBUnconditionalRecursionRule","Checks for unconditional recursion that might cause the image to hang when executed."
"GLMTabPanelBorder","Specialized border for TabGroup. Does not draw border beneath the selectd tab and only draws on top."
"AlertDialogWindow","Message dialog with a warning icon."
"Latin1TextConverter","Text converter for ISO 8859-1.  An international encoding used in Western Europe."
"OSWindowJoystickExampleEventHandler","I am the event handler linked to OSWindowJoystickExample."
"GlobalIdentifierWithFuel",""
"GTSpotterRecorderDiveInCategoryEvent","A GTSpotterRecorderDiveInCategoryEvent  models the action of  diving in a category (list of results)."
"RBRefactoringWarning","The receiver is a warning that usually requires the user to validate. This is used in situations where either the behavior of the program will not be strictly preserved or the change may have a wider impact than the user may think."
"RPackageTestCase","Common superclass for RPackage related tests"
"TxDeleteOperation","a history record containing delete operation"
"GTSUnitDebugger","I am a custom debugger for SUnit.I embed a textual diff when an #assert:equals: assertion fails and provide access to the setUp/tearDown methods of a test."
"HistoryNode","A HistoryNode is composite node of an history tree. It is made to contain some other HistoryNode or HistoryLeaf instances.A subnode is added with #addItem:In order to add and feed a new subtree, one can use openGroup which add a new HistoryNode. When openGroup is sent to an HistoryNode named H, then a new group G is added and all subsequent sent of #addItem: or of #openGroup to H will update the new node G until G is closed by a closeGroup. As examples:---------------H := HistoryNode new.H addItem: (i1 := HistoryLeaf new).---------------gives:H	i1---------------H := HistoryNode new.H openGroup. ""add a new group named g1""H addItem: (i1 := HistoryLeaf new).H addItem: (i2 := HistoryLeaf new).--------------gives:H	g1		i1		i2--------------H := HistoryNode new.H openGroup. ""add a new group named g1""H openGroup. ""add a new group named g2""H addItem: (i1 := HistoryLeaf new).H addItem: (i2 := HistoryLeaf new).--------------gives:H	g1		g2			i1			i2			--------------H := HistoryNode new.H openGroup. ""add a new group named g1""H openGroup. ""add a new group named g2""H addItem: (i1 := HistoryLeaf new).H closeGroup. ""close g2""H addItem: (i2 := HistoryLeaf new).H closeGroup. ""close g1""H addItem: (i3 := HistoryLeaf new).--------------gives:H	g1		g2			i1		i2	i3	Also se HistoryNodeTest.Instance Variables	history:		<OrderedCollection>	opened:		<Boolean>history	- The list of subnodes (HistoryLeaf or HistoryNode instances)opened	- true if the node is opened for adding"
"GLMPagerModel",""
"PragmaRemoved","A PragmaRemoved is announced by a PragamColllector when a method defined with an acceptable pragma according to the PragmaCollector filter is removed.Instance Variables"
"OSTouchThreeFingersSwipeAbortEvent","Three fingers aborted to swipe"
"MetacelloLoadingMCSpecLoader",""
"DiffJoinMorph",""
"MorphicCoreUIManager","This is a very simplified version of MorphicUIManager for Moprhic subset that contains ony Morphic-Core package and has only support of the most basic morphs."
"StreamBugsTest",""
"GTMoldableDebugger","I provide the basic functionality needed to create new debuggers. Subclasses should override the following methods:	debuggerStructureIn: -> provides the structure of the debugger	debuggerTransmissionsIn: -> creates transmissions between the widgets of a debuggers	selectedContext "
"TxNoWrapStrategyTest",""
"SDL_JoyDeviceAddedEvent","SDL2 library structure representing a joystick device added event data."
"ObsoleteTest","Example class for ClassTest"
"RBModifiesCollectionRule","Checks for remove:''s of elements inside of collection iteration methods such as do:. These can cause the do: method to break since it will walk of the end of the collection. The common fix for this problem is to copy the collection before iterating over it.For example turningaCol do: [ :each |  ... aCol remove:... ]into aCol copy do: [ :each |  ... aCol remove:... ]"
"FileCompilerRequestor","I am an Object used to interact with the OpalCompiler.I keep a reference to the original input so that error messages can be properly analyzed later-on."
"RBSourceRegexRefactoring",""
"OSWindowAthensDrawingExampleEventHandler","i a m the event handler linked to SDL2AthensDrawingExample"
"ClassOrganizationChunk","I represent the declaration of a class organization in a file.  My contents is the class organization string to import, and the class organizer is the one of the changed class.Sending me the message #import makes me install the class organization I carry into the class."
"POP3LoginError","Exception for signaling POP3 login failures."
"FBDASTBuilder","I am used to create AST nodes. This class is reserved for the RBAST. methodClass <Behavior> behavior where the compiled method is installed."
"ValueAdded","A ValueAdded is an announcement raised when an item (or a collection of items) was added to CollectionValueHolder."
"GLMFlexiblePresentationTest",""
"MalTopologicalSorting","From wikipedia:A topological sort (sometimes abbreviated topsort or toposort) or topological ordering of a directed graph is a linear ordering of its vertices such that for every directed edge uv from vertex u to vertex v, u comes before v in the ordering. For instance, the vertices of the graph may represent tasks to be performed, and the edges may represent constraints that one task must be performed before another; in this application, a topological ordering is just a valid sequence for the tasks. A topological ordering is possible if and only if the graph has no directed cycles, that is, if it is a directed acyclic graph (DAG). Any DAG has at least one topological ordering, and algorithms are known for constructing a topological ordering of any DAG in linear time."
"MouseOverHandler","Mouse over handler in a hand morph"
"MCFileTreeVersionInfoWriter","Write for the version info"
"ManifestMonticello","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"MockLessonView","A LessonView mock for testing purposes"
"GTRunToSelectionDebugAction","This action is responsible for continuing the execution up to the point selected in the code pane."
"GLMBrowserWithoutBlocksExample","self openOn: 42"
"GLMRubTextScrollPane",""
"MBVersionInfo","A version info"
"KMPragmaKeymapBuilder","I am a singleton object, subscribed to system events, to listen to the creation of methods marked with the <keymap> and keymap:> pragmas.When I listen one of those events, I reinitialize the KMRepository default instance and reload it with all declared keymaps."
"Month","I represent a month."
"FuelOutStackDebugAction","A FuelOutStackDebugAction is	a debugging action that serialize a portion of the current stack trace using fuel."
"TrueTest","SUnit tests for true/True class"
"RubAbstractTextArea","I am a re-implementation of TextMorph. I'm intended as a temporary solution. Soon, I will be replaced by, or integrated with, TxText, a beautiful new text toolkit.About the contextual menuBy default, the menu is given by the editingMode.The model can implement a #menu method to impose a specific menu.To change the way the menu is looked-up, one can also change the getMenuPolicy.This menu retrieving algorithm is implemented by a dedicated objet, hold by the RubAbstractTextArea>>#getMenuPolicy instance variable. This dedicated object implements a #lookupMenu method for this.By default, it is the textArea itself (see RubAbstractTextArea>>defaultGetMenuPolicy). The policy can be changed with RubAbstractTextArea>>#getMenuPolicy:, by passing whatever object that answer to #lookupMenu.Instance Variables	editingMode:		<Object>	editingState:		<Object>	editor:		<Object>	hasFocus:		<Object>	holder:		<Object>	margins:		<Object>	menuAllowed:		<Object>	model:		<Object>	paragraph:		<Object>	readOnly:		<Object>	scrollPivot:		<Object>	text:		<Object>	textColor:		<Object>	textStyle:		<Object>	wrapped:		<Object>editingMode	- xxxxxeditingState	- xxxxxeditor	- xxxxxhasFocus	- xxxxxholder	- xxxxxmargins	- xxxxxmenuAllowed	- xxxxxmodel	- xxxxxparagraph	- xxxxxreadOnly	- xxxxxscrollPivot	- xxxxxtext	- xxxxxtextColor	- xxxxxtextStyle	- xxxxxwrapped	- xxxxx"
"ZnServerReadErrorEvent","ZnServerReadErrorEvent signals an error during the reading of a request. These errors are considered mostly benign and the connection gets closed."
"ZnBase64Encoder","I am ZnBase64Encoder.Base64 encoding is a technique to encode binary data as a string of characters that can be safely transported over various protocols. Basically, every 3 bytes are encoded using 4 characters from an alphabet of 64. Each encoded character represents 6 bits.The most commonly used alphabet is 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'. One or two equal signs (= or ==) are used for padding.The encoded data can optionally be broken into lines. Characters not part of the alphabet are considered as white space and are ignored.My #encode: method works from ByteArray to String, while my #decode: method works from String to ByteArray.Note that to encode a String as Base64, you first have to encode the characters as bytes using a character encoder.See also http://en.wikipedia.org/wiki/Base64Part of Zinc HTTP Components."
"ZnUtilsTests",""
"ZdcOptimizedSocketStreamTests","ZdcOptimizedSocketStreamTests tests ZdcOptimizedSocketStream"
"Stopwatch","A Stopwatch maintains a collection of timespans."
"ZipArchiveTest","SUnit tests for ZIP archives"
"NautilusHistoryEntry","I am a history entry which hold a single step of the Nautilus browsing history"
"GTExampleImpostorPragma",""
"MetacelloMCTestsAbstractConfig",""
"RubFloatingEditorBuilder","I provide the capability to open a floating editor to edit something on the fly.The user is responsible for deciding on how to open the editor. See #exampleEditableStringMorph class side as an example on how to do it with #on:send:to.One opened:- if the escape character is pressed or if the keyboard focus is lost or in case of a mouse down anywhere else than inside the editor then the editing is aborted.- the Enter key or Cmd+s save the contents in the Morph, then an announcement of class RubMorphEdited is sent so that the user can take desired action (checking the input, definitively accept it or reject it).see #exampleEditableStringMorph class side Internal Representation and Key Implementation Points.Instance Variables	announcer:		<Announcer>	editor:		<RubScrolledTextMorph>	acceptOnCR:	<Boolean>	initialContents: <String>	font: <LogicalFont>	customizeValuable: <Valuable>Implementation notes"
"RBPrettyPrintCodeRefactoring",""
"FTIndentedCellMorph","FTCell with adjustable indentation in the X axis that can be configured so that children will be laid out from indentation to #right."
"FBDLoopScanner","I scan compiled method to detect loops. I answer an array or the size of the compiled method I scanned, which holds a FBDLoop at the pc where a loop starts and nil for any other pc. The FBDLoop describes the loop.instructionStream <InstructionStream> allows me to decode the method's bytecodebranchTargets <Array of (Smi | nil)> at any pc where a conditional jump goes, I put an annotation in this array. This is used to know if a loop is conditional or unconditional.loops <Array of (FBDLoop | nil)> array answered by the scanner. it holds a FBDLoop at the pc where a loop starts and nil for any other pc.currentPC <Smi> by opposition to self pc which holds the pc just *after* the instruction being decoded, currentPC holds the pc of the instruction being decoded. This is useful as you can't read the bytecode backward due to multiple bytecodes instructions."
"ControlButtonMorph","Specially themed ""control"" button. Used for drop-lists, expanders etc."
"RBThemeAPIUpdateRule","Do not explicitly refer to UITheme current but use Smalltalk ui theme. Similarly do not directly refer to ThemeIcons current but use Smalltalk ui icons."
"AthensCairoMatrixTest",""
"AthensInteractiveScene","i am like my superclass, can display any scene (object which understands #renderOn:  message)and support free-form pan and zoom.but in addition, i expecting that scene object understands following:scene handleEvent: event in: sceneView at: position This method should answer true if scene object wants to handle event by itself , preventing default handling of view (pan & zoom).The point is coordinates of event in scene coordinate space (not screen coordinate space). The event is MorphicEvent (currently limited only to mouse move&button events).Note that if scene view enters zooming or panning state, no events will be passed to scene object as long as state is active. "
"RBFileBlocksRule","Checks assignment to a variable that is the first statement inside the value block that is also used in the unwind block. For example| inputStream  |    [    inputStream := self openStream. ""may fail !""    inputStream doSomeOperation. ""may fail !""    ] ensure: [ inputStream ifNotNil: [ inputStream close ]]. if ""openStream"" fails, we don't need to ensure the stream is closed.And otherwise, if we move the assignment outside of the block, we don't needan ""ifNotNil""-check for the ensure block if ""doSomeOperation"" fails.This code can be changed to| inputStream  |    inputStream := self openStream. ""may fail !""    [inputStream doSomeOperation. ""may fail !""    ] ensure: [ inputStream close ]."
"RubMouseClick","I am raised when a mouse down is done"
"FLEncoder","I am an abstraction used by the serialization algorithm to encode the graph in a stream."
"OSKeySymbols","This pool contains all the platform independent key symbols. They are the same used by SDL2 to avoid having to perform any kind of translation."
"GLMBrickPopupHelpThemer",""
"MorphicTickingWindowAdapter","I am the adapter used to bridge a TickingWindowModel and a TickingSpecWindow"
"RubVerticalScrolled","I am raised when a vertical scroll is done"
"MBInfo","Common superclass for Versionner infos"
"OCASTTranslatorTest",""
"OSWindowGLAttributes","I holding a set of OpenGL attributes, used to initialize an opengl rendering context for a window."
"FTStrongSelectionChanged","I announce a strong selection happened (this is a double-click)Description-------------------I store the index of the row and the event (doubleClick) the FTTableMorph received.I should be use by the user to defined an action to execute when a DoubleClic happen on a Table.Public API and Key Messages-------------------- #rowIndex: anIndex event: anEvent 		is the commun constructor. Internal Representation and Key Implementation Points.------------------    Instance Variables	event:		An event received by the FTTableMorph.	selectedRowIndex:		The index of the row in the table that was selected. 			From the index you can get an object from the FTTableMorph with: aFTTableMorph dataSource elementAt: selectedRowIndex  "
"SHA1","This class implements the Secure Hash Algorithm (SHA) described in the U.S. government's Secure Hash Standard (SHS). This standard is described in FIPS PUB 180-1, ""SECURE HASH STANDARD"", April 17, 1995.The Secure Hash Algorithm is also described on p. 442 of 'Applied Cryptography: Protocols, Algorithms, and Source Code in C' by Bruce Scheier, Wiley, 1996.See the comment in class DigitalSignatureAlgorithm for details on its use.Implementation notes:The secure hash standard was created with 32-bit hardware in mind. All arithmetic in the hash computation must be done modulo 2^32. This implementation uses ThirtyTwoBitRegister objects to simulate hardware registers; this implementation is about six times faster than using LargePositiveIntegers (measured on a Macintosh G3 Powerbook). Implementing a primitive to process each 64-byte buffer would probably speed up the computation by a factor of 20 or more."
"MCSortingTest",""
"MetacelloExampleProjectConfig",""
"AnnouncementMockA","This is a simple test mock."
"StoredSetting","I represent a part of SettingNode that can be stored to a preference file.Responsibility: I keep SettingNode's stored value and I know to which SettingNode I belong.Collaborators:  - SystemSettings manages all my instances, stores, load, and gives an appropriate stored value for any SettingNode. - StoredSettingBuilder creates instances of me. - I represent stored value of #realValue of a SettingNode object.Public API and Key Messages- realValue returns SettingNode's stored value.- isForSettingNode: returns true if my instance belongs to a given SettingNode. Internal Representation and Key Implementation Points.    Instance Variables	methodClass:		<Class>	selector:			<Symbol>	realValue:		<Object>"
"AnnouncementSubscription","The subscription is a single entry in a SubscriptionRegistry.Several subscriptions by the same object is possible.I know how to make myself weak or strong, only use this capability if it can't be determined at subscribe time though, as it uses become: (for thread-safety), which is quite slow."
"FT2Face","Do not rearrange these fields!New fields should go at the end, because the plugin has to know about these indexes.ByteArray representing a pointer to the malloc'd FT_Face struct:handleCopied from the FT_Face struct on creation:numFaces faceIndex faceFlags styleFlags numGlyphs familyName styleName numFixedSizes availableSizes numCharmaps charmapsCopied on creation, but only relevant to scalable outlines:bbox unitsPerEm ascender descender height maxAdvanceWidth maxAdvanceHeight underlinePosition underlineThickness Working memory:glyph -- FT2GlyphSlot, set by loadGlyph or loadCharsize -- the active size, set by activateSize, used by loadGlyph, getKerning, etc.charmap -- set by setCharmap"
"RubTextStyleChanged","I am raised when the style (font, style...) is changed"
"RFLinkReification","I reify the link itself. "
"MethodAdded","This announcement is emited when we add a method to a class or a trait using:	=> Behavior >> compile: or TraitBehavior >> compile:"
"ButtonModel","A ButtonComposableModel is an applicative model which handle a basic button.self example"
"GLMPhlowListBrick",""
"PreorderGuide","I traverse the filesystem in depth-first pre order. Given this hierarchy:alpha	beta	gammadelta	epsilonI would visit the nodes in the following order: alpha, beta, gamma, delta, epsilon.I use my work instance variable as a stack. I push nodes to be visited and visit them in reverse order."
"MetaclassTest","Sunit tests for metaclasses"
"RBExplicitRequirementMethodsRule","Classes that use traits with explicit requirement methods should either implement the method or inherit it."
"FFIExternalReference","I represent a reference to some variable (a pointer, a memory space, an obscure structure) living in the C heap. I'm abstract, my children keep the real references.A referenced type is  some variable that lives in the C heap and is seen in Pharo as an external  reference (an ==ExternalAddress==) ."
"MetacelloTestsGoferCleanup",""
"SugsSyntaxErrorDebuggerContext","I know how to talk with a syntax error debugger and extract the information needed by the suggestions"
"FadingMorph","FadingMorph is a morph that fades out of existence after a certain time. The implementation uses a stepping event which reduces the visibility of the morph and its submorphs until they are no longer visible, when this happens the morph will delete itself.Variables:<alpha> holds the current alpha value. [ Float ]<fadingFactor> a value of how much the alpha shall be reduced per step message send. [ Float ]<resetable> boolean value used by #handleMouseMove: to descide whether or not to reset the alpha on mouse over.The morph has a default layout, color, and borderstyle which can be changed after instance creation the same way other morphs can.The morph itself updates its translucency per 100ms. One can change the variable fadingFactor to reduce or increase the time a FadingMorph is present in the world.If the mouse is moved over a FadingMorph present in the world, it will reset the alpha, which means that the fading will start from the begining again, this can be turned off by sending #beUnResetable. "
"VSUpdateDevelopmentVersionCommand","Update the current development version with infomation provided by the project."
"MBPackageInfoTest","SUnit tests for MBPackageInfo in Versionner"
"AnnouncementLogger","Use me to debug and log to the transcript annoncements.AnnouncementLogger new subscribeTo: SystemAnnouncer announcerTo unsubscribeAnnouncementLogger  allInstancesDo: [:each | SystemAnnouncer announcer unsubscribe: each ]"
"FLBufferedWriteStream","FLBufferedWriteStream is a buffered write stream we use for Fuel serialization. Instead of directly using the stream provided to FLSerializer at creation time by the user, we create an instance of FLBufferedWriteStream for that stream.MultiByteFileStream has no real buffer and goes to disk too frequently. With FLBufferedWriteStream we keep stuff in a cache and only go to disk when this is full.The way of using it is jut FLBufferedWriteStream on: aWriteStream. For example:FLBufferedWriteStream on: (FileDirectory default forceNewFileNamed:  'TestFile') binaryWith the message #sizeBuffer: you can set the size of the buffer.Make sure to always send #flush or #close when you're done, otherwise the last buffer might not yet have been written."
"GLMPagerMorphTest",""
"CairoFontFace","I am a private class, used to represent a 'cairo_font_face_t *' data structure of Cairo library.I am not useful for direct use nor providing any functionality. My only purpose is to keep a strong reference to original FT2Face object(so it won't be freed before a corresponding instance of mine will release it)."
"ReCriticAutofixed","Event of a critic being automatically fixed by entity transformation"
"SimpleButtonMorph","I am labeled, rectangular morph which allows the user to click me. I can be configured to send my ""target"" the message ""actionSelector"" with ""arguments"" when I am clicked. I may have a label, implemented as a StringMorph.Example:	SimpleButtonMorph new		target: Beeper;		label: 'Beep!';		actionSelector: #beep; 		openInWorldStructure:instance var 	Type		Description target 			Object 		The Object to notify upon a click actionSelector 	Symbol 		The message to send to Target (#messageName) arguments 		Array 		Arguments to send with #actionSelection (optional) actWhen 		Symbol 		When to take action: may be #buttonUp (default), #buttonDown,								#whilePressed, or #startDrag oldColor 		Color 		Used to restore color after click Another example: a button which quits the image without saving it.	SimpleButtonMorph new		target: Smalltalk;		label: 'quit';		actionSelector: #snapshot:andQuit:;		arguments: (Array with: false with: true); 		openInWorld"
"GTExampleNautilus",""
"PackageTreeModel","I'm a tree model for managing groups, packages and tags."
"ClassTreeNodeExample","Example for class tree nodes"
"RBBlockReplaceRule","RBBlockReplaceRule replaces the matching node by the result of evaluating replaceBlock. This allows arbitrary computation to come up with a replacement.Instance Variables:	replaceBlock	<BlockClosure>	The block that returns the node to replace to matching node with."
"MenuLineMorph","A MenuLineMorph is a item separator in menu."
"OSWindowRenderThreadOperation","I am a render operation, used to send commands (which can be asynchronous or synchronous) to the render thread. "
"PoolDefiner","A pool used for testing purposes"
"Deprecation","This Warning is signalled by methods which are deprecated.The use of Object>>#deprecatedExplanation: aString and Object>>#deprecated: aBlock explanation: aString is recommended.Idiom: Imagine I want to deprecate the message #foo.foo	^ 'foo'I can replace it with:foo	self deprecatedExplanation: 'The method #foo was not good. Use Bar>>newFoo instead.'	^ 'foo'Or, for certain cases such as when #foo implements a primitive, #foo can be renamed to #fooDeprecated.fooDeprecated	^ <primitive>foo	^ self deprecated: [self fooDeprecated] explanation: 'The method #foo was not good. Use Bar>>newFoo instead.'"
"OkToolbar","An OkCancelToolbar is a model for a basic Ok toolbar"
"OpalEncoderForV3PlusClosures","An encoder for the V3 bytecode set augmented with the following bytecodes that are part of the full closure implementation.	138   10001010 jkkkkkkk		Push (Array new: kkkkkkk) (j = 0)								or	Pop kkkkkkk elements into: (Array new: kkkkkkk) (j = 1)	140   10001100 kkkkkkkk jjjjjjjj 	Push Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	141   10001101 kkkkkkkk jjjjjjjj 	Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	142   10001110 kkkkkkkk jjjjjjjj 	Pop and Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	143   10001111 llllkkkk jjjjjjjj iiiiiiii	Push Closure Num Copied llll Num Args kkkk BlockSize jjjjjjjjiiiiiiiiThis is an exact duplicate of EncoderForLongFormV3PlusClosures.Could be a trait (or in Newspeak, a Mixin).For now we impose upon you to synchronise any and all changes between these two classes."
"TabManagerModel","I am a spec model representing a tab manager. My role is to gather multiple tabs, and make them work together"
"FFICallbackReturnValue","An instance of FFICallbackReturnValue specifies a return value to be passed to a callback callee.  It is intended to have overlaid the following struct:/* * Returning values from callbacks is done through a CallBackReturnSpec * which contains a type tag and values.  It is designed to be overlaid upon * an FFICallbackReturnProxy created at the Smalltalk level to return values. */typedef struct {    long type;# define retint32  0 # define retint64  1# define retdouble 2# define retstruct 3    long _pad; /* so no doubt that valflt64 & valint32 et al are at byte 8 */    union {        long valint32;        struct { long low, high; } valint64;        double valflt64;        struct { void *addr; long size; } valstruct;    } rvs;} CallBackReturnSpec;"
"WeakIdentityKeyDictionary","This class represents an identity dictionary with weak keys."
"OSWindowExposeEvent","I am delivered when part (or whole) window are exposed on the desktop and needs refreshing."
"WeekTest","SUnit tests for weeks"
"OSEnvironmentTest","This tests the OSEnvironment. The tests assume that there is at least 1 environment variable given."
"DailyNonInteractiveTranscript","I am DailyNonInteractiveTranscript, a NonInteractiveTranscript that writes to a dated file, switching to a new file each day.	(DailyNonInteractiveTranscript onFileNamed: 'server-{1}.log') install."
"SpecPreDebugWindow","I am the window that shows up when the debugger is launched.  I show you the first lines of the stack trace that caused my apparition (or a text editor with a message), and a set of buttons created by loading all debugging actions annotated with the pragmas 'self preDebuggingActionsPragmas' (e.g. resume the execution, abandon the execution).To see me, evaluate:2/0.Some details about my implementation.- I hold a reference to the debugger than created my;- changing the debuger retriggers the construction of this window;- before doing this users should set the attribute 'message' as my structure depens on it;- changing the debugger should be done only after this window was open. E.g.:SpecPreDebugWindow new 		setTitle: aTitle;		message: aMessage;		openWithSpec;		debugger: aDebugger.		- an example of manually opening this window:[ | context process  debugger |context := [ 20 factorial ] asContext.process := Process 	forContext: context	priority: Processor userInterruptPriority.debugger := SpecDebugger new	process: process 	controller:  nil	context: context.	SpecPreDebugWindow new 		setTitle: 'A simulated error';		message: nil;		openWithSpec;		debugger: debugger ] fork."
"FloatPrintPolicy","I am FloatPrintPolicy.I am a DynamicVariable.I control whether Float instances are printed exactly or inexactly. The inexact printing is much faster, but can be less accurate. The default policy is ExactFloatPrintPolicy.FloatPrintPolicy 	value: InexactFloatPrintPolicy new 	during: [ Float pi printString ]"
"MCDefinition","A MCDefinition is the root of inheritance of entities representing code. "
"GTSelectionGoDebugAction","This action is responsible for evaluating the selection in a code pane of a debugger and pushing the result in the inspector of the debugger."
"ByteArray","I represent an ArrayedCollection whose elements are integers between 0 and 255."
"GTDebuggerBrowserUpdateRequest","A GTDebuggerBrowserUpdateRequest is a wrapper for a DebugActionExecuted event. It is sent to the debugger after the DebugActionExecuted event was handled by the debugger."
"STON","STON implements serialization and materialization using the Smalltalk Object Notation format.I am a class side facade offering a high level API to write and read objects using STON.U s a g eBasic operations  #toString:  #fromString:  STON toString: DisplayScreen boundingBox.  STON fromString:  'Rectangle{#origin:Point[0,0],#corner:Point[1920,1030]}'.  STON toString: { DateAndTime now. Float pi. 1 to: 10 by: 2. 3 days }.  STON fromString:  '[DateAndTime[''2016-03-15T13:57:59.462422+01:00''],3.141592653589793,Interval{#start:1,#stop:10,#step:2},Duration{#nanos:0,#seconds:259200}]'You can also read from or write to streams  #fromStream:  #put:onStream:There is also the option to do pretty printing (indenting, multi line output)   #toStringPretty:  #put:onStreamPretty:STON is more or less a superset of JSON and is backwards compatible with JSON while parsing, and can be compatible with it while writing. The important differences (and the whole reason why STON exists in the first place) are   - class information (except for lists (Array) and maps (Dictionary))  - proper handling of shared and circular references  - more Smalltalk like syntax (Symbols with #, single qouted Strings, nil instead of null)  - more defined special types (Date, Time, DataAndTime, ByteArray, Point)Parsing JSON is done using #fromString: or #fromStream: with the results being composed of Arrays and Dictionaries.Writing objects as JSON is done using:   #toJsonString[Pretty]:  #put:asJsonOnStream[Pretty]:Note that you can only write Arrays and Dictionaries !For a much more sophisticated JSON parser/writer implementation, have a look at NeoJSON.Like JSON, STON does not allow for comments. However, a preprocessor option can skip C style comments before parsing.I also define some contants used in the implementation: the class used as list, map and association, as well as the optional class name key (used when reading objects using an unknown class).I m p l e m e n t a t i o nThe 2 key methods are  #stonOn:  #fromSton:which work together with STONWriter and STONReader; read their class comments for all configuration options (you can use the #reader and #writer methods to avoid referring to these classes directly).Several methods are used to support and/or control the implementation  #stonName - defines the external name for a class  #stonAllInstVarNames - defines which instance variable to write  #stonContainSubObjects - shortcut looking into objects for subobjects  #stonShouldWriteNilInstVars - option to skip writing nil valued instance variablesS y n t a x	value	  primitive-value	  object-value	  reference	  nil	primitive-value	  number	  true	  false	  symbol	  string	object-value	  object	  map	  list	object	  classname map	  classname list	reference	  @ int-index-previous-object-value	map	  {}	  { members }	members	  pair	  pair , members	pair	  string : value	  symbol : value	  number : value	list	  []	  [ elements ]	elements	  value 	  value , elements	string	  ''	  ' chars '	chars	  char	  char chars	char	  any-printable-ASCII-character-	    except-'-""-or-\	  \'	  \""	  \\	  \/	  \b	  \f	  \n	  \r	  \t	  \u four-hex-digits	symbol	  # chars-limited	  # ' chars '	chars-limited	  char-limited	  char-limited chars-limited	char-limited	  a-z A-Z 0-9 - _ . /	classname	  uppercase-alpha-char alphanumeric-char	number	  int	  int frac	  int exp	  int frac exp	int	  digit	  digit1-9 digits 	  - digit	  - digit1-9 digits	frac	  . digits	exp	  e digits	digits	  digit	  digit digits	e	  e	  e+	  e-	  E	  E+	  E-"
"GTClearEditorDebugAction","This action is responsible for canceling/clearing the changes in a code editor from a debugger."
"FFIConstantHandleType","I'm a constant handle type (see ==FFIConstantHandle==  comment)."
"ZnClient","I am ZnClient, an object to build, execute and process HTTP client requests.I have a rich protocol to construct requests and to access responses.I have various error handling options.I can reuse an existing connection to a specific host:port.I handle sessions, cookies, redirects and authentication.I have many options (settings) with sensible defaults.Simplest possible invocation:	ZnClient new		get: 'http://zn.stfx.eu/zn/numbers.txt'.	Using some features to make a better HTTP request:	ZnClient new		systemPolicy;		accept: ZnMimeType textPlain;		http;		host: 'zn.stfx.eu';		path: 'zn/numbers.txt';		contentReader: [ :entity | entity contents lines collect: [ :each | each asNumber ] ];		ifFail: [ :exception | self inform: 'I am sorry: ', exception printString ];		get.Part of Zinc HTTP Components."
"GLMSingleSpotterRequest",""
"FLLargeIdentitySet","A LargeIdentitySet is an IdentitySet for large collections.Rather than using linear probing, it takes advantage of the fact that identityHash (on a classic, 32bit VM) in Pharo only has 4096 unique values, using a bucket for each of those.It will still work if hash range changes (ie buckets are chosen mod 4096), but the potential gain will be lower the more diverse the hash space is.With linear probing you risk an array looking like this:Index:	Hash:	1	X	2	X	3	X	4	4	5	5	6	4	7	4	8	7	9	6	10	XWhile with buckets the same dataset looks:Index:	Hash:	1	X	2	X	3	X	4	[4, 4, 4]	5	5	6	6	7	7	8	X	9	X	10	XSo includes: can generally be done faster (also sped up byusing a special primitive), and removal of objects does not have to do extensive cleanup if object was part of a chain."
"NECSelfEntry","I represent self"
"MCOrganizationTest",""
"RubTextSegmentMorph",""
"MetacelloMCVersionSpec",""
"MetacelloMemberSpec",""
"RBMoveMethodTest",""
"POP3Client","This class implements POP3 (Post Office Protocol 3) as specified in RFC 1939.  (see http://www.ietf.org/rfc.html)You can use it to download email from the mail server to your personal mail program.To see an example of it's use, see POPSocket class>>example."
"PharoSyntaxTutorialTest","SUnit tests for PharoSyntaxTutorial"
"MethodFinder","Find a method in the system from a set of examples.  Done by brute force, trying every possible selector.  Errors are skipped over using ( [3 + 'xyz'] ifError: [^ false] ).Submit an array of the form ((data1 data2) answer  (data1 data2) answer).	MethodFinder methodFor: #( (4 3) 7  (0 5) 5  (5 5) 10).answer:  'data1 + data2'More generally, use the brace notation to construct live examples.The program tries data1 as the receiver, and	tries all other permutations of the data for the receiver and args, and	tries leaving out one argument, and	uses all selectors data understands, and	uses all selectors in all od data's superclasses.Floating point values must be precise to 0.01 percent, or (X * 0.0001).If you get an error, you have probably discovered a selector that needs to be removed from the Approved list.  See MethodFinder.initialize.  Please email the Pharo Team.Only considers 0, 1, 2, and 3 argument messages.  The argument data may have 1 to 5 entries, but only a max of 4 used at a time.  For now, we only test messages that use given number of args or one fewer.  For example, this data (100 true 0.6) would test the receiver plus two args, and the receiver plus one arg, but not any other patterns.Three sets of selectors:  Approved, AddAndRemove, and Blocks selectors.  When testing a selector in AddAndRemove, deepCopy the receiver.  We do not handle selectors that modify an argument (printOn: etc.).  Blocks is a set of (selector argNumber) where that argument must be a block.For perform, the selector is tested.  It must be in the Approved list.do: is not on the Approved list.  It does not produce a result that can be tested.  Type 'do' into the upper pane of the Selector Finder to find messages list that.Implementation Notes		arguments of the load: method are structured as follows:		- Odd list entries are data for it, even ones are the answers.  nil input means data and answers were supplied already.""		""(MethodFinder new) load: #( (4 3) 7  (-10 5) -5  (-3 11) 8)"
"GLMBrickTabLabelThemer","I'm a style module related to tab label"
"BlockCannotReturn","This class is private to the EHS implementation.  Its use allows for ensured execution to survive code such as:[self doThis.^nil]	ensure: [self doThat]Signaling or handling this exception is not recommended."
"UndefinedVariable","Notify about an undefined variable"
"NECSuperEntry","I represent super."
"VSGroupLeafNode","Abstract class used to display a group with its specific icons and no child in a tree."
"RBToDoRule","Checks for use of to:do: when a do:, with:do: or timesRepeat: when should be used."
"RubSmalltalkCommentMode","I represent the mode to use for editing class comments"
"PopupChoiceOrRequestDialogWindow",""
"RxParserTest","This class provides tests for the regular expression parser."
"GLMCompositeBrick","I'm a composite brick that provides an api of creating different kind of scriptabe presentations like:  - list - pharoMethod - table - tree"
"RBMoveMethodRefactoring",""
"RFValueReification","value of a variable read or assignment"
"MCMockAPoolDictionary","Mocking a pool"
"DAGraphVizGenerator","A PDGraphVizGenerator is a class able to generate a dot file to represent a graph."
"QuestionWithoutCancelDialogWindow","A yes/no message dialog. Yes (return) is the default. Escape will answer no."
"FLPrimitiveCluster","I am a cluster that serializes and materializes interacting directly with the stream."
"SDL2MappedEvent","SDL2 library structure"
"ZnCharacterStreamTests",""
"RaisedBorder","see BorderedMorph"
"ZnServerConnectionClosedEvent","ZnServerConnectionClosedEvent signals that the server closed a client connection to address. "
"STONCStyleCommentsSkipStream","I am STONCStyleCommentsSkipStream, a character ReadStream wrapping another character ReadStream. I skip C style comments, much like a classic C preprocessor.C, C++, Java, JavaScript style comments are either the multiline	/* a comment */	or the single line, up to end of line	// a comment 	I deal with any end of line convention. Multiline comments cannot be nested. You create me #on: another character ReadStream. Here is an example:	(STONCStyleCommentsSkipStream on: 'abc/*comment*/def' readStream) upToEnd.	Comments inside single and double quote delimited strings are ignored. Backslash escapes for single and double quotes inside strings are honored."
"VersionnerToolBar","Versionner configuration list toolBar spec definition."
"TraitException","General exception used for example to signal invalid trait compositions"
"ManifestGraphicsPrimitives","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"FLTraitSerializationTest","I have the common behavior for testing trait serialization."
"AthensBezier3Scene","I just a helper class used to debug & visualize rendering of bezier segment. This class is subject of changes or complete removal"
"GLMScriptingTest",""
"SubclassResponsabilityDebugAction","A SubclassResponsabilityDebugAction is a debugging action that can create a method if the debugger was opened as a result of a #subclassResponsibility mesage send."
"AthensFontChange","A command to change the currently selected font"
"GTSUnitExampleWithProblematicSetUpTest","I am not a test! I provide usage examples for the SUnit debugger."
"MouseMoveEvent","A move event from the mouse"
"RBFormatterTest",""
"LogicalFontManager","I reference all font families available in the  system.For example:LogicalFontManager current allFamilies.FreeTypeFontSelectorDialogWindow new open."
"PharoTutorialTestGo","SUnit tests for tutorial navigation"
"ZnSingleThreadedServer","I am ZnSingleThreadedServer.I can be customized with a delegate (#handleRequest:) and an authenticator (#authenticateRequest:do:).  ZnSingleThreadedServer startDefaultOn: 1701.  ZnSingleThreadedServer default authenticator: (ZnBasicAuthenticator username: 'foo' password: 'secret').  ZnClient new username: 'foo' password: 'secret'; get: 'http://localhost:1701'.I use ZnDefaultServerDelegate when no other delegate is set.I am single threaded, I run in a single process.I close connections after each request/response cycle.Part of Zinc HTTP Components."
"MCSystemCategoryParser","A MCSystemCategoryParser extracts or set a category/protocol to the corresponding MCOrganizationDefinition."
"PickOneSettingDeclaration","A CheckListSettingDeclaration is a setting for which the value domain is a list. Each element of the list is an instance of FixedSettingValue. If domainValues is set, then the list of valid values is constant (initialized at declaration time). Instead, if getter is set, then the setting list is always dynamically computed. See SettingManager comment for more explanations. Instance Variables"
"ExternalType","An external type represents the type of external objects.Instance variables:	compiledSpec	<WordArray>		Compiled specification of the external type	referentClass	<Behavior | nil>	Class type of argument required	referencedType	<ExternalType>	Associated (non)pointer type with the receiverCompiled Spec:The compiled spec defines the type in terms which are understood by the VM. Each word is defined as:	bits 0...15 	- byte size of the entity	bit 16		- structure flag (FFIFlagStructure)				  This flag is set if the following words define a structure	bit 17		- pointer flag (FFIFlagPointer)				  This flag is set if the entity represents a pointer to another object	bit 18		- atomic flag (FFIFlagAtomic)				  This flag is set if the entity represents an atomic type.				  If the flag is set the atomic type bits are valid.	bits 19...23	- unused	bits 24...27	- atomic type (FFITypeVoid ... FFITypeDoubleFloat)	bits 28...31	- unusedNote that all combinations of the flags FFIFlagPointer, FFIFlagAtomic, and FFIFlagStructure are invalid, EXCEPT from the following:	FFIFlagPointer + FFIFlagAtomic:		This defines a pointer to an atomic type (e.g., 'char*', 'int*').		The actual atomic type is represented in the atomic type bits.	FFIFlagPointer + FFIFlagStructure:		This defines a structure which is a typedef of a pointer type as in			typedef void* VoidPointer;			typedef Pixmap* PixmapPtr;		It requires a byte size of four (e.g. a 32bit pointer) to work correctly.[Note: Other combinations may be allowed in the future]"
"CannotDecompileNativeBoostCalls","Notify that a method can not be decompiled because of a native boost call"
"FT2Error","This is an Error that knows how to get the Freetype2 error code and string."
"MethodAnnouncement","An abstract class for method announcements."
"GLMNoBrowserTest",""
"GLMTransmission","A GLMTransmission models the connection between multiple origin ports and one destination port. Whenever an origin port changes the value, the corresponding transmissions are triggered by the browser.The result of triggering a transmission is the setting of the value in the destination port. The transmissionStrategy can add further different semantics to this behavior.A transmission takes place in a context. The context is started every time a new value is set from outside. Afterwards, the context is preserved internally. This is important for braking possible loops of transmission propagation.There are two kind of origins for a transmission, active and passive ones. A change of value in an active origin will trigger the transmissions originating from it. A change of value in a passive origin will not trigger the transmission. However, a value in a passive origin is still part of the transmission value."
"RubTextSegmentIconDisplayer",""
"TabDisabled","I am the state corresponding to a tab being disabled."
"MonthTest","This is the unit test for the class Month."
"NOCEntryList","I am the list of entries (possible symbols) returned by nocompletion algorithm.I am sorted according to last acceptance from the user."
"MCMerger","A MCMerger is an abstract responsible for performing merge operations and detecting conflicts."
"Abort","Notify to abort a task"
"GTFilter","I am the root class of the hierarchy of filter objects  that can be used by Spotter. The main entry point is the #value method that performs and returns the list of filtered items.Subclasses should return the list of filtered elements in sorted order based on the filtering criteria."
"OSPlatformTest",""
"GLMMorphicAccordionRenderer",""
"AlienSunit",""
"SystemProgressMorph","I display a set of progress indicator in a list.Special care is taken to update the view while the rest of the UI process is blocked.Reset.SystemProgressMorph reset.Examples.self show: 'Doing...' from: 500 to: 600 during: [ :bar |	500 to: 600 do: [ :x | 		bar current: x.		(Delay forMilliseconds: 20) wait 		""Just to slow it down so we can see what's going on"" ] ].self show: 'Doing...' from: 0 to: 50 during: [ :bar |	0 to: 50 do: [ :x | 		bar increment.		bar label: x asString.		(Delay forMilliseconds: 20) wait ""Just to slow it down so we can see what's going on"" ] ]."
"GLMPagerButtonAnnouncement",""
"MetacelloAllowProjectUpgrade",""
"FFIUnknownLibrary","I'm used when there is no defined library as a module. In case FFI users want to declare modules as simple strings, I'm used to model the access to that library.I'm never used directly! Instead, users will utilize Strings that will be converted to me thru #asFFILibrary method. That way, is completely the same to do a call this way: self ffiCall: #( void fn () ) module: 'libc'. and self ffiCall: #( void fn () ) module: LibC. (but of course recomended way is to use a module, in case you need a strategy to find libraries in different platforms. "
"RubParagraphDecorator","I am a decorator for the paragraph of a text area. I can be used to draw something on the paragraph "
"SHParserST80Test","SUnit tests for shouts ST80 parser"
"OCLiteralSet","Holds a unique set of literals.  Literal objects are equal if they are #= plus they are the same class.  This set uses this rule for finding elements.Example:	Set new add: 'anthony'; add: #anthony; size  ""= 1""	LiteralSet new add: 'anthony'; add: #anthony; size  ""= 2"""
"PSMCPatchMorph","I'm a Monticello tool based on polymorph used to browse diffs.Activate me with the setting named 'Use Polymorph difference tools'."
"GLMMorphicListingRenderer",""
"NautilusUI","A UI for an instance of Nautilus"
"ExpanderMorphExpanded",""
"DANode","A PDNode is an abstract class for to display nodes in a tree."
"GTSpotterSmokeTest",""
"ExpanderTitleMorph","The titlebar area for and ExpanderMorph. Includes title label and expand/collapse button."
"FLContextSerializationTest","SUnit tests for fuel serialization of methods contexts"
"MetacelloToolBox","MetacelloToolbox implements a toolbox API for Metacello.The toolbox methods on the class-side implement scripts for a number of commonly performed Metacello development tasks. The methods should be used in development scripts or GUI tools so that a common implementation is preserved across the toolset."
"DefaultExternalDropHandler","An alternative default handler that uses the file-list services to process files."
"STONJSONTests","STONJSONTests contains unit tests for the JSON functionality available in STON."
"FLGlobalClassCluster","I am a cluster for classes that should be present when materializing. In other words, it only serializes a reference to the class, using its name."
"GoferConfigurationReference","A GoferPackageReference refers to the latest version of a Monticello package representing a Metacello Configuration."
"IncompatibleLayoutConflict","I am an error raised when extending a class with an incompatible layout."
"VSMakeVersionCommand","I'm a generic command for declare versions as stable or development."
"MethodOveridesAction","Action when the method overrides another one, or the method is overidden by another one or both"
"RBUsesTrueRule","Checks for uses of the classes True and False instead of the objects true and false.true is the object true, while True is the class whose true is the sole instance."
"MorphicTabManagerAdapter","I am the adpater used to bridge a TabManagerModel and a TabManager"
"ClassTest","SUnit tests for classes"
"GTBasicRecorderEvent","I represent a basic event for the event recorder."
"GLMPortChangeAction",""
"ZipWriteStream","A ZIP write stream"
"RPackageTest","SUnit tests for RPackage "
"CommandLineHandler","A CommandLineHandler is activated by the CommandLine. The responsible handler with the highest priority is selected and its instance-side method #activate is invoked.By default the handlers are selected by their class name. In the following shell invocation the FooHandler is chosen:	pharo Pharo.image FooHandlerA handler may provide a short name with the class-side #commandName method. If the FooHandler defined #commandName returning 'foo' it would be activated with the following shell invocation:		pharo Pharo.image foo	For more sophisticated handler selection the CommandLineHandler should implement the #isResponsibleFor: class-side method. An instance of the current command line options is passed to this method which should then return a boolean.Between all the responsible handlers the one with the highes #priority is chosen. To change the priority overwrite the class-side accessor."
"MCRemoval","A MCRemoval represents the removal of an entity of a given snapshot."
"GTSpotterActOn",""
"KMUntypeableSingleKeyCombination","I am an abstract class for all single key combinations that correspond to characters that cannot be typed directly."
"SDL_KeyUpEvent","SDL2 library structure"
"UnlimitedInstanceVariableSlotTest",""
"PluggableSet","PluggableSets allow the redefinition of hashing and equality by clients. This is in particular useful if the clients know about specific properties of the objects stored in the set which in turn can heavily improve the performance of sets and dictionaries.Note: As of Pharo 1.1#11284, using normal Dictionary is actually faster as the bench below shows... ;-)Instance variables:	hashBlock	<BlockContext>	A one argument block used for hashing the elements.	equalBlock	<BlockContext>	A two argument block used for comparing the elements.Example: Adding 1000 integer points in the range (0@0) to: (100@100) to a set.	| rnd set max pt |	set := Set new: 1000.	rnd := Random new.	max := 100.	Time millisecondsToRun:[		1 to: 1000 do:[:i|			pt := (rnd next * max) truncated @ (rnd next * max) truncated.			set add: pt.		].	].The above is way slow since the default hashing function of points leads to an awful lot of collisions in the set. And now the same, with a somewhat different hash function:	| rnd set max pt |	set := PluggableSet new: 1000.	set hashBlock:[:item| (item x bitShift: 16) + item y].	rnd := Random new.	max := 100.	Time millisecondsToRun:[		1 to: 1000 do:[:i|			pt := (rnd next * max) truncated @ (rnd next * max) truncated.			set add: pt.		].	]."
"LongTestCaseTest",""
"SQSurfaceDispatch","A structure from SurfacePlugin.h  typedef struct sqSurfaceDispatch {	/* Version information. Must be provided by the client	   so the surface manager can check if certain operations	   are supported. */	int majorVersion;	int minorVersion;	/* Version 1.0 */	fn_getSurfaceFormat getSurfaceFormat;	fn_lockSurface lockSurface;	fn_unlockSurface unlockSurface;	fn_showSurface showSurface;} sqSurfaceDispatch; "
"MetacelloScriptEngine","MetacelloScriptEngine runs the execution of the script for one projectSpec"
"RBReturnNode","RBReturnNode is an AST node that represents a return expression.Instance Variables:	return	<Integer>	the position of the ^ character	value	<RBValueNode>	the value that is being returned"
"GTSpotterExitAnnouncement",""
"VSReleaseDevelopmentVersionCommandTest",""
"SHA256","I am SHA256, a HashFunction.I implement the SHA-2 cryptographic hash function with digest size 256.See alsohttp://en.wikipedia.org/wiki/Sha256http://csrc.nist.gov/publications/fips/fips180-2/fips180-2withchangenotice.pdfUsageSHA256 hashMessage: 'foo'.From the older class comments:Copied from CFSHA256 (Cloudfront)Please direct questions or comments about this implementation to Ron Teitelbaum: Ron@USMedRec.comThis code was extensively coppied from SHA1 by Luciano Notarfrancesco lnotarfrancesco@yahoo.com"
"SpaceTallyItem","I'm represent an entry in the spaceTally."
"PathTest","SUnit tests for file system paths"
"AnnouncementSet","If you want to register the same action for multiple events, simply create an AnnouncementSet using a comma: 	Parent>>initialize 	    super initialize. 	    self session announcer on: AddChild, RemoveChild do: [:it | self changeChild: it child]	Motivation example: Often the UI is built after/independently from the model. You want to have the model raise fine-grained announcements to enable the layers on top, but sometimes it is easier in the UI to refresh everything whenever something happens."
"ResumableTestFailureTestCase","SUnit tests for ResumableTestFailure"
"RBVariableReferencedOnceRule","Checks for instance variables that might better be defined as temporary variables. If an instance variable is only used in one method and it is always assigned before it is used, then that method could define that variable as a temporary variable of the method instead (assuming that the method is not recursive)."
"RxmTerminator","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--Instances of this class are used to terminate matcher's chains. When a match reaches this (an instance receives #matchAgainst: message), the match is considered to succeed. Instances also support building protocol of RxmLinks, with some restrictions."
"GLMValidator",""
"MorphTreeColumn","A column in a morphic based tree"
"RBMissingSubclassResponsibilityRule","This smell arises when a class defines a method in all subclasses, but not in itself as an abstract method. Such methods should most likely be defined as subclassResponsibility methods. Furthermore, this check helps to find similar code that might be occurring in all the subclasses that should be pulled up into the superclass."
"RBPackageEnvironment","I am a RBBrowserEnvironment on a set of packages or package names.I containt all entities are defined in this packages.(classes and class that have extensions from this packages)Example:(RBBrowserEnvironment new) forPackageNames:{ 'Morphic-Base'}."
"ToggleMenuItemShortcut","I'm a generic shortcut text to be shown in amenu item. I'm generic because there are different strategies to be shown: 1) Macs want to show symbols (like those weird command and option symbols)2) Windows wants to show  them as ""Alt + Shift + Something""3) Linux can live with windows schemeSo, my subclasses implements text and symbol strategies. IMPORTANT:  I'm assuming the two current existing keyText ""disposition"" in system: - the ""old style"": just the letters, like 'o, t' or 'b'- the ""full style"" (which is in part my fault, from some years ago): something like 'cmd+shift+O+T'.I format those imputs into something similar (check #expand: method for better explanation)."
"FT2GlyphRenderer","i am used to render freetype glyphs using balloon primitives."
"ASTTransformationPluginTest",""
"GLMBrowserClosing","Browser is closing"
"NautilusChanged","A NautilusChanged is raised when a NautilusUI send th message #changed:"
"MBBrowsePackageCommand","Command to browse a package in versionner"
"GlobalIdentifierTest","A GlobalIdentifierTest is a test class for testing the behavior of GlobalIdentifier"
"MetacelloVersionConstructor",""
"OkCancelToolbar","An OkCancelToolbar is a model for a basic Ok-Cancel toolbar"
"AbstractStoredSetting","I am an abstract class of all stored settings. My subclasses are responsible for keeping SettingNode identifier and its real value that is supposed to store or has been loaded. There are some objects that cannot by directly stored into a file, e.g. fonts, because they includes too much information for storing. For that reason SettingNode objects are converted into objects of my subclasses that keeps storing simple. Collaborators: StoredSettingsFactory, SystemSettingsPersistencePublic API and Key Messages- realValue- settingNodeIdentifier - settingNodeIdentifier:- isForSettingNode:- StoredSettingsFactory creates instances of me.Internal Representation and Key Implementation Points.    Instance Variables	settingNodeIdentifier:		<Symbol>"
"MacOSXPlatform","I am a an object representing a MacOSX platform. Use myself to access platform specific features.Please keep me polymorphic to the the other platform objects.To get the current platform, you can evaluate:OSPlatform current."
"RBSpecialCharacterToken","RBSpecialCharacterToken is the first class representation of special characters."
"MCInstanceVariableDefinition","A MCInstanceVariableDefinition represents an instance variable definition."
"GTMockSpotterStream",""
"RBPushDownClassVariableTest",""
"GLMMorphicDashboardRenderer",""
"FFIUInt32","I'm an unsigned int type (32 bits)"
"MBInfoTest","Common SUnit tests for MBInfo"
"CodeSearchingAcceptor","I am an acceptor in the context of code searching, using RBParseTreeSearcher"
"RBRefactoryClassChange",""
"TreeListMorph","A SimpleHierarchicalListMorph subclass supporting alternative fonts for all items.This class is badly named and should be merged with its superclass - Stephane Ducasse"
"DirectoryDoesNotExist","I am raised when I an operation is attempted inside a directory that does not exist. "
"SHTextStyler","I am an Abstract class.Subclasses of me can create formatted, coloured, and styled copies of Text that is given to them.They may perform their styling asynchronously, in a background process which I create and manage.My public interface is...	view: aViewOrMorph - set the view that will receive notifications when styling has completed.		format: aText - modifies aText's string	style: aText - modifies the TextAttributes of aText, but does not change the string, then sends #stylerStyled: to the view.	styleInBackgroundProcess: aText - performs style: in a background process, then sends #stylerStylednBackground: to the view.	styledTextFor: aText - answers a formatted and styled copy of aText	unstyledTextFrom: aText - answers a copy of aText with all TextAttributes removedSubclasses of me should re-implement...	privateFormat: aText - answer a formatted version of aText; the String may be changed	privateStyle: aText - modify the TextAttributes of aText; but do not change the String			"
"GLMSimpleRubricExample","self new open"
"GLMPagePopedAndReplaced",""
"MBConfigurationInfoCreated","A configuration info was created"
"FreeTypeFileInfoAbstract","Abstract superclass for file infos for a FreeType font"
"STONTestUser","STONTestUser is used to support unit tests.Instance Variables	enabled:		<Boolean>	password:	<String>	username:	<String>"
"RFASTTranslatorForEffect","WORKAROUND: copy of OCASTTranslatorForEffectWill be removed when the new Translor design is in place"
"DAPackageCycle","A PDPackageCycle is used to represent a cycle among packages. 	All the packages in the cycle are stored in a Collection, in the their name alphabetical order.As soon as possible, they will be stored in the order they have been found."
"InexactFloatPrintPolicy","I am InexactFloatPrintPolicy.Through FloatPrintPolicy and double dispatch I force Float>>#printOn:base: to dynamically use the faster but potentially less accurate way to print Floats using Float>>#absPrintOn:base:"
"RBCreateAccessorsForVariableTest",""
"MetacelloSymbolicVersionDoesNotExistError",""
"BitsLayout","I am a specialized layout which does not hold slots but only raw data (bytes or words)."
"GTPlayBindingThemer",""
"HashAndEqualsTestCase","I am a simple TestCase that tests for correct operation of #hash and #=.Subclasses of me need to fill my prototypes with suitable objects to be tested."
"ZnByteEncoder","I am ZnByteEncoder, a concrete subclass of ZnCharacterEncoder.I handle single byte encodings where byte values 0 to 127 map to ASCII and 128 to 255 are a permutation to Unicode characters.I derive my mappings by parsing official unicode.org specifications.The list of encodings and their names/aliases was taken from http://encoding.spec.whatwg.org/#legacy-single-byte-encodingsI basically support ISO/IEC 8859 1, 2, 3, 4, 5, 6, 7, 8, 10, 13, 14, 15 and 16, Windows Codepages 866, 874, 1250, 1251, 1252, 1253, 1253, 1254, 1255, 1256, 1257, 1258, KOI8 R & U as well as Mac Roman & Cyrillic - each of these with a number of aliases like latin1, latin2, latin3, latin4, latin5, latin6, cyrillic, arabic, greek and hebrew. See #mappingToIdentifiersNote that most/all of these encodings should be considered legacy, with UTF-8 being the preferred encoding going forward.  Part of Zinc HTTP Components."
"MTProjectTest","Test class for MTProject"
"KMKeyCombination","I'm an abstract class representing a key combination. I'm can represent several cases of key presses:- simple key presses: pressing a single key, as a letter or number, or others like tab or space- modified key presses: a simple key + a modifier like shift or alt- option key presses: a list of key presses where only one of them should be valid- chained shortcuts: a sequence of shortcutsMy more important protocols are:- matching: contains methods to control if a key combination is equals to other or matches a sequence of keyboard events- combining: defines simple ways to combine shorcut objects, like chaining them or modifying themFor more information, look at my subclasses."
"BasicBehaviorClassMetaclassTest","This class contains some tests regarding the classes 	Behavior		ClassDescription			Class			Metaclass---	"
"ObjectTest","SUnit tests for objects"
"GLMRubricTextMorphicTest",""
"SugsMenuBuilder","I'm the one who finds the best suggestion for your selection or poition in text.I also add the options to the displayed menus."
"TextAlignment","I'm a Text attribute that tells how content should be aligned.TextMorph new   newContents: (Text streamContents: [:aStream| 										aStream 											nextPutAll: 'Left flush' asText; 											cr;											nextPutAll: ('Centered' asText addAttribute: TextAlignment centered);  											cr;											nextPutAll: ('Right flush' asText addAttribute: TextAlignment rightFlush);  											cr ]);  openInWindowLabeled: 'TextAlignment demo'"
"MemoryFileSystemEntry","I am an abstract file system entry for a memory file system.My subclasses should specialize on the kind of file they are."
"GTGenericStackDebuggerSmokeTest",""
"ByteString","This class represents the array of 8 bit wide characters."
"GLMWatcherMorphicTest",""
"RGClassDefinitionTest","SUnit tests for class definitions"
"GLMMorphicWidgetRenderer","This is a helper class that is supposed to be subclassed for each rendering logic of a specific morph. For example, there will be a TreeRenderer, a TextRenderer etc"
"MCConfigurationBrowser","A MCConfigurationBrowser displays an MCConfiguration, and edits the configuration to add or remove package dependencies and repository specifications. It allows a configuration to be stored in a repository or posted to an update stream."
"PluggableButtonMorphExample","I keep some examples on how to use a PluggableButtonMorph"
"TxAthensLayoutPosition","i provide mapping from text position (TxTextPosition)to position inside view's layout."
"GTOrderedFilter",""
"GLMMorphicTextRenderer",""
"DAMissingMethodNode","I'm a tree node representing a message send, at least one time, in the package under analysis having no implementor in this package and its dependencies. "
"MCDictionaryRepository","A dictionary repository (in nemory)"
"GroupAnnouncer","Announcer for group announcements"
"PackageTreeGroupModel","I am an abstract group node model"
"LogicalFont","I describe a font."
"MCCodeTool","MCCodeTool is an abstract superclass for those Monticello browsers that display code.It contains copies of the various CodeHolder methods that perform the various menu operations in the method list."
"STONWriterError","STONWriterError is the error/exception signalled by STONWriter when illegal/incorrect input is seen. "
"MCRepositoryGroup","A singleton class, holds the list of repositories. Can look for a requested VersionInfo among its repositories."
"GLMMorphicIcons",""
"NECTypedModelTest",""
"SequenceableCollection","I am an abstract superclass for collections that have a well-defined order associated with their elements. Thus each element is externally-named by integers referred to as indices."
"DoubleLinkedListTests",""
"GZipConstants","This class defines magic numbers taken from the RFC1952 GZIP file format specification version 4.3 (1996) [1].  A class imports these constants as 'class variables' by including the following in its class definition:    poolDictionaries: 'GZipConstants' A method on the class side initialises the values. [1] http://www.ietf.org/rfc/rfc1952.txt  (Section 2.3.1 Member header and trailer) -------------8<----snip--------------- As an aside the following in [GzipConstants class >> initialize] does not match the specification for bit 5 as ""reserved"".     GZipEncryptFlag := 16r20.    ""Archive is encrypted"" I did find it defined here [2] & [3] however the FAQ [4] specifically says encryption is NOT part of the standard. This constant is only used in [GzipReadStream >> on:from:to] as...     (flags anyMask: GZipEncryptFlag)         ifTrue:[^self error:'Cannot decompress encrypted stream']. So perhaps its okay to leave but maybe some slight benefit from amending the text as follows..     GZipEncryptFlag := 16r20.    ""Archive is encrypted.  Not supported. Not part of the standard.""     ifTrue:[^self error:'Cannot decompress encrypted stream. Encryption is not part of RFC1952']. It is a better presentation to a user if you can indicate that it is someone else's fault that their decompress failed, and not Pharo. [2] http://www.onicos.com/staff/iz/formats/gzip.html[3] http://research.cs.wisc.edu/wpis/examples/pcca/gzip/gzip.h[3] http://www.gzip.org/#faq15"
"ZnCharacterEncoder","I am ZnCharacterEncoder, I encode and decode Character objects to and from a binary stream.I am an abstract class with following protocol:#nextFromStream:#nextPut:toStream:#encodedByteCountFor:#backOnStream:The first two are compatible with TextConverter and subclasses.I add some convenience methods:#encodeString:#decodeBytes:#encodedByteCountForString:Contrary to older encoders, I work strictly from strings to bytes and vice versa and I will throw errors instead of silently ignoring them.I also implement optimized bulk operations:#next:putAll:startingAt:toStream:#readInto:startingAt:count:fromStream:Part of Zinc HTTP Components."
"MBInfoListChanged","The info list changed"
"CollectionRootTest","I'm the root of the hierarchy of the collection tests."
"SessionManagerUnregistrationTest",""
"MCPackageManager","MCPackageManager is a kind of package wrapper knowing if the package is dirty or not.The class side manages registered package managers.Instance Variables:	package	<MCPackage>	modified	<Boolean>Class Instance Variables:	registry	<Dictionary>"
"FBDExamples","The method of this class in the protocols named examples are supposed to represent all the possible smalltalk semantics in the point of view of the Decompiler"
"ProgressNotification","Used to signal progress without requiring a specific receiver to notify. Caller/callee convention could be to simply count the number of signals caught or to pass more substantive information with #signal:."
"WindowScrolling","I am emitted when a window content pane is scrolled.I provide the scroll step value."
"ManifestSUnitCore","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"MalWeightedEdge",""
"SelectorException","I am SelectorException, an abstract superclass for exceptions related to a selector."
"RBRefactoringChangeTests",""
"RBDeprecateWithFirstCharacterDownshifted","Use uncapitalized instead of withFirstCharacterDownshifted since withFirstCharacterDownshifted is ugly and is deprecated now."
"GLMRubricTextPresentation","A presentation that displays text using Rubric."
"MockFinalizerAction","I am test object used for the WeakRegisty tests.Upon finalization I trigger a custom finalizationAction (usually a Block)"
"PasteUpMorph","A morph whose submorphs comprise a paste-up of rectangular subparts which ""show through"".  Anything called a 'Playfield' is a PasteUpMorph.Facilities commonly needed on pages of graphical presentations and on simulation playfields, such as the painting of new objects, turtle trails, gradient fills, background paintings, parts-bin behavior, collision-detection, etc., are (or will be) provided."
"GLMBrickLayoutMyselfState",""
"AbstractTool","I'm an abstract class grouping generic methods for managing packages/classes/groups/methods from a browser"
"KomitObject","I'm the superclass keeping track of the state of the object (added/modified/removed) but according the kind of object the changes apply to. My subclasses KomitClass, KomitDefinition, KomitPackage and KomitMethod wrap MCAddition/MCRemoval/MCDefinition. While the hierarchy of MCDefinition is about the kind of change (addition, removal, definition),the current hierarchy is about the kind of objects changes apply to.Now it would be interested to see if this hierarchy has been created because of lack of awareness that the hierarchy of MCDefinition is already proposing such facilities. "
"AbstractMethodUpdateStrategy","I am used to update compiled methods in response to class modifications.My sublcasses implement different strategies to update affected methods."
"OSWindowFocusOutEvent","I am delivered when window loses the user input focus."
"MBLoadConfigurationCommand","Command to load a configuration in Versionner"
"DynamicMessageImplementor","Called in the debugger to generate methods when you click on the create button"
"MBLoadConfigurationCommandTest",""
"GLMMorphicPagerRenderer","A GLMMorphicPagerRenderer is xxxxxxxxx."
"FTRootItemsStrategy","I am a Strategy that will use the function on the roots item only.Description-----------------------I will search in the roots item of the tree.As said in my superclass I am use by a FTTreeDataSource to help with a FTFunction.Public API and Key Messages------------------------ #realSearch 	is the method that will launch the search.Example-----------------------	| ds |	ds := FTTreeDataSource		roots:			((ProtoObject allSubclasses sort: [ :a :b | a asString < b asString ])				reject: [ :e | e asString endsWith: 'class' ])		children: [ :item | item subclasses sort: [ :a :b | a asString < b asString ] ].	ds searchStrategy: #rootsOnly. ""This will say to the FTTreeDataSource to use me.""	FTTableMorph new		extent: 200 @ 400;		dataSource: ds;		explicitFunction;		openInWindow "
"MalDominance",""
"DockingBarMenuItemMorph","A DockingBarMenuItemMorph is a specialized version of its superclass for DockingBar behavior."
"NaNException","I am NaNException, an ArithmeticException signaled when Float nan was encountered where it was not allowed. "
"ManifestSystemVMEvents","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"PackageTreeExample","PackageTreeExample new open"
"GTWhereIsDebugAction","This debugger action is responsible for reselecting the code corresponding with the current instruction to be executed."
"GLMBrickPopupErrorDarkThemer",""
"RBInlineMethodFromComponentTest",""
"IdentityDictionary","Like a Dictionary, except that keys are compared with #== instead of #= .See the comment of IdentitySet for more information."
"IRPushRemoteTemp","push remote temp"
"FFIInt32","I'm a signed int type (32 bits)"
"RxsRegex","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--The body of a parenthesized thing, or a top-level expression, also an atom.  Instance variables:	branch		<RxsBranch>	regex		<RxsRegex | RxsEpsilon>"
"FLMethodChanged","I represent an error produced during materialization when is detected a change in the bytecodes of a method serialized as global. This error was born when testing the materialization of a BlockClosure defined in a method that changed. The test produced a VM crash."
"GLMPagePoped",""
"DatePrintFormatTester","I am a helper object used for validating formatted Date strings."
"SelectVisitor","I am a visitor that selects objects from the nodes I visit. I take a block similar to those passed to Collection>>select:. I evaluate the block with DirectoryEntries for the nodes I visit.I can use any guide, and the objects in the array I produce will reflect the order imposed by the guide."
"ClippingCanvas","A modified canvas which clips all drawing commands."
"AthensCairoPDFSurface","i am a concrete implementation of Athens surface which using cairo graphics library for rendering for generating PDF filesas output.<currently it is not functional and need more testing and coding>"
"ManifestSystemObjectEvents","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"OCSuperVariable","I model super variables"
"RGPackage","RGPackage is the representation for packages.A package manages classes, methods and children packages as elements.A package can also know in which package is defined"
"MCDependentsWrapper","Specialized list item wrapper for dependents"
"RBClassInstVarNotInitializedRule","Checks that all classes that have class instance variables also have an initialize method. This makes sure that all class instance variables are initialized properly when the class is filed-into a new image. Having well initialized instance variables also make sure that clients can rely on default values and to not have to spread their code with ifNil statement and cumbersome logic."
"RGContainerTest","SUnit tests for container"
"AthensFontDescription","Creates a new font description from a string representation in the form ""[FAMILY-LIST] [STYLE-OPTIONS] [SIZE]"", 1)FAMILY-LIST is a comma separated list of families optionally terminated by a comma,2)STYLE_OPTIONS is a whitespace separated list of words where each WORD describes one of style, variant, weight, stretch, or gravity. If STYLE-OPTIONS is missing, then all style options will be set to the default values3)SIZE is a decimal number (size in points) or optionally followed by the unit modifier ""px"" for absolute size. "
"GLMPaginatedResizableMorphTreeMorph",""
"OSSDL2FormRenderer","My instances implement OSWindowFormRenderer interface using SDL2 library"
"OpalEncoderForLongFormV3","I am an alternate to EncoderForV3 that tries to use thje longest forms of bytecodes possible so as to avoid using as many bytecode as possible to allow for the unused portions of the bytecode set this makes available to be reassigned.I do not use the following ranges0 through 111	   0- 15 	0000iiii 	Push Receiver Variable #iiii	  16- 31 	0001iiii 	Push Temporary Location #iiii	  32- 63 	001iiiii 		Push Literal Constant #iiiii	  64- 95 	010iiiii 		Push Literal Variable #iiiii	  96-103 	01100iii 	Pop and Store Receiver Variable #iii	104-111 	01101iii 	Pop and Store Temporary Location #iii138-159	138-143 				Unused.	144-151 	10010iii 	Jump iii + 1 (i.e., 1 through 8).	152-159 	10011iii 	Pop and Jump 0n False iii +1 (i.e., 1 through 8).176-255	176-191 	1011iiii 	Send Arithmetic Message #iiii	192-207 	1100iiii 	Send Special Message #iiii	208-223 	1101iiii 	Send Literal Selector #iiii With No Arguments	224-239 	1110iiii 	Send Literal Selector #iiii With 1 Argument	240-255 	1111iiii 	Send Literal Selector #iiii With 2 Arguments= 112 + (160 - 138) + (256 - 176) =  214, or 84% of the bytecodes"
"RBRefactoryChange","I am the superclass of all refactoring change objects. All I have is a name for the refactoring, but I can perform one or more refactoring operations with the message #execute. I am a composite object. To know about my components, ask me with #changes and #changesSize. "
"EmbeddedFreeTypeFontInstaller","An EmbeddedFreeTypeFontInstaller installs embedded free type fonts in a provider.It registers itself as a font installer to FreeTypeFontProvider. And when someone asks to update fonts from system, EmbeddedFreeTypeFontInstaller installs corresponding fonts.Instance Variables	embeddedFileInfoCache:		<Dictionary>	provider:		<FreeTypeFontProvider>embeddedFileInfoCache	- internal cacheprovider	- a provider which asks for installing the embedded fonts."
"JobTest","SUnit tests for Job class"
"ImmediateLayout","I am the special layout for SmallIntegers.SmallIntegers are typically implemented as tagged pointers and thus require a special format."
"SugsFinderContext","I know how to  extract the information needed for the suggestions from a finder UI object"
"TxBasicSpan","I am an abstract class, representing a portion of text (span).I form a double-linked list with my neighbour spans and our full list forms the contents of text.Spans have a size and can have attributes. Size represents the number of positions within a span, which always =  size + 1.For instance a character span with 2 characters 'AB' , can have 3 different positions: |AB A|B AB|where '|' shows the position in the span and ranges from 0 to 2.In this way TxTextPosition can navigate a span (using moveLeft/moveRight commands),without actually needing to deal with strings, characters or anything else."
"DAPackageCycleDetectorTest",""
"FFIExternalArray","I am class which provides a convenient interface to work with arrays which elements are values of some external (C) type.This class uses double dispatch to solve #at: and #at:put: methods, if you need to achieve speed, is recommendable to subclass me and override this methods to avoid the indirection."
"FixedLayout","I am the default layout for objects.I contain a fixed number of Slots.Instances of classes using this kind of layout have always the same size."
"GLMEvaluateSelection","I am event indicating to the renderer to execute the currently selected text and perform an action with the result."
"UITestCase","All instances of UITestCase are skipped in headless mode."
"RxmSpecial","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A special node that matches a specific matcher state rather than any input character.The state is either at-beginning-of-line or at-end-of-line."
"ProcessTerminateBug","SUnit tests for Process termination"
"EyeInspector","To do a specific inspector subclass this and override 	EyeInspector>>addSpecialFieldsThen on your object override	Object>>inspectorClassso it returns your new inspector"
"ChunkWriteStream","I am a write stream that write chunks of Strings. That is, pieces of text separated by!!symbols"
"RBVariableAssignedLiteralRule","If a variable is only assigned a single literal value then that variable is either nil or that literal value. If the variable is always initialized with that literal value, then you could replace each variable reference with a message send to get the value. If the variable can also be nil, then you might want to replace that variable with another that stores true or false depending on whether the old variable had been assigned."
"RxsPredicate","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--This represents a character that satisfies a certain predicate.Instance Variables:	predicate	<BlockClosure>	A one-argument block. If it evaluates to the value defined by <negated> when it is passed a character, the predicate is considered to match.	negation	<BlockClosure>	A one-argument block that is a negation of <predicate>."
"QuotedPrintableMimeConverter","I am QuotedPrintableMimeConverter.I am a MimeConverter.Quoted-Printable, or QP encoding, is an encoding using printable ASCII characters (alphanumeric and the equals sign ""="") to transmit 8-bit data over a 7-bit data path or, generally, over a medium which is not 8-bit clean. It is defined as a MIME content transfer encoding for use in e-mail.QP works by using the equals sign ""="" as an escape character. It also limits line length to 76, as some software has limits on line length.See also   http://en.wikipedia.org/wiki/Quoted-printable  http://tools.ietf.org/html/rfc2045I do quoted printable MIME decoding as specified in RFC 2045 ""MIME Part One: Format of Internet Message Bodies"".Short version of RFC2045, Sect. 6.7:	(1) Any octet, except a CR or LF that is part of a CRLF line break of the canonical (standard) form of the data being encoded, may be represented by an ""="" followed by a two digit hexadecimal representation of the octet's value. [...]	(2) Octets with decimal values of 33 through 60 inclusive, and 62 through 126, inclusive, MAY be represented as the US-ASCII characters which correspond to those octets [...].	(3) Octets with values of 9 and 32 MAY be represented as US-ASCII TAB (HT) and SPACE characters, respectively, but MUST NOT be so represented at the end of an encoded line.  [...]	(4) A line break in a text body, represented as a CRLF sequence in the text canonical form, must be represented by a (RFC 822) line break, which is also a CRLF sequence, in the Quoted-Printable encoding.  [...]	(5) The Quoted-Printable encoding REQUIRES that encoded lines be no more than 76 characters long.  If longer lines are to be encoded with the Quoted-Printable encoding, ""soft"" line breaks must be used.  An equal sign as the last character on a encoded line indicates such a non-significant (""soft"") line break in the encoded text."
"NautilusShowCommentChanged","A NautilusShowCommentChanged is raised when showComment is switched"
"GLMWizard","A wizard Instance Variables	cancelButtonAction:		<Object>	currentIndex:		<Object>	externalCancelButtonAction:		<Object>	externalNextButtonAction:		<Object>	externalPreviousButtonAction:		<Object>	externalTerminateButtonAction:		<Object>	genericStep:		<Object>	nextButtonAction:		<Object>	previousButtonAction:		<Object>	specificAnnouncementActions:		<Object>	steps:		<Object>	stepsAndPanes:		<Object>	stepsDictionary:		<Object>	terminateButtonAction:		<Object>	wizardSize:		<Object>cancelButtonAction	- xxxxxcurrentIndex	- xxxxxexternalCancelButtonAction	- xxxxxexternalNextButtonAction	- xxxxxexternalPreviousButtonAction	- xxxxxexternalTerminateButtonAction	- xxxxxgenericStep	- xxxxxnextButtonAction	- xxxxxpreviousButtonAction	- xxxxxspecificAnnouncementActions	- xxxxxsteps	- xxxxxstepsAndPanes	- xxxxxstepsDictionary	- xxxxxterminateButtonAction	- xxxxxwizardSize	- xxxxx"
"RBArrayNode","A RBArrayNode is an AST node for runtime arrays.Instance Variables	left:	 <Integer | nil> position of {	periods: <SequenceableCollection of: Integer> the positions of all the periods that separate the statements	right: <Integer | nil> position of }	statements: <SequenceableCollection of: RBStatementNode> the statement nodes"
"PreDebugSubclassResponsabilityAction","A PreDebugSubclassResponsabilityAction adds the SubclassResponsabilityDebugAction debugging actions to the pre debug window. When executed, it will further close the pre debug window and open the full debugger. Instance Variables	preDebugWindow:		<Object>preDebugWindow	- xxxxx"
"GlobalIdentifier","I keep global IDs that are used for tracking user activity, e.g. computer id. By default, you should access me by calling #uniqueInstance.Responsibility:The IDs that are important to store onto disk (and shared by all images) should be placed in persistedInformation instance variable. On other hand, if you do not want to store it onto disk, create a new instance variable. I can #loadPreferences and #savePreferences onto a disk.I know computer ID and secret ID. Computer ID is a global UUID that is share among all the images. It is stored on a local disk. Secret ID is use for encrypting information, e.g., class names, method names. You can use #hashForText: method.Collaborators: I do not collaborate with other classes. I only offer the basic IDs for other frameworks.Public API and Key Messages- computerUUID - ensureComputerUUID- hashForText:- loadPreferences - savePreferences.Before using #computerUUID, you should call #ensureComputerUUID. It will update UUID from the disk or stores existing one if it is not stored yet. I behave like this as automatic storing data to disk on image start-up leads to errors.Internal Representation and Key Implementation Points.    Instance Variables	persistedInformation:		<Dictionary>	preferences:		<FileReference>"
"KMDispatcher","I'm an object that saves a buffer of keyevents for the morph I'm attached.I am the one that dispatches the single and multiple shortcuts.If the morph has a keymap that matches the keyboard event, I tell the keymap event to execute with the morph I'm attached."
"MCMockClassE",""
"KomitHttpRemote","I encapsulate a gemstone repository"
"EyeTreeInspector","I am a tree inspector that takes the EyeElements from the default inspectors and displays them in a tree."
"FLPointerObjectCluster","I have the common behavior for storing and loading pointer objects."
"VSCommitMinorVersion","I'm a minor version."
"TabsExample","I am an example of how to use tabsTabsExample open"
"RBReturnsBooleanAndOtherRule","This smell arises when a method return a boolean value (true or false) and return some other value such as (nil or self). If the method is suppose to return a boolean, then this signifies that there is one path through the method that might return a non-boolean. If the method doesn''t need to return a boolean, it should be probably rewriten to return some non-boolean value since other programmers reading the method might assume that it returns a boolean."
"ZnSimplifiedServerTransactionEvent","ZnSimplifiedServerTransactionEvent is a ZnServerLogEvent that notes the completion of a served side HTTP transaction (request/response). Only a limited number of simpler data is held. ZnServerTransactionEvent contains much more detailed data.Instance Variables	method: HTTP verb	url: ZnUrl requested	response:	numeric response code	size: number of bytes in response	duration: millisecondsZnSimplifiedServerTransactionEvent is ideal for classic HTTP logging with little overhead through its default string representation."
"GLMRubricExample",""
"SmallCogState2","Second state of a small cog turning animation"
"AthensAbstractPaint","I am an abstract paint, which should be converted before it can be used by Athens.I am backend agnostic, as opposed to concrete paint(s).Also, any other object can play the role of paint, as long as it implements the conversion method, #asAthensPaintOn:See other implementors of #asAthensPaintOn:, such as Color and Form."
"SugsRenameMethod","I know how to rename methods"
"BraceNode","Used for compiling and decompiling brace constructs.These now compile into either a fast short form for 4 elements or less:	Array braceWith: a with: b ... or a long form of indefinfite length:	(Array braceStream: N) nextPut: a; nextPut: b; ...; braceArray.The erstwhile brace assignment form is no longer supported."
"SpecTableLayoutAddWithSpec","A SpecLayoutAddWithSpec is an action representing an add in the spec table layout with a spec selector precised"
"GoferRecompile","Recompile"
"DateTest","This is the unit test for the class Date. "
"Delay","I am the main way that a process may pause for some amount of time.  The simplest usage is like this:	(Delay forSeconds: 5) wait.   ""or...""	5 seconds asDelay wait.An instance of Delay responds to the message 'wait' by suspending the caller's process for a certain amount of time. The duration of the pause is specified when the Delay is created with the message forMilliseconds: or forSeconds:. A Delay can be used again when the current wait has finished. For example, a clock process might repeatedly wait on a one-second Delay.  Delays work across  clock roll-overs.The maximum possible delay depends on which DelayScheduler is used:  * DelayMillisecondScheduler uses a 32-bit value that rolls over about every six days, or SmallInteger maxVal // 2 milliseconds.  * DelayMicrosecondScheduler is 64-bit and rolls over every 50,000 years. A delay in progress when an image snapshot is saved and resumed when the snapshot is re-started. "
"TemporaryVariable","I model a temporary virable, similar to Slot and LiteralVariable.For now I am cread on need and never persisted. (this might change laterto allow me to be annotated with properties.)I know the method that I come from. If I am a block temp, I record the startPC of that block."
"CairoTextExtents","I represent thecairo_text_extents_tstructure typeThe cairo_text_extents_t structure stores the extents of a single glyph or a string of glyphs in user-space coordinates. Because text extents are in user-space coordinates, they are mostly, but not entirely, independent of the current transformation matrix. If you call cairo_scale(cr, 2.0, 2.0), text will be drawn twice as big, but the reported text extents will not be doubled. They will change slightly due to hinting (so you can't assume that metrics are independent of the transformation matrix), but otherwise will remain unchanged.double x_bearing;	the horizontal distance from the origin to the leftmost part of the glyphs as drawn. Positive if the glyphs lie entirely to the right of the origin.double y_bearing;	the vertical distance from the origin to the topmost part of the glyphs as drawn. Positive only if the glyphs lie completely below the origin; will usually be negative.double width;	width of the glyphs as drawndouble height;	height of the glyphs as drawndouble x_advance;	distance to advance in the X direction after drawing these glyphsdouble y_advance;	distance to advance in the Y direction after drawing these glyphs. Will typically be zero except for vertical text layout as found in East-Asian languages."
"MCMergeRecord","A record for merging"
"OSButtonState","I am holding a set of mouse buttons state (pressed or not).Used by various mouse events."
"GTSpotterExceptionMock4",""
"RBLiteralValueNode","RBLiteralNode is an AST node that represents literal values (e.g., #foo, true, 1, etc.), but not literal arrays.Instance Variables	value	<Numeric | Symbol | String  | Character>	the literal value I represent"
"GTSpotterSettingsProcessorFilter","I implement a filtering strategy for processors that takes into account the GTSpotterExtensionSettings. Essentially, I will only allow processors that appear as enabled in the Settings Browser."
"DiffElement","My instances are container objects used by TextDiffBuilder for comparison. They hold a string and the precomputed hash of the string to speed up #=. They may reference another DiffElement object which is their pair in the diff.Instance Variables	hash:		<Integer>	match:		<DiffElement>	string:		<String>hash	- the hash of string, stored for fast accessmatch	- another DiffElement object which has the same string and turned out to be my pair in the longest common subsequence found by a TextDiffBuilder, or nil if I don't a matching DiffElementstring	- a part of a longer text, typically a line"
"Latin9Environment","This class provides the support for the languages in 'Latin-9' category."
"MetacelloGroupSpec",""
"MemoryFileSystemDirectory","I represent a memory file system entry for a directory"
"ZnEndianSensitiveUTFEncoder","I am ZnEndianSensitiveUTFEncoder.I am a ZnCharacterEncoder.I add support for UTF encodings that are sensitive to endianness.The default is big endian."
"AbstractModification","Modifications to a high-level class have an impact on the related low-level structures. There are two modification models that transform the high-level model into concrete low-level modifications models, the method modification model and the instance modification model. Both models list for every field, whether it was added, removed, or shifted to a new position.Instance Variables:	slotShift	<Integer>	modificationMap	<(Collection of: AbstractFieldModification)>"
"TextMorphForEditorView","Used by PluggableTextEditorMorph to specify a plain TextEditor for the editor"
"ConfigurationOfCodeImporter","(ConfigurationOfCodeImporter	project version: '1.1.0') load"
"SpecDebugActionButton","I am a button encapsulating a debug action. All my settings are set based on the corresponding debug action."
"NNavDirection","I'm the one who knows generalization to navigate an ast treeI have two concret classes: NavigateInto and NavigateOver"
"SugsNautilusContext","The implementation who asumes that my model it's a nautilus object."
"ZnCurrentServerSession","I am ZnCurrentServerSession.I am a ProcessLocalVariable and a ProcessSpecificVariable.I hold a reference to the current ZnServerSession instance during HTTP processing, during the dynamic scope of #handleRequest:ZnServerSessions are created lazily."
"SHMethodEditingMode","This example shows how to use shout for method editing. Try it with:SHMethodEditingMode new openFor method editing, you need to provide a class to the styler. When a class is given, the styler is automatically turned into a method editing mode.The styler is then able to style the code according to the class bindings (instance variables names, shared pool...)See #shoutAboutToStyle.   - First, the class is given to the styler by sending #classOrMetaClass: to the view with the class as argument.  - Finally, in this example, #shoutAboutToStyle returns true because the code is always to be styled.Instance Variables	className:		<String>	code:		<String>className	- The class name for the stylercode	- the code which is entered into the editor  "
"MBAddConfigurationCommand","Command to add a configuration in Versionner"
"GLMPagePushed",""
"ZnStatusLineTests",""
"RBAllAnyNoneSatisfyRule","Replace ad-hoc implementations (using explicit logic based on do:) of ==allSatisfy:==, ==anySatisfy:== and ==noneSatisfy:== by the adequate calls to ==allSatisfy:==, ==anySatisfy:== or ==noneSatisfy:==. For example [[[  collection do: [ :each |				...				condition					ifFalse: [ ^ false ] ]]]]is transformed into [[[  collection allSatisfy: [ :each | condition ]]]]"
"RBNamespaceTest",""
"GroupCreatorTreeModel","Tree model for group creation in Nautilus"
"ClassQueryTest",""
"OCArrayLiteralTest",""
"SelfEyeElement","I am an eye element for self"
"TxEmbeddedObjectSpan","To place an embedded object into text"
"WorldMenuHelp",""
"LoadedPackagesGroupCreatingCodeProvider","I create a Nautilus group with all the loaded packages from a configuration inside of it.Use it by providing the way to get all the necessary informations to access data. See class side.You can use it through the CatalogBrowser, Versionner or by hand with :(ConfigurationOfXXX project version: aVersion) loadAndCreateGroupInNautilus "
"GLMPhlowBrick",""
"WindowsStoreTest","SUnit tests for class WindowsStore"
"BinaryFileStreamTest",""
"MetacelloScriptImageExecutor",""
"TestAnnouncement","Notify about testing a test"
"ProcessTest","A ProcessTest holds test cases for generic Process-related behaviour."
"ConfigurationNotFound","Error raised when a configuration class for a project is not loaded and / or cannot be found!"
"ExampleSetTest","SUnit tests for example set"
"GLMTextPresentation","A presentation displaying text.Instance Variables:	selectedTextBlock	<ProtoObject>	highlightSmalltalk	<Boolean>	highlightSmalltalkContext	<Object>	textBlock	<ProtoObject | PseudoContext>"
"MetacelloToolBoxTutorial",""
"ManifestSystemLocalization","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GTSpotterCategoryBrick",""
"OSTouchThreeFingersScrollEvent","I am the abstract class for all three fingers scroll events"
"OSTouchActionPointerEvent","Superclass of all the pointer Event	Can be a finger or something else."
"ClassRemoved","the annoucement will be emitted when removing a class or a trait using:  	=> removeFromSystem"
"MorphicTableContainerAdapter","I am the adapter providing container with table layout"
"GLMBrickTabLabelDarkThemer","I'm a style module related to tab label modified for Dark Theme"
"AthensPolygonTester","I implementing a simple and efficient algorithm to test whether given pointlies withing a polygon or not.A polygon is a collection of points 1...size."
"ZnClientConnectionClosedEvent","ZnClientConnectionClosedEvent signals that a client side connection to address:port is closed."
"ValueChanged","A ValueChanged is an announcement raised when a value of a NewValueHolder is changed"
"SpecLayoutAddRow","A SpecLayoutAddRow is an action representing the addition of a row to a layout"
"Checksum","I represent the abstact superclass of all checksum algorithms."
"KMCategoryTest",""
"HashTesterTest","I am a simple test case to check that HashTester works correctly"
"StartupPreferencesLoader","StartupPreferencesLoader searches for and executes .st files from certain locations such as Library/Preferences/pharo on Mac OS X.  StartupPreferencesLoader looks within such locations for a 'pharo' folder. This contains the startup scripts common to all versions of Pharo, and also optionally a folder per Pharo version holding startup scripts suitable for that version only.  So a typical directory layout might be....../some/folders/pharo/Content/Resources/pharo.image..../some/folders/pharo/Content/Resources/startup.st.../some/folders/.config/pharo/author.st.../some/folders/.config/pharo/useSharedCache.st.../some/folders/.config/pharo/1.4/mystartupFor14only.st.../some/folders/.config/pharo/2.0/mystartupFor20only.st(**Note however that '.config' is an invalid filename on Windows, so '..config' is used instead)To know the real values for you...Print the result of ""StartupPreferencesLoader preferencesGeneralFolder"" which holds the startup scripts common to all versions of Pharo.Print the result of ""StartupPreferencesLoader preferencesVersionFolder"" which holds the startup scripts specific to the version of the current image.-----------StartupPreferencesLoader examplewill define a script sample startup.st in your unix root on unix Its contents is StartupPreferencesLoader default executeAtomicItems: {	StartupAtomicItem name: 'Open Help' code: 'Workspace openContents: ''Here is just an example of how to use the StartupPreferencesLoader.I should only be displayed once.	You can also see StartupPreferencesLoader class>>#example'' label: ''Help''' isSingleton: true.	StartupAtomicItem name: 'Open Workspace' code: 'Workspace openContents: ''I should be displayed each time'''.}For a more complete example, see StartupPreferencesLoader class>>#example2"
"ImportingResourceHelp",""
"MBAddConfigurationCommandTest",""
"NNavDirectionParent","I'm the one who knows how to navigate going to the parent node."
"RBRenameInstanceVariableRefactoring",""
"HistoryIteratorTest",""
"SystemSettings",""
"RxmLookahaed","Instance holds onto a lookead which matches but does not consume anything.Instance variables:	predicate		<RxmLink>"
"CairoFontExtents","I represent thecairo_font_extents_t structure typeThe cairo_font_extents_t structure stores metric information for a font. Values are given in the current user-space coordinate system.Because font metrics are in user-space coordinates, they are mostly, but not entirely, independent of the current transformation matrix. If you call cairo_scale(cr, 2.0, 2.0), text will be drawn twice as big, but the reported text extents will not be doubled. They will change slightly due to hinting (so you can't assume that metrics are independent of the transformation matrix), but otherwise will remain unchanged.double ascent;	the distance that the font extends above the baseline. Note that this is not always exactly equal to the maximum of the extents of all the glyphs in the font, but rather is picked to express the font designer's intent as to how the font should align with elements above it.double descent;	the distance that the font extends below the baseline. This value is positive for typical fonts that include portions below the baseline. Note that this is not always exactly equal to the maximum of the extents of all the glyphs in the font, but rather is picked to express the font designer's intent as to how the font should align with elements below it.double height;	the recommended vertical distance between baselines when setting consecutive lines of text with the font. This is greater than ascent+descent by a quantity known as the line spacing or external leading. When space is at a premium, most fonts can be set with only a distance of ascent+descent between lines.double max_x_advance;	the maximum distance in the X direction that the origin is advanced for any glyph in the font.double max_y_advance;	the maximum distance in the Y direction that the origin is advanced for any glyph in the font. This will be zero for normal fonts used for horizontal writing. (The scripts of East Asia are sometimes written vertically.)"
"PluggableMenuSpec","I'm a spec for a menu. The World menu pragma based registration uses it for now. I'm moved in this package so that later we can decide what to do with it. We could probably avoid MenuSpec and just use MenuMorph instead. "
"VersionnerProjectPanel","A VersionPanel is the panel used to show details about a given version of a configurationOf.Instance Variables	config: 				The configuration (an MBConfigurationInfo instance) of the project to display details on. 	packageList:			The specWidget used to display packages describes in the version"
"OSJoyDeviceRemappedEvent","I am a joystick device remapped event.This event is generated when a joystick layout is remapped."
"BaselineOfMetacello",""
"SugsGlamourCodeContext","I know how to use a Glamour  code model to  and extract the information needed for the suggestions"
"RubPrimarySelectionUpdatedInModel","I am raised when the selection changes in the model side"
"AddedField","I represent the change of a newly added field on an instance."
"ConfigurationOfGlamourCore","Core configuration of Glamour for integrating with Pharo.self loadDevelopment"
"GTSpotterExceptionHandler",""
"OSTouchOneFingerDoubleTapDetector","I am the detector of a finger which double tapped.I send these event back to my handler: 	- OSTouchOneFingerDoubleTapEvent"
"GTSpotterRecorderEvent","GTSpotterRecorderEvent is the root class for representing usage data generated by Spotter. All events have a timestamp."
"FFIExternalObjectType","I'm en external object type (a pointer)"
"WatchpointIconStyler","I'm in charge to style an ast when there are watchpoints"
"CompressedBoundaryShape","This class represents a very compact representation of a boundary shape. It consists of a number of compressed arrays that can be handled by the balloon engine directly. Due to this, there are certain restrictions (see below). Boundaries are always represented by three subsequent points that define a quadratic bezier segment. It is recommended that for straight line segments the control point is set either to the previous or the next point.Instance variables:	points		<PointArray | ShortPointArray>	Point storage area	leftFills		<ShortRunArray>	Containing the ""left"" fill index of each segment	rightFills	<ShortRunArray>	Containing the ""right"" fill index of each segment	lineWidths	<ShortRunArray>	Containing the line width of each segment	lineFills		<ShortRunArray>	Containing the line fill (e.g., line color) of each segment	fillStyles	<Collections>			Contains the actual fill styles referenced by the indexesRESTRICTIONS:None of the ShortRunArrays may contain a run of length Zero.Also, due to the use of ShortRunArrays 	a) you cannot have more than 32768 different fill styles	b) you cannot have a line width that exceeds 32768In case you have trouble with a), try to merge some of the fills into one. You might do so by converting colors to 32bit pixel values. In case you have trouble with b) you might change the general resolution of the compressed shape to have less accuracy."
"StrikeFontStoredSetting","I am responsible for storing information about StrikeFont objects."
"WikiStyleHelpTest","SUnit tests for WikiStyleHelp"
"GLMBrickLayoutEvent",""
"FreeTypeCache","Cache for freetype fonts"
"GLMRubricSmalltalkTextModel",""
"MalGraphEdge",""
"ProportionalSplitterMorph","I am the morph the user grabs to adjust pane splitters."
"GTEventCollectorTest","A GTEventCollectorTest is a test class for testing the behavior of GTEventCollector"
"IntegerFlagAlien","A class to wrap the inIoProcessEvents flag in the WIndows VM."
"RPackageStringExtensionTest",""
"ExampleClassVariable","I am an example for a class variable that stores the value in the variable.(same semantics as normal variables but using reflective code path for testing)"
"HistoryCollection","I'm a data structure used to store an history.My behavior is	- I store Associations (anElement -> anInteger), where anElement is the element to store and anInteger the number of times it has been added. (as a Dictionary)	- I only store once each element (as a Set).	- I have a max size. If I add an element and have reached the max size, I remove the less seen element.	- I store element in the chronological order (as an OrderedCollection)"
"MorphicEventHandler","I'm the class in charge of handling the subscriptions to events such as clicks or key presses.I'm a provisory solution while my clients are fixed and I can be replaced by announcements"
"NullCanvas","A canvas which ignores all drawing commands."
"VMCallbackContext32","A VMCallbackContext32 is anAlien for the 32-bit version of VMCallbackContext (defined in the VMMaker package), a struct that maintains all the necessary context for a callback.typedef struct {    void *thunkp;    char *stackptr;    long *intRegArgs;    double *floatRegArgs;    void *savedCStackPointer;    void *savedCFramePointer;    union {                            long vallong;                            struct { int low, high; } valleint64;                            struct { int high, low; } valbeint64;                            double valflt64;                            struct { void *addr; long size; } valstruct;                        }   rvs;    jmp_buf trampoline; } VMCallbackContext;Instance Variables"
"TickSelectionCheckboxButtonMorph","A TickSelectionCheckboxButtonMorph is the button hidden into the TickSelectionCheckboxMorph"
"CriticWorkingConfiguration","A CriticWorkspace holds the current worspace for the CriticBrowser.It's composed of the set of rules to check (as a composite rule) and the environment to work in."
"RBLintRuleTest",""
"MBLoadProjectFromArchiveCommand","Command to load project from archive in versionner"
"MorphicFastTableAdapter","I am the adapter used to bridge an FastTableModel and a FTPluggableIconListMorphAdaptor"
"AthensShadowPaint","I representing a shadow paint object used by Athens.My subclasses provide backend-specific implementation.I am more serving to define the common protocols andrequirements for all backends (such as defaults).IMPORTANT NOTE: a shadow paint object provides a protocol only for setting shadow properties, but not retrieving them back.This is intentionally, because the way how these properties ismanaged are highly backend-specific. The shadow paint has following properties: - color. A shadow color defined in RGBA color space.	Default: Color black alpha: 0.5 - shadow width. Can be set using #width:	Default: if width is not set explicitly for shadow paint,		it is assumed to be equal to 2.0.		 - shadow offset. Defines how far shadow is located.	Shadow offset is a point where x component defines ofset on x-asix and y component on y-axis.		Default: if offset is not set  explicitely it is assumed to be equal 2@2.			 - shadow blur. Defines how smooth shadow is.	Blur is a point with x component defining bluring along x-axis and y component along y axis		Default: if blur is not set explicitely it is assumed to be equal 4@4"
"MCStWriterTest",""
"OSTouchActionPointerMoveEvent","aFinger just move."
"GLMWatcherWindow","This morph is used as support for the watcher (quick preview) behavior.GLMWatcherWindow uniqueInstance openInWorld.GLMWatcherWindow reset."
"GTExecuteSelectionDebugAction","This action is responsible for executing a selected piece of code from the code pane of the debugger."
"GLMWrapperMorphicTest",""
"EnumWindowsProc","BOOL CALLBACK EnumWindowsProc(HWND hwnd, LPARAM lParam);"
"OSWindowMouseEnterEvent","I am delivered when mouse enters the area , covered by a window"
"ManifestKernelTests","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"MetacelloGoferCommit",""
"DAPackageAnalyzerDiffTreeModel","A PDPackageAnalyzerDiffTreeModel is to watch what are the difference between two analysis of dependencies."
"SparseLargeTable","Derivated from Stephan Pair's LargeArray, but to hold a sparse table, in which most of the entries are the same default value, it uses some tricks."
"MyBooleanObject",""
"AthensBalloonSolidColorPaint","maybe Color could act as a AthensPaint by itself by implementing a corresponding protocol"
"MetacelloSkipDirtyPackageLoad",""
"RBAssignmentOnBlockArgumentRule","Check for assignments on block arguments.For example:[:x :y|	x:= x+y.	]The block argument ""x"" should not be written. This is considered bad style. And some compiler may reject that code."
"SDL_ControllerDeviceRemappedEvent","SDL2 library structure representing a controller device remapped event data."
"GLMNullLogger","This class simply implements the Null pattern."
"SugsBreakOnceSuggestion","This class defines AST node menus for one time breakpoints"
"RubEditingMode","I am an abstract class to choose the editing mode of the text area "
"GLMLoggedObject","A GLMLoggedObject is a custom announcer that logs all events that it announces.Instance Variables	logger:		<Object>logger	- xxxxx"
"OSTouchThreeFingersSwipeEndEvent","Three fingers finished to swipe"
"ProcessSpecificVariable","My subclasses (not instances of them) keep state specific to the current process.There are two kinds of process-specific variables: process-local (state availablefor read and write in all methods inside the process), and dynamic variables(implementing dynamic scope)."
"RxsBranch","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A Branch is a Piece followed by a Branch or an empty string.Instance variables:	piece		<RxsPiece>	branch		<RxsBranch|RxsEpsilon>"
"FBDConditionalLoop","I represent a conditional loop (typically, a for or while loop). In addition to my superclass I hold the pc of the conditional jump that exits the loop body.exitCondition <Smi> pc of the conditional jump where the execution flows exits the loop body."
"GoferWorking","Common superclass for workin copies in Gofer"
"FFICalloutTests",""
"LoadingMorphState","I am the abstract super class of the loading morph state.They are used as state in a state machine for the order of the icons in the rotating animation"
"DockingBarMenuMorph",""
"GLMAllNilCondition","Used to test if all defined arguments of a condition are nil."
"FT2MemoryFaceData","Freetype 2 MemoryFace data  "
"RubWorkspaceBar","A bottom bar to change the editing mode, switch with/without line numbers and switch wrapping mode"
"BaseStreamTest",""
"GoferChanges","Handling changes"
"MimeConverter","I'm the base class for converting some data from a MIME type to another. Subclasses should implement #mimeDecode and #mimeEncode."
"VSGroupNode","Abstract class used to display groups in a tree."
"FileTest",""
"MetacelloLookupProjectSpec","**MetacelloLookupProjectSpec** is signalled to allow a handler to substitute a different (equivalent) project spec for fetching or loading purposes"
"GLMPresentationUpdated","A GLMPresentationUpdated is announced by the presentation when an update is wanted."
"MetacelloAbstractConstructor",""
"TxCharacterSpanTests",""
"ConnectionQueue","A ConnectionQueue listens on a given port number and collects a queue of client connections. In order to handle state changes quickly, a ConnectionQueue has its own process that: (a) tries to keep a socket listening on the port whenever the queue isn't already full of connections and (b) prunes stale connections out of the queue to make room for fresh ones."
"SugsSuggestionDelegateTest","SUnit tests for smart suggestions delegates"
"GTEventCollectors","I represent a collection of GTEventCollector objects. GTEventRecorder uses me and I am responsible for adding and removing the collectors.Public API and Key Messages- add:  - remove: Internal Representation and Key Implementation Points.    Instance Variables	collectors:		<OrderedCollection>	mutex:		<Mutex>"
"NBExternalUnion","I'm a stub class intended just to easy migration from NB to UFFI. There is no corresponding class to replace me. In case you still need it, please contact community (pharo-users, slack) to get support."
"RBCommentChange",""
"Termcap","I provide a simple mapping from high-level commands to low-level terminal character sequences."
"AthensTextBackground","Athens text background "
"RBLiteralArrayCharactersRule","Literal arrays containing only characters can more efficiently represented as strings."
"UDPSocketEchoTest","UDPSocketEchoTest is both a unit test and an example.It implements and tests a UDP echo service.Each datagram sent to it is echoed back as is.You can also run the example manually,by inspecting each expression separately.  UDPSocketEchoTest new runServer.  UDPSocketEchoTest new clientSend: 'Hello @ ', Time now asString.  UDPSocketEchoTest new clientSend: #quit.The server runs until it receives quit as message. If necessary, use the Process Browser to terminate a running server."
"PrivacyChangedAnnoucement","I announce  changes on Privacy settings in SystemAnnouncer uniqueInstance."
"SlReportWindow","A SlReporter is the automatic reporter window."
"ZnCookieJar","I represent a container for storing HTTP Cookies for a client session.Part of Zinc HTTP Components."
"RPackageIncrementalTest","The tests takes as fixture the following situation (which is constructed partially)For tests that do not need to check the incremental construction.P1 	A1DefinedInP1>>methodDefinedInP1	B1DefinedInP1		A2DefinedInP2>>methodDefinedInP1  (was *P2)	P2	A2DefinedInP2>>methodDefinedInP2	B2DefinedInB2	P3	A3DefinedInP3		A2DefinedInP2>>methodDefinedInP3  (was *P2*)"
"ZnByteArrayEntity","I am ZnByteArrayEntity, a concrete HTTP Entity based on a ByteArray.It is used to hold binary (non textual) data.I am a ZnEntity.Part of Zinc HTTP Components."
"MockSocketStream","A test mock for socket streams"
"MorphGotFocus","I'm an announcement raised when a morph gets keyboard focus. "
"OSTouchThreeFingersScrollMoveEvent","Three fingers are scrolling"
"KomitableObject","I represent any commitable object, mainly a simple commit or a slice"
"MCGitHubRepository",""
"RBAddParameterTest",""
"OCCompilerSyntaxErrorNotifyingTest","A CompilerSyntaxErrorNotifyingTest is a specialization for testing correct handling of non interactive compiler notification.Non interactive is a very relative notion in Smalltalk...Here it means that user interaction will not happen directly in the TextEditor holding source code, but rather thru a SyntaxError window that will pop-up.This test intercept the Notification before the pop-up is raised."
"FLHashedCollectionSerializationTest","SUnit tests for fuel serialization of hashed collections"
"ExecutionDisplayMorph",""
"PluggableButtonMorph","A PluggableButtonMorph is a combination of an indicator for a boolean value stored in its model and an action button. The action of a button is often, but not always, to toggle the boolean value that it shows. Its pluggable selectors are:		getStateSelector		fetch a boolean value from the model		actionSelector		invoke this button's action on the model		getLabelSelector		fetch this button's lable from the model		getMenuSelector		fetch a pop-up menu for this button from the modelAny of the above selectors can be nil, meaning that the model does not supply behavior for the given action, and the default behavior should be used. For example, if getStateSelector is nil, then this button shows the state of a read-only boolean that is always false.The model informs its view(s) of changes by sending #changed: to itself with getStateSelector as a parameter. The view tells the model when the button is pressed by sending actionSelector.If the actionSelector takes one or more arguments, then the following are relevant:		arguments			A list of arguments to provide when the actionSelector is called.		argumentsProvider	The object that is sent the argumentSelector to obtain arguments, if dynamic		argumentsSelector	The message sent to the argumentProvider to obtain the arguments.Options:	askBeforeChanging		have model ask user before allowing a change that could lose edits	triggerOnMouseDown	do this button's action on mouse down (vs. up) transition	shortcutCharacter		a place to record an optional shortcut key"
"GTFilterFileReference",""
"MyTestNotification","A notification for tests "
"FLReplacementClassMock",""
"ZnDispatcherDelegateTest",""
"GLMTextualPresentation","This is the abstract class for a presentation that is supposed to show text. The #selectionText port and not the #selection port is populated by the renderer when the user selects a piece of text.Instance Variables	cursorPosition:		<Object>	doItContext:		<Object>	doItReceiver:		<Object>	selectedText:		<Object>	selectedTextBlock:		<Object>	text:		<Object>	textBlock:		<Object>"
"DAPackageDependencyWrapperTest",""
"PluggableToggleButtonMorph","I'm a pluggable togglable button. I extend a pluggable button in a very simple way:  I keep two states, PRESSED, and UNPRESSED (in fact, is just a boolean).I override a couple of methods, like #getModelState because in my context it does not have sense. See PluggableToggleButtonMorphExample to have some usage hints. Example:========(This is very simple and probably you want to use as is shown in the examples)PluggableToggleButtonMorph new 	icon: Smalltalk ui icons smallOkIcon;	label: 'Test';	actionBlock: [ :pressed | self inform: 'Status: ', (pressed asString) ];	openInWindow	"
"GLMBrickColorThemer","I define different usefull colors"
"MetacelloCannotUpdateReleasedVersionError",""
"GLMTreeBrick",""
"OSTouchTwoFingersPinchMoveEvent","Two fingers are pinching"
"GLMSmalltalkEditor","GLMSmalltalkEditor is a helper class for Glamour. The only goal for this class is to provide the hook needed to let the morph know when the selection has changed."
"KMMetaModifier","I represent the Meta or Command key modifier. Look at my superclass for a more detailed explanaition."
"ClassWidget","ClassWidget is the basic implementation of a widget a list of classes.Note however that the design is ugly because it mixes UI and Model. All the code in this hierarchy is conceptually bogus and should be rewritten."
"GTInspectorHelp",""
"GTSpotterDebuggingExceptionHandlerMock",""
"ManifestFileSystemCore","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"NECTestSuperClass","I'm only for SUnit TestCases."
"RBAssignmentInIfTrueRule","Moving assignments outside blocks leads to shorter and more efficient code.For example:test 	ifTrue: [var := 1]	ifFalse: [var:= 2]is equivalent to:var :=  test 	ifTrue: [1]	ifFalse: [2]"
"RBRemoveClassVariableChange",""
"OSTouchScrollDetector","I am the abstract class for all the Scroll gesture detectors"
"WeakRegistryTest","A trait for test purposes"
"SettingFilter","A SettingFilter is a filter wich is used by a SettingBrowser in order to select which nodes of the setting trees are to be shown. A SettingFilter subclass must redefine the #keepHandler: method which return true if the argument handler is to be kept.Instance Variables"
"ChangesBrowser","A ChangesBrowser is a browser used to browse a composite change wich gather all the wanted changes"
"PersonDataExample","Data object for a grid example"
"GTEventMultiBundleTest","A GTEventMultiBundleTest is a test class for testing the behavior of GTEventMultiBundle"
"FreeTypeSystemSettings","Settings for the FreeType system"
"GLMCheckboxBrick","A GLMCheckboxBrick is very simple checkbox with label support. If label text is set it becomes clickable too.Instance Variables	checkBrick:		<GLMInteractableBrick>	labelBrick:		<GLMLabelBrick>checkBrick	- checkbox itselflabelBrick	- label position to the right from checkbox"
"MalDisjointSetNode",""
"StartupPreferencesLoadingError","I represent an unrecoverable exceptional event while trying to load preferences during startup. I should be handled by the public methods of StartupPreferencesLoader."
"KMModifier","I'm an abstract class representing a key modifier. A modifier is a key that is pressed to modify the value of a following key. For example, valid modifiers are Alt, Ctrl, Cmd (only for macosx), Shift. Additionally, I could be a composed modifier, combining several of the named above. For example, I could have a value of Alt + Ctrl."
"MethodRemoved","This announcement will be emitted when a method is removed from a trait or a class, using ClassDescription >>removeSelector: or TraitDescription >> removeSelector."
"MetacelloProject",""
"SpecTreeNodeModel","I am a Tree node especially made for being used by the Spec framework."
"GTSpotterStepFilteringTest",""
"GLMPrintSelection","I am event indicating to the renderer to execute and print the currently selected text."
"RBNullFormatterTest",""
"TableLayout","The layout process:For computing the new layout for the children of any morph, we start with an initial rectangle which is provided as a reference.Step 1: The first step of layout computation is to compute the minimum extent each of our children can have. The minimum extent is mapped through both the local layout frame of the morph (for relative positioning) and the global layout frame (for insets, such as cursor indication) to obtain the minimal size required for each cell.Step 2: Based on the cell sizes, the number of cells we can put into each row and column is computed. For equal spacing, the maximum size of the cells is taken into account here.Step 3: Based on the row/column sizes, we compute the extra space which should be added to each row/column. For 	#leftFlush/#topFlush - we add all extra space add the end	#rightFlush/#bottomFlush - we add all extra space at the start	#centering - we add 1/2 of the extra space at start and end	#justified - we distribute the space evenly between the morphs[NOTE: If any #spaceFill morphs are encountered during this step, #justified is implied and the space is exclusively and equally distributed between those #spaceFill morphs. This is for backward compatibility and should *never* be necessary in the new regime].Step 4: The morphs are placed in the computed cells and the extra space is distributed as necessary. Placing the submorphs is done by mapping through the global and the local layout frame as requested.Start point:=> bounds: new rectangle for the morph.Compute basic arrangement of morphs:=> For each submorph compute minExtent	- if global layout frame inset in global layout frame	- if local layout frame inset in local layout frame=> Compute number of morphs per, width and height of row/column	- if equal spacing based on max size=> Compute extra space per row/column	- if centering = #justified; distribute space equally	- if centering #leftFlush/#topFlush (-1) add start extra	- if centering #rightFlush/#bottomFlush (1) add end extra	- if centering #centered add 1/2 extra to start/end	<extra space must be float and rounded accordingly!>=> Place morphs in appropriate cells	- if global layout frame inset in global layout frame	- if local layout frame inset in local layout frame	<will likely cause #layoutChanged by submorphs>Distribute morphs in row/column:=> Compute the max length of each row/column"
"WorldState","The state of a Morphic world.  (This needs some serious commenting!!)The MinCycleLapse variable holds the minimum amount of time that a morphic cycle is allowed to take.  If a cycle takes less than this, then interCyclePause: will wait until the full time has been used up."
"GLMAsyncTask","This is a utility that: - executes a job asynchroniously- it remembers the process so that it can terminate the job, if needed- triggers a callback when it's done"
"KomitNode","I am an abstract class representing a node in the tree"
"PharoTutorialsHelp","I'm a HelpSystem book which list all Pharo tutorials"
"MCMczReader","Reader for an MCZ format"
"NonInteractiveUIManager","This is a non-interactive UI manager, i.e. a UI manager which doesn't provides any kind of interactivity with users.

For most of requests, it throws an ErrorNonInteractive exception, which can be handled by various tools to do things differently when UI is not avaliable. For example:

response := [ UIManager default request: 'what is your name?' ] on: ErrorNonInteractive do: [:ex | ex resume: 'Mr. John Smith' ].

You can replace the default UI Manager with my instance in cases, when you need to guarantee that your task(s) will run in fully automated mode. This is useful for things like:
  - when image runs as a persistent application on a server
  - image runs headless from command-line with some batch scripts/commands

"
"VersionnerProjectToolBar","Versionner toolbar spec definition."
"IRReturn","Instruction ""returnTop"""
"SHOneEditorShoutedASecondNotShouted","In this example, the view has two text editors. Try it with:SHOneEditorShoutedASecondNotShouted  new open.The top view is supposed to be used for code editing and the other for comment editing.Only the code editor view has to be highligthed whereas the comment editor is never highligthed. In this case, the model must implement a #shoutAboutToStyle: method which returns true. When the view is built, the comment pane is setup to forbid code styling by sending #styled: to it with false as argument. See the #open method and the #styled: sent.Instance Variables:	code	<Text>	comment	<Text>"
"GLMMorphicFTTest",""
"BalloonFillData","This class is a simulation of the code that's run by the Balloon engine. For debugging purposes only."
"RBSplitClassRefactoring",""
"VersionnerRepositoriesManager","A VersionnerRepositoriesManager allows to select / deselect  / add new repositories. The UI is shared with Komitter."
"OCClassScope","I include all variable enries for class, pool and global vars."
"MOPTestClassB",""
"RBTransformationRuleTest",""
"SyntaxErrorNotification",""
"MultiByteFileStreamTest","SUnit tests for MultiByteFileStream "
"MorphicSliderAdapter","I am the adapter used to bridget a SliderModel and a PluggableSliderMorph"
"RBVariableTypeTest",""
"RFVariableReification","I reify #variable- GlobaVar (or subclass) - Slot for ivars "
"FLPharo13Platform",""
"DurationTest",""
"MCAnnouncementTest",""
"ThemeSettings","Configurable basic settings for themes."
"TreeNodeModel","I represent a node in a tree widget.I hold an item, an icon and the list of my children.In addition, I have a filtering mechanism"
"ZnRequestLineTests",""
"EyeBasicInspector","I am a special inspector that only lists the real fields of an object. I have exactly the same behavior as my superclass but I am used as a placeholder for the the different inspector views in the InspectorNavigator."
"RBLiteralNode","RBLiteralNode is an AST node that represents literals.Instance Variables	start: <Integer | nil> source position for the literal's beginning	stop: <Integer | nil> source position for the literal's end"
"RWBinaryOrTextStream","A simulation of a FileStream, but living totally in memory.  Hold the contents of a file or web page from the network.  Can then fileIn like a normal FileStream.Need to be able to switch between binary and text, as a FileStream does, without recopying the whole collection.  Convert to binary upon input and output.  Always keep as text internally."
"GLMTreeMorphStrongSelectionChanged",""
"IRPop","Instruction ""popTop"""
"EyeDateAndTimeInspector","I am EyeDateAndTimeInspector.I am an EyeInspector.I am a specialized Inspector for DateAndTime.I show  all individual elements by name, as well as a UTC representation."
"OSWindowGestureHandler","I am a handler who can manage gestures and provide them informations on past and current touch events"
"JapaneseEnvironment","This class provides the Japanese support.  Since it has been used most other than default 'latin-1' languages, this tends to be a good place to look at when you want to know what a typical subclass of LanguageEnvironment should do."
"MockForCompilation",""
"ManifestCollectionsWeak","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GTDebuggerSystemSettings","I register settings only needed for GTDebugger."
"HelpTopic","A HelpTopic provides content information that can be used as a help to the user.It can be labeled with a title, identified using an (optional) unique key and marked with an (optional) icon.Help topics form a hierarchy since any topic is able to have zero or moresubtopics. Instance Variables	contents:		<Object>      The help topic contents	icon:			<Form|nil>	   An optional icon for the topic	key:			<String|nil>    An optional unique key	subtopics:	      <Collection>  A collection of subtopics	title:			<String>        The titlecontents	- The help topic contents - typically containing the help topics informationicon	- An optional icon for the topickey	- An optional unique key which can be used to identify the topic. subtopics	- A collection of subtopics. 	  By default the subtopics are not sorted, so the insertion order is used. 	  If necessary it is possible to sort the subtopics by title.title	- A meaninful title for the help topic"
"NetworkError","Abstract super class for all network related exceptions."
"PointerFinderTest","SUnit tests for PointerFinder"
"FreeTypeCacheEntry","An entry for the FreeTypeCache"
"PackageNodeExample","Example for a pakage node"
"RFNameReification","I reify the name of variables"
"MethodIsATraitExplicitRequirementAction","Action when the method is a explicitRequired"
"ValueHolder","A value holder holding a value "
"MalSccExtractor","A utility class to easily get circuits, i.e. SCC with more than one node."
"MetacelloUseUpgradeError",""
"BitmapFillStyle","A BitmapFillStyle fills using any kind of form.Instance variables:	form	<Form>	The form to be used as fill.	tileFlag	<Boolean>	If true, then the form is repeatedly drawn to fill the area."
"ManifestCodeExport","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"RubTextAreaExamples","RubTextAreaExamples blueTextOnGrayBacgroundNotWrapped.RubTextAreaExamples blueTextOnGrayBacgroundWrappedTo400.RubTextAreaExamples blueTextOnGrayBacgroundWrappedTo400Version2.RubTextAreaExamples profileSourcesFileViewing.RubTextAreaExamples rightFlushed.RubTextAreaExamples shoutedScriptingTextArea.RubTextAreaExamples simplestEmptyNotWrapped.RubTextAreaExamples simplestEmptyWrappedTo400.RubTextAreaExamples simplestWrappedTo400.RubTextAreaExamples smalltalkCodeWrappedTo400.RubTextAreaExamples sourceCodeTemplateWrappedTo400.RubTextAreaExamples smalltalkCodeWrappedWithUnderlineSegments.RubTextAreaExamples textFieldWithCRAction.RubTextAreaExamples withOnlyThePrimarySelection.RubTextAreaExamples wrappedTo400WithMarginsOf40."
"ZnTooManyRedirects","ZnTooManyRedirects is signalled when an HTTP client has been following more redirects than allowed.Part of Zinc HTTP Components. "
"MalCircuitSpanningEdges",""
"HeapTest","SUnit tests for heap collections"
"GLMDashboard",""
"FFICharacterType","Character type.Represented as single byte on C side."
"OCUndeclaredVariableWarning","I get signalled when a temporary variable is used that is not defined.  My default action is to create an Undeclared binding and add it to the Undeclared dictionary."
"RBAssignmentNode","RBAssignmentNode is an AST node for assignment statementsInstance Variables:	assignment	<Integer>	position of the :=	value	<RBValueNode>	the value that we're assigning	variable	<RBVariableNode>	the variable being assigned"
"HaloMorph","This morph provides a halo of handles for its target morph. Dragging, duplicating, rotating, and resizing to be done by mousing down on the appropriate handle. There are also handles for help and for a menu of infrequently used operations."
"ChronologyConstants","ChronologyConstants is a SharedPool for the constants used by the Kernel-Chronology classes."
"TestStartupUIManager","I'm an startup UI manager used for test purposes.I provide a way to not use the default session manager."
"ProceedDialogWindow","Yes/no dialog. Test result as to whether the dialog is cancelled (no) or not (yes)."
"RBPragmaNode","RBPragmaNode is an AST node that represents a method pragma.Instance Variables:	arguments <SequenceableCollection of: RBLiteralNode> our argument nodes	left <Integer | nil> position of <	right <Integer | nil> position of >	selector	<Symbol>	the selector we're sending	keywordsPositions	<IntegerArray | nil>	the positions of the selector keywords"
"VSProjectNode","Class used to display projects with specific icons and no child in a tree."
"ChoseDate","A ChoseDate is an announcement raised by the CalendarMorph"
"GTToolkitExampleTestCase",""
"GTEventDeliveryTest","A GTEventDeliveryTest is a test class for testing the behavior of GTEventDelivery"
"ZnDigestCredential","I am ZnDigestCredential, a concrete subclass of ZnCredential and subclass of ZnBasicCredential.I implement digest HTTP authentication.I hold a nounce and opaque.Part of Zinc HTTP Components."
"EUCTextConverterTest","SUnit tests for EUC-JP encoding"
"VSRemoveCommand","Remove from the configuration the selected version or baseline"
"UTF8TextConverterTest","SUnit tests for UTF8TextConverter"
"MTProjectExampleBuilder","A MTProjectExampleBuilder is used to create some MTProjects with dummy data or tests purposes."
"FreeTypeFontProvider","This is a font provider for true type fonts. You can use it to add TTF files to your image:FreeTypeFontProvider current 	updateFontsFromSystem;	updateAvailableFontFamilies. You can add TTF fonts from a spetial dirrectory:FreeTypeFontProvider current 	updateFromDirectory: './fonts/' asFileReference done: Set new.Then you can use font dialog:	FreeTypeFontSelectorDialogWindow new open.Or set for example set ballon or default font as following:	StandardFonts balloonFont: 	        (LogicalFont familyName: 'Arial'  pointSize: 10). 	StandardFonts defaultFont: 	        (LogicalFont familyName: 'Arial'  pointSize: 10)."
"TreeModel","I am the Spec model of a MorphTreeMorph tree."
"FLProcessSerializationTest",""
"UserOfFooSharedPool","I am an sunit test for SystemNavigation."
"ManifestMultilingualLanguages","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"MorphicMenuGroupAdapter","I am used to compute a MenuGroupModel.There is not Morphic represenation of a MenuGroup, that is why I do not have a coresponding morph."
"DAExtensionDependencyNode","A PDCycleNode is used to display a extension dependency in a tree."
"ThemeIcons","I'm an icon pack who retrieve icons from a remote repository (https://github.com/pharo-project/pharo-icon-packs).You should access this icons using #iconNamed: idiom: Smalltalk ui icons iconNamed: #add.Iuse an override of #doesNotUnderstand: to provide compatibility with ""old way"" of providing icons: Smalltalk ui icon addIcon. Installation:----------------ThemeIconPack new 	name: 'idea11';	loadIconsFromUrl;	beCurrent.NOTE: ""name"" is the branch name in the repository."
"TxTextLayoutTest",""
"GTBytecodeDebuggerHelp","A utility class containing the help for GT BytecodeDebugger."
"OSMouseButtonReleaseEvent","i am delivered when user releases a mouse button"
"TxTerminalSpan","I represent either the start or end of text.My size is always ZERO and i have only a single valid position (spanPosition = 0)"
"ZnChunkedWriteStream","I am ZnChunkedWriteStream, I wrap another write stream and add HTTP 1.1 chunked transfer encoding.I write a chunk for each #nextPutAll: or #next:putAll:startingAt:I should be wrapped in a ZnBufferedWriteStream for #next: to work.When done, send #close or #finish to me.Part of Zinc HTTP Components."
"SUnitExtensionsTest","SUnit tests for extensions to SUnit"
"MetacelloConfigurationTutorialPart2",""
"SettingsStonWriter","I am a writer of system settings to a file (stream). I know how to write the settings into a stream.Collaborators: SystemSettingsPersistencePublic API and Key Messages- stream:- store Internal Representation and Key Implementation Points.    Instance Variables	storedSettings:		<Array>	stream:				<WriteStream>"
"BecomeTest",""
"MonitorTest","SUnit tests for monitors"
"FFIConstantHandle","I represent a constant HANDLE, as described in  *Windows MSDN>https://msdn.microsoft.com/en-us/library/windows/desktop/ms724457(v=vs.85).aspx*A ==HANDLE== is a special kind of external object who is accessed through numbers, therefore and ==ExternalAddress== is not appropriate to describe it (since they are constants and external addresses represents disposable spaces from memory).Is not clear this is necessary outside Windows, but according to documentation they are somekind analogous to unix's File Descriptors (but with some remarkable diferences, as documented *here>http://lackingrhoticity.blogspot.fr/2015/05/passing-fds-handles-between-processes.html*.Example: [[[HWND := #FFIConstantHandle.self ffiCall: #(HWND GetActiveWindow())]]]"
"BooleanFilter","A filter for booleans"
"ZnMultiPartFormDataEntity","I am ZnMultiPartFormDataEntity, a concrete HTTP Entity holding multi part form data that is encoded according to specific rules.I am a ZnEntity.Acknowledgement: some code borrowed from AJP.Part of Zinc HTTP Components."
"FLObjectCluster","I implement a generic way of serializing and materializing an object, for those that do not need more special way of doing it."
"ZnServerStartedEvent","ZnServerStartedEvent notes the startup of an HTTP server is complete."
"MCRepository","A Metacello repository"
"VSCommitBrowser","I'm a simple browser to see and commit new versions of configurations. Configurations needs to conform semantic versioning conventions (http://semver.org) and be compatible with Verisonner. It works also on comit units, so the best (and only :P) way to access it is: (VSCommitUnit patch: ConfigurationOfVersionner) open."
"DiffChangeRecordConverter","A DiffChangeRecordConverter is a converter used to show the diff between two methodreferences"
"FFICallbackThunk","An instance of FFICallbackThunk is a reference to a machine-code thunk/trampoline that calls-back into the VM.  The reference can be passed to C code which can use it as a function pointer through which to call-back into Smalltalk.  The machine-code thunk/trampoline is different for each instance, hence its address is a unique key that can be used to assocuate the Smalltalk side of the call-back (e.g. a block) with the thunk.  Since thunks must be executable and some OSs may not provide default execute permission on memory returned by malloc we may not be able to use malloc directly.  Instead we rely on a primitive to provide memory that is guaranteed to be executable.  The FFICallbackThunk class>>allocateExectablePage primitive answers an Alien that references an executable piece of memory that is some (possiby unitary) multiple of the pagesize.  Class-side code then parcels out pieces of a page to individual thunks.  These pieces are recycled when thunks are reclaimed.  Since the first byte of a thunk is non-zero we can use it as a flag indicating if the piece is in use or not.See Callback for the higher-level construct that represents a Smalltalk block to be run in response to a callback.  Callbacks wrap instances of FFICallbackThunk and arbitrary Alien instances that describe the stack layout for receiving arguments.Class VariablesAccessProtect <Semaphore> critical section for ExecutablePages (de)allocationAllocatedThunks <AlienWeakTable of <FFICallbackThunk -> Integer>> - weak collection of thunks, used to return thunk storage to the executable page pool.ExecutablePages <Set of: Alien ""executable page""> - collection of pages with execute permissions used to provide executable thunks"
"EditableDropListMorph","I'm a DropListMorph which content can be modified.Try:(EditableDropListMorph        on: [#(one two three)]        list: #value        selected: nil        changeSelected: nil) openInWindow extent: 400@20."
"ZnMimePart","I am ZnMimePart.I hold headers and an optional entity.I am used in MultiPartMimeEncoding.Acknowledgement: some code borrowed from AJP.Part of Zinc HTTP Components."
"UserInterruptHandler","An UserInterruptHandler watches incoming input events and checks for the user interrupt key.If encountered it interrupts the current process and opens a notifier..Instance Variables	interruptKey:		<Object>interruptKey	- definition of the user interrupt key"
"GLMRubScrolledTextBrick","A GLMRubScrolledTextBrick is a wrapper for rubric scrolled text morph, to allow simple integration of rubric text field in brickInstance Variables	rubricMorph:		<Object>rubricMorph	- xxxxx"
"IconicButton","A ""Simple Button"" in which the appearance is provided by a Form."
"SlotClassVariableTest",""
"IRPrinterV2","I interpret IRMethod instructions and write them out to a print stream."
"MetacelloBaselineSpecGenerator",""
"SimulateKeystrokesSpecification",""
"AthensWorldState","An AthensWorldState is a subclass of WorldState, that uses a special (fake) Display based on a real Morph. This is used to simulate a WorldMorph that actually resides in another Morph. This display adapts the owner dimensions as the ""DisplayScreen""-Dimension."
"SessionCategory","A session category allows to define many categories for a session (eg. System, Network, UI and user categories).It allows session handlers (e.g. classes or packages handlers) to be registered into a category.By default, the same default priority is assigned to handlers but a specific priority could be specified so that an handler will be activated before/after others."
"FLHeaderSerializationTest","SUnit tests for header serialization in fuel"
"TxLayoutStrategyTest",""
"AbstractPackageSelectedPlugin","AbstractKeyPressedPlugin is an abstraction of plugin which react when a package is selected"
"KomitPackageNode","I am a node in the Komit tree representing a package"
"ManifestTranscript","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"OpalCompiler","I provide the API of the whole Compiler Package.-> parsing: just parse-> translate: parse and generate code so we get all error messages-> compile: translate but return the CompiledMethod "
"ZnValueDelegate","I am ZnValueDelegate.I forward #handleRequest: messages to the object that I wrap using #value:ZnServer default delegate: 	(ZnValueDelegate with: [ :request | 		ZnResponse ok: (ZnEntity with: 'You asked for ', request uri printString) ] ).Part of Zinc HTTP Components."
"MetacelloMonticelloResource",""
"CriticsCache","I am a cache for the critics and false positives criticsInstance Variables	browser:		<Object>	checker:		<Object>	critics:		<Object>	falsePositiveClasses:		<Object>	falsePositiveRules:		<Object>	falsePositives:		<Object>	packages:		<Object>	toDos:		<Object>browser	- xxxxxchecker	- xxxxxcritics	- xxxxxfalsePositiveClasses	- xxxxxfalsePositiveRules	- xxxxxfalsePositives	- xxxxxpackages	- xxxxxtoDos	- xxxxx"
"GLMBrickPopupSuccessDarkThemer",""
"OSWindowGestureEventHandler","I am the handler for the gestures.As you can see instead of using #visitTouchPointerUpEvent: anEvent you have to use #visitTouchActionPointerUpEvent: anEvent"
"FLCluster","I represent a cluster of objects grouped by some specific similarity. I know how to serialize and materialize them all together."
"NECMenuMorph","I show the possible completions in a menu like appearance. The user may choose an entry from my list and complete the word he was typing in the editor. I'm showed with the Tab key and will be deleted when with ESC key or when a successful completion occurs. The following keystrokes are supported:Ctrl-Space or Tab: Open a new morph. Tab requires at least one character in front of the cursor. When already open complete the selected entry. Esc: Close meCtrl+u: Change to untyped mode, so I show all selectors of all classes in the system and the variables that are accessible to the current context.Arrow Up: Move one entry up.Arrow Down: Move one entry downEnter: (like Ctrl-Space and Tab): Complete with the selected item and close the morphany letter or digit: Narrow the completion furtherCtrl+t: Toggle the expand flag. When expand is disabled, you don't see selectors belonging to Object and ProtoObject. "
"TimespanDoTest","I am one of several Sunit test Cases intentended to provide complete coverage for the Chronology set of classes as part of the external testing. See DateAndTimeEpochTestCase for a complete list.  tlk.My fixtures are:aDate = January 8, 2003, midnightaDuration = 91 daysaTimeSpan= 91 days, starting January 8, 2003, midnight"
"RBProtocolRegexRefactoring",""
"MetacelloCoreIssue125TestCase",""
"GTEventPacking","I represent an abstract packing system that is able to receive objects and pack them into a binary data (ByteArray).Others can ask me for serializing an object by sending me #pack: or for materializing a ByteArray by sending me #unpack:. On the class side, you can find out #fuel and #ston methods, two available packing strategies. The method #version keeps current packing version and changelog. The main users are GTEventRecorder (for packing) and GTEventAnnouncement (for unpacking).Public API and Key Messages- pack:- unpack:- version"
"GLMFastListPresentation","I'm a fast list presentation who introduces FTTableMorph into Glamour. Description -------------------I just know how to render myself and I manage some options that the user can use for the FastTable.The user can use almost all the functionalities of my superclass and some more. I work with a GLMMorphicFastListRenderer to render the list.  Public API and Key Messages-------------------You can use the public API of my super class. You also use the public API of TGLMFastTableFunctionsPresentation (See his class comment) and you can finally use:- #withSeparators 		I the input I receive is a collection of collection I will dispaly a list with separators between the collections.Example-------------------GLMWrapper new 	show: [ :a | 		a fastList			display: [ :x | 1 to: x ]];	openOn: 1000.	orGLMWrapper new 	show: [ :a | 		a fastList				title: 'Example with an Outline List';				display: [ :x | (x allSubclasses sort: [ :a :b | a asString < b asString  ]) collect: #allSubclasses  ];				enableSearch;				withSeparators			];	openOn: ProtoObject. Internal Representation and Key Implementation Points.-------------------    Instance Variables	parameters:		This is a Dictionary use to store some parameters of the presentation."
"ZnCharacterWriteStream","I am ZnCharacterWriteStream.I wrap another binary WriteStream and use a ZnCharacerEncoder to allow Characters to be written.Part of Zinc HTTP Components."
"RBIdentifierToken","RBIdentifierToken is the first class representation of an identifier token (e.g. Class)"
"GLMPagerPanePreviewMorph","I am a morph showing a preview image of another morph.  I should be used like a singleton: my class provides an unique instance of me. That instance can be hiden, shown or updated."
"OSTouchTwoFingersPinchEndEvent","Two fingers finished to pinch"
"ZnMessageBenchmark","I am ZnMessageBenchmark helps to test the benchmarking and profiling of ZnMessage writing and reading.Instance Variables	buffer:					<ByteArray>	message:				<ZnObject>	representation:		<ByteArray>ZnMessageBenchmark new	simpleRequest;	write: 10000.ZnMessageBenchmark new	simpleRequest;	writeRepresentation;	read: 10000.ZnMessageBenchmark new	simpleResponse;	write: 10000.ZnMessageBenchmark new	simpleResponse;	writeRepresentation;	read: 10000."
"MD5","This class implements the MD5 128-bit one-way hash function. It uses the MD5Plugin for better performance. Some methods are taken from the original version of MD5NonPrimitive."
"RxmSubstring","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--Instance holds onto a string and matches exactly this string, and exactly once.Instance variables:	string 	<String>"
"SpecSplitterHorizontal","A SpecSplitterHorizontal is a description of the addition of a horizontal splitter"
"MCDirectoryRepositoryTest",""
"MBSpecInfoTest","SUnit tests for MBSpecInfo in Versionner"
"MCNoChangesException","Notify that no changes have to be merged"
"ConfigurationOfOSWindow",""
"ExternalChangesBrowser","I'm a simple changes browser. When the user drop a .cs or .st files and select to view them, I display a sequenceable and simple list of changes and a way to file in the code. !! Examples[[[ExternalChangesBrowser new openWithSpec.ExternalChangesBrowser openOn: Smalltalk changesFile fullName]]]"
"ManifestASTCore","I stores metadata on true and false positive critics. These meta data are used by the SmalllintManifestChecker and the critics Browser"
"AbstractMorphicAdapter","I am an abstract class providing all the properties shared amongs all the morphic specific adapters"
"GLMPagerBoundsChanged",""
"ReInvocationOrderCritic","A critic which represents that there is an issue with the order of messages being sent"
"NullSoundTheme","A silent sound theme"
"RubAdornmentDisplayer","RubAdornmentDisplayer adds a simple adornment for text area"
"FreeTypeFontFamily","FreeType font family"
"RBClassTest",""
"JobProgressBarMorph","A JobProgressBarMorph is a progress bar with a title and a icon to stop update.JobProgressBarMorph new openInWorld"
"AbstractResizerMorph","I am the superclass of a hierarchy of morph specialized in allowing the user to resize or rearrange windows and panes."
"OSTouchRotationDetector","I am the abstract class for all the Rotation gesture detectors"
"GoferCleanup","Cleanup working copies"
"CacheStatistics","I am CacheStatistics.I keep track of hits and misses of a cache."
"AthensCairoPaintMode","I control the paint modes supported by Cairo backend.for the list and description of paint modes supported by Cairo library, seehttp://cairographics.org/operators/"
"MorphicTreeNodeAdapter","I am the bridget between a TreeNodeModel and a SpecTreeNodeModel"
"RBIfTrueReturnsRule","Checks for common ifTrue: returns that could be simplified using a boolean expression."
"SettingsStonReaderTest","A SettingsStonReaderTest is a test class for testing the behavior of SettingsStonReader"
"FallbackMenu","I appear when there is an error while trying to build a menu from pragmas.I include items to:* Debug: give the user an opportunity to see and correct the error* Explain: why they're seeing a different menu* Custom: clients can add items to me by implementing #fallbackMenuOn:. Browse implementors for examples."
"PrimitiveFailed","I am PrimitiveFailed, an exception signaled when a primitive fails."
"GLMBundleTransmissionTest",""
"FFIExternalObject","I representing an external object of one kind, provided by some external library/function.My instance holds a handle, which is used to identify the external object when i am passed as an argument, or when i'm used as a return type in function signature.A typical usage of me is to create a subclass, and then use that subclass name directly in function signatures:FFIExternalObject subclass: #MyExternalObjectnewObj := MyExternalObject new.MyExternalObject class>>newObject ^ self ffiCall: #(MyExternalObject someExternalFunction() )here, assume that someExternalFunction() returns some handle (or pointer) to some opaque external structure. By putting ==FFIExternalObject== subclass (==MyExternalObject==) as a return type into the function signature, we are telling the code generator to automatically convert the return value into an instance of a given class and initialize its handle to the value returned by the function.When used as argument type, the value, which is used to pass to the external function is value held in my handle instance variable:MyExternalObject>>compareWith: anotherExternalObject   ^ self ffiCall: #( void compare ( self , MyExternalObject anotherExternalObject))The main advantage of using ==FFIExternalObject== subclass as a type name for arguments is that it provides type safety by checking the incoming argument, that it is an instance of your class, and nothing else. If not, the primitive will fail without calling the external function.IMPORTANT: My instances represent a pointer in the C heap. If you need to represent an opaque type (https://en.wikipedia.org/wiki/Opaque_data_type), check ==FFIOpaqueObject==."
"RBTransformationRuleTest1",""
"PharoCriticRules","I hold default rules used to check quality of code that is proposed for integration into Pharo."
"RPackageMCSynchronisationTest","I had some problems using the 'ensure:' method. There was some conflicts with the organizer used for the test when trying to clean the classes, categories and packages generated for the test. There is something I don't get with this method. Therefore I choosed to clean by default all possible generated classes, categories and packages after each test using the tearDown method.For now, all that was in the 'ensure:' methods has been commented.Look for example at:    testAddMethodInClassicCategoryAddMethodToTheParentPackageOfItsClassand try to uncomment it"
"SystemReference","This class defines the full reference help for the system.(contents for the full API Help).Just run ""HelpBrowser openOn: SystemReference""."
"HelpBuilder","This is an utility class that builds the books for a help system.Instance Variables	rootTopics:		<OrderedCollection>rootTopics	- a collection of books "
"GTImplementorsSpotterMock1",""
"GLMRubricSmalltalkCodePresentation","I extend the simple Rubric text presentation with basic support for dealing with Smalltalk code."
"DebuggerMethodMap","I am a place-holder for information needed by the Debugger to inspect method activations.  I insulate the debugger from details of code generation such as exact bytecode offsets and temporary variable locations. My function is to abstract the source map away from actual bytecode pcs to abstract bytecode pcs.To reduce compilation time I try and defer as much computation to access time as possible as instances of me will be created after each compilation.I maintain a WeakIdentityDictionary of method to DebuggerMethodMap to cache maps.  I refer to my method through a WeakArray to keep the map cache functional. If the reference from a DebuggerMethodMap to its method were strong then the method would never be dropped from the cache because the reference from its map would keep it alive."
"RFCondition","I can be used to reify the condition of a link.I have myself a condition *and* I store the condtition of the link.on #value, I evaluate my condition and after that the orginal link condition.With this feature, we can thus reflectively controll links while not actually changing the condition of the link itself. "
"KeyedTree","Provides path based access to elements contained in the receiver and any subtrees.Example:(KeyedTree new	at: 1 put: 'One';	at: 2 put: 'Two';	at: 'Tree' put: (KeyedTree new					at: $a put: 'Tree-A';					at: $b put: 'Tree-B';					yourself);	yourself) atPath: #('Tree' $b)"
"RBPatternPragmaNode",""
"MCSnapshotTest",""
"RFReification","Often one needs information from the base level at the meta level.My classes model reifications of concept at the base level."
"DACycleNode","A PDCycleNode is used to display a cycle in a tree."
"GLMHighlighterTextRubEditingMode",""
"OSEnvironment","I represent the user environment variables.See  `man environ` for more details."
"MCSliceMaker","MCSliceMaker is a dialog to help you making slices.It allows you to enter the slice number, the summary and to directly select dependent dirty packages.Then a slice package is added for you in the working copy browser from which it is opened.Just copy-paste issue number and summary. All is formated for you.Instance Variables	info:		<MCSliceInfo>	okToDoSlice:		<Boolean>	window:		<StandardWindow>info	- It is the model for the user interfaceokToDoSlice	- true if the OK button is clicked, it is to avoid slice making in case of cancel and in the case where the close button of the window has been clickedwindow	- my window"
"GTSpotterNullProcessorFilter","I implement a filtering strategy for processors that always returns true. Use me by default instead of adding null checks to determnine if a filter is present."
"RootClassPoolUser","I'm a class using a single shared pool (which hides a system class). My subclasses should be able to access the class variable defined in the pool I use. "
"MethodContainsFlagsAction","Action when the method contains a flag"
"LocalTimeZone","I am the local time zone which will use the system's current time offset dynamically.This is the default timezone."
"RBSendsDifferentSuperRule","Checks for methods whose source sends a different super message.A common example of this is in creation methods. You might define a method such as:	createInstance		^super new initializeIf the new method is not defined in the class, you should probably rewrite this to use self instead. Also, if the new method is defined, you might question why you need to send new to the superclass instead of to the class."
"CustomHelpTest","SUnit tests for class CustomHelp"
"GLMTestPort",""
"RBSearchTest",""
"ReReturnMethodRule","Somewhere in the override hierarchy there is a pragma that tells that this method should explicitly return a value"
"FLLargeIdentityHashedCollection","I share behavior for special HashedCollections that are optimized for including a large number of elements."
"STONTestUser2","STONTestUser2 extends STONTestUser with explicit implementations of #fromSton: and #stonOn:"
"SDL_GLContext","I represent a handle of GL rendering context, coming from SDL2 library"
"FLVersionTest","SUnit tests for fuel versioning"
"DAPackageAnalyzerReverseTreeModel","A PDPackageAnalyzerReverseTreeModel shows all users from a set of packages. Also you can see all type of the dependency, and browse them.The window is initialized with a relation graph of package dependencies, with all the dependencies already compute."
"ZnDefaultServerDelegate","I am ZnDefaultServerDelegate.I function as a delegate for ZnServer, implementing #handleRequest:I implement responses to the following prefixes:/echo - an echo text of request information for debugging purposes/dw-bench - a dynamic html page for benchmarking purposes/unicode - a unicode test page/random - a random string (/random/32 for a specific size)/bytes - bytes according to a pattern (/bytes/32 for a specific size)/favicon.ico - a Zn favicon/status - a server status page/error - force server errors/session - a simpler session based counter/help - lists all page prefixes/ - an html welcome pageWithout any matches, I respond with a page not found.I can be reused without any default handlers mapped using #empty and configured using #map:to: where the second argument can be a block.Part of Zinc HTTP Components."
"SUnitTest","This is both an example of writing tests and a self test for the SUnit. The tests here are pretty strange, since you want to make sure things blow up. You should not generally have to write tests this complicated in structure, although they will be far more complicated in terms of your own objects- more assertions, more complicated setup. Kent says: ""Never forget, however, that if the tests are hard to write, something is probably wrong with the design""."
"KomitPatch","I am a simple wrapper for patches"
"GTPlayground","Playground is the correspondent of a classic Smalltalk Workspace. The problem with the name Workspace is that it implies that work should be carried out in this space, while this is not a best practice. Playground describes better the intention of providing a place in which we can quickly play with some code.The model behind a Playground instance is a PlayPage object.!!Use casesThe Playground can be used in two ways# As a place to construct and try out code snippets.# as an entry point into an inspection process.In both cases, the ability of diving into objects to the right is an important feature.!!Running[ [ [ 	self open. ] ] ]"
"MorphTreeChangeRequest","Used to announce a change request on the tree"
"SugsWatchpointSuggestion","This class defines AST node menus for watchpoints"
"STONWriteReadCommentsTests",""
"KMKeymap","I am the real keymap.  I have an action to evaluate when my keymap sequence is pressed."
"SlotExampleTest",""
"MultiFontTest",""
"AthensCairoGradientPaint","i used to represent gradient paints (both radial and linear)  in cairo backend"
"GTSpotterMethodListProcessorFilter","I implement a filtering strategy for processors based on method signatures (method selector and class).I only allow processors created by a method currently added to the filter.I can attach to each processor a configuration block.For examples view my class side methods in teh category 'example'"
"AbstractGroupAnnouncement","Common superclass for group announcements"
"MetacelloSemanticVersionNumberTestCase",""
"MetacelloReferenceTestCase",""
"RBParseTreeEnvironment",""
"RBParseTreeSearcherTest",""
"FLSmallIntegerCluster","I don't have so much sense as a class."
"MethodDictionary","I'm a special dictionary holding methods. I am just like a normal Dictionary, except that I am implemented differently.  Each Class has an instance of MethodDictionary to hold the correspondence between selectors (names of methods) and methods themselves.In a normal Dictionary, the instance variable 'array' holds an array of Associations.  Since there are thousands of methods in the system, these Associations waste space.  Each MethodDictionary is a variable object, with the list of keys (selector Symbols) in the variable part of the instance.  The variable 'array' holds the values, which are CompiledMethods.About flushCache methods and usage.The VM caches method lookups in a lookup cache from class,selector pairs to method,primitive pairs, where primitive may be null.  This is called the first-level method lookup cache.  The JIT VM caches message lookups in machine code, so that a particular piece of machine code exists in a state that invokes a method for a specific class very fast by embedding the class reference in a register load and the target method in a call instruction, and having the target method verify this ""cache probe"" (this is an ""in-line cache).  The JIT also caches the translation of a byte coded method to machine code, by hiding a reference to a machine code method in a byte coded method.These caches can be invalidated in several circumstances:1a. if one adds or removes a method from a class's method dictionary it may change the correct results of a lookup not merely of the class whose dictionary was updated but also subclasses of the class.1b. if one replaces a method in a method dictionary this changes the target method for a lookup of the selector for the class and subclasses2. if one wants to rewrite the byte code or literals of a method, for example because a Slot definition has changed, then if the method has been compiled to machine code, the machine code must be discarded before the new code may be executed1a & 1b are done via Symbol>>flushCache.  In response the normal VM flushes its first-level method lookup cache, and the JIT also scans all of machine code looking for inline caches with that selector, and voiding them, reverting each send site for that selector to the ""unlinked"" state.There used to be confusion in Squeak, which Pharo inherited, that using CompiledMethod>>flushCache was somehow the right way to void caches when updating method dictionaries, flushing the old method in the dictionary, if any, and the new method.  It isn't, precisely because adding or removing methods affects the visibility of inherited methods with the same selector.  So MethodDictionary code should use Symbol>>flushCache, and only once, on each update of a method dictionary.  As a result, the VM will ensure that the necessary send caches are flushed for that selector.2. is done via CompiledMethod>>flushCache.  In response the VM searches the first-level method lookup cache and removes all entries whose target is the method.  In addition the JIT discards the machine code for the method, and searches for all send sites with that method's machine code as the target and voids them, reverting them to the unlinked state.The VM must be told to flush the cached state for a compiled method via CompiledMethod>>flushCache and will /try/ and void the state for that method.  But it can't always deal with existing activations of that method, because if there are activations running the machine code, that machine code can't merely be thrown away, and can't be replaced because its length may change, depending on literals or byte codes.  So this kind of byte coded method manipulation needs to be done with case and some understanding of the total system state."
"NNavDirectionPreviousBrother","Go back to the brother before"
"ButtonModelTest","SUnit tests for Button model"
"LibC","I'm a module defining access to standard LibC. I'm available under Linux and OSX, but not under Windows for obvious reasons :)"
"YearMonthWeekTest","I am one of several Sunit test Cases intentended to provide complete coverage for the Chronology set of classes as part of the external testing. See DateAndEpochTestCase for a complete list.  tlk.I have no fixtures but do make sure to restore anything I change."
"DamageRecorder","Recording damages to repair by repainting"
"RubSmalltalkEditor","I am the editor for smalltalk code, I allow to browse, execute etc"
"VSUnloadConfigurationCommand","Unload the package with the selected configuration."
"InspectorNavigator","This a wrapper around inspectors for diving. It is used in the case where the inspector is dynamically replaced by another inspector. For example, EyeCollectionInspector would be replaced by EyeIntegerInspector."
"FractionTest","SUnit tests for fractions"
"RBEqualNilRule","Replaces = nil and == nil by isNil, ~= nil and ~~ nil by notNil to make the code more readable.  "
"VMWindowDriver","This driver using a legacy VM functionality which will be removed in future versions,because it is limited only to a single OS Window, and furthermore, image don't have a direct control over window creation/destruction neither controlling its various attributes and event delivery and handling mechanisms.This driver is used by image, when it detects there's no other more suitable driver(s) available on currently running platform."
"MetacelloErrorInProjectConstructionNotification",""
"MetacelloMCPartiallyLoadedStatus",""
"InputEventLog","Help to debug "
"MetacelloProjectReferenceSpecTestCase",""
"GLMBrickWidthTraverser",""
"MCSaveVersionDialog","Monticello's dialog that allows the user to change the version name and to enter a message for the commit log."
"MonitorDelay","This is a specialization of the class Delay that is used for the implementation of the class Monitor."
"FontTest","I am mainly a test for fallback font.FontTest buildSuite run"
"FFISizeT","I'm a size_t type. I can change in different architectures (32/64bits)WARNING: I'm just implemented 32bits!"
"ProtocolRemoved","This class is not used, but should be used when we hook into the addition and removal of protocols. Right now, we only get ClassReorganizedAnnouncement"
"GTSpotterRecorderActOnEvent","A GTSpotterRecorderActOnEvent models the action of pressing enter (or double clicking) on an element."
"LongMessageDialogWindow","Dialog window displaying a message with a single OK button. Escape/return will close. Icon is a themed information icon.Handles long messages through use of a text editor with potential for scrolling."
"FileStreamTest",""
"RBAssignmentWithoutEffectRule","This smell arises when a statement such as x := x is found. This statement has not effect, it can be removed."
"Pharo3Theme","The theme is developed in the context of the Glamour project, and its goal is to create a look that:- does not look like a specific operating system. In particular, the icons should be operating system agnostic, because, for example, people in Windows are confused by the red, yellow, green buttons of apple.- uses a limited amount of colors and effects.- is fast.self defaultSettings: nil.self beCurrent. Is adopted as the theme for Pharo3, but it was renamed to avoid collisions with the glamour team,"
"GLMSpecPresentation","This presentation offers a means to embed a Spec user interface within Glamour. "
"PickListModel","A PickList is a tick list done using spec."
"FFIExternalArrayTests",""
"RBRemoveInstanceVariableRefactoring",""
"MutexSet","A MutexSet helps with aquiring a set of mutexes."
"MBHelpCommand","Command to open help for Versionner"
"FLFuelCommandLineHandler","I handle .fuel files that are passed as arguments when starting the image. Usage: fuel [save] [quit] <fuelFile> 	save    save the image after loading <fuelFile>	quit    Don't save the image and directly quit the image fater loading <fuelFile>	Documentation:This command will load the <fuelFile> and materialize/install it's contents. If no argument is specified the image continues running with the loaded contents.Example:	#Load a fuel file and save and quit the image with the contents:	pharo Pharo.image save quit path/to/foo.fuel	#Load the contents of foo.fuel and save the image, but continue running:	pharo Pharo.image save path/to/foo.fuel		#Load the contents of foo.fuel and continue running without saving:	pharo Pharo.image path/to/foo.fuel"
"GLMPaneAdded","A new pane was added"
"RBParseTreeRewriter","ParseTreeRewriter walks over and transforms its RBProgramNode (tree). If the tree is modified, then answer is set to true, and the modified tree can be retrieved by the #tree method.Instance Variables:	tree	<RBProgramNode>	the parse tree we're transforming"
"GLMPharoScriptMorphicTest",""
"RBClass",""
"AbstractMethodIconAction","AbstractMethodIconAction is the common super class for all the method icon actions.A method icon action is used to retrieve the correct icon the method in nautilus lists"
"MorphicAdapterBindings","I am used to link the spec-adapter names to the morphic adapters"
"ShiftJISTextConverter","Text converter for Shift-JIS.  Mac and Windows in Japanese mode use this encoding."
"GLMMorphicWatcherRenderer","This is a special widget renderer in that it will get to render multiple panes on the same container morph provided by a unique instance of the GLMWatcherWindow."
"CircleMorphTest","A CircleMorphTest is a subclass of MorphTest.  It was first implemented when removing some unused and broken functionality.My fixtures are morph, a CircleMorph and world."
"AthensTextLine","I representing a single line of text"
"TxLayoutViewMorph",""
"GLMBrickDarkThemer",""
"PSMCMergePatchMorph",""
"WeakArray","WeakArray is an array which holds only weakly on its elements. This means whenever an object is only referenced by instances of WeakArray it will be garbage collected."
"KMMockMorph","I am a morph used for mock reasons."
