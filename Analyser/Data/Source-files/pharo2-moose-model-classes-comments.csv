"class","comment"
"PSMCSystemSettings",""
"CollectionCombinator","For a collection of collections, enumerate all elements of the cartesian product. The code shows how recursion is used to implement variable nesting of loops.The cartesian product is usually a huge collection, that should not be kept in memory. Therefore the user of the class has to provide a block with one argument that is called each time a tuple is constructed. When possible, that block should not build a collection of all these tuples, but should immediately drop unsuitable tuples. To get a first impression, try this with 'inspect it':     | result |     result := OrderedCollection new.    CollectionCombinator new         forArrays:  (OrderedCollection with: #(#a #b #c)                                             with: #(1 2 3 4 5)                                             with: #('v' 'w' 'x' 'y' 'z')                                             with: #('one' 'two' 'three')                         )         processWith: [:item |result addLast: item].    result         "
"RGVariableDefinition",""
"RBNamespaceTest",""
"Refactor","Refactor is a script class used to automaticaly do some refactor through UIs"
"RBNodedScope",""
"RBPatternMethodNode","RBPatternMethodNode is a RBMethodNode that will match other method nodes without their selectors being equal. Instance Variables:	isList	<Boolean>	are we matching each keyword or matching all keywords together (e.g., `keyword1: would match a one argument method whereas `@keywords: would match 0 or more arguments)"
"TaskbarMorph","Themed synchronous taskbar (not using #step to poll windows). The buttons provide visual feedback as to whether a window is active or minimised (collapsed) plus a popup menu with options to restore, minimise, maximise and close the associated window. Optional (via settings) preview of the window while mouse is over a taskbar button."
"AuthorNameRequest","I am used to request a new author name."
"VTermOutputDriver","I convert high-level terminal commands like moving the cursor or setting the color to characters sequences understood by the terminal.Furthermore I do some bookkeeping to reduce the number of characters sent to the terminal."
"RBEqualsTrueRule",""
"RxParserTest","This class provides tests for the regular expression parser."
"HelpHowToHelpTopicsFromCode",""
"FLNotSerializable","I represent an error which may happen while tracing in the graph an object that is forbidden of being serialized."
"ZnResponseTests",""
"NBExternalType","I am an abstract class that primarily serves for generating a machine code which converting arguments and return typesbetween Smalltalk and C worlds. My subclasses implementing a marshalling for concrete type, which is then used by FFI. Instance Variables:	pointerArity	<Integer>		loader	<NBVariableLoader>: an instance of argument loader, which emits code to load the smalltalk argument into register.			When generating the marshalling code to push a variable, my instances need this helper which, depending on where the object is (inst var, method arg, etc) gets the object in question into a register."
"SpaceTally","I'm responsible to help getting information about system space usage. The information I compute is represented by a spaceTallyItemtry something like: ((SpaceTally new spaceTally: (Array with: TextMorph with: Point)) 	asSortedCollection: [:a :b | a spaceForInstances > b spaceForInstances]) SpaceTally new systemWideSpaceTallyThis class has been created from a part of SystemDictionary. It still deserves a niceclean, such as using object instead of array having 4 slots.sd-20 June 2003"
"ZipEncoder",""
"MetacelloToolBox","MetacelloToolbox implements a toolbox API for Metacello.The toolbox methods on the class-side implement scripts for a number of commonly performed Metacello development tasks. The methods should be used in development scripts or GUI tools so that a common implementation is preserved across the toolset."
"EditingState","I store the current state of an editing session. An instance of mine is shared by all TextEditor instances that are created during an editing session managed by a TextMorph (see below for more explanations about editing session). The state data are basically made of an undo/redo manager and of all data needed in order to manage text editing undo and redo (mainly all informations for the current and previous selection intervals).I'm created by a TextEditor at the beginning of an editing session (see TextEditor>>editingStateClass and TextEditor>>editingState). Specializations can be introduced to fit a particular TextEditor subclass need.Editing session:An  editing session starts when a TextMorph is created (precisely, when a TextEditor instance is first assigned to a TextMorph editor instance variable). An editing session ends when a TextMorph is deleted. During an editing session, a TextMorph can make use of a lot of TextEditor instances, one at a time. As an example, each time a TextMorph is resized, its editor is released and a new one that fit the TextMorph physical properties  is created. Another example, when a TextMorph loses the keyboard focus, then its editor could be fully released; it is created again when the TextMorph retrieves the focus.When an editor is created by a TextMorph, the state of the previous TextEditor, stored in its associated EditingState instance, is got and passed to the newly created editor. Thus the editing session remains stable (see TextEditor >> #stateArray and TextMorph >> #installEditorToReplace:). So TextEditor instances are extremely volatile whereas its associated EditingState instance remains during the whole editing session.Instance Variables:   emphasisHere <Array of TextAttribute>   pointBlock <CharacterBlock>   markBlock <CharacterBlock>   startOfTyping <Integer>   previousInterval <Interval>   previousSelection <Text>   undoManager <HistoryIterator>   lastParenLocation <Integer>   mouseDownInterval <Interval>   secondarySelectionToken  ** obsolete ** should be removed **- emphasisHere:   The TextAttributes that are used for the newly entered text- pointBlock:   The CharacterBlock where a selection begins (where the mouse has first pointed)- markBlock:   The CharacterBlock where a selection ends- startOfTyping:   The index of the first character which has been entered during the currently undoable/redoable portion of text (see TextEditor>>#openTypeIn and TextEditor>>#doneTyping)- previousInterval:   Previous interval used for undo/redo actions- previousSelection:   The previously selected text for undo/redo actions- undoManager:   The undo/redo manager- lastParenLocation:   Keep the position of the open parenthesis which corresponds to the last entered close parenthesis- mouseDownInterval:   The position of the first mouse down in the editor"
"DurationTest",""
"Base64MimeConverterTest","This is the unit test for the class Base64MimeConverter. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"TextFieldSpec","A TextFieldSpec is a spec used to describe a text field"
"CompositeFillStyle","Fillstyle supporting compositing of multiple sub-fillstyles."
"GIFReadWriter","Copyright (c) Kazuki Yasumatsu, 1995. All rights reserved.Used with permission.  Modified for use in Squeak."
"MCCodeTool","MCCodeTool is an abstract superclass for those Monticello browsers that display code.It contains copies of the various CodeHolder methods that perform the various menu operations in the method list."
"AJAssembler",""
"ZnFileUrlTests",""
"FT2Version","Do not rearrange these fields!This is used to report FT2 version information. Its fields must remain unchanged, or you must change FT2Plugin>>primitiveVersion."
"SimplifiedChineseEnvironment","This class provides the Simplified Chinese support (Used mainly in Mainland China).  Unfortunately, we haven't tested this yet, but as soon as we find somebody who understand the language, probably we can make it work in two days or so, as we have done for Czech support."
"ConfigurationOfProfStef","To load last stable version:ConfigurationOfProfStef project latestVersion load.To load a specific version (ex: version 1.6):(ConfigurationOfProfStef project version: '1.6') load.to do: 	- should migrate shout and update the dependency."
"EllipseMorph","A round BorderedMorph. Supports borderWidth and borderColor. Only simple borderStyle is implemented.EllipseMorph new borderWidth:10; borderColor: Color green; openInWorld.EllipseMorph new borderStyle:(SimpleBorder width: 5 color: Color blue); openInWorld."
"SystemNavigationTest","I am an sunit test for SystemNavigation with the default value for its environment (Smalltalk globals)."
"JobTest",""
"NBMacConstants",""
"SimpleHierarchicalListMorph","Display a hierarchical list of items.  Each item should be wrapped with a ListItemWrapper.For a simple example, look at submorphsExample.  For beefier examples, look at ObjectExplorer or FileList."
"ChangeSetClassChangesTest","Class category changes are not being properly added to the default changeset in Squeak 3.7. This test case will pass in Squeak 3.6, and fail in Squeak 3.[7-9]."
"NBInt8","I responsible for marshalling 		signed 8-bit integer type values."
"SelectBrowser","A simple selection browser."
"RBAssignmentToken","RBAssignmentToken is the first-class representation of the assignment token ':='"
"SimpleGridNodeExample",""
"ExceptionTests",""
"ZnBufferedWriteStreamTests",""
"RelativeInstructionPrinter",""
"RBShortAssignmentToken",""
"RBToken","RBToken is the abstract superclass of all of the RB tokens. These tokens (unlike the standard parser's) remember where they came from in the original source code.Subclasses must implement the following messages:	accessing		lengthInstance Variables:	sourcePointer	<Integer>	The position in the original source code where this token began."
"NautilusBooleanAnnouncement","Announcement raised when a boolean value changed"
"Message","I represent a selector and its argument values.	Generally, the system does not use instances of Message for efficiency reasons. However, when a message is not understood by its receiver, the interpreter will make up an instance of me in order to capture the information involved in an actual message transmission. This instance is sent it as an argument with the message doesNotUnderstand: to the receiver."
"ISO88592TextConverter","Text converter for ISO 8859-2.  An international encoding used in Eastern Europe."
"MessageSend","Instances of MessageSend encapsulate message sends to objects. Arguments can be either predefined or supplied when the message send is performed. Use #value to perform a message send with its predefined arguments and #valueWithArguments: if additonal arguments have to supplied.Structure: receiver		Object -- object receiving the message send selector		Symbol -- message selector arguments		Array -- bound arguments"
"DecompilerConstructorForClosures",""
"PragmaAnnouncement","A PragmaAnnouncement is announced by a PragmaCollector when it adds, removes or updates a PragmaHandler.Instance Variables	pragma:		<Pragma>pragma	- the pragma which has been added, removed or updated"
"SpecImporter",""
"ArrayLiteralTest",""
"RBTransformationRuleTest",""
"DialogWindow","Dialog style window with no window controls (expand, collapse etc). Usually opened modally (the morph that is used to modally open determines the modal scope, use of World implies ""system modal"").Designed to be subclassed with content.Supports Escape key for cancel and Enter key for default button."
"RBChildrenToSiblingsTest",""
"WindowScrolling",""
"RBGeneratePrintStringRefactoring",""
"RBBooleanPrecedenceRule",""
"NECUnseparatedModel","kind of variant but no idea why - sd"
"ClassMultiplePoolUser","I'm a class using two shared pools. "
"ObjectFinalizer","Represents an action that is to be taken when a target object (not referenced by the ObjectFinalizer) is garbage-collected."
"PolygonMorph","This class implements a morph which can behave as four different objects depending on the the following two facts:- is it OPEN or CLOSED?- is it SEGMENTED or SMOOTHED.1. The OPEN and SEGMENTED variant looks like polyline.2. The OPEN and SMOOTHED variant looks like spline (kind of curve)3. The CLOSED and SEGMENTED variant looks like polygon. This is actually what you get when you do	PolygonMorph new openInWorldYou get a triangle. See below how to manipulate these objects...4. The CLOSED and SMOOTHED variant looks like blob (???)Prototypes of this morph can also be found in ""Object Catalog"". Several (different variants) of this object are among ""Basic"" morphs.Explore the assiciated morph-menu. It enables you- to toggle showing of ""handles"". They make it possible to	- reposition already existing vertices (by moving yellow handles)	- create new vertices (by moving green handles)	- delete already existing vertices (by dragging and dropping one yellow handle closely	  nearby the adjacent yellow handle  Handles can be made visible/hidden by shift+leftclicking the morph. This way it is possible  to quickly show handles, adjust vertices and then again hide handles.- making closed polygon open, i.e. converting it to a curve (and vice versa)- toggle smoothed/segmented line/outline- set up custom dashing (for line, curves or borders of closed polygons- set up custom arrow-heads (for lines resp. curves)------------------------------------------------------------------------------------------Implementation notes:This class combines the old Polygon and Curve classes.The 1-bit fillForm to make display and containment tests reasonably fast.  However, this functionality is in the process of being supplanted by balloon capabilities, which should eventually provide anti-aliasing as well.wiz 7/18/2004 21:26s have made some changes to this class to1) correct some bugs associated with one vertex polygons.2) prepare for some enhancements with new curves.3) add shaping items to menu."
"SystemProgressItemMorph","A SystemProgressItemMorph is 'bar' in a SystemProgressMorph. "
"ZnUnknownHttpStatusCode","ZnUnknownHttpStatusCode is signalled when an unknown/unsupported HTTP status code is found.Part of Zinc HTTP Components. "
"ZdcOptimizedSocketStream","I am ZnOptimizedSocketStream.I am a ZdcSimpleSocketStream.I re-implement the critical operations dealing with bulk input and output more efficiently to work with buffer sized chunks, bypassing #next and #nextPut:"
"LineMorph","This is really only a shell for creating single-segment straight-line Shapes."
"CalendarMorph","A CalendarMorph is a standalone morph that represents a selectable monthly calendar.CalendarMorph openOn: Date todayInstance Variables	date:		<Date>	days:		<OrderedCollection of: <CalendarChooserDay>>	touchPoints:	<Dictionary key: <Rectangle> value: <Symbol>>date	- the currently selected date (always within the current month)days	- all the days that are visible, including days from the previous month, the current month, and the next monthtouchPoints	- extra hotspots that are touch-responsive (key rectangle is in world coordinates)"
"PluginBasedJPEGReadWriter","I provide fast JPEG compression and decompression. I require the VM pluginJPEGReadWriter2Plugin, which is typically stored in same directory as the Squeak virtual machine.JPEGReadWriter2Plugin is based on LIBJPEG library. This sentence applies to the plugin:   ""This software is based in part on the work of the Independent JPEG Group"".The LIBJPEG license allows it to be used free for any purpose so long as its origin and copyright are acknowledged. You can read more about LIBJPEG and get the complete source code at www.ijg.org."
"MCPackage","MCPackage represents a package. It is merely a wrapper on top of a package set or packageInfo.Strangely enough it does not inherit from MCDefinition.Its most important method is snapshot which returns a snapshot with all the entities that should be saved. "
"FLAnalyzer","I am responsible of traversing the graph of references starting from a root object. I will produce a clusterization which the serializer will store on a stream.An example of use is:	(FLAnalyzer newDefault 		clusterizationOf: (Array with: 1@2 with: 3@4))		clusters."
"MCPackageTest",""
"FileSystemResolverTest",""
"RBTemporaryToInstanceVariableRefactoring",""
"NECTypeInfo","I'm used in ECInstVarTypeGuesser to store found type informations."
"MorphTreeNodeModel","I wrap an item to be displayed in a TreeMorph, so I can answer content and representation in a polymorphic way. My hierarchy usually follows TreeMorphModel one."
"InstVarRefLocator","My job is to scan bytecodes for instance variable references.BlockContext allInstances collect: [ :x |	{x. x hasInstVarRef}]."
"RBAddMethodTest",""
"CornerGripMorph","I am the superclass of a hierarchy of morph specialized in allowing the user to resize windows."
"DatePrintFormatTester",""
"SolidFillStyle","SolidFillStyle is a fill which represents a color for the BalloonEngine.Instance variables:	color	<Color>	The color to use.	pixelValue32 <Integer>	The cached pixel value to use."
"MetacelloCleanLoadNotification",""
"ListComposableModel","A ListComposableModel is an applicative model which handle a basic list.| t |t:= ListComposableModel new.t openWithSpec.t items: (Smalltalk allClasses).self example| t |t:= ListComposableModel new.t openWithSpec.t sortingBlock: [:a :b| a name > b name].t items: (Smalltalk allClasses).| t |t:= ListComposableModel new.t openWithSpec.t filteringBlock: [:col | col select: [:each | each name beginsWith: 'Zn']].t sortingBlock: [:a :b| a name > b name].t items: (Smalltalk allClasses)."
"MCMergeRecord",""
"BalloonCanvas","BalloonCanvas is a canvas using the BalloonEngine for drawing wherever possible. It has various methods which other canvases do not support due to the extra features of the balloon engine."
"AJOperand",""
"MOPTraitTest",""
"GoogleToken","Used to encapsulate the password to avoid a security breach"
"ZnHTTPSocketFacadeTests",""
"MorphTreeMorphSelection",""
"MorphTreeNodeMorph","I draw the node part of a tree."
"SimplestClassListWithChunkExample","SimplestClassListWithChunkExample new openOn: Object"
"MorphTreeChunkPager",""
"MCGemstoneRepository","An explicit subclass of MCHttpRepository to provide a template for gemstone repositories."
"NautilusClassSelected","A NautilusClassSelected is raised when a class is selected"
"ChangesBrowser","A ChangesBrowser is a browser used to browse a composite change wich gather all the wanted changes"
"RBLiteralArrayContainsSuspiciousTrueFalseOrNilRule","See my #rationale.This smell checks methods having #(#true #false #nil) in their literal frame, which may be a bug.	 "
"SliceSubmitter","SliceSubmitter is a tool made to submit slice easily be automaticcaly creating the issue on GoogleIssueTracker"
"UIThemeW2K",""
"NBWin32Window","Through WinTypes pool,  i seen as HWND type ,so whenever you type HWND, you are working with instances of me"
"PreferencesHandler","I am the one which manage the links of the chain of responsibilites to retreive the good preference file"
"SUnitUnloader","I am SUnitUnloader, a little tool to unload SUnit and a fixed set of Tests from the current image.Usage: SUnitUnloader new unloadAllCaveat: #unloadTestPackages uses a fixed and probably ill maintained list of what packages hold unit tests."
"FLHookPrimitiveCluster","I am a cluster for simple objects who define serialization and materialization via hooks on their classes."
"AJAlignmentInstruction","I am a pseudo instruction used to align the following instruction to a multiple of a given byte number.Example:	asm := AJx64Assembler noStackFrame.		""align the following instruction to a word (2bytes)""	asm alignWord.	asm inc: asm RAX.		""align the following instruction to a double (4bytes)""	asm alignDouble.	asm inc: asm RAX.		""align the following instruction to a QuadWord (8bytes)""	asm alignQuad.	asm inc: asm RAX.		""align the following instruction to a multiple of an arbirary count""	asm align: 64.	asm inc: asm RAX."
"PopupChoiceDialogWindowWithMessage","I'm a dialog which ask the user to select a element in a list. See me in action:UIManager default inform:        (UIManager default                 chooseFrom: #(one two three)                 values: #('1' '2' '3')                  message: 'Select one'                 title: 'PopupChoiceDialogWindowWithMessage example')."
"SimpleServiceEntry","I represent a serviceprovider : the service providerlabel : to be display in a menuselector : to do the serviceuseLineAfterstateSelector : a secondary selector (to be able to query state of the provider for example)description : a description for balloon for exampleargumentGetter : a selector to get additional arguments with (if selector requres them)buttonLabel : a short labelThe entire client interface (provided by FileList and other users of the registry)is this (browse #getArgumentsFrom: and the senders of #argumentGetter:):fullName (returns a String with the full filename)dirAndFileName (returns {directory. fileName})readOnlyStream (returns an open read-only stream)"
"TotalCost","Part of an test resource to verify that super is well bound.See CompilerEvaluationTest"
"NautilusUI","A UI for an instance of Nautilus"
"ExampleForTest112",""
"NECUntypedModelTest",""
"SocketPrimitiveFailed",""
"RxMatcher","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--This is a recursive regex matcher. Not strikingly efficient, but simple. Also, keeps track of matched subexpressions.  The life cycle goes as follows:1. Initialization. Accepts a syntax tree (presumably produced by RxParser) and compiles it into a matcher built of other classes in this category.2. Matching. Accepts a stream or a string and returns a boolean indicating whether the whole stream or its prefix -- depending on the message sent -- matches the regex.3. Subexpression query. After a successful match, and before any other match, the matcher may be queried about the range of specific stream (string) positions that matched to certain parenthesized subexpressions of the original expression.Any number of queries may follow a successful match, and any number or matches may follow a successful initialization.Note that `matcher' is actually a sort of a misnomer. The actual matcher is a web of Rxm* instances built by RxMatcher during initialization. RxMatcher is just the interface facade of this network.  It is also a builder of it, and also provides a stream-like protocol to easily access the stream being matched.Instance variables:	matcher				<RxmLink> The entry point into the actual matcher.	stream				<Stream> The stream currently being matched against.	markerPositions		<Array of: Integer> Positions of markers' matches.	markerCount		<Integer> Number of markers.	lastResult 			<Boolean> Whether the latest match attempt succeeded or not.	lastChar			<Character | nil> character last seen in the matcher stream"
"MultiCanvas","A canvas which forwards drawing commands to sub-canvases."
"ToolRegistry","I am serving as a system-wide hub for various tools.Instead of using direct class names for tools, which is not always nice because can introduce inter-packagedependencies, i provide a uniform way for accessing tools, via Smalltalk global:Smalltalk tools someToolName,where 'someToolName' is a name of the tool , under which some tool are registered.Tools are adding themselves to registry by implementing #registerToolsOn: message at class side, for example:MyClass>>registerToolsOn: registry   registry register: self as: #myToolRegisters a MyClass as a tool under name #myTool, and can be accessed via:Smalltalk tools myTool and avoid putting 'MyClass' reference into code.You can add  ' self registerToolsOn: Smalltalk tools ' in class #initialize,so your new tool(s) can be registered during package loading.To reset tool registry to defaults , use: Smalltalk resetTools.Also registry storing a map of inspector types. This is to replace an old scheme which using #inspectorClass , and introducing dependencies.Now, an inspecting class dont needs to have any knowledge about its specialized inspector.Instead, a specialized inspector could tell registry that it is available for inspecting instances of given class (see #registerInspector:for:  senders).This allows to avoid dependency from instance class to its inspector class or using extension methods.WARNING: The point of the tools registry is NOT to be a facade full of protocols but to be a registration for tools that get loaded. So, the tools registry should NOT hold specific tool's protocol.  the tool's client should invoke the correct methods of the tool.----------- The category 'menu' is for backward compatibility with ToolSet. We should remove it."
"MethodNameEditor","A MethodNameEditor is an editor to set the name of a method.This class is imported from OB.Maybe it should be redone with Spec, but since it works well, I will not put more energy here."
"WeakSetTest",""
"WarpBlt","WarpBlt is a little warp-drive added on to BitBlt.  It takes a quadrilateral as its source specification, while its destination is traversed and combined just like any other call to copyBits.The source quadrilateral is specified as an array of points starting with the corner that wants to end up in the topLeft, and proceding to the successive points that want to follow CCW around the destination rectangle.  Note that in specifying a plain old rectangle source, its non topLeft points must be actual pixels, not outside by 1, as with rectangle bottmRight, eg.  See the method Rectangle asQuad.WarpBlt does a fast job of rotation, reflection and scaling, and it can even produce a semblance of perspective.  Depth parameters are included for future improvements in this direction. but the primitve does not support this yet."
"StrikeFont","I represent a compact encoding of a set of Forms corresponding to characters in the ASCII character set. All the forms are placed side by side in a large form whose height is the font height, and whose width is the sum of all the character widths. The xTable variable gives the left-x coordinates of the subforms corresponding to the glyphs. Characters are mapped to glyphs by using the characterToGyphMap.Subclasses can have non-trivial mapping rules as well as different representations for glyphs sizes (e.g., not using an xTable). If so, these classes should return nil when queried for xTable and/or the characterToGlyphMap. This will cause the CharacterScanner primitive to fail and query the font for the width of a character (so that a more programatical approach can be implemented).For display, fonts need to implement two messages:	#installOn: aDisplayContext foregroundColor: foregroundColor backgroundColor: backgroundColorThis method installs the receiver (a font) on the given DisplayContext (which may be an instance of BitBlt or Canvas (or any of it's subclasses). The font should take the appropriate action to initialize the display context so that further display operations can be optimized.	#displayString: aString on: aDisplayContext from: startIndex to: stopIndex at: aPoint kern: kernDeltaThis method is called for each subsequent run of characters in aString which is to be displayed with the (previously installed) settings."
"RGGlobalVariableDefinition",""
"CurrentChangeSetChanged",""
"MyTestError",""
"DiffJoinMorph",""
"OrientedFillStyle","OrientedFill is an abstract superclass for fills which can be aligned appropriately.Instance variables:	origin	<Point>	The point at which to align the fill.	direction <Point>	The direction in which the fill is defined	normal	<Point>	Typically, just the direction rotated by 90 degrees."
"GreekEnvironment","This class provides the support for Greek.  It is here, but most of the methods are not implemented yet."
"RBLiteralNode","RBLiteralNode is an AST node that represents literals."
"MCHttpRepository",""
"Mutex","A Mutex is a light-weight MUTual EXclusion object being used when two or more processes need to access a shared resource concurrently. A Mutex grants ownership to a single process and will suspend any other process trying to aquire the mutex while in use. Waiting processes are granted access to the mutex in the order the access was requested.Instance variables:	semaphore	<Semaphore>		The (primitive) semaphore used for synchronization.	owner		<Process>		The process owning the mutex."
"DialogGroupManagerUI",""
"ControlButtonMorph","Specially themed ""control"" button. Used for drop-lists, expanders etc."
"FLLargeIdentityHashedCollection","I share behavior for special HashedCollections that are optimized for including a large number of elements."
"BlueUIThemeIcons",""
"WeakFinalizationList","IMPORTANT!!!This class is a special object, recognized by VM.Its only purpose is to a) identify a special kind of objects who usually having a weak references but  also having an instance of me held by first non-weak fixed slot (instance variable).b) a 'first' instance variable points to the head of a list of items, reported by VM which has weak references which became garbage during last garbage collectionAt my class side, there are some public behavior, which is used by finalization process to detect if VM supports new finalization scheme or should use the old one.Weak registry using #hasNewFinalization for switching to correct finalization logic,depending on VM it currently runs on."
"MetacelloSpecLoader",""
"CollapsedMorph",""
"MessageList","MessageList is a simple object that holds a set of ordered method definitions.See MessageList example for an example.MessageList exampleInstance Variables:	methodReferenceList	<Collection>"
"ClassTreeNodeExample",""
"ObsoleteTest","Example class for ClassTest"
"UndeclaredVariable",""
"PragmaMenuAndShortcutRegistration","A PragmaMenuAndShortcutRegistration is the list items holder"
"SpotlightTextMorphForFieldView","I'm a TextMorphForFieldView who prevents losing focus when tab is pressed (so I can trigger OCompletion)I'm kind a hack, because if form (morph) does not has more than one element, it shouldnt try to rotate the focus, but well... life is hard :)"
"MorphAnnouncement","I am an abstract announcement for morphic events.  I carry the morph where the event has ocurred.My subclasses should add information for more precise events."
"MultiByteFileStream","The central class to access the external file.  The interface of this object is similar to good old StandardFileStream, but internally it asks the converter, which is a sub-instance of TextConverter, and do the text conversion.  It also combined the good old CrLfFileStream.  CrLfFileStream class>>new now returns an instance of MultiByteFileStream.  There are several pitfalls:  * You always have to be careful about the binary/text distinction.  In #text mode, it usually interpret the bytes.  * A few file pointer operations treat the file as uninterpreted byte no matter what.  This means that if you use 'fileStream skip: -1', 'fileStream position: x', etc. in #text mode, the file position can be in the middle of multi byte character.  If you want to implement some function similar to #peek for example, call the saveStateOf: and restoreStateOf: methods to be able to get back to the original state.  * #lineEndConvention: and #wantsLineEndConversion: (and #binary) can cause some puzzling situation because the inst var lineEndConvention and wantsLineEndConversion are mutated.  If you have any suggestions to clean up the protocol, please let me know."
"GoferMetacelloLoadDevelopment",""
"TextStream","I'm a Stream of Text objects. ex:	|ts|	ts := TextStream on: (Text new: 50). 	ts nextPutAll: 'I ' asText.	ts nextPutAll: 'love' asText allBold. 	ts nextPutAll: ' Pharo'.	TextMorph new 		newContents: ts contents; 		openInWindowLabeled: 'TextStream test'"
"EncodedCharSet","An abstract superclasss of the classes that represent encoded character sets.  In the old implementation, the charsets had more important role.  However, in the current implementation, the subclasses are used only for keeping the backward compatibility.	The other confusion comes from the name of ""Latin1"" class.  It used to mean the Latin-1 (ISO-8859-1) character set, but now it primarily means that the ""Western European languages that are covered by the characters in Latin-1 character set."
"LargePositiveInteger","I represent positive integers of more than 30 bits (ie, >= 1073741824).  These values are beyond the range of SmallInteger, and are encoded here as an array of 8-bit digits.  Care must be taken, when new values are computed, that any result that COULD BE a SmallInteger IS a SmallInteger (see normalize).Note that the bit manipulation primitives, bitAnd:, bitShift:, etc., = and ~= run without failure (and therefore fast) if the value fits in 32 bits.  This is a great help to the simulator."
"FileSystemTreeTest",""
"ZnEntityTooLarge","ZnEntityTooLarge is signalled when too big an entity is read from a stream.This is a resumable exception"
"GZipWriteStream","gzip is an integral part of the VM. "
"RBFormatterTests",""
"ArchiveMember","This is the abstract superclass for archive members, which are files or directories stored in archives."
"RBPullUpClassVariableTest",""
"ClosureTests",""
"RBLintRuleTest",""
"LayoutPolicy","A LayoutPolicy defines how submorphs of some morph should be arranged. Subclasses of the receiver define concrete layout policies."
"ReleaseTest","I contain tests that validate the integrity of the system."
"ClassFactoryWithOrganization","I'm a class to create classes with a category. I'm only used by Tests.I am similar to ClassFactoryForTestCase (i.e., I can be used in place of a ClassFactoryForTestCase), expect that classes may be created on a specific class category."
"CompilerTest","CompilerTest is a holder for SUnit test of Compiler"
"RBVariableEnvironment",""
"NautilusRefactoring","NautilusRefactoring is a facade for refactorings:- class- method- inst var- class var- source code"
"WindowsStore","I'm a specific store for Windows file systems"
"SparseLargeTable","Derivated from Stephan Pair's LargeArray, but to hold a sparse table, in which most of the entries are the same default value, it uses some tricks."
"ProfStefHelpTest",""
"FLHashedCollectionSerializationTest",""
"NBCodeGenRecursion","I am used to SIGNAL recursion error during code generation..Do not confuse me with NBRecursionDetect  notification,which is used to detect recursion.A recursion usually happens when generating code for some method requires generating code for very same method, and so it enters infinite loop"
"ZipNewFileMember","ZipNewFileMember instances are used to represent files that are going to be written to a ZipArchive.Their data comes from external file streams."
"IdentitySetTest",""
"RBProtectInstanceVariableTest",""
"OkCancelToolbar","An OkCancelToolbar is a model for a basic Ok-Cancel toolbar"
"SimpleTestResourceB",""
"FT2Outline","@instVar: contoursSize - The number of contours in the outline.@instVar: pointsSize - The number of points in the outline.@instVar: points - an array of  26.6 fixed point integer pairs giving the outline's point coordinates.@instVar: tags	- an array of pointsSize bytes, giving each outline point's type. (counting from 0)If bit 0 is unset, the point is 'off' the curve, i.e., a Bézier control point, while it is 'on' when set.Bit 1 is meaningful for 'off' points only. If set, it indicates a third-order Bézier arc control point; and a second-order control point if unset.@instVar: contours - an array of contoursSize shorts, giving the end point of each contour within the outline. For example, the first contour is defined by the points '0' to 'contours[0]', the second one is defined by the points 'contours[0]+1' to 'contours[1]', etc.@instVar: flags - a set of bit flags used to characterize the outline and give hints to the scan-converter and hinter on how to convert/grid-fit it."
"SettingPackageFilter","A SettingPackageFilter is a SettingFilter used to select settings from a given list of packages: a setting is kept only if the package in which it is defined is present in the given package listInstance Variables	packages:		<Collection>packages	- The collection of PackageInfo the filter is currently using"
"AbstractEcryptorDecryptor","An AbstractEcryptorDecryptor is an interface providing the method for encrypting/decrypting a string"
"ISOLanguageDefinition",""
"RBProgramNodeVisitor","RBProgramNodeVisitor is an abstract visitor for the RBProgramNodes."
"DiffMethodReferenceConverter",""
"String","A String is an indexed collection of Characters. Class String provides the abstract super class for ByteString (that represents an array of 8-bit Characters) and WideString (that represents an array of  32-bit characters).  In the similar manner of LargeInteger and SmallInteger, those subclasses are chosen accordingly for a string; namely as long as the system can figure out so, the String is used to represent the given string.Strings support a vast array of useful methods, which can best be learned by browsing and trying out examples as you find them in the code.Here are a few useful methods to look at...	String match:	String contractTo:String also inherits many useful methods from its hierarchy, such as	SequenceableCollection ,	SequenceableCollection copyReplaceAll:with:"
"RBFileBlocksRule",""
"CannotDeleteFileException",""
"MCClassTraitParser","MCClassTraitParser identifies classTrait. "
"KMPartialMatch","A KMPartialMatch is an announcement raised when a partial match is completed"
"Time","This represents a particular point in time during any given day.  For example, '5:19:45 pm'.If you need a point in time on a particular day, use DateAndTime.  If you need a duration of time, use Duration."
"AtomicCollection","I am just a base abstract class,containing common behavior for various queue types"
"NBExternalTypeValue","I am a generic meta class for creating a subclasses, which instances will hold a single value of specified C type.To create a new class for some concrete C type use:myClass := NBExternalTypeValue getClassForType: 'float'.Then you can use instances of given anonymous class(es) as a value holders fortype you specified:float := myClass new....float value:  1.5float valueetc..By combining this with class/pool variables we have a convenient way of defining a values, which are passed by pointer to a function.For instance, imagine that we need to create a binding to a function:void getFoo( SomeType * value) which is not an unusual situation, when C function using pointer arguments for storing it's output there.And this is what NBExternalTypeValue is done for:To define a binding to this function you can:  - declare a pool/class variable, named SomeType  - initialize it:         SomeType := NBExternalTypeValue ofType: 'SomeType'and then use it in function signature:getFoo: value   <primitive .. >  ^ self nbcall: #(void getFoo ( SomeType *  value ))---and call it like: var := SomeType new.self getFoo: var.var value -> will read the value "
"MatrixTransform2x3","This class represents a transformation for points, that is a combination of scale, offset, and rotation. It is implemented as a 2x3 matrix containing the transformation from the local coordinate system in the global coordinate system. Thus, transforming points from local to global coordinates is fast and cheap whereas transformations from global to local coordinate systems are relatively expensive.Implementation Note: It is assumed that the transformation deals with Integer points. All transformations will return Integer coordinates (even though float points may be passed in here)."
"MetacelloExplicitLoadDirective",""
"TrueTest",""
"TraitsTestCase",""
"URIAuthority","A URIAuthority is part of a hierarchical URI.  A hierarchical URI  hierarchical URI is subject to further parsing according to the syntax	[scheme:][//authority][path][?query][#fragment]where the characters :, /, ?, and # stand for themselves. The scheme-specific part of a hierarchical URI consists of the characters between the scheme and fragment parts."
"ZnMessage","I am ZnMessage, an abstract class representing an HTTP Message.Part of Zinc HTTP Components."
"RBMethodHasNoTimeStampRule","See my #rationale."
"PaginatedMorphTreeMorphTests",""
"ZnMultiPartFormDataEntity","I am ZnMultiPartFormDataEntity, a concrete HTTP Entity holding multi part form data that is encoded according to specific rules.I am a ZnEntity.Acknowledgement: some code borrowed from AJP.Part of Zinc HTTP Components."
"FT2Constants","The various flags from the Freetype/2 header.The LoadXXXX flags can be used with primitiveLoadGlyph:flags: or with the Cairo primCairoFtFontCreateForFtFace:flags:scale: primitives.FT_LOAD_DEFAULT ::  Corresponding to 0, this value is used a default glyph load.  In this  case, the following will happen:                                                                          1. FreeType looks for a bitmap for the glyph corresponding to the     face's current size.  If one is found, the function returns.  The     bitmap data can be accessed from the glyph slot (see note below).                                                                          2. If no embedded bitmap is searched or found, FreeType looks for a     scalable outline.  If one is found, it is loaded from the font     file, scaled to device pixels, then ""hinted"" to the pixel grid in     order to optimize it.  The outline data can be accessed from the     glyph slot (see note below).                                                                          Note that by default, the glyph loader doesn't render outlines into  bitmaps.  The following flags are used to modify this default  behaviour to more specific and useful cases.                                                                        FT_LOAD_NO_SCALE ::  Don't scale the vector outline being loaded to 26.6 fractional  pixels, but kept in font units.  Note that this also disables  hinting and the loading of embedded bitmaps.  You should only use it  when you want to retrieve the original glyph outlines in font units.                                                                        FT_LOAD_NO_HINTING ::  Don't hint glyph outlines after their scaling to device pixels.  This generally generates ""blurrier"" glyphs in anti-aliased modes.                                                                          This flag is ignored if @FT_LOAD_NO_SCALE is set.                                                                        FT_LOAD_RENDER ::  Render the glyph outline immediately into a bitmap before the glyph  loader returns.  By default, the glyph is rendered for the  @FT_RENDER_MODE_NORMAL mode, which corresponds to 8-bit anti-aliased  bitmaps using 256 opacity levels.  You can use either  @FT_LOAD_TARGET_MONO or @FT_LOAD_MONOCHROME to render 1-bit  monochrome bitmaps.                                                                          This flag is ignored if @FT_LOAD_NO_SCALE is set.                                                                        FT_LOAD_NO_BITMAP ::  Don't look for bitmaps when loading the glyph.  Only scalable  outlines will be loaded when available, and scaled, hinted, or  rendered depending on other bit flags.                                                                          This does not prevent you from rendering outlines to bitmaps  with @FT_LOAD_RENDER, however.                                                                        FT_LOAD_VERTICAL_LAYOUT ::  Prepare the glyph image for vertical text layout.  This basically  means that `face.glyph.advance' will correspond to the vertical  advance height (instead of the default horizontal advance width),  and that the glyph image will be translated to match the vertical  bearings positions.                                                                        FT_LOAD_FORCE_AUTOHINT ::  Force the use of the FreeType auto-hinter when a glyph outline is  loaded.  You shouldn't need this in a typical application, since it  is mostly used to experiment with its algorithm.                                                                        FT_LOAD_CROP_BITMAP ::  Indicates that the glyph loader should try to crop the bitmap (i.e.,  remove all space around its black bits) when loading it.  This is  only useful when loading embedded bitmaps in certain fonts, since  bitmaps rendered with @FT_LOAD_RENDER are always cropped by default.                                                                        FT_LOAD_PEDANTIC ::  Indicates that the glyph loader should perform pedantic  verifications during glyph loading, rejecting invalid fonts.  This  is mostly used to detect broken glyphs in fonts.  By default,  FreeType tries to handle broken fonts also.                                                                        FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH ::  Indicates that the glyph loader should ignore the global advance  width defined in the font.  As far as we know, this is only used by  the X-TrueType font server, in order to deal correctly with the  incorrect metrics contained in DynaLab's TrueType CJK fonts.                                                                        FT_LOAD_NO_RECURSE ::  This flag is only used internally.  It merely indicates that the  glyph loader should not load composite glyphs recursively.  Instead,  it should set the `num_subglyph' and `subglyphs' values of the glyph  slot accordingly, and set ""glyph->format"" to  @FT_GLYPH_FORMAT_COMPOSITE.                                                                          The description of sub-glyphs is not available to client  applications for now.                                                                        FT_LOAD_IGNORE_TRANSFORM ::  Indicates that the glyph loader should not try to transform the  loaded glyph image.  This doesn't prevent scaling, hinting, or  rendering.                                                                        FT_LOAD_MONOCHROME ::  This flag is used with @FT_LOAD_RENDER to indicate that you want  to render a 1-bit monochrome glyph bitmap from a vectorial outline.                                                                          Note that this has no effect on the hinting algorithm used by the  glyph loader.  You should better use @FT_LOAD_TARGET_MONO if you  want to render monochrome-optimized glyph images instead.                                                                        FT_LOAD_LINEAR_DESIGN ::  Return the linearly scaled metrics expressed in original font units  instead of the default 16.16 pixel values.                                                                        FT_LOAD_NO_AUTOHINT ::  Indicates that the auto-hinter should never be used to hint glyph  outlines.  This doesn't prevent native format-specific hinters from  being used.  This can be important for certain fonts where unhinted  output is better than auto-hinted one.One of following flags (as LoadTargetXXX) can be used to further specify the result.   FT_RENDER_MODE_NORMAL ::                                               This is the default render mode; it corresponds to 8-bit             anti-aliased bitmaps, using 256 levels of opacity.                                                                                      FT_RENDER_MODE_LIGHT ::                                                This is similar to @FT_RENDER_MODE_NORMAL, except that this          changes the hinting to prevent stem width quantization.  This        results in glyph shapes that are more similar to the original,       while being a bit more fuzzy (""better shapes"", instead of            ""better contrast"" if you want :-).                                                                                                      FT_RENDER_MODE_MONO ::                                                 This mode corresponds to 1-bit bitmaps.                                                                                                 FT_RENDER_MODE_LCD ::                                                  This mode corresponds to horizontal RGB/BGR sub-pixel displays,      like LCD-screens.  It produces 8-bit bitmaps that are 3 times        the width of the original glyph outline in pixels, and which use     the @FT_PIXEL_MODE_LCD mode.                                                                                                            FT_RENDER_MODE_LCD_V ::                                                This mode corresponds to vertical RGB/BGR sub-pixel displays         (like PDA screens, rotated LCD displays, etc.).  It produces         8-bit bitmaps that are 3 times the height of the original            glyph outline in pixels and use the @FT_PIXEL_MODE_LCD_V mode.                                                                       <Note>                                                                 The LCD-optimized glyph bitmaps produced by FT_Render_Glyph are      _not filtered_ to reduce color-fringes.  It is up to the caller to   perform this pass.                                                 "
"EvaluateCommandLineHandler","Usage: eval [--help] [--save] <smalltalk expression>	--help    list this help message      --save   save the image after evaluation of the expression	<smallltalk expression>  a valid Smalltalk expression which is evaluated and 	                         the result is printed on stdoutDocumentation:A CommandLineHandler that reads a string from the command line, outputs the evaluated result and quits the image. This handler either evaluates the arguments passed to the image:	$PHARO_VM my.image eval  1 + 2	or it can read directly from stdin:	echo ""1+2"" | $PHARO_VM my.image eval Important: don't manually save the image at the end of the expression by calling something like 'Smalltalk snapshot: true andSave: true'! Instead, use the safer --save option."
"WindowResizing",""
"DiffChangeRecordConverter","A DiffChangeRecordConverter is a converter used to show the diff between two methodreferences"
"MD5NonPrimitive","This class implements the MD5 128-bit one-way hash function.  It relies onthe ThirtyTwoBitRegister class supplied as part of the ""Digital Signatures""functionality included in Squeak 2.7.  As of this date (1/20/2000), theU.S. Government has lifted many of the previous restrictions on the exportof encryption software, but you should check before exporting anythingincluding this code.  MD5 is commonly used for some secure Internetprotocols, including authentication in HTTP, which is why I wrote it.Submitted by Duane Maxwell"
"RBYourselfNotUsedRule",""
"Generator","A Generator transforms callback interfaces into stream interfaces. When a producer algorithm provide results as callbacks (blocks) and a consumer algorithm expects streamable input, a Generator transforms one into the other, for example:	| generator |	generator := Generator on: [:g| Integer primesUpTo: 100 do:[:prime| g yield: prime]].	[generator atEnd] whileFalse:[Transcript show: generator next].Instance Variables	block:		<BlockClosure> The block associated with the generator.	continue:	<MethodContext>	The continuation to return to.	home:		<MethodContext>	The home (root) context of the activated block	next:		<Object>		The next object to return from the Generator."
"DosTimestampTest",""
"RBFooLintRuleTest",""
"NECContextTest",""
"Monitor","A monitor provides process synchronization that is more high level than the one provided by a Semaphore. Similar to the classical definition of a Monitor it has the following properties:1) At any time, only one process can execute code inside a critical section of a monitor.2) A monitor is reentrant, which means that the active process in a monitor never gets blocked when it enters a (nested) critical section of the same monitor.3) Inside a critical section, a process can wait for an event that may be coupled to a certain condition. If the condition is not fulfilled, the process leaves the monitor temporarily (in order to let other processes enter) and waits until another process signals the event. Then, the original process checks the condition again (this is often necessary because the state of the monitor could have changed in the meantime) and continues if it is fulfilled.4) The monitor is fair, which means that the process that is waiting on a signaled condition the longest gets activated first.5) The monitor allows you to define timeouts after which a process gets activated automatically.Basic usage:Monitor>>critical: aBlockCritical section.Executes aBlock as a critical section. At any time, only one process can execute code in a critical section.NOTE: All the following synchronization operations are only valid inside the critical section of the monitor!Monitor>>waitUnconditional waiting for the default event.The current process gets blocked and leaves the monitor, which means that the monitor allows another process to execute critical code. When the default event is signaled, the original process is resumed.Monitor>>waitWhile: aBlockConditional waiting for the default event.The current process gets blocked and leaves the monitor only if the argument block evaluates to true. This means that another process can enter the monitor. When the default event is signaled, the original process is resumed, which means that the condition (argument block) is checked again. Only if it evaluates to false, does execution proceed. Otherwise, the process gets blocked and leaves the monitor again...Monitor>>waitUntil: aBlockConditional waiting for the default event.See Monitor>>waitWhile: aBlock.Monitor>>signalOne process waiting for the default event is woken up.Monitor>>signalAllAll processes waiting for the default event are woken up.Using non-default (specific) events:Monitor>>waitFor: aSymbolUnconditional waiting for the non-default event represented by the argument symbol.Same as Monitor>>wait, but the process gets only reactivated by the specific event and not the default event.Monitor>>waitWhile: aBlock for: aSymbolConfitional waiting for the non-default event represented by the argument symbol.Same as Monitor>>waitWhile:for:, but the process gets only reactivated by the specific event and not the default event.Monitor>>waitUntil: aBlock for: aSymbolConfitional waiting for the non-default event represented by the argument symbol.See Monitor>>waitWhile:for: aBlock.Monitor>>signal: aSymbolOne process waiting for the given event is woken up. If there is no process waiting for this specific event, a process waiting for the default event gets resumed.Monitor>>signalAll: aSymbolAll process waiting for the given event or the default event are woken up.Monitor>>signalReallyAllAll processes waiting for any events (default or specific) are woken up.Using timeoutsMonitor>>waitMaxMilliseconds: anIntegerMonitor>>waitFor: aSymbol maxMilliseconds: anIntegerSame as Monitor>>wait (resp. Monitor>>waitFor:), but the process gets automatically woken up when the specified time has passed.Monitor>>waitWhile: aBlock maxMilliseconds: anIntegerMonitor>>waitWhile: aBlock for: aSymbol maxMilliseconds: anIntegerSame as Monitor>>waitWhile: (resp. Monitor>>waitWhile:for:), but the process gets automatically woken up when the specified time has passed.Monitor>>waitUntil: aBlock maxMilliseconds: anIntegerMonitor>>waitUntil: aBlock for: aSymbol maxMilliseconds: anIntegerSame as Monitor>>waitUntil: (resp. Monitor>>waitUntil:for:), but the process gets automatically woken up when the specified time has passed."
"ZnManagingMultiThreadedServer","ZnManagingMultiThreadedServer is a ZnMultiThreadedServer that manages the socket stream connections used by the worker threads that are spawned.ZnManagingMultiThreadedServer startDefaultOn: 1701.I keep track of all the connections that I spawn so that I can close them when I am stopped.Part of Zinc HTTP Components."
"ZipDirectoryMember","ZipFileMember instances represent directories inside ZipArchives.They don't do much other than hold names and permissions (and extra fields).You can add files in subdirectories to a ZipArchive without using any ZipDirectoryMembers."
"FormTest","Various tests for class form."
"ZnUnknownHttpMethod","ZnUnknownHttpMethod is signalled when an unknown/unsupported HTTP method is found while parsing a request.I am resumable to allow non-standard methods.Part of Zinc HTTP Components. "
"SimpleTestResourceCircular",""
"AbstractGroup","AbstractGroup is an abstraction of what a group is."
"AbstractSpecLayoutAction","AbstractSpecLayoutAction is an abstract class representing a spec layout action."
"SystemNavigation","I support the navigation of the system. I act as a facade but as I could require some state or different way of navigating the system all my behavior are on the instance side.I should (it is not complety done yet) be parametrized by an environment (aSystemDictionary) that scopes my queries."
"BlockApiSetter",""
"ClassDescription","I add a number of facilities to basic Behaviors:	Named instance variables	Category organization for methods	The notion of a name of this class (implemented as subclass responsibility)	The maintenance of a ChangeSet, and logging changes on a file	Most of the mechanism for fileOut.	I am an abstract class, in particular, my facilities are intended for inheritance by two subclasses, Class and Metaclass.The slots 'organization' and 'methodDict' should ONLY be accessed by message in order for things to work during ImageSegment>>discoverActiveClasses (q.v.)."
"DebugSystemSettings",""
"CheckBoxExample","A CheckBoxExample is a simple example of how to use CheckBoxes.CheckBoxExample new openWithSpec"
"RBLexicalScope",""
"KMChainedShortcut",""
"RBInlineAllSendersRefactoring",""
"NautilusShowGroupsChanged","A NautilusShowGroupsChanged is raised when the value showGroups is switched"
"HierarchyBrowser",""
"DropListModel","A DropListModel is a Spec model for drop lists.I am assume there is a little problem on an empty list, but frankly, who creates an empty drop list ?See DropListExample for an example"
"PseudoClassOrganizer",""
"RBPatternScanner","RBPatternScanner is a subclass of RBScanner that allows the extended syntax of pattern matching trees."
"ZeroDivide","I am ZeroDivide, an ArithmeticError that may be signaled when a mathematical division by 0 is attempted."
"PrettyTextDiffBuilder","I'm like TextDiffBuilder, but I use the pretty-printed version of the source code if available.Instance Variables	sourceClass:		<Class>sourceClass	- this class provides the pretty-printer"
"Month","I represent a month."
"RBSendsUnknownMessageToGlobalRule",""
"ZipWriteStream",""
"BlueUITheme","The theme is developed in the context of the Glamour project, and its goal is to create a look that:- does not look like a specific operating system. In particular, the icons should be operating system agnostic, because, for example, people in Windows are confused by the red, yellow, green buttons of apple.- uses a limited amount of colors and effects.- is fast.self defaultSettings: nil.self beCurrent. "
"FtpUrl",""
"KMKeymapTest",""
"MethodDictionaryTest",""
"RBAccessorClassRefactoring",""
"RBIdentifierToken","RBIdentifierToken is the first class representation of an identifier token (e.g. Class)"
"DiffElement","My instances are container objects used by TextDiffBuilder for comparison. They hold a string and the precomputed hash of the string to speed up #=. They may reference another DiffElement object which is their pair in the diff.Instance Variables	hash:		<Integer>	match:		<DiffElement>	string:		<String>hash	- the hash of string, stored for fast accessmatch	- another DiffElement object which has the same string and turned out to be my pair in the longest common subsequence found by a TextDiffBuilder, or nil if I don't a matching DiffElementstring	- a part of a longer text, typically a line"
"AnnouncementSet","If you want to register the same action for multiple events, simply create an AnnouncementSet using a comma: 	Parent>>initialize 	    super initialize. 	    self session announcer on: AddChild, RemoveChild do: [:it | self changeChild: it child]	Motivation example: Often the UI is built after/independently from the model. You want to have the model raise fine-grained announcements to enable the layers on top, but sometimes it is easier in the UI to refresh everything whenever something happens."
"ManifestFuel",""
"RxsCharacter","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A character is a literal character that appears either in the expression itself or in a character set within an expression.Instance variables:	character		<Character>"
"ListModel","Resusable model for a simple single selection list."
"ModelSpec","A ModelSpec is a spec to describe a call to model"
"MetacelloProjectSpecLoadError",""
"AbstractNautilusUITest","An AbstractNautilusUITest is a test class for testing the behavior of AbstractNautilusUI"
"MemoryHandleTest",""
"WindowAnnouncementTest",""
"ZnResourceMetaUtils","I am ZnResourceMetaUtils.I contain some class side utility methods.Part of Zinc HTTP Components."
"RFC2047MimeConverter","I do quoted printable MIME decoding as specified in RFC 2047 """"MIME Part Three: Message Header Extensions for Non-ASCII Text"". See String>>decodeMimeHeader"
"JoinSide",""
"PragmaRemoved","A PragmaRemoved is announced by a PragamColllector when a method defined with an acceptable pragma according to the PragmaCollector filter is removed.Instance Variables"
"KOI8RTextConverter",""
"RBRefactoryVariableChange",""
"RBSubclassOfClassToRename",""
"UnusedVariable",""
"FLCluster","I represent a cluster of objects grouped by some specific similarity. I know how to serialize and materialize them all together."
"X11Encoding",""
"MorphicModel","MorphicModels are used to represent structures with state and behavior as well as graphical structure.  A morphicModel is usually the root of a morphic tree depicting its appearance.  The tree is constructed concretely by adding its consituent morphs to a world.When a part is named in a world, it is given a new slot in the model.  When a part is sensitized, it is named, and a set of mouse-driven methods is also generated in the model.  These may be edited to induce particular behavior.  When a variable is added through the morphic world, it is given a slot in the model, along with a set of access methods.In addition for public variables (and this is the default for now), methods are generated and called in any outer model in which this model gets embedded, thus propagating variable changes outward."
"RBInlineMethodTest",""
"SpecBuilder",""
"AssociationTest",""
"MCMczReader",""
"ZnBufferedWriteStream","I am ZnBufferedWriteStream.I wrap a write stream and add buffering.Make sure to always send me #flush or #close when you're done,otherwise the last buffer might not yet have been written.My class side's #on:do: helps to ensure this.I can wrap both binary or character streams and act accordingly.Part of Zinc HTTP Components."
"UUID","A class to generate UUIDby John M McIntosh johnmci@smalltalkconsulting.comSee http://www.webdav.org/specs/draft-leach-uuids-guids-01.txtIf a plugin does not exist then we generate a UUID version 4 type GUUID"
"RBMethodRefactoring",""
"MetacelloProjectReferenceSpec",""
"HelpTopicTest",""
"Latin1TextConverter","Text converter for ISO 8859-1.  An international encoding used in Western Europe."
"RBAssignmentNode","RBAssignmentNode is an AST node for assignment statementsInstance Variables:	assignment	<Integer>	position of the :=	value	<RBValueNode>	the value that we're assigning	variable	<RBVariableNode>	the variable being assigned"
"ZnStreamingEntity","I am ZnStreamingEntity, a concrete HTTP Entity based on a stream.I am a ZnEntity.When a ZnStreamingEntity is created using #readFrom: its content type and length are set but no body is actually read.Instead, stream is set to a ZnLimitedReadStream that clients can/mustuse to read from.When the client is done, either all data must be read or #consumeContent must be called.A client should normally not close the stream.A ZnStreamingEntity can also be instanciated with an existing read stream.During #writeOn: this stream is copied to the output stream.Part of Zinc HTTP Components."
"NBFnSpec","I am used to hold a parsed function signature, describing a C function.Since all C functions having return type, arguments and name (unless it anonymous one), same structure can be used to hold an information about it in my instances.However, what objects used to represent types and arguments is up to code generator.Instance Variables:	returnType <Object>	functionName	<String>	arguments	<SequenceableCollection>"
"AJx86GPRegister","A general purpose x86 & x64 registers"
"AbstractFontSelectorDialogWindow","Dialog based font chooser with preview."
"ZnHeaders","I am ZnHeaders.I am a collection of HTTP headers.I can be used for generating and parsing.Header names are normalized and used case insensitive.Header values can be multi-valued.Part of Zinc HTTP Components."
"GroupWindowMorph","I'm a morph where you can drag windows to group them as tabs.Try:(GroupWindowMorph new openInWindowLabeled: 'Window organizer') extent: 400@400."
"RBLiteralArrayContainsCommaRule","See my #rationale."
"MCTool",""
"ImageReadWriter","Copyright (c) Kazuki Yasumatsu, 1995. All rights reserved.I am an abstract class to provide for encoding and/or decoding an image on a stream.Instance Variables:	stream		<ReadStream | WriteStream>	stream for image storagesClass Variables:	ImageNotStoredSignal		<Signal>	image not stored error signal	MagicNumberErrorSignal		<Signal>	magic number error signalSubclasses must implement the following messages:	accessing		nextImage		nextPutImage:	testing		canUnderstand         (added tao 10/26/97)"
"PointTest","This is the unit test for the class Point. "
"RandomTest",""
"RowScrollerMorph",""
"RBIfTrueBlocksRule",""
"SystemWindow","SystemWindow is the Morphic equivalent of StandardSystemView -- a labelled container for rectangular views, with iconic facilities for close, collapse/expand, and resizing.The attribute onlyActiveOnTop, if set to true (and any call to activate will set this), determines that only the top member of a collection of such windows on the screen shall be active.  To be not active means that a mouse click in any region will only result in bringing the window to the top and then making it active."
"PluggableIconListMorph","A type of PluggableListMorph that supports a single icon (Form) for items. Useful for lists with icons."
"Error",">From the ANSI standard:This protocol describes the behavior of instances of class Error. These are used to represent error conditions that prevent the normal continuation of processing. Actual error exceptions used by an application may be subclasses of this class.As Error is explicitly specified  to be subclassable, conforming implementations must implement its behavior in a non-fragile manner.Additional notes:Error>defaultAction uses an explicit test for the presence of the Debugger class to decide whether or not it is in development mode.  In the future, TFEI hopes to enhance the semantics of #defaultAction to improve support for pluggable default handlers."
"AJConstants",""
"RBMethodName",""
"AddMethodDescription",""
"ObjectExplorer","ObjectExplorer provides a hierarchical alternative to #inspect. Simply evaluate an expression like:World exploreand enjoy."
"MIMELocalFileDocument","For local files, we do not read the entire contents unless we absolutely have to."
"Collection","I am the abstract superclass of all classes that represent a group of elements."
"CommentFalsePositiveWindow","To enter comment for false positives."
"UTF8DecomposedTextConverter","An UTF8DecomposedTextConverter converts from decomposed UTF8 using the UnicodeCompositionStream.Instance Variables"
"RBNumberLiteralToken",""
"MCMockClassG",""
"MCPTest",""
"TraitAlias","See comment of my superclass TraitTransformation."
"NECContext","A completion is started by the ECController. The controller creates me to compute the context of the completion. The most important information about the context are the receiverClass and the completionToken. I create a ECModel or subclass when requested by the 'model' method.I use SHParser and SHRange to parse the text input."
"ExampleForTest11",""
"CommandLineUIManager",""
"RBOverridesSpecialMessageRule","See my #rationale."
"ButtonSpec","A ButtonSpec is a spec used to describe a button"
"NBInterpreterProxy","I am an important part of a native code generation toolchain, which provides an access to all interpreterProxy functions.A native code, inevitably, needs to convert a method's arguments to their native representations, and access a different fields of oops. For this, we need to use interpreter proxy methods.Code generator options, used by proxy: 	#optNonMovable		- The code is a standalone routine, which 		a) will be placed into a non-movable memory region.		b) can be called by any other function, not by primitiveNativeCall, therefore		#optDirectProxyFnAddress		- call proxy functions directly, instead of loading 		their address indirectly via interpreterProxy struct	 #optUseStackPointer 		- use a direct ST stack pointer, initially retrieved using #getStackPointer"
"LiteralDictionary","A LiteralDictionary, like an IdentityDictionary, has a special test for equality.  In this case it is simple equality between objects of like class.  This allows equal Float or String literals to be shared without the possibility of erroneously sharing, say, 1 and 1.0"
"FileDialogWindowTest",""
"ScannerTests",""
"ChooseDropListDialogWindow","Message dialog containing a drop list for selection of an item."
"MCClassDefinitionTest",""
"RBVariableBinding",""
"SimpleTestResourceTestCase",""
"InstVarAdder",""
"RBReturnsBooleanAndOtherRule","See my #rationale."
"HierarchicalURI","See URI comment."
"NonInteractiveUIManager","This is a non-interactive UI manager, i.e. a UI manager which doesn't provides any kind of interactivity with users.

For most of requests, it throws an ErrorNonInteractive exception, which can be handled by various tools to do things differently when UI is not avaliable. For example:

response := [ UIManager default request: 'what is your name?' ] on: ErrorNonInteractive do: [:ex | ex resume: 'Mr. John Smith' ].

You can replace the default UI Manager with my instance in cases, when you need to guarantee that your task(s) will run in fully automated mode. This is useful for things like:
  - when image runs as a persistent application on a server
  - image runs headless from command-line with some batch scripts/commands

"
"ExpanderMorph","A morph that can expand or collapse to show its contents."
"WeakSetInspectorTest",""
"MCMcdReader",""
"MCDefinition","A MCDefinition is the root of inheritance of entities representing code. "
"BorderedMorph","BorderedMorph introduce borders to morph. Borders have the instanceVariables borderWidth and borderColor. BorderedMorph new borderColor: Color red; borderWidth: 10; openInWorld.BorderedMorph also have a varaity of border styles: simple, inset, raised, complexAltFramed, complexAltInset, complexAltRaised, complexFramed, complexInset, complexRaised.These styles are set using the classes BorderStyle, SimpleBorder, RaisedBorder, InsetBorder and ComplexBorder.BorderedMorph new borderStyle: (SimpleBorder width: 1 color: Color white); openInWorld.BorderedMorph new borderStyle: (BorderStyle inset width: 2); openInWorld."
"KMDispatcher","I'm an object that saves a buffer of keyevents for the morph I'm attached.I am the one that dispatches the single and multiple shortcuts.If the morph has a keymap that matches the keyboard event, I tell the keymap event to execute with the morph I'm attached."
"FLIndexStream","I am an optimized stream for writing and reading *indexes*, i.e. positive integers with a known upper bound. "
"SimpleGridExample","SimpleGridExample new open"
"AtomicQueueItem","i am a queue item , used by atomic queues.All my new instances are circular i.e. next=self"
"FLFixedObjectCluster","I am a generic cluster for objects without indexable variables."
"MethodChangeRecord","MethodChangeRecords are used to record method changes.  Here is a simple summary of the relationship between the changeType symbol and the recording of prior state			|	prior == nil			|	prior not nil		---------	|----------------------------	|--------------------	add		|	add					|	change	---------	|----------------------------	|--------------------	remove	|	addedThenRemoved	|	removeStructure:changeType			symbol -- as summarized abovecurrentMethod	method				This is the current version of the method.				It can be used to assert this change upon entry to a layer. infoFromRemoval -- an array of size 2.				The first element is the source index of the last version of the method.				The second element is the category in which it was defined, so it				can be put back there if re-accepted from a version browser.Note that the above states each have an associated revoke action:	add --> remove	change --> change back	remove --> add back	addedThenRemoved --> no changeHowever all of these are accomplished trivially by restoring the original method dictionary."
"NBIntegerExternalType","Abstract class for all integer external types"
"LIFOQueueTests",""
"NautilusTextDisplayerChanged","A NautilusTextDisplayerChanged is raised when the way to display the method changed."
"RxMatcherTest","This class provides tests for the regular expression matcher."
"NBExternalLibraryWrapper",""
"RBRemoveInstanceVariableTest",""
"StringApiSetter",""
"MorphTreeAnnounce",""
"KSX1001","This class represents the domestic character encoding called KS X 1001 used for Korean."
"RBExtractToTemporaryTest",""
"MutexSet","A MutexSet helps with aquiring a set of mutexes."
"RBThisContextNode","I represent the specialized variable named 'thisContext'"
"GoBackStringMorph","A GoBackStringMorph is a string morph which do not totally rotate but do some go and back"
"MethodContainsBreakpointAction","A MethodContainsBreakpointAction is the action corresponding to the fact that the method contains a breakpoint"
"NECInstVarTypeGuesser","I'm a simple InstructionClient that tries to guess the type of a given instance variable name of a class. "
"RBSmallDictionary","RBSmallDictionary is a special dictionary optimized for small collections. In addition to the normal dictionary protocol, it also supports an #empty message which ""empties"" the collection but may hang on to the original elements (so it could collect garbage). Without #empty we would either need to create a new dictionary or explicitly remove everything from the dictionary. Both of these take more time and #empty.Instance Variables:array <Array of: Object> array of keys (we don't use Associations for our key value pairs)tally <Integer> the size of the dictionaryvalues <Array of: Object> array of our values"
"ZnStaticFileServerDelegate","I am ZnStaticFileServerDelegate.I am a simple proof of concept implementation of a web server serving static files.I handle urls with an optional prefix as requests for files in a directory.I serve index.html or index.htm when a directory is requested and these files exist.I do a redirect when a path that is not does not end with a / refers to directory.I function as a delegate for ZnServer.ZnServer startDefaultOn: 1701.ZnServer default delegate: ((ZnStaticFileServerDelegate new) 									prefixFromString: 'apple/macosx'; 									directory: '/Library/WebServer/Documents' asDirectory; 									yourself).Part of Zinc HTTP Components."
"Transcripter","Transcripter is a dog-simple scrolling stream with display.  It is intended to operate with no support from MVC or color in a minimal, or headless version of Pharo.  No attention has been paid to appearance or performance.type exit (without quote) to exit the evaluatortype revert (without quote) to revert the last changes.Transcripter askForEmergencyEvaluatorOrExitWithText: 'Emergency Evaluator'Transcripter emergencyEvaluator"
"RBNotEliminationRule",""
"RBArgumentVariableNamesSpellingRule","See #name for the area where I check spelling."
"WorldState","The state of a Morphic world.  (This needs some serious commenting!!)The MinCycleLapse variable holds the minimum amount of time that a morphic cycle is allowed to take.  If a cycle takes less than this, then interCyclePause: will wait until the full time has been used up."
"NetworkSystemSettings","I am NetworkSystemSettings, a class side API to manage various system network settings, mostly related to HTTP proxying."
"CNGBTextConverter","Text converter for Simplified Chinese variation of EUC.  (Even though the name doesn't look so, it is what it is.)"
"BalloonState","This class is a repository for data which needs to be preserved during certain operations of BalloonCanvas."
"UIThemeVistary","A Vista-style UI theme. Do UIThemeVistary beCurrent to use."
"MCVersionInfo","Adds to the record of ancestry, other identifying details."
"DifferatorSystemSettings","My settings allow the user to choose whether different line endings will be shown in diffs,and the colors/emphasis used for added/removed text"
"AlexPlugin","An AlexPlugin is a plugin which show the setUp when a test method is selected"
"RBEmptyExceptionHandlerRule",""
"RBUtilityMethodsRule","See my #rationale."
"TextColor","A TextColor encodes a text color change applicable over a given range of text."
"DialogItemsChooser",""
"MCWorkingCopyBrowser",""
"StandardWindow","Themed SystemWindow that avoids being picked up except via the title bar. Supports opening in ""fullscreen"" mode, taking docking bars into account.Prevents yellow button menu.Uses TEasilyThemed for easy theme access to subclasses."
"MCSaveVersionDialog","Monticello's dialog that allows the user to change the version name and to enter a message for the commit log."
"RBParserTest",""
"DropListMorph","Displays a selected item and a drop button. When pressed will popup a list to enable changing of the selection. Supports enablement."
"KMLog",""
"WikiStyleHelpTest",""
"FileLocatorTest",""
"NBUInt32","I responsible for marshalling 		unsigned 32-bit integer type values."
"Latin1Environment","This class provides the support for the languages in 'Latin-1' category.  Although we could have different language environments for different languages in the category, so far nobody seriously needed it."
"FloatPrintPolicy","I am FloatPrintPolicy.I am a DynamicVariable.I control whether Float instances are printed exactly or inexactly. The inexact printing is much faster, but can be less accurate. The default policy is ExactFloatPrintPolicy.FloatPrintPolicy 	value: InexactFloatPrintPolicy new 	during: [ Float pi printString ]"
"RBClassTest",""
"False","False defines the behavior of its single instance, false -- logical negation. Notice how the truth-value checks become direct message sends, without the need for explicit testing.Be aware however that most of these methods are not sent as real messages in normal use. Most are inline coded by the compiler as test and jump bytecodes - avoiding the overhead of the full message sends. So simply redefining these methods here will have no effect."
"PragmaCollector","A PragmaCollector is used in order to collect some Pragma instances. A PragmaCollector makes use of SystemChangeNotifier event notifications in order to maintain its contents up-to-date according to its filter: when a method is added, removed or updated, if the method is defined with a pragma which is acceptable according to its filter, then the collector contents is updated. A PragmaCollector makes use of an announcer in order to notify all registered listeners when a pragma is added, removed or updated. A PragmaAnnouncement is announced when a Pragma is added, removed or updated. Corresponding announcement classes are, respectiveley, PragmaAdded, PragmaRemoved and PragmaUpdated. Explore the result of the expression below. In the collected instance variable should be stored all pragmas of the system:---------------------------(PragmaCollector filter: [:pragma | true]) reset---------------------------In the following example, collected pragma are thoses with the 'primitive:' keyword (<primitive:>)---------------------------(PragmaCollector filter: [:prg | prg keyword = 'primitive:']) reset---------------------------Instance Variables		announcer:		<Announcer>		collected:		<Collection>	filter:			<Block or MessageSend>				announcer	the announcer which is used to announce the adding, the removing or the updating of a method with an acceptable pragma declarationcollected			the current collection of Pragma	filter	a block or a message send which is used in order to filter the pragma. This is a one argument valuable. When evaluated, the candidate pragam is passed as argument and the result must be a boolean. 	"
"RBAddClassChange",""
"VersionsBrowser","VersionsBrowser shows all the versions of a particular method, and lets you compare them, revert to selected versions, and so on."
"BreakPoint","This exception is raised on executing a breakpoint.""BreakPoint signal"" is called from ""Object>>break""."
"RBTemporaryNode","I am a specialized variable node for temporary variables"
"HMAC","HMAC is a mechanism for message authentication using cryptographic hash functions. HMAC can be used with any iterative cryptographic hash function, e.g., MD5, SHA-1, in combination with a secret shared key.  The cryptographic strength of HMAC depends on the properties of the underlying hash function.See RFC 2114."
"QuotedPrintableMimeConverter","I do quoted printable MIME decoding as specified in RFC 2045 ""MIME Part One: Format of Internet Message Bodies"".Short version of RFC2045, Sect. 6.7:	(1) Any octet, except a CR or LF that is part of a CRLF line break of the canonical (standard) form of the data being encoded, may be represented by an ""="" followed by a two digit hexadecimal representation of the octet's value. [...]	(2) Octets with decimal values of 33 through 60 inclusive, and 62 through 126, inclusive, MAY be represented as the US-ASCII characters which correspond to those octets [...].	(3) Octets with values of 9 and 32 MAY be represented as US-ASCII TAB (HT) and SPACE characters, respectively, but MUST NOT be so represented at the end of an encoded line.  [...]	(4) A line break in a text body, represented as a CRLF sequence in the text canonical form, must be represented by a (RFC 822) line break, which is also a CRLF sequence, in the Quoted-Printable encoding.  [...]	(5) The Quoted-Printable encoding REQUIRES that encoded lines be no more than 76 characters long.  If longer lines are to be encoded with the Quoted-Printable encoding, ""soft"" line breaks must be used.  An equal sign as the last character on a encoded line indicates such a non-significant (""soft"") line break in the encoded text.--bf 11/27/1998 16:50"
"RBMethodModifierSuperRule","See my #rationale."
"SelectorChooserMorph","A SelectorChooserMorph is an IdentifierChooserMorph specialized to allow a selector query from a selector prefix and for a TextMorph. When the prefix starts with an uppercase, then, only globals names and class names that begins with the prefix are shown.Otherwise, all systems symbols that begins with the prefix are presented (the string comparison is not case sensitive).It takes the keyboard focus when a navigation key (up, down, left or right key) is first pressed in the TextMorph from which it has been opened.Instance Variables	prefix: <String>	requestorPos <Point>	prefix	- The prefix which has been used to compute the labels list.requestorPos	- private, used to be able to automatically close the menu if the position of the requestor is changing"
"ZnMimePart","I am ZnMimePart.I hold headers and an optional entity.I am used in MultiPartMimeEncoding.Acknowledgement: some code borrowed from AJP.Part of Zinc HTTP Components."
"RBUnoptimizedToDoRule",""
"MessageDialogWindow","Dialog window displaying a message with a single OK button. Escape/return will close. Icon is a themed information icon."
"Announcement","This class is the superclass for events that someone might want to announce, such as a button click or an attribute change. Typically you create subclasses for your own events you want to announce. "
"RBToDoCollectRule",""
"MessageTallyTest",""
"AJCallArgument",""
"ParseStack","I keep track of the current and high position of the stack that will be needed by code being compiled."
"IntegerArray","IntegerArrays store 32bit signed Integer values.Negative values are stored as 2's complement."
"RBArrayNode","A RBArrayNode is an AST node for runtime arrays.Instance Variables	left:	 <Integer | nil> position of {	periods: <SequenceableCollection of: Integer> the positions of all the periods that separate the statements	right: <Integer | nil> position of }	statements: <SequenceableCollection of: RBStatementNode> the statement nodes"
"MCRemoval","A MCRemoval represents the removal of an entity of a given snapshot."
"ListDialogWindow","A ListDialogWindow is a dialog window used to search an element into a list.A text field is provided to on the fly reduce the field or search"
"KeychainEditor","A KeychainEditor is a GUI for editing keychain entrie"
"NECTypedModel","I'm the model for a typed completion, that means when a receiver class is known. I only have selectors. I have an expand toggle: When false I filter out Object and ProtoObject selectors. The default value is true."
"AddInstVarDescription",""
"FLIgnoredVariablesTest",""
"DateAndTimeTest","A DateAndTimeTest is xxxxxxxxx.Instance creation from strings and streams: if no offset is specified, the local offset is used.Instance Variables"
"RBSplitCascadeRefactoring",""
"FLHeaderSerializationTest",""
"RBInternalSpellChecker","A stupid spell checker implementation, to be used in case no native spell checker is available. Uses a combined word-list of <http://sourceforge.net/projects/jazzy/> and <http://norvig.com/spell-correct.html>."
"ZnBivalentWriteStream","I am ZnBivalentWriteStream, wrapping another write stream.I allow both Characters and Strings as well as Integers (0 to: 255) and ByteArrays to be writtten to me.The write stream that I wrap can be both binary as well as character based.Part of Zinc HTTP Components."
"ZnBufferedReadStreamTests","I am ZnBufferedReadStreamTests."
"WindowSpec","A WindowSpec is a spec used to describe a window"
"FLStreamStrategy","I am a strategy that help tests for writing (and then reading) on streams."
"MultiColumnListSpec","A MultiColumnListSpec is a spec used to describe a multi column list"
"DosTimestamp","DOS stores timestamps, in local time, as 32 bit integers with the following format:	32 bits (low to high):		Low 16 bits:			Bits 0-4: seconds / 2	 		Bits 5-10: minutes 0-59			Bits 11-15: hours 0-23		High 16 bits:			16-20: day of month 1-31	 		21-24: month 1-12			25-31: year offset from 1980 (e.g. 1981 -> 1)References (with visual aids): http://blogs.msdn.com/b/oldnewthing/archive/2003/09/05/54806.aspx & http://mindprod.com/jgloss/zip.html"
"NBExternalAddressType",""
"ShadowDrawingCanvas","see ColorMappingCanvas comment."
"RBAbstractVariablesRefactoring",""
"AJRoutineStackManager",""
"NBNativeCodeError",""
"ImageCleaner",""
"RBPatternBlockToken","RBPatternBlockToken is the first-class representation of the pattern block token."
"UUIDPrimitivesTest",""
"RBUnoptimizedAndOrRule",""
"RBInlineTemporaryRefactoring",""
"GoferVersionReference","A GoferVersionReference refers to a specific version of a Monticello package."
"LeafNode","I represent a leaf node of the compiler parse tree. I am abstract.	Types (defined in class ParseNode):	1 LdInstType (which uses class VariableNode)	2 LdTempType (which uses class VariableNode)	3 LdLitType (which uses class LiteralNode)	4 LdLitIndType (which uses class VariableNode)	5 SendType (which uses class SelectorNode).Note that Squeak departs slightly from the Blue Book bytecode spec.In order to allow access to more than 63 literals and instance variables,bytecode 132 has been redefined as DoubleExtendedDoAnything:		byte2				byte3			Operation(hi 3 bits)  (lo 5 bits)	0		nargs			lit index			Send Literal Message 0-255	1		nargs			lit index			Super-Send Lit Msg 0-255	2		ignored			rcvr index		Push Receiver Variable 0-255	3		ignored			lit index			Push Literal Constant 0-255	4		ignored			lit index			Push Literal Variable 0-255	5		ignored			rcvr index		Store Receiver Variable 0-255	6		ignored			rcvr index		Store-pop Receiver Variable 0-255	7		ignored			lit index			Store Literal Variable 0-255	This has allowed bytecode 134 also to be redefined as a second extended send	that can access literals up to 64 for nargs up to 3 without needing three bytes.	It is just like 131, except that the extension byte is aallllll instead of aaalllll,	where aaa are bits of argument count, and lll are bits of literal index."
"PSMCChangeWrapper",""
"StrongPointerExplorer","i doing same job, as my superclass, but do not follow weak references"
"ConfigurationOfRefactoringBrowser","Please add other useful ways to load this configuration.(ConfigurationOfRefactoringBrowser project version: #stable) load (ConfigurationOfRefactoringBrowser project version: '1.8') load (ConfigurationOfRefactoringBrowser project version: '1.8') load: 'Tests'"
"GoferResolvedReference","A GoferVersionReference refers to a specific version of a Monticello package in a particular repository. This class is the only one that can actually load the version, because it is the only one knowing where to find it."
"DiskFileSystemTest",""
"PostorderGuide","I traverse the filesystem in depth-first post order. Given this hierarchy:alpha	beta	gammadelta	epsilonI would visit the nodes in the following order:  beta, gamma, alpha, epsilon, delta.I use my work instance variable as a stack. I push messages that cause nodes to be traversed or visited, and execute them in reverse order."
"RBPullUpClassVariableRefactoring",""
"MacOSXPlatform",""
"POP3Client","This class implements POP3 (Post Office Protocol 3) as specified in RFC 1939.  (see http://www.ietf.org/rfc.html)You can use it to download email from the mail server to your personal mail program.To see an example of it's use, see POPSocket class>>example."
"MorphicTransform","This class implements simple translation, scaling and rotation for points, as well as inverse transformations.  These transformations are used in TransformMorphs (clipping scrollers) and TransformationMorphs (general flex-morph wrappers) to map, eg, global mouse coords into local coords, and to invert, eg, local damage rectangles into global damage rectangles."
"OverflowRowMorph","Instances of this class accept, via #baseMorph:, a morph that is expected to be row-like containing submorphs.Based on the receiver's layout, the base morphs that are able to fit within the receiver (subject to minExtents) are layed out along with, if necessary, a button to pop-up a column of any remaining, unfittable, base morphs.Handy for button bars etc.Example:(OverflowRowMorph new	baseMorph: (UITheme builder newRow: ((1 to: 6) collect: [:i | |label|		label := 'Button ', i asString.		(UITheme builder			newButtonFor: Transcript			getState: nil			action: #show:			arguments: {label}			getEnabled: nil			label: label			help: nil)			hResizing: #spaceFill]))) openInWindow			"
"WidgetEditor",""
"RadioButtonGroup","A RadioButtonGroup is a group for radio buttons which ensure that only radio button of this group is activated at the same time."
"SpecRowLayout","A SpecRowLayout isthe layout used to specify a new row"
"SocksSocket","This class implements the socks 4 and partially socks 5 connection protocol.For backward compatibility the socks protocol is disabled by default, so subclasses still work.For further documentation check out:Socks4: http://spiderman.socks.nec.com/protocol/socks4.protocolSocks5: http://spiderman.socks.nec.com/rfc/rfc1928.txt"
"AdvancedHelpBrowserDummy","This is a dummy for a custom Help browser that can be registered as a replacement for the HelpBrowser class.Instance Variables	rootTopic:		<HelpTopic>rootTopic	- The root help topic"
"ZipWriteStreamTests",""
"RBRemoveAssignmentWithoutEffectRule",""
"ToggleMenuItemMorph","A menu item that supports on/off state (using standard icons), enablement and display of ""accelerator"" key text."
"BitBltClipBugs",""
"RBContainsRule",""
"TestClass",""
"MethodDefaultAction","Action by default, empty icon"
"WindowCollapsed","This announcement is emitted when a window is collapsed, by pressing the '-' top left button of a window."
"MetacelloLoadingMCSpecLoader",""
"MethodFinder","Find a method in the system from a set of examples.  Done by brute force, trying every possible selector.  Errors are skipped over using ( [3 + 'xyz'] ifError: [^ false] ).Submit an array of the form ((data1 data2) answer  (data1 data2) answer).	MethodFinder methodFor: #( (4 3) 7  (0 5) 5  (5 5) 10).answer:  'data1 + data2'More generally, use the brace notation to construct live examples.The program tries data1 as the receiver, and	tries all other permutations of the data for the receiver and args, and	tries leaving out one argument, and	uses all selectors data understands, and	uses all selectors in all od data's superclasses.Floating point values must be precise to 0.01 percent, or (X * 0.0001).If you get an error, you have probably discovered a selector that needs to be removed from the Approved list.  See MethodFinder.initialize.  Please email the Pharo Team.Only considers 0, 1, 2, and 3 argument messages.  The argument data may have 1 to 5 entries, but only a max of 4 used at a time.  For now, we only test messages that use given number of args or one fewer.  For example, this data (100 true 0.6) would test the receiver plus two args, and the receiver plus one arg, but not any other patterns.Three sets of selectors:  Approved, AddAndRemove, and Blocks selectors.  When testing a selector in AddAndRemove, deepCopy the receiver.  We do not handle selectors that modify an argument (printOn: etc.).  Blocks is a set of (selector argNumber) where that argument must be a block.For perform, the selector is tested.  It must be in the Approved list.do: is not on the Approved list.  It does not produce a result that can be tested.  Type 'do' into the upper pane of the Selector Finder to find messages list that.Implementation Notes		arguments of the load: method are structured as follows:		- Odd list entries are data for it, even ones are the answers.  nil input means data and answers were supplied already.""		""(MethodFinder new) load: #( (4 3) 7  (-10 5) -5  (-3 11) 8)"
"FLUserGuidesTest",""
"KeyedTree","Provides path based access to elements contained in the receiver and any subtrees.Example:(KeyedTree new	at: 1 put: 'One';	at: 2 put: 'Two';	at: 'Tree' put: (KeyedTree new					at: $a put: 'Tree-A';					at: $b put: 'Tree-B';					yourself);	yourself) atPath: #('Tree' $b)"
"PostorderGuideTest",""
"MorphTreeMorph","A MorphTreeMorph is a list and a tree in one easily customizable widget. A list or tree is made of nodes. Each node can be made of whatever object . This allows the use of morphs inside the tree. A MorphTreeMorph works with a model which must use the TMorphTreeModel trait. MorphTreeModel uses it and can serves  as the model or as a superclass for a specific tree model.Customizable columns:Several customizable columns can be viewed. Columns are separated by resizers used in order to increase or decrease the columns width with the mouse.A MorphTreeMorph can have a top header composed of buttons, one button per column. Such a button can have an icon and/or a title and may run some action when clicked on (a typical action is the ordering of the list). You can also allow column drag-and-drop so that a column  can be dynamically moved with a simple drop.See this in action with following example:-----------ClassListExample new openOn: Collection-----------By default, the last column is not bounded, so that no resizer is added for it and threre exists no unused space between the last scroller and the right side of the whole tree. But, in some case one want to have a resizer also for the last column. This is the case for data grid as an example This is possible by sending #makeLastColumnBounded to the MorphTreeMorph.Try it with:-----------SimpleGridExample new open-----------Single and multi-selection:A MorphTreeMorph implements single and multiple selection. Multi-selection is allowed by sending  #multiSelection: with true as argument. Several items can be selected with ctrl-click (or cmd-click on mac) or with shift-click (see MorphTreeMorphModel comments to see how to handle selection from the model).Try multi-selection with following example:------------SimplestClassListExample new openOn: Collection------------Double-click handling:You can allow double-click just by indicating the message to send to the model with the doubleClickSelector: selector.Try this with the package-tree example where double-clicking on a class node or or a method node open a browser on the class or on the method:------------PackageTreeExample new open------------Long list handling:For very long lists or trees, two kind of pager can be used to limit the number of items visible in the list. The idea  is that when you have very long lists, you most of the time do not  want to see all details but just want some visual support for what is in the list: - with a simple pager, you indicate how much items are to be seen in one page, the list items are viewed page by page,- with a chunk pager you can expand either incrementally or  all-together the number of items once you get to the bottom of the existing items.See SimplestClassListWithPagerExample and SimplestClassListWithChunkExample examples.Try them with:------------SimplestClassListWithPagerExample new openOn: Object.SimplestClassListWithChunkExample new openOn: Object.------------Columns/rows coloring:MorphTreeMorph makes it possible the coloring of either the columns or the rows. A MorphTreeMorph understands #rowColorForEven:odd: for rows coloring and columnColorForEven:odd: for columns coloring with two colors passed as argument (nil means no color). See following examples:-------------PackageTreeExample new open. ""For row coloring""ClassListExample new openOn: Collection. ""For column coloring""-------------Column drag and dropA column can be dragged. Inside the tree, a column can be dropped into another one. Then, the two columns are swapped (the roughly implemented)Try it with:-------------ClassListExample new openOn: Collection.-------------Instance Variables	autoDeselection:		<Object>	autoMultiSelection:		<Object>	columnColors:		<Object>	columnDropUnabled:		<Object>	columnInset:		<Object>	columnResizers:		<Object>	columns:		<Object>	doubleClickSelector:		<Object>	expandedToggleImage:		<Object>	gapAfterIcon:		<Object>	gapAfterToggle:		<Object>	getListSelector:		<Object>	getSelectionSelector:		<Object>	hasToggleAtRoot:		<Object>	iconReservedExtent:		<Object>	indentGap:		<Object>	keystrokeActionSelector:		<Object>	lastSelectedMorph:		<Object>	lineColor:		<Object>	multipleSelection:		<Object>	nodeList:		<Object>	nodeSortBlock:		<Object>	notExpandedToggleImage:		<Object>	pager:		<Object>	potentialDropMorph:		<Object>	preferedPaneColor:		<Object>	resizerWidth:		<Object>	rowColors:		<Object>	rowInset:		<Object>	scrollDeltaHeight:		<Object>	selectedMorphList:		<Object>	setSelectionSelector:		<Object>	shiftSelectedMorph:		<Object>	topHeader:		<Object>	topHeaderBackground:		<Object>	unboundLastColumn:		<Object>	withHLines:		<Object>autoDeselection	- xxxxxautoMultiSelection	- xxxxxcolumnColors	- xxxxxcolumnDropUnabled	- xxxxxcolumnInset	- xxxxxcolumnResizers	- xxxxxcolumns	- xxxxxdoubleClickSelector	- xxxxxexpandedToggleImage	- xxxxxgapAfterIcon	- xxxxxgapAfterToggle	- xxxxxgetListSelector	- xxxxxgetSelectionSelector	- xxxxxhasToggleAtRoot	- xxxxxiconReservedExtent	- xxxxxindentGap	- xxxxxkeystrokeActionSelector	- xxxxxlastSelectedMorph	- xxxxxlineColor	- xxxxxmultipleSelection	- xxxxxnodeList	- xxxxxnodeSortBlock	- xxxxxnotExpandedToggleImage	- xxxxxpager	- xxxxxpotentialDropMorph	- xxxxxpreferedPaneColor	- xxxxxresizerWidth	- xxxxxrowColors	- xxxxxrowInset	- xxxxxscrollDeltaHeight	- xxxxxselectedMorphList	- xxxxxsetSelectionSelector	- xxxxxshiftSelectedMorph	- xxxxxtopHeader	- xxxxxtopHeaderBackground	- xxxxxunboundLastColumn	- xxxxxwithHLines	- xxxxx"
"NewListRenderer","NewListRenderer is the morph contained by a NewList used to render all the items and manage mouse events."
"RBMinMaxRule",""
"NativeBoostMac32",""
"CodeAnnotationMorph","I display code annotations that can be embedded in a browser (basic core image browser) to show useful informations about the current method or class. In order to show me in your browser, the ""show annotation pane"" setting must be set to true (search for 'annotation' in the setting browser). This setting is set to false by default.The informations to show are given by CodeHolder>>annotation.A methods annotation is built according to a list of requests which consists in a list of symbols. These symbols are interpreted by CodeHolder>>#annotationForSelector: ofClass:. See CodeHolder class >>#annotationRequests for more details about this list of requests.By default, the author, the time stamp, the message category, the senders and implementors count and the list of change sets in which the method is referenced are shown.Because the building of an annotation can be very time consuming (especially the implementors count),an annotation is built in background. So, I am also a good example of how a process can be used in order to build some data in background.Instance Variables   codeHolder: <CodeHolder>   process: <Process>codeHolder   - The CodeHolder (a Browser, a MessageList ..) in which I'm embeddedprocess   - The process which is building the annotation in backgroundCOTDC - A.Plantec"
"ColorApiSetter",""
"ZnEntity","I am ZnEntity, an abstract HTTP Entity.An entity has a content type (mime-type), a content length (byte length) and a contents.Entities can encode and decode themselves to and from binary streams.Part of Zinc HTTP Components."
"FLGlobalSendSerializationTest",""
"ZnValueDelegate","I am ZnValueDelegate.I forward #handleRequest: messages to the object that I wrap using #value:ZnServer default delegate: 	(ZnValueDelegate with: [ :request | 		ZnResponse ok: (ZnEntity with: 'You asked for ', request uri printString) ] ).Part of Zinc HTTP Components."
"HelpBrowserTest",""
"UnknownSelector",""
"SimpleSwitchMorph","I represent a switch that can be either on or off.  I chnage my state in response to a mouse click.  When clicked, I also send my actionSelector to my target, just like a SimpleButtonMorph.	SimpleSwitchMorph new openInWorld"
"MouseOverHandler",""
"MemoryFileSystemFile","I represent a memory file system entry for a regular file"
"IllegalURIException",""
"RussianEnvironment","EncodedCharSet initialize.LanguageEnvironment resetKnownEnvironments.Locale switchToID: (LocaleID isoLanguage: 'ru')."
"KeyedTreeTest",""
"FileStreamException",""
"KMFactory","I am a class used to access some of the main classes of Keymapping. See my class side to have an idea of what can I give you."
"Bag","I represent an unordered collection of possibly duplicate elements.	I store these elements in a dictionary, tallying up occurrences of equal objects. Because I store an occurrence only once, my clients should beware that objects they store will not necessarily be retrieved such that == is true. If the client cares, a subclass of me should be created."
"CriticWorkingConfiguration","A CriticWorkspace holds the current worspace for the CriticBrowser.It's composed of the set of rules to check (as a composite rule) and the environment to work in."
"FLByteArrayStreamStrategy","I am a strategy that emulate what we offer with FLSerializer class >> #serializeInMemory:  and  FLMaterializer class >> #materializeFromByteArray: "
"MetacelloDirective",""
"PaginatedMorphTreeMorph",""
"MethodNodeTest",""
"RBSuperBinding",""
"Debugger","I represent the machine state at the time of an interrupted process. I also represent a query path into the state of the process. The debugger is typically viewed through a window that views the stack of suspended contexts, the code for, and execution point in, the currently selected message, and inspectors on both the receiver of the currently selected message, and the variables in the current context.Special note on recursive errors:Some errors affect Squeak's ability to present a debugger.  This is normally an unrecoverable situation.  However, if such an error occurs in an isolation layer, Squeak will attempt to exit from the isolation layer and then present a debugger.  Here is the chain of events in such a recovery.	* A recursive error is detected.	* The current project is queried for an isolationHead	* Changes in the isolationHead are revoked	* The parent project of isolated project is returned to	* The debugger is opened there and execution resumes.If the user closes that debugger, execution continues in the outer project and layer.  If, after repairing some damage, the user proceeds from the debugger, then the isolationHead is re-invoked, the failed project is re-entered, and execution resumes in that world. "
"FileSystemHandle","I am an abstract superclass for file handle implementations. I provide a uniform interface that streams can use for read and write operations on a file regardless of the filesystem. I encapsulate the actual IO primitives."
"MetacelloRemoveMemberSpec",""
"NaturalLanguageTranslator","A NaturalLanguageTranslator is a dummy translator.The localization framework is found in the gettext package."
"FillStyleBorder","BorderStyle supporting general (potentially composite) fillstyles. "
"RBSearchRule","RBSearchRule is a parse tree rule that simply searches for matches to the rule. Every time a match is found, answerBlock is evaluated with the node that matches and the cureent answer. This two-argument approach allows a collection to be formed from all of the matches (Think inject:into:).Instance Variables:	answerBlock	<BlockClosure>	Block to evaluate with the matching node and the current answer."
"ZdcReferenceSocketStreamTests","ZdcReferenceSocketStreamTests test the reference SocketStream in the image"
"WeakKeyDictionaryTest",""
"ClassBuilderChangeClassTypeTest",""
"NBNativeFunctionGen","I'm a generator of native code. I can create C style functions, providing convenient syntactic sugar for accessing the function arguments in function body (but you still have to write the body of the function with the assembler).I can be used for implementing small helper routines, low-level callbacks or functions which will run in separate (to VM) thread.A function spec is used to help with fetching arguments from call stack by using #arg: method for that: NBNativeFunctionGen 		cdecl: #( int (byte* a, byte * b) )		emit: [:gen | | asm |			asm := gen asm.			""this will load argument from stack to register""			asm mov: (gen arg: #b) to: EAX;		].By invoking the expression above, I will generate a native code and keep it in my instance. Now to put this code in use, it must be installed  (see #install) into external memory. Then an address to the function can be passed to any other external function,or even called by FFI callout:	myFunction := NBNativeFunctionGen cdecl: #(..) emit: [...].	myFunction install.	address := myFunction address.After function is no longer needed, it must be uninstalled (to conserve the external memory):	myFunction uninstall.Note, that this must be done explicitly, since like everything which works with external resources, there's no any automatic resource management for external memory."
"SpecLayout","A SpecPresenter is a object used to describe a user interface"
"TickSelectionCheckboxButtonMorph","A TickSelectionCheckboxButtonMorph is the button hidden into the TickSelectionCheckboxMorph"
"TextMorphTest",""
"MCConfigurationBrowser","A MCConfigurationBrowser displays an MCConfiguration, and edits the configuration to add or remove package dependencies and repository specifications. It allows a configuration to be stored in a repository or posted to an update stream."
"NBCharacterType","Character type. Represented as single byte on C side.Accepts Character/Smallint as argument, converts return value to Character instance"
"PackageMethodCategoryNodeExample",""
"RxmMarker","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A marker is used to remember positions of match of certain points of a regular expression. The marker receives an identifying key from the Matcher and uses that key to report positions of successful matches to the Matcher.Instance variables:	index	<Object> Something that makes sense for the Matcher. Received from the latter during initalization and later passed to it to identify the receiver."
"MockFinalizerAction",""
"DirectoryDoesNotExist","I am raised when I an operation is attempted inside a directory that does not exist. "
"NautilusIcons","Most of these icons come from http://www.famfamfam.com/lab/icons. They are licensed under the Creative Commons Attribution 3.0 License by Mark James."
"ReadWriteStream","I represent an accessor for a sequence of objects. My instances can both read and store objects."
"ZnStandardOutputLogger","I am ZnStandardOutputLogger, a ZnLogListener that appends to the OS level standard output stream.Part of Zinc HTTP Components."
"ExclusiveWeakMessageSend","See NonReentrantWeakMessageSend"
"RBCollectSelectNotUsedRule",""
"FileSystemTest",""
"CharacterBlock","I describe the location of one character displayed on the screen. My instances are used to return the results of methods:	Paragraph characterBlockAtPoint: aPoint and	Paragraph characterBlockForIndex: stringIndex.Any recomposition or movement of a Paragraph can make the information I store stale.text (Text): The text where my character is fromstringIndex (Integer): The index of my character in the text, starting from 1textLine (TextLine): The displayed line my character is onorigin (Point): The top-left corner of the area allocated for displaying my		character's glyph, in pixels, counting right then down from the		top-left corner of the text display area, and starting from 0@0corner (Point): The bottom-right corner of the area allocated for displaying my		character's glyph, in pixels, counting right then down from the		top-left corner of the text display area, and starting from 0@0"
"HistoryLeaf","This class represents the abstract leaf structure of items stored in History tree. Composite nodes of such trees are made of HistoryNode instances. For a particular use, this class need to be subclassed. See for example UndoRedoRecord"
"MorphExtension","MorphExtension provides access to extra instance state that is not required in most simple morphs.  This allows simple morphs to remain relatively lightweight while still admitting more complex structures as necessary.  The otherProperties field takes this policy to the extreme of allowing any number of additional named attributes, albeit at a certain cost in speed and space."
"FLSingletonMockEnforced",""
"RPackageBenchmark","A dummy class to run some benchmarcks"
"VirtualMachine","I am exposing a various attributes of smalltalk virtual machine.The direct use of this class is not recommended. All attributes are normally should be accessed viaSmalltalk vm someAttributeinstead of VirtualMachine someAttribute"
"NotYetImplemented","I am NotYetImplement, an exception signaled when a method is a stub for code that will be implemented in the future.This is used in incremental development, for example when doing Test First development.It is similar to ShouldBeImplemented, with a slightly different meaning."
"FinderNode","A FinderNode is an abstract class used by the tree of FinderUI"
"SHStyleElementTest","I am testing the class SHStyleElement"
"RunArrayTest",""
"PluggableDictionary","Class PluggableDictionary allows the redefinition of hashing and equality by clients. This is in particular useful if the clients know about specific properties of the objects stored in the dictionary. See the class comment of PluggableSet for an example.Instance variables:	hashBlock	<BlockContext>	A one argument block used for hashing the elements.	equalBlock	<BlockContext>	A two argument block used for comparing the elements."
"TextURL","I'm a text attribute used to encode an URL."
"FLNegative8SmallIntegerCluster",""
"RBInlineTemporaryTest",""
"ThemeIcons","Some extra icons in the vein of MenuIcons."
"AbstractTutorial","Parent class of all ProfStef tutorials.To create your own tutorial:- subclass AbstractTutorial- implement a few methods which returns a Lesson instance- implement tutorial which returns a Collection of selectors to the methods you've created.For example, see MockTutorial (minimalist) and SmalltalkSyntaxTutorial (default ProfStef one).See ProfStef comment to execute your own tutorial."
"ParseNode","This superclass of most compiler/decompiler classes declares common class variables, default messages, and the code emitters for jumps. Some of the class variables are initialized here; the rest are initialized in class VariableNode."
"UlysseTheMonkey","A UlysseTheMonkey is an intergalactikal monkey who is coming from outer space to check the fix proposed in the google issue tracker.Do NOT mess with Ulysse !!"
"UserInputEvent",""
"ZnDigestAuthenticatorTests",""
"AdditionalMethodState","I am class holding state for compiled methods. All my instance variables should be actually part of the CompiledMethod itself, but the current implementation of the VM doesn't allow this.  Currently I hold the selector and any pragmas or properties the compiled method has.  Pragmas and properties are stored in indexable fields; pragmas as instances of Pragma, properties as instances of Association.I am a reimplementation of much of MethodProperties, but eliminating the explicit properties and pragmas dictionaries.  Hence I answer true to isMethodProperties."
"RBRenameMethodRefactoring",""
"FT2Handle","handle holds a (typically 32-bit) pointer to an externally managed object."
"IntervalTest",""
"KeychainEditingWrapper","A KeychainEditingWrapper is a simple wrapper for the KeychainEditor "
"FLPair",""
"ExceptionSet","An ExceptionSet is a grouping of exception handlers which acts as a single handler.  Within the group, the most recently added handler will be the last handler found during a handler search (in the case where more than one handler in the group is capable of handling a given exception). "
"RGClassDefinitionTest",""
"PNGReadWriter","I am a subclass of ImageReadWriter that decodes Portable Network Graphics(PNG) images.Submitted by Duane Maxwell"
"NBSTIndirectArgument",""
"RBBlockReplaceRule","RBBlockReplaceRule replaces the matching node by the result of evaluating replaceBlock. This allows arbitrary computation to come up with a replacement.Instance Variables:	replaceBlock	<BlockClosure>	The block that returns the node to replace to matching node with."
"ZnCharacterEncodingError","I am ZnCharacterEncodingError.I am an Error.I signal when something goes wrong while encoding or decoding characters.Part of Zinc HTTP Components"
"Shape",""
"RBChildrenToSiblingsRefactoring",""
"HDReport",""
"FTPConnectionException",""
"LayoutCell","I am used in table layouts to hold temporary values while the layout is being computed.Instance variables:	target 		<Morph>		The morph contained in this cell	cellSize 		<Point>		The size of the cell	extraSpace 	<nil | Point>	Additional space to add after this cell	nextCell 	<nil | LayoutCell>	The next cell in the arrangement.Implementation note:Both, cellSize and extraSpace contains points where	x - represents the primary table direction	y - represents the secondary table direction"
"ZnBase64EncoderTests",""
"SystemSystemSettings",""
"ConnectionClosed","Signals a prematurely closed connection."
"NativeBoostWin32",""
"MCSnapshotBrowserTest",""
"WeakMessageSend","Instances of WeakMessageSend encapsulate message sends to objects, like MessageSend. Unlike MessageSend it is not necessarily a valid mesage.  A request to value only results in a send if infact it is valid. See MessageSendComments also. WeakMessageSend is used primarily for event regristration. Unlike MessageSend WeakMessageSend stoes receiver (object receiving the message send) as a the first and only element of its array as opposed to a named ivar.But like MessageSend, it does have selector		Symbol -- message selector arguments		Array -- bound argumentsand it also has shouldBeNil		Boolean --  used to ensure array of arguments is not all nils"
"RBSuperNode","I am a specialized variable node for 'super'"
"RBRefactoryTestDataApp",""
"OrderedCollection","I represent a collection of objects ordered by the collector."
"GoferCleanup",""
"RBEqualNilRule",""
"ProtocolClientError","Abstract super class for protocol clients	protocolInstance		reference to the protocol client throughing the exception. Exception handlers can access the client in order close, respond or whatever may be appropriate"
"RBMissingSubclassResponsibilityRule","See my #rationale."
"FastInflateStream","This class adds the following optimizations to the basic Inflate decompression:a) Bit reversed accessIf we want to fetch the bits efficiently then we have them in the wrong bit order (e.g., when we should fetch 2r100 we would get 2r001). But since the huffman tree lookup determines the efficiency of the decompression, reversing the bits before traversal is expensive. Therefore the entries in each table are stored in REVERSE BIT ORDER. This is achieved by a reverse increment of the current table index in the huffman table construction phase (see method increment:bits:). According to my measures this speeds up the implementation by about 30-40%.b) Inplace storage of code meanings and extra bitsRather than looking up the meaning for each code during decompression of blocks we store the appropriate values directly in the huffman tables, using a pre-defined mapping. Even though this does not make a big difference in speed, it cleans up the code and allows easier translation into primitive code (which is clearly one goal of this implementation).c) Precomputed huffman tables for fixed blocksSo we don't have to compute the huffman tables from scratch. The precomputed tables are not in our superclass to avoid double storage (and my superclass is more intended for documentation anyways)."
"SubscriptionRegistry","The subscription registry is a threadsafe storage for the subscriptions to an Announcer.In Pharo, subscriptionsFor: protocol is not implemented.This is because Announcer does not provide public access to its registery for encapsulation reasons.(We do not want access to the announcer from action blocks to break encapsulation to other subscribers)"
"NBInt16","I responsible for marshalling 		signed 16-bit integer type values."
"WeakValueDictionaryTest",""
"RBAssignmentInBlockRule",""
"BracketSliderMorph","Abstract superclass for morphs that are used to select a component (R, G, B or A) of a colour."
"NECClassVarTypeGuesser","I'm a simple InstructionClient that tries to guess the type of a given class variable name of a class. "
"NBWin32Handle","Instances of this class represent a reference value to a Win32 resource (file, window, ...)"
"ShortIntegerArrayTest","SUnit Test for ShortIntegerArray"
"RBOrEnvironment",""
"SourceMethodConverter","A SourceMessageConverter is a wrapper wich display the source code of the provided message"
"MCDictionaryRepository",""
"RBPullUpMethodTest",""
"TextAndTextStreamTest","At May 09, 2003 Tim Olson sent a bug report to the Squeak developers list that inspired me to examine the protocol of TextStream in greater detail.  (The bug that Tim reported was present in Squeak 3.4, it is shown in testExample1.) In a discussion that followed,  Daniel Vainsencher proposed that we should have tests for Text and TextStreams. This class is an attempt to implement that proposal. For Squeak 3.4, some of the test examples fail."
"MetacelloStackCacheNotification",""
"ChoseDate","A ChoseDate is an announcement raised by the CalendarMorph"
"MacRomanTextConverter","Text converter for Mac Roman.  An encoding used for the languages originated from Western Europe area."
"FontFamilyAbstract",""
"AbstractMethodIconAction","AbstractMethodIconAction is the common super class for all the method icon actions.A method icon action is used to retrieve the correct icon the method in nautilus lists"
"Latin9Environment","This class provides the support for the languages in 'Latin-9' category."
"RPackageMonticelloSynchronisationTest",""
"SearchableList","SearchableList 	new items: #( aaa abc axz bbb bfbg bof c);	openWithSpec	should it be a subclass of LIstModel?Because now I will have to delegate a lot? and I cannot plug a IconListHow do I make textModel react to every keystroke without an accept"
"Boolean","Boolean is an abstract class defining the protocol for logic testing operations and conditional control structures for the logical values represented by the instances of its subclasses True and False.Boolean redefines #new so no instances of Boolean can be created. It also redefines several messages in the 'copying' protocol to ensure that only one instance of each of its subclasses True (the global true, logical assertion) and False (the global false, logical negation) ever exist in the system."
"RBCompositeLintRuleTest",""
"StringMorphAttributeScanner","A StringMorphAttributeScanner provides the interface of a CharacterScanner so that text attributes may be collected from a Text and used elsewhere, like in setting the attributes of a StringMorph."
"DropListExample","A DropListExample is a simple example of how to use drop lists.DropListExample new openWithSpec"
"DummyEcryptor","A DummyEcryptor is an encryptor that just do _NOT_ encrypt at all :)"
"PackageTasksPlugin","This plugin shows the tasks in the current package.A task is a method which sends #flag: to mark it as #todo, or #fixme, or whatever task you want to fix.Clicking in the specific task makes you jump to the marked method."
"AnimationSettings",""
"AbstractBindings","AbstractHolder is an abstract class which handle two dictionaries: one for classes symbol, and one for selectors symbols."
"TableLayoutProperties",""
"NautilusPluginManager","NautilusPluginManager is a manger of plugins used to set up plugin for Nautilus UI"
"UITheme","Common superclass for User Interface themes. Provides methods for creating new morphs in a standard way, various ""services"" like a file dialog, message dialogs etc. and also methods for customising aspects of the appearance of various morphs.Though conceptually abstract, no code is ""missing"". Subclasses, therefore, should override the aspects they wish to change.UITheme exampleBasicControlsUITheme exampleBuilderUITheme exampleColorControlsUITheme exampleDialogsUITheme exampleGroupsUITheme exampleOtherControlsUITheme exampleWindowWithToolbars"
"PointArray","This class stores 32bit Integer points in place. It is used to pass data efficiently to the primitive level during high-bandwidth 2D graphics operations."
"NotFound","I am NotFound, an exception to indicate that something is not found in a collection.I am an Error and thus Exception.Typically, the thing not found is in my object instance variable.The collection where this thing was not found is in my inherited signaler instance variable.[ NotFound signalFor: 10 in: #(1 2 3) ] on: NotFound do: [ :exception | exception ]"
"TestingComposableModel","A TestingComposableModel is a stupid composable model used to test SpecInterpreter"
"RBPullUpMethodRefactoring",""
"ZnEntityReader","I am ZnEntityReader, I help reading ZnEntities from a stream given meta data in headers.I deal with chunking and gzip decoding.I have several options:	- to read streaming entities, where the client has to do the actual reading	- to read binary entities, where textual content is not interpreted	- to allow reading up to end, when there is no content length setPart of Zinc HTTP Components."
"MetacelloMCPartiallyLoadedStatus",""
"DateAndTimeEpochTest","I represent one of several Sunit test Cases intentended to provide complete coverage  for the Chronology set of classes as part of the external testing. The other Chronology sunit test cases are: DateTestCase DateAndTimeLeapTestCase, DurationTestCase, ScheduleTestCase TimeStampTestCase TimespanDoTestCase,  TimespanDoSpanAYearTestCase,  TimespanTestCase,  YearMonthWeekTestCase.  These tests attempt to exercise all public and private methods.  Except, they do not explicitly depreciated methods. tlkMy fixtures are:aDateAndTime = January 01, 1901 midnight (the start of the Squeak epoch) with localTimeZone = Grenwhich Meridian (local offset = 0 hours)aDuration = 1 day, 2 hours, 3, minutes, 4 seconds and 5 nano seconds.aTimeZone =  'Epoch Test Time Zone', 'ETZ' , offset: 12 hours, 15 minutes. "
"MCWriteOnlyRepository",""
"DiffMorph",""
"TreeSpec","A TreeSpec is a spec used to describe a tree"
"CommentToDoWindow","To enter comment for todos."
"RGClassVariableDefinition",""
"HashTesterTest","I am a simple test case to check that HashTester works correctly"
"CompoundTextConverter","Text converter for X Compound Text."
"NECOverrideModel","I'm used when completing a method override. I contain all selectors of the superclass minus the already implemented selectors of the current class. When a completion occurs I complete a method template with a send to super."
"NameStringInHalo","Shows the name of the morph in the halo. "
"RBOnlyReadOrWrittenVariableRule","See my #rationale."
"RBSendsDeprecatedMethodToGlobalRule",""
"RBCondition",""
"TextAlignment","I'm a Text attribute that tells how content should be aligned.TextMorph new   newContents: (Text streamContents: [:aStream| 										aStream 											nextPutAll: 'Left flush' asText; 											cr;											nextPutAll: ('Centered' asText addAttribute: TextAlignment centered);  											cr;											nextPutAll: ('Right flush' asText addAttribute: TextAlignment rightFlush);  											cr ]);  openInWindowLabeled: 'TextAlignment demo'"
"FreeTypeFace",""
"SpecInspector",""
"ProcessBrowser","Change Set:		ProcessBrowserDate:			14 March 2000Author:			Ned Konzemail: ned@bike-nomad.comThis is distributed under the Squeak License.Added 14 March:	CPUWatcher integration	automatically start and stop CPUWatcher	added CPUWatcher to process list menuAdded 29 October:	MVC version	2.8, 2.7 compatibility	rearranged menus	added pointer inspection and chasing	added suspend/resume	recognized more well-known processes	misc. bug fixesAdded 26 October: highlight pc in source codeAdded 27 October: added 'signal semaphore'added 'inspect receiver', 'explore receiver', 'message tally' to stack list menuadded 'find context', 'next context' to process list menuadded 'change priority' and 'debug' choices to process list menu27 October mods by Bob Arning:alters process display in Ned's ProcessBrowser to - show process priority- drop 'a Process in' that appears on each line- show in priority order- prettier names for known processes- fix to Utilities to forget update downloading process when it ends (1 less deadprocess)- correct stack dump for the active process"
"SimpleTestResourceB1",""
"RGPackage","RGPackage is the representation for packages.A package manages classes, methods and children packages as elements.A package can also know in which package is defined"
"RBAddTraitChange",""
"FLTraitSerializationTest","I have the common behavior for testing trait serialization."
"RBPatternParser","RBPatternParser is a subclass of RBParser that allows the extended syntax that creates matching trees. These trees can be used by the ParseTreeMatcher to search and transform source code."
"MCStWriter","I write Category/Classes/Methods/.... definitions into Monticello source.st file format found in .mcz packages.    See also MCStReaderExample:String streamContents: [:aStream| |writer|    writer := MCStWriter on: aStream.    writer writeDefinitions: {True asClassDefinition. False asClassDefinition}.]"
"RBRefactoring",""
"FLSerializationError","I represent an error happened during serialization."
"MCRepositoryError","I am an MC-specific errror"
"RBSizeCheckRule",""
"KMCombinationShortcut",""
"DisplayObject","The abstract protocol for most display primitives that are used by Views for presenting information on the screen."
"ZnStatusLine","I am an HTTP Status Line.I consist of an HTTP protocol version, an integer HTTP status code and an HTTP reason string.I can be used for generating and parsing.Part of Zinc HTTP Components."
"CompositeTransform","A composite transform provides the effect of several levels of coordinate transformations."
"MCPackageLoader","A MCPackageLoader is responsible for loading packages.  It gets used by VersionLoader, so it is eventually responsible for loading everything.Instance Variables	additions:		<Definitions>  Definitions that need to be added	errorDefinitions:		<Object>	obsoletions:		<Object>	provisions:		<Object>	removals:		<Object>	requirements:		<Object>	unloadableDefinitions:		<Object>	methodAdditions  <MethodAdditions> MethodDefinitions corresponding to the Definitions in ""additions"" that have been added so far."
"HelpHowToHelpTopics",""
"TestResult","This implements the Collecting Parameter pattern for running a bunch of tests.  It holds tests that have run, sorted into the result categories of passed, failures and errors.TestResult is an interesting object to subclass or substitute. #runCase: is the external protocol you need to reproduce. TestResult subclasses can  handle multi-threaded tests (see SUnitXProcPatterns) and might record coverage information or send emails when the run completes."
"ZipReadStream","ZipReadStream is intended for uncompressing the compressed contents of Zip archive members.Since Zip archive members keep their expected CRC value separately in Zip headers, this class does not attempt to read the CRC from its input stream.Instead, if you want the CRC verification to work you have to call #expectedCrc: with the expected CRC-32 value from the Zip member header."
"NBExternalAddress","My primary function is to represent a pointer (address) to memory, in cases, when a kind of data under given address does not having any special structure,which can be reflected more nicely in language. Usually i can be used to hold pointer(s) to buffers (void*), or to allocated memory region etc.I providing some basic interface for reading/writing data into memory where i pointing to, as well as some convenience methods."
"GoferBrowseRemoteChanges",""
"RBRenameClassTest",""
"MorphicEventDispatcher","The class represents a strategy for dispatching events to some immediate child of a morph. It is used by morphs to delegate the somewhat complex action of dispatching events accurately. "
"LazyMorphTreeNodeMorph",""
"DeepCopier","DeepCopier does a veryDeepCopy.  It is a complete tree copy using a dictionary.  Any object that is in the tree twice is only copied once.  All references to the object in the copy of the tree will point to the new copy.  See Object|veryDeepCopy which calls (self veryDeepCopyWith: aDeepCopier).When a tree of morphs points at a morph outside of itself, that morph should not be copied.  Use our own kind of weak pointers for the 'potentially outside' morphs.   Default is that any new class will have all of its fields deeply copied.  If a field needs to be weakly copied, define veryDeepInner: and veryDeepFixupWith:.     veryDeepInner: has the loop that actually copies the fields.  If a class defines its own copy of veryDeepInner: (to leave some fields out), then veryDeepFixupWith: will be called on that object at the end.  veryDeepInner: can compute an alternate object to put in a field.  (Object veryDeepCopyWith: discovers which superclasses did not define veryDeepInner:, and very deeply copies the variables defined in those classes).	To decide if a class needs veryDeepInner: and veryDeepFixupWith:, ask this about an instance:  If I duplicate this object, does that mean that I also want to make duplicates of the things it holds onto?  If yes, (i.e. a Paragraph does want a new copy of its Text) then do nothing.  If no, (i.e. an undo command does not want to copy the objects it acts upon), then define veryDeepInner: and veryDeepFixupWith:.	Here is an analysis for the specific case of a morph being held by another morph.  Does field X contain a morph (or a Player whose costume is a morph)?  If not, no action needed.Is the morph in field X already a submorph of the object?  Is it down lower in the submorph tree?	If so, no action needed.Could the morph in field X every appear on the screen (be a submorph of some other morph)?	If not, no action needed.	If it could, you must write the methods veryDeepFixupWith:   and   veryDeepInner:, and in them, refrain from sending veryDeepCopyWith: to the contents of field X.----- Things Ted is still considering -----Rule:  If a morph stores a uniClass class (Player 57) as an object in a field, the new uniClass will not be stored there.   Each uniClass instance does have a new class created for it.  (fix this by putting the old class in references and allow lookup?  Wrong if encounter it before seeing an instance?)Rule: If object A has object C in a field, and A says (^ C) for the copy, but object B has A in a normal field and it gets deepCopied, and A in encountered first, then there will be two copies of C.  (just be aware of it)Dependents are now fixed up.  Suppose a model has a dependent view.  In the DependentFields dictionary, model -> (view ...).  	If only the model is copied, no dependents are created (no one knows about the new model).  	If only the view is copied, it is inserted into DependentFields on the right side.  model -> (view  copiedView ...).  	If both are copied, the new model has the new view as its dependent.	If additional things depend on a model that is copied, the caller must add them to its dependents."
"CategoryRenamed","This announcement will be emited when renaming a category using:=> SystemOrganizer >> renameCategory:toBe:"
"RBMoveMethodTest",""
"RxsBranch","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A Branch is a Piece followed by a Branch or an empty string.Instance variables:	piece		<RxsPiece>	branch		<RxsBranch|RxsEpsilon>"
"TextMorphForEditView","I'm a TextMorph that must be embedded in a PluggableTextMorph.Multi-line text editor with support for accepting on both each change and/or when keyboard focus changes. Also supports custom selection colour and clickable highlights From PluggableTextEditorMorph.Instance Variables	acceptOnCR:		<Object>	acceptOnFocusChange:		<Object>	autoAccept:		<Object>	editView:		<Object>	selectionColor:		<Object>acceptOnCR	- xxxxxacceptOnFocusChange	- xxxxxautoAccept	- xxxxxeditView	- xxxxxselectionColor	- xxxxx"
"ByteArray","I represent an ArrayedCollection whose elements are integers between 0 and 255."
"SliderModel","A SliderModel is a spec model for a slider"
"ExpanderMorphAnnouncement",""
"MailAddressToken","a single token from an RFC822 mail address.  Used internally in MailAddressParser"
"MorphTreeTransformMorph",""
"RBKeywordToken","RBKeywordToken is the first-class representation of a keyword token (e.g. add:)"
"PluggableTreeItemNode","Tree item for PluggableTreeMorph."
"PSMCOrganizationChangeWrapper",""
"CodeCriticBrowser","A CodeCriticBrowser is a UI made to browse code critics refactor"
"UITestCase","All instances of UITestCase are skipped in headless mode."
"MorphTest","This is the unit test for the class Morph. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- http://minnow.cc.gatech.edu/squeak/1547	- the sunit class category"
"RBRefactoringChangeMock",""
"NullSoundTheme",""
"AJCallInfo",""
"TestDynamicVariable","TestDynamicVariable is a test class using in ProcessSpecificTest."
"MorphWithSubmorphsWrapper","Display a morph in a SimpleHierarchicalListMorph, and arrange to recursively display the morph's submorphs.  The ""item"" that is wrapped is the morph to display."
"PopupChoiceDialogWindow","Presents a list of options in a popup format. If the list is long it will split into multiple columns. If very long, the columns will be scrollable. Maximum extent of the content area is half the display extent."
"FLReplacementMock",""
"ThumbnailImageMorph","A ThumbnailImageMorph is variant of Lex Spoon's CDScreenShotMorph. It displays a thumbnail of the image stored in imagePopupMorph. As a super class of PopupThumbnail morph it is meant to be a thumbnail w/o the popup action. Basicly it provides a scalable thumbnail with the usual morph event behaviors.A menu item allows for ""photographing"" any morph on the screen to become the subject of our images.Instance Variables	imagePopupMorph:		<anImageMorph>	image: 					<aForm>	desiredExtent			<aPoint>	isPopup					<aBool>imagePopupMorph	- an ImageMorph containing the full sized image.	- it can be set from a morph image via the sight target menu item.image	- holds the scaled thumbnail form of our imagePopupMorph image.desiredExtent	- holds the desired extent that the thumbnail is expected to fit within.	- it is guarded to be positive and non-zero.	- it can be set by extent: so that the yellow halo handle works.isPopup	- true when popup feature is on.	- toggled from red halo menu		Setting the size of the thumbnail works somewhat excentrically because the extent of the thumbnail depends both on the desiredExtent and the aspect ratio of the current popup image. With the popup feature off this morph can be picked up and dropped with the mouse.When the feature is on, a full sized snapshot will be seen when the mouse is pressed.Since the mouse can't be used for two things at once, moving the morph must be done with the grab halo or brown move halo."
"NOCContext","I keep the context of the ocompletion. I do the same as my parent but for this specific algorithm"
"WikiStyleHelpBuilder","I'm an HelpSystem builder which create an HelpSystem book from a wiki-like formatted string. ! Usage- Create a class-side method on the class you want to put documentation.- Add the pragma <wikiStyleHelp:> with the title of the book as parameter- The method should answer the documentation as a String (using Pier syntax. See http://www.piercms.com/doc/syntax ). ! ExampleMyClass class>>aMethod        <wikiStyleHelp: #'The name of the book I want to write'>        ^ ' ! Section 1 Some text for this section !! Subsection 1.1 !!! Subsection 1.1.1 !! Subsection 1.2 ! Section 2'"
"AGroupHasBeenRemoved",""
"RBReadBeforeWrittenTester","RBReadBeforeWrittenTester is a visitor that identifies variables that may have been read before they are initialized.Instance Variables:	checkNewTemps	<Boolean>	description of checkNewTemps	read	<Collection>	description of read	scopeStack	<OrderedCollection>	description of scopeStack"
"BalloonBezierSimulation","This class is a simulation of the code that's run by the Balloon engine. For debugging purposes only."
"LazyListMorph","The morph that displays the list in a PluggableListMorph.  It is ""lazy"" because it will only request the list items that it actually needs to display.I will cache the maximum width of my items in maxWidth to avoid this potentially expensive and frequent computation."
"RegexMatchingError","This class represents matching errors in regular expressions."
"RemoteString","My instances provide an external file reference to a piece of text.  It may be the sourceCode of a method, or the class comments of a class.The changes file or file-in file usually has a chunk that is just the source string of a method:max: aNumber	^ self > aNumber ifTrue: [self] ifFalse: [aNumber]!I can return either a String or a Text.  Some a chunk is followed by a second chunk (beginning with ]style[) containing style information.  The encoding is like this:max: aNumber	^ self > aNumber ifTrue: [self] ifFalse: [aNumber]!]style[(14 50 312)f1,f1b,f1LInteger +;i!Allowed TextAttributes are TextFontChange, TextEmphasis, TextColor, TextDoIt, TextKern, TextLink, TextURL.  TextFontReference and TextAnchor are not supported.See PositionableStream nextChunkText and RunArray class scanFrom:."
"RGCommentDefinition","RGCommentDefinition is a first-class representation of class's comments"
"RBMoveMethodRefactoring",""
"DropListItem","A DropListItem is an item (wrapper) designed to fit into a DropList"
"EditableDropListMorph","I'm a DropListMorph which content can be modified.Try:(EditableDropListMorph        on: [#(one two three)]        list: #value        selected: nil        changeSelected: nil) openInWindow extent: 400@20."
"ZnMaximumEntitySize","I am ZnMaximumEntitySize.I am a DynamicVariable and a ProcessSpecificVariable.I am used to control the maximum size of entities being read from streams."
"MCDoItParser","A MCDoItParser is a simple 'parser' which understand the addDefinitionsTo: message. Each parser can use the sourceand add definitions to the list of entities that is passed to them.MCDoitParser invokes automatically its subclasses to parse the correct source.Each Doit entities (entities which are defined as doits) extend this entry point to add specific behavior."
"DiffMapMorph",""
"MOPTestClassB",""
"CharacterScanner","My instances hold the state associated with scanning text. My subclasses scan characters for specified purposes, such as computing a CharacterBlock or placing characters into Forms."
"InstructionPrinterTest","This is the unit test for the class InstructionPrinter. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"BecomeTest",""
"TheWorldMenu","Just a placeholder so that old code can still load. "
"UnlockedKeyChain","An UnlockedKeyChain is a keychain with no password.It stores values that anyone can access"
"AJData","I represent a pure data section in an assembly instruction stream.Example:	asm := AJx64Assembler noStackFrame.		""add a raw byte""	asm db: 16rFF.		""add a raw word""	asm dw: #[16r34 16r12].		""add a raw double""	asm dw: #[16r78 16r56 16r34 16r12].		""add a arbitrary sized data section with a byteArray""	asm data: #[1 2 3 4 5 6 7 8 9 10 11 12 ]."
"ZdcPluginMissing","I am ZdcPluginMissing, signaled when a plugin required by Zodiac is missing.You can find more information on Zodiac's website	http://zdc.stfx.eu"
"RBRealizeClassRefactoring","Make a given class concrete, by providing empty templates for all the abstract methods."
"CopyVisitorTest",""
"RBBetweenAndRule",""
"RawSpec","A RawSpec is a spec used to describe whatever you want.It simply works as a stack of interpreted symbols"
"SystemDictionaryTest",""
"TextStyleAsFontFamilyMember",""
"MCPackageManager","MCPackageManager is a kind of package wrapper knowing if the package is dirty or not.The class side manages registered package managers.Instance Variables:	package	<MCPackage>	modified	<Boolean>Class Instance Variables:	registry	<Dictionary>"
"CompilerEvaluationTest","This test is important since it covers a bug of during the debugging of superbinding. It uses the class AverageCost/TotalCost and WeightedAverageCost."
"FLGlobalSendNotPresentMock",""
"TextStyleAsFontFamily",""
"ZnMultiValueDictionary","I am ZnMultiValueDictionary. I am a Dictionary.I offer an #at:add: method to transparently create Array valued multi entries when needed.My #keysAndValuesDo: is overwritten to transparently deal with multi entries.To merge two instance preserving multiple values you can use #addAllMulti:I normally limit the number of entries to protect me from resource abuse.Note that most other methods will show the actual value.Part of Zinc HTTP Components."
"SocketAddress","I represent a socket (network) address consisting of a host internet address and a port number.  My contents are opaque and cannot be interpreted directly.  See the accessing protocol for methods that retrieve the information I contain."
"MetacelloValidationNotification",""
"SpecDialogWindow","A SpecDialogWindow is a window made for embedding Spec models into dialog windows"
"LazyMorphTreeMorph","I am a MorphTreeMorph, but I only render the rows lazily as they appear on screen. Caveat: There is no rendering in the background. This means that if a row takes too long to render, you can experience a shorter or longer freeze when scrolling."
"MCMockClassD",""
"AmbiguousSelector","An AmbiguousSelector is a notification produced by the Scanner/Parser/Compiler when encountering this ambiguous construct:1@-2Upper expression can be interpreted both1 @ -2 (regular st-80 and former Squeak syntax, the minus is attached to the literal number)1 @- 2 (extended binary selector, the minus sign is allowed at any position and thus part of the binary selector)"
"RBSpellChecker",""
"AbstractTutorialTest",""
"RBLawOfDemeterRule",""
"FLClusterization","I manage the clusters collected during the analysis step of serialization."
"MCAncestryTest",""
"RGOrganization",""
"ArrayedCollection","I am an abstract collection of elements with a fixed range of integers (from 1 to n>=0) as external keys."
"CharacterBlockScanner","My instances are used to scan text to compute the CharacterBlock for a character specified by its index in the text or its proximity to the cursor location."
"FLSmallIntegerCluster","I don't have so much sense as a class."
"NBVoid",""
"ClassTrait","While every class has an associated metaclass, a trait can have an associated classtrait, an instance of me. To preserve metaclass compatibility, the associated classtrait (if there is one) is automatically applied to the metaclass, whenever a trait is applied to a class. Consequently, a trait with an associated classtrait can only be applied to classes, whereas a trait without a classtrait can be applied to both classes and metaclasses."
"HDTestCoverage",""
"ScrollPane","The scroller (a transform) of a scrollPane is driven by the scrollBar.  The scroll values vary from 0.0, meaning zero offset to 1.0 meaning sufficient offset such that the bottom of the scrollable material appears 3/4 of the way down the pane.  The total distance to achieve this range is called the totalScrollRange.Basic clue about utilization of the ScrollPane class is given in:	ScrollPane example1.	ScrollPane example2."
"RBInlineParameterTest",""
"RxsPiece","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A piece is an atom, possibly optional or repeated a number of times.Instance variables:	atom	<RxsCharacter|RxsCharSet|RxsPredicate|RxsRegex|RxsSpecial>	min		<Integer>	max	<Integer|nil> nil means infinity"
"RegexHelp","This is a custom help book for the regular expression framework."
"TextConverter","The abstract class for all different type of text converters.  nextFromStream: and nextPut:toStream: are the public accessible methods.  If you are going to make a subclass for a stateful text conversion, you should override restoreStateOf:with: and saveStateOf: along the line of CompoundTextConverter."
"ZnCurrentServerSession","I am ZnSignalProgress.I am a ProcessLocalVariable and a ProcessSpecificVariable.I hold a reference to the current ZnServerSession instance during HTTP processing, during the dynamic scope of #handleRequest:ZnServerSessions are created lazily."
"SystemAnnouncer","This class plays the role of the announcer for events raised by the Pharo system.BEWARE: You should not need to subclass me. Think about just using me to send your announces (if you need system behavior) or using your own announcers as instance or class  variables."
"HistoryCollection","I'm a data structure used to store an history.My behavior is	- I store Associations (anElement -> anInteger), where anElement is the element to store and anInteger the number of times it has been added. (as a Dictionary)	- I only store once each element (as a Set).	- I have a max size. If I add an element and have reached the max size, I remove the less seen element.	- I store element in the chronological order (as an OrderedCollection)"
"MCFileRepositoryInspector","I'm a monticello tool composed of three panes to browse repositories and the packages they contain. You get an instance of me when you click on a repository in Monticello browser and press open. My left pane presents the packages, my right one their versions and the bottom one the commit log of the selected package versions.I underline the packages you already loaded, and highlight the ones you don't have updated to the last version. I also highlight the versions you did not load yet.Example: I can browse packages of PharoInbox with:(MCFileRepositoryInspector 	repository: (MCHttpRepository					location: 'http://www.squeaksource.com/PharoInbox'					user: ''					password: '')	workingCopy: nil) show.	COTDC - S.Ducasse, G.Polito, L.Laffont"
"RBSearchingLiteralRule",""
"MetacelloMCVersionSpecLoader",""
"MetacelloValidationError","MetacelloValidationError indicates that errors are to be expected if an attempt to use the configuration/version is made"
"WindowAnnouncement",""
"Delay","I am the main way that a process may pause for some amount of time.  The simplest usage is like this:	(Delay forSeconds: 5) wait.An instance of Delay responds to the message 'wait' by suspending the caller's process for a certain amount of time. The duration of the pause is specified when the Delay is created with the message forMilliseconds: or forSeconds:. A Delay can be used again when the current wait has finished. For example, a clock process might repeatedly wait on a one-second Delay.The maximum delay is (SmallInteger maxVal // 2) milliseconds, or about six days. A delay in progress when an image snapshot is saved is resumed when the snapshot is re-started. Delays work across millisecond clock roll-overs.For a more complex example, see  #testDelayOf:for:rect: .A word of advice:This is THE highest priority code which is run in Pharo, in other words it is time-critical. The speed of this code is critical for accurate responses, it is critical for network services, it affects every last part of the system.In short: Don't fix it if it ain't broken! This code isn't supposed to be beautiful, it's supposed to be fast! The reason for duplicating code is to make it fast. The reason for not using ifNil:[]ifNotNil:[] is that the compiler may not inline those. Since the effect of changes are VERY hard to predict it is best to leave things as they are for now unless there is an actual need to change anything"
"MonitorTest",""
"FLMethodContextSerializationTest",""
"IVsAndClassVarNamesConflictTest",""
"NautilusShowInstanceChanged","A NautilusShowInstanceChanged is raised when the value of showInstances is changed"
"MetacelloSpec",""
"DropEvent","I model the event produced when a hand drops a (grabbed) morph into another morph.I know the position of the drop, the dropped morph and the hand that produced me.To handle this event a morph should override one of these methods:#acceptDroppingMorph:event:#justDroppedInto:event:Additionaly, a morph can specify if it wants to accept a dropped morph by overriding #wantsDroppedMorph:event:. Symmetrically, the morph being dropped can specify if it wants to be dropped in another morph by overriding #wantsToBeDroppedInto:. Note that for a successful drop operation both parties need to agree.See HandMorph>>dropMorph:event: for an example of usage."
"ZnHTTPSocketFacade","I am ZnHTTPSocketFacade.On my class side I implement all necessary replacement methods of HTTPSocket.The interface (signature and semantics) of this API is defined by HTTPSocket.Overwriting these HTTPSocket methods with mine will effectively redirect allHTTP client access in this Smalltalk image through Zinc HTTP Components.Part of Zinc HTTP Components."
"MetacelloPrePostLoadDirective",""
"KMShortcutTest",""
"MorphTreeNavigationBar","I'm a pager control used to navigate in a MorphTreeMorph that has a lot of entries.You can see one of my subclass in action using:""May take a while to open""ClassListExample new open"
"RBPushDownMethodTest",""
"FLClassSerializationTest","I have the common behavior for testing class serialization."
"SpecAdder",""
"AnnouncementMockB","This is a simple test mock"
"ClassRenamed","the annoucement will be emitted when renaming a class or a trait using:  	=> RenameClassRefactoring >> rename:to:	=> class>>rename:The corresponding event is raised in: SystemDictionary>>renameClass:from:to:"
"RBRenameClassVariableTest",""
"Integer","I am a common abstract superclass for all Integer implementations. My implementation subclasses are SmallInteger, LargePositiveInteger, and LargeNegativeInteger.	Integer division consists of:	/	exact division, answers a fraction if result is not a whole integer	//	answers an Integer, rounded towards negative infinity	\\	is modulo rounded towards negative infinity	quo: truncated division, rounded towards zero"
"ZnConstants","I am ZnConstants, holding various constants that we use.Part of Zinc HTTP Components."
"ChunkImportTestCase",""
"TestCase","A TestCase is an implementation of the Command pattern to run a test.  TestCase instances are created with the class method #selector:, passing the symbol that names the method to be executed when the test case runs.  Various UIs exist to run these instances and they can also be created and run programmatically.When you discover a new fixture, subclass TestCase and create a #test... method for the first test.  As that method develops and more #test... methods are added, you will find yourself refactoring temps into instance variables for the objects in the fixture and overriding #setUp to initialize these variables.  As required, override #tearDown to nil references, release objects and deallocate.See my superclass' comment for assertion and logging information."
"TextAttribute","Tells a piece of text to be a certain way.Select text, press Command-6, choose a attribute.  If selected text is of the form 	Hi There<Smalltalk beep>the part in angle brackets is saved for action, and the Hi There appears in the paragraph.  If selection has no angle brackets, use the whole thing as both the text and the action.TextDoIt  --  eval as a Smalltalk expression (the part in angle brackets)TextLink -- Show a method, class comment, class hierarchy, or class defintion.	<Point extent:>, <Point Comment>, <Point Hierarchy>, or <Point Defintion> are what you type.TextURL -- Show the web page. <www.disney.com>These attributes of text need to be stored on the disk in a regular file-out.  It is done in this form: 	Hi There   	in the text, and a Run containing   dSmalltalk beep;;	Click here to see the extent:   	in the text, and a Run containing   method LPoint extent:;See RunArray class scanFrom: where decoding is done."
"BreadthFirstGuideTest",""
"MCSliceMaker","MCSliceMaker is a dialog to help you making slices.It allows you to enter the slice number, the summary and to directly select dependent dirty packages.Then a slice package is added for you in the working copy browser from which it is opened.Just copy-paste issue number and summary. All is formated for you.Instance Variables	info:		<MCSliceInfo>	okToDoSlice:		<Boolean>	window:		<StandardWindow>info	- It is the model for the user interfaceokToDoSlice	- true if the OK button is clicked, it is to avoid slice making in case of cancel and in the case where the close button of the window has been clickedwindow	- my window"
"Locale","Main comment stating the purpose of this class and relevant relationship to other classes.	http://www.w3.org/WAI/ER/IG/ert/iso639.htm	http://www.oasis-open.org/cover/iso639a.html	See also	http://oss.software.ibm.com/cvs/icu/~checkout~/icuhtml/design/language_code_issues.html	http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.10	ISO 3166http://mitglied.lycos.de/buran/knowhow/codes/locales/"
"EventManagerTest",""
"NECWorkspaceController","I'm a specialized controller, that works with Workspaces."
"Warning","A Warning is a Notification which by default should be brought to the attention of the user."
"MCTestCase",""
"RBSemanticAnnotator",""
"ToggleIconicButton","A ToogleIconicButton is an iconic button with two different images, one when the button is activated, one when it is desactivated.Not really usefull since there is PluggableThreePhaseButtonMorph"
"RBUnreferencedVariablesRule","See my #rationale."
"DisplaySettings",""
"AbstractTextChangedPlugin","An AbstractTextChangedPlugin is a plugin which simply log each time the method displayer changed"
"InfiniteForm","I represent a Form obtained by replicating a pattern form indefinitely in all directions."
"IntegerEditor",""
"RBUndeclaredReferenceRule","See my #rationale."
"ZnLimitedReadStreamTests",""
"SimpleTestResourceCircular1",""
"RBGenerateEqualHashRefactoring",""
"MockTutorial2",""
"RBMetaclass",""
"NativeBoost","i am a core class, which provides a common functionality, required by many NativeBoost facilities to function, including:- basic memory operations- external roots registry- call gate function- session managementEvery new session, i using an unique instance,which is platform specific (see my subclasses).To access a current session instance, you can issue:NativeBoost forCurrentPlatform"
"ShadowLabelMorph",""
"LanguageEnvironment","The name multilingualized Squeak suggests that you can use multiple language at one time.  This is true, of course, but the system still how to manage the primary language; that provides the interpretation of data going out or coming in from outside world. It also provides how to render strings, as there rendering rule could be different in one language to another, even if the code points in a string is the same.  Originally, LanguageEnvironment and its subclasses only has class side methods.  After merged with Diego's Babel work, it now has instance side methods.  Since this historical reason, the class side and instance side are not related well.  When we talk about the interface with the outside of the Squeak world, there are three different ""channels""; the keyboard input, clipboard output and input, and filename.  On a not-to-uncommon system such as a Unix system localized to Japan, all of these three can have (and does have) different encodings.  So we need to manage them separately.  Note that the encoding in a file can be anything.  While it is nice to provide a suggested guess for this 'default system file content encoding', it is not critical.  Rendering support is limited basic L-to-R rendering so far.  But you can provide different line-wrap rule, at least."
"RBAddMethodRefactoring",""
"ZnEasyTests",""
"TopLeftGripMorph","I am the handle in the left top of windows used for resizing them."
"AJJumpLabel",""
"NativeBoostConstants",""
"MorphTreePager",""
"WidgetSetter",""
"RBRegexRefactoring",""
"BlockClosure","I am a block closure for Eliot's closure implementation.  Not to be confused with the old BlockClosure."
"TabSelectorMorph","Row of tabs for a TabGroupMorph."
"RBVariableNotDefinedRule","See my #rationale."
"RenderBugz","A RenderBugz is an infinite recursion bug test for TransformationMorphs.In 3.9 (7067) and before, when TransformationMorph has no rendee there are several methods that will infinitely recurse until manually stopped or the image runs out of memory.So far the ones I've caught are the getters and setters for heading and forwardDirection.So there  are tests for them here.Ideally there would be a way to run a test against a stopwatch to catch endless recursion.Found it. Now incorperated. And the tests should be both save to run and cleanup after themselves even when they fail. So far we have not tested the normal cases of rendering working. I will leave that as a separate task for another time. So this is an automatic test when the bugs are fixed and interactive (crash) tests when the bugs are present.Instance VariablesRevision notes. wiz 5/15/2008 22:58When running tests from the TestRunner browser the test would sporadically fail.When they failed a transfomation morph would be left on the screen and not removed by the ensureBlock. So I changed things to fall under MorphicUIBugTests because that had a cleanup mechansizm for left over morphs.I also added one routine to test for time and one parameter to determine the time limit.To my surprise doubling or tripling the time limit still produced sporadic errors when the test is run repeatedly enough ( I am using a 400mz iMac. )  So now the parameter is set to 4. Things will probably fail there if tried long enough. At that point try 5 etc. I am reluctant to make the number larger than necessary. The tighter the test the more you know what is working.I also added a dummy test to check specifically for the timing bug. It fails on the same sporadic basis as the other test went the time parameter is short enough. This lends confidence to the theory that the timing difficulty is coming from outside the test. The sunit runner puts up a progress morph for each test. So the morphic display stuff is busy and probably also the GC."
"LoginFailedException","Exception for signaling login failures of protocol clients."
"FLGlobalCluster","I am a cluster for objects that are reachables from Smalltalk global dictionary."
"NewList","NewList is a new morph as replacement for PluggableListMorph.The API used is hardcoded, but NewListAdapter has been introduced to hold this ""pluggable"" behavior"
"SwitchUsers","A SwitchUsers is a GUI to swith the current user"
"PickListModel","A PickList is a tick list done using spec."
"ProgressIndicatorMorph",""
"ZnMagicCookieJarTests",""
"ScriptLoader","Pharo Process Description---Here is the pharo process.General points-----------------------An enhancement	- should be added to the bug tracker	- announced to the mailing-list	- asked for feedback 	- results should be added to the BT entryFixed tag means ready for integrationClosed tag means integratedA bug detected	- discuss via the mailing-list	- should be added to the bug tracker	- fix are considered as enh (see point above)When a fix is fixed it should be either post as cs to the BT entry or in the PharoInboxas a Slice (a slice is an emtpy package that has as requirement other package composing the fix).We have three projects:	Pharo	PharoInbox	PharoTreatedInboxA fix goes either from inbox to treatedInbox or to Pharo.If a fix does not work it is moved to the TreatedInbox.If a fix works it is integrated as follow - it will be moved from the Inbox to the TreatedInboxand integrated and published in the Pharo projectTo help browsing multiple repositories:ScriptLoader new addExtraRepositories+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Now the integration works in 4 main steps which can be steered by the following expressionScriptLoader releaseMenuor via the menu that can be shown/hidden using 	ScriptLoader showIntegrationMenu	ScriptLoader hideIntegrationMenu1.) Start up a recent and clean image	ScriptLoader new prepareNewUpdate		This step will 		- load the latest updates		- load the latest ScriptLoader package from the Pharo repository.		Indeed when we work on improving the ScriptLoader it may not be published in the update stream. 		New versions can be available on the server but not part of the latest updates.		Therefore the process always loads the latest version of scriptloader from the pharo repository.		This point is important because when an integration failed, you have to check and optionally 		remove the scriptloader package from the pharo repository.				- check that the update.list (which contains the cs to load the packages) is in sync		with the image current version. You have to download the latest version using a script like this one.		Pay attention to update it so that it reflects the right version (ie 1.0, 1.1, 1.2...)		     scp -p LOGIN@scm.gforge.inria.fr:/home/groups/pharo/htdocs/updates/pharo1.1/updates.list .		- snapshot the package version to detect dirty or changed but non dirty packages.2.) Apply changes	ScriptLoader new doneApplyingChanges		This step will 		- create an update method with can trigger the load of the packages and some pre/post actions		- create a script method with describes all the package versions and it used by the update methods		- save all the packages that are different (except some filtered packages)			into a local folder named package-to-be-tested.		ScriptLoader, SLICE*.... and a couple of other packages are not considered to be included in the script method			(check method packagesNotToSavePatternNames)		3.) Verify changes	==> in a ***new*** image (in the current folder) execute:	ScriptLoader new verifyNewUpdate	This step will 		- load in any order (so may break) the package previously saved		in the packages to be tested.		- this step is important because you may get simple changes with unexpected side effects and that 		may break the load.		4.) If there are problems go to 2.) to fix them, else:	ScriptLoader new publishChanges	This step will		- generate a new cs file whose purpose is to load the given version of the scriptloader and trigger the 		correct update method.		- add the name of the cs file to the end of the updates.list file local to the disc		- copy all the package from the local directory to the Pharo			After the updates.list and the cs file should be manually uploaded to the ftp (see below) 	   scp ""$1"" LOGIN@scm.gforge.inria.fr:/home/groups/pharo/htdocs/updates/pharo1.1/	5) in case of problems.Think that if you pass the step 4 you may have a scriptLoader version that got published and that is reloaded during the first step.CurrentMajorVersionNumber should contains a string '1.0', '1.1'....This string will determine on which folder on the server the updates.list should be loaded.	i.e., updates/pharo1.0, updates/pharo1.1 ....--- Not to forget ---To change the release streamadd a new method for each releaseStream	ScriptLoader toPharoOne	ScriptLoader toPharoOneDotOne"
"LoadUpdatesCommandLineHandler","Usage: updateDocumentation:The update the image to the latest version."
"ParagraphSelectionBlock",""
"ZLibWriteStream","I use the zlib implementation of the deflate algorithm to compress a ByteArray. According to Wikipedia, ""this algorithm provides good compression on a wide variety of data with minimal use of system resources."" See http://en.wikipedia.org/wiki/DEFLATE for details on the deflate algorithm.This is how you get a compressed ByteArray from your input:zipStream := ZLibWriteStream on: (ByteArray new).zipStream 	nextPutAll: myByteArray;	close.compressed := zipStream encodedStream contents."
"GoferReferenceTest",""
"TestSkip","I mark a test as being skipped."
"SHStyleElement",""
"RBRefactoryTyper",""
"ZnUnexpectedContentType","ZnUnexpectedContentType is signalled when a different content type (mime type) was expected.I hold the expected and actual content types.Part of Zinc HTTP Components. "
"FLObjectNotFound","I represent an error which may happen during serialization, when trying to encode on the stream a reference to an object that should be encoded before, but it is not.This usually happens when the graph changes during serialization. Another possible cause is a bug in the analysis step of serialization."
"TreeModel","A TreeModel is a spec model of a Tree ;)"
"ColorTest",""
"MergeJoinSection",""
"ClassOrganization","A ClassOrganization is a new implementation of ClassOrganizer with 	- cleaner API	- better object management	- better categorization	This object is in charge of system notifications.It manages the class comment, the class comment stamp and a protocol organizer"
"MCMockDependency",""
"RPackageCompleteSetupButForModificationTest",""
"AbstractFileReference","I am an abstract superclass for FileLocator and FileReference. By implementing most of the methods on myself most code duplucation between the locator and the reference can be avoided"
"MultiDisplayScanner","I'm a class related to the computation of characters counting for text flow."
"GoferMetacelloLoad",""
"CopyVisitor","I create a copy of the directory tree that I visit. I use the PreorderGuide so that I can create directories before creating their contents. "
"TransformMorph","A TransformMorph introduces a 2-D transformation between its (global) coordinates and the (local) coordinates of its submorphs, while also clipping all display to its bounds.  Specifically, with no offset, angle or scaling, a submorph with coordinates (0@0) will appear exactly at the topLeft of the windowMorph (its position).  Rotation and scaling are relative to the local origin, (0@0).instance var	type				description transform		MorphicTransform	The coordinate transform between my coordinates and the									local coordinates of my submorphs. smoothing		anInteger in 1..3	Perform smoothing of my contents during drawing										1 No smoothing (#smoothingOff)										2 Smoothing w/ edge adjacent pixels (#smoothingOn)										3 Smoothing w/ edge and corner adj pixels			 localBounds	Rectangle or nil		caches the value of #localSubmorphBounds for performanceTransformMorphs operate with two different display strategies, depending on whether the transformation is a pure translation or not.  If so, then they simply use a clipping canvas and display their submorphs with the appropriate offset.  If the transformation includes scaling or rotation, then a caching canvas is used, whose active area covers the fullBounds of the submorphs intersected with the source quadrilateral corresponding to the window bounds."
"TextComposer",""
"RBScanner","RBScanner is a stream that returns a sequence of token from the string that it is created on. The tokens know where they came from in the source code and which comments were attached to them.Instance Variables:	buffer	<PositionableStream>	Accumulates the text for the current token.	characterType	<ByteSymbol>	The type of the next character. (e.g. #alphabetic, etc.)	classificationTable	<Array of: Symbol>	Mapping from Character values to their characterType.	comments	<Collection of: Interval>	Source intervals of scanned comments that must be attached to the next token.	currentCharacter	<Character>	The character currently being processed.	errorBlock	<BlockClosure>	The block to execute on lexical errors.	extendedLiterals	<Boolean>	True if IBM-type literals are allowed. In VW, this is false.	nameSpaceCharacter	<Character>	The character used to separate namespaces.	numberType	<ByteSymbol>	The method to perform: to scan a number. 	separatorsInLiterals	<Boolean>	True if separators are allowed within literals.	stream	<PositionableStream>	Contains the text to be scanned.	tokenStart	<Integer>	The source position of the beginning of the current tokenClass Instance Variables:	classificationTable	<Array>		the default classification table for all charactersShared Variables:	PatternVariableCharacter	<Character>	the character that starts a pattern node"
"TestSuite","This is a Composite of Tests, either TestCases or other TestSuites. The top-level protocol is #run.  This creates aTestResult and sends	self run: aTestResult.then ensures that any TestResources made available during the run are reset.  These, and the dependencies protocol, are common between this and TestCase."
"RBExtractMethodTest",""
"MetacelloVersion",""
"MorphicEventHandler","I'm the class in charge of handling the subscriptions to events such as clicks or key presses.I'm a provisory solution while my clients are fixed and I can be replaced by announcements"
"FLMultiByteStreamStrategy","I am a strategy for MultiByteBinaryOrTextStream.."
"DummyEcryptorDecryptor","A DummyEcryptorDecryptor is  an encryptor that just do _NOT_ encrypt/decrypt at all :)"
"LongTestCaseTest",""
"W2KGroupBorder",""
"UsernamePassword","An UsernamePassword is just a simple wrapper"
"RBLongMethodsRule","See my #rationale.Long methods should often be split into several smaller ones. When you start to need an empty line to separate groups of statements, this is an indication that you should probably define a new method. 	Do not forget that methods are points of extension in an object-oriented language. It means that each time you define a method, a subclass may override and extend it while taking advantage and reusing the calling context of your method. This is the basis for the Hook and Template Design Pattern and central to good object-oriented design. So keep your methods short. Use the extract method refactoring, which even checks whether the method you are extracting already exists in the class. 	The defined number of statements can be edited in #longMethodSize. In the future such rule should hold state and not be based on method redefinition for its customization. "
"ObjectExplorerWrapper","Contributed by Bob Arning as part of the ObjectExplorer package."
"ExtendedNumberParserTest",""
"ASTCache","I am a simple cache for AST nodes corresponding to CompiledMethods in the image. The cache is emptied when the image is saved."
"ZnUnknownHttpVersion","ZnUnknownHttpVersion is signalled when an unknown/unsupported HTTP version is found.Part of Zinc HTTP Components. "
"RBAbstractClass",""
"StringHolder","I am a kind of Model that includes a piece of text.  In some cases, the text can be edited, and in some the text is a method.Categories 'code pane menu' and 'message list menu' are messages that may be called by my menus when the text is a method, and when some pane is a list of methods.  Other of my subclasses may ignore these two catagories altogether."
"RBPlatform",""
"RGNamespace","A namespace is a container that in addition to managing classes and methods, it also knows how to treat pools and global variables"
"StackLayout",""
"AJx64RipRegister","Virtual registers used for relative instruction pointer addressing in 64Bit modeIn IA-32 architecture and compatibility mode, addressing relative to the instruction pointer is available only with control-transfer instructions. In 64-bit mode, instruc- tions that use ModR/M addressing can use RIP-relative addressing. Without RIP-rela- tive addressing, all ModR/M instruction modes address memory relative to zero."
"FinderMethodNode","A FinderMethodNode is a node used by the FinderUI's tree representing a Method"
"MonitorDelay","This is a specialization of the class Delay that is used for the implementation of the class Monitor."
"PragmaAdded","A PragmaAdded is announced by a PragamColllector when a method defined with an acceptable pragma according to the PragmaCollector filter is added.Instance Variables"
"SimulationExceptionWrapper",""
"TextModel","I handle basic multi-line text. Try:	""self example"""
"GoferPush",""
"KMCategoryTest",""
"ClassTestCase","This class is intended for unit tests of individual classes and their metaclasses.It provides methods to determine the coverage of the unit tests.Subclasses are expected to re-implement #classesToBeTested and #selectorsToBeIgnored.They should also implement to confirm that all methods have been tested.#testCoverage	super testCoverage."
"NOCController","I am the entrance door to the ocompletion algorithm. I can resolve the queried sequences and retrieve a list of answers according to ocompletion algorithm based on the last accepted sequences from the user."
"InsetBorder","see BorderedMorph"
"FileHandleTest",""
"Notification","A Notification is an indication that something interesting has occurred.  If it is not handled, it will pass by without effect."
"MCCacheRepository",""
"NBExternalUnionFields",""
"ZnUtilsTests",""
"TransformWithLayoutMorphForMultipleEditors","A TransformWithLayoutMorphExpander is a layout which expand its submorph.I am designed for having only one submorph !I am really specific to the multi source code widget"
"WordArray","WordArrays store 32-bit unsigned Integer values."
"AJx64InstructionDescription",""
"StrikeFontFixer",""
"ToolDockingBarMorph","A non user-moveable docking bar that uses theme-based fill styles."
"MacOSResolver","I am an expert on Mac OS X filesystem conventions. I resolve origins according to these conventions."
"RxmTerminator","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--Instances of this class are used to terminate matcher's chains. When a match reaches this (an instance receives #matchAgainst: message), the match is considered to succeed. Instances also support building protocol of RxmLinks, with some restrictions."
"UserInterruptHandler","An UserInterruptHandler watches incoming input events and checks for the user interrupt key.If encountered it interrupts the current process and opens a notifier..Instance Variables	interruptKey:		<Object>interruptKey	- definition of the user interrupt key"
"DialogGroupAdder",""
"WeakArray","WeakArray is an array which holds only weakly on its elements. This means whenever an object is only referenced by instances of WeakArray it will be garbage collected."
"AJMem","I am memory operand used in asembly instructions.Example:	asm := AJx86Assembler new.	""create a simple memory operand with RAX as base""	asm RAX ptr.	""the same with a 8 byte offset""	asm RAX ptr + 8"
"SmallIdentityDictionary","I'm a SmallDictionary (this means faster than default one when dealing with limited number of items)but I check my key based on identity."
"TestLocalVariable","TestLocalVariable is a test class using in ProcessSpecificTest."
"TarArchiveMember",""
"FinderPlugin","I show the finder bar within Nautilus"
"KMTarget","I am the reification of the Keymap target.  I am the one that receives the actions."
"AbstractCategoryWidget","AbstractCategoryWidget is an abstraction describing a widget used to manage categories"
"TraitsResource",""
"HierarchicalUrl","A URL which has a hierarchical encoding.  For instance, http and ftp URLs are hierarchical."
"HttpsUrl",""
"ExampleBuilderMorph","Morph with an inset border by default and theme access. Overrides openModal: to allow multiple free example dialogs to be presented."
"IdentityMorphTreeMorph","An IdentityMorphTreeMorph is a MorphTreeMorph which always check for identity between items"
"QuestionDialogWindow","A yes/no/cancel message dialog. Cancel (escape & return) is the default."
"NBExternalArray","I am abstract class which provides a convenient interface to work with arrays which elements are values of some external (C) type.In order to use me with concrete element type, you must create a subclass of me and initialize element type properly.Subclassing using public subclass: - if you want to create a public subclass of me, then you should make sure that in class-side #initialize method,you add self-send #initElementType:  and specify the element type name to use. (And of course, initialize the class before attempting to create any instances).Subclassing with anonymous subclass:To create an anonymous subclass of me,  use #ofType: protocol, i.e.:floatArrayClass := NBExternalArray ofType: 'float'.Please note that separate #at: / #at:put: methods will be automatically added in each and every subclass. Never remove them, despite they looking identical to superclass methods!!!CAUTION!! Currently those methods do not perform any range checking for index. So, please make sure you using sane index values (1<= index <= size). Also, note, that class instance variables: elementType and elementSize, once initialized, is considered read-only. Changing them, once you created at least a single instance of your class may lead to funny consequences.Arrays in external memory vs object memory:My instances can work either with data held in object memory or in external memory. The difference is only at instantiation time: To create a new array in object memory, just use #new: protocol: 	myArray := floatArrayClass new:  10.   ""create a new array with 10 floats"".To allocate a new array in external memory, use #externalNew: protocol:   	myArray := floatArrayClass externalNew:  10.  	..	myArray free.  ""and sure thing, do not forget to free external memory after use"".To check whether array uses object memory or external memory , use #isExternal protocol.Also, you can convert any external address into NBExternalArray subclass instance, i.e. suppose some external function returns a pointer (instance of NBExternalAddress):	pointer := self callSomeFunc: 1. 	So, in order to access memory at given address as array of 100 elements of type 'int', you can use following: 	myArray := (NBExternalArray ofType: 'int') onAddress: pointer size: 100.	myArray at: 1.  ""read first element""	myArray at: 2 put: 50.  ""write second element"" 	myArray do: [:each | ...  ] ... etc			 (sure thing, in the above example, the ""NBExternalArray ofType: 'int' "" expression is just to demonstrate the intent. It should be replaced with some variable, which you initialize only once and use many times, because creating an anonymous subclass each time would be highly ineffective )Supported protocols:   	Since NBExternalTypeArray inherits from ArrayedCollection, you're free to use any protocols defined there as well as in its superclasses.	There's only few additions comparing to ArrayedCollection, like #isExternal and #free .Copying:	a #copy behavior is special for external arrays: A copy will always use object memory, even if original used external memory."
"JPEGHuffmanTable","I represent the table of values used to decode Huffman entropy-encoded bitstreams.  From the JFIF file header entropy values, I build a derived table of codes and values for faster decoding."
"Encoder","I encode names and literals into tree nodes with byte codes for the compiler. Byte codes for literals are not assigned until the tree-sizing pass of the compiler, because only then is it known which literals are actually needed. I also keep track of sourceCode ranges during parsing and code generation so I can provide an inverse map for the debugger."
"RBAbstractInstanceVariableTest",""
"IntegerInspector","I am IntegerInspector.I am an Inspector.I am a specialized Inspector for Integers.I add extra representations (hex, octal, binary) of the Integer object that I am inspecting."
"AJx86JumpInstruction",""
"VistaryThemeIcons","Vistary theme specific icons."
"MCStReader","I read Category/Classes/Methodes/.... definitions from Monticello source.st file format.See also MCStWriter.Example:|source|source := String streamContents: [:aStream| |writer|    writer := MCStWriter on: aStream.    writer writeDefinitions: {True asClassDefinition. False asClassDefinition}.].(MCStReader on: source readStream) definitions explore."
"TextFontReference","A TextFontReference encodes a font change applicable over a given range of text.  The font reference is absolute:  unlike a TextFontChange, it is independent of the textStyle governing display of this text."
"FLGlobalSendCluster","I clusterize objects that will be obtained on materialization via a message send to a global object. Explained with an example:Suppose we have a special instance of User that represents the admin user, and it is a unique instance in the image. In case the admin user is referenced in our graph, we want to treat that object as a global. We can do that in this way:User >> fuelAccept: aVisitor    ^self == User admin        ifTrue: [aVisitor visitGlobalSend: self]        ifFalse: [super fuelAccept: aVisitor]User >> fuelGlobalName    ^#UserUser >> fuelSelector    ^#adminSo what will happen is that during serialization, the admin user won't be completly serialized (with all its intance variables) but instead its global name and selector are stored. Then, at materialization time, Fuel will send the selector #admin to the class User, and use what that answers as the admin user of the materialized graph.We test this feature in FLGlobalSendSerializationTest."
"ContextCompilationTest",""
"WindowsStoreTest",""
"MetacelloCannotUpdateReleasedVersionError",""
"TextAction",""
"MultipleMethodsEditorButtonModel","A MultipleMethodsEditorButtonModel is a ButtonModel created for MultipleMethodsEditor"
"TraitDescription","I add a number of facilities (most defined by traits which are also used in ClassDescription):	Category organization for methods	The maintenance of a ChangeSet, and logging changes on a file	Most of the mechanism for fileOut.	Copying of methods to other traits/classes	Operators to create trait compositions"
"MethodWithCorrespondingTestAction","Action when the method has a corresponding test method"
"RBUndeclaredBinding",""
"PSMCMergePatchMorph",""
"RBRefactoringWarning","The receiver is a warning that usually requires the user to validate. This is used in situations where either the behavior of the program will not be strictly preserved or the change may have a wider impact than the user may think."
"WeakRegistry","This kind of WeakRegistry using a new VM feature,which allows a more robust finalization support.In contrast to old implementation, it doesn't spending linear time , checking what elements became garbage."
"TextMorphForFieldView","Single-line text field editor with DialogWindow key integration (return for default, escape for cancel) and keyboard focus navigation (tab/shift-tab)."
"GeneralScrollBar","Support for GeneralScrollPane."
"ScannerTest",""
"MCMockClassI",""
"MorphicEvent","This class represents the base for all events.Instance variables:	stamp	<Integer>	The millisecond clock time stamp (based on Time millisecondClock)	source	<Hand | nil>	If non-nil the hand that generated the event."
"PackageInfoTest",""
"RBRenameClassVariableChange",""
"MetacelloVersionMethodSection",""
"CompiledMethod","My instances are methods suitable for interpretation by the virtual machine.  This is the only class in the system whose instances intermix both indexable pointer fields and indexable integer fields.	The current format of a CompiledMethod is as follows:	header (4 bytes)	literals (4 bytes each)	bytecodes  (variable)	trailer (variable)The header is a 30-bit integer with the following format:(index 0)	9 bits:	main part of primitive number   (#primitive)(index 9)	8 bits:	number of literals (#numLiterals)(index 17)	1 bit:	whether a large frame size is needed (#frameSize)(index 18)	6 bits:	number of temporary variables (#numTemps)(index 24)	4 bits:	number of arguments to the method (#numArgs)(index 28)	1 bit:	high-bit of primitive number (#primitive)(index 29)	1 bit:	flag bit, ignored by the VM  (#flag)The trailer has two variant formats.  In the first variant, the last byte is at least 252 and the last four bytes represent a source pointer into one of the sources files (see #sourcePointer).  In the second variant, the last byte is less than 252, and the last several bytes are a compressed version of the names of the method's temporary variables.  The number of bytes used for this purpose is the value of the last byte in the method."
"GoferFetch",""
"AJx64JumpInstruction",""
"LIFOQueue","This is a thread-safe LIFO (last-in-first-out) queue (also known as stack) implementation, based on atomic operations."
"NonInteractiveTranscript","I am NonInteractiveTranscript, a replacement for Transcript, writing everything to a file or stdout.This is useful when running headless.	NonInteractiveTranscript file install.	To connect to the output stream of the virtual machine process choose stdout.	NonInteractiveTranscript stdout install."
"FLBufferedWriteStream","FLBufferedWriteStream is a buffered write stream we use for Fuel serialization. Instead of directly using the stream provided to FLSerializer at creation time by the user, we create an instance of FLBufferedWriteStream for that stream.MultiByteFileStream has no real buffer and goes to disk too frequently. With FLBufferedWriteStream we keep stuff in a cache and only go to disk when this is full.The way of using it is jut FLBufferedWriteStream on: aWriteStream. For example:FLBufferedWriteStream on: (FileDirectory default forceNewFileNamed:  'TestFile') binaryWith the message #sizeBuffer: you can set the size of the buffer.Make sure to always send #flush or #close when you're done, otherwise the last buffer might not yet have been written."
"WindowExpanded","This announcement is emitted when a window leaves a collapsed mode. This happens when you press on a window icon in the taskbar."
"SHPreferences",""
"UTF8TextConverter","Text converter for UTF-8.  Since the BOM is used to distinguish the MacRoman code and UTF-8 code, BOM is written for UTF-8 by #writeBOMOn: which is called by client."
"FLObjectCluster","I implement a generic way of serializing and materializing an object, for those that do not need more special way of doing it."
"JobProgress","A JobProgress is a notification to announce job progress. For example[:job | job title: 'Let us get started'.	1to: 10 do: 		[:each | 			JobProgress progress: 0.1* each ; title: 'Youpi ', each printString .			(Delay forMilliseconds: 100) wait. 			] ]  asJob run"
"RadioButtonGroupExample","A RadioButtonGroupExample is an simple example about how to use RadioButtons and RadioGroup"
"MailtoUrl","a URL specifying a mailing address; activating it triggers a mail-sender to start up, if one is present."
"MCMergingTest",""
"MetacelloConfigTemplate","Copy me to create a new configuration or edit and evaluate the following doits.        ""Create configuration class and initial baseline method""        MetacelloToolBox                 createBaseline: '1.0-baseline'                for: 'MyProject'                repository: 'http://www.example.com/MyProjectRepository'                requiredProjects: #('Gofer')                packages: #('MyProject-Core' 'MyProject-Tests')                dependencies:                        {('MyProject-Core' -> #('Gofer')).                         ('MyProject-Tests' -> #('MyProject-Core'))}                groups:                        {('default' -> #('Core')).                        ('Core' -> #('MyProject-Core')).                        ('Tests' -> #('MyProject-Tests'))}.	   ""create initial development method from the baseline""         MetacelloToolBox               createDevelopment: '1.0'               for: 'MyProject'                importFromBaseline: '1.0-baseline'                description: 'initial version'."
"ZipCrcTests",""
"RGObject","RGObject is the root class of the Ring meta-model.A ring object can be annotated and knows its environment"
"RGTraitDefinitionTest",""
"DeleteVisitorTest",""
"MorphFrameGhost","I represents the windows frame for window dragging or resizing when fast dragging or fast resizing is wanted (when  UITheme currentSettings fastDragging is set to true).For window resizing, I'm created by a corner or an edge grip when the mouse is clicked on it (see SystemWindow>>doFastWindowReframe:). For window dragging, I'm created when the top window bar is clicked (see SystemWindow>>doFastFrameDrag:).  I'm always created with the same bounds as the target window bounds. The mouse focus is given to me and my bounds are changed while the hand is moving. On mouse up, the window bounds is set to my own bounds and then I'm deleted.Instance Variables	location:		<Symbol>	startGap:		<Point>	target:		<SystemWindow>location	- The symbol representing the corner or the edge (#topLeft, #top, #topRight .... or #left). I'm set to nil for window draggingstartGap	- For window dragging, keep track of the distance between the window top bar first click location and the window positiontarget	- The window to be resized or dragged"
"RBValueToken","RBValueToken is the abstract superclass of all tokens that have additional information attached. For example, the BinarySelector token holds onto the actual character (e.g. $+).Instance Variables:	value	<String>	The value of this token"
"Model","Provides a superclass for classes that function as models.  The only behavior provided is fast dependents maintenance, which bypasses the generic DependentsFields mechanism.  1/23/96 sw"
"RBModifiesCollectionRule",""
"FreeTypeExternalMemory",""
"NBWin32Heap",""
"IdentityDictionaryTest",""
"SmallIntegerTest","I provide a test suite for SmallInteger values. Examine my tests to see how SmallIntegers should behave, and see how to use them."
"FilePackage",""
"ProfStef","A ProfStef is the Smalltalk teacher. To start the tutorial, evaluate:ProfStef go.To go to the next lesson evaluate:ProfStef next.To execute your own tutorial:ProfStef goOn: MyOwnTutorialTo see a table of contents with all defined tutorials:ProfStef contents"
"ProgressBarMorph","Instances of this morph get used by SystemProgressMorph or a JobProgressBar to display a bar (i.e., the rectangular part of a progress bar).Here is an example of how to use it. | p |p := ProgressBarMorph from: 0 to: 200.p extent: 200@20.p openInWorld.[	(1 to: 200) do: [ :i | p value: i.  (Delay forMilliseconds: 10) wait ].	p delete ] fork| p |p := ProgressBarMorph from: 0 to: 200.p extent: 600@7.p openInWorld.[	(1 to: 200) do: [ :i | p value: i.  (Delay forMilliseconds: 5) wait ].	p delete ] fork"
"AbstractPackageSelectedPlugin","AbstractKeyPressedPlugin is an abstraction of plugin which react when a package is selected"
"IfNotNilTests",""
"MetacelloSkipDirtyPackageLoad",""
"OkToolbar","An OkCancelToolbar is a model for a basic Ok toolbar"
"VersionMethodReferenceConverter",""
"MCSubDirectoryRepositoryTest","I am not a subclass of MCRepositoryTest because my purpose was to show that a bug had been fixed and my author didn't feel like implementing all the reuirements of MCRepositoryTests"
"TabClassical","A TabClassical is an example to learn how to use tabs ;)"
"MetacelloLoaderPolicy",""
"AnnouncementLogger","Use me to debug and log to the transcript annoncements.AnnouncementLogger new subscribeTo: SystemAnnouncer announcerTo unsubscribeAnnouncementLogger  allInstancesDo: [:each | SystemAnnouncer announcer unsubscribe: each ]"
"RxsContextCondition","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--One of a few special nodes more often representing special state of the match rather than a predicate on a character.  The ugly exception is the #any condition which *is* a predicate on a character.Instance variables:	kind		<Selector>"
"BooleanTest","This is the unit test for the class Boolean. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"RPackageMCSynchronisationTest","I had some problems using the 'ensure:' method. There was some conflicts with the organizer used for the test when trying to clean the classes, categories and packages generated for the test. There is something I don't get with this method. Therefore I choosed to clean by default all possible generated classes, categories and packages after each test using the tearDown method.For now, all that was in the 'ensure:' methods has been commented.Look for example at:    testAddMethodInClassicCategoryAddMethodToTheParentPackageOfItsClassand try to uncomment it"
"DigitalSignatureAlgorithm","This class implements the Digital Signature Algorithm (DSA) of the U.S. government's ""Digital Signature Standard"" (DSS). The DSA algorithm was proposed in 1991 and became a standard in May 1994. The official description is available as a Federal Information Processing Standards Publication (FIPS PUB 186, May 19, 1994). A companion standard, the Secure Hash Standard, or SHS (FIPS PUB 180-1, April 17, 1995), describes a 160-bit message digest algorithm known as the Secure Hash Algorithm (SHA). This message digest is used to compute the document signature.Here's how to use it:  1. The ""signer"" creates a pair of keys. One of these must be kept private. The other may be freely distributed. For example, it could be built into the signature checking code of an application.  2. When the signer wishes to sign a packet of data (a ""message"") , he uses the secure hash algorithm to create a 160-bit message digest (hash) which is used as the input to DSA. The result of this is a pair of large numbers called a ""signature"" that is attached to the original message.  3. When someone receives a signed message purported to have come from the signer, they compute the 160-bit hash of the message and pass that, along with the message signature and the signer's public key, to the signature verification algorithm. If the signature checks, then it is virtually guaranteed that the message originated from someone who had the signer's private key. That is, the message is not a forgery and has not been modified since it was signed. For example, if the message contains a program, and the recipient trusts the signer, then the recipient can run the program with the assurance that it won't do anything harmful. (At least, not intentionally. A digital signature is no guarantee against bugs! :->)The signer must keep the private key secure, since anyone who has the private key can forge the signer's signature on any message they like. As long as the secret key is not stolen, cryptographers believe it to be virtually impossible either to forge a signature, to find a message that matches an existing sigature, or to discover the signer's private key by analyzing message signatures. Knowing the public key (which, for example, could be recovered from an application that had it built in), does not weaken the security at all.An excellent reference work on digital signatures and cryptography in general is:  Schneier, Bruce  ""Applied Cryptography: Protocols, Algorithms, and Source Code in C""  John Wiley and Sons, 1996.I used this book as a guide to implementing many of the numerical algorithms required by DSA.Patents and Export Restrictions:Many digital signature technologies are patented. DSA is also patented, but the patent is owned by the U.S. government which has made DSA available royalty-free. There is a claim that the government patent infringes on an earlier patent by Schnorr, but the government is requiring the use of DSA, so they apparently believe this claim is not strong enough to be a serious threat to their own patent.Most cryptography technology, including digital signature technology, requires an export license for it to be distributed outside the U.S. Recent legislation may have relaxed the export license requirements, but it would be prudent to check the current regulations before exporting this code."
"CompiledMethodTrailerTest",""
"NBFloatType","Abstract class for floating-point native types"
"DictionaryInspector","I provide a custom inspector for classes of type Dictionary.These customizations are tools to interactively manipulate the Dictionary I'm inspecting and they are accessed in the context menu of the currently selected association.The customizations that I provide are as follows:inspect -> Create and schedule an Inspector on my currently selected associationcopy name -> copy the name of my currently selected association so that it can be pasted somewhere elsereferences -> Create a browser on all references to the association of the current selectionobjects pointing to this value -> Open a list inspector on all the objects that point to the value of the selected instance variable, if any.senders of this key -> Create a browser on all senders of the selected keyrefresh viewadd keyrename keyremovebasic inspect -> Bring up a non-special inspector"
"MergeDiffMorph",""
"RBExtractToTemporaryRefactoring",""
"RBChangeMethodNameRefactoring",""
"RBRemoveMethodChange",""
"BasicClassOrganizer",""
"RBVariableReferencedOnceRule","See my #rationale."
"FreeTypeFontFamily",""
"RBPushDownInstanceVariableRefactoring",""
"SUnitTutorial","This is a custom help book providing a tutorial for the SUnit framework."
"ChronologyConstants","ChronologyConstants is a SharedPool for the constants used by the Kernel-Chronology classes."
"TextDoIt",""
"RBValueNode","RBValueNode is an abstract class that represents a node that returns some value.Subclasses must implement the following messages:	accessing		startWithoutParentheses		stopWithoutParentheses	testing		needsParenthesisInstance Variables:	parentheses	<SequenceableCollection of: Inteval>	the positions of the parethesis around this node. We need a collection of intervals for stupid code such as ""((3 + 4))"" that has multiple parethesis around the same expression."
"MCAddition","A MCAddition represents the operation to add an entity to a snapshot. "
"MCWriter",""
"MCWorkingAncestry","The interim record of ancestry for a working copy, gets merged version added to the ancestry, and is used to create the VersionInfo when the working copy becomes a version. "
"NBExternalObject","I representing an external object of one kind, provided by some external library/function.My instance holds a handle, which is used to identify the external object when i am passed as an argument, or when i'm used as a return type in function signature.A typical usage of me is to create a subclass, and then use that subclass name directly in function signatures:NBExternalObject subclass: #MyExternalObjectnewObj := MyExternalObject newObject.MyExternalObject class>>newObject  <primitive: #primitiveNativeCall ...> ^ self nbCall: #(MyExternalObject someExternalFunction() )here, assume that someExternalFunction() returns some handle (or pointer) to some opaque external structure. By putting NBExternalObject subclass (MyExternalObject) as a return typeinto the function signature, we are telling the code generator to automatically convert the return value into an instance of a given class and initialize its handle to the value returned by the function.When used as argument type, the value, which is used to pass to the external function is value held in my handle instance variable:MyExternalObject>>compareWith: anotherExternalObject  <primitive: #primitiveNativeCall ...>   ^ self nbCall: #( void compare ( self , MyExternalObject anotherExternalObject))The main advantage of using NBExternalObject subclass as a type name for arguments is that it provides type safety by checking the incoming argument, that itis an instance of your class, and nothing else. If not, the primitive will fail without calling the external function."
"RBCascadeNode","RBCascadeNode is an AST node for cascaded messages (e.g., ""self print1 ; print2"").Instance Variables:	messages	<SequenceableCollection of: RBMessageNode>	the messages 	semicolons	<SequenceableCollection of: Integer>	positions of the ; between messages"
"Archive","This is the abstract superclass for file archives. Archives can be read from or written to files, and contain members that represent files and directories."
"MCNoChangesException",""
"SpecLayoutAddColumn","A SpecLayoutAddColumn is an action representing the addition of a column to a layout"
"WindowActivated","Emitted when navigating between windows. "
"ClassCommentDeclaration","I represent the declaration of a class comment in a file.  My contents are the class comment to import, and the comment reader is the object who knows the class where to put the class comment.Sending me the message #import makes me install the comment into the class."
"ReadStreamTest","I am an SUnit test for ReadStream.I have no test fixtures."
"FLPerson","FLPerson is a class just to be able to change the hash of an object and try to test problems with hash."
"MetacelloRepositorySpec",""
"CompiledMethodWithNode",""
"TextMorph","TextMorphs support display of text with emphasis.  They also support reasonable text-editing capabilities, as well as embedded hot links, and the ability to embed submorphs in the text.Late in life, TextMorph was made a subclass of BorderedMorph to provide border and background color if desired.  In order to keep things compatible, protocols have been redirected so that color (preferably textColor) relates to the text, and backgroundColor relates to the inner fill color.Text display is clipped to the innerBounds of the rectangle, and text composition is normally performed within a rectangle which is innerBounds inset by the margins parameter.If text has been embedded in another object, one can elect to fill the owner's shape, in which case the text will be laid out in the shape of the owner's shadow image (including any submorphs other than the text).  One can also elect to have the text avoid occlusions, in which case it will avoid the bounds of any sibling morphs that appear in front of it.  It may be necessary to update bounds in order for the text runaround to notice the presence of a new occluding shape.The optional autoFitContents property enables the following feature:  if the text contents changes, then the bounds of the morph will be adjusted to fit the minimum rectangle that encloses the text (plus any margins specified).  Similarly, any attempt to change the size of the morph will be resisted if this parameter is set.  Except...If the wrapFlag parameter is true, then text will be wrapped at word boundaries based on the composition width (innerBounds insetBy: margins) width.  Thus an attempt to resize the morph in autofit mode, if it changes the width, will cause the text to be recomposed with the new width, and then the bounds will be reset to the minimum enclosing rectangle.  Similarly, if the text contents are changed with the wrapFlag set to true, word wrap will be performed based on the current compostion width, after which the bounds will be set (or not), based on the autoFitcontents property.Note that fonts can only be applied to the TextMorph as a whole.  While you can change the size, color, and emphasis of a subsection of the text and have it apply to only that subsection, changing the font changes the font for the entire contents of the TextMorph. Still a TextMorph can be composed of several texts of different fonts| font1 font2 t1 t2 tMorph|tMorph := TextMorph new.font1 := (TextFontReference toFont: (StrikeFont familyName: 'Atlanta' size: 22)).font2 := (TextFontReference toFont: (StrikeFont familyName: 'Atlanta' size: 11)).t1 := 'this is font1' asText addAttribute: font1.t2 := ' and this is font2' asText addAttribute: font2.tMorph contents: (t1,t2).tMorph openInHand.Yet to do:Make a comprehensive control for the eyedropper, with border width and color, inner color and text color, and margin widths."
"MessageNode","I represent a receiver and its message.	Precedence codes:	1 unary	2 binary	3 keyword	4 other	If special>0, I compile special code in-line instead of sending messages with literal methods as remotely copied contexts."
"DualChangeSorterApplication","A DualChangeSorterApplication is a dual change sorter based on spec.DualChangeSorter shares the model between its two subcomponents (ChangeSorterApplication).ChangeSorterModel defines the application logic."
"WorkingCopyToolBar","WorkingCopyToolBar new openWithSpec"
"AnnouncementSpy","I am a tool to inspect live events .If you want to inspect events generated by an announcer without a priori knowledge about the kind and frequency of events, you can always open a spy on an announcer to track its events.  announcer open or  AnnouncementSpy openOn: announcer This opens a window which displays the sequence of events emitted by the announcer (after the spy has been launched). You can open/inspect each event individually using the contextual menu. you can also clear the list view. Try it on World announcer open (in Pharo 1.1 or later), then add and close windows to see events generated."
"DateAndTimeUnixEpochTest",""
"MCMcmWriter",""
"FileServices",""
"InputEventHandler","An InputEventHandler is the abstract superclass for all input event handlers.Subclasses need to implement handleEvent:.Instance Variables	eventFetcher:		<InputEventFetcher>eventFetcher	- the event fetcher I'm registered with and receiving my events from."
"Bitmap","My instances provide contiguous storage of bits, primarily to hold the graphical data of Forms. Forms and their subclasses provide the additional structural information as to how the bits should be interpreted in two dimensions."
"RBMoveVariableDefinitionRefactoring",""
"RBUnconditionalRecursionRule",""
"RGNamespaceTest",""
"WeakActionSequence",""
"DateAndTimeLeapTest","I represent one of several Sunit test Cases intentended to provide complete coverage for the Chronology set of classes as part of the external testing. tlk.My fixtures are:aDateAndTime = February 29, 2004 1:33 PM with offset: 2 hoursaDuration = 15 days, 14 hours, 13 minutes, 12 seconds and 11 nano seconds.aTimeZone =  Grenwhich Meridian (local offset = 0 hours) "
"UnhandledError",""
"KMCompleteMatch",""
"Latin2Environment","This class provides the support for the languages in 'Latin-2' category.  Although we could have different language environments for different languages in the category, so far nobody seriously needed it.  I (Yoshiki) don't have good knowledge in these language, so when Pavel Krivanek volunteered to implement the detail, it was a good test to see how flexible my m17n framework was.  There are a few glitches, but with several email conversations over a few days, we managed to make it work relatively painlessly.  I thought this went well.  There seem that some source of headache, as Windows doesn't exactly use Latin-2 encoded characters, but a little modified version called 'code page 1250'.  Similar to Japanese support, the encode interpreters are swapped based on the type of platform it is running on."
"ZdcSecureSocketStreamTests","ZdcSecureSocketStreamTests tests ZdcSecureSocketStream "
"CPUWatcher","CPUWatcher implements a simple runaway process monitoring toolthat will suspend a process that is taking up too much of Pharo'stime and allow user interaction. By default it watches for a Process thatis taking more than 80% of the time; this threshold can be changed.CPUWatcher can also be used to show cpu percentages for each process from within the ProcessBrowser.	CPUWatcher startMonitoring.	""process period 20 seconds, sample rate 100 msec""	CPUWatcher current monitorProcessPeriod: 10 sampleRate: 20.	CPUWatcher current threshold: 0.5.	""change from 80% to 50%""	CPUWatcher stopMonitoring."
"Trait","Each trait in the system is represented as an instance of me. Like Class, I concretize my superclass by providing instance variables for the name and the environment. Since traits do not define variables, I not provide facilities for pool variables. However, I declare an instance variable to hold the associated classtrait, which is an instance of the class ClassTrait. "
"HistoryIterator","A HistoryIterator holds an UndoRedoGroup in order to store an history of commands with the possibility of undoing and redoing. The iterator cursor is represented by the index inst var. Index always contains the position of the command that can be currently undone. So, undo decrease index and redo increase index. When a new record is stored, then, index contains the newly added record position.See HistoryIteratorTest for examples.Instance Variables	index:		<Integer>	maxSize:		<Integer>	plugged:		<Boolean>	recorder:		<UndoRedoGroup>index	- the iterator cursormaxSize	- the maximum number of records that can be added in the root group.plugged	- if false, then adding of command is not allowed. Useful to prevent bad history recording recurssions (record while undoing or redoing).recorder	- The root of the history tree which records undo/redo commands"
"GrowlMorph","A GrowlMorph is a little Morph to announce event happening. Freely inspired from the MIT Snarl developed by  Tony Garnock-Jones. GrowlMorph new openInWorld10 timesRepeat: [	(GrowlMorph openWithLabel: 'The time' contents: TimeStamp now)""		vanishDelay: 1000;		resetVanishTimer"".	World doOneCycle ](GrowlMorph openWithLabel: 'The time' contents: TimeStamp now) 	actionBlock: [Transcript open]"
"ShortRunArray","This class is run-length encoded representation of short integer (e.g., 16bit signed integer values)"
"RGCommentDefinitionTest",""
"MockExceptionWithPassAction",""
"RegexAPIDocumentation","This is a custom help book providing the API documentation for the regular expression framework."
"FLClassWithRecursiveSubstitution",""
"SHTextStyler","I am an Abstract class.Subclasses of me can create formatted, coloured, and styled copies of Text that is given to them.They may perform their styling asynchronously, in a background process which I create and manage.My public interface is...	view: aViewOrMorph - set the view that will receive notifications when styling has completed.		format: aText - modifies aText's string	style: aText - modifies the TextAttributes of aText, but does not change the string, then sends #stylerStyled: to the view.	styleInBackgroundProcess: aText - performs style: in a background process, then sends #stylerStylednBackground: to the view.	styledTextFor: aText - answers a formatted and styled copy of aText	unstyledTextFrom: aText - answers a copy of aText with all TextAttributes removedSubclasses of me should re-implement...	privateFormat: aText - answer a formatted version of aText; the String may be changed	privateStyle: aText - modify the TextAttributes of aText; but do not change the String			"
"SpecInterpreterTest","A SpecInterpreterTest is a test class for testing the behavior of SpecInterpreter"
"NBExternalHandle","Usually, my instances representing an opaque object handle returned by external function. There's little what we can do with it, except from passing as argument to another function(s).I hold a byte array of a pointer size (typicaly 4 or 8 bytes). You can set the raw handle value with #value: and read it with #value.Note, do not subclass from me directly. If you want to represent some opaque C  data structure (handle, stucture, pointer to structure etc),subclass from NBExternalObject instead. Otherwise, if you insist, override #asNBExternalType: method on class side in own subclass to provide own marshalling for instances of your subclass(es) (but it makes even less sense since once you define own #asNBExternalType:, you free to use any base class for your subclasses,unless of course you want to reuse some of my methods)"
"MetacelloVersionConstructor",""
"NECOverrideModelTest",""
"FontChooser","I'm an object holding information to choose a font from a list of fonts."
"MCTraitParser","A MCTraitParser extracts an MCTraitDefinition from the source."
"MetacelloGoferLoad",""
"ZnDispatcherDelegateTest",""
"MCRepository",""
"RBTemporaryVariableNamesSpellingRule","See #name for the area where I check spelling."
"FLMapper","The purpose of my hierarchy is to map objects with clusters."
"InteractiveResolver","I resolve origins by consulting the user. I maintain a cache of the user's responses."
"ProfStefTestGoOnMockTutorial",""
"TextMorphForEditorView","Used by PluggableTextEditorMorph to specify a plain TextEditor for the editor"
"NewValueHolder","A NewValueHolder is a new implementation of ValueHolder based on Announcements"
"RBClass",""
"ErrorNonInteractive","This error thrown when image runs in non-interactive mode (no user intervention possible nor expected),but application trying to use tools which require user's intervention.For example, in headless image application trying to query a user name, or dialog to confirm with proceeding some action."
"CharacterSetTest","CharacterSetTest holds tests for CharacterSet"
"MessageListInspectableNode",""
"MorphOpened","I'm an announcement raised when a morph is opened.  Subscribe to me when you want to do things after the morph is opened.Take into account that when a morph is opened, all it's children also get opened and they raise a similar announcement."
"Parser","I parse Smalltalk syntax and create a MethodNode that is the root of the parse tree. I look one token ahead."
"NBUInt16","I responsible for marshalling 		unsigned 16-bit integer type values."
"GroupboxMorph","Groupbox with title with a vertical layout. Appears in a lighter colour than the owner's pane colour."
"RBCreateAccessorsForVariableRefactoring",""
"RBBasicLintRule","I am a rule that has a result. It is not clear why it is not merged with its superclass but this is ok too."
"ZnStaticFileServerDelegateTests",""
"HandMorph","The cursor may be thought of as the HandMorph.  The hand's submorphs hold anything being carried by dragging.  There is some minimal support for multiple hands in the same world."
"DirectoryExists","I am raised on an attempt to create a directory that already exists."
"RPackageTestCase",""
"SystemVersionTest","I am an sunit test for SystemVersion.  Originally created to test SqueakMapSystemVersionFix change set.I have no test fixtures."
"SortedCollectionTest",""
"ZnMimeType","I am ZnMimeType.Mime types are an element used in describing resources, more specifically their format.Here are some examples MIME types:	text/plain	text/html	text/plain;charset=utf-8	image/png	text/* A mime type has a main/sub form with optional parameters. For more information: http://en.wikipedia.org/wiki/MIME_typeI know whether I am binary or not and know my charset when applicable.My class side offers access to some common constants.Note that for text types we default to UTF-8 encoding.Examples:	ZnMimeType textPlain = 'text/plain' asZnMimeType.	ZnMimeType textPlain charSet.	ZnMimeType textHtml matches: ZnMimeType text.	ZnMimeType default matches: ZnMimeType any.	ZnMimeType imagePng isBinary.	ZnMimeType forFilenameExtension: 'html'.I started life as a copy of WAMineType.Part of Zinc HTTP Components."
"ZnBase64Encoder","I am ZnBase64Encoder.Base64 encoding is a technique to encode binary data as a string of characters that can be safely transported over various protocols. Basically, every 3 bytes are encoded using 4 characters from an alphabet of 64. Each encoded character represents 6 bits.The most commonly used alphabet is 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'. One or two equal signs (= or ==) are used for padding.The encoded data can optionally be broken into lines. Characters not part of the alphabet are considered as white space and are ignored.My #encode: method works from ByteArray to String, while my #decode: method works from String to ByteArray.Note that to encode a String as Base64, you first have to encode the characters as bytes using a character encoder.See also http://en.wikipedia.org/wiki/Base64Part of Zinc HTTP Components."
"IconListSpec","An IconListSpec is a spec use to describe a list with icons"
"SpecSetter",""
"GroupsAlreadyExists","A GroupsAlreadyExists is fired when a set of groups already existsfirstGroup points to a correct group which was part of the set"
"MCSnapshot","MCSnapshot represents a list of entities compared to a given base entities. It holds a list of definitions (instances of MCDefinition subclasses). It can install these entities or update a package."
"NBExternalHeapManager","This is a simplistic implementation of external heap manager.Using it , you can allocate or free external memory.- should not throw any exceptions.If allocation fails, should simply answer nil/0 "
"ItemNode",""
"ZnDispatcherDelegate","I am ZnDispatcherDelegate, doing a straight-forward dispatching to mapped URLs.ZnDispatcherDelegate API:(server := ZnServer startDefaultOn: 9090)	delegate: (ZnDispatcherDelegate new 		map: '/hello' to: [ :request :response | response entity: (ZnEntity html: '<h1>hello server</h1>') ];		map: '/counter' to: [ :request :response | counterApplication handleRequest: request response: response ])."
"MetacelloLoadData",""
"DropFilesEvent",""
"Class","I add a number of facilities to those in ClassDescription:	A set of all my subclasses (defined in ClassDescription, but only used here and below)	A name by which I can be found in a SystemDictionary	A classPool for class variables shared between this class and its metaclass	A list of sharedPools which probably should be supplanted by some better mechanism.My instances describe the representation and behavior of objects. I add more comprehensive programming support facilities to the basic attributes of Behavior and the descriptive facilities of ClassDescription.The slot 'subclasses' is a redundant structure.  It is never used during execution, but is used by the development system to simplify or speed certain operations.  "
"HDCoverageReport",""
"AbstractApiSetter",""
"FLMethodNotFound","I represent an error produced during materialization when a serialized method in a class or trait name doesn't exist (at Smalltalk globals)."
"LayoutFrameTest",""
"UnixPlatform",""
"RBInlineMethodFromComponentTest",""
"NBNativeFunction",""
"EncryptedTextMorphForFieldView","An EncryptedTextMorphForFieldView is a view displaying stars instead of character (for password by example)"
"MCRemovalPreambleDefinition",""
"HDTestReport",""
"ChangesLog","I represent the changes file and give access to him.  If you want to log a change, look at my #logChange: method.I have a default instance that is hearing SystemAnnouncements and logging the change logs in there.But you can have your own instance and log whatever you want."
"SpecInterpreter","A SpecInterpreter is a interpreter for spec presenters"
"SimpleTestResource",""
"ZipConstants","This class defines magic numbers taken from RFC1951 [1b], and also possibly RFC1950 [1a] & RFC1952 [1c]. It presets some dictionary structures as described at [1a] 8.1. A class can import these bindings as 'class variables' by including the following in its class definition:    poolDictionaries: 'ZipFileConstants' Following are source references to these constants contained within several class side initialization methods. (These might be better spread through out those methods as time permits) initializeDeflateConstants     WindowSize [2e]""w_size"", [2a]""windowBits is the base two logarithm of windowSize where default windowBits=15""     WindowMask [2e]""w_mask""     MaxDistance [2e]""MAX_DIST""     MinMatch [2c]     MaxMatch [2c]     HashBits [2e]""hash_bits""     HashMask [2e]""hash_mask""     HashShift [2e]""hash_shift"" initializeDistanceCodes     BaseDistance [2f]     DistanceCodes [2f] initializeExtraBits     ExtraLengthBits [1]3.2.5, [2b]     ExtraDistanceBits [1]3.2.5, [2b]     ExtraBitLengthBits [2b]     BitLengthOrder [1]3.2.7, [2b] initializeFixedTrees     [1]3.2.6 initializeWriteStreamConstants     MaxBits [2d]     MaxBitLengthBits [2b]     EndBlock [2b]     StoredBlock [2c]     FixedBlock [2c]     DynamicBlock [2c] [1]3.2.3""BTYPE""     NumLiterals     MaxLengthCodes [2e]     MaxDistCodes [2e]     MaxBitLengthCodes [2e]     MaxLiteralCodes     Repeat3To6 [2b]     Repeat3To10 [2b]     Repeat11To138 [2b] [1a]  ""ZLIB Compressed Data Format Specification version 3.3"" http://www.ietf.org/rfc/rfc1950.txt[1b] ""DEFLATE Compressed Data Format Specification version 1.3"" http://www.ietf.org/rfc/rfc1951.txt[1c] ""GZIP file format specification version 4.3"" http://www.ietf.org/rfc/rfc1952.txt[2] ZLIB Source Code http://zlib.net/zlib-1.2.5.tar.gz[2a] zlib.h [2b] trees.c [2c] zutil.h [2d] inftrees.c [2e] deflate.h [2f] trees.h "
"TutorialPlayerTestWithMockTutorial",""
"NBObjectFormat32","- an object format for 32-bit images"
"RBSpecialBinding",""
"RGDefinition",""
"MIMEDocument","a MIME object, along with its type and the URL it was found at (if any)"
"NBBasicExamples","I am a collection on examples on how to use the NativeBoost infrastructure. Check my class-side methods for more details."
"RBRenameClassVariableRefactoring",""
"RBMethodModifierFinalRule","See my #rationale."
"MorphTreeResizerMorph",""
"GoferApiTest",""
"FLNegative32SmallIntegerCluster",""
"RBUnpackagedCodeRule","See my #rationale."
"MorphicAlarm","I represent a message to be scheduled by the WorldState.For example, you can see me in action with the following example which print 'alarm test' on Transcript one second after evaluating the code:Transcript open.MorphicUIManager currentWorld        addAlarm: #show:         withArguments: #('alarm test')         for: Transcript         at: (Time millisecondClockValue + 1000).* Note *Compared to doing:[(Delay forMilliseconds: 1000) wait. Transcript show: 'alarm test'] forkAt: Processor activeProcess priority +1.the alarm system has several distinctions:- Runs with the step refresh rate resolution.- Alarms only run for the active world. (Unless a non-standard scheduler is in use)- Alarms with the same scheduled time are guaranteed to be executed in the order they were added"
"NOCModel","I keep the state of the ocompletion algorithm. See comments of my parents for details. "
"ClassOrganizer","I represent method categorization information for classes.  The handling of class comments has gone through a tortuous evolution.   Grandfathered class comments (before late aug 98) have no time stamps, and historically, fileouts of class comments always substituted the timestamp reflecting the author and date/time at the moment of fileout; and historically any timestamps in a filed out class comment were dropped on the floor, with the author & time prevailing at the moment of filein being substituted.   Such grandfathered comments now go out on fileouts with '<historical>' timestamp; class comments created after the 8/98 changes will have their correct timestamps preserved, though there is not yet a decent ui for reading those stamps other than filing out and looking at the file; nor is there yet any ui for browsing and recovering past versions of such comments.  Everything in good time!"
"PragmaSetting","A PragmaSetting is a holder for a setting. A setting is declared in a class method which contains a pragma (as examples, <menu> or <setting>). Settings can be collected on the fly by a PragmaCollector and browsed by a SettingBrowser. Settings are organized in trees.Instance Variables	allowedInStyle:		<Object>	description:		<Object>	dialog:		<Object>	icon:		<Object>	label:		<Object>	name:		<Object>	order:		<Object>	ordering:		<Object>	precondition:		<Object>	target:		<Object>	targetSelector:		<Object>allowedInStyle	- xxxxxdescription	- xxxxxdialog	- xxxxxicon	- xxxxxlabel	- xxxxxname	- xxxxxorder	- xxxxxordering	- xxxxxprecondition	- xxxxxtarget	- xxxxxtargetSelector	- xxxxx"
"FreeTypeCacheEntry",""
"InlineTextDiffBuilder",""
"RBRefactoringChangeTests",""
"SourceFileArray","This is a variation on StandardSourceFileArray that provides a larger maximum changes file size.The available address space for source pointers in a traditional CompiledMethod is 16r1000000 through 16r4FFFFFF. StandardSourceFileArray maps positions in the sources file to address range 16r1000000 through 16r1FFFFFF and 16r3000000 through 16r3FFFFFF, and positions in the changes file to address range 16r2000000 through 16r2FFFFFF and 16r4000000 through 16r4FFFFFF. This permits a maximum file size of 16r2000000 (32MB) for both the sources file and the changes file. This implementation extends the source pointer address space using bit 25 of the source pointer to identify the external sources and changes files, with the remaining high order bits treated as address extension. This limits the number of external file references to two (the traditional sources and changes files). If additional external file references are needed in the future, some higher order bits in the source pointer address space should be allocated for that purpose.The use of bit 25 of the source pointer for file references permits backward compatibility with StandardSourceFileArray, with essentially unlimited address space expansion for the sources and changes files."
"ZnApplicationFormUrlEncodedEntity","I am ZnApplicationFormUrlEncodedEntity, a concrete HTTP Entity holding a set of fields (key value pairs) that is form URL encoded.I am a ZnEntity.Part of Zinc HTTP Components."
"RBBadMessageRule","See my #rationale. The message sends I identify often suggest poor design, costly execution, or other inadequate practices.See #badSelectors for the list of messages that are checked."
"AddIntoMethodDescription",""
"RBTempVarOverridesInstVarRule","See my #rationale."
"FreeTypeSettings",""
"TraitMethodDescriptionTest",""
"RBLiteralArrayCharactersRule",""
"PlatformResolver","I am an abstract superclass for platform-specific resolvers."
"FileWriteError",""
"TickSelectionListNode","A TickSelectionListNode is node for the tree used to render the tick listselected	- xxxxx"
"WindowMoved",""
"AJCdeclCallInfo",""
"ScheduleTest",""
"ContextPart","To the instruction parsing ability of InstructionStream I add the actual semantics for execution. The execution state is stored in the indexable fields of my subclasses. This includes temporary variables and a stack of values used in evaluating expressions. The actual semantics of execution can be found in my category ""system simulation"" and ""instruction decode"". These methods exactly parallel the operation of the Smalltalk machine itself.	The simulator is a group of my methods that do what the Smalltalk interpreter does: execute Smalltalk bytecodes. By adding code to the simulator, you may take statistics on the running of Smalltalk methods. For example,	Transcript show: (ContextPart runSimulated: [3 factorial]) printString.---------------------	A mechanism for registering a custom primitive simulators added.To register own simulator use:#simulatePrimitiveNumber: num with: simulatorfor numbered primitives , and #simulatePrimitive: primName module: moduleName with: simulatorfor named primitives.During (re)initialization, a ContextPart class sends a #registerPrimitiveSimulatorsto all classes in system, which implementing it (but not to implementor's subclasses).This can be used to make sure that your custom simulator is present. Hence, it is recommended to place registration code in #registerPrimitiveSimulators implementation for one of your classes.In order to make sure that simulator(s) registered during package loading, make sure that one of your classes registering them (via class initialization mechanism). A simulator can be any object which implements the: #simulatePrimitiveFor:receiver:arguments:context:and should simulate the invocation of corresponding primitive.If simulated primitive fails, a simulator should answer PrimitiveFailToken. If primitive succeeds, it should answer a primitive return value."
"RBParseErrorNode","I am a node representing a source code segement that could not be parsed. I am manly used for source-code coloring where we should parse as far as possible and mark the rest as a failure."
"Deprecation","This Warning is signalled by methods which are deprecated.The use of Object>>#deprecatedExplanation: aString and Object>>#deprecated: aBlock explanation: aString is recommended.Idiom: Imagine I want to deprecate the message #foo.foo	^ 'foo'I can replace it with:foo	self deprecatedExplanation: 'The method #foo was not good. Use Bar>>newFoo instead.'	^ 'foo'Or, for certain cases such as when #foo implements a primitive, #foo can be renamed to #fooDeprecated.fooDeprecated	^ <primitive>foo	^ self deprecated: [self fooDeprecated] explanation: 'The method #foo was not good. Use Bar>>newFoo instead.'"
"RxsEpsilon","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--This is an empty string.  It terminates some of the recursive constructs."
"PSMCMergeMorph","A PSMCMergeMorph is a graphical tool to navigate changes and select changes in case of conflicts."
"SharedPool","A shared pool represents a set of bindings which are accessible to all classes which import the pool in its 'pool dictionaries'. SharedPool is NOT a dictionary but rather a name space. Bindings are represented by 'class variables' - as long as we have no better way to represent them at least."
"RBAssignmentInIfTrueRule",""
"ComposableModelDescription",""
"RPackageReadOnlyCompleteSetupTest","The tests takes as fixture the following situation and exercises the readonly queries.We should be able to use a test resources to speed it up.P1 	A1DefinedInP1	A1DefinedInP1>>methodDefinedInP1	B1DefinedInP1		A2DefinedInP2>>methodDefinedInP1	P2	A2DefinedInP2	A2DefinedInP2>>methodDefinedInP2	B2DefinedInB2	P3	A3DefinedInP3		A2DefinedInP2>>methodDefinedInP3 "
"FLBitsObjectCluster","I have the common behavior for generic storing and loading variable bits objects."
"ZLibReadStream",""
"ColorMap","I'm a transformation of pixel values. I apply up to four masks and shits to compute the transformed pixel value.I'm used when applying a BitBlt transfer, whenever pixels from a source to a destination have diferent depths. For further information refer to BitBlt class comments.To see me in action evaluate: BitBlt exampleColorMap"
"ComposableSpec","A ComposableSpec is a spec used to combine other specs"
"RBCreateAccessorsForVariableTest",""
"MOPTestClassA",""
"ClassNameSetter",""
"MatrixTransformMorph","MatrixTransformMorph is similar to TransformMorph but uses a MatrixTransform2x3 instead of a MorphicTransform. It is used by clients who want use the BalloonEngine for vector-based scaling instead of the standard WarpBlt pixel-based mechanism."
"Set","I represent a set of objects without duplicates.  I can hold anything that responds to#hash and #=, except for nil.  My instances will automatically grow, if necessary,Note that I rely on #=, not #==.  If you want a set using #==, use IdentitySet.Instance structure:  array	An array whose non-nil elements are the elements of the set,		and whose nil elements are empty slots.  There is always at least one nil.		In fact I try to keep my ""load"" at 75% or less so that hashing will work well.  tally	The number of elements in the set.  The array size is always greater than this.The core operation is #findElementOrNil:, which either finds the position where anobject is stored in array, if it is present, or finds a suitable position holding nil, ifits argument is not present in array,"
"ZnCharacterWriteStream","I am ZnCharacterWriteStream.I wrap another binary WriteStream and use a ZnCharacerEncoder to allow Characters to be written.Part of Zinc HTTP Components."
"SVColorSelectorMorph","A colour selector that displays an area with saturation on the x axis and volume on the y axis. Provides interactive selection of colour by mouse. For the moment it is event rather than model based.Setting the color will specify the hue and setting the selectedColor will specify the saturation and volume (may have a different hue to that displayed if not in sync)."
"ZnEntityReaderTests",""
"NECInstVarEntry","I represent an instance variable."
"TestRunner","<lint: #ignore rule: #classNotReferenced rational: 'this view is only accessed from menus'>Although tests can be most easily be run from a browser, I provide the ability to: * select sets of test suites to run. I am designed to make it easy to execute groups of tests* obtain a more detailed log of the results UI Description ___________ My left-most pane lists all of the categories that contain test classes (i.e., subclasses of TestCase); when some of these categories are selected, the test classes that they contain appear in the pane to the right. Abstract classes are italicized, and the test class hierarchy is shown by indentation, so subclasses of ClassTestCase are indented more than subclasses of TestCase. The tests that did not pass (if any) are listed in the right-hand panes of the Test Runner; if you want to debug one, to see why it failed, just click on the name."
"RBVariableScope",""
"FLSerializer","I am a binary object serializer.An example of use:| sourceArray loadedArray |sourceArray := 	Array 		with: 'a string' 		with: Transcript		with: [ Transcript show: 'a string' ].""Store to the file""FLSerializer serialize: sourceArray toFileNamed: 'example.FL'. ""Load from the file""loadedArray := FLMaterializer materializeFromFileNamed: 'example.FL'. ""The arrays are not the same""[ sourceArray ~~ loadedArray ] assert.""The strings are not the same""[ sourceArray first ~~ loadedArray first ] assert.[ sourceArray first = loadedArray first ] assert.""The global instance Transcript is the same""[ sourceArray second == loadedArray second ] assert.""Appreciate in Transcript that the loaded block prints a string""loadedArray third value."
"RBExpandReferencedPoolsRefactoring",""
"TestCaseTest",""
"FontTest","I am mainly a test for fallback font.FontTest buildSuite run"
"RxmPredicate","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--Instance holds onto a one-argument block and matches exactly one character if the block evaluates to true when passed the character as the argument.Instance variables:	predicate		<BlockClosure>"
"MCChangeNotificationTest",""
"RBMoveVariableDefinitionTest",""
"RGFactory","RGFactory is responsible for creating instances of the Ring meta-model classes"
"RBAddInstanceVariableChange",""
"TextLink",""
"FinderPragmaNode","A FinderPragmaNode is a Node used to render a pragma in the Finder Tree"
"CustomHelpTest",""
"LongTestCaseTestUnderTest",""
"AnnouncerTest","An AnnouncerTest is a test class used to test Announcer.Instance Variables	announcer:		<Announcer>  the announcer to testannouncer	- the announcer that is tested"
"ZipArchiveTest",""
"ZnDefaultServerDelegate","I am ZnDefaultServerDelegate.I function as a delegate for ZnServer, implementing #handleRequest:I implement responses to the following prefixes:/echo - an echo text of request information for debugging purposes/dw-bench - a dynamic html page for benchmarking purposes/unicode - a unicode test page/random - a random string (/random/32 for a specific size)/bytes - bytes according to a pattern (/bytes/32 for a specific size)/favicon.ico - a Zn favicon/status - a server status page/help - lists all page prefixes/ - an html welcome pageWithout any matches, I respond with a page not found.Part of Zinc HTTP Components."
"BlockClosuresTestCase","This test case collects examples for block uses that require full block closures."
"RBImplementedNotSentRule","See my #rationale.This rule pays attention not to flag methods with pragmas and test methods which are likely to be sent through reflection.Now if your code is used and extended by others, better use a deprecation mechanism, following the pattern: 		foo		self deprecated: ''Use bar instead ''. 		^ self bar"
"FindReplaceService",""
"TimeZone","TimeZone is a simple class to colect the information identifying a UTC time zone.

offset			-	Duration	- the time zone's offset from UTC
abbreviation	-	String		- the abbreviated name for the time zone.
name			-	String		- the name of the time zone.

TimeZone class >> #timeZones returns an array of the known time zones
TimeZone class >> #default returns the default time zone (Grenwich Mean Time)"
"RBEquivalentSuperclassMethodsRule","See my #rationale.The methods are equivalent when they have the same abstract syntax tree, except for variable names.The methods new and initialize are ignored because they are often overridden for compatilbity with other platforms. The ignored methods can be edited in #ignoredSelectors"
"MCVersionMerger",""
"Nautilus","I'm a new browser based on RPackage and Announcements with fancy goodies:	- groups ( you can create groups with your favorite classes)	- multi-selections	- environments	- iconic buttons	- hierarchy	- pragma based menus"
"ExampleForTest111",""
"FLIndexStreamTest",""
"Cookie","A Cookie is a simple object which kept a value during a defined amount of time."
"RxsCharSet","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A character set corresponds to a [...] construct in the regular expression.Instance variables:	elements	<OrderedCollection> An element can be one of: RxsCharacter, RxsRange, or RxsPredicate.	negated		<Boolean>"
"RBAddClassVariableTest",""
"MethodContainsFlagsAction","Action when the method contains a flag"
"TextEmphasisTest",""
"MetacelloMCVersionValidator","Performs configuration validation.For programmatically decoding reason codes use:  MetacellMCVersionValidator fullDescriptionForReasonCode: <reasonCode>Warning reason codes:	#notDevelopmentVersion			- the symbolic version #development refers to a non-development literal version.	#loadWarning 						- Warning signalled during load [load validation].	#onlyBaselineVersion 				- one or more baseline versions have been defined, but no non-baseline versions are defined.	#stableDevelopmentVersion		- a version whose blessing is #development has been declared as a #stable versionCritical Warning reason codes:	#duplicateVersionDefinitions 		- there are multiple pragma methods specifying the same version	#loadDeprecation					- deprecation warning signalled while loading configuration [load validation]	#noLoadableVersions 				- no non #baseline versions defined in configuration	#noTests 							- no test cases defined in loaded configuration [load validation]	#noVersionSpecified 				- no version defined for the project reference or package. The version specified in the baseline or the latest version of the project or package in the repository will be used.	#packageNameMismatch 			- the name in the packageSpec does not match the name of the mcz file	#projectClassNameFileMismatch 	- the class name of the configuration does not match the mcz file containing the configuration	#testDeprecation 					- deprecation warning signalled while running configuration tests [load validation]Error reason codes:	#cannotResolveVersion 			- the version (project reference or symbolic version) was not found in the specified configuration	#duplicateNames 					- multiple independent definitions for an entity with same name (project, package, or group)	#incompleteProjectSpec 			- missing required fields in project reference (className and/or repository)	#incorrectVersionString 			- the version declared in pragma doesn't match version in versionSpec	#invalidDoItSelector 				- doit select must be a Symbol	#invalidVersionString 				- versionString must be a String	#loadError 							- error occured while loading configuration [load validation]	#missingVersionImport 			- version specified in import pragma not defined in configuration	#noVersionsDefined 				- no usable baseline or version defined in configuration ... configuration cannot be loaded	#projectCreationError 				- error occured while resolving project reference	#shadowedNames 					- name duplication between packages and projects	#testFailures						- test failures while running tests [load validation]	#versionCompositionError 			- error while creating versionSpec from pragmas"
"TestCoverage","I wrap a method in order to detect whether it has been called or not. Then I can be used to calculate test coverage for SUnit."
"ColorPresenterMorph","Displays a colour with alpha against a white, hatched and black background."
"FileSystemGuide","I am an abstract superclass for objects that fulfill the Guide role in the Guide/Visitor pattern. My subclasses know how to traverse a filesystem in a specific order, ""showing"" the files and directories they encounter to a visitor.visitor	An object that fulfills the Visitor role and implements the visitor protocol.	work	An OrderedCollection, used to keep track of filesystem nodes that have not yet been visited"
"TaskbarSystemSettings",""
"MetacelloProjectSpecLoadConflict",""
"TestCaseAnnouncement","This is a common superclass for announcements related to SUnit test cases.Instance Variables        testCase:                       <TestCase>        testResult:                     <TestResult>        testSelector:           	   <Symbol>testCase        - The test casetestResult        - The result of the test casetestSelector        - The selector of the test method"
"LabelMorph","String morph with enablement support. When disabled the text will appear inset."
"MCPatchBrowser",""
"RBSmallDictionaryTest",""
"SimpleBorder","see BorderedMorph"
"FractionTest",""
"KMPragmaKeymapBuilder",""
"ZnServerSession","I am ZnServerSession.I represent an HTTP session in the context of a ZnServer.To get a reference to the current session, send #session to a ZnMessage (request or response).Part of Zinc HTTP Components."
"DialogWindowSpec",""
"SystemNavigationOnNewlyCreatedEnvironmentTest",""
"MetacelloMemberSpec",""
"BitBlt","I represent a block transfer (BLT) of pixels into a rectangle (destX, destY, width, height) of the destinationForm.  The source of pixels may be a similar rectangle (at sourceX, sourceY) in the sourceForm, or a constant color, currently called halftoneForm.  If both are specified, their pixel values are combined with a logical AND function prior to transfer.  In any case, the pixels from the source are combined with those of the destination by as specified by the combinationRule.The combination rule whose value is 0 through 15 programs the transfer to produce 1 or 0 according to its 4-bit representation as follows:	8:	if source is 0 and destination is 0	4:	if source is 0 and destination is 1	2:	if source is 1 and destination is 0	1:	if source is 1 and destination is 1.At each pixel the corresponding bits of the source and destination pixel values determine one of these conditions;  if the combination rule has a 1 in the corresponding bit position, then the new destination value will be 1, otherwise it will be zero.  Forms may be of different depths, see the comment in class Form.In addition to the original 16 combination rules, this BitBlt supports	16	fails (to simulate paint bits)	17	fails (to simulate erase bits)	18	sourceWord + destinationWord	19	sourceWord - destinationWord	20	rgbAdd: sourceWord with: destinationWord.  Sum of color components	21	rgbSub: sourceWord with: destinationWord.  Difference of color components	22	OLDrgbDiff: sourceWord with: destinationWord.  Sum of abs of differences in components	23	OLDtallyIntoMap: destinationWord.  Tallies pixValues into a colorMap			these old versions don't do bitwise dest clipping.  Use 32 and 33 now.	24	alphaBlend: sourceWord with: destinationWord.  32-bit source and dest only	25	pixPaint: sourceWord with: destinationWord.  Wherever the sourceForm is non-zero, it replaces the destination.  Can be used with a 1-bit source color mapped to (0, FFFFFFFF), and a fillColor to fill the dest with that color wherever the source is 1.	26	pixMask: sourceWord with: destinationWord.  Like pixPaint, but fills with 0.	27	rgbMax: sourceWord with: destinationWord.  Max of each color component.	28	rgbMin: sourceWord with: destinationWord.  Min of each color component.	29	rgbMin: sourceWord bitInvert32 with: destinationWord.  Min with (max-source)	30	alphaBlendConst: sourceWord with: destinationWord.  alpha is an arg. works in 16 bits.	31	alphaPaintConst: sourceWord with: destinationWord.  alpha is an arg. works in 16 bits.	32	rgbDiff: sourceWord with: destinationWord.  Sum of abs of differences in components	33	tallyIntoMap: destinationWord.  Tallies pixValues into a colorMap	34	alphaBlendScaled: srcWord with: dstWord. Alpha blend of scaled srcWord and destWord.The color specified by halftoneForm may be either a Color or a Pattern.   A Color is converted to a pixelValue for the depth of the destinationForm.  If a Pattern, BitBlt will simply interpret its bitmap as an array of Color pixelValues.  BitBlt aligns the first element of this array with the top scanline of the destinationForm, the second with the second, and so on, cycling through the color array as necessary.  Within each scan line the 32-bit value is repeated from left to right across the form.  If the value repeats on pixels boudaries, the effect will be a constant color;  if not, it will produce a halftone that repeats on 32-bit boundaries.Any transfer specified is further clipped by the specified rectangle (clipX, clipY, clipWidth, clipHeight), and also by the bounds of the source and destination forms.	To make a small Form repeat and fill a big form, use an InfiniteForm as the source.	To write on a form and leave with both transparent and opapue areas, use a MaskedForm as the source.Pixels from a source to a destination whose pixels have a different depth are converted based on the optional colorMap.  If colorMap is nil, then conversion to more bits is done by filling the new high-order bits with zero, and conversion to fewer bits is done by truncating the lost high-order bits.  The colorMap, if specified, must be a either word array (ie Bitmap) with 2^n elements, where n is the pixel depth of the source, or a fully specified ColorMap which may contain a lookup table (ie Bitmap) and/or four separate masks and shifts which are applied to the pixels. For every source pixel, BitBlt will first perform masking and shifting and then index the lookup table, and select the corresponding pixelValue and mask it to the destination pixel size before storing.	When blitting from a 32 or 16 bit deep Form to one 8 bits or less, the default is truncation.  This will produce very strange colors, since truncation of the high bits does not produce the nearest encoded color.  Supply a 512 long colorMap, and red, green, and blue will be shifted down to 3 bits each, and mapped.  The message copybits...stdColors will use the best map to the standard colors for destinations of depths 8, 4, 2 and 1.  Two other sized of colorMaps are allowed, 4096 (4 bits per color) and 32786 (five bits per color).	Normal blits between 16 and 32 bit forms truncates or pads the colors automatically to provide the best preservation of colors.	Colors can be remapped at the same depth.  Sometimes a Form is in terms of colors that are not the standard colors for this depth, for example in a GIF file.  Convert the Form to a MaskedForm and send colorMap: the list of colors that the picture is in terms of.  MaskedForm will use the colorMap when copying to the display or another Form. (Note also that a Form can be copied to itself, and transformed in the process, if a non-nil colorMap is supplied.)"
"SelectorNode","I am a parse tree leaf representing a selector."
"ProtoObject","ProtoObject establishes minimal behavior required of any object in Squeak, even objects that should balk at normal object behavior. Generally these are proxy objects designed to read themselves in from the disk, or to perform some wrapper behavior, before responding to a message. Current examples are ObjectOut and ImageSegmentRootStub, and one could argue that ObjectTracer should also inherit from this class.ProtoObject has no instance variables, nor should any be added."
"TextEmphasis","A TextEmphasis, encodes a characteristic applicable to all fonts.  The encoding is as follows:	1	bold	2	itallic	4	underlined	8	narrow	16	struck out"
"NECTypedModelTest",""
"MorphEventSubscription","I represent a subscription to an event.  I'm kind of an announcement, that's why I will be replaced by them soon :)"
"ProtocolAdded","This class is not used, but should be used when we hook into the addition and removal of protocols. Right now, we only get ClassReorganizedAnnouncement"
"PragmaTest",""
"NECSuperEntry","I represent super."
"MetacelloCopyMemberSpec",""
"NBRecursionDetect","i am used to detect recursion during code generation..use me like following:NBRecursionDetect in: someMethod during: [	... some block ..	].if recursion is detected, while evaluating the block, then NBCodeGenRecursion error will be signaled.A recursion usually happens when generating code for some method requires generating code for very same method, and so it enters infinite loop"
"MethodRecategorized","This announcement will be emitted when:	=> a non-empty protocol is renamed in a class or a trait (using ClassOrganizer >> renameCategory:toBe:). If the protocol does not contain any method, the announcement will not be emitted. Therefore, if we rename a non-empty protocol, both SystemMethodRecategorizedAnnouncement and SystemClassReorganizedAnnouncement will be emitted	=> a method is removed from a category of a class or a trait (using ClassOrganizer >> removeElement:)	=> a method is RE-categorized in a protocol of a trait or a class, using Organizer>>classify:under:.  If the method is classify under its current protocol, the announcement will not be emitted"
"UndoRedoRecord","An UndoRedoRecord is a leaf of an history tree. It  holds undo and redo commands. Such a command is represented by a MessageSend. Instance Variables	redoMessage:		<MessageSend>	undoMessage:		<MessageSend>redoMessage	- The command which is performed for redoingundoMessage	- The command which is performed for undoing"
"KMNoShortcut","I do not respond to any keyboard event. Mostly used in the settings to deactivate a certain command."
"FileSystemStore","I am an abstract superclass for store implementations. My subclasses provide access to the actual data storage of a particular kind of filesystem. The file system can be accessed via	FileSystem disk 	FileSystem memory	My associated filesystem can be accessed as follows:      DiskStore currentFileSystem"
"NumberParser","NumberParser is an abstract class for parsing and building numbers from string/stream.It offers a framework with utility methods and exception handling.Number syntax is not defined and should be subclassResponsibility.Instance variables:sourceStream <Stream> the stream of characters from which the number is readbase <Integer> the radix in which to interpret digitsneg <Boolean> true in case of minus signintegerPart <Integer> the integer part of the numberfractionPart <Integer> the fraction part of the number if anyexponent <Integer> the exponent used in scientific notation if anyscale <Integer> the scale used in case of ScaledDecimal number if anynDigits <Integer> number of digits read to form an IntegerlasNonZero <Integer> position of last non zero digit, starting at 1 from left, 0 if all digits are zerorequestor <?> could eventually be used to insert an error message in a text editorfailBlock <BlockClosure> Block to execute whenever an error occurs"
"FLVariableObjectCluster","I am a generic cluster for objects with indexable variables."
"NBSizeT","i implement marshalling for the size_t type.size_t value size depends on a platform's word size.on 32-bit it will be 32 bit.on 64-bit it will be 64 bit "
"LiteralDictionaryTest",""
"RPackageRenamed","I am a public announcement sent when a new RPackage is renamed"
"SecureHashAlgorithmTest","This is the unit test for the class SecureHashAlgorithm. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"AJLineStream",""
"RBCategoryRegexRefactoring",""
"MCGOODSRepository",""
"StyleDeclaration","I'm the declaration of a style stuff into a file.  I'm not really used, but I'm here to make parsing an homogeneous process and backwards compatibility.Sending me the #import message does nothing :)."
"GoferCommit",""
"Random","This Random Number Generator graciously contributed by David N. Smith.  It is an adaptation of the Park-Miller RNG which uses Floats to avoid the need for LargeInteger arithmetic.If you just want a quick random integer, use:		10 atRandomEvery integer interval can give a random number:		(6 to: 12) atRandomSequenceableCollections can give randomly selected elements:		'pick one of these letters randomly' atRandomSequenceableCollections also respond to shuffled, as in:		($A to: $Z) shuffledThe correct way to use class Random is to store one in an instance or class variable:		myGenerator := Random new.Then use it every time you need another number between 0.0 and 1.0 (excluding)		myGenerator nextYou can also generate a positive integer		myGenerator nextInt: 10"
"RGMetaclassDefinition","RGMetaclassDefinition is a concrete representation of metaclasses of classes (traits are excluded)"
"RBCollectionCopyEmptyRule","See my #rationale."
"KMCategory","I am a keymap category.  I represent a set of keymaps that can be attached to a morph, so morphs can share my keymaps."
"MethodRemoved","This announcement will be emitted when a method is removed from a trait or a class, using ClassDescription >>removeSelector: or TraitDescription >> removeSelector."
"NBFloatPtr","Use to pass a pointer to instance of Float, which is C (double *) equivalent.Can be used for functions which may modify the floating-point values at specified memory pointer.NOTE: always copy float objects before passing them to such callouts."
"ConfigurationCommandLineHandlerTest",""
"GroupNode",""
"RBRemoveInstanceVariableRefactoring",""
"RBClassRegexRefactoring",""
"Rectangle","I represent a rectangular area of the screen. Arithmetic functions take points as arguments and carry out scaling and translating operations to create new instances of me. Rectangle functions create new instances by determining intersections of rectangles with rectangles.Note 1: only rectangles parallel to reference frame (Screen) can be represented by this class.Note 2: the Rectangle is represented by two extremities of one diagonal. By convention, it must be the diagonal:	from rectangle origin (the point having smallest coordinates in reference frame),	to rectangle corner (the point having largest coordinates in reference frame).Note 3: Screen coordinates conventions are:	x is horizontal axis, zero at left border, oriented toward right;	y is vertical axis, zero at top border, oriented toward bottom.This corresponds to the latin convention for writing text from left to right and top to bottom.Note 4: the Rectangle extent is obtained by subtracting rectangle origin to rectangle corner coordinates.If this leads to a negative width (extent x coordinate) and/or a negative height (extent y coordinate), then the Rectangle is degenerated and considered empty.Instance variables:	origin	<Point> the coordinates of corner having smallest coordinates (top left in Screen coordinates)	corner	<Point> the coordinates of corner having largest coordinates (bottom right in Screen coordinates)"
"RGPackageTest",""
"RBExcessiveInheritanceRule","See my #rationale.Several possibilities can occur. Here are some hints:- check whether some classes in the hierarchy just do not add enough behavior to require a class in itself- check whether all the classes are the root of a kind of little inheritance hierarchy. Note that often a framework may already define a certain level of inheritance, with  other layers added by user code. This rule does not take these frameworks into account. 		The defined inheritance depth can be edited in #inheritanceDepth."
"DummySoundSystem","This is a dummy sound system registered in SoundService to absorb all sound playing and to use the primitive beep instead of sampled sounds when playing a beep."
"ListSelectionModel","A ListSelectionModel is a basic example to show multi selection on lists| l |l := ListSelectionModel new.l openWithSpec"
"MCWorkingCopy","MCWorkingCopy represents one version of a package in memory. It provides support for ancestry access, required packages and the repositories in which the package is managed.Instance Variables:	versionInfo	<MCAncestry>	ancestry	<MCWorkingAncestry>	counter	<Number>	repositoryGroup	<MCRepositoryGroup>	requiredPackages	<Collection>"
"SHOneEditorShoutedASecondNotShouted","In this example, the view has two text editors. Try it with:SHOneEditorShoutedASecondNotShouted  new open.The top view is supposed to be used for code editing and the other for comment editing.Only the code editor view has to be highligthed whereas the comment editor is never highligthed. In this case, the model must implement a #shoutAboutToStyle: method which returns true. When the view is built, the comment pane is setup to forbid code styling by sending #styled: to it with false as argument. See the #open method and the #styled: sent.Instance Variables:	code	<Text>	comment	<Text>"
"DefaultExternalDropHandler","An alternative default handler that uses the file-list services to process files."
"MorphTreeMorphSingleSelection",""
"SmallDictionaryTest",""
"HistoryIteratorTest",""
"FreeTypeEmbeddedFileInfo",""
"PluggableTextAttribute","An attribute which evaluates an arbitrary block when it is selected."
"DomainError","I am DomainError, an ArithmeticException indicating that some argument falls outside an expected domain, [from, to]When my valid interval is left- or right-open, use signal: creation protocol to provide a custom messageText rather than the default [from, to] notation"
"TransformWithLayoutMorph","A transform morph that allows the use of a layout policy to arrange submorphs."
"PluggableDialogWindow","Pluggable form of dialog window supporting custom selector on model for applying changes along with configurable content and buttons."
"NautilusShowCategoriesChanged","A NautilusShowCategoriesChanged is raised the value showCategories changed"
"RBNoClassCommentRule","See my #rationale."
"DialogItemsChooserUI","unselectedItems is the original list to search inselectItems is the list of the selected items"
"BasicInspector",""
"JoinSection",""
"AndreasSystemProfiler","AndreasSystemProfiler uses sub-msec VM supported PC sampling.	In Memory of Andreas Raab.  Author, Friend, Colleague. 	http://forum.world.st/In-Memory-of-Andreas-Raab-td4663424.html	Released by Ron, Julie and DavidExample:AndreasSystemProfiler spyOn: [ 10000 timesRepeat: [ 3.14159 printString ] ]-=-=-=-=-=-=-=Apparently, the time taken to run the provided block is as twice as long as run without the profiler.-=-=-=-=-=-=-=Both AndreasSystemProfiler and MessageTally are periodic sampling profilers.  The essential difference between AndreasSystemProfiler and MessageTally is in how the current method is sampled.MessageTally is driven from a high-priority process in a loop waiting on a delay.  When the delay fires the lower-priority process being profiled is interrupted, its stack is walked to determine the methods along the call chain, and that data is recorded.  But since the sampling occurs when the high-priority process preempts the lower-priority process, a sample is only taken at a preemption point.  In particular, primitives are *not* profiled because they are not suspension points.  A process can only be suspended on method activation (a non-primitive method activation, or primitive failure) or on backward branch.  The cost of primitives is charged to a caller and is inferred by subtracting the cost of children of the caller from the caller itself (subtracting the number of samples in children of the caller form the number of samples in the caller itself).  Another problem is that using the clock that underlies Delay, which is typically the clock used by processes being profiled, causes sampling errors due to the sampling and sampled processes cohering.  Delays are limited in resolution (at best 1 millisecond) so if the profiled process waits on a delay it'll fire immediately after the profiling process (because the profiling process is at higher priority) and so the sampling process may only ever see the sampled process in a wait state.If MessageTally is used to profile multiple processes then a third problem is that if a primitive causes a process switch then its cost will end up being charged to the process switched-to, not switched from.  This is again because sampling can only occur after a primitive has completed (successfully or not).AndreasSystemProfiler is driven from a high-priority process in a loop waiting on a Semaphore known to the VM.  The profiling process uses a primitive to schedule a sample some number of ticks of the VM's high-performance clock in the future.  When the time is reached the VM samples the current method and the current process, *before any process preemption takes place*, and independently of the standard clock, and signals the semaphore.  The profiling process then collects the method,process pair via primitives.  So AndreasSystemProfiler provides much more accurate results.That said there are still limitations with primitives and Cog.  Currently Cog only samples ""interpreter"" primitives.  Those primitives it implements in machine code (integer and float arithmetic, closure evaluation, at:, identityHash) are not sampled and won't show up; they will be charged to the calling method.  This is fixable, since Cog actually compiles the sampling direct into interpreter primitive invocation when profiling is in effect and not at other times, but sampling could be a significant cost in these simple and performance-critical primitives."
"RBClassNameInSelectorRule","See my #rationale."
"TestAsserter","I understand methods beginning #assert:... and #deny:... (and my class-side understands #assert:description:).  I am the superclass of TestCase and TestResource and can also be the superclass of any test helper classes you create to factor out test behaviour.  I exist so that test code can be refactored between my subclasses without difficulty.Send #assert:description: when you want to check for an expected value. For example, you might say	self assert: socket isOpen description: 'We requested a socket but now it is not open'.to test whether or not a socket is open at a point in a test.  Use description strings both to give more information about where a test failed in debugger notifiers and logs, and to document the intent of a test.  Other methods include #assert:, #assert:description:resumable:, #deny:, #deny:description:, #deny:description:resumable:, #should:raise:, #should:raise:description:, #shouldnt:raise:, #shouldnt:raise:description:.  All these methods are defined on the superclass, TestAsserter.  (Any convenience assertion methods you create for general use should also be defined in my 'convenience' protocol.)Override my class-side #isLogging in subclasses to have failed assertion descriptions shown on the Transcript.  To have them appear elsewhere, also override my class-side #failureLog."
"MCVersionSorter",""
"RGClassDescriptionDefinition","RGClassDescriptionDefinition is the common parent for classes and metaclasses defining instance variables"
"IndentingListItemMorph","An IndentingListItemMorph is a StringMorph that draws itself with an optional toggle at its left, as part of the display of the SimpleHierarchicalListMorph.It will also display lines around the toggle depending on UITheme settingsInstance variables:indentLevel <SmallInteger> 	the indent level, from 0 at the root and increasing by 1 at each level of the hierarchy.isExpanded <Boolean>		true if this item is expanded (showing its children)complexContents <ListItemWrapper>	an adapter wrapping my represented item that can answer its children, etc.	firstChild <IndentingListItemMorph|nil>	my first child, or nil if none	container <SimpleHierarchicalListMorph>	my container	nextSibling <IndentingListItemMorph|nil>	the next item in the linked list of siblings, or nil if none.Contributed by Bob Arning as part of the ObjectExplorer package.Don't blame him if it's not perfect.  We wanted to get it out for people to play with."
"RBRefactoringBrowserTest",""
"GoferOperationTest",""
"ZnBufferedReadStream","I am STONBufferedReadStream.I wrap another ReadStream and add efficient buffering for the typical access pattern of parsers: sending lots of #next, #peek and #atEnd messages.By design I do not implement #position and #position: or anything based on that.I can wrap both binary or character streams and act accordingly.Part of Zinc HTTP Components."
"BalloonBuffer","BalloonBuffer is a repository for primitive data used by the BalloonEngine."
"ShortPointArrayTest","SUnit Test for ShortPointArray"
"SHStylingOrNotDependingOnModelState","I'm a example that shows how to have a simple editor in which text is highlighted or not depending on the editor model state.  Try it with:SHStylingOrNotDependingOnModelState new open.Thus, depending on the model state, the view should be styled or not styled. This is achieve by implementing a #shoutAboutToStyle: method in the model (here, an instance of myself). #shoutAboutToStyle: returns true if the view which is passed as argument must be styled. In this excample, if the value of the 'state' instance variable is #code, then the text is hilighted, else it is not.Instance Variables:	code	<Text>	codeEditing    <Boolean>"
"KMNoKeymap","I am a Null object representing the absence of a Keymap."
"ThemeSettings","Configurable basic settings for themes."
"PackageChecker",""
"RBSentNotImplementedRule","See my #rationale."
"ColorMappingCanvas","I'm an abstract class which introduce a filter between a drawing request and the final output, handled by #mapColor:For each potential pixel operation like: source -> op -> outputit introducing a color mapping stage: source -> op -> mapping -> outputThen #mapColor: can be redefined in subclasses to implement more specific behavior. For example:- ShadowDrawingCanvas will replace the rendered color with the color of shadow (if not transparent).- AlphaBlendingCanvas will add or intensify alpha of rendered color.For an easy to understand example see  #drawPolygon:color:borderWidth:borderColor:"
"TraitBehavior","I declare the instance variables methodDict, traitComposition and localSelectors that normally would be defined on PureBehavior (see class comment of PureBehavior). Furthermore I keep track of where I am used and I provide compatibility methods to make me useable in tools where originally a class was expected."
"DecompilerConstructor","I construct the node tree for a Decompiler."
"UTF16TextConverter","Text converter for UTF-16.  It supports the endianness and byte order mark.The default is to not use a BOM, make sure to set this if using the converter to write to a location where encoding metadata is not present / specified by the protocol.This usually means you want to write one when storing strings to files on disk, but not when transmitting encoded string to a web client, nor when sending data to a database."
"MonticelloRepositoryBrowser","MonticelloRepositoryBrowser example"
"MenuMorph","Instance variables:	defaultTarget 	<Object>				The default target for creating menu items	selectedItem		<MenuItemMorph> 	The currently selected item in the receiver	stayUp 			<Boolean>			True if the receiver should stay up after clicks	popUpOwner 	<MenuItemMorph>	The menu item that automatically invoked the receiver, if any.	activeSubMenu 	<MenuMorph>		The currently active submenu."
"BasicCodeLoader","CodeLoader provides a way to load smalltalk source file from local.Example: CodeLoader new 	loadSourceFiles: (Array with: 		(#file:, 		FileDirectory default fullName, 		'/useless.st')); 	installSourceFiles "
"RBCodeCruftLeftInMethodsRule",""
"WeakKeyToCollectionDictionary","This class represents an identity dictionary with weak keys, whose values are collections. Keys not in the dictionary are mapped to the empty collection.  Conversely, if a collection becomes empty, the mapping can be removed to save time and space.  However, because this requires re-hashing, it does not pay to do this to eagerly."
"PluggableTreeMorph","A pluggable tree morph."
"RecentMessageList","RecentMessageList record and store all the changes and can show them by doing RecentMessageList openInWorld."
"AJGeneratedCode",""
"FileExists","I am raised on an attempt to create a file or directory over top of an existing file."
"FLBadVersion","I represent an error produced during materialization when the serialized version doesn't match the materializer's version (accessible via FLMaterializer>>version). A version is encoded in 16 bits and is enconded heading the serialized stream, after the signature."
"PackageInfo","Subclass this class to create new Packages."
"SimulationGuardException",""
"ZnDigestAuthenticator","I am ZnDigestAuthenticator.I help servers handle HTTP Digest Authentication.I have a nonces dictionary with nonce->opaque associations. I generate a new nonce value for every 401 response I trigger.Part of Zinc HTTP Components."
"SecureHashAlgorithm","This class implements the Secure Hash Algorithm (SHA) described in the U.S. government's Secure Hash Standard (SHS). This standard is described in FIPS PUB 180-1, ""SECURE HASH STANDARD"", April 17, 1995.The Secure Hash Algorithm is also described on p. 442 of 'Applied Cryptography: Protocols, Algorithms, and Source Code in C' by Bruce Scheier, Wiley, 1996.See the comment in class DigitalSignatureAlgorithm for details on its use.Implementation notes:The secure hash standard was created with 32-bit hardware in mind. All arithmetic in the hash computation must be done modulo 2^32. This implementation uses ThirtyTwoBitRegister objects to simulate hardware registers; this implementation is about six times faster than using LargePositiveIntegers (measured on a Macintosh G3 Powerbook). Implementing a primitive to process each 64-byte buffer would probably speed up the computation by a factor of 20 or more."
"TaskbarTask","Holds the state of a taskbar/tasklist entry."
"ClassBuilderFormatTests",""
"GroupAlreadyExists","A GroupAreadyExists is an exception raised when a group with the provided name already exists"
"RBSourceRegexRefactoring",""
"TextEntryDialogWindow","Single-line text entry dialog."
"FileSystemPermission","I'm a set of permissions for a Directory Entry"
"CommentWindow","A simple dialog to get a comment for the situation."
"AllocationTest","Test originally from Andreas Raab"
"FLMethodChanged","I represent an error produced during materialization when is detected a change in the bytecodes of a method serialized as global. This error was born when testing the materialization of a BlockClosure defined in a method that changed. The test produced a VM crash."
"NECEntryTest",""
"MondrianPlugin","A MondrianPlugin is a plugin which switch the code pane with a morph when a package is selwcted"
"HTTPEncodingTest",""
"SourceFileArrayTest","This test documents the source pointer address conversion methods for ExpandedSourceFileArray.The available address space for source pointers in a traditional CompiledMethod is 16r1000000 through 16r4FFFFFF. StandardSourceFileArray maps positions in the sources file to address range 16r1000000 through 16r1FFFFFF and 16r3000000 through 16r3FFFFFF, and positions in the changes file to address range 16r2000000 through 16r2FFFFFF and 16r4000000 through 16r4FFFFFF. This permits a maximum file size of 16r2000000 (32MB) for both the sources file and the changes file. ExpandedSourceFileArray extends the source pointer address space using bit 25 of the source pointer to identify the external sources and changes files, with the remaining high order bits treated as address extension. This limits the number of external file references to two (the traditional sources and changes files). If additional external file references are needed in the future, some higher order bits in the source pointer address space should be allocated for that purpose.The use of bit 25 of the source pointer for file references permits backward compatibility with StandardSourceFileArray, with essentially unlimited address space expansion for the sources and changes files."
"FreeTypeGlyphRenderer","This class produces glyphs for a FreeTypeFont.It can be subclassed to provide, for example, sub-pixel anti-aliased glyphs."
"MouseButtonEvent",""
"FileDoesNotExistException",""
"MethodNode","I am the root of the parse tree."
"NBFFIConst","My instances can be used to push an arbitrary integer value to the stack.Could be useful for purposes, when some of the external function values is known beforehead,like size of structure etc.For emitting a constant as argument  for a function just put it into an argument list, like: apiCall: #( long 'IsBadWritePtr' (10) ) module: 'Kernel32.dll'here, 10 is a constant, which will be pushed on stack"
"CollectVisitorTest",""
"Workspace","A Workspace is a text area plus a lot of support for executable code.  It is a great place to execute top-level commands to compute something useful, and it is a great place to develop bits of a program before those bits get put into class methods.To open a new workspace, execute:	Workspace openA workspace can have its own variables, called ""workspace variables"", to hold intermediate results.  For example, if you type into a workspace ""x := 5"" and do-it, then later you could type in ""y := x * 2"" and y would become 10.Additionally, in Morphic, a workspace can gain access to morphs that are on the screen.  If acceptDroppedMorphss is turned on, then whenever a morph is dropped on the workspace, a variable will be created which references that morph.  This functionality is toggled with the window-wide menu of a workspace.The instance variables of this class are:	bindings  -  holds the workspace variables for this workspace	acceptDroppedMorphss - whether dropped morphs should create new variables"
"NBTCHAR","- depending on context, acts either as char or wchar"
"HSVColorSelectorMorph","Colour selector featuring a saturation/volume area and a hue selection strip."
"FileUrlTest",""
"CategoryWidget","CategoryWidget is the basic implementation of a wiget managing categories"
"RBNegationCondition",""
"MCAncestry","Abstract superclass of records of ancestry."
"CommandLineArguments","The CommandLineArguments represents the arguments passed to the image.In the following case,	$PHARO_VM myImage.image --foo bar	`CommandLineArguments default` contains {'--foo'. 'bar'}."
"MCStWriterTest",""
"RBRenameInstanceVariableRefactoring",""
"LegacyWeakSubscription","I am a subclass which work when VM does not supports finalization lists.I am about 3 times slower when it comes to finalizing items"
"MemoryStore","I'm a specific store for memory file system"
"RBClassNamesSpellingRule","See #name for the area where I check spelling."
"LessonView","A LessonView displays a Lesson instance"
"TasklistMorph","Themed task list/switcher to select the topmost window. Use cmd + left or right arrows (not ideal but the os typically handles cmd + tab/shift-tab).On Linux, release of the command key is not detected (vm issue), so press and release cmd again or move the mouse!"
"TextSpec","A TextSpec is a spec used to describe a text area"
"ZnCookieJar","I represent a container for storing HTTP Cookies for a client session.Part of Zinc HTTP Components."
"PharoUserPermissions","A PharoUserPermissions is a wrapper which stores the permissions of a PharoUser"
"ClassAdded","This announcement will be emitted when a class or a trait is added, using:	=> Trait >> named: (the notification is done in Trait >> named:uses:category:env:)	=> Class >> subclass:	"
"PluggableSystemWindow","A pluggable system window. Fixes the issues with label retrieval and adds support for changing children."
"HelpBuilder","This is an utility class that builds the books for a help system.Instance Variables	rootTopics:		<OrderedCollection>rootTopics	- a collection of books "
"MetacelloAbstractPackageSpec",""
"JapaneseEnvironment","This class provides the Japanese support.  Since it has been used most other than default 'latin-1' languages, this tends to be a good place to look at when you want to know what a typical subclass of LanguageEnvironment should do."
"MacOSClipboard",""
"MethodContextTest","I am an SUnit Test of MethodContext and its super type, ContextPart. See also BlockContextTest.See pages 430-437 of A. Goldberg and D. Robson's  Smalltalk-80 The Language (aka the purple book), which deal with Contexts. My fixtures are from their example. (The Squeak byte codes are not quite the same as Smalltalk-80.)My fixtures are:aReceiver         - just some arbitrary object, ""Rectangle origin: 100@100 corner: 200@200""aSender           - just some arbitrary object, thisContextaCompiledMethod - just some arbitrary method, ""Rectangle rightCenter"".aMethodContext   - just some arbitray context ...  "
"ZnMagicCookieTests",""
"Heap","Heap implements a special data structure commonly referred to as 'heap' [ http://en.wikipedia.org/wiki/Heap_%28data_structure%29 ]Heaps are good at handling priority queues because:	1) greatest priority element according to the sort block will be stored in first position and thus accessed in O(1) operations	2) worse time for inserting or removing an element is in O(log n) operations, where n is the size of the Heap	Insertion/Removal times are more efficient than above upper bound, provided that:		a) Elements are only removed at the beginning		b) Elements are added with arbitrary sort order.	3) there is no need to fully sort the Heap, which makes it more efficient than a SortedCollectionThe heap can be fully sorted by sending the message #fullySort.Worse time for fully sorting the Heap is in O(n log n) operations, but this is rarely used a feature.Remind that the Heap does not fully sort the collection if you don't ask.Thus don't expect #do: and other iterators to enumerate elements according to the sortBlock order.Instance variables:       array           <Array>         The data repository       tally           <Integer>       The number of elements in the heap       sortBlock       <Block|nil>     A two-argument block defining the sort order,                                                       or nil in which case the default sort order is                                                               [:element1 :element2| element1 <= element2]       indexUpdateBlock        <Block|nil>                                                       A two-argument block of the form [:data :index | ... ]                                                       which allows an application object to keep track of its                                                       index within the heap.  Useful for quick heap update                                                       when object's sort value changes (for example, when an                                                       object in a priority queue has its priority increased                                                       by an external event, you don't want to have to search                                                       through the whole heap to find the index before fixing                                                      the heap).  No update occurs if nil.The Heap can be viewed as a binary tree (every node in the tree has at most two children).The root is stored in first slot of internal array.The children are stored in next two slots.The children of children in next four slots.etc...For a node A of index i (1 based), the two children B1 and B2 are thus stored in indices (2*i) and (2*i+1).Of course, the children indices must be less than the tally otherwise they are considered inexistent.The Heap does arrange to preserve the following invariant:For any children B of a node A, A is sorted before B, in other words, (self sort: A before: B) = trueThis implies that the root is always the first element according to sort order."
"MCPatchTest",""
"MCMultiPackageLoader","A PackageLoader doing some additional cross-package checks"
"MetacelloBaseConfiguration","THIS IS AN EXPERIMENTAL CLASS. Use MetacelloConfigTemplate for creating configurations.Subclass me to create a new configuration, then edit and evaluate the following expression to create the initial baseline version:	""create baseline method""        MetacelloToolBox                 createBaseline: '1.0-baseline'                for: 'MyProject'                repository: 'http://www.example.com/MyProjectRepository'                requiredProjects: #('Gofer')                packages: #('MyProject-Core' 'MyProject-Tests')                dependencies:                        {('MyProject-Core' -> #('Gofer')).                         ('MyProject-Tests' -> #('MyProject-Core'))}                groups:                        {('default' -> #('Core')).                        ('Core' -> #('MyProject-Core')).                        ('Tests' -> #('MyProject-Tests'))}.	   ""create initial development method from the baseline""         MetacelloToolBox               createDevelopment: '1.0'               for: 'MyProject'                importFromBaseline: '1.0-baseline'                description: 'initial version'."
"AbstractBasicWidget","AbstractBasicWidget is an abstract class for basic widgets"
"DynamicGroup","A DynamicGroup is a group automatically updated whose default granularity is method."
"RPackageSetTest",""
"MemoryFileSystemDirectory","I represent a memory file system entry for a directory"
"InexactFloatPrintPolicy","I am InexactFloatPrintPolicy.Through FloatPrintPolicy and double dispatch I force Float>>#printOn:base: to dynamically use the faster but potentially less accurate way to print Floats using Float>>#absPrintOn:base:"
"UpdatingMenuMorph","A menu updating itself"
"AboutDialogWindow","Default superclass for application about dialogs."
"RPackageIncrementalTest","The tests takes as fixture the following situation (which is constructed partially)For tests that do not need to check the incremental construction.P1 	A1DefinedInP1>>methodDefinedInP1	B1DefinedInP1		A2DefinedInP2>>methodDefinedInP1  (was *P2)	P2	A2DefinedInP2>>methodDefinedInP2	B2DefinedInB2	P3	A3DefinedInP3		A2DefinedInP2>>methodDefinedInP3  (was *P2*)"
"FLPointerObjectCluster","I have the common behavior for storing and loading pointer objects."
"LargeNegativeInteger","Just like LargePositiveInteger, but represents a negative number."
"GeneralScrollPane","A scroll pane that handles its contents accurately."
"MetacelloPackageLoadDirective",""
"NBByteArraySize","A helper type, which takes a byte array argument and pushing its size"
"DialogWindowModel","A DialogWindowModel is a model used to describe a DialogWindow"
"SmalltalkSyntaxTutorial","The default ProfStef tutorial to learn Smalltalk syntax"
"UpdateStreamer","I'm a little class inspired heavily from Utilities that download update.list and launch update.you can tell me to update throw a given number of update or to be verbose.UpdateStreamer new 	beVerbose;	updateFromServer	This will update all the updates available and show up dialogs	"
"OSPlatform","An OSPlatform is an abstract representation of a 'OS platform'.Platforms can be hierarchical, e.g., a ""general"" platform as superclass and more specific platforms as subclasses as long as the subclasses provide sufficient means to identify themselves.The original implementation was for Tweak.Current		holds the current OSPlatform subclassArchitectural considerations:most platform specific methods that need to be added to the platform class should be in the form of extensions rather then adding them directly to this package. Otherwise the platform class will degenerate very quickly into a dependence hub for all kinds of sub systems."
"EUCTextConverterTest",""
"ZnPortNotANumber","ZnPortNotANumber is signalled when an URL is parsed containing an illegal port specification.Part of Zinc HTTP Components."
"PluggableDictionaryTest",""
"EventHandlerPlus","Support for handling mouseOver events (no button down)."
"Float","My instances represent IEEE-754 floating-point double-precision numbers.  They have about 16 digits of accuracy and their range is between plus and minus 10^307. Some valid examples are:		8.0 13.3 0.3 2.5e6 1.27e-30 1.27e-31 -12.987654e12Mainly: no embedded blanks, little e for tens power, and a digit on both sides of the decimal point.  It is actually possible to specify a radix for Float constants.  This is great for teaching about numbers, but may be confusing to the average reader:	3r20.2 --> 6.66666666666667	8r20.2 --> 16.25If you don't have access to the definition of IEEE-754, you can figure out what is going on by printing various simple values in Float hex.  It may help you to know that the basic format is...	sign		1 bit	exponent	11 bits with bias of 1023 (16r3FF) to produce an exponent						in the range -1023 .. +1024				- 16r000:					significand = 0: Float zero					significand ~= 0: Denormalized number (exp = -1024, no hidden '1' bit)				- 16r7FF:					significand = 0: Infinity					significand ~= 0: Not A Number (NaN) representation	mantissa	53 bits, but only 52 are stored (20 in the first word, 32 in the second).  This is because a normalized mantissa, by definition, has a 1 to the right of its floating point, and IEEE-754 omits this redundant bit to gain an extra bit of precision instead.  People talk about the mantissa without its leading one as the FRACTION, and with its leading 1 as the SIGNFICAND.The single-precision format is...	sign		1 bit	exponent	8 bits, with bias of 127, to represent -126 to +127                    - 0x0 and 0xFF reserved for Float zero (mantissa is ignored)                    - 16r7F reserved for Float underflow/overflow (mantissa is ignored)	mantissa	24 bits, but only 23 are storedThis format is used in FloatArray (qv), and much can be learned from the conversion routines, Float asIEEE32BitWord, and Float class fromIEEE32Bit:.Thanks to Rich Harmon for asking many questions and to Tim Olson, Bruce Cohen, Rick Zaccone and others for the answers that I have collected here."
"KMPerInstanceTests",""
"LessonTestInstanciation",""
"GZipConstants","This class defines magic numbers taken from the RFC1952 GZIP file format specification version 4.3 (1996) [1].  A class imports these constants as 'class variables' by including the following in its class definition:    poolDictionaries: 'GZipConstants' A method on the class side initialises the values. [1] http://www.ietf.org/rfc/rfc1952.txt  (Section 2.3.1 Member header and trailer) -------------8<----snip--------------- As an aside the following in [GzipConstants class >> initialize] does not match the specification for bit 5 as ""reserved"".     GZipEncryptFlag := 16r20.    ""Archive is encrypted"" I did find it defined here [2] & [3] however the FAQ [4] specifically says encryption is NOT part of the standard. This constant is only used in [GzipReadStream >> on:from:to] as...     (flags anyMask: GZipEncryptFlag)         ifTrue:[^self error:'Cannot decompress encrypted stream']. So perhaps its okay to leave but maybe some slight benefit from amending the text as follows..     GZipEncryptFlag := 16r20.    ""Archive is encrypted.  Not supported. Not part of the standard.""     ifTrue:[^self error:'Cannot decompress encrypted stream. Encryption is not part of RFC1952']. It is a better presentation to a user if you can indicate that it is someone else's fault that their decompress failed, and not Pharo. [2] http://www.onicos.com/staff/iz/formats/gzip.html[3] http://research.cs.wisc.edu/wpis/examples/pcca/gzip/gzip.h[3] http://www.gzip.org/#faq15"
"ProfStefAPIHelp","I'm a ProfStef which build a HelpSystem book by collecting comment from classes and method."
"GoogleIssueTracker","self example.IntegrationManager initialize.IntegrationManager default summary.see <http://code.google.com/p/support/wiki/IssueTrackerAPI> for a documentation of the google issue api."
"MCPseudoFileStream","A pseudo file stream which can be used for updates."
"NBFFICallbackType","Pushing a callback to stack"
"EdgeGripMorph","Similar to a ProportionalSplitterMorph but designed to attach to an edge of a single morph only."
"NewArrayNode","I represent a node for the genPushNewArray: opcode."
"RBUnclassifiedMethodsRule","See my #rationale."
"GoferSynchronize",""
"CommandLineTestRunner","I am command line test runner. I run a TestSuite and outpout the progress in a terminal friendly way."
"PluggableTextMorph",""
"HttpUrl","A URL that can be accessed via the Hypertext Transfer Protocol (HTTP), ie, a standard Web URLrealm = the name of the security realm that has been discovered for this URL.   Look it up in Passwords.Passwords = a Dictionary of (realm -> encoded user&password)TODO: use the username and password, if specified"
"RPackageExtensionMethodsSynchronisationTest",""
"FLLargeIdentityDictionary","I am an IdentityDictionary optimized for including a large number of elements."
"MCVersionNameAndMessageRequest",""
"PluggablePanelMorph","A pluggable panel morph which deals with changing children."
"JobProgressMorph","I combine a progress title and a JobPorgressBarMorph to a visual representation of a Job.Usually I am contained in the global instance of the SystemProgressMorph"
"BalloonFillData","This class is a simulation of the code that's run by the Balloon engine. For debugging purposes only."
"HDLintReport",""
"MetacelloVisitedPackages",""
"MyTestNotification",""
"RxsRange","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--I represent a range of characters as appear in character classes such as	[a-ZA-Z0-9].I appear in a syntax tree only as an element of RxsCharSet.Instance Variables:	first	<Character>	last	<Character>"
"HandleMorph","A HandleMorph provides mouse-up control behavior."
"RxsPredicate","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--This represents a character that satisfies a certain predicate.Instance Variables:	predicate	<BlockClosure>	A one-argument block. If it evaluates to the value defined by <negated> when it is passed a character, the predicate is considered to match.	negation	<BlockClosure>	A one-argument block that is a negation of <predicate>."
"FLSimpleCollectionCluster","A FLSimpleCollectionCluster is a special optional cluster that rather than using the default (variable object) serialization, uses #do: to iterate objects and #add: during materialization. So far we use it for Set, IdentitySet and OrderedCollection."
"MCFrontier",""
"ZdcSimpleSocketStreamTests","ZdcSimpleSocketStreamTests tests ZdcSimpleSocketStream"
"TextSelectionColor","I represent a text selection attribute that can be added to a text for a text emphazing (text color). I have a color block (colorBlock) which is evaluated in order to get the text color. I have three instances, one for the primary selection and the two others for the secondary selection and the find replace selection. PrimarySelection is used in TextEditor>>#storeSelectionInParagraph in order to emphasize the selection text if the selection text color setting is not nil.SecondarySelection and FindReplaceSelection are manage by MultiNewParagraph if secondary selection text and find replace selection text colors are not nil.Instance Variables	colorBlock:		<Block>colorBlock	- The block which is evaluated in order to get the text color"
"RBBlockLintRule","I am a special kind of rule where the verification is specified using a block. The methods checkClass: and checkMethods are the hooks to specify such verifications."
"RunArray","My instances provide space-efficient storage of data which tends to be constant over long runs of the possible indices. Essentially repeated values are stored singly and then associated with a ""run"" length that denotes the number of consecutive occurrences of the value.My two important variables are	runs	An array of how many elements are in each run	values	An array of what the value is over those elementsThe variables lastIndex, lastRun and lastOffset cache the last accessso that streaming through RunArrays is not an N-squared process.Many complexities of access can be bypassed by using the method	RunArray withStartStopAndValueDo:"
"NBFFICalloutError","My instances indicating an error during execution of FFI callout.To get a description, i look up in NBFFICallout for custom error messages , in addition to my superclass."
"DoItDeclaration","I represent the declaration of some code to evaluate.  My contents are the code to evaluate.Sending me the message #import makes me evaluate the code and return the result of the computation.Be careful, my #import method also handles ChangeSet interaction so far, handling Changeset preambles and Postscripts."
"SystemOrganizerTest",""
"MCSystemCategoryParser","A MCSystemCategoryParser extracts or set a category/protocol to the corresponding MCOrganizationDefinition."
"ZnPercentEncoder","I am ZnPercentEncoder.I implement RFC 3986 percent encoding and decoding.All characters that are not part of a safe set are encoded using a percent (%) followed by a two digit hexadecimal number of a byte value. Non-ASCII characters are first encoded, normally using UTF-8.My #encode: and #decode: messages work from String to String.My decoder additionally will accept + as an encoding for a space.See also http://en.wikipedia.org/wiki/Percent-encodingPart of Zinc HTTP Components"
"NBExternalString","NBExternalString type can be used to coerce squeak's String to char* back and forth.Use #String or #NBExternalString as type name.Some functions may accept null as a valid argument (if string is optional).You can set #optStringOrNull in callout options in that case.If type is used as return value type, then C string (char *) converted to ByteString instance.If return value is null, a nil will be answered instead."
"ReparseAfterSourceEditing",""
"ClassTreeExample","ClassTreeExample new openOn: Object"
"ZnCredential","I am ZnCredential, an abstract class representing credentials in a domain and realm.Part of Zinc HTTP Components."
"ValueHolder",""
"CustomParserTest",""
"MailMessage","I represent an Internet mail or news message.	text - the raw text of my message	body - the body of my message, as a MIMEDocument	fields - a dictionary mapping lowercased field names into collections of MIMEHeaderValue's	parts - if I am a multipart message, then this is a cache of my parts"
"PasteUpMorph","A morph whose submorphs comprise a paste-up of rectangular subparts which ""show through"".  Anything called a 'Playfield' is a PasteUpMorph.Facilities commonly needed on pages of graphical presentations and on simulation playfields, such as the painting of new objects, turtle trails, gradient fills, background paintings, parts-bin behavior, collision-detection, etc., are (or will be) provided.A World, the entire Smalltalk screen, is a PasteUpMorph.  A World responds true to isWorld.model		<not used>cursor		??padding		??backgroundMorph		A Form that covers the background.turtleTrailsForm			Moving submorphs may leave trails on this form.turtlePen				Draws the trails.lastTurtlePositions		A Dictionary of (aPlayer -> aPoint) so turtle trails can be drawn 						only once each step cycle.  The point is the start of the current stroke.isPartsBin		If true, every object dragged out is copied.autoLineLayout		??indicateCursor		??resizeToFit		??wantsMouseOverHalos		If true, simply moving the cursor over a submorph brings up its halo.worldState		If I am also a World, keeps the hands, damageRecorder, stepList etc.griddingOn		If true, submorphs are on a grid"
"ShouldBeImplemented","I am ShouldBeImplemented, an exception signaled when some method should have been implemented but was not.This is more like a placeholder during development."
"AJx87Register","I am an c87 Floating Point register"
"ChunkFileFormatParser","I represent the chunk file format.  Right now I know how to parse chunks from a readStream, but not how to write them."
"ClassDescriptionTest","This is the unit test for the class ClassDescription. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"PseudoMetaclass",""
"NBFloat64",""
"PreDebugWindow","I am the window that shows up when the debugger is launched.  I show you the first lines of the stack trace that caused my apparition, and buttons to allow you to: - resume the execution - abandon the execution - debug this error - create the method if it is MessageNotUnderstood exceptionTo see me, evaluate:2/0"
"RBAbstractCondition",""
"FontSubstitutionDuringLoading","signaled by font loading code when reading a DiskProxy that calls for a missing font."
"ISO88597TextConverter","Text converter for ISO 8859-7.  An international encoding used for Greek."
"PackageClassNodeExample",""
"UpdatingStringMorph","A StringMorph that constantly tries to show the current data from the target object.  When sent #step, it shows what the target objects has (target perform: getSelector).  When edited (with shift-click), it writes back to the target.floatPrecision = 1. to round to integer.floatPrecision = .1 to round to 1 decimal place, etc.Even when ((target isNil) or: [getSelector == nil]), the user would still like to edit the string with shift-click."
"RPackageTraitTest",""
"JPEGReadStream","Encapsulates huffman encoded access to JPEG data.The following layout is fixed for the JPEG primitives to work:	collection	<ByteArray | String>	position		<SmallInteger>	readLimit	<SmallInteger>	bitBuffer	<SmallInteger>	bitsInBuffer	<SmallInteger>"
"BehaviorTest",""
"FLMigration","I represent migration information about a class.See 'configuring-migration' protocol in FLMaterializer."
"TestObjectsAsMethods",""
"CriticBrowser","I am a browser for the SmallLint CriticsExample: | rule environment |rule :=  RBExcessiveArgumentsRule new.environment := (RBPackageEnvironment new packages: {RPackageSet named: 'Manifest-Core'}).(CriticBrowser openOnRule: rule onEnvironment: environment)	"
"ZnEntityTests",""
"RBSuperSendsRule",""
"RegexSyntaxError","This class represents syntax errors in regular expressions."
"RBJustSendsSuperRule","See my #rationale.Just sending super often happens due to code changes or when you simply forget that you wanted to extend the behavior of a superclass method."
"ProcessTerminateBug",""
"NumberTest",""
"ZnUserAgentSession","I represent a session store for an HTTP client instance of ZnUserAgent. I hold the cookie jar for the session and any authentication credentials used by the client.Part of Zinc HTTP Components."
"RPackageReleaseTest",""
"MCMockClassA","This is a mock class. The Monticello tests manipulated it to simulate a developer modifying code in the image."
"KMDispatcherTestCase",""
"RBTemporaryVariableCapitalizationRule","See my #rationale."
"CRCError",""
"CustomHelpHelpBuilder","This builder builds help topics from a help topic description (which is typically storedin a class). The help topic description object has to understand the following messages:  #bookName - should return the name of the help book  #icon - should return the icon of the help book  #key - should return a unique key to identify the book  #pages - should return an array of method selectors to call to get the books pages"
"MethodRepackaged",""
"RPackageCategorySynchronisationTest",""
"UTF8Error",""
"ObjectTest",""
"WeakSubscriptionBuilder","I am a wrapper around an Announcer, used to create weak subscriptions at subscription time.Use me like this:anAnnouncer weak subscribe: Announcement send: #foo to: barObject.I raise an error for block subscriptions, as they require non-existing Ephemeron support to function correctly."
"ByteString","This class represents the array of 8 bit wide characters."
"FLClassNotFound","I represent an error produced during materialization when a serialized class or trait name doesn't exist."
"Annotation","An Annotation is a simple class describing the kinds of annotations for code browser."
"RBAddRemoveDependentsRule","See my #rationale."
"FLWeakObjectsTest",""
"NetworkError","Abstract super class for all network related exceptions."
"TextEditorTest",""
"MCSortingTest",""
"ZnUtils","I am ZnUtils holding various utilities related to HTTP handling.Part of Zinc HTTP Components."
"RBRemoveParameterTest",""
"AnnouncementSetTest",""
"RGVariableDefinitionTest",""
"ZnPercentEncoderTests",""
"FLSingletonTest",""
"MCMergeResolutionRequest",""
"KMCategoryTarget",""
"NECLocalEntry","I represent a local variable"
"SearchFacade","SearchFacade is a facade for creating searching dialog window"
"BlockClosureTest",""
"ComposableMorph","Morph with an inset border by default and theme access."
"AJRegister",""
"Behavior","My instances describe the behavior of other objects. I provide the minimum state necessary for compiling methods, and creating and running instances. Most objects are created as instances of the more fully supported subclass, Class, but I am a good starting point for providing instance-specific behavior (as in Metaclass)."
"LabelSpec","A LabelSpec is a spec used to describe a label"
"RBUncommonMessageSendRule","See my #rationale."
"SimpleTestResourceA2",""
"ByteSymbolTest",""
"NOCEntryList","I am the list of entries (possible symbols) returned by nocompletion algorithm.I am sorted according to last acceptance from the user."
"TextAnchorTest",""
"FT2Error","This is an Error that knows how to get the Freetype2 error code and string."
"EncoderForV3","I add behaviour to Encoder to size and emit bytecodes for the Squeak V3.x VM bytecode set.  The intention is for another subclass to restrict the range of bytecodes used to long forms only, allowing the bytecode set to be redefined by avoiding using the many short forms.  The short forms may then be reassigned."
"DateTest","This is the unit test for the class Date. "
"DeflateStream","I'm the base class for ""stream compressor"". For example, my subclass GZipWriteStream can compress a stream contents using gzip algorithm.Try:gzData := String streamContents: [:aStream|         (GZipWriteStream on: aStream)                nextPutAll: 'Some data to be gzipped';                close. ].Transcript         show: gzData;         cr;        show: (GZipReadStream on: gzData) upToEnd;        cr.See InflateStream"
"ValueLink","A ValueLink is a Link containing a Value.Adding an object to a LinkedList which is not a Link will create a ValueLink containing that object.value - The object this link points to."
"RBConfigurableFormatter","RBConfigurableFormatter formats the Refactoring Browser's parse trees. It has many more formatting options than the default formatter used by the RB. To change the RB to use this formatter, execute ""RBProgramNode formatterClass: RBConfigurableFormatter"". For some refactorings the RB must reformat the code after the change, so it is good to have a formatter configured to your tastes.Instance Variables:	codeStream	<PositionableStream>	the stream we are writing our output to	indent	<Integer>	how many times are we indenting a new line -- indents are normally tabs but could be any whitespace string	lineStart	<Integer>	the position of the character that started the current line. This is used for calculating the line length.	lookaheadCode	<Dictionary key: RBProgramNode value: String>	sometimes we need to lookahead while formatting, this dictionary contains the nodes that have already been formatted by lookahead	originalSource	<String>	the original source before we started formatting. This is used to extract the comments from the original source."
"MCSnapshotReader","I am an abstract class defining the interface for reading sources containing class and method definitions.I should define loadDefinitions as a subclassResponsibility, but don't.MCVersionReader could be a subclass of me for reading sources containing additional metadata, but isn't. I'm useless and can be safely removed. I'm only referenced in MCMczReader>>extractDefinitionsFrom: and it can be replaced by MCReader."
"CaesarEcryptorDecryptor","A CaesarEcryptorDecryptor is a world know encryptng algorithm by rotation"
"WriteStreamTest",""
"TextKern","A TextKern encodes a kerning change applicable over a given range of text.  Positive values of kern spread letters out, negative kern will cause them to overlap more.  Note that kerns other than 0 will display somewhat slower, as kerning is not yet supported in the text scanning primitive. "
"OrderedIdentityDictionary","An OrderedIdentityDictionary is a dictionary which keep the order of addition of the elements"
"BlockLocalTempCounter","I am a support class for the decompiler that is used to find the number of local temps in a block by finding out what the stack offset is at the end of a block."
"MockCustomParser",""
"GoogleIssueDescription","A GoogleIssueDescription is a representation of a Google Issue Tracker issue first comment (the Google API have a special name for it)"
"RealEstateAgent","Responsible for real-estate management on the screen, which is to say, controlling where new windows appear, with what sizes, etc.  5/20/96 sw"
"MCMockClassH",""
"UserEditor","An UserEditor is a GUI for editing a user profile"
"RBSmalllintChecker",""
"RGTraitDefinition","RGTraitDefinition is the concrete representation of a trait (no class)"
"CollectionRootTest","I'm the root of the hierarchy of the collection tests."
"Date","Instances of Date are Timespans with duration of 1 day.Their default creation assumes a start of midnight in the local time zone."
"PragmaCollectorReset","A PragmaCollectorReset is an announce which is announced by a PragamColllector when it is reset.see PragmaCollector>>reset.Instance Variables	collector:		<PragmaCollector>collector	- the collector which is reset"
"MCRepositoryTest",""
"RBArgumentNode","I am a specific variable node for method and block arguments."
"KeyboardEvent",""
"InteractiveResolverTest",""
"SyntaxErrorNotification",""
"AJBaseReg",""
"CodeDeclaration","I'm the abstract superclass of all the code declarations that should exist in an exported file."
"ClassAPIHelpBuilderTest",""
"JobProgressBarMorph","A JobProgressBarMorph is a progress bar with a title and a icon to stop update.JobProgressBarMorph new openInWorld"
"PopupChoiceOrRequestDialogWindow",""
"BalloonEngineConstants",""
"RGAbstractContainer","This is the abstract class for container-based elements.Elements are separated in groups by kind (e.g classes, methods, pools, etc.)Subclasses have to define the kind of collection for a particular group of entities.For a container the use of a dictionary or another collection (e.g. SortedCollection) to store group of elements is independent."
"FLSignatureTest",""
"Object","Object is the root class for almost all of the other classes in the class hierarchy. The exceptions are ProtoObject (the superclass of Object) and its subclasses.Class Object provides default behavior common to all normal objects, such as access, copying, comparison, error handling, message sending, and reflection. Also utility messages that all objects should respond to are defined here.Object has no instance variables, nor should any be added. This is due to several classes of objects that inherit from Object that have special implementations (SmallInteger and UndefinedObject for example) or the VM knows about and depends on the structure and layout of certain standard classes.Class Variables:	DependentsFields		an IdentityDictionary		Provides a virtual 'dependents' field so that any object may have one		or more dependent views, synchronized by the changed:/update: protocol.		Note that class Model has a real slot for its dependents, and overrides		the associated protocol with more efficient implementations.	EventsFields			an IdentityDictionary that maps each object to its dependents.		Registers a message send (consisting of a selector and a receiver object)		which should be performed when anEventSymbol is triggered by the receiver.		Part of a new event notification framework which could eventually replace		the existing changed/update mechanism.  It is intended to be compatible		with Dolphin Smalltalk and VSE as much as possible.Because Object is the root of the inheritance tree, methods are often defined in Object to give all objects special behaviors needed by certain subsystems or applications, or to respond to certain general test messages such as isMorph.About at: index accepting float and not only integers This behavior is also free in the sense that the failure code is only invoked when theprimitive fails and so adds nothing to the cost of successful accesses,which are the high dynamic frequency operation.  It will also show up underprofiling if one is concerned about efficiency, and so isn't a hidden cost.It is also in keeping with Smalltalk's mixed mode/arbitrary precisionimplicit coercion number system that one *can* use fractions or floats asindices.  Stripping out coercions like this will make the system more brittle.  So please do *not* remove this ""hack"".  I think it's a feature and a useful  one.Can you give me an example that demonstrates the usefulness of thisfeature?| a r |a := Array new: 10 withAll: 0.r := Random new.100 timesRepeat: [| v | v := r next * 10 + 1. a at: v put: (a at: v) + 1].ai.e. I didn't have to provide an explicit rounding step.  That's useful.  But in general anywhere where an index is derived by some calculation not having to provide the rounding step could be useful/helpful/more concise.  e.g. (n roundTo: 0.1) * 10 vs ((n roundTo: 0.1) * 10) asInteger.Some thought went into the original choice.  It is not a hack but there by intent.  The integers are simply a subset of the reals and forcing the programmer to use them is favouring the machine above the programmer.But I think you should justify getting rid of it rather than my having to justify keeping it.  Getting rid of it risks breaking code.  If it is there but does not harm then why get rid of it?best Eliot Miranda "
"StackTest",""
"HSVAColorSelectorMorph","Colour selector featuring a saturation/volume area, hue selection strip and alpha selection strip."
"RBPushDownMethodRefactoring",""
"RBInlineParameterRefactoring",""
"NBWin32MessageBox",""
"ExpanderTitleMorph","The titlebar area for and ExpanderMorph. Includes title label and expand/collapse button."
"PrintVersionCommandLineHandler","Usage: printVersion	Documentation:Prints the version number in an easy to parse format. This can be used in Jenkins with the ""Description Setter"" Plugin. Configure it like this:Regular expression:  \[version\] (.*)Description: \1Examples:	$PHAROVM Foo.image printVersion	result will be something like:[version] 2.0 #20401"
"EncoderForLongFormV3","I am an alternate to EncoderForV3 that tries to use thje longest forms of bytecodes possible so as to avoid using as many bytecode as possible to allow for the unused portions of the bytecode set this makes available to be reassigned.I do not use the following ranges0 through 111	   0- 15 	0000iiii 	Push Receiver Variable #iiii	  16- 31 	0001iiii 	Push Temporary Location #iiii	  32- 63 	001iiiii 		Push Literal Constant #iiiii	  64- 95 	010iiiii 		Push Literal Variable #iiiii	  96-103 	01100iii 	Pop and Store Receiver Variable #iii	104-111 	01101iii 	Pop and Store Temporary Location #iii138-159	138-143 				Unused.	144-151 	10010iii 	Jump iii + 1 (i.e., 1 through 8).	152-159 	10011iii 	Pop and Jump 0n False iii +1 (i.e., 1 through 8).176-255	176-191 	1011iiii 	Send Arithmetic Message #iiii	192-207 	1100iiii 	Send Special Message #iiii	208-223 	1101iiii 	Send Literal Selector #iiii With No Arguments	224-239 	1110iiii 	Send Literal Selector #iiii With 1 Argument	240-255 	1111iiii 	Send Literal Selector #iiii With 2 Arguments= 112 + (160 - 138) + (256 - 176) =  214, or 84% of the bytecodes"
"RBLiteralToken","RBLiteralToken is the first-class representation of a literal token (entire literals, even literal arrays, are a single token in the ST80 grammar.).Instance Variables:	stopPosition	<Integer>	The position within the source code where the token terminates."
"PaginatedMorphTreeModel",""
"EntryCompletion","An EntryCompletion is a handler for the driving of the completion menu in a PluggableTextFieldMorph. The completion menu is an IdentifierChooserMorph which is typically built and popup when a character is entered in a PluggableTextFieldMorph. Instance Variables	chooseBlock:		<Block>	chooser:		<IdentifierChooserMorph>	dataSourceBlock:		<Block>	filterBlock:		<Block>	previousToken:		<String>chooseBlock	- One argument block which is evaluated when a token is chosen, the token is passed as argumentchooser	- The IdentifierChooserMorph which is currently openeddataSourceBlock	- The block that is evaluated in order to get the list of itemsfilterBlock	- The block used to filter the dataSource list, it takes 2 args, the first is an item from the current dataSource list element, the second is the token fetched from the requestor (the PluggableTextFieldMorph). It returns true if the current dataSource list element is to be keptpreviousToken	- Used to be able to not open the list if the current text in the PluggableTextFieldMorph was the previous chosen one"
"FloatTest","I provide a test suite for Float values. Examine my tests to see how Floats should behave, and see how to use them."
"FreeTypeCacheLinkedList",""
"SpecSplitterVertical","A SpecSplitterVertical is the description of the addition of a vertical splitter"
"FLWeakClassMock",""
"AssignmentNode","AssignmentNode comment: 'I represent a (var_expr) construct.'"
"NBOop","i am special ""type"", doing no conversion of any sort, just passing an object oop as it is."
"TabPanelBorder","Specialist border for a TabGroup panel. Does not draw border beneath selected tab."
"ZnLogSupportTests",""
"RBAddClassVariableChange",""
"Path","I'm a private and abstract filesystem path, independent of the string representation used to describe paths on a specific filesystem. I provide methods for navigating the filesystem hierarchy and working with absolute and relative paths. I only refer to a concrete file or directory with regard to a specific filesystem. Normally users should not use me directly. Path independent representation of delimiter is defined by DiskFileSystem current delimiter.API instance creation:#* and #/ are mnemonic to . and /whose arguments should  be string file- or directory names, not fragments of Unix path notation intended to be parsed.#/ and #* provide a mini-DSL for building up paths, while#readFrom:delimiter: parses path strings.Note that (Path with: 'parent/child/') isRelative returns truebecause it creates to a relative path to a file/directory called'parent/child'. In bash you'd escape the slashes like this: parent\/child\/similarly (Path with: '/parent/child/') isRelative returns trueThat's a relative path to '/parent/child'. In bash: /\parent\/child\/(Path with: '') isRelative returns falseBecause this is an absolute path to the root of the file system. Absolute pathshave an empty first element. If you consider $/ the separator,'/usr/local/bin' has an empty first element."
"FLCompiledMethodCluster","I am a cluster for CompiledMethod instances.How CompiledMethod trailers are serialized can be established using methods in 'configurating' class-side protocol."
"MetacelloConfigurationBrowser","A MetacelloConfigurationBrowser is simple tool to browse Metacello configurations published at http://www.squeaksource.com/MetaRepoForPharoXX where XX denotes different pharo versions.MetaRepoForPharo1.0 acts as a distribution of all the packages/projects that can be loaded in Pharo1.0. We are sorry for the name but the source limits the length of the project name: The full name is MetacelloRepositoriesForPharoXX.Metacello is a configuration language for packages. It allows one to define dependencies between packages as well as between complete projects. "
"RBInstanceVariableNamesSpellingRule","See #name for the area where I check spelling."
"MethodContainsHaltAction","Action when the method contains a halt"
"ProfStefHelpTutorialBuilderTest",""
"SmallInteger","My instances are 31-bit numbers, stored in twos complement form. The allowable range is approximately +- 1 billion (see SmallInteger minVal, maxVal)."
"WorkAreaMorph","This class is designed to be used as the container for morphs that are placed at absolute positions and is placed within a scroller.An example would be the background behind a page view in a word processor.Optimises #layoutChanged to not propagate to owner (assumed to be in a scroller)."
"AJReserveTemp","note: assembler should set size even before realizing a temp into stack location reference"
"DateAndTime","I represent a point in UTC time as defined by ISO 8601. I have zero duration.My implementation uses three SmallIntegers and a Duration:jdn		- julian day number.seconds	- number of seconds since midnight.nanos	- the number of nanoseconds since the second.offset	- duration from UTC.The nanosecond attribute is almost always zero but it defined for full ISO compliance and is suitable for timestamping."
"RxmSpecial","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A special node that matches a specific matcher state rather than any input character.The state is either at-beginning-of-line or at-end-of-line."
"SmallIdentityDictionaryTest",""
"YearMonthWeekTest","I am one of several Sunit test Cases intentended to provide complete coverage for the Chronology set of classes as part of the external testing. See DateAndEpochTestCase for a complete list.  tlk.I have no fixtures but do make sure to restore anything I change."
"PickOneSettingDeclaration","A CheckListSettingDeclaration is a setting for which the value domain is a list. Each element of the list is an instance of FixedSettingValue. If domainValues is set, then the list of valid values is constant (initialized at declaration time). Instead, if getter is set, then the setting list is always dynamically computed. See SettingManager comment for more explanations. Instance Variables"
"InstVarRefLocatorTest","This is the unit test for the class InstVarRefLocator. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"IdentityDictionary","Like a Dictionary, except that keys are compared with #== instead of #= .See the comment of IdentitySet for more information."
"KMDescription","A KMDescription is a window showing the description of shortcuts for a specified set of symbols reprensenting KMCategories"
"AbstractTool","I'm an abstract class grouping generic methods for managing packages/classes/groups/methods from a browser"
"RGClassDefinition","RGClassDefinition is the concrete representation of a class (no trait)"
"ZnMultiValueDictionaryTests",""
"MessageNotUnderstood","This exception is provided to support Object>>doesNotUnderstand:."
"NautilusPackageSelected","A NautilusPackageSelected is raised when a package is selected"
"IllegalName",""
"RPackageUnregistered","I am a public announcement sent when a new RPackage is unregistred ( kind  of removed from the system )"
"MultiByteFileStreamTest",""
"PointerExplorerWrapper","A subclass of ObjectExplorerWrapper for use with PointerExplorer.  #contents is overridden to work backwards: it returns wrappers for the objects pointing to item rather than for the objects that item points to."
"UIManager","UIManager is a dispatcher for various UI requests."
"JobEnd","A JobChange is an announcement for a job end.A JobChange is an announcement for a job change. To get notifySystemAnnouncer uniqueInstance 	on: JobEnd send: #XXX to: whoever."
"RBMethodNode","RBMethodNode is the AST that represents a Smalltalk method.Instance Variables:	arguments	<SequenceableCollection of: RBVariableNode>	the arguments to the method	body	<BRSequenceNode>	the body/statements of the method	nodeReplacements	<Dictionary>	a dictionary of oldNode -> newNode replacements	replacements	<Collection of: RBStringReplacement>	the collection of string replacements for each node replacement in the parse tree	selector	<Symbol | nil>	the method name (cached)	selectorParts	<SequenceableCollection of: RBValueToken>	the tokens for the selector keywords	source	<String>	the source we compiled	tags	<Collection of: Interval>	the source location of any resource/primitive tags"
"TextDiffBuilderTest","Tests for the new algorithm that is diffing changes.Tests from L. Uzonyi (from squeak trunk System.ul207and 208)"
"ExampleSetTest",""
"QSystemTally","Tally for assembling system profiles. It's a subclass of Link so we can chain tallies together in the receivers list."
"FLGlobalNotFound","I represent an error produced during materialization when a serialized global name doesn't exist (at Smalltalk globals)."
"BalloonLineSimulation","This class is a simulation of the code that's run by the Balloon engine. For debugging purposes only."
"ExampleRadioButtonModel","Model used for radio buttons in example of basic controls (see ""UITheme exampleBasicControls"")."
"NBUnixConstants",""
"LayoutProperties","This class provides a compact bit encoding for the most commonly used layout properties."
"FLDelayedSerializationMock",""
"NBWndClassEx",""
"MockSocketStream",""
"ExtendedNumberParser","An ExtendedNumberParser is extending Squeak number syntax with these rules- allow partial specification of integer and fraction parts:1.e2 .1e3 are both 100.0- allow plus sign before number and in exponent"
"FileExistsException",""
"MetacelloPackageSpec",""
"MouseWheelEvent","A mouse event generated by intercepting the keyboard events (ctrl+up/down arrow) generated by the VM in response to mouse wheel activity."
"MetacelloMCProjectSpec",""
"Url","A Uniform Resource Locator.  It specifies the location of a document on the Internet.  The base class is abstract; child classes break different types of URLs down in ways appropriate for that type."
"MorphEmbedder","A MorphEmbedder is a Spec model which embed a morph into a window"
"SubwidgetItem",""
"NBMemoryBlock",""
"RBTransformationRule","A RBTransformationRule is a special rule that not only detects problems but also can automatically transform the good."
"HttpUrlTest",""
"NullSound",""
"BasicBehaviorClassMetaclassTest","This class contains some tests regarding the classes 	Behavior		ClassDescription			Class			Metaclass---	"
"MetacelloGofer",""
"MockLessonView",""
"TaskListSystemSettings",""
"NautilusTest","A NautilusTest is a test class for testing the behavior of Nautilus"
"GoferUpdate",""
"NautilusShowCommentChanged","A NautilusShowCommentChanged is raised when showComment is switched"
"MorphTreeColumnButton",""
"ThreePhaseButtonMorph","A button morph with separate images for on, off, and pressed with the mouse. When the event actWhen occurs, send actionSelector with 'arguments' to target.  For other events, default to my eventHandler.  The current event is not supplied in the arguments to the actionSelector.  image (a.k.a. onImage) may not be nil.  offImage and pressedImage may be nil.  nil there means be transparent and show the underlying object.  Tools for debugging:Display the images momentarily under program control (for positioning) (self is an instance).	self state: #on.  self state: #off.	self state: #pressed.  self state: #off.Display a rectangle where the button is.	Display fillWithColor: bounds + (self world viewBox origin).	self invalidRect: bounds."
"MCWorkingCopyCreated","A MCWorkingCopyCreated is a announcement raised when a new MCWorkingCopy is created"
"ClassCommentReader",""
"TarArchive","This is a kind of archive that uses the TAR format (popular in Unix). It is here as a placeholder."
"EncoderForLongFormV3PlusClosures","An encoder for the V3 bytecode set augmented with the following bytecodes that are part of the full closure implementation.	138   10001010 jkkkkkkk		Push (Array new: kkkkkkk) (j = 0)								or	Pop kkkkkkk elements into: (Array new: kkkkkkk) (j = 1)	140   10001100 kkkkkkkk jjjjjjjj 	Push Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	141   10001101 kkkkkkkk jjjjjjjj 	Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	142   10001110 kkkkkkkk jjjjjjjj 	Pop and Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	143   10001111 llllkkkk jjjjjjjj iiiiiiii	Push Closure Num Copied llll Num Args kkkk BlockSize jjjjjjjjiiiiiiiiThis is an exact duplicate of EncoderForV3PlusClosures.Could be a trait (or in Newspeak, a Mixin).For now we impose upon you to synchronise any and all changes between these two classes."
"MCSnapshotBrowser",""
"RBSplitClassRefactoring",""
"PerformTest","I test a primitive failure with perform:withArguments: which was raised when selectors with many arguments was called from methods with small stack sizes."
"WeakRegistryTest",""
"BalloonMorph","A balloon with text used for the display of explanatory information.Balloon help is integrated into Morphic as follows:If a Morph has the property #balloonText, then it will respond to #showBalloon by adding a text balloon to the world, and to #deleteBalloon by removing the balloon.Moreover, if mouseOverEnabled is true (see class msg), then the Hand will arrange to cause display of the balloon after the mouse has lingered over the morph for a while, and removal of the balloon when the mouse leaves the bounds of that morph.  In any case, the Hand will attempt to remove any such balloons before handling mouseDown events, or displaying other balloons.Balloons should not be duplicated with veryDeepCopy unless their target is also duplicated at the same time."
"FLSerializationTest",""
"ClassCommentVersionsBrowser","A tool to read and browse class comment versions."
"NBExternalResourceExecutor","i am responsible for finalizing an external resource,registered using external resource manager.When object, registered as external resource being garbage collected,i telling an object's class to finalize it's associated data (by passing an object,received from #resourceData message sent to an object at registration time).I automatically keep tracking for session change (image save/boot), and ignore finalization of resources of old sessions (since they are not longer valid,and cannot be freed since session changed).Like that, a users of NBExternalResourceManager don't need to implement a session checking logic, and need only to:a) register object as external resource:     NBExternalResourceManager addResource: anObject.an object should understand the #resourceData message, which is remembered at registration point (it can be any external resource like, id, handle or memory pointer).Then, when object is garbage collected, its class will receive a message to finalize the resource data in #finalizeResourceData:The passed data is exactly same as previously returned by #resourceData method.An example:Imagine that you want to represent an external resource by keeping its handle.Object subclass: #MyExternalObject 	instanceVariableNames: 'handle'	classVariableNames: ''	poolDictionaries: ''	category: 'XYZ'	To let your object(s) to be managed by external resource manager, you need to register it.Usually you do it after successfully claiming an external resource:MyExternalObject>>initialize	handle := self createNewExternalResource.  ""claim resource""	self assert: self handleIsValid. ""etc...""		""Now, register receiver as external resource"" 	NBExternalResourceManager addResource: self ""Another form of use is: 	NBExternalResourceManager addResource: self data: handle.""----  If you used #addResource: method for registration, you should provide an implementation of #resourceData method:MyExternalObject>>resourceData	^ handle ""since we need only handle to identify external resource""----	Now, for properly finalizing the external resource we should implement:MyExternalObject class>> finalizeResourceData: aHandle	^ self destroyHandle: aHandle. ""do whatever is needed to destroy the handle""Note that in #finalizeResourceData: you cannot access any other properties of your instance, since it is already garbage collected. You also don't need to do a session checking, since it is done automatically by resource manager. "
"RBDefinesEqualNotHashRule","See my #rationale.When a class defines = also and not hash, this can lead to really subtle bugs and behavior where sometimes it appears that an object is in a set and sometimes not. One pattern proposed by Kent Beck in Best Smalltalk Practices is to define hash in terms of instance variable hash xor. Here is an example:		Book>>= anotherBook		^ (self author = anotherBook author) and: [self title = anotherBook title]		Book>>hash		^ (self title hash bitXor: self title hash		"
"PharoOrangeTheme","I am GLMUITheme2, a small customization based on GLMUITheme (Glamorous) by Tudor Girba.GLMUITheme2 defaultSettings: nil.GLMUITheme2 beCurrent.GLMUITheme2 setPreferredWorldBackground.World backgroundMorph: nil."
"DebuggerMethodMap","I am a place-holder for information needed by the Debugger to inspect method activations.  I insulate the debugger from details of code generation such as exact bytecode offsets and temporary variable locations. My function is to abstract the source map away from actual bytecode pcs to abstract bytecode pcs.To reduce compilation time I try and defer as much computation to access time as possible as instances of me will be created after each compilation.I maintain a WeakIdentityDictionary of method to DebuggerMethodMap to cache maps.  I refer to my method through a WeakArray to keep the map cache functional. If the reference from a DebuggerMethodMap to its method were strong then the method would never be dropped from the cache because the reference from its map would keep it alive."
"TransferMorph","This is a Morph that is used to visually indicate the progress of a drag operation, and also as a container for various bits of drag state information.It polls the shift state in its step method to update its copy state (shift pressed = should copy).And if you hit the Escape key while dragging, it aborts the drag operation."
"ColorArray",""
"ClassAPIHelpBuilder","A builder to build the API Help for a classInstance Variables	addMethods:		<Boolean>	addSubclasses:		<Boolean>	subclassesAsSeparateTopic:		<Boolean>addMethods	- When true the builder will include method helpaddSubclasses	- When true the builder will recursively go through and add subclassessubclassesAsSeparateTopic	- xxxxx"
"GrafPort",""
"ProcessTest","A ProcessTest holds test cases for generic Process-related behaviour."
"ForwardingSystemProgressItem",""
"PluggableMenuItemSpec",""
"MemoryHandle","I provide ""primitives"" for doing IO on files in a MemoryFileSystem. I delegate most of my actions to the MemoryFile. This way there is only one place needed where the data is stored."
"ZnChunkedReadStream","I am ZnChunkedReadStream, implementing HTTP 1.1 chunked transfer encoding on a wrapped streams.Clients should read me until I am atEnd.After I am completely read, I can tell you my totalSize and optional extraHeaders.Part of Zinc HTTP Components."
"TextInputFieldModel","I handle one line of text."
"StickynessBugz","A StickynessBugz is for mantis #5500 rectangles and ellipses don't act sticky when rotated even when they are..Instance Variables"
"UnixClipboard","The Unix vm does not do line-ending conversion, thus this subclass which specifies we convert CR's to LF's when pasting to it"
"PluggableListMorph","...When a PluggableListMorph is in focus, type in a letter (or severalletters quickly) to go to the next item that begins with that letter.Special keys (up, down, home, etc.) are also supported."
"GuideTest",""
"KMModifiedShortcut",""
"EUCTextConverter","Text converter for Extended Unix Character.  This is an abstract class.  The CJK variations are implemented as subclasses."
"BitBltTest",""
"MultiByteBinaryOrTextStream","It is similar to MultiByteFileStream, but works on in memory stream."
"SystemAnnouncement","The root announcement for the events coming from the Pharo system.Currently, it wraps the event that comes from the SystemChangeNotifier."
"MenuItemMorph","I represent an item in a menu.Instance variables:	isEnabled 	<Boolean>	True if the menu item can be executed.	subMenu 	<MenuMorph | nil>	The submenu to activate automatically when the user mouses over the item.	isSelected 	<Boolean>	True if the item is currently selected.	target 		<Object>		The target of the associated action.	selector 		<Symbol>	The associated action.	arguments 	<Array>		The arguments for the associated action.	icon		<Form | nil>	An optional icon form to be displayed to my left."
"ManyTestResourceTestCase",""
"ProfStefTestGo",""
"ClassRepackaged",""
"SystemReporter","SystemReporter offers a window where information about the system is gathered. This can be easily copied to the clipboard and be attached to a bug report for better identification of the context the bug occured in.To extend the SystemReporter:	- add a method		reportXYZ: aStream	  to the reporting category	- insert a line		add: #XYZ method: #reportXYZ	  to the initialize method"
"MailSender",""
"RBInlineMethodRefactoring",""
"WeakKeyAssociation","I am an association holding only weakly on my key."
"TextPrintIt",""
"RBAbstractClassVariableTest",""
"PluginTreeNode","A PluginTreeNode is a node of a NautilusPluginManagerTree"
"ZdcSimpleSocketStream","I am ZdcSimpleSocketStream.I am a ZdcAbstractSocketStream.I do a minimal implementation of the requirements defined by my superclass.I rely on the rather inefficient implementation of my superclass' methods, funneling all access through #next and #nextPut."
"ValueNotFound","I am ValueNotFound, an exception indicating that a value was not found in a Dictionary."
"SharedQueue","An implementation of a shared queue based on class Monitor.  Clients may may place items on the queue using nextPut: or remove them using methods like next or nextOrNil.  Items are removed in first-in first-out (FIFO) order.  It is safe for multiple threads to access the same shared queue, which is why this is a ""shared"" queue.[monitor] is used to synchronize access from multiple threads.[items] is an ordered collection holding the items that are in the queue.  New items are added  at the end, and old items are removed from the beginning.All methods must hold the monitor while they run."
"ShouldNotImplement","I am ShouldNotImplement, an exception signaled when a method was implemented but should not have been.This can happen when an implementation is inherited."
"PNGReadWriterTest",""
"RBToDoWithIncrementRule",""
"ZnRequestTests",""
"Color","This class represents abstract color, regardless of the depth of bitmap it will be shown in.  At the very last moment a Color is converted to a pixelValue that depends on the depth of the actual Bitmap inside the Form it will be used with.  The supported depths (in bits) are 1, 2, 4, 8, 16, and 32.  The number of actual colors at these depths are: 2, 4, 16, 256, 32768, and 16 million.  (See comment in BitBlt.)  To change the depth of the Display and set how many colors you can see, execute: (Display newDepth: 8).  (See comment in DisplayMedium)	Color is represented as the amount of light in red, green, and blue.  White is (1.0, 1.0, 1.0) and black is (0, 0, 0).  Pure red is (1.0, 0, 0).  These colors are ""additive"".  Think of Color's instance variables as:	r	amount of red, a Float between 0.0 and 1.0.	g	amount of green, a Float between 0.0 and 1.0.	b	amount of blue, a Float between 0.0 and 1.0.(But, in fact, the three are encoded as values from 0 to 1023 and combined in a single integer, rgb.  The user does not need to know this.)	Many colors are named.  You find a color by name by sending a message to class Color, for example (Color lightBlue).  Also, (Color red: 0.2 green: 0.6 blue: 1.0) or (Color r: 0.2 g: 0.6 b: 1.0) creates a color. (see below)	A color is essentially immutable.  Once you set red, green, and blue, you cannot change them.  Instead, create a new Color and use it.	Applications such as contour maps and bar graphs will want to display one of a set of shades based on a number.  Convert the range of this number to an integer from 1 to N.  Then call (Color green lightShades: N) to get an Array of colors from white to green.  Use the Array messages at:, atPin:, or atWrap: to pull out the correct color from the array.  atPin: gives the first (or last) color if the index is out of range.  atWrap: wraps around to the other end if the index is out of range.	Here are some fun things to run in when your screen has color:		Pen new mandala: 30 diameter: Display height-100.		Pen new web  ""Draw with the mouse, opt-click to end""		Display fillWhite.  Pen new hilberts: 5.		Form toothpaste: 30  ""Draw with mouse, opt-click to end""You might also want to try the comment in	Form>class>examples>tinyText...Messages:	mixed: proportion with: aColor	Answer this color mixed with the given color additively. The proportion, a number between 0.0 and 1.0, determines what what fraction of the receiver to use in the mix.	+ 	add two colors	- 	subtract two colors	*	multiply the values of r, g, b by a number or an Array of factors.  ((Color named: #white) * 0.3) gives a darkish gray.  (aColor * #(0 0 0.9)) gives a color with slightly less blue.	/	divide a color by a factor or an array of three factors.	errorForDepth: d     How close the nearest color at this depth is to this abstract color.  Sum of the squares of the RGB differences, square rooted and normalized to 1.0.  Multiply by 100 to get percent.	hue			Returns the hue of the color. On a wheel from 0 to 360 with pure red at 0 and again at 360.	saturation	Returns the saturation of the color.  0.0 to 1.0	brightness	Returns the brightness of the color.  0.0 to 1.0	name    Look to see if this Color has a name.	display	Show a swatch of this color tracking the cursor.	lightShades: thisMany		An array of thisMany colors from white to the receiver. 	darkShades: thisMany		An array of thisMany colors from black to the receiver.  Array is of length num.	mix: color2 shades: thisMany		An array of thisMany colors from the receiver to color2.	wheel: thisMany			An array of thisMany colors around the color wheel starting and ending at the receiver.	pixelValueForDepth: d    Returns the bits that appear be in a Bitmap of this depth for this color.  Represents the nearest available color at this depth.  Normal users do not need to know which pixelValue is used for which color. Messages to Class Color.	red: r green: g blue: b		Return a color with the given r, g, and b components.	r: g: b:		Same as above, for fast typing. 	hue: h saturation: s brightness: b		Create a color with the given hue, saturation, and brightness.	pink 	blue	red ...	Many colors have messages that return an instance of Color.	canUnderstand: #brown	  Returns true if #brown is a defined color.	names		An OrderedCollection of the names of the colors.	named: #notAllThatGray put: aColor    Add a new color to the list and create an access message and a class variable for it.	fromUser	Shows the palette of colors available at this display depth.  Click anywhere to return the color you clicked on.	hotColdShades: thisMany	An array of thisMany colors showing temperature from blue to red to white hot.    stdColorsForDepth: d        An Array of colors available at this depth.  For 16 bit and 32 bits, returns a ColorGenerator.  It responds to at: with a Color for that index, simulating a very big Array.    colorFromPixelValue: value depth: d    Returns a Color whose bit pattern (inside a Bitmap) at this depth is the number specified.  Normal users do not need to use this.(See also comments in these classes: Form, Bitmap, BitBlt, Pattern, MaskedForm.)"
"ZdcAbstractSocketStream","I am ZdcAbstractSocketStream, a binary read/write stream for socket communication.Interally, IO is done through a read and a write ZdcIOBuffer.I am abstract, my subclasses should implement actual IO through a delegate."
"HColorSelectorMorph","ColorComponentSelector showing a hue rainbow palette."
"LoggingSystemProgressItemMorph",""
"RBPushDownInstanceVariableTest",""
"MetacelloValidationCriticalWarning","MetacelloValidationCriticalWarning indicates that there is a logical inconsistency that may not be intentional and that could cause incorrect loads"
"Halt","Halt is provided to support Object>>halt."
"NautilusUITest","A NautilusUITest is a test class for testing the behavior of NautilusUI"
"ZdcIOBufferTests","ZdcIOBufferTests holds unit tests for ZdcIOBuffer."
"TimeTest","This is the unit test for the class Time."
"Password","""Hold a password.  There are three ways to get the password.If there is no password (sequence == nil), ask the user for it.If the use supplied one during this session, return that.  It is cleared at shutDown.If sequence is a number, get the server passwords off the disk.  File 'sqk.info' must be in the same folder 'Squeak.sources' file.  Decode the file.  Return the password indexed by sequence."""
"SocketStream","SocketStream is a wrapper for class Socket making it easy to write networking code by giving the programmer a stream-like protocol. A Socket is a two way communication link with two logically separate channels - input and output. The Socket class is the lowest level in Pharo for network communication and using it directly can be difficult and bug prone.A SocketStream can be in binary or ascii mode, ascii is the default which means you are transmitting and receiving Strings. Most Internet protocols are in clear text ascii, like for example HTTP. Another setting is what timeout you want to use - default is the standardTimeout from Socket. More settings can be found in the method category 'configuration'.Simplest example of connecting, sending/receiving and closing:| stream result |stream := SocketStream openConnectionToHostNamed: 'www.pharo-project.org' port: 80.[[stream nextPutAll: 'GET / HTTP/1.0'; crlf; crlf; flush.result := stream upToEnd. ""Give us all data until the socket is closed.""Transcript show: result; cr.]	ensure: [stream close]]		on: ConnectionTimedOut		do: [:ex | Transcript show: ex asString;cr. ex resume]There are two important things to note above:	- The methods in category ""stream in"" can signal two exceptions (unless turned off with #shouldSignal:):		ConnectionClosed and ConnectionTimedOut	- We close the stream using #ensure:, that is to make sure it isn't left opened.	- We use #on:do: to catch any signal. In this case we do not need to catch ConnectionClosed since #upToEnd does that for us intrinsically.----------------SocketStream (below called SS) is a reimplementation of 'Old'-SocketStream (below called OSS) - the class that originates from the original Comanche implementation but now is included in standard Squeak. SS has the same protocol as OSS and is meant to replace it. SS is faster, more flexible, is better documented and adds a few features:1. #shouldSignal:, which decides if SS should signal low level Socket exceptions (true) or if it should swallow them like original OSS did. Default is true. The only reason I added this is for backwards compatibility - not signalling causes problems - see bug 4 below.2. #nextAllInBuffer, #nextInBuffer:, #skip:, #receiveData:, #nextPutAllFlush: and #recentlyRead are new additions to the public protocol.It also fixes various bugs:1. #isDataAvailable could theoretically answer false, when there actually is some in the buffer in OSS. If #receiveDataIfAvailable reads the last byte then the following ""socket dataAvailable"" would answer false. So the last byte would be sitting in the inStream missed.2. #upToAll: in OSS has several problems, for example - #positionOfSubCollection:ifAbsent: which was introduced answers one position too low. This was compensated in upToAll:, but only in the pushBack: call, not the actual result being returned which was cut short 1 byte. Amusingly this makes KomHttpServer not use ""Keep-Alive"" since the last $e in 'Alive' was cut short. :)3. SS doesn't inherit from PositionableStream since that just breaks various inherited messages, like for example #skip:. OSS should IMHO be changed to inherit from Object - or of course, replaced in full with SS. :)4. Since SocketStream by default signals closes and timeouts the SocketStreamTest now passes. The reason for SocketStream to fail is that while it does timeout on a low level (#SocketStream>>receiveData doesn't hang forever) - the callers of #receiveData sometimes loop - like in #next:, and thus eliminates the timeout. SS warns about some methods (in their method comments) not honouring timeouts if shouldSignal is false, I really don't know what they should do in that case:	#next:, #upTo:, #upToAll: and #upToEnd (and #receiveData:)The primary reason for the SS implementation is optimal performance. The main differences in implementation with the old OSS are:1. SS uses two buffers directly (inBuffer and outBuffer) with pointers marking start and stop within the buffer. OSS instead uses two regular streams, a ReadStream and a WriteStream. Using internal buffers makes it possible to avoid copying and reallocation in various ways, it also makes SS be able to have specialized growing/buffer moving behaviour.2. #upTo:, #upToAll: and #peekForAll: uses selectged String messages that in turn uses fast primitives for searching. OSS used other messages that fell back on byte per byte reading.3. #receiveData in OSS creates a temporary buffer stream for each call! During a long read operation, like say #upToAll: (which for example is used when uploading files using HTTP POST forms), this is devastating - especially since the default size is only 2000 bytes - and leads to a very high number of low level read operations on the Socket, typically 100 times more calls than with OSS. The buffer in OSS is held in an instvar (not recreated for each call), is larger from the start and above all - grows dynamically by doubling. OSS can also avoid a grow/reallocation by doing a ""move down"" if data has been read from the SS as it comes in and through that making room in the lower part of the inBuffer. The net result is that upToAll: for large files is about 10 times faster.4. The implementation of upTo: and upToAll: tries to avoid doing unnecessary find operations in the buffer and is greedy by default, which means it favors reading more data - if available - before searching for the stop sequence. If we had #findString:startingAt:stoppingAt: this wouldn't have to be greedy and we wouldn't be needlessly scanning dead buffer area. VM hackers? Also, while you are at it - make it work for ByteArrays too. :)SS can not be run unbuffered, since that seems unneeded. The option to autoFlush is still available, with it set to true SocketStream (just like OSS) will flush on its own on each nextPut:/nextPutAll:, otherwise flushing it will have to be done manually but is done on close.The first performance tests shows that, as noted above, receiving large amounts of data using #upToAll: is greatly improved - factor of 10. Serving HTTP with small payloads seemed at first not be faster at all - but this is due to the high overhead of Socket connect/close and other things. Increasing payloads show a difference and especially with keep alive on - where the new SS roughly doubles the throughput!"
"ClassChangeRecord","A ClassChangeRecorder keeps track of most substantive changes premissible in a project, isolated or not.Structure:inForce		a boolean			Tells whether these changes are in effect.			true for all changeSets in and above the current project.			It should be sufficient only to record this for the changeSet			as a whole, but this redundancy could help in error recovery.classIsLocal	a boolean			True if and only if this class is defined in this layer of the			project structure.changeTypes an identitySet			Summarizes which changes have been made in this class.			Values include #comment, #reorganize, #rename,			and the four more summarized below.thisName	a string			Retains the class name for this layer.priorName	a string			Preserves the prior name.thisComment	a text			Retains the class comment for this layer.priorComment	a text			Preserves the prior comment.thisOrganization	a classOrganizer			Retains the class organization for this layer.priorOrganization	a classOrganizer			Preserves the prior organization.thisMD	a methodDictionary			Used to prepare changes for nearly atomic invocation			of this layer (see below).priorMD	a methodDictionary			Preserves the state of an altered class as it exists in the next			outer layer of the project structure.methodChanges		a dictionary of classChangeRecords			Retains all the method changes for this layer.Four of the possible changeTypes are maintained in a mutually exclusive set, analogously to MethodChangeRecords.  Here is a simple summary of the relationship between these four changeType symbols and the recording of prior state			|	prior == nil			|	prior not nil		---------	|----------------------------	|--------------------	add		|	add					|	change	---------	|----------------------------	|--------------------	remove	|	addedThenRemoved	|	removeA classChangeRecorder is notified of changes by the method		noteMethodChange: <ClassChangeRecord>.ClassChangeRecorders are designed to invoke a set of changes relative to the definition of a class in an prior layer.  It is important that both invocation and revocation of these changes take place in a nearly atomic fashion so that interdependent changes will be adopted as a whole, and so that only one flush of the method cache should be necessary.  A further reason for revocation to be simple is that it may be requested as an attempt to recover from an error in a project that is failing."
"TimeStampMethodConverter","A TimeStampMessageConverter is a wrapper wich display the timestamp of the provided message"
"FLOptimizedObjectCluster","I have shared behavior of some optional clusters."
"PreorderGuide","I traverse the filesystem in depth-first pre order. Given this hierarchy:alpha	beta	gammadelta	epsilonI would visit the nodes in the following order: alpha, beta, gamma, delta, epsilon.I use my work instance variable as a stack. I push nodes to be visited and visit them in reverse order."
"NBMacExternalHeapManager",""
"PathTest",""
"MD5","This class implements the MD5 128-bit one-way hash function. It uses the MD5Plugin for better performance. Some methods are taken from the original version of MD5NonPrimitive."
"OrderedCollectionTest","These test cases demonstrate addition of items into an OrderedCollection as well as item removal.Some of the assertions are quite complicated and use a lot of collection protocol. Such methods do not test one single method, but protocol in general."
"KMPlatformSpecificShortcut",""
"TimeProfilerNode","A TimeProfilerNode represents a node in the tally tree"
"MetacelloAtomicLoadDirective",""
"ShortPointArray","This class stores points that are in short integer range (e.g., -32767 <= value <= 32768). It is used to pass data efficiently to the primitive level during high-bandwidth 2D graphics operations."
"ManifestManifestCriticBrowser",""
"MCDirectoryRepositoryTest",""
"TextContainer","A TextContainer models the shape of an ownerMorph, possibly occluded by one or more occludingMorphs, and scans this shape to provide a list of rectangles suitable for layout of text.  It does this by displaying the shadow of the ownerMorph in black, and any occludingMorphs in white, on its shadowForm.  It then scans horizontal strips of appropriate height to find unbroken intervals of black, greater than minWidth in extent.  Conputation of the rectangles is done on demand, and results are cached so that text can be redisplayed without having to recompute the rectangles."
"RPackageObsoleteTest",""
"SelectRuleBrowser","To select rules."
"ZnFileSystemUtils","I am ZnFileSystemUtils.I help is abstracting over API differences pre and post the introduction of FileSystem in Pharo 2.0Part of Zinc HTTP Components."
"ClassRenameFixTest",""
"RBCollectionProtocolRule",""
"RBParseTreeSearcher","ParseTreeSearcher walks over a normal source code parse tree using the visitor pattern, and then matches these nodes against the meta-nodes using the match:inContext: methods defined for the meta-nodes.Instance Variables:	answer	<Object>	the ""answer"" that is propagated between matches	argumentSearches	<Collection of: (Association key: RBProgramNode value: BlockClosure)>	argument searches (search for the BRProgramNode and perform the BlockClosure when its found)	context	<RBSmallDictionary>	a dictionary that contains what each meta-node matches against. This could be a normal Dictionary that is created for each search, but is created once and reused (efficiency).	messages	<Collection>	the sent messages in our searches	searches	<Collection of: (Association key: RBProgramNode value: BlockClosure)>	non-argument searches (search for the BRProgramNode and perform the BlockClosure when its found)"
"ClassDiffBuilder","I'm like TextDiffBuilder, but I split the input text by Character >> #separators, instead of new lines. I'm probably ment to create diffs of class definitions."
"FLFuelCommandLineHandler","I handle .fuel files that are passed as arguments when starting the image. Usage: fuel [save] [quit] <fuelFile> 	save    save the image after loading <fuelFile>	quit    Don't save the image and directly quit the image fater loading <fuelFile>	Documentation:This command will load the <fuelFile> and materialize/install it's contents. If no argument is specified the image continues running with the loaded contents.Example:	#Load a fuel file and save and quit the image with the contents:	./vm.sh Pharo.image save quit path/to/foo.fuel	#Load the contents of foo.fuel and save the image, but continue running:	./vm.sh Pharo.image save path/to/foo.fuel		#Load the contents of foo.fuel and continue running without saving:	./vm.sh Pharo.image path/to/foo.fuel"
"FooSharedPool","Just a class for testing."
"CP1253TextConverter","Text converter for CP1253.  Windows code page used for Greek."
"RxmLink","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A matcher is built of a number of links interconnected into some intricate structure. Regardless of fancy stuff, any link (except for the terminator) has the next one. Any link can match against a stream of characters, recursively propagating the match to the next link. Any link supports a number of matcher-building messages. This superclass does all of the above. The class is not necessarily abstract. It may double as an empty string matcher: it recursively propagates the match to the next link, thus always matching nothing successfully.Principal method:	matchAgainst: aMatcher		Any subclass will reimplement this to test the state of the matcher, most		probably reading one or more characters from the matcher's stream, and		either decide it has matched and answer true, leaving matcher stream		positioned at the end of match, or answer false and restore the matcher		stream position to whatever it was before the matching attempt.Instance variables:	next		<RxmLink | RxmTerminator> The next link in the structure."
"NECSelfEntry","I represent self"
"Compiler","The compiler accepts Smalltalk source code and compiles it with respect to a given class. The user of the compiler supplies a context so that temporary variables are accessible during compilation. If there is an error, a requestor (usually a kind of StringHolderController) is sent the message notify:at:in: so that the error message can be displayed. If there is no error, then the result of compilation is a MethodNode, which is the root of a parse tree whose nodes are kinds of ParseNodes. The parse tree can be sent messages to (1) generate code for a CompiledMethod (this is done for compiling methods or evaluating expressions); (2) pretty-print the code (for formatting); or (3) produce a map from object code back to source code (used by debugger program-counter selection). See also Parser, Encoder, ParseNode."
"SettingBrowser","<help>! The User interfaceA SettingBrowser allows the browsing as well as the editing of setting values.For each setting, a label and an input widget allowing the change of the setting value are shown.!! Browsing standards settingsIn order to open a setting browser one can also use the expression below:--------------------SettingBrowser open--------------------It opens a SettingBrowser for all settings declared with the standard 'systemsettings' pragma keyword. To see how these settings are declared in the image, you can browse all senders of #systemsettings:--------------SystemNavigation new  browseAllCallsOn: #systemsettings--------------!! Browsing application specific settingsFor specific applications, other pragma keywords can be used. These keywords can be passed as follow:--------------------(SettingBrowser forKeywords: #('blob')) open.--------------------Then, only settings which are declared with the keyword 'blob' are viewed. Here is an example of such a setting declared in the class side of a class BlobSettings --------------------BlobSettings class>>blobSettingOn: aBuilder	<blob>	(aBuilder group: #blobEditing) 		label: 'Editing' translated;		parent: #blobBrowsing; 		description: 'All settings concerned with blob editing' translated;		with: [				(aBuilder setting: #color)	...--------------------The expression 'SettingBrowser open' is then equivalent to the '(SettingBrowser forKeywords: #('systemsettings')) open' expression.!! FilteringThe SettingBrowser has a filtering functionality to limitate the number of settings. You can enter a token in the input field of the toolbar in order to show only settings that are matching the token.Two filtering modes are allowed:  with a substring or with a regular expression.- with a substring: only settings which name, description, pragma class or method selector includes this substring are viewed; - with a regular expression: the same as with a substring except that the input is used as a regular expression. This filtering is applied if the Regexp checkbox is checked.! How to declare a settingA setting is declared with a method class side. This kind of method takes a builder as argument and a standard setting is tagged with the <systemsettings> pragma. The builder argument serves as a facade for the declaration.!!A simple boolean setting exampleLet's start with a setting declaration example:CodeHolderSystemSettings class>>caseSensitiveFindsSettingsOn: aBuilder	<systemsettings>	(aBuilder setting: #caseSensitiveFinds) 		label: 'Case sensitive search' translated;		description: 'If true, then the ""find"" command in text will always make its searches in a case-sensitive fashion' translated;		setSelector: #caseSensitiveFinds:;		getSelector: #caseSensitiveFinds;		target: TextEditor;		parent: #codeEditing.For this setting to be declared, we make the asumption that we have TextEditor class>>caseSensitiveFinds and TextEditor class>>caseSensitiveFinds: methods in order to change the preference value. To declare a setting, just send #setting: to the builder with its identifier, a Symbol passed as argument. It creates a setting node. Then you can set the label, the description with #label: and #description sent to the newly created setting node. You also have to set the selectors for setting and getting the preference value as well as the target to which these accessors are sent  (often a class). This is done by sending respectively, #setSelector:, #getSelector: and #target: to the setting node.Because all settings are organized in trees we need a way to indicate what is the position of the setting node in the overall setting trees list. In fact it can be done two ways. The first way is to use the #parent: message (A second possibility is to declare a subtree in one method, it is explained later in this documentation).The #parent: message is send for non root settings. #parent takes the identifier of the parent setting as argument.You may notice that in this example,  if we don't take into account the $: at the end of the setting accessor, the getting and the setting accessors are the same. This is often the case. You can simply set the setter and the getter by sending the #selector: message to the setting node. Thus the declaration is simplified as follow:CodeHolderSystemSettings class>>caseSensitiveFindsSettingsOn: aBuilder	<systemsettings>	(aBuilder setting: #caseSensitiveFinds) 		label: 'Case sensitive search' translated;		description: 'If true, then the ""find"" command in text will always make its searches in a case-sensitive fashion' translated;		selector: #caseSensitiveFinds;		target: TextEditor;		parent: #codeEditing.You may also notice that the identifier of the setting is then the same as the selector. In this case, you can omit to set the selector because by default, the identifier is used as the selector for getting the preference value and the identifier concatenated with a $: at the end is used as the setting selector. Thus the declaration is simplified again as follow:CodeHolderSystemSettings class>>caseSensitiveFindsSettingsOn: aBuilder	<systemsettings>	(aBuilder setting: #caseSensitiveFinds) 		label: 'Case sensitive search' translated;		description: 'If true, then the ""find"" command in text will always make its searches in a case-sensitive fashion' translated;		target: TextEditor;		parent: #codeEditing.Finally, if you decide to declare a setting directly in the class which implements the selector, the target information can be also omitted because the class in which the setting is declared is used by default. Thus the simplest declaration can be:TextEditor class>>caseSensitiveFindsSettingsOn: aBuilder	<systemsettings>	(aBuilder setting: #caseSensitiveFinds) 		label: 'Case sensitive search' translated;		description: 'If true, then the ""find"" command in text will always make its searches in a case-sensitive fashion' translated;		parent: #codeEditing.!!Declaring a subtree in one single methodDirectly declaring a sub-tree of settings in one method is also possible. Then, typically, a root group is declared for the application settings and the children settings themselves are also declared within the same method as in the example below in which #formatCommentWithStatements and #indentString are directly declared as children of the #configurableFormatter setting:RBConfigurableFormatter class>>settingsOn: aBuilder	<systemsettings>		(aBuilder group: #configurableFormatter)		target: self;		parent: #refactoring;		label: 'Configurable Formatter' translated;		description: 'Settings related to the formatter' translated;		with: [			(aBuilder setting: #formatCommentWithStatements)				label: 'Format comment with statements' translated.			(aBuilder setting: #indentString)				label: 'Indent string' translated]!!Optional settingAny setting can have children. In the case where a boolean setting is used as a parent, then, its children are chown only if the parent preference value is true.!!Range settingYou send the #range: message to the builder instead of the #setting: message. In addition, you send the #range: message to the setting with an interval as argument in order to indicate the valid range.screenMarginSettingOn: aBuilder	<systemsettings>	(aBuilder range: #fullscreenMargin)		target: SystemWindow;		parent: #windows;		label: 'Fullscreen margin' translated;		description: 'Specify the amount of space that is let around a windows when it''s opened fullscreen' translated;		range: (-5 to: 100).!!List settingFor this kind of setting, the SettingBrowser will show a drop list. Here is an example for the window position strategy. Notice that the setting is declared by sending the #pickOne message to the builder. Notice also that the list of valid values are given by sending the #domainValues: message to the setting. The argument is an array of association. Each association key is the label that is shown and the corresponding association value gives the value that will be assigned to the preference.windowPositionStrategySettingsOn: aBuilder	<systemsettings>	(aBuilder pickOne: #usedStrategy) 		label: 'Window position strategy' translated;		target: RealEstateAgent;		domainValues: {			'Reverse Stagger' translated -> #staggerFor:initialExtent:world:. 			'Cascade' translated -> #cascadeFor:initialExtent:world:. 			'Standard' translated -> #standardFor:initialExtent:world:};!!LauncherA launcher is a particular setting. It allows to launch a script directly from the setting browser. Imagine that you have changed some settings and that you need to evaluate a script in order to update some other objets. It can be used also to configurate globally a package of the entire image.As an example, in order to use True Type Fonts, the system must be updated by collecting all the available TT fonts. This can be done by evaluating the following expression:-------------FreeTypeFontProvider current updateFromSystem-------------In order to be able to launch this script from the setting browser, you have to declare a launcher. For example, look-at how the script for the TT fonts is declared in GraphicFontSettings class >> #standardFontsSettingsOn:.GraphicFontSettings class >> #standardFontsSettingsOn:	<systemsettings>	(aBuilder group: #standardFonts)		...		(aBuilder launcher: #updateFromSystem)				order: 1; 				target: FreeTypeFontProvider;				targetSelector: #current;				description: 'Update available fonts by scanning the current system';				script: #updateFromSystem;				label: 'Update fonts from system' translated.Notice that you send #launcher: to the builder in order to create the setting node, then you send #script: to the created node with the selector of the script passed as argument.</help>Implementation detailsSee also SettingNode, SettingTree, SettingNodeBuilder and SettingTreeBuilder classes.Instance Variables	roots:		<Collection of SettingTreeNode>	searchedText:		<String>	status:		<WriteStream>	collector:		<SettingCollector>roots	- the roots of the viewed setting treessearchedText	- the string used as a filter token or regexp in order to select viewed settingsstatus	- a WriteStream used in order to store useful information which are shown when no current item is selectedcollector	- The SettingCollector which has the responsibility to collect settings and to build viewed trees"
"PersonDataExample",""
"RBLintRule","I represent an executable check applied on an environment (groups of classes, methods... )"
"PackageAPIHelpBuilder",""
"MFClassA","I'm a dummy class just to have a package that is not empty."
"RPackageAnnouncement",""
"RGContainer","A concrete container already knows how to treat classes, methods and packages. "
"RBRemoveClassTest",""
"DeleteVisitor","I delete the directory tree that I visit. I use the PostorderGuide so that I can delete files before deleting their containing directories."
"SoundService","This is the AppRegistry class for the sound system.A sound system offers a small protocol for playing sounds and making beeps and works like a facade towards the rest of Squeak. A sound system is registered in this registry and can be accessed by ""SoundService default"". This way we decouple the sound system from the rest of Squeak and make it pluggable. It also is a perfect spot to check for the SoundSettings class>>soundEnabled."
"ClassFactoryForTestCaseTest",""
"PointerFinderTest",""
"ListItemWrapper","Contributed by Bob Arning as part of the ObjectExplorer package."
"FLMaterialization","I implement the algorithm for materializing an object graph on a stream. FLMaterializer known how to build instances of me."
"NavigationHistory","I act as a web browser history"
"NewListModel","NewListModel is a model used as an example for NewList behavior"
"FontChooserMorph","I'm the UI of a font chooser. "
"IdentityBagTest",""
"AlphaBlendingCanvas","see ColorMappingCanvas comment."
"CustomHelp","This is a common superclass for custom help. Subclasses of this class are automatically included into the system help.By default the informations provided on the receiver class are converted into help topics by a specific builder - here the CustomHelpHelpBuilder. Note that you can provide an own custom builder by overriding the #builder method"
"MCMock",""
"RBBrowserEnvironment",""
"FLGlobalSendMock",""
"MCMcdWriter",""
"ExampleForTest1",""
"MessageListNonInspectableNode",""
"NautilusProtocolSelected","A NautilusCategorySelected is raised when a category is selected"
"WindowClosed",""
"FuzzyLabelMorph","A label that underdraws to the top-left, top-right, bottom-right and bottom left by a specifed offset in a contrasting colour to the receiver's with a specified alpha value."
"IdentityTransform",""
"GoferResource",""
"NECController","I live as an instance variable in a Browser, Debugger, Workspace or other window. I'm the glue between all participants of the completion system. I create the NECContext and pass myself to the NECMenuMorph. I process the keyboard events and pass them to the NECMenuMorph or close the morph if needed."
"MultipleSettingDeclaration",""
"WeakSetInspector","A verison of the SetInspector specialized for inspecting WeakSets.  It knows about the flag object used to indicate empty locations in the hash table."
"FLPositive24SmallIntegerCluster",""
"MCWorkingCopyDeleted","A MCWorkingCopyDeleted class is an announcement raised when a MCWorkingCopy is removed"
"StrikeFontSet","I am something acts like a font out of collection of fonts. First font in me is used as representative font to answer many messages.Examples:- display a font: StrikeFontSet allInstances first fontDisplay - calculate pixels width of a string for a font: StrikeFontSet allInstances first widthOfString: 'Pharo'"
"MCMergeBrowser",""
"ThirtyTwoBitRegister","I represent a 32-bit register. An instance of me can hold any non-negative integer in the range [0..(2^32 - 1)]. Operations are performed on my contents in place, like a hardware register, and results are always modulo 2^32.This class is primarily meant for use by the SecureHashAlgorithm class."
"GoferLocalChanges",""
"StrongPointerExplorerWrapper","i doing same job as my superclass, PointerExplorerWrapper, but filter out a weak references to object(s)."
"ZnChunkedReadStreamTests",""
"RBSemanticAnnotationMissing",""
"WorkspaceTest",""
"PointerExplorer","A variant on the ObjectExlorer that works ""backwards"": like the ObjectExplorer, it shows a tree of objects, but expanding a node won't show the objects which that node references, but rather the objects that reference that node.  Its main use is to track down memory leaks: if you want to know why a particular object is still alive, open a PointerExplorer on it and drill down until you find the root object that's referencing it.  For example, find all the references to the symbol #zot with:PointerExplorer new openExplorerFor: #zotFor the ""name"" of the object, the PointerExplorer shows each object's identityHash, to allow the user to identify when two similar objects are identical and notice cycles."
"RGInstanceVariableDefinition",""
"RBClassCategoriesSpellingRule","See #name for the area where I check spelling."
"CodeHolder","An ancestor class for all models which can show code.  Eventually, much of the code that currently resides in StringHolder which only applies to code-holding StringHolders might get moved down here."
"ZnCharacterReadStream","I am ZnCharacterReadStream.I wrap another binary ReadStream and use a ZnCharacerEncoder to allow Characters to be read.I am not positionable, but I do allow a one character peek using a one character internal buffer.Part of Zinc HTTP Components."
"RangeSettingDeclaration","A RangeSettingValue is a setting for which the value domain is an interval.  See SettingManager comment for more explanations.Instance Variables	range:		<Interval>range	- The interval which define the value domain"
"MetacelloValidationIssue",""
"RBAtIfAbsentRule",""
"InMidstOfFileinNotification","I am a Hack.  I am a notification used to know if the the current process is in the middle of a FileIn.  But I am used everywhere.  Probably I should be removed, but not now."
"RBPharoPlatform",""
"CodeSimulationTests",""
"MorphicBindings","MorphicBindings is the class holding the bindings between Spec and Morphic"
"AddClassDescription",""
"RBCompositeLintRule","A RBCompositeLintRule is a composite rule holding rules."
"MorphicUIManager","The Morphic ui manager. I was packaged in toolbuilder and I may change in the future. For the moment, the goal is to unload toolbuilder. "
"ZnCharacterEncoder","I am ZnCharacterEncoder, I encode and decode Character objects to and from a binary stream.I am an abstract class with following protocol:#nextFromStream:#nextPut:toStream:#encodedByteCountFor:The first two are compatible with TextConverter and subclasses.I add some convenience methods:#encodeString:#decodeBytes:#encodedByteCountForString:Contrary to older encoders, I work strictly from strings to bytes and vice versa and I will throw errors instead of silently ignoring them.Part of Zinc HTTP Components."
"NBWinTypes",""
"MCPoolImportDefinition","A MCPoolImportDefinition represents a pool definition."
"ProceedDialogWindow","Yes/no dialog. Test result as to whether the dialog is cancelled (no) or not (yes)."
"FileContentsBrowser","I am a class browser view on a fileout (either a source file (.st) or change set (.cs)). I do not actually load the code into to the system, nor do I alter the classes in the image. Use me to vet code in a comfortable way before loading it into your image.From a FileList, I can be invoked by selecting a source file and selecting the ""browse code"" menu item from the yellow button menu.I use PseudoClass, PseudoClassOrganizers, and PseudoMetaclass to model the class structure of the source file."
"EUCJPTextConverter","Text converter for Japanese variation of EUC."
"InvalidSocketStatusException","Signals if an operation on a Socket found it in a state invalid for that operation."
"NBProxyFunction",""
"LRUCache","I'm a cache of values, given a key I return a Value from the cache or from the factory"
"VTermInputDriver","I convert low-level terminal inputs, like mouse report or a key command."
"KMBuffer",""
"FT2GlyphSlot","Do not rearrange these fields!face -- the FT2Face that owns this FT2GlyphSlot.Note that even when the glyph image is transformed, the metrics are not.linearHoriAdvance -- For scalable formats only, this field holds thelinearly scaled horizontal advance width for the glyph (i.e. the scaledand unhinted value of the hori advance).  This can be important toperform correct WYSIWYG layout.Note that this value is expressed by default in 16.16 pixels. However,when the glyph is loaded with the FT_LOAD_LINEAR_DESIGN flag, this fieldcontains simply the value of the advance in original font units.linearVertAdvance -- For scalable formats only, this field holds thelinearly scaled vertical advance height for the glyph.  SeelinearHoriAdvance for comments.advance -- This is the transformed advance width for the glyph.format -- This field indicates the format of the image contained in theglyph slot.  Typically FT_GLYPH_FORMAT_BITMAP, FT_GLYPH_FORMAT_OUTLINE,and FT_GLYPH_FORMAT_COMPOSITE, but others are possible.bitmap -- This field is used as a bitmap descriptor when the slot formatis FT_GLYPH_FORMAT_BITMAP.  Note that the address and content of thebitmap buffer can change between calls of @FT_Load_Glyph and a few otherfunctions.bitmap_left -- This is the bitmap's left bearing expressed in integerpixels.  Of course, this is only valid if the format isFT_GLYPH_FORMAT_BITMAP.bitmap_top -- This is the bitmap's top bearing expressed in integerpixels.  Remember that this is the distance from the baseline to thetop-most glyph scanline, upwards y-coordinates being *positive*.outline -- The outline descriptor for the current glyph image if itsformat is FT_GLYPH_FORMAT_OUTLINE.num_subglyphs -- The number of subglyphs in a composite glyph.  Thisfield is only valid for the composite glyph format that should normallyonly be loaded with the @FT_LOAD_NO_RECURSE flag.  For now this isinternal to FreeType.subglyphs -- An array of subglyph descriptors for composite glyphs.There are `num_subglyphs' elements in there.  Currently internal toFreeType.control_data -- Certain font drivers can also return the control datafor a given glyph image (e.g.  TrueType bytecode, Type 1 charstrings,etc.).  This field is a pointer to such data.control_len -- This is the length in bytes of the control data.other -- Really wicked formats can use this pointer to present their ownglyph image to client apps.  Note that the app will need to know aboutthe image format.width, height, hBearingX, hBearingY, hAdvance, vBearingX, vBearingY, vAdvance -- The metrics of the last loaded glyph in the slot.  Thereturned values depend on the last load flags (see the @FT_Load_GlyphAPI function) and can be expressed either in 26.6 fractional pixels orfont units."
"Metaclass","My instances add instance-specific behavior to various class-describing objects in the system. This typically includes messages for initializing class variables and instance creation messages particular to a class. There is only one instance of a particular Metaclass, namely the class which is being described. A Metaclass shares the class variables of its instance.	[Subtle] In general, the superclass hierarchy for metaclasses parallels that for classes. Thus,	Integer superclass == Number, and	Integer class superclass == Number class.However there is a singularity at Object. Here the class hierarchy terminates, but the metaclass hierarchy must wrap around to Class, since ALL metaclasses are subclasses of Class. Thus,	Object superclass == nil, and	Object class superclass == Class.[Subtle detail] A class is know by name to an environment.  Typically this is the SystemDictionary named Smalltalk.  If we ever make lightweight classes that are not in Smalltalk, they must be in some environment.  Specifically, the code that sets 'wasPresent' in name:inEnvironment:subclassOf:instanceVariableNames:variable:words:pointers:classVariableNames:poolDictionaries:category:comment:changed: must continue to work."
"KMComposedModifier",""
"ClassCategoryReader","I represent a mechanism for retrieving class descriptions stored on a file."
"Bezier3Segment","This class represents a cubic bezier segment between two pointsInstance variables:	via1, via2	<Point>	The additional control points (OFF the curve)"
"RBStringReplacement","RBStringReplacement represents replacing source in the original method with a different string. These are used when reformatting code after a parse tree change has been made. Depending on the change, it may be possible to minimally change the parse tree without needing to format it.Instance Variables:	startPosition	<Integer>	the start position in the original source	stopPosition	<Integer>	the end position in the original source	string	<String>	replaces everything from the startPosition to the endPosition with this string"
"UsersManager","An UsersManager is xxxxxxxxx.|- user1 -> keyChain1|- user2 -> keyChain2"
"DummySystemProgressItem",""
"TestInWorldMorph","Helper class for MorphTest"
"HowToMakeYourOwnTutorialTest",""
"SizeInMemoryTest",""
"FilePluginPrims","I provide an interface to the primitives in the FilePlugin."
"ArrayTest","This is the unit test for the class Array. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)		- the sunit class category"
"ZnTooManyRedirects","ZnTooManyRedirects is signalled when an HTTP client has been following more redirects than allowed.Part of Zinc HTTP Components. "
"ZnCookie","I represent an HTTP Cookie token.Part of Zinc HTTP Components."
"NBExtraRootsRegistry","This registry serve for instantiating an external types by native code.My sole instance is always refreshing during fresh image startup."
"Paragraph","A Paragraph represents text that has been laid out, or composed, in some container.I also display the different kinds of text selection (secondary, find-replace and selection bar).Class collaborations   SelectionBlock instances are built by myself and stored in the extraSelectionBlocks instance variable in order to display supplementary selectionsClass main API   no particular main API.Instance Variables   extraSelectionBlocks: <Collection of SelectionBlock>   findReplaceSelectionRegex: <RxMatcher>   presentationLines: <Object>   presentationText: <Object>   refreshExtraSelection: <Boolean>   secondarySelection: <String>extraSelectionBlocks   - a collection of SelectionBlock for the drowing of the differents kind of text selectionfindReplaceSelectionRegex   - the find/replace matcher that is set from the editor of by the FindReplaceServicepresentationLines   - created for debugging purpose, should be removed ?presentationText   - created for debugging purpose, should be removed ?refreshExtraSelection   - a boolean that is set to tru when there is a need to refresh selectionssecondarySelection   - the string of the secondary selection that is set from the editor when a portion of text is selected	text 		A Text with encoded per-character emphasis.	textStyle	A TextStyle with font set, line height and horizontal alignment.	firstCharacterIndex    The starting index in text for this paragraph, allowing				composition of a long text into a number of containers.	container	A Rectangle or TextContainer that determines where text can go.	lines		An Array of TextLines comprising the final layout of the text				after it has been composed within its container.	positionWhenComposed   As its name implies.  Allows display at new locations				without the need to recompose the text.Lines are ordered vertically.  However, for a given y, there may be several lines in left to right order.  Lines must never be empty, even if text is empty.Notes on yet another hack - 5 Feb 2001We really need to clean up #composeLinesFrom:to:delta:into:priorLines:atY:!!!I added one more habdful of code to correct:This is an annoying bug that's been around for a couple of years, but I finally figured out how to duplicate the problem, so I figured I'd just report it now.  (It doesn't necessarily have to be fixed for 3.0 if it looks messy, but if it's a simple fix, it would be worth it.)In Morphic, if you have the following text in a workspace:This is line 1This is line 2**and** you have a return character after line 2, you will normally be able to click the mouse two times below line 2 in order to select all the text.  If you edit line 2 (e.g. so that it reads ""line number 2""), you can still select all the text by clicking below the second line.  However, if you edit line 1, you will not be able to select all the text from the bottom in the same way.  Things get messed up such that the last return character seems to be gone.  In this state, if you position the cursor immediately after the 2, and press the right arrow, the cursor jumps to the beginning of line 2... oof. (report by Doug Way)While I don't have a very deep understanding of the above mentioned method, I was able to determine that text ending in a CR worked better in the editor when the last entry in <lines> had a start of text size + 1 and a stop of text size. I have accordingly added code near the end to ensure this. It seems to have fixed the problem, but we do need to clean this baby up some day. - Bob"
"GradientFillStyle","A gradient fill style is a fill which interpolates smoothly between any number of colors.Instance variables:	colorRamp	<Array of: Association> Contains the colors and their relative positions along the fill, which is a number between zero and one.	pixelRamp	<Bitmap>		A cached version of the colorRamp to avoid needless recomputations.	radial		<Boolean>	If true, this fill describes a radial gradient. If false, it is a linear gradient.	isTranslucent	<Boolean>	A (cached) flag determining if there are any translucent colors involved.Class variables:	PixelRampCache <LRUCache>	Recently used pixelRamps. They tend to have high temporal locality and this saves space and time."
"TraitComposition","I hold a collection of trait transformations and provide important facilities to query the trait composition. For each trait in the composition clause there exists exactly one transformation in the collection.Note, that directly manipulating the composition of a class or trait does not effect changes automatically. Use PureBehavior>>setTraitComposition: to do this. You have to make a copy of the old trait composition before changing it because only the difference between the new and the old composition is updated!"
"SelectVisitorTest",""
"IdentityBag","Like a Bag, except that items are compared with #== instead of #= .See the comment of IdentitySet for more information."
"URLPlugin","An URLPlugin is a plugin which shows the URL of the current navigation"
"SUnitTest","This is both an example of writing tests and a self test for the SUnit. The tests here are pretty strange, since you want to make sure things blow up. You should not generally have to write tests this complicated in structure, although they will be far more complicated in terms of your own objects- more assertions, more complicated setup. Kent says: ""Never forget, however, that if the tests are hard to write, something is probably wrong with the design""."
"MCSystemSettings",""
"Symbol","I represent Strings that are created uniquely. Thus, someString asSymbol == someString asSymbol."
"ClassModifiedClassDefinition","This announcement will be emitted when a class or a trait definition changes: when an inst var or a classVariable is added"
"RBGuardClauseRule",""
"SettingFilter","A SettingFilter is a filter wich is used by a SettingBrowser in order to select which nodes of the setting trees are to be shown. A SettingFilter subclass must redefine the #keepHandler: method which return true if the argument handler is to be kept.Instance Variables"
"RBVariableTypeTest",""
"HashTester","I provide a simple way to test the hash properties of any object.  I am given an object that should be tested and I treat it like a prototype.  I take a copy of it when I am given it so that it can't change whilst I am holding on to it.  I can then test that multiple copies of this object all hash to the same value."
"StringMorphEditor","I am a textMorph used as a pop-up editor for StringMorphs.  I present a yellow background and I go away when a CR is typed or when the user clicks elsewhere."
"RBRefactoryChange","I am the superclass of all refactoring change objects. All I have is a name for the refactoring, but I can perform one or more refactoring operations with the message #execute. I am a composite object. To know about my components, ask me with #changes and #changesSize. "
"RBExtractMethodToComponentRefactoring",""
"PackageDependencyTest",""
"RBLiteralValuesSpellingRule","See #name for the area where I check spelling."
"ShiftJISTextConverter","Text converter for Shift-JIS.  Mac and Windows in Japanese mode use this encoding."
"RBPatternPragmaNode",""
"ZnMemoryLogger","I am ZnMemoryLogger, a ZnLogListener that collects ZnLogEvents in memory.Part of Zinc HTTP Components."
"BaseStreamTest",""
"RGGlobalDefinitionTest",""
"MethodContext","My instances hold all the dynamic state associated with the execution of either a method activation resulting from a message send or a block activation resulting from a block evaluation.  In addition to their inherited state, this includes the receiver (self), the closure for a BlockClosure activation (which is nil for a method activation), a CompiledMethod, and space in the variable part of the context for arguments and temporary variables.	MethodContexts, though normal in their variable size, are actually only used in two sizes, small and large, which are determined by the temporary space required by the method being executed.MethodContexts must only be created using the method newForMethod:.  Note that it is impossible to determine the real object size of a MethodContext except by asking for the frameSize of its method.  Any fields above the stack pointer (stackp) are truly invisible -- even (and especially!) to the garbage collector.  Any store into stackp other than by the primitive method stackp: is potentially fatal."
"RBPushDownClassVariableTest",""
"LazyMorphListMorph","Support for morph lists in PluggableMorphListMorph."
"JISX0208","This class represents the domestic character encoding called JIS X 0208 used for Japanese."
"MCMethodDefinition","A MCMethodDefinition represents a method definition. It captures the following information.Instance Variables	category:		<Object>	classIsMeta:		<Object>	className:		<Object>	selector:		<Object>	source:		<Object>	timeStamp:		<Object>"
"RBUndeclaredVariableNotification",""
"ZdcIOBuffer","I am ZdcIOBuffer.I manage a fixed SequenceableCollection buffer for simultaneous input and output.I maintain a readPointer and a writePointer.When data is written to me, it is stored at the end, past my writePointer.When data is read from me, it is retrieved from the front, past my readPointer.Invariant: readPointer <= writePointerMy valid contents for reading is defined from contentsStart to contentsEnd, from readPointer + 1 to writePointer.Data can be added to the free space defined from freeSpaceStart to freeSpaceEnd, from writePointer + 1 to the buffer's' size.There can be a gap at my front. Compacting moves data if necessary to make (more) room at the end."
"MCMockDefinition",""
"SpecLayoutAddRow","A SpecLayoutAddRow is an action representing the addition of a row to a layout"
"SelectVisitor","I am a visitor that selects objects from the nodes I visit. I take a block similar to those passed to Collection>>select:. I evaluate the block with DirectoryEntries for the nodes I visit.I can use any guide, and the objects in the array I produce will reflect the order imposed by the guide."
"TimespanTest",""
"NBFFICallout","Callout arguments can be either:- an integer constant, boolean or nil- a type name (string or symbol)- a class name- a class variable- any other object, which responds to #asFFICalloutArgument:An object , answered by #asFFICalloutArgument: should implement a public protocol of NBExternalType Todo....Options:argument coercion options:	#coerceBoolToInt  - Boolean   -> C integer (0/1)	#coerceNilToInt  -  nil       -> C integer (0)	#coerceFloatToInt - Float     -> C integer	#coerceCharToInt -  Character -> C integer	#noTypeChecking - do not perform any type checking for pushed arguments 	  (dangerous, but sometimes can be useful)		return value coercion options:	#returnBoolAsInt  -  do not turn a bool(0/1) into Boolean (true/false)cdecl calling convention:   1.   Function parameters are pushed on the stack in a right-to-left order.   2. Any local variables declared by the callee are allocated on the stack by subtracting the number of bytes required from esp. That is (sub esp,NUMBER_OF_BYTES).   3. Registers eax, ecx, and edx are available for use in the subprogram.   4. Registers ebx, esi, edi, and ebp must not be modified by the callee. (In fact, they may be used, but their original values must be restored before exiting the callee).   5. When the callee terminates, any local variable must be released by restoring esp to its original value (mov esp,ebp).   6. Function return values are returned in the eax register (except for floating point values, which are returned in the st0 register).   7. After the callee is over, the parameters that were pushed on the stack by the caller must be removed by the caller itself once the callee is terminated. It can be done in two ways :          * pop ecx n times, where n is the number of parameters pushed (cons: a useless result is stored in ecx, and ecx's value changes)          * add esp,NUMBER_OF_BYTES_PREVIOUSLY_PUSHED (1 parameter pushed = 4 bytes on a 32 bit machine)"
"RGClassInstanceVariableDefinition",""
"ProgressInitiationException","I provide a way to alter the behavior of the old-style progress notifier in String. See examples in:ProgressInitiationException testWithout.ProgressInitiationException testWith."
"RBAddMetaclassChange",""
"FLGZippedBasicSerializationTest",""
"RBCascadedNextPutAllsRule",""
"ButtonModelTest",""
"RBAddMethodChange",""
"RBAddClassRefactoring",""
"MetacelloPlatform",""
"Slider",""
"MetacelloMethodSectionPath",""
"TutorialPlayerTestTutorialAccessor",""
"FreeTypeFileInfoAbstract",""
"NECPreferences","I control the preferences for completion framework. It is the same for NECompletion and NOCompletion (and other potential completion algorithms should be configured here too)"
"SizeMismatch","I am SizeMismatch, an exception indicating that an operation was attemptedon two or more collections that don't match in size. "
"FLByteObjectCluster","I am the generic cluster for storing and loading variable byte objects."
"ZnFileLogger","I am ZnFileLogger, a ZnLogListener that appends to a file.Part of Zinc HTTP Components."
"KMCtrlModifier",""
"PSMCPatchOperationWrapper",""
"NECControllerTest","A NECControllerTest is a test class for testing the behavior of NECController"
"RBMethodCommentsSpellingRule","See #name for the area where I check spelling."
"DynamicComposableModel","A DynamicComposableModel is a model of spec with a dynamic binding for subwidgets"
"FLHookedSubstitutionTest",""
"WriteStream","I represent an accessor for a sequence of objects that can only store objects in the sequence."
"NECUntypedModel","When no receiver class is known, I'm the right model. I store all temporary variables, instance variables of the selected class and all selectors in system. For performance reasons I only collect selectors when at least one character is known."
"GoferTest",""
"UndefinedObjectTest","This is the unit test for the class UndefinedObject. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"TextLine","A TextLine embodies the layout of a line of composed text.	left right top bottom		The full line rectangle	firstIndex lastIndex		Starting and stopping indices in the full text	internalSpaces		Number of spaces to share paddingWidth	paddingWidth		Number of pixels of extra space in full line	baseline				Distance of baseline below the top of the line	leftMargin			Left margin due to paragraph indentationTextLine's rather verbose message protocol is required for compatibility with the old CharacterScanners."
"MirrorPrimitiveTests",""
"ZnUnknownScheme","ZnUnknownScheme is signalled when an unknown/unsupported URL scheme is found.Part of Zinc HTTP Components. "
"TextLineTest",""
"FileDoesNotExist","I am raised when an operation is attempted on a file that does not exist. This includes cases where a file operation is attempted on a directory."
"UndoRedoGroup","An UndoRedoGroup is a composite node of an history tree. It is made to allow redoing or undoing of several commands in one shot. See for example its use to record all text replacement when a ""replace all"" is performed from a FindReplaceService (see TextEditor>>replaceAll: with: startingAt:)Instance Variables"
"RootClassPoolUser","I'm a class using a single shared pool (which hides a system class). My subclasses should be able to access the class variable defined in the pool I use. "
"InstanceVariableNode",""
"MorphicUnknownEvent",""
"NBCPrinter",""
"Fraction","Fraction provides methods for dealing with fractions like 1/3 as fractions (not as 0.33333...).  All public arithmetic operations answer reduced fractions (see examples).instance variables: 'numerator denominator 'Examples: (note the parentheses required to get the right answers in Smalltalk and Pharo):(2/3) + (2/3)(2/3) + (1/2)		 ""answers shows the reduced fraction"" (2/3) raisedToInteger: 5		 ""fractions also can have exponents"""
"FLIteratingCluster","I am a template class whose algorithm for serialize a collection of objects consists on delegate the serialization of each individual object to the subclass."
"MCSmtpRepository",""
"DockingBarMorph","I'm a kind of container which adhere to one edge of the screen. See me in action with: DockingBarMorph new 	addMorph: (SimpleButtonMorph new                                           label: 'Say hello';                                           target: [UIManager inform: 'Hello'];                                           actionSelector: #value);	addMorph: (SimpleButtonMorph new                                           label: 'Say bonjour';                                           target: [UIManager inform: 'Bonjour'];                                           actionSelector: #value);	addMorph: (SimpleButtonMorph new                                           label: 'Close';                                           target: [DockingBarMorph allInstances last delete];                                           actionSelector: #value);	adhereToBottom;	openInWorld."
"NBSTIvarArgument","This guy knows how to load a receiver's ivar."
"SupplyAnswerTests",""
"TraitPureBehaviorTest",""
"MenuRegistration","A MenuRegistration stores the declaration of a menu item. It is mainly an handler for a PluggableMenuItemSpec. A menu item is declared withing a particular method tagged with a pragma. This kind-of method takes a builder as argument and its evaluation results in the building of a MenuRegistration sub-tree which is stored in the builder.   As an example:MenuRegistrationExample class>>myOwnCoolToolRegistrationOn: aBuilder 	<worldMenuExample> 	(aBuilder item: #MyOwnCoolTool)		label: 'My own cool tool';		target: Workspace; 		selector: #openContents: ;		arguments: #('yep, my own cool tool can be opened from the world menu ! :)')	Evaluating this method results in the creation of a MenuRegistration which name is #MyOwnCoolTool. Thus, the resulting sub-tree is only made of a root node. After it has be built, this root node is recorded in the builder. To experiment this, just evaluate the following code:-------------| builder |builder := PragmaMenuBuilder new.MenuRegistrationExample myOwnCoolToolRegistrationOn: builder.builder explore-------------Using pragma allows the menu builder to dynamically discover which are the methods to evaluate in order to build a menu. Thus, a resulting menu is built by evaluating a set of methods which share the same pragma keyword.In the following example, all method having <worldMenuExample> are evaluated for the building of the resulting menu:---------------(PragmaMenuBuilder pragmaKeyword: 'worldMenuExample' model: nil) menu popUpInWorld---------------Within a method, three kind of declarations can be used: (1) item by item (2) an item with a sub-menu and (3) a group.1 -  item by item menu registration declaration:This kind of declaring is for the setting of one menu item and only one within a method.1.1 -  A simple menu item with an actionIn the following example, a menu item with the name #'Browser' and a action which consists in sending #openClassBrowser to StandardToolSet is declared:AClassSomewhere class>>openBrowserOn: aBuilder	<myMenuTest>	(aBuilder item: #'Browser') 		target: StandardToolSet; 		selector: #openClassBrowser.A simple action without any argument can also be set with a block:	(aBuilder item: #'Browser') action: [StandardToolSet openClassBrowser]You can also indicate a balloon help string and a particular icon:	(aBuilder item: #'Browser') 		action: [StandardToolSet openClassBrowser];		help: 'Open a system browser';		icon: MenuIcons smallSystemBrowserIconIf the action needs one or several arguments, you can also give it/them as follow:	(aBuilder item: #'Save and quit') 		target: SmalltalkImage current; 		selector: #snapshot:andQuit:.		arguments: #(true true)		By default, the item label is set with the item name but it can be explicitly given as follow:	(aBuilder item: #'Browser')		label: 'System browser'; 		target: StandardToolSet; 		selector: #openClassBrowser.1.2  -  Placing the menu item in a  menuThe resulting menu item of previous example will be placed at the root of the menu.In order to declare another place for it, you have to explicitly set its parent name.As an example, consider the following item which declares a simple entry with no action.Such item is typically used as a root for a sub-menu tree:AClassSomewhere class>>openToolsOn: aBuilder	<myMenuTest>	(aBuilder item: #'Tools')Now, a sub-menu item for #Tools can be declared separately, within another methodby using the #parent: message:AnotherClassSomewhere class>>myToolsOn: aBuilder	<myMenuTest>	(aBuilder item: #'CoolTool')		label: 'Cool tool';		parent: #Tools;Note that the argument of #parent: must be the name of another item. If it is not the case, then the parent name indication is simply ignored.1.3  -  Item orderingIf no ordering setting is indicated, items ordering is unpredicable (it depends on method retrieving order). If one want an item to appear at a certain position, it is possible to set it by sending #order: to a MenuRegistration. The #order: message takes a float as argument. As an example, see  the two following declarations, in the resulting menu, Wozy is placed before 'Wozy configuration'AnotherClassSomewhere class>>myWozySystemOpenOn: aBuilder	<myMenuTest>	(aBuilder item: #'Wozy')		parent: #CoolTool;		order: 1.0		AnotherClassSomewhere class>>myWozySystemConfigOn: aBuilder	<myMenuTest>	(aBuilder item: #'Wozy configuration')		parent: #CoolTool;		order: 2.02) Item with a submenuThe one menu item - one declaring method way can be ugly. When a set a menu items are known to be put all-together, it is possible to declare the sub-tree in one method. The following example show such a sub-tree with the #Tools item at root and four sub-items declared in a single method. Note a menu target declared for the root is shared by all sub-items. In that case, it also remains possible for a sub-item to declare its own target.AClassSomewhere class>>openToolsOn: aBuilder	<myMenuTest>	(aBuilder item: #'Tools')		target:  StandardToolSet; ""The target is shared by all children""		with: [ ""My sub-menu are given here""			(aBuilder item: #'System browser') selector: #openClassBrowser.			(aBuilder item: #Workspace) selector: #openWorkspace.			(aBuilder item: #'Test Runner') selector: #openTestRunner.			(aBuilder item: #'Monticello Browser') selector: #openMonticelloBrowser]		3) group of menu itemsWhen you want some items to be shown always grouped together, you can use a group. Its declaring is like an item with a submenu except that you are using the message #group: instead of #item:. The consequence is that only the children are shown in the menu. Of course, #label and #icon: are ignored for a group. Here is an example:AClassSomewhere class>>mostUsedToolsOn: aBuilder	<myMenuTest>	(aBuilder group: #MostUsedTools) ""My name can be also used as parent name""		withSeparatorAfter; ""A separator will be added after my last child""		order: 0; ""the entire group will be placed at the top""		target:  StandardToolSet; ""The target is shared by all children""		with: [			(aBuilder item: #'System browser') selector: #openClassBrowser.			(aBuilder item: #Workspace) selector: #openWorkspace.			(aBuilder item: #'Test Runner') selector: #openTestRunner.			(aBuilder item: #'Monticello Browser') selector: #openMonticelloBrowser]---------------------------		Instance Variables	isGroup:		<Boolean>	itemList:		<SortedCollection>	order:		<Number>	owner:		<MenuRegistration>	parentName:		<Symbol>	spec:		<PluggableMenuItemSpec>isGroup	- if true, then this item is ignored and flattenitemList	- all my MenuRegistration (my sub-menus or my elements if i'm a group)order	- my order in the owner listowner	- my ownerparentName	- the declared parent name which serve as basis for PragmaBenuBuilder>>#arrangeRegistrationsspec	- my PluggableMenuItemSpec"
"MCScriptParser","A MCScriptParser identifies script and add MCScriptDefinition. "
"ZnDigestCredential","I am ZnDigestCredential, a concrete subclass of ZnCredential and subclass of ZnBasicCredential.I implement digest HTTP authentication.I hold a nounce and opaque.Part of Zinc HTTP Components."
"TimedOut","I am signalled by #duration:timeoutDo: if the receiving block takes too long to execute.I am signalled by a watchdog process spawned by #duration:timeoutDo: and caught in the same method. I am not intended to be used elsewhere."
"MetacelloPreLoadDirective",""
"TickSelectionListNodeMorph","A TickSelectionListNodeMorph is the morph used to render the tree used to render te tick list"
"RBRefactoryDefinitionChange",""
"MetacelloValidationFailure",""
"OpaqueURI","An opaque URI is an absolute URI whose scheme-specific part does not begin with a slash character ('/'). Opaque URIs are not subject to further parsing. An absolute URI has a scheme; a URI that is not absolute is said to be relative. URIs are also classified according to whether they are opaque or hierarchical.Some examples of opaque URIs are:	mailto:Pharo-project@lists.gforge.inria.fr	news:comp.lang.smalltalk		urn:isbn:000102002x"
"ZnEasy","I am ZnEasy, a simplified HTTP client for occasional use.My class side implements a number of convenience methods to do common HTTP client operations.	ZnEasy get: 'http://zn.stfx.eu/zn/small.html'.For most requests, I return a response object. Some return an image Form.	ZnEasy getPng: 'http://www.pharo-project.org/images/pharo.png'.For my implementation I use ZnClient, a full featured HTTP client.Part of Zinc HTTP Components."
"ByteTextConverterTest",""
"LineSegment","This class represents a straight line segment between two pointsInstance variables:	start	<Point>	start point of the line	end		<Point>	end point of the line"
"NautilusShowHierarchyChanged","A NautilusShowHierarchyChanged is raised when the value of howHierarchy is switched"
"MCDependencySorter","A MCDependencySorter computes the dependencies to a set of entities."
"RPackage","A RPackage is a new implementation of package. Note that it does not touch classes but it is just a layer on top of classes therefore removing a method from a package does not change the underlying class. Instance Variables	classDefinedSelectors:		Dictionary	classExtensionSelectors:		Dictionary	metaclassDefinedSelectors:		Dictionary	metaclassExtensionSelectors:		Dictionary	packageName:		String	classes: OrderedCollection of Symbols	classTags: is a mapping from tags to classNamesThe reason we use four dictionaries is that this way we only store #Point in both as the class and the metaclass are involved. We do not have to with Point_class problem when comparing defined and extended classes. The idea is taken from the RBSelectorEnvironment. 							Class Invariant one:	Classes should not contain metaclass name, but only class names		Implementation notes ====================This class went over 3 internal representations implementation. 	- first: 	a list of class + two dictionaries: class * methods	This was not good since we add to go all the time over the list of classes.	- second: 4 dictionaries class * selectors 	This was not good since we want to have defined classes without methods. 	- third: 4 dictionaries + definedClassesOriginally I wanted to avoid to have a defined class list and I wanted to avoid to have to declare the class as defined. But this is not really good since	- we will want to know if a class definition (without method for example is defined in a given package)	- second this is easier to hook the packageOf: behavior (we register the package class when the class is 	added to the package).defined classes information is redundant with the dictionary keys of defined methods but we would have to check and register the class to the packageOrganizer the first time a method is defined then also check on remove to unregister the class from the packageOrganizer.Adding a method does not define the class as a defined package class. This has to be done explictly. The reason for this choice is that a class should register to the packageOrganizer and that I do not want to do it each time a method is added and I do not want to test it each time a method is added. Now this is done only when the class is declared as defined. We could also give the complete freedom to the client to register the class but I thought it was a good compromise. 		ClassTag are tags that can be associated to classes. They help user organizing their class internal. So that we can have a package infrastructure as follows:	Package1		ClassA		ClassB	in case there is no tags associated to the package	or	Package2			Tag1			ClassA			ClassB		Tag2			ClassC			ClassD			ClassE			ClassA			Todo====	Next: 	- finish 	- build up a synchronizer that import PackageInfo.			"
"MCPatchOperation","I'm an abstract class that represent an single delta element between two packages: removal, addition or modification."
"KMShortcutSetting",""
"RBThreeElementPointRule",""
"InstructionStream","My instances can interpret the byte-encoded Smalltalk instruction set. They maintain a program counter (pc) for streaming through CompiledMethods. My subclasses are Contexts, which inherit this capability. They store the return pointer in the instance variable sender, and the current position in their method in the instance variable pc. For other users, sender can hold a method to be similarly interpreted. The unclean re-use of sender to hold the method was to avoid a trivial subclass for the stand-alone scanning function."
"SelectionValueHolder","A SelectionValueHolder is a value holder especially designed to contains a list selection (an index + an object)"
"ImageFillStyle","Simple fillstyle that draws a (potentially translucent) form at the specified origin. Direction and normal are unused."
"PluggableMorphListMorph","A type of PluggableListMorph that supports morphs for items. Useful for lists with icons etc."
"FreeTypeFontSelectorDialogWindow","I'm a dialog to select a font. Usage example:|fontSelector|fontSelector := FreeTypeFontSelectorDialogWindow new.UITheme builder openModal: fontSelector.fontSelector selectedFont inspect."
"SaveCommandLineHandler","Usage: save <imageBaseName> [--delete-old] 	<imageName>     a base name for the image	--delete-old    remove the old image and changes file	Documentation:Saves the image and changes file under a new name.Examples:	# create a 'bar.image' and 'foo.changes'	$PHAROVM Foo.image saveAs bar	# create the same file as in the previous example but delete Foo.image and Foo.changes	$PHAROVM Foo.image saveAs bar --delete-old"
"RBVariableNode","RBVariableNode is an AST node that represent a variable (global, inst var, temp, etc.).Instance Variables:	token	<RBValueToken>	the token that contains our name and position"
"RBSpecialCharacterToken","RBSpecialCharacterToken is the first class representation of special characters."
"SimplestClassListWithPagerExample","SimplestClassListWithPagerExample new openOn: Object"
"PasswordDialogWindow","I'm a Dialog whose TextEditors characters are replaced by *. Example:(UITheme builder openModal:         (PasswordDialogWindow new                title: 'Authentification';                textFont: StandardFonts defaultFont;                text: 'Enter your password')) entryText explore"
"HTTPProgress","I am HTTPProgress, a notification to show progress when using HTTP.I include	- total: The total size of the download/upload (if known)	- amount: The completed amount of the download/upload (if known)Use #total:, #amount: or #amountLeft: to set the appropriate byte counts to indicate progress.Use #fraction or #percentage as a value that indicates progress.Total and amount are optional and can be nil. Test using #isEmpty.You can try 	HTTPProgress example."
"PanelMorphWithSplitters","A PanelMorphWithSplitters is which add splitters the way SystemWindow do it"
"BlockStartLocator",""
"CP1252TextConverter","Text converter for CP1252.  Windows code page used in Western Europe."
"ImageMorph","ImageMorph is a morph that displays a picture (Form). My extent is determined by the extent of my form.Use #image: to set my picture.Structure: instance var		Type 		Description image				Form		The Form to use when drawingCode examples:	ImageMorph new openInWorld; grabFromScreen	(Form fromFileNamed: 'myGraphicsFileName') asMorph openInWorldRelationship to SketchMorph: ImageMorph should be favored over SketchMorph, a parallel, legacy class -- see the Swiki FAQ for details ( http://minnow.cc.gatech.edu/squeak/1372 ). "
"RBSmalllintTest",""
"DependentsArray","Act as an array of (weak) dependents of some object.When dependents are reclaimed, they are replaced by an UndefinedObject in the DependentsArray.This is why instances of this class will take care to iterate only on non nil elements.These nil also cause loops written as (1 to: self size do: [:i | (self at: i) doSomething]) to be inefficient.This is because #size and #at: both require scanning for nils.For this reason, DependentsArray though sequenceable, is not a subclass of SequenceableCollection."
"SHTextStylerST80","I style Smalltalk methods and expressions.My 'styleTable' class instance var holds an array ofArrays which control how each token is styled/coloured. See my defaultStyleTable class method for its structure.My styleTable can be changed by either modifying the defaultStyleTable class method and then executing SHTextStylerST80 initialize ; or by giving me a new styleTable through my #styleTable: class method.My 'textAttributesByPixelSize' class instance var contains a dictionary of dictionaries.	The key is a pixelSize and the value a Dictionary from token type Symbol to TextAttribute array.	It is created/maintained automatically.	I also install these 3 preferences when my class initialize method is executed....	#syntaxHighlightingAsYouType  - controls whether methods are styled in browsers	#syntaxHighlightingAsYouTypeAnsiAssignment - controls whether assignments are formatted to be :=	#syntaxHighlightingAsYouTypeLeftArrowAssignment - controls whether assignments are formatted to be _I reimplement #unstyledTextFrom: so that TextActions are preserved in the unstyled text 					 	"
"InputEventSensor","An InputEventSensor is a replacement for the old Morphic EventSensor framework.It updates its state when events are received so that all state based users of Sensor (e.g., Sensor keyboard, Sensor leftShiftDown, Sensor mouseButtons) will work exactly as before. The usage of these funtions is discouraged. Instance variables:	mouseButtons <Integer>	- mouse button state as replacement for primMouseButtons	mousePosition <Point>	- mouse position as replacement for primMousePt	eventQueue <SharedQueue>	- an optional event queue for event driven applications	modifiers		<Integer>	- modifier statesClass variables:	ButtonDecodeTable	KeyDecodeTable"
"MorphTreeSelectionChanged",""
"MessageListAbstractNode","A MessageListAbstractNode is an abstract node model.Instance Variables"
"MethodClassifier","I am a method classifier that sets the protocl of methods using some simple rules.Example Usage:	MethodClassifier classify: MyClass >> #mySelector"
"SHA1Ecryptor","A SHA1Ecryptor is an encryptor using SHA1 algorithm"
"WideCharacterSetTest","WideCharacterSetTest holds tests for WideCharacterSet"
"BalloonEdgeData","BalloonEdgeData defines an entry in the internal edge table of the Balloon engine.Instance Variables:	index	<Integer>	The index into the external objects array of the associated graphics engine	xValue	<Integer>	The computed x-value of the requested operation	yValue	<Integer>	The y-value for the requested operation	height	<Integer>	The (remaining) height of the edge	source	<Object>		The object from the external objects array"
"AbstractEcryptor","An AbstractEcryptor is an interface for encryptor.It's basically just an algorithm to encrypt a string, without ensuring it can be decrypted"
"NetNameResolver","This class implements TCP/IP style network name lookup and translation facilities.Attempt to keep track of whether there is a network available.HaveNetwork	true if last attempt to contact the network was successful.LastContact		Time of that contact (totalSeconds).haveNetwork	returns true, false, or #expired.  True means there was contact in the last 30 minutes.  False means contact failed or was false last time we asked.  Get out of false state by making contact with a server in some way (FileList or updates)."
"RPackageOrganizerTest","RPackageOrganizerTest tests the behavior of PackageOrganizer. Note that it does not rely on announcement to be emitted to maintain invariants.Therefore the new created PackageOrganizer is not registered to listen to event."
"RPackageOrganizer","A RPackageOrganizer is responsible for providing all the package currently defined in the system.In addition it provides a back pointer from the class to its package.The classPackageMapping and the classExtendingPackageMapping should be moved in the future to the classes themselves. For tests or actions that could destroy the package organizer,  do not access directly the singleton of RPackageOrganizer.Use instead 		RPackage withOrganizer: aNewOrganizer do: ablock			or via RPackage organizer			RPackageOrganizer fillUp will fill up the system from the current PackageOrganizer	""self fillUp""	-----------------------------------------------------------------------------------------------------------------------------------------------			A rpackageOrganizer update itself when some changes are made in the system. It does that by registering to a systemAnnoucer, specifying an action when an annoucement is triggered.Here is what I (Cyrille Delaunay) propose to do for each annocuement triggered:SystemCategoryAddedAnnouncement 		=> I would just register a new RPackage (if it does not already exist) in the RPackageOrganizer	SystemCategoryRemovedAnnouncement      => I would just unregister the RPackage concerned from the organizerSystemCategoryRenamedAnnouncement     => I would update the RPackage concerned, by changing its name     => I would update the 'packages' dictionary of the organizer, putting the new name as keySystemClassAddedAnnouncement     => Import the class in the RPackage concerned (RPackage >> importClass:)    => Register the class in the 'classPackageMapping' dictionary of the organizer (RPackageOrganizer >> registerPackage:forClass)    (=> maybe we should pay attention if both the class and the metaclass launch this kind of event ?)SystemClassRecategorizedAnnouncement    => I would update the old RPackage concerned:            => unregister the class            => unregister all defined methods of the class    => I would update the new RPackage:            => Import the class in the RPackage (importClass:)    => I would update the organizer:            => update the 'classPackageDictionary' to point on the new RPackage SystemClassRemovedAnnouncement    => I would update the RPackake concerned             => unregister the class             => unregister all defined methods of the class    => I would update the organizer:             => update the 'classPackageDictionary' to remove the classSystemClassRenamedAnnouncement    => I would update the RPackage in which the class is defined:             => update the 'classDefinedSelectors' dictionary (replace the old key by the new one)             => update the 'metaclassDefinedSelectors' dictionary (replace the old key by the new one)    => I would update all RPackages extending this class             => update the 'classExtensionsSelectors' dictionary (replace the old key by the new one)             => update the 'metaclassclassExtensionsSelectors' dictionary (replace the old key by the new one)    => I would update the organizer             => update the 'classPackageDictionary' to replace the key with the new class name             => update the 'classExtendingPackagesMapping' to replace the key with the new class name                          SystemClassReorganizedAnnouncement     (=> I guess we should check if extensions have not been added or removed ?       (to retrieve this information, the only thing I found is ClassDescription >> organization, and then check each category begining with '*' and compare with the organizer. seems to be painful, no?))	=> when an extension is removed, all methods inside are removed. Therefore, the MethodRemovedAnnounecement will do the job. Not sur this one still usefullSystemProtocolAddedAnnouncement    => I don't see anything to do for this annoucementSystemProtocolRemovedAnnoucement    => If the category is an extension from a package, I would move all the methods concerned, from the extending RPackage to the class RPackageSystemMethodAddedAnnouncement       => I would check the category in which the method has been defined               => if it correspond to an extending package -> add the method to the extending RPackage               => if not, add the method to the class parentPackageSystemMethodModifiedAnnouncement       this annoucement can correspond to several kind of modifications:	       *  a method has been renamed                       => I would update the rPackage in which the method is defined to replace the old selector by the new one		* a method has been move to another category 			-maybe from a classic category to an extending package                             => we should move the method from the  method class parentPackage to extendingPackage package			-maybe from an extending package to another extending package                             => we should move the method from the  extendingPackage package to the other extendingPackage package			-maybe from an extending package to a classic category                             =>  we should move the method from the  extendingPackage to the method class parentPackage		        -maybe from a classic category to another classic category                             => we have nothing to do			SystemMethodRecategorizedAnnouncement          same thing than aboveSystemMethodRemovedAnnouncement       => I would simply remove the method from the RPackage in which it is register"
"PragmaMenuAndShortcutRegistrationItem","A PragmaMenuAndShortcutRegistrationItem is an item of a menu or keymap"
"MCMczInstallerTest",""
"ZdcPluginSSLSession","I am ZdcPluginSSLSession, an object managing the secure communication between two parties.I am a ZdcAbstractSSLSession.I am a wrapper for the SqueakSSL plugin.I am probably too primitive to be used directly, see ZnSecureSocketStream for a higher level client.Ackowledgement: based on the original SqueakSSL code."
"InstructionClient","My job is to make it easier to implement clients for InstructionStream. See InstVarRefLocatoras an example. "
"ThreadSafeTranscript","I'm an output device.Ultimately I can replace TranscripterStream since I'm thread safe and TranscripterStream.ThreadSafeTranscript can be installed as the default transcript usingThreadSafeTranscript installThreadSafeAsTranscriptIt can be installed as another Transcript accessible using STranscriptThreadSafeTranscript installThreadSafeAsSTranscript"
"WindowEvent","I'm an event related to the host window, only dispatched to the World. "
"TextStyle","A textStyle comprises the formatting information for composing and displaying a unit (usually a paragraph) of text.  Typically one makes a copy of a master textStyle (such as TextStyle default), and then that copy may get altered in the process of editing.  Bad things can happen if you do not copy first.Each of my instances consists of...	fontArray		An array of StrikeFonts	fontFamilySize	unused	lineGrid			An integer; default line spacing for paragraphs	baseline			An integer; default baseline (dist from line top to bottom of an 'a')	alignment		An integer; text alignment, see TextStyle alignment:	firstIndent		An integer; indent of first line in pixels	restIndent		An integer; indent of remaining lines in pixels	rightIndent		An integer; indent of right margin rel to section	tabsArray		An array of integers giving tab offsets in pixels	marginTabsArray	An array of margin tabs	leading			An integer giving default vertical line separationFor a concrete example, look at TextStyle default copy inspect"
"RPackageTraitSynchronisationTest",""
"MCPackageCache","I'm a kind of cache for versions and filenames of packages."
"STEditor",""
"EncoderForV3PlusClosures","An encoder for the V3 bytecode set augmented with the following bytecodes that are part of the full closure implementation.	138   10001010 jkkkkkkk		Push (Array new: kkkkkkk) (j = 0)								or	Pop kkkkkkk elements into: (Array new: kkkkkkk) (j = 1)	140   10001100 kkkkkkkk jjjjjjjj 	Push Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	141   10001101 kkkkkkkk jjjjjjjj 	Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	142   10001110 kkkkkkkk jjjjjjjj 	Pop and Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	143   10001111 llllkkkk jjjjjjjj iiiiiiii	Push Closure Num Copied llll Num Args kkkk BlockSize jjjjjjjjiiiiiiiiThis is an exact duplicate of EncoderForLongFormV3PlusClosures.Could be a trait (or in Newspeak, a Mixin).For now we impose upon you to synchronise any and all changes between these two classes."
"MOPTestClassD",""
"FLPointCluster","FLPointCluster is an optional class that optimizes Point instances, since there are a lot of instances in the system, it makes sense to optimize them. We take advantage of bytecode optimizations done by Pharo for messages like #@, #x and #y. In addition, we avoid the overhead of class reshape, etc. "
"MetacelloVersionLoadDirective",""
"BlockCannotReturn","This class is private to the EHS implementation.  Its use allows for ensured execution to survive code such as:[self doThis.^nil]	ensure: [self doThat]Signaling or handling this exception is not recommended."
"NBExternalEnumeration","NBExternalEnumerationType reifies the enum declarations in C and offers a nice interface (especially in terms of debug/inspect).To use it just subclass the NBExternalEnumeration and add an #enumDecl method to the class side such as:NBExternalEnumeration subclass: #NBTestEnumeration	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NativeBoost-Tests'NBTestEnumeration class>>enumDecl	^ {(#AAA -> 1).	(#BBB -> 2).	(#CCC -> 3).	(#DDD -> 2400)} asDictionary DO NOT FORGET to call the #initialize method on your class. The rest is automatically done ;)You can use your new enum in two ways:	- add it to a client class poolDictionaries list (see  #NBExternalEnumTests for an example), 		and then just write CCC in your code -- CCC here is an item of your enum	- send the name of an item to your class --- NBTestEnumeration DDDThe NBExternalEnumeration implements  (instance and class) some more API methods like:	#itemAt: retrieves the item having a specific value  --- NBTestEnumeration itemAt: 2	#includes: checks the existence of a specific item in the enum --- NBTestEnumeration includes: #AAA"
"RBRefactoringTest",""
"MethodToolbar","A MethodToolbar is xxxxxxxxx.| b |b := MethodToolbar new.b openWithSpec.b method: (ButtonModel>>#state:).b method: nil"
"PluggableTabButtonMorph","This is a specialized pluggable button morph that is meant to represent a tab in a set of tabs arranged horizontally.  Each tab will overlap slightly when drawn.  All but one tab will be drawn in left to right order in the specified color, but lighter.  The active tab will be drawn last in the full color and slightly taller to indicate that it is selected.  Clicking the active tab has no effect but clicking any other tab will change the active tab to the clicked tab.This morph does not itself accept any events.  The parent tab set will grab the mouse clicks and handle notifying the appropriate tabs that they have been activated or deactivated.There is a single selector which provides the text for the button label and affects the width of the tab.  When the width changes the tab will inform its parent that it has changed and that the layout needs to be updated.  The model for the text selector of course should be the client for the tab set.The button label can be a String, Text, or Morph.  Texts work better than plain Strings."
"GoferConfigurationReference",""
"TransformationMorph","A TransformationMorph is like a transformMorph, except that it does not clip, and its bounds include its entire submorph.  TransformationMorphs are assumed to have only one submorph -- the idea is that it is a wrapper that enables its submorph to scale and rotate.  A TransformationMorph may come to have more than one submorph if, eg, a menu sprouts a sub menu, using the transformationMorph temporarily as its world, but this ability is only sparsely supported (as in layoutChanged).See TransformationMorph class example1 method."
"LabelModel","A LabelModel is a spec model for Labels"
"MCClassVariableDefinition","A MCClassVariableDefinition represent a class variable."
"FileUrl","This class models a file URL according to (somewhat) RFC1738, see http://www.w3.org/Addressing/rfc1738.txtHere is the relevant part of the RFC:3.10 FILES   The file URL scheme is used to designate files accessible on a   particular host computer. This scheme, unlike most other URL schemes,   does not designate a resource that is universally accessible over the   Internet.   A file URL takes the form:       file://<host>/<path>   where <host> is the fully qualified domain name of the system on   which the <path> is accessible, and <path> is a hierarchical   directory path of the form <directory>/<directory>/.../<name>.   For example, a VMS file     DISK$USER:[MY.NOTES]NOTE123456.TXT   might become     <URL:file://vms.host.edu/disk$user/my/notes/note12345.txt>   As a special case, <host> can be the string ""localhost"" or the empty   string; this is interpreted as `the machine from which the URL is   being interpreted'.   The file URL scheme is unusual in that it does not specify an   Internet protocol or access method for such files; as such, its   utility in network protocols between hosts is limited.From the above we can conclude that the RFC says that the <path> part never starts or ends with a slash and is always absolute. If the last name can be a directory instead of a file is not specified clearly.The path is stored as a SequenceableCollection of path parts.Notes regarding non RFC features in this class:- If the last path part is the empty string, then the FileUrl is referring to a directory. This is also shown with a trailing slash when converted to a String.- The FileUrl has an attribute isAbsolute which signals if the path should be considered absolute or relative to the current directory. This distinction is not visible in the String representation of FileUrl, since the RFC does not have that.- Fragment is supported (kept for historical reasons)"
"ZnTranscriptLogger","I am ZnTranscriptLogger, a ZnLogListener that appends to the Transcript.Part of Zinc HTTP Components."
"AnnouncementSubscription","The subscription is a single entry in a SubscriptionRegistry.Several subscriptions by the same object is possible.I know how to make myself weak or strong, only use this capability if it can't be determined at subscribe time though, as it uses become: (for thread-safety), which is quite slow."
"CompilerSystemSettings",""
"NautilusKeyPressed","A NautilusKeyPressed is raised each time a key is pressed on a Nautilus ui"
"FLPositive8SmallIntegerCluster",""
"HistoryNode","A HistoryNode is composite node of an history tree. It is made to contain some other HistoryNode or HistoryLeaf instances.A subnode is added with #addItem:In order to add and feed a new subtree, one can use openGroup which add a new HistoryNode. When openGroup is sent to an HistoryNode named H, then a new group G is added and all subsequent sent of #addItem: or of #openGroup to H will update the new node G until G is closed by a closeGroup. As examples:---------------H := HistoryNode new.H addItem: (i1 := HistoryLeaf new).---------------gives:H	i1---------------H := HistoryNode new.H openGroup. ""add a new group named g1""H addItem: (i1 := HistoryLeaf new).H addItem: (i2 := HistoryLeaf new).--------------gives:H	g1		i1		i2--------------H := HistoryNode new.H openGroup. ""add a new group named g1""H openGroup. ""add a new group named g2""H addItem: (i1 := HistoryLeaf new).H addItem: (i2 := HistoryLeaf new).--------------gives:H	g1		g2			i1			i2			--------------H := HistoryNode new.H openGroup. ""add a new group named g1""H openGroup. ""add a new group named g2""H addItem: (i1 := HistoryLeaf new).H closeGroup. ""close g2""H addItem: (i2 := HistoryLeaf new).H closeGroup. ""close g1""H addItem: (i3 := HistoryLeaf new).--------------gives:H	g1		g2			i1		i2	i3	Also se HistoryNodeTest.Instance Variables	history:		<OrderedCollection>	opened:		<Boolean>history	- The list of subnodes (HistoryLeaf or HistoryNode instances)opened	- true if the node is opened for adding"
"MorphTreeModel","I'm the base class for tree models.  See ClassListExample for basic usage."
"MCSqueaksourceRepository",""
"KMModifier",""
"ProcessLocalVariable","My subclasses have values specific to the active process. They can be read with #value and set with #value:"
"OrderedCollectionInspector",""
"DictionaryValueHolder","A DictionaryValueHolder is a value holder designed for dictionaries"
"RBSearchTest",""
"ProvideAnswerNotification",""
"AJStdCallCallInfo","stdcall calling convention.Used on windows. No need for stack cleanup after call. No need to align stack before making call."
"DirectoryEntryTest",""
"ZnNullEncoder","I am ZnNullEncoder, a concrete subclass of ZnCharacterEncoder.I perform no encoding or decoding at all for all characters with a code value below 256.I can only be used for ASCII.Note that in principle I could handle Latin1 (ISO-8859-1), although that is not completely correct. To get maximum efficiency, it remains an option.	Part of Zinc HTTP Components."
"SystemBrowser","This is the AppRegistry class for class browsing"
"Link","An instance of me is a simple record of a pointer to another Link. I am an abstract class; my concrete subclasses, for example, Process, can be stored in a LinkedList structure."
"ProcessSpecificTest","A ProcessSpecificTest is a test case for process local and dynamic variables."
"GoferPackageReference","A GoferPackageReference refers to the latest version of a Monticello package."
"URI","A Uniform Resource Identifier (URI) is a compact string of characters for identifying an abstract or physical resource. This implementation is based on http://www.ietf.org/rfc/rfc2396.txt.It should be probably updated to http://labs.apache.org/webarch/uri/rfc/rfc3986.htmlURI syntax=======The string based representation of a URI  has the following syntax [scheme:]scheme-specific-part[#fragment]where square brackets [...] represents optional parts and the characters : and # stand for themselves.Another definition given in the specification is   URI         = scheme "":"" hier-part [ ""?"" query ] [ ""#"" fragment ]   hier-part   = ""//"" authority path-abempty               / path-absolute               / path-rootless               / path-empty    foo://example.com:8042/over/there?name=ferret#nose      \_/   \______________/\_________/ \_________/ \__/       |           |            |            |        |    scheme     authority       path        query   fragment       |   _____________________|__      / \ /                        \      urn:example:animal:ferret:noseAn absolute URI has a scheme; a URI that is not absolute is said to be relative. URIs are also classified according to whether they are opaque or hierarchical.An opaque URI is an absolute URI whose scheme-specific part does not begin with a slash character ('/'). Opaque URIs are not subject to further parsing. Some examples of opaque URIs are:	mailto:Pharo-project@lists.gforge.inria.fr	news:comp.lang.smalltalk		urn:isbn:000102002xA hierarchical URI is either an absolute URI whose scheme-specific part begins with a slash character, or a relative URI, that is, a URI that does not specify a scheme. Some examples of hierarchical URIs are:http://www.pharo-project.org/homefile:///~/calendarA hierarchical URI is subject to further parsing according to the syntax	[scheme:][//authority][path][?query][#fragment]where the characters :, /, ?, and # stand for themselves. The scheme-specific part of a hierarchical URI consists of the characters between the scheme and fragment parts.The authority part of a hierarchical URI is, if specified, either server-based or registry-based. A server-based authority parses according to the  syntax	[user-info@]host[:port]where the characters @ and : stand for themselves. Nearly all URI schemes currently in use are server-based. An authority part that does not parse in this way is considered to be registry-based.The path component of a hierarchical URI is itself said to be absolute if it begins with a slash character ('/'); otherwise it is relative. The path of a hierarchical URI that is either absolute or specifies an authority is always absolute.A URI instance has then the following nine components:	Part						Type	scheme					String	scheme-specific-part    	String	authority					String	user-info					String	host						String	port						Integer	path						String	query						String	fragment					StringDifference between URI, URL and URN=========================A URI is a uniform resource identifier while a URL is a uniform resource locator.  Every URL is a URI but not every URI is a URL. This is because there is another subcategory of URIs, uniform resource names (URNs), which name resources but do not specify how to locate them. The following expressions are URNs examples	mailto:Pharo-project@lists.gforge.inria.fr	news:comp.lang.smalltalk		urn:isbn:000102002x	"
"RBSmalllintTestObject",""
"NBWin32Shell",""
"RBRemoveClassChange",""
"RBMissingYourselfRule","When using cascaded messages, it is often important to finish the cascade with a yourself message. Why? for several reasons. 		First the messages in the cascade may not return the last receiver but the argument as in the well known case of adding elements in a collection.		| col  | 	col := (OrderedCollection new: 2) add: 1; add: 2.		In this example, col will be assigned to 2 instead of an orderedCollection because add: returns its argument and not the receiver. 		The correct way to do it is using yourself (since yourself returns the receiver).	| col  | 	col := (OrderedCollection new: 2) add: 1; add: 2 ; yourself.			Second case. Using yourself you can block the influence of redefined method. 	Imagine the following example: a method creating an instance, initializing it and returning it.		Box class >> new		| inst | 		inst := self new.		inst initialize. 		^ inst			What this code ensures is that the instance is returned. Using ^ inst initialize would have 	return the same (but with the risk that if initialize did not return the receiver the new method would not return the right instance)		The previous code can be expressed as follow:		Box class >> new		^ self new initialize ; yourself 			Here yourself play the same role as the ^ inst above. "
"ZipArchive","A ZipArchive represents an archive that is read and/or written using the PKZIP file format.ZipArchive instances know how to read and write such archives; their members are subinstances of ZipArchiveMember."
"NECSymbols","I retrieve the symbols for the ecompletion algorithm.TODO remove stupid symbols (like packages and timestamps)I also do not know why I live here (in Pharo package)... I should have my place in Model :)"
"ScrollBar","Inspired by an oiginal design of Hans-Martin Mosner, this ScrollBar is intended to exercise the handling of input events in Morphic.  With sufficient flexibility in this area, all particular behavior can be concentrated in this single class with no need to specialize any other morphs to achieve button, slider and menu-button behavior.Once we have this working, put in logic for horizontal operation as well.CachedImages was added to reduce the number of forms created and thrown away. This will be helpful for Nebraska and others as well."
"KMBuilder",""
"SimplestPaginatedClassListExample",""
"NECModel","I'm an abstract class that stores the entries to be completed."
"MultiCompositionScanner",""
"WidgetBuilt","I am raised when a widget has been built"
"ConfigurationGenerator","Probably to be removed to use metacello toolbox"
"FloatingPointException","I am FloatingPointException, an ArithmeticError indicating a problem in a floating point calculation.Precision underflow or overflow could be considered FloatingPointExceptions.ZeroDivide, DomainError and NaNException are examples of more specific ArithmeticErrors that can be signaled before an operation is actually attempted."
"ClassCommented","This announcement will be emitted when a class or a trait comment changes"
"RBProtocolRegexRefactoring",""
"MatrixTest",""
"CharacterSet","A set of characters.  Lookups for inclusion are very fast."
"MetacelloSymbolicVersionMethodSpec",""
"HashedCollection","I am an abstract collection of objects that implement hash and equality in a consitent way. This means that whenever two objects are equal, their hashes have to be equal too. If two objects are equal then I can only store one of them. Hashes are expected to be integers (preferably SmallIntegers). I also expect that the objects contained by me do not change their hashes. If that happens, hash invariants have to be re-established, which can be done by #rehash.Since I'm abstract, no instances of me should exist. My subclasses should implement #scanFor:, #fixCollisionsFrom: and #noCheckNoGrowFillFrom:.Instance Variables	array:		<ArrayedCollection> (typically Array or WeakArray)	tally:		<Integer> (non-negative)array	- An array whose size is a prime number, it's non-nil elements are the elements of the collection, and whose nil elements are empty slots. There is always at least one nil. In fact I try to keep my ""load"" at 75% or less so that hashing will work well.tally	- The number of elements in the collection. The array size is always greater than this.Implementation details:I implement a hash table which uses open addressing with linear probing as the method of collision resolution. Searching for an element or a free slot for an element is done by #scanFor: which should return the index of the slot in array corresponding to it's argument. When an element is removed #fixCollisionsFrom: should rehash all elements in array between the original index of the removed element, wrapping around after the last slot until reaching an empty slot. My maximum load factor (75%) is hardcoded in #atNewIndex:put:, so it can only be changed by overriding that method. When my load factor reaches this limit I replace my array with a larger one (see #grow) ensuring that my load factor will be less than or equal to 50%. The new array is filled by #noCheckNoGrowFillFrom: which should use #scanForEmptySlotFor: instead of #scanFor: for better performance. I do not shrink."
"RBLiteralArrayToken",""
"HTTPSocket","This class is deprecated in Pharo 2.0 since 2012-10-03T18:02:49Z.Use ZnClient to build, execute and process HTTP client requests."
"Editor","New text editors.TextEditor provides most of the functionality that used to be in TextMorphEditor. This class is no longer a Controller!SmalltalkEditor has Smalltalk code specific features.SimpleEditor provides basic functionality for single line text editing. It does not handle fonts and styles, aligning and Smalltalk utilities. It handles one single line."
"MimeConverter","I'm the base class for converting some data from a MIME type to another. Subclasses should implement #mimeDecode and #mimeEncode."
"DiskStore","I am an abstract superclass for disk store implementations. My subclasses provide access to the actual data storage of a particular kind of filesystem. "
"AbstractNautilusPlugin","AbstractNautilusPlugin is an abstraction of what a plugin for Nautilus is.Mainly, it defines the protocol"
"RBVariableAssignedLiteralRule","See my #rationale."
"ZnRequest","I am ZnRequest, representing an HTTP Request, consisting of a request line, headers and an optional entity (body).I am a ZnMessage.I can be used for generating and parsing.Part of Zinc HTTP Components."
"ColorChanged","I'm a Announcement used to indicate a color has changed. Example:(ColorSelectorDialogWindow new                        title: 'Choose a color';                        open;                        announcer) on: ColorChanged  do: [:ann|                                                                        UIManager inform: 'Selected color: ', ann newColor asString]."
"CompilerExceptionsTest",""
"NBWideString",""
"PoolDefiner",""
"KMKeymapBuilder",""
"HelpTopicListItemWrapper","This class implements a list item wrapper for help topics.Instance Variables"
"HowToMakeYourOwnTutorial","I'm a ProfStef tutorial which teach to create a ProfStef tutorial. Open me withProfStef goOn: HowToMakeYourOwnTutorial."
"MailComposition","a message being composed.  When finished, it will be submitted via a Celeste."
"TreeListMorph","A SimpleHierarchicalListMorph subclass supporting alternative fonts for all items."
"RBMethodModifierOverrideRule","See my #rationale."
"RaisedBorder","see BorderedMorph"
"NativeBoostLinux32",""
"BuilderManifest","A ManifestBuilder is used to create, read and write a Manifest Instance Variables	manifestClass:		<Object>manifestClass	- xxxxx"
"MetacelloMCVersion",""
"ReduceTest",""
"PoolDefiner2",""
"SmalltalkImageTest",""
"WideString","This class represents the array of 32 bit wide characters."
"Interval","I represent a finite arithmetic progression."
"RBRemoveMethodTest",""
"ProportionalLayout","I represent a layout that places all children of some morph in their given LayoutFrame."
"FileHandle","I provide an interface for doing IO on an open file. I keep an id, which as an opaque identifier used by the FilePlugin primitives. I translate positions from the 1-based indexes used in Smalltalk to the 0-based offsets used by the primitives.I do not implement the primitives myself, instead delegating those to an instance of FilePluginPrimitives."
"RegexError","This is a common superclass for errors in regular expressions."
"AJReleaseTemps",""
"LabelClicked","I am an announcement raised when someone click on the label of a CheckboxMorph"
"WeakIdentityKeyDictionary","This class represents an identity dictionary with weak keys."
"RxCharSetParser","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--I am a parser created to parse the insides of a character set ([...]) construct. I create and answer a collection of ""elements"", each being an instance of one of: RxsCharacter, RxsRange, or RxsPredicate.Instance Variables:	source	<Stream>	open on whatever is inside the square brackets we have to parse.	lookahead	<Character>	The current lookahead character	elements	<Collection of: <RxsCharacter|RxsRange|RxsPredicate>> Parsing result"
"MessageBrowser","A MessageBrowser is a UI to browse a list of method, regardless of what they could be.example: MessageBrowser new	openWithSpec;	messages: (SystemNavigation new allSendersOf: #at:)	yourself"
"SparseLargeArray","A version of SparseLargeTable that does not populate its bins until a value other than the default is stored.!"
"AbstractEnumerationVisitor","I'm an abstract superclass for enumeration operations on directory entries. "
"RBSmalllintContext",""
"UndeclaredVariableReference",""
"ZdcOptimizedSocketStreamTests","ZdcOptimizedSocketStreamTests tests ZdcOptimizedSocketStream"
"RBProgramNode","RBProgramNode is an abstract class that represents an abstract syntax tree node in a Smalltalk program.Subclasses must implement the following messages:	accessing		start		stop	visitor		acceptVisitor:The #start and #stop methods are used to find the source that corresponds to this node. ""source copyFrom: self start to: self stop"" should return the source for this node.The #acceptVisitor: method is used by RBProgramNodeVisitors (the visitor pattern). This will also require updating all the RBProgramNodeVisitors so that they know of the new node.Subclasses might also want to redefine match:inContext: and copyInContext: to do parse tree searching and replacing.Subclasses that contain other nodes should override equalTo:withMapping: to compare nodes while ignoring renaming temporary variables, and children that returns a collection of our children nodes.Instance Variables:	comments	<Collection of: Interval>	the intervals in the source that have comments for this node	parent	<RBProgramNode>	the node we're contained inShared Variables:	FormatterClass	<Behavior>	the formatter class that is used when we are formatted"
"ZdcSecureSocketStream","I am ZdcSecureSocketStream, a binary read/write stream for SSL communication.I am a ZdcOptimizedSocketStream.When I am used as a client, call #connect on me before using me as a normal stream.When I am used as a server, call #accept on me before using me as a normal stream.Currently, certificate management is ignored."
"ColorFillStyle","Simple fillstyle that draws a color at the specified origin with option extent."
"MCThreeWayMerger","A MCThreeWayMerger is more advanced merge operation.Operations are subclasses of MCPatchOperation:  addition (MCAddition), modification of an entity (MCModification ) and removal (MCRemoval)."
"LargePositiveIntegerTest",""
"CompilerNotifyingTest","A CompilerNotifyingTest is a TestCase for checking that Compiler/Parser notifications are inserted at the right place in a TextEditor.Instance Variables	expectedErrorPositions:		<Array of: Integer>	expectedErrors:		<Array of: String>	failure:		<Object>	morph:		<TextMorph>	text:		<String>errorPositions	- the position where error text should be inserted for each chunk of text evaluatederrors	- the error text that should be inserted on evaluation of each chunk of text evaluatedfailure	- an object returned in case of evaluation error and whose identity can be uniquely recognized as a failure	morph	- the Morph holding the text	text	- the string containing all the chunks to be evaluated (separated by %)	  and the expected error messages (`enclosed in back quotes`)	  this text will be stripped of the error messages before being evaluated."
"GoferRevert",""
"LazyClassListExample","LazyClassListExample new openOn: Object"
"PSMCClassChangeWrapper",""
"RBSelfNode","I am a specialized version for the 'self'"
"WeakFinalizerItem","My instances is used by weak registry to hold a single weak referenceand executor(s).Once object, referenced weakly by my instance become garbage, a weak registry triggers its executionby sending #finalizeValues to my instance.Note, that a new VM finalization scheme does not implies to use this particular classin order to implement finalization scheme. VM refers only to WeakFinalizationList class. In this way, my class and its implementation can serve as an example for implementing various finalization actions, which may differ from this one, provided by default for use by weak registry.Once initialized, my instance should: - point to particular list (an instance of WeakFinalizationList), - next should be nil - executor or multiple executors initialized - weak reference slot should point to some object of interestAt the moment, when object, referenced weakly, become garbage, VM checks if its fist instance variable is an instance of WeakFinalizationList.If it so, then it adds a given object to this list, and also links the tail of list through 'next' instance variable. So, as a result of garbage collection, a list will contain all objects, which had weak references to garbage collected objects. It is a responsibility of application to manage the instances of WeakFinalizationList's , as well as clear this list before the next garbage collection.As a consequence of that you can: - use multiple different lists and manage them differently in order to react differently when some objects became garbage - you are not obliged to handle/clear the list(s) immediately after GC. You can clean up them periodically. - you can implement own kind of weak referencing object(s), which could use same finalization, provided by newer VMs.VM requires only that an object with weak reference having at least two instance variables,and its first instance variable points to instance of WeakFinalizationList. Everything else is optional."
"FLMigrationTest",""
"NoNetworkError","Signals that no network was found. This could happen, e.g., on dial-up connection when no connection was established when Squeak tried to access it."
"MCVariableDefinition","A MCVariableDefinition represents a variable."
"MetacelloFetchingMCSpecLoader",""
"HandBugs",""
"OSPlatformTest",""
"PermissionsEditor","A PermissionsEditor is a GUI for editing a user permissions"
"CornerRounder","This class is a quick hack to support rounded corners in morphic.Rather than produce rounded rectangles, it tweaks the display of corners.Rather than work for any radius, it only supports a radius of 6.Rather than work for any border width, it only supports widths 0, 1 and 2.The corners, while apparently transparent, still behave opaquely to mouse clicks.Worse than this, the approach relies on the ability to extract underlying bits from the canvas prior to display.  This ran afoul of top-down display, it seems, in SystemWindow spawnReframeHandle: (qv).  It will also make a postscript printer very unhappy.But, hey, it's cute."
"RPackageSet","I'm a set who can be instantiated by pattern matching RPackages (""name"" and ""name-*"").My purpose is to provide a bridge between monticello and system packages, to allow backward compatibility with old packaging. "
"MarginBorder","Border with customisable inner margin."
"WeakMessageSendTest",""
"RBVariableRefactoring",""
"GoferReinitialize","I'm a private and internal class to Gofer. I'm a command used to call the class side initializers on all package code."
"IconicListItem",""
"MailMessageTest",""
"PositionableStream","I represent an accessor for a sequence of objects (a collection) that are externally named by indices so that the point of access can be repositioned. I am abstract in that I do not implement the messages next and nextPut: which are inherited from my superclass Stream."
"MethodAdded","This announcement is emited when we add a method to a class or a trait using:	=> Behavior >> compile: or TraitBehavior >> compile:"
"MultipleMethodsEditor","A MultipleMethodsEditor is a widget to edit multiple methods in one widget"
"FLBlockClosureSerializationTest",""
"NBUInt64","I responsible for marshalling 		unsigned 64-bit integer type values."
"FLPrimitiveCluster","I am a cluster that serializes and materializes interacting directly with the stream."
"WaitfreeQueue","This is a thread-safe implementation of a queue with wait-free operations. It is guaranteed that any message sent to my instance (like adding new item, or fetching item) will not block sender,nor enter a waiting loop.The implementation is based on atomicity of simple assignment operations, which can't be interrupted in a middle,i.e. two assignment statements in a row, like:x:=y.y:=z.can't be interrupted by interpreter and can be seen as a single atomic operation.This implementation fits best for case, when multiple threads populating queue, but only single thread fetching items from it.In given implementation, inserting new items into queue can't block the sender and insertion operation always takes constant time (if we ignore the possible GC interference here).For reading/polling operations queue using a lock mechanism, which indicating that queue currently in the middle of extraction,and therefore, if some thread obtained a lock upon the queue, other threads must wait till one that obtained the lock will finish its operation(s) and release the lock.All operations which may block the sender will answer the default value(s) instead. "
"ZnLogEvent","I am ZnLogEvent, an Announcement sent by an HTTP server or client containing logging information.A log event has a TimeStamp, a Process ID, a category and a message.The following categories are used: #info (I), #debug (D) and #transaction (T).  Part of Zinc HTTP Components."
"RGMethodDefinition","RGMethodDefinition is a concrete representation of methods. It can be used to build browser for methods that are not in the image. It is polymorphic with CompiledMethod. * We can ask a RGMethodDefinition for its selector using the selector message.Example:	(Point>>#dist:) asRingDefinition selector		-> #distWe can also ask the ring object representation of its class or the Smalltalk class actually implementing the corresponding compiledMethod. * To access the ring class definition name, use parentName	aRGMethodDefinition parentName	Example:	(Point>>#dist:) asRingDefinition parentName		->  #Point		* If you have a complete model where classes and methods are ring definition, to access the ring class definition , use parent	aRGMethodDefinition parent	Example:	aRGMethodDefinition(Point>>#dist:) parent		->  aRGClassDefinition(Point)		* If you want to access the smalltalk class that contains the compiledMethod that is represented by a ringMethodDefinition, use realParent	aRGMethodDefinition realParent	Example:	(Point>>#dist:) asRingDefinition realParent		->  Point		Now a RingEntityDefinition offers two APIs: one that is generic and works for all the source code entities and this is the one we just presented: parent, parentName and realParent. Having such interface is important to build generic tools that could manipulate any entities in a polymorphic way (yes no isKindOf: everywhere).In addition, a ring method definition offers a specific interface that should only be used when you know that you are solely manipulatespecific entity such as class element: method definition, class comment, and variables. Here is the equivalence table	realParent 				realClass	parent					ringClass	parentName			className* The message class returns the class of the object :).Example:	(Point>>#dist:) asRingDefinition class		->  RingMethodDefinition		* The message className returns the name of the ring class defining the reingMethodDefinition.Example:	(Point>>#dist:) asRingDefinition className		->  #Point				* If you have a complete model where classes and methods are ring definition, to access the ring class definition , use parent	aRGMethodDefinition ringClass	Example:	aRGMethodDefinition(Point>>#dist:) ringClass		->  aRGClassDefinition(Point)				* If you want to access the smalltalk class that contains the compiledMethod that is represented by a ringMethodDefinition, use realClass	aRGMethodDefinition realClass	Example:	(Point>>#dist:) asRingDefinition realClass		->  Point"
"GoogleIssue","A GoogleIssue is a representation of a Google Issue Tracker issue.see <http://code.google.com/p/support/wiki/IssueTrackerAPI> for a documentation of the google issue api."
"PolygonMorphTest","This class holds tests for PolygonMorph"
"RBExcessiveArgumentsRule","See my #rationale.If the arguments are used in multiple methods this is a clear indication for the creation of an object representing the context in which the computation should occur. 	The defined number of arguments can be edited in #argumentsCount."
"NBCogInterpreterProxy","I am a specialized interpreter proxy for the Cog family of intererpreters"
"ZnStatusLineTests",""
"ChangeRecord","A ChangeRecord represents a change recorded on a file in fileOut format.It includes a type (more needs to be done here), and additional informationfor certain types such as method defs which need class and category."
"MultiCharacterScanner",""
"MorphicBindingsWithSplitters","MorphicBindingsWithSplitters is like MorphicBindings with splitters support in addition"
"HelpAPIDocumentation","This class represents the browsable package API help for the help system.Instance Variables"
"ComposableModel","ComposableModel is an abstract class which represent a applicative model made to be composed with other ComposableModel"
"NBExternalStructure","I am used for transparent structures: that is, a structure is transparent if you know its fields and can modify them. This is in contrast of opaque structures, which you never manipulate directly but through functions.For each struct type, you define a subclass of me, and implement the fieldsDesc class method. After that you do a initializeAccessors for that class and voila, field accessors are generated automatically.Class Instance Variables:	initialized	<Boolean>	currentFields	<NBExternalStructureFields>"
"MorphListItemWrapper",""
"RGPoolVariableDefinition",""
"SimpleEditor","See comment in Editor"
"BuilderManifestTest","A ManifestBuilderTest is a class to test the behavior of ManifestBuilder"
"BraceNode","Used for compiling and decompiling brace constructs.These now compile into either a fast short form for 4 elements or less:	Array braceWith: a with: b ... or a long form of indefinfite length:	(Array braceStream: N) nextPut: a; nextPut: b; ...; braceArray.The erstwhile brace assignment form is no longer supported."
"AbstractGroupAnnouncement",""
"NautilusShowPackagesChanged","A NautilusShowPackagesChanged is raised when the value of showPackages changed"
"FIFOQueueTests",""
"SocketTest",""
"ZnUserAgentSessionTests",""
"JPEGColorComponent","I represent a single component of color in JPEG YCbCr color space.  I can accept a list of blocks in my component from the current MCU, then stream the samples from this block for use in color conversion.  I also store the running DC sample value for my component, used by the Huffman decoder.The following layout is fixed for the JPEG primitives to work:	currentX 		<SmallInteger>	currentY 		<SmallInteger>	hSampleFactor 	<SmallInteger>	vSampleFactor 	<SmallInteger>	mcuBlocks 		<Array of: <IntegerArray of: DCTSize2 * Integer>>	widthInBlocks 	<SmallInteger>	heightInBlocks 	<SmallInteger>	dctSize 			<SmallInteger>	mcuWidth 		<SmallInteger>	mcuHeight 		<SmallInteger>	priorDCValue 	<SmallInteger>"
"Gofer",": Gofer, a person who runs errands. Origin 1960s: from go for, i.e. go and fetch.: ''The New Oxford American Dictionary''! SynopsisGofer is a small tool on top of Monticello that loads, updates, merges, diffs, reverts, commits, recompiles and unloads groups of Monticello packages. Contrary to existing tools Gofer makes sure that these operations are performed as clean as possible:- Gofer treats packages from one or more repository in one operation.- Gofer works with fixed versions or tries to find the ""latest"" version using a given package name.- Gofer automatically assigns repositories to all packages, so that the other tools are ready to be used on individual packages.- Gofer makes sure that there is only one repository instance registered for a single physical location.- Gofer works with Monticello dependencies and uniformly treats them like the primary package.- Gofer prefers to work with faster repositories if there is a choice.- Gofer cleans up after Monticello, no empty class categories and no empty method protocols are to be expected.- Gofer supports operations to sync remote and local repositories with each other.! InstallationGofer is included with the latest Pharo and GemStone distributions. To update to the latest version you can use Gofer itself:== Gofer upgradeIn case you are missing Gofer in your image, grab it from *http://source.lukas-renggli.ch/gofer.html*.! DescriptionGofer is very simple by design, the basic useage scenario is always the same and consists of three steps:# You specify one or more Monticello repository URLs. You can do this using the methods ==url:==, ==url:username:password:== (HTTP, FTP), ==directory:==, or ==repository:== if you need full control. You might also use the convenience methods like ==squeaksource:==, ==wiresong:==, or ==gemsource:== for well known repositories. Additionally the following settings are available:#- Gofer implicitly declares the local package cache as a repository. To disable the local package cache use the method ==disablePackageCache==, to re-enable use ==enablePackageCache==.#- Gofer throws an error if a repository is not reachable. To silently ignore repository erros use the message ==disableRepositoryErrors==, to re-enable use ==enableRepositoryErrors==.# You specify one or more Monticello packages you want to work with, by adding them to the Gofer instance. Use ==version:== to add a specific version, or use ==package:== to add the ""latest"" version in the given repository. Furthermore there is ==package:constraint:== that allows you to further constraint the version to be loaded in a block passed in as the second argument.# You specify one or more actions to be performed on the specified packages:| ==load==	| Load the specified packages.| ==update==	| Update the specified packages.| ==merge==	| Merge the specified packages into their working copies.| ==localChanges==	| Answer the changes between the base version and the working copy.| ==browseLocalChanges==	| Browse the changes between the base version and the working copy.| ==remoteChanges==	| Answer the changes between the working copy and the remote changes.| ==browseRemoteChanges==	| Browse the changes between the working copy and the remote changes.| ==cleanup==	| Cleans the specified packages.| ==commit==	| Commit the modified specified packages.| ==commit:==	| Commit the modified specified packages with the given commit message.| ==revert==	| Revert the specified packages to the currently loaded version.| ==recompile==	| Recompile the specified packages.| ==reinitialize==	| Call the class side initializers on the specified packages.| ==unload==	| Unload the specified packages.| ==fetch==     | Download versions from remote repositories into the local cache.| ==push==      | Upload local versions from local cache into remote repositories.! ExampleTo use Gofer to update to exact versions of the Kom Server, the 'latest' code of Seaside 2.8 and the 'latest' code of the Scriptaculous package that is committed by the author with the initials 'lr' one could evaluate:== Gofer new==     squeaksource: 'KomHttpServer';==     version: 'DynamicBindings-gc.7';==     version: 'KomServices-gc.19';==     version: 'KomHttpServer-gc.32';==     update.== Gofer new==     squeaksource: 'Seaside';==     package: 'Seaside2.8a';==     package: 'Scriptaculous' constraint: [ :version | version author = 'lr' ];==     load"
"SemaphoreTest","A SemaphoreTest is sunit test for simple and multiEx semaphoresInstance Variables none; does not have common test fixture accross all tests (because its testing differenct sorts of semaphores (could refactor into muliple testcases if there were more test conditions."
"ByteArrayTest",""
"MCScriptDefinition",""
"MetacelloToolBoxConstructor",""
"ZnSingleThreadedServer","I am ZnSingleThreadedServer.I can be customized with a delegate (#handleRequest:) and an authenticator (#authenticateRequest:do:).ZnSingleThreadedServer startDefaultOn: 1701.ZnSingleThreadedServer default authenticator: (ZnBasicAuthenticator username: 'foo' password: 'secret').ZnClient get: 'http://localhost:1701' username: 'foo' password: 'secret'.I use ZnDefaultServerDelegate when no other delegate is set.I am single threaded, I run in a single process.I close connections after each request/response cycle.Acknowledgement: basic design copied from Blackfoot.Part of Zinc HTTP Components."
"SingleRuleCriticBrowser","I am a browser for the SmallLint Critics of a rule."
"KoreanEnvironment","This class provides the Korean support.  Unfortunately, we haven't tested this yet.  We did have a working version in previous implementations, but not this new implementation. But as soon as we find somebody who understand the language, probably we can make it work in two days or so, as we have done for Czech support."
"ResumableTestFailure","A ResumableTestFailure triggers a TestFailure, but lets execution of the TestCase continue. this is useful when iterating through collections, and #assert: ing on each element. in combination with methods like testcase>>#assert:description:, this lets you run through a whole collection and note which tests pass.here''s an example:		(1 to: 30) do: [ :each |		self assert: each odd description: each printString, ' is even' resumable: true]for each element where #odd returns <false>, the element will be printed to the Transcript. "
"RBStringReplaceRule","RBStringReplaceRule replaces a matched tree with another tree (which may include metavariable from the matching tree). This is a very succint syntax for specifying most rewrites.Instance Variables:	replaceTree	<RBProgramNode>	The tree to replace the matched tree with."
"Character","I represent a character by storing its associated Unicode. The first 256 characters are created uniquely, so that all instances of latin1 characters ($R, for example) are identical.	The code point is based on Unicode.  Since Unicode is 21-bit wide character set, we have several bits available for other information.  As the Unicode Standard  states, a Unicode code point doesn't carry the language information.  This is going to be a problem with the languages so called CJK (Chinese, Japanese, Korean.  Or often CJKV including Vietnamese).  Since the characters of those languages are unified and given the same code point, it is impossible to display a bare Unicode code point in an inspector or such tools.  To utilize the extra available bits, we use them for identifying the languages.  Since the old implementation uses the bits to identify the character encoding, the bits are sometimes called ""encoding tag"" or neutrally ""leading char"", but the bits rigidly denotes the concept of languages.	The other languages can have the language tag if you like.  This will help to break the large default font (font set) into separately loadable chunk of fonts.  However, it is open to the each native speakers and writers to decide how to define the character equality, since the same Unicode code point may have different language tag thus simple #= comparison may return false.I represent a character by storing its associated ASCII code (extended to 256 codes). My instances are created uniquely, so that all instances of a character ($R, for example) are identical."
"Association","I represent a pair of associated objects--a key and a value. My instances can serve as entries in a dictionary.Implementation notes: Note that hash is not redefined even if the = was redefined because Association>>hash may cause extreme slowdowns in compiling Unicode methods. Association>>hash does not need to hash the value; it's slow and useless."
"NautilusWindow","I am a subclass of StandardWindow with my own iconMaybe I'm useless, but right now I'm not on the top of the to do list"
"RBRefactoringFailure","This error is signalled whenever there is a non recoverable error during refactorings."
"FileReference","I combine a filesystem and path, which is sufficient to refer to a concrete file or directory. I provide methods for navigating my filesystem, performing filesystem operations and opening and closing files.  I am the primary mechanism for working with files and directories. | working |working := FileSystem disk workingDirectory.working files | disk |disk := FileSystem disk.disk root.                               	""a reference to the root directory""disk working.                         	""a reference to the working directory"""
"FillStyle","FillStyle is an abstract base class for fills in the BalloonEngine."
"ShortIntegerArray","ShortIntegerArray is an array for efficiently representing integers in the 16bit range."
"TempVariableNode","I am a parse tree leaf representing a temporary variable"
"MIMEType","I guess and represent the content type of a file. For a description of what is MIME, seehttp://en.wikipedia.org/wiki/Internet_media_typehttp://en.wikipedia.org/wiki/MIMEExamples:MIMEType forFileNameReturnMimeTypesOrDefault: 'index.html'.MIMEType fromMIMEString: 'application/zip'."
"RBRemoveClassRefactoring",""
"RPackageMethodsSynchronisationTest",""
"RxsRegex","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--The body of a parenthesized thing, or a top-level expression, also an atom.  Instance variables:	branch		<RxsBranch>	regex		<RxsRegex | RxsEpsilon>"
"RBMethodScope",""
"CollectionValueHolder","A CollectionValueHolder is s a value holder designed for collections"
"ExpanderMorphContracted","I am an Announcement that occurs when an ExpanderMorph is contracted (rolled-up). Example where visibility of another UI component depends on the expanded/contracted state of Expander 2 |builder expanders ex1 ex2 text list row|builder := UITheme builder.expanders := builder newColumn: { ex1 := builder newExpander: 'Expander 1'. ex2 := builder newExpander: 'Expander 2'}.expanders width: 100; hResizing: #rigid.text := builder newTextEditorFor: (ValueHolder new contents: 'Some text') getText: #contents setText: #contents:.list := (builder newListFor: (ListModel new list: #('One' 'Two' 'Three' 'Four'); selectionIndex: 3) list: #list selected: #selectionIndex changeSelected: #selectionIndex: help: 'This is a list')  minWidth: 120;  visible: false;  disableTableLayout: true.ex2 announcer when: ExpanderMorphContracted do: [list hide; disableTableLayout: true]; when: ExpanderMorphExpanded do: [list show; disableTableLayout: false].row := builder newRow: { expanders. (builder newRow: {text. list})  vResizing: #spaceFill}."
"IncrementalSliderMorph",""
"TextConstants",""
"PharoTrackerLabels","I contain the labels for the google issue tracker entries"
"ColorEditor",""
"ExpressionEvaluated","This announcement correspond to code evaluation.  For example, a DoIt or PrintIt evaluated in a workspace raises one of this announcements."
"MethodWidget","MethodWidget is the basic implementation of a wiget managing methods"
"RBClassCommentsSpellingRule","See #name for the area where I check spelling."
"ZnMimeTypeTests",""
"MethodIsTestAction","Aciton when the method is a test"
"HelpTopic","A HelpTopic provides content information that can be used as a help to the user.It can be labeled with a title, identified using an (optional) unique key and marked with an (optional) icon.Help topics form a hierarchy since any topic is able to have zero or moresubtopics. Instance Variables	contents:		<Object>      The help topic contents	icon:			<Form|nil>	   An optional icon for the topic	key:			<String|nil>    An optional unique key	subtopics:	      <Collection>  A collection of subtopics	title:			<String>        The titlecontents	- The help topic contents - typically containing the help topics informationicon	- An optional icon for the topickey	- An optional unique key which can be used to identify the topic. subtopics	- A collection of subtopics. 	  By default the subtopics are not sorted, so the insertion order is used. 	  If necessary it is possible to sort the subtopics by title.title	- A meaninful title for the help topic"
"JobStart","A JobStart is announcement announcing the start of a job execution.SystemAnnouncer uniqueInstance 	on: JobStart send: #XXX to: whoever."
"ClassRemoved","the annoucement will be emitted when removing a class or a trait using:  	=> removeFromSystem"
"ProfStefTutorialsHelp","I'm a HelpSystem book which list all ProfStef tutorials"
"SpecLayoutSend","A SpecLayoutSend is a spec layout action used when a selector is sent to the layout"
"AbstractWidget","AbstractWidget is an abstraction for the different widget which could be used to compose the Nautilus UI"
"MultistateButtonMorph","A simple button that handles multiple fillstyle states:	Normal	Mouse-over	Mouse-down-inside	Mouse-down outside	with variants being a combination of passive/active and enabled/disabled."
"MouseClickState","MouseClickState is a simple class managing the distinction between clicks, double clicks, and drag operations. It has been factored out of HandMorph due to the many instVars.Instance variables:	clickClient 	<Morph>		The client wishing to receive #click:, #dblClick:, or #drag messages	clickState 	<Symbol>	The internal state of handling the last event (#firstClickDown, #firstClickUp, #firstClickTimedOut)	firstClickDown 	<MorphicEvent>	The #mouseDown event after which the client wished to receive #click: or similar messages	firstClickUp 	<MorphicEvent>	The first mouse up event which came in before the double click time out was exceeded (it is sent if there is a timout after the first mouse up event occured)	firstClickTime 	<Integer>	The millisecond clock value of the first event	clickSelector 	<Symbol>	The selector to use for sending #click: messages	dblClickSelector 	<Symbol>	The selector to use for sending #doubleClick: messages	dblClickTime 	<Integer>	Timout in milliseconds for a double click operation	dragSelector 	<Symbol>	The selector to use for sending #drag: messages	dragThreshold 	<Integer>	Threshold used for determining if a #drag: message is sent (pixels!)"
"RBBlockScope",""
"FloatInspector","I am FloatInspector.I am an Inspector.I am a specialized Inspector for Floats.I add extra elements (sign, significand, exponent) of the Float object that I am inspecting.Note that these should be interpreted assign * significand * (2 raisedToInteger: exponent)"
"MCFtpRepository",""
"PharoUIThemeIcons",""
"AJx64Assembler","I am an assembler for the Intel x86-64 architecture."
"FileDirectoryWrapper",""
"RBMissingTranslationsInMenusRule",""
"DateModel","A DateModel is a widget for choosing dates. It consists of:- A text box, into which you can type any string which can be converted into a Smalltalk date- A button, which displays a calendar, from which you can select a dateUsage: the simplest way is to add a DateModel in your UI, and send #date when you want its value.As it is Spec-based, it can be easily adapted and composed into a larger UI."
"BracketMorph","Morph displaying opposing arrows."
"ClassTraitTest",""
"MCFileInTest",""
"AsyncFile","An asynchronous file allows simple file read and write operations to be performed in parallel with other processing. This is useful in multimedia applications that need to stream large amounts of sound or image data from or to a file while doing other work.Closing the file after its use is currently required to not leak external semaphores. "
"RBPragmaNode","RBPragmaNode is an AST node that represents a method pragma.Instance Variables:	arguments <SequenceableCollection of: RBLiteralNode> our argument nodes	left <Integer | nil> position of <	right <Integer | nil> position of >	selector <Symbol | nil>	the selector we're sending (cached)	selectorParts <SequenceableCollection of: RBValueToken> the tokens for each keyword"
"RBPushDownClassVariableRefactoring",""
"SettingTreeBuilder",""
"MCSnapshotTest",""
"ObjectFinalizerCollection","An ObjectFinalizerCollection is simple collection which is intended to hold ObjectFinalizers and be used by WeakRegistry."
"JobNotification","A JobNotification class is an abstract class representing the root of JobNotification."
"ListSpec","A ListSpec is a spec used to describe a list"
"MetacelloCleanNotification",""
"ScaledDecimalTest","I provide a test suite for ScaledDecimal values. Examine my tests to see how SmallIntegers should behave, and see how to use them."
"MCVersionHistoryBrowser",""
"SettingRegexpFilter","A SettingRegexpFilter is SettingFilter which makes use of a regular expression in order to keep or not a SettingHandler.Instance Variables	regexp:		<String>regexp	- a regular expression string"
"CharacterTest","This is the unit test for the class Character. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"SHRange","I associate a type with a range of characters in a StringI have these instance variables...	start - the one based index of the first character of the range within the String.	end - the one based index of the last character  of the range within the String.	type - a Symbol describing the type of the range	A sequence of instances of me are created by an instance of SHParserST80 which can then used by an instance of  SHTextStyler to style Text. "
"MethodIsAbstractAction","Action when the method is abstract"
"RBCommentChange",""
"ClippingCanvas","A modified canvas which clips all drawing commands."
"Protocol","A Protocol is a simple value holder representing a protocol.It's composed of a name and a set of method selectors"
"MetacelloAbstractConstructor",""
"TextEditor","See comment in Editor.My instances edit Text, this is, they support multiple lines and TextAttributes.They have no specific facilities for editing Smalltalk code. Those are found in SmalltalkEditor."
"MCVersionInfoWriter","I serialize an MCVersionInfo into a given stream.If the version info has been serialized before I output a compacted version consiting of the id."
"LogicalFont","I describe a font."
"MCRepositoryInspector",""
"RBAddPoolVariableChange",""
"MCDictionaryRepositoryTest",""
"TextKernTest",""
"WeakFinalizersTest",""
"RBCollectionMessagesToExternalObjectRule",""
"RectangleTest",""
"StartupUIManager",""
"FileDialogWindow","Dialog based file chooser for selcting or saving files. Supports various types of answer (file stream, file name, directory path etc) with optional extension filters and image or text file preview."
"KMAltModifier",""
"FileSystemDirectoryEntry","I am a cache for metadata about a file or directory. The information I hold is as follows:reference	A reference to the file or directory to which my data pertains.	creation	The creation date and time, stored as number seconds since the 	Smalltalk epoch.	modification	The modification date and time, number seconds since the Smalltalk epoch.	isDirectory 	True if my data pertains to a directory, false if a file.	size	Size in bytes for a file, 0 for a directory."
"HashTableSizes","HashTableSizes is a helper class, used by hashedCollections to determine sizes for hash tables.Public protocol is all class-side:#goodSizeAtLeast: anInteger   answers a ""good"" integer greater than or equal to the given integer.An integer is not ""good"" as a hash table size if it is any of:* Not prime* Divides 256**k +- a, for small k and a* Close to a power of two* Close to dividing the hashMultiply constantSee Andres Valloud's hashing book, and Knuth TAOCP vol. 3.This class caches a table of selected good primes within the positive SmallInteger range. When this table must be rebuilt, it uses an instance to compute the table. Primes are selected to keep the table fairly small, with approximately five entries per power of two.The cached table is ordered, and is searched with a binary search to find the closest good size >= the requested size."
"RBRenameClassRefactoring",""
"RBPatternBlockNode","RBPatternBlockNode is the node in matching parse trees (it never occurs in normal Smalltalk code) that executes a block to determine if a match occurs. valueBlock takes two arguments, the first is the actual node that we are trying to match against, and second node is the dictionary that contains all the metavariable bindings that the matcher has made thus far.Instance Variables:	valueBlock	<BlockClosure>	The block to execute when attempting to match this to a node."
"RxsNode","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A generic syntax tree node, provides some common responses to the standard tests, as well as tree structure printing -- handy for debugging."
"ReadStream","I represent an accessor for a sequence of objects that can only read objects from the sequence."
"RBInlineMethodFromComponentRefactoring",""
"TextFontChange","A TextFontChange encodes a font change applicable over a given range of text.  The font number is interpreted relative to the textStyle governing display of this text."
"FLEncoder","I am an abstraction used by the serialization algorithm to encode the graph in a stream."
"NetNameResolverTest",""
"WideCharacterSet","WideCharacterSet is used to store a Set of WideCharacter with fast access and inclusion test.Implementation should be efficient in memory if sets are sufficently sparse.Wide Characters are at most 32bits.We split them into 16 highBits and 16 lowBits.map is a dictionary key: 16 highBits value: map of 16 lowBits.Maps of lowBits  are stored as arrays of bits in a ByteArray.If a bit is set to 1, this indicate that corresponding character is present.8192 bytes are necessary in each lowmap.Empty lowmap are removed from the map Dictionary.A byteArrayMap is maintained in parallel with map for fast handling of ByteString.(byteArrayMap at: i+1) = 0 means that character of asciiValue i is absent, = 1 means present."
"ZnHeadersTests",""
"AGroupHasBeenUnregistered",""
"MCVersion",""
"SettingTree","A SettingTree is responsible for the building of system setting trees from a collection of pragma.Built tree nodes are instances of SettingNode. Built trees are suitable for tree browsing with the help of a MorphTreeMorph (see SettingBrowser>>treeMorphIn: and SettingBrowser>>roots to know how a SettingBrowser is initializing its MorphTreeMorph with the help of a SettingTree). Below, two examples of tree building with a SettingCollector are shown.---------------(SettingTree acceptableKeywords: #(#'systemsettings')) settingTreeRoots. ""get system setting trees""---------------Instance Variables	collector		<PragmaCollector>	nodeList		<A list of SettingNode>"
"MaybeContextInstanceVariableNode","This class conspires to arrange that inst var access for contexts is done exclusively using the long-form instance variabl;e access bytecodes.  See InstructionStream class>>variablesAndOffsetsDo:.A virtual machine can benefit in performance by organizing method and block activations using a  more conventional stack organization than by using first-class activation records (contexts).  But such a virtual machine is also cabable of hiding the stack and making it appear as if contexts are still used.  This means the system has better performance but still has all the benefits of first-class activation records.  To pull this off the VM needs to intercept any and all accesses to context objects so that it can make contexts function as proxy objects for stack frames.Without help from the image such a virtual machine based on an interpreter would have to perform an expensive check on all instance variable accesses to determine if the instance variable was that of a context serving as a proxy for a stack frame.  A simple hack is to take advantage of the short and long forms of instance variable access bytecodes.  The BlueBook instruction set (and likely any bytecode set evolved from it) has short form bytecodes for fetching and storing the first few bytecodes (BlueBook fetch first 16, store first 8).  Contexts typically have at most 6 instance variables.  If we arrange to use the long-form bytecodes for all context inst var accesses then we only have to check for context inst var access in long-form bytecodes, and then only if the index is within the context inst var range.  This effectively makes the check free because on modern processors checking an index fetched from memory into a register against a constant costs far less than the memry read to fetch the index."
"TraitFileOutTest",""
"MCMerger","A MCMerger is an abstract responsible for performing merge operations and detecting conflicts."
"KeyNotFound","I am KeyNotFound, an exception indicating that a key was not found in a Dictionary."
"TextDiffBuilder","I implement the diff algorithm. I can show the differences between two texts. See my method comments for further information.Instance Variables	xLines:		<Array>	yLines:		<Array>xLines	- an Array of DiffElement which is created from the first input textyLines	- an Array of DiffElement which is created from the second input text"
"TextIndent","create a hanging indent. "
"FLSingletonMock",""
"TestURI","Main comment stating the purpose of this class and relevant relationship to other classes.   Some parsers allow the scheme name to be present in a relative URI if   it is the same as the base URI scheme.  This is considered to be a   loophole in prior specifications of partial URI [RFC1630]. Its use   should be avoided.      http:g        =  http:g           ; for validating parsers                    |  http://a/b/c/g   ; for backwards compatibility"
"RxmBranch","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--This is a branch of a matching process. Either `next' chain should match, or `alternative', if not nil, should match. Since this is also used to build loopbacks to match repetitions, `loopback' variable indicates whether the instance is a loopback: it affects the matcher-building operations (which of the paths through the branch is to consider as the primary when we have to find the ""tail"" of a matcher construct).Instance variables	alternative		<RxmLink> to match if `next' fails to match.	loopback		<Boolean>"
"FilePath","This class absorb the difference of internal and external representation of the file path.  The idea is to keep the internal one as much as possible, and only when it goes to a primitive, the encoded file path, i.e. the native platform representation is passsed to the primitive.	The converter used is obtained by ""LanguageEnvironment defaultFileNameConverter""."
"Abort",""
"RBAddInstanceVariableRefactoring",""
"FLVariablesMapping","I am used to materialize instance variables in an object, tolerating ""class shape changing"".Cases tolerated are:- instance variable added- instance variable order change- instance variable removed"
"TranslucentColor","A TranslucentColor behaves just like a normal color, except that it will pack its alpha value into the high byte of a 32-bit pixelValue.  This allows creating forms with translucency for use with the alpha blend function of BitBlt.  An alpha of zero is transparent, and 1.0 is opaque."
"RBBlockNode","RBBlockNode is an AST node that represents a block ""[...]"".Instance Variables:	arguments	<SequenceableCollection of: RBVariableNode>	the arguments for the block	bar	<Integer | nil>	position of the | after the arguments	body	<RBSequenceNode>	the code inside the block	colons	<SequenceableCollection of: Integer>	positions of each : before each argument	left	<Integer>	position of [	right	<Integer>	position of ]"
"AbstractMethodConverter","An AbstractMessageConverter is a wrapper used to switch which information to retrieve from a method.This way, you can avoid switch case, you just have to use set the correct filter"
"SystemSettingLauncher",""
"GZipReadStream","gzip is an integral part of the VM. "
"MetacelloMethodSection",""
"FLNotSerializableMock",""
"AJJumpInstruction",""
"MessageListBrowser","MessageListBrowser is the UI for instances of MessageListInstance Variables:	messageList	<Object>	dictionary	<BrowserEnvironment | Dictionary | OpenFileStreamRegistry | RBSmallDictionary | SharedPool class | SmallDictionary | SmalltalkImage | WeakRegistry>	originalList	<ProtoObject | PseudoContext>	selectedMorph	<Object>	treeMorph	<MorphTreeMorph>	textArea	<CodeMorph | OBPluggableTextMorphWithShout | PluggableShoutMorph | PluggableTextMorphPlus>	dropList	<ProtoObject | PseudoContext>	preference	<Object>	sortingSelector	<ProtoObject | PseudoContext>"
"NBSTMethodArgument","i know what to emit for loading a method's argument from VM stack into register"
"AlignmentMorph","Used for layout.Since all morphs now support layoutPolicy the main use of this class is no longer needed.Kept around for compability. Supports a few methods not found elsewhere that can be convenient, eg. newRow"
"Morph","A Morph (from the Greek ""shape"" or ""form"") is an interactive graphical object. General information on the Morphic system can be found at http://minnow.cc.gatech.edu/squeak/30. Morphs exist in a tree, rooted at a World (generally a PasteUpMorph). The morphs owned by a morph are its submorphs. Morphs are drawn recursively; if a Morph has no owner it never gets drawn. To hide a Morph and its submorphs, set its #visible property to false using the #visible: method. The World (screen) coordinate system is used for most coordinates, but can be changed if there is a TransformMorph somewhere in the owner chain. My instance variables have accessor methods (e.g., #bounds, #bounds:). Most users should use the accessor methods instead of using the instance variables directly.Structure:instance var 	Type 			Description bounds 			Rectangle 		A Rectangle indicating my position and a size that will enclose 									me. owner 			Morph		 	My parent Morph, or nil for the top-level Morph, which is a 				or nil			world, typically a PasteUpMorph.submorphs 		Array 			My child Morphs. fullBounds 		Rectangle 		A Rectangle minimally enclosing me and my submorphs. color 			Color 			My primary color. Subclasses can use this in different ways. extension 		MorphExtension Allows extra properties to be stored without adding a				or nil  				storage burden to all morphs. By default, Morphs do not position their submorphs. Morphs may position their submorphs directly or use a LayoutPolicy to automatically control their submorph positioning.Although Morph has some support for BorderStyle, most users should use BorderedMorph if they want borders."
"Form","A rectangular array of pixels, used for holding images.  All pictures, including character images are Forms.  The depth of a Form is how many bits are used to specify the color at each pixel.  The actual bits are held in a Bitmap, whose internal structure is different at each depth.  Class Color allows you to deal with colors without knowing how they are actually encoded inside a Bitmap.	  The supported depths (in bits) are 1, 2, 4, 8, 16, and 32.  The number of actual colors at these depths are: 2, 4, 16, 256, 32768, and 16 million.	Forms are indexed starting at 0 instead of 1; thus, the top-left pixel of a Form has coordinates 0@0.	Forms are combined using BitBlt.  See the comment in class BitBlt.  Forms that repeat many times to fill a large destination are InfiniteForms.	colorAt: x@y		Returns the abstract Color at this location	displayAt: x@y		shows this form on the screen	displayOn: aMedium at: x@y	shows this form in a Window, a Form, or other DisplayMedium	fillColor: aColor		Set all the pixels to the color.	edit		launch an editor to change the bits of this form.	pixelValueAt: x@y	The encoded color.  The encoding depends on the depth."
"NBInt64","I responsible for marshalling 		signed 64-bit integer type values."
"AJx86Assembler","I am an Assmbler for the Intel x86 (32Bit) architecture.Example:	asm := AJx64Assembler new.	""by default the assembler will set up a stack frame""	asm noStackFrame.	""load the constant 16r12 into the RAX register""	asm mov: 16r12 to: asm RAX.	""output the bytes for this instruction""	asm bytes "
"True","True defines the behavior of its single instance, true -- logical assertion. Notice how the truth-value checks become direct message sends, without the need for explicit testing.Be aware however that most of these methods are not sent as real messages in normal use. Most are inline coded by the compiler as test and jump bytecodes - avoiding the overhead of the full message sends. So simply redefining these methods here will have no effect."
"NBNativeCodeGen","I providing a basic interface for use a dynamically generated native code with NativeBoost plugin using #primitiveNativeCall.On my class side, you can find the interface to help managing native code, as well as basic functionality for dealing with it at run time. My instance serves as a helper to access common facilities used for code generation:  - assembler - interpreter proxyi do not provide anything beyond that, so you still basically on you own, and must use assembler and interpreter proxy for implementing a low-level funcitonalityin your code (like new primitive, new function etc)Instance Variables:	asm							: An object that is used to generate native code	proxy	<NBInterpreterProxy> : An object providing an access to public VM interface: like fetching a var from smalltalk stack, accessing object's internals, etc.	options	<Collection>   : A set of options which generated code may use 	method 	: a compiled method instance where native code will be installed to, (of course in case if my instance used for generating code to be installed there,		and if not, it can be ignored)		Usage:My most simple use is in a form: myMethod <primitive: #pritmiveNativeCall module: #NativeBoostPlugin>  ^ NBNativeCodeGen methodAssembly: [:gen |	 ""here you put an instructions or provide own machine code.	a block should answer a bytearray, which should contain ready for use machine code""	]In case, if you want to use different top-level interface, like in order to write something like following:myMethod <primitive: #pritmiveNativeCall module: #NativeBoostPlugin>  ^ self myCode: [	 ""here you put an instructions or provide own machine code""	]You can use #handleFailureIn:nativeCode: method , which takes care of handling primitive failure, dealing with errors and finally installing native code, which you providing, into corresponding method."
"StringMorph","StringMorph is a ""lightweight"" Morph to display a String. It supports only a single font, color, and emphasis combination. For multiple text styles, use TextMorph.Structure:instance var    	Type              Description font 			StrikeFont 		(normally nil; then the accessor #font gives back TextStyle 				or nil			defaultFont) emphasis 		SmallInteger	bitmask determining character attributes (underline, bold, 								italics, narrow, struckout) contents 		String 			The text that will be displayed. hasFocus 		Boolean 		Do I have the keyboard focus or not? If you shift-click on a StringMorph you can edit its string. This is accomplished the following way: StringMorph can launch a StringMorphEditor if it receives a #mouseDown event.A StringMorph may also be used like a SimpleButtonMorph to do an action when clicked. Use the menu 'extras' / 'add mouseUpAction'.The following propery will be defined:aStringMorph valueOfProperty: #mouseUpCodeToRun"
"ZnClient","I am ZnClient, an object to build, execute and process HTTP client requests.I have a rich protocol to construct requests and to access responses.I have various error handling options.I can reuse an existing connection to a specific host:port.I handle sessions, cookies, redirects and authentication.I have many options (settings) with sensible defaults.Simplest possible invocation:	ZnClient new		get: 'http://zn.stfx.eu/zn/numbers.txt'.	Using some features to make a better HTTP request:	ZnClient new		systemPolicy;		accept: ZnMimeType textPlain;		http;		host: 'zn.stfx.eu';		path: 'zn/numbers.txt';		contentReader: [ :entity | entity contents lines collect: [ :each | each asNumber ] ];		ifFail: [ :exception | self inform: 'I am sorry: ', exception printString ];		get.Part of Zinc HTTP Components."
"SettingDeclaration","A SettingDeclaration is an handler for a writtable setting value. Its main responsibility is allow real value changing and to hold descriptive data about the setting. When the real value is changed, all declared listeners are notified. The standard event mechanism is used for that purpose. See #value: method which is call in order to change a setting value. Whatever object can declare its interest in the real value changes by sending #whenChangedSend:to: to a setting. See notification protocol.For convenience, my olds values are registered in a list. This list is used by the SystemSettingBrowser in order to easily retrieve previous values.The type instance variable is a Symbol. It is used by the SystemSettingBrowser in order to build the input widget of a setting.It can be the name of the class or the name of a superclass of the value. In that case, the input widget is built by #settingInputWidgetForNode: implemented by the class which name is the value of the type instance variable. As an example, the input widget for a Boolean is built by Boolean class>>settingInputWidgetForNode:.Type value is not limited to be a class name. It can also be whatever symbol. In that case, the selector corresponding to the message to send to the setting in order to build the inputWidget is built by SettingDeclaration>>localInputWidgetSelector. If the type instance variable is not set, then it is dynamically set to the class name of the value. See SettingManager comment for more explanations.Instance Variables	default:		<Object>	getSelector:		<Object>	ghostHelp:		<Object>	setSelector:		<Object>	type:		<Object>default	- xxxxxgetSelector	- xxxxxghostHelp	- xxxxxsetSelector	- xxxxxtype	- xxxxx"
"MCVersionTest",""
"AnnouncementMockC","This is a simple test mock"
"SystemResolverTest",""
"SliderSpec","A SliderSpec is the spec used to describe a slider"
"MCMczWriter",""
"FLProxyThatBecomesItsContent","Used at #testObjectByProxyThatBecomesItsContent"
"UnixStore","I'm a specific store for Unix file systems"
"NautilusWrapper","A NautilusWrapper is a wrapper which hold a single step of the Nautilus browsing history"
"MethodOveridesAction","Action when the method overrides another one, or the method is overidden by another one or both"
"ZnLogListener","I am ZnLogListener.I am an abstract class, subclasses should implement #event:.I add filtering and monitor for exclusive access.Part of Zinc HTTP Components."
"ClassOrganizationDeclaration","I represent the declaration of a class organization in a file.  My contents is the class organization string to import, and the class organizer is the one of the changed class.Sending me the message #import makes me install the class organization I carry into the class."
"ProfStefTestNavigation",""
"TextVariableLink",""
"MailAddressParserTest","This is the unit test for the class MailAddressParser. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"NautilusPluginManagerTree","A NautilusPluginManagerTree is a tree which is used to render the plugins selection"
"Categorizer","A Categorizer is responsible to manage the class categories and method protocols. Instances consist of an Array of category names (categoryArray), each of which refers to an Array of elements (elementArray). This association is made through an Array of stop indices (categoryStops), each of which is the index in elementArray of the last element (if any) of the corresponding category. For example: categories := Array with: 'firstCat' with: 'secondCat' with: 'thirdCat'. stops := Array with: 1 with: 4 with: 4. elements := Array with: #a with: #b with: #c with: #d. This means that category firstCat has only #a, secondCat has #b, #c, and #d, and thirdCat has no elements. This means that stops at: stops size must be the same as elements size. Instance Variables      categoryArray:          <SequenceableCollection of: Object>      categoryStops:          <SequenceableCollection of: Integer>      elementArray:           <SequenceableCollection of: Object>categoryArray       - holds the list of categories.       A category could be any Object but is generally a String or Symbol.       Categories should be unique (categoryArray asSet size = categoryArray size)categoryStops       - holds the index of last element belonging to each category.       There should be a category stop for each category (categoryStops size = categoryArray size).       The categoryStops should be sorted (categoryStops sorted = categoryStops).       A category stop equal to its predecessor (= 0 for the first category stop) denotes an empty category.elementArray      - holds the elements to be classified. The elements are sorted by category.Class variables       Default is the default category used to classify yet unclassified methods of a class       NullCategory is the category to be displayed in a Browser for a class having no method."
"MultiColumnListModel","A MultiColumnListModel is a spec model for Multi columns list"
"FLPluggableSubstitutionTest",""
"MCSerializationTest",""
"TextHighlight","Definition of a clickable highlighted range of text with optional borders."
"Authentifier","An Authentifier is a UI made for specifying username and password"
"MCVersionReader",""
"CompiledMethodInspector",""
"ZnHTTPSTests","ZnHTTPSTests.These require that the ZnZodiacNetworkingUtils socket stream factory is enabled:	ZnNetworkingUtils default: ZnZodiacNetworkingUtils new.	Part of Zinc HTTP Components"
"ObjectFinalizerTests",""
"ContextVariablesInspector","I represent a query path into the internal representation of a ContextPart. Typically this is a context at a point in the query path of a Debugger. As a StringHolder, the string I represent is the value of the currently selected variable of the observed temporary variable of the context."
"AJInstructionDecoration",""
"ClassHierarchyTest",""
"WindowEdgeGripMorph","Window edge gripper allowing resizing of a window by a particular side."
"RBBrowserEnvironmentTest",""
"MCPreambleDefinition",""
"PluggableMultiColumnListMorph","This morph can be used to show a list having multiple columns,  The columns are self width sized to make the largest entry in each list fit.  In some cases the pane may then be too narrow.Use it like a regular PluggableListMorph except pass in an array of lists instead of a single list.There are base assumptions made here that each list in the array of lists is the same size.Also, the highlight color for the selection is easy to modify in the #highlightSelection method.  I used bluewhen testing just to see it work."
"RBSelectorEnvironment",""
"FLSerialization","I implement the algorithm for serializing an object graph on a stream. FLSerializer known how to build instances of me."
"NECClassVarEntry","I represent a class Variable"
"RBClassReference","I am a specific variable node used for ClassReferences"
"FLGlobalClassSideCluster","I am a cluster for those Metaclasses and ClassTrait who are not stored in detail."
"RBProtocolEnvironment",""
"RGTraitDescriptionDefinition","RGTraitDescriptionDefinition is the common parent for traits and metatraits that know their users (ie. classes/metaclasses)"
"AJInstruction",""
"Utilities","An empty class to help people loading their code when it contains sends to  methods of Utilities."
"MessageCatcher","Any message sent to me is returned as a Message object.""Message catcher"" creates an instance of me."
"RowLayout","A simple row layout."
"BlockNode","I represent a bracketed block with 0 or more arguments and 1 or more statements. If I am initialized with no statements, I create one. I have a flag to tell whether my last statement returns a value from the enclosing method. My last three fields remember data needed for code generation. I can emit for value in the usual way, in which case I create a literal method (actually a context remotely copied) to be evaluated by sending it value: at run time. Or I can emit code to be evaluated in line; this only happens at the top level of a method and in conditionals and while-loops, none of which have arguments."
"RBAddClassTraitChange",""
"SHA1","This class implements the Secure Hash Algorithm (SHA) described in the U.S. government's Secure Hash Standard (SHS). This standard is described in FIPS PUB 180-1, ""SECURE HASH STANDARD"", April 17, 1995.The Secure Hash Algorithm is also described on p. 442 of 'Applied Cryptography: Protocols, Algorithms, and Source Code in C' by Bruce Scheier, Wiley, 1996.See the comment in class DigitalSignatureAlgorithm for details on its use.Implementation notes:The secure hash standard was created with 32-bit hardware in mind. All arithmetic in the hash computation must be done modulo 2^32. This implementation uses ThirtyTwoBitRegister objects to simulate hardware registers; this implementation is about six times faster than using LargePositiveIntegers (measured on a Macintosh G3 Powerbook). Implementing a primitive to process each 64-byte buffer would probably speed up the computation by a factor of 20 or more."
"TickSelectionCheckboxMorph","A TickSelectionCheckboxMorph is a checkbox which propagate a bit more the events"
"KeyChain","A KeyChain is a holder for username/password.It can be queried by the system to prevent the user to be forced to set his or her password each time.keys have this structure:|- group1 (by example squeaksource) 	-> (username -> password)|- group2 (by example smalltalkhub) 		-> (username -> password)"
"Lesson","See class side messages #welcome, #doingVSPrinting...."
"AJRoutinePrologue","This is a pseudo-instruction to indicate a place in native code for routine prologue.It is later replaced by real instructions which contain code for initializing stack frame & extra stack space required by routine."
"MethodFinderTest","To do:	- radix should be returned "
"WeakKeyDictionary","I am a dictionary holding only weakly on my keys. This is a bit dangerous since at any time my keys can go away. Clients are responsible to register my instances by WeakArray such that the appropriate actions can be taken upon loss of any keys. As key may disappear at any time, my reported size may be greater than the number of keys encountered in iterations.See WeakRegistry for an example of use.Implementation notes:I am a set of WeakAssociations. Each WeakAssociation can be in one of three states: a key is present, or the key has been garbage-collected, or the association is expired (meaning that the value has also been released). During finalization, associations with no key expire, but I still keep them to avoid rehashing the entire set. When adding a new entry, the new entry can either go into a slot that is nil, or one that has an expired association. I keep a count of expired associations and rehash when there are too many (currently, if they account for more than 25% of the space)."
"AbstractSpec","An AbstractSpec is a basic wrapper which describe a spec.For now it can seems useless, but structural info will be stored thanks to those wrappers"
"SimpleBalloonMorph",""
"GoferWorking",""
"SystemProgressMorph","I display a set of progress indicator in a list.Special care is taken to update the view while the rest of the UI process is blocked.Reset.SystemProgressMorph reset.Examples.self show: 'Doing...' from: 500 to: 600 during: [ :bar |	500 to: 600 do: [ :x | 		bar current: x.		(Delay forMilliseconds: 20) wait 		""Just to slow it down so we can see what's going on"" ] ].self show: 'Doing...' from: 0 to: 50 during: [ :bar |	0 to: 50 do: [ :x | 		bar increment.		bar label: x asString.		(Delay forMilliseconds: 20) wait ""Just to slow it down so we can see what's going on"" ] ]."
"RBAddParameterRefactoring",""
"TimeStamp","This represents a duration of 0 length that marks a particular point in time."
"WateryThemeIcons","Watery theme specific icons."
"NBFFICalloutAPI",""
"AJx86Registers","I am a SHaredPool which initializes all the registers needed by the Assmbler."
"RBFormatter","RBFormatter formats a parse tree. It is an example of a Visitor. This is rarely called directly. Sending 'formattedCode' to a parse tree uses this algorithm to return a pretty-printed version.Instance Variables:	codeStream	<PositionableStream>	The buffer where the output is accumulated.	firstLineLength	<Integer>	The length of the first line of a message send.	lineStart	<Integer>	The position of the current line's start.	tabs	<Integer>	The number of tabs currently indented."
"MCDataStreamTest",""
"FLMethodContextCluster","I am a cluster for MethodContexts."
"FinderSingleMethodNode","A FinderSingleMethodNode is a node used to display a selector implemented only once in the system"
"OutOfScopeNotification",""
"MCMockDependentItem",""
"RGNamedDefinition","RGDefinition is a named ring object."
"UndefinedObject","I describe the behavior of my sole instance, nil. nil represents a prior value for variables that have not been initialized, or for results which are meaningless."
"GenericUrlTest",""
"SpecDescription",""
"ProfStefHelpTutorialBuilder","I build HelpSystem topics to browse ProfStef tutorials"
"StringTest","This is the unit test for the class String. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"CriticsCache","I am a cache for the critics and false positives criticsInstance Variables	browser:		<Object>	checker:		<Object>	critics:		<Object>	falsePositiveClasses:		<Object>	falsePositiveRules:		<Object>	falsePositives:		<Object>	packages:		<Object>	toDos:		<Object>browser	- xxxxxchecker	- xxxxxcritics	- xxxxxfalsePositiveClasses	- xxxxxfalsePositiveRules	- xxxxxfalsePositives	- xxxxxpackages	- xxxxxtoDos	- xxxxx"
"RBExtractMethodToComponentTest",""
"CompositeBorder","Border supporting multiple ""sub-borders""."
"MorphBugs",""
"GoferLoad",""
"MethodAddition","I represent the addition of a method to a class.  I can produce the CompiledMethod, install it, and then notify the system that the method has been added.  This allows Monticello to implement atomic addition.  A loader can compile all classes and methods first and then install all methods only after they have been all compiled, and in a way that executes little code.ß"
"MorphicUIBugTest","A MorphicUIBugTest is a class for testing the shortcomings and repairs of the MorphicUI manager..Instance Variables	cases:		<aCollection>cases	- a list of morphs that may need to be deleted during teardown.	the tests are expected to fill this list it starts out empty by default.		"
"ErrorDialogWindow","A message dialog with an error icon."
"MFClassB",""
"RBRefactoringError","The receiver is signaled whenever a precondition of a refactoring is violated. The action block, if defined, might help the user to resolve the issue."
"ProtocolClient","ProtocolClient is the abstract super class for a variety of network protocol clients.It uses a stream rather than the direct network access so it could also work for streams on serial connections etc.Structure:	stream				stream representing the connection to and from the server	connectInfo			information required for opening a connection	lastResponse			remembers the last response from the server.	progressObservers 	any object understanding #show: can be registered as a progress observer (login, transfer, etc)"
"PluggableSet","PluggableSets allow the redefinition of hashing and equality by clients. This is in particular useful if the clients know about specific properties of the objects stored in the set which in turn can heavily improve the performance of sets and dictionaries.Note: As of Pharo 1.1#11284, using normal Dictionary is actually faster as the bench below shows... ;-)Instance variables:	hashBlock	<BlockContext>	A one argument block used for hashing the elements.	equalBlock	<BlockContext>	A two argument block used for comparing the elements.Example: Adding 1000 integer points in the range (0@0) to: (100@100) to a set.	| rnd set max pt |	set := Set new: 1000.	rnd := Random new.	max := 100.	Time millisecondsToRun:[		1 to: 1000 do:[:i|			pt := (rnd next * max) truncated @ (rnd next * max) truncated.			set add: pt.		].	].The above is way slow since the default hashing function of points leads to an awful lot of collisions in the set. And now the same, with a somewhat different hash function:	| rnd set max pt |	set := PluggableSet new: 1000.	set hashBlock:[:item| (item x bitShift: 16) + item y].	rnd := Random new.	max := 100.	Time millisecondsToRun:[		1 to: 1000 do:[:i|			pt := (rnd next * max) truncated @ (rnd next * max) truncated.			set add: pt.		].	]."
"PragmaMenuBuilder","For the impatients, see MenuRegistrationExample class methods and try it with:---------------((PragmaMenuBuilder pragmaKeyword: MenuRegistrationExample pragmaKeyword model: nil) menuEntitled: 'World') popUpInWorld---------------PragmaMenuBuilder is for the dynamic building of menus based on pragmas. A PragmaMenuBuilder instance is the root of a tree of MenuRegistration instances.The basic principle is that each menu sub-tree is specified by a method which is tagged by a specific pragma. Such methods are dynamically retrieved and then evaluated with a MenuRegistration passed as argument (see #retrieveRegistrations). The result is a tree of MenuRegistration which roots are stored in my itemList inst. var.After the tree of MenuRegistration has been built, it is re-organized (re-organization is based on the parent declaration) and is re-ordered (based on the MenuRegistration order indications). Then the tree of MenuRegistration can serve as input for the building of a PluggableMenuSpec. The PluggableMenuSpec is itself used in order to build a MenuMorph with the help of the current ToolBuilder. (see MenuRegistration comment for more informations about how to specify menu entries).The tree of MenuRegistration is built by #buildTree in three steps (1) the  collecting of the MenuRegistration instances (2) the re-organization and (3) the sorting:1) The first step consists in evaluating all pragma methods by passing a builder (a PragmaMenuBuilder instance) as argument. Each pragma method invocation build a sub-tree which root is added to the builder itemList collection. (see #collectRegistrations).As an example, this first step could produce a tree as follow (stored in a PragmaMenuBuilder itemList inst var) :				#Tools						#'Other tool', parentName: #Tools				/	\										|	(#Worspace)	(#browser)						(#'Test runner' )2) The second step consists is re-organizing the tree. A MenuRegistration can be declared with a particular parent name (by sending #parent: to it with a symbol as argument). If the parentName of a MenuRegistration X is the name of another MenuRegistration Z, then it means that X must be placed as a child of Z. This is the goal of this re-arrangement step which moves badly placed nodes at their good place. (see #arrangeRegistrations).With previous example, the second step produces:						#Tools												/		|			\	(#Worspace)	(#browser)		#'Other tool' , parentName: #Tools											|									(#'Test runner')2) The third step consists in sorting the tree according to the order inst. var. value of each MenuRegistration. This is done in two passes: the first pass tries to assign as much order inst. var. as possible (If an item is given with a specific order, then, previous and following items order can be automatically computed - see #assignOrderWithBlock: and #orderAssignBlock). The second pass consists in a smple sort according to a sort block given by #itemSortBlock.Instance Variables	model:		<Object>	pragmaCollector:		<PragmaCollection>	pragmaKeywords:		<Collection of Symbol>	currentRoot: 			<MenuRegistration>model	- Serves as the default target for the menu. Note that a default target can also be declared at menu item levelpragmaKeywords	- The list of pragma keywords used for the declaring of my menu itemspragmaCollector	- The PragmaCollector associated with this builder. When a method declared with the same pragma as my pragmaKeyword is updated/added/removed my menu items are recomputed so that the resulting menu is always in sync with currently declared items.	currentRoot	- the current MenuRegistration in which new items are to be added"
"Job","A Job is a task to run and potentially notified to the user.   [:job | job title: 'Let us get started'.	1to: 10 do: 		[:each | 			JobProgress progress: (0.1 * each); title: 'Youpi ', each printString .			(Delay forMilliseconds: 100) wait. 			] ]  asJob run	A Job will announce its evolution on its jobAnnouncer; it is used, for example, to update the progress bar displayed on screen."
"AppRegistry","AppRegistry is a simple little class, not much more than a wrapper around a collection. It's intended to help break dependencies between packages. For example, if you'd like to be able to send e-mail, you could use the bare-bones MailComposition class, or you could use the full-blown Celeste e-mail client. Instead of choosing one or the other, you can call ""MailSender default"" (where MailSender is a subclass of AppRegistry), and thus avoid creating a hard-coded dependency on either of the two mail senders.This will only really be useful, of course, for applications that have a very simple, general, well-defined interface. Most of the time, you're probably better off just marking your package as being dependent on a specific other package, and avoiding the hassle of this whole AppRegistry thing. But for simple things like e-mail senders or web browsers, it might be useful."
"RBRemoveParameterRefactoring",""
"RBMethod",""
"TopRightGripMorph","I am the handle in the right top of windows used for resizing them."
"WindowsResolver","I am an expert on Windows filesystem conventions. I resolve origins according to these conventions."
"DummyKeyPressedPlugin","A DummyKeyPressedPlugin is a dummy plugin which display the counter of keystrokes"
"NBExternalStructureFields",""
"RBRefersToClassRule","See my #rationale."
"SetElement","I am a helper class for handling the contents of Set.My main purpose is to allow a Set to contain nil.Since nil represents an empty slot in a Set, it cannot be stored directly in the array of values. Instead, an instance of SetElement is used as a wrapper. See implementors and senders of #asElement for wrapping, and #enclosedSetElement for unwrapping."
"KMRepository","I have a singleton instance which can be accessed by executing the following:""self default""I am currently a god object to be refactored =D."
"HDChangeReport",""
"FLSimpleStackTest",""
"MailAddressParser","Parse mail addresses.  The basic syntax is:	addressList := MailAddressParser addressesIn: aStringThis currently only returns the bare addresses, but it could also return a list of the address ""source codes"".  For example, if you give it ""Joe <joe@foo>, <jane>"", it will currently return a list ('joe@foo' 'jane').  It would be nice to also get a list ('Joe <joe@foo>'  '<jane>')."
"HelpOnHelp","Welcome to Pharo Smalltalk Help System"
"MCRepositoryGroup","A singleton class, holds the list of repositories. Can look for a requested VersionInfo among its repositories."
"ManifestConfigurationOfRefactoringBrowser",""
"AJMMRegister",""
"FLDelayedSerializerMock",""
"MIMEHeaderValue","I contain the value portion of a MIME-compatible header.I must be only initialized with the value and not the field name.  E.g. in processing	Subject: This is the subjectthe MIMEHeaderValue should be given only 'This is the subject'For traditional non-MIME headers, the complete value returned for mainValue and paramaters returns an empty collection.For MIME headers, both mainValue and parameters are used."
"ManifestManifestTests",""
"StApiSetter",""
"GoferUnload",""
"ZnMissingHost","ZnMissingHost is signalled when a host should be specified but was not.Part of Zinc HTTP Components. "
"RBBasicLintRuleTest",""
"FLRectangleCluster","FLRectangleCluster is an optional class that optimizes Rectangle instances, since there are a lot of instances in the system, it makes sense to optimize them. We take advantage of bytecode optimizations done by Pharo for messages like #new, #@, #x and #y. In addition, we avoid the overhead of class reshape, etc. "
"ClassListNodeExample",""
"PrimitiveFailed","I am PrimitiveFailed, an exception signaled when a primitive fails."
"FontFamilyMemberAbstract",""
"ZnStringEntity","I am ZnStringEntity, a concrete HTTP Entity based on a String.It is used to hold textual (non-binary) data.I am a ZnEntity.Optionally, an encoding is used to convert to and from bytes.The default encoding it UTF-8.Part of Zinc HTTP Components."
"ZnConnectionTimeout","I am ZnConnectionTimeout.I am a DynamicVariable and a ProcessSpecificVariable.I can be used to modify the global default socket IO timeout on a per process basis, for example:ZnConnectionTimeout 	value: 5 	during: [ ^ ZnClient new get: 'http://zn.stfx.eu/zn/small.html' ]"
"UndeclaredVariableWarning",""
"ZdcSecurePOP3Client","I am ZdcSecurePOP3Client.I open a ZdcSecureSocketStream to the POP3 server and connect it at the SSL level.ZdcSecurePOP3Client	retrieveMessagesFromGMailAccount: '<your-name>@gmail.com'	password: '<your-password>'	limit: 5."
"SystemDictionary","I represent a special dictionary used as global namespace for class names :	Smalltalk globals classNames.and for traits too:	Smalltalk globals traitNames.	and a few other globals:	(Smalltalk globals keys reject: [:k | (Smalltalk globals at: k) isBehavior])			collect: [:k | k -> (Smalltalk globals at: k) class].As the above example let you guess, the global namespace of Smalltalk system is accessed through:	Smalltalk globals."
"ParseNodeVisitor","I am an abstract superclass for ParseNode visitors that functions as a null visitor.  Here's the code that defines my interface:(SystemNavigation new allImplementorsOf: #accept: localTo: ParseNode) do:	[:methodReference|	methodReference compiledMethod messages do:		[:sel|		((sel beginsWith: 'visit')		and: [sel numArgs = 1]) ifTrue:			[ParseNodeVisitor				compile: (String streamContents:							[:str|							str nextPutAll: sel;								space;								nextPut: $a.							methodReference classSymbol first isVowel ifTrue:								[str nextPut: $n].							str nextPutAll: methodReference classSymbol])				classified: 'visiting']]]"
"Canvas","A canvas is a two-dimensional medium on which morphs are drawn in a device-independent manner. Canvases keep track of the origin and clipping rectangle, as well as the underlying drawing medium (such as a window, pixmap, or postscript script).Subclasses must implement (at least) the following methods:	* Drawing:		#fillOval:color:borderWidth:borderColor:		#frameAndFillRectangle:fillColor:borderWidth:borderColor:		#drawPolygon:color:borderWidth:borderColor:		#image:at:sourceRect:rule:		#stencil:at:sourceRect:rule:		#line:to:width:color:		#paragraph:bounds:color:		#text:bounds:font:color:	* Support		#clipBy:during:		#translateBy:during:		#translateBy:clippingTo:during:		#transformBy:clippingTo:during:"
"ZnServer","I am ZnServer, an abstract superclass of HTTP Servers.I am a facade for controlling a default server implementation.I delegate my public class protocol methods to #defaultServerClass.ZnServer startDefaultOn: 1701.ZnClient get: 'http://localhost:1701'.Subclasses can register with me to have start/stop sent to them on System startUp/shutDown.The default server instance will be registered automatically when it is started.Part of Zinc HTTP Components."
"RotatingStringMorph","A RotatingStringMorph is a StringMorph which rotate to show everything if the width is too small to display the whole contents"
"GB2312","This class represents the domestic character encoding called GB 2312 used for simplified Chinese."
"ZipEncoderNode","ZipEncoderNode represents a node in a huffman tree for encoding ZipStreams.Instance variables:	value 		<Integer>	- Encoded value	frequency	<Integer>	- Number of occurences of the encoded value	height 		<Integer>	- Height of the node in the tree	bitLength 	<Integer>	- bit length of the code	code		<Integer>	- Assigned code for this node	parent		<ZipEncoderNode>		- Parent of this node	left			<ZipEncoderNode>		- First child of this node	right		<ZipEncoderNode>		- Second child of this node"
"NBWinConstants",""
"UTF16TextConverterTest",""
"SpecDescriptionImporter",""
"AndreasSystemProfilerTest",""
"NautilusChanged","A NautilusChanged is raised when a NautilusUI send th message #changed:"
"ZdcSocketStream","I am ZdcSocketStream.I am a ZdcOptimizedSocketStream.I further optimize my superclass' methods dealing with bulk input and outputto transparently bypass the internal buffers when this makes sense."
"MCMockASubclass",""
"DictionaryTest",""
"NBFloat16","not supported on x86 archs.."
"IssueCreator","An IssueCreator is a UI to create a Google Issue Tracker entry"
"KMMockMorphSubclass",""
"Scanner","I scan a string or text, picking out Smalltalk syntactic tokens. I look one character ahead. I put each token found into the instance variable, token, and its type (a Symbol) into the variable, tokenType. At the end of the input stream, I pretend to see an endless sequence of special characters called doits."
"MetacelloValidationWarning","MetacelloValidationWarning indicates that there is a logical inconsistency that is not likely to cause any functional problems"
"KMCatcherMorph",""
"BreadthFirstGuide","I traverse the filesystem in breadth-first order. Given this hierarchy:alpha	beta	gammadelta	epsilonI would visit the nodes in the following order:  alpha, delta, beta, gamma, epsilon.I use my work instance variable as a queue, adding nodes to be visited to the end and retrieving them from the beginning."
"MCVersionCreated","An MCVersionCreated is raised when a MCVersion is created"
"Pragma","I represent an occurrence of a pragma in a compiled method.  A pragma is a literal message pattern that occurs between angle brackets at the start of a method after any temporaries.  A common example is the primitive pragma:	<primitive: 123 errorCode: 'errorCode'>but one can add one's own and use them as metadata attached to a method.  Because pragmas are messages one can browse senders and implementors and perform them.  One can query a method for its pragmas by sendng it the pragmas message, which answers an Array of instances of me, one for each pragma in the method.I can provide information about the defining class, method, its selector, as well as the information about the pragma keyword and its arguments. See the two 'accessing' protocols for details. 'accessing-method' provides information about the method the pragma is found in, while 'accessing-pragma' is about the pragma itself.Instances are retrieved using one of the pragma search methods of the 'finding' protocol on the class side.To browse all methods with pragmas in the system evaluate	SystemNavigation new browseAllSelect: [:m| m pragmas notEmpty]and to browse all nonprimitive methods with pragmas evaluate	SystemNavigation new browseAllSelect: [:m| m primitive isZero and: [m pragmas notEmpty]]"
"PackageMethodNodeExample",""
"W2KComplexTabBorder",""
"FT2BitmapSize","Do not rearrange these fields!This structure models the size of a bitmap strike (i.e., a bitmapinstance of the font for a given resolution) in a fixed-size fontface.  It is used for the `availableSizes' field of theFT2Face structure.<Fields>height :: The (vertical) baseline-to-baseline distance in pixels.It makes most sense to define the height of a bitmapfont in this way.width  :: The average width of the font (in pixels).  Since thealgorithms to compute this value are different for thevarious bitmap formats, it can only give an additionalhint if the `height' value isn't sufficient to selectthe proper font.  For monospaced fonts the average widthis the same as the maximum width.size   :: The point size in 26.6 fractional format this font shallrepresent (for a given vertical resolution).x_ppem :: The horizontal ppem value (in 26.6 fractional format).y_ppem :: The vertical ppem value (in 26.6 fractional format).Usually, this is the `nominal' pixel height of the font.<Note>The values in this structure are taken from the bitmap font.  Ifthe font doesn't provide a parameter it is set to zero to indicatethat the information is not available.The following formula converts from dpi to ppem:ppem = size * dpi / 72where `size' is in points.Windows FNT:The `size' parameter is not reliable: There exist fonts (e.g.,app850.fon) which have a wrong size for some subfonts; x_ppemand y_ppem are thus set equal to pixel width and height given inin the Windows FNT header.TrueType embedded bitmaps:`size', `width', and `height' values are not contained in thebitmap strike itself.  They are computed from the global fontparameters."
"PackageAbstractNodeExample",""
"EmbeddedMenuMorph","Menu designed to be embedded in another morph rather than popped up directly."
"RBInlineAllMethodTest",""
"AuthorTest",""
"RGBehaviorDefinition","An RGBehaviorDefinition is an abstract definition for class-alike entities (e.g. classes, traits)Instance Variables	methods:		<Collection>	protocols:		<Collection>	superclass:		<Object>"
"MethodDeclaration","I represent the declaration of a method.  My contents are the source code to import, and the category reader is the object who knows the class, category and timestamp where to install the method.Sending me the message #import makes me install the method into the class."
"ExternalDropHandler",""
"AJStackInstruction",""
"RBClassEnvironment",""
"RBPullUpInstanceVariableTest",""
"NautilusBreadcrumbsPlugin","A NautilusBreadcrumbsPlugin is a plugin which add breadcrumbs (for Igor ;) )"
"BagTest",""
"SelectionMorph","A selectionMorph supports the selection of multiple objects in a morphic world or pasteUp. Using command+shift you get a squared lazzo and you can grab morphs. After you can grab the selection as a morph.Structure:	selectedItems	an OrderedCollection of Morphs					These are the morphs that have been selected	slippage		a Point					Keeps track of actual movement between the 					steps of gridded movement	dupLoc		a Point					Notes the position when first duplicate request occurs from halo	dupDelta	a Point					Holds the final delta of the first duplicate plus subsequent moves."
"MCScanner","I scan / tokenize metadata  (package name, version info, ancestry, dependencies, ...) found in .mcz files.For example, try:MCScanner scan:  '(name ''MyPackage-ll.6'' message ''Fix bug xxx'' id ''b21dbd73-f1c3-2746-a3cc-92f1d4edea28'')' readStream"
"BalloonEngine","BalloonEngine is the representative for the Balloon engine inside Squeak. For most purposes it should not be used directly but via BalloonCanvas since this ensures proper initialization and is polymorphic with other canvas uses."
"NBBootstrapUlong","A special hacky type, which storing a ulong function return value into existing byte array instance.A method, which using this type in callout should have an argument , named 'returnValueBuffer'and pass a byte array instance, big enough to store ulong there.This is essentially used during NativeBoost bootstrap, to generate & install thegall gate function, without calling any of interpreterProxy function which may cause GC."
"RBPlatformDependentUserInteractionRule",""
"MczInstaller",""
"PragmaUpdated","A PragmaUpdated is announced by a PragamColllector when a method defined with an acceptable pragma according to the PragmaCollector filter is updated (recompiled).Instance Variables"
"OutOfMemory","OutOfMemory is signaled when an allocation fails due to not having enough memory. Its default action signals the low-space semaphore.Originally suggested by A. Raab."
"RBMethodProtocolsSpellingRule","See #name for the area where I check spelling."
"ZnByteArrayEntity","I am ZnByteArrayEntity, a concrete HTTP Entity based on a ByteArray.It is used to hold binary (non textual) data.I am a ZnEntity.Part of Zinc HTTP Components."
"NECTestClass","I'm only for SUnit TestCases."
"FileSystemVisitor","I am an abstract superclass for objects that can perform operations on directory trees. My subclasses implement the visitor protocol, and process filesystem nodes shown to them by guides."
"IntegerApiSetter",""
"CompiledMethodTrailer","I am responsible for encoding and decoding various kinds of compiled method trailer data.I should not expose any binary data outside of myself, so all tools which working with compiled methodsshould ask me to encode the meta-data, they want to be added to the compiled method trailer, as well as retrieve it.To add a new kind of trailer, you should give it a proper name and define it in the #trailerKinds method at my class side.Then you need to implement a corresponding #encode<your name> and #decode<your name> methods at instance side. Then add any public accessor methods, which will use a newly introduced trailer kind for communicating with outer layer(s).An encodeXXX methods should store result (byte array) into encodedData instance variable.A decodeXXX methods should read the data from compiled method instance, held by 'method' ivar,and always set 'size' ivar (denoting a total length of trailer in compiled method) and optionally 'data' ivar which should keep a decoded data, ready to be used by outer layer(s) using accessor method(s) you providing.The kind of compiled method trailer is determined by the last byte of compiled method.The byte format used is following: 	""2rkkkkkkdd""where 'k' bits stands for 'kind' , allowing totally 64 different kinds of method trailerand 'd' bits is data.Following is the list of currently defined trailer kinds:NoTrailer , k = 000000, dd unusedmethod has no trailer, and total trailer size bytes is always 1ClearedTrailer, k = 000001, method has cleared trailer (it was set to something else, but then cleared) dd+1  determines the number of bytes for size field, and size is a total length of trailer bytesSo a total length of trailer is: 1 + (dd + 1) + sizeTempsNamesQCompress, k = 000010the trailer contains a list of method temp names,  compressed using qCompress: method. dd+1  determines the number of bytes for size field, and size is a number of bytes of compressed buffer.So a total length of trailer is:  1 + (dd + 1) + sizeTempsNamesZip, k = 000011the trailer contains a list of method temp names,  compressed using GZIP compression method. dd+1  determines the number of bytes for size field, and size is a number of bytes of compressed bufferSo a total length of trailer is: 1 + (dd + 1) + sizeSourceBySelector, k = 000100the trailer indicates , that method source is determined by a class + selector where it is installed to. Trailer size = 1.SourceByStringIdentifier, k = 000101the trailer indicates , that method source is determined by a class + some ByteString identifier. dd+1  determines the number of bytes for size of ByteString identifier, and size is number of bytes of string.A total length of trailer is:  1 + (dd + 1) + sizeEmbeddedSourceQCompress, k = 000110the trailer contains an utf-8 encoded method source code, compressed using qCompress methoddd+1  determines the number of bytes for size field, and size is a number of bytes of compressed source codeA total length of trailer is:  1 + (dd + 1) + sizeEmbeddedSourceZip, k = 000111the trailer contains an utf-8 encoded method source code, comressed using GZIP dd+1  determines the number of bytes for size field, and size is a number of bytes of compressed bufferA total length of trailer is:  1 + (dd + 1) + sizeVarLengthSourcePointer, k = 001000the trailer is variable-length encoded source pointer. dd bits is unused.ExtendedKind, k = 001001the next byte of trailer (one that prepends the last byte of compiled method)denotes an extended kind of trailer, allowing to use additional 256 kinds of encoding method's trailer in future. SourcePointer, k = 111111 the trailer is encoded source pointer. Total trailer size is 4-bytes (this kind of encoding is backwards compatible with most of existing compiled methods)"
"ZipStore","I'm a specific store for Zip file systems"
"SHWorkspaceEditingMode","By default, shout styling is into a method editing mode. If you need a script editor for example, then you have to setup shout into a workspace mode. In order to setup a workspace mode, one have to make it available the workspace instance to the view styler. Typically, the workspace inspace is the model instance itself. See the sent of the #workspace: message into the #open method:open	...	editor := window newTextEditorFor:  self getText:  #code setText: #code: getEnabled: nil. 	editor styler workspace: self. 	...	^ window openInWorldThe workspace class has also to implement #hasBindingOf: and #hasBindingThatBeginsWith:. In fact, #hasBindingOf: and #hasBindingThatBeginsWith: are sent to the workspace by shout during styling. As an example, see the #bindings method implemented here:bindings	^ #('shout' 'styling')It returns a list of symbols which is used by #hasBindingOf: and #hasBindingThatBeginsWith:. Then open an editor with:SHWorkspaceEditingMode new openIf you enter the word 'shout' as an example, you will see that the word is recognized as a variable name."
"TestResource","Normally a test will set up all the objects it needs and tear them down again after it has run.  This self-containedness makes a test more robust.  Use TestResources only for objects that are needed by several tests and that are too 'expensive' (in time or otherwise) to recreate and destroy for each test.  A viable approach is to develop the code in MyTestCase's #setUp and #tearDown methods, then at some point refactor the code into the #setUp and #tearDown of a TestResource whose class is added to MyTestCase class>>resource method.TestResource uses the singleton pattern.  A TestResource class will set up a single instance of itself when first requested and tear it down again at the end of TestSuite>>run (or TestCase>>run, >>debug and >>debugAsFailure).  Normally, a TestResource, once setUp, remains active during the running of all remaining tests and is #reset after all tests have run.  For an exception, see subclass CompetingResource in SUnitResourcePatterns.  Users can choose to #reset a resource in the #tearDown of a test that alters it, sacrificing the performance gain of having a single #setUp of the resource for the certainty that other tests using it will not see the alterations.  Generally however, this should be the exception:  if you need to reset the resource for every test that uses it, its code should just be part of your test's #setUp and #tearDown code.To use, create a subclass of TestResource and override the following:	- TestCase class>>resources, to return a collection including the TestResource class, for all test case classes that need it		* a TestCase' resources are set up in the order returned and torn down in the reverse order	- TestResource class>>resources, if the resource itself always needs some other resource to be present before it can set up		* a TestResource's resource are set up before it and torn down after it, and are set up in the order returned and torn down in the reverse order	- TestResource>>setUp and tearDown, to define initial and final behaviour (just like a test)	- TestResource>>isAvailable, to return true if it is and false if it isn't (the framework calls this after setUp);  ideally, this call should not change the resource' state - that should be done in setUpTestResource implements the singleton pattern in its class-side #isAvailable and #reset methods.  Do not override these when creating specific resources;  unless you are developing a whole new pattern of use, it will always be correct to override instance-side #setUp, #tearDown and #isAvailable, and dangerous to override class>>isAvailable, class>>isAlreadyAvailable and class>>reset.Generally, users do not code interactions with a test's resources during the running of a test.  Code that reads a resource' values while leaving its state strictly alone is safe enough.  A test must leave a resource in a clean state:  always use #reset if a test must protect later-running tests from unsafe changes (and review whether in such a case a resource is the right thing to use in the first place).See my superclass' comment for assertion and logging information."
"RBAddParameterTest",""
"SymbolTest","This is the unit test for the class Symbol. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"SpecPragmaCollector","A SpecPragmaCollector is a specialized PragmaCollector.Sonce we just want specs defined on class side, we do not have to check the whole system, then to restrain."
"ZnBasicAuthenticator","I am ZnBasicAuthenticator.I help servers handle HTTP Basic Authentication.I implement the required #authenticateRequest:do:I have a credentials dictionary with username->password associations.Part of Zinc HTTP Components."
"ZnCharacterEncoderTests",""
"ZnUTF8Encoder","I am ZnUTF8Encoder, a concrete subclass of ZnCharacterEncoder.I implement the variable length UTF-8 encoding and decoding of Unicode according to RFC 3629.Part of Zinc HTTP Components."
"MorphicEventHandlerTest",""
"BottomLeftGripMorph","I am the handle in the left bottom of windows used for resizing them."
"PackageWidget","PackageWidget is the basic implementation of a wiget managing packages"
"SqNumberParserTest","Provide tests for new clas aimed at parsing numbers.It duplicates NumberParsingTest, with few more tests."
"DropListSpec","A DropListSpec is a spec to describe a drop list"
"ClassFactoryForTestCase","I'm useful when classes needs to be created during the execution of the test. This avoid polluting your unit tests with dummy and mock classes.A typical usage of it is:TestCase subclass: #YourTest       instanceVariableNames: 'classFactory'YourTest>>setUp       classFactory := ClassFactoryForTestCase newYourTest>>tearDown       classFactory deleteClasses.YourTest>>testIsBehavior       | cls |       cls := classFactory newClass.       self assert: cls isBehavior"
"AdditionalMethodStateTest",""
"MethodModified","This announcement is emited when we RE-compile a method in a class or a trait, with: ClassDescription >> compile: or TraitDescription >> compile:. If the method is not yet registered in the class or the trait, the announcement will not be emitted.The action of renaming a method will be handled by SystemMethodRemovedAnnouncement and SystemMethodAddedAnnouncement, since this refactoring is concretely composed by removing the old method and add a new with the new name  "
"RBDetectContainsRule",""
"ZipFileConstants","This class defines magic numbers taken from the PKWARE ZIP Application Note [1] approved by ISO/IEC JTC 1/SC 34 N 1621 in July 2011 [2] to be the international normative reference for the zip file format.  A class imports these bindings as 'class variables' by including the following in its class definition:     poolDictionaries: 'ZipFileConstants' There is a single method on the class side to initialise the values. [1] http://www.pkware.com/documents/casestudies/APPNOTE.TXT[2] http://www.itscj.ipsj.or.jp/sc34/open/1621.pdfFollowing are pertinent extracts from the PKWARE ZIP Application Note.... All values are stored in little-endian byte order unless otherwise specified. A. local file header signature     4 bytes  (0x04034b50) C. Data descriptor:            crc-32                          4 bytes            compressed size                 4 bytes            uncompressed size               4 bytes F. central file header signature   4 bytes  (0x02014b50) I. end of central dir signature    4 bytes  (0x06054b50) J.  Explanation of fields:      * version made by (2 bytes)             0 - MS-DOS and OS/2 (FAT / VFAT / FAT32 file systems)             3 - UNIX             1,2,4-20 not implemented      * compression method: (2 bytes)             0 - The file is stored (no compression)             6 - The file is Imploded             8 - The file is Deflated             1-7,9-19,97,98 not implemented       * For Methods 8 and 9 - Deflating             Bit 2  Bit 1               0      0    Normal (-en) compression option was used.              0      1    Maximum (-exx/-ex) compression option was used.               1      0    Fast (-ef) compression option was used.              1      1    Super Fast (-es) compression option was used.                                       * internal file attributes: (2 bytes)             Bits 1 and 2 are reserved for use by PKWARE. The lowest bit of this field indicates, if set, that the file is apparently an ASCII or text file.  If not set, that the file apparently contains binary data. Note the following do not appear in the PKWARE ZIP Application Note.   Should they be defined elsewhere? ""Unix permission bits"" DefaultDirectoryPermissions    := 8r040755. DefaultFilePermissions        := 8r0100666. DirectoryAttrib         := 8r040000. FileAttrib             := 8r0100000. "
"Announcer","The code is based on the announcements as described by Vassili Bykov in <http://www.cincomsmalltalk.com/userblogs/vbykov/blogView?searchCategory=Announcements%20Framework>. The implementation uses a threadsafe subscription registry, in the sense that registering, unregistering, and announcing from an announcer at the same time in different threads should never cause failures.For security reasons, registry is kept private, and has no accessor like in other implementations"
"DelayTest",""
"ZipStringMember","ZipStringMember instances are used to represent files that are going to be written to a ZipArchive.Their data comes from in-image strings, though."
"HeapTest",""
"NonBooleanReceiver",""
"FLWordObjectCluster","I am the generic cluster for storing and loading variable word objects. Most word-like objects are subclasses from ArrayedCollection. Hence, we may have used the method #writeOn: to serialize, and #newFromStream: to materialize. #writeOn: is slow because it ALWAYS encode wors in a big endian format. Most machines today are even little endian. Even worst, #newFromStream: has to always do a #restoreEndianness. #newFromStream: is fast because it uses the method #nextWordsInto: which is a hack but that is really fast. The problem is that #nextWordsInto: has to always do the #restoreEndianness when we are in little endian machines (most of the time).Hence, this cluster provives the best of both worlds: the serialization is done with a platform-dependen way, that is, the endianness will be the same of the machine where we are serializing. In addition, we serialize with the same hack that #nextWordsInto: uses, that is, the Bitmap >> hackBits:And the materialization will use a variation of #nextWordsInto:  (#fuelNextWordsInto:) that ONLY does the #restoreEndianness if the machine where we are materializing has a different endianness than where we have serialized the object. To do this, while serializing, we store in the header of the Fuel stream, the endianness. Then in materialization, we compare agains that. Conclusion: we only restore endianness when needed.Notice, in addition, that the method #newFromStream: sends the message #restoreEndianness. This method EXPECTS that the object was serialized in big endian format, and it will only change the endianness if we are materializing in a little endian machine. This means that if you serialize in little endian and materialize in big endian, you are screw.  For this reason, this cluster uses a method that always change the endianness, Bitmap class >> swapBytesIn:from:to: Future work: maybe we can modify and use the Bitmap hackBits:   not only for materialization but also for serialization. "
"InvalidDirectoryError",""
"SpecLayoutAddWithSpec","A SpecLayoutAddWithSpec is an action representing an add in the spec layout with a spec selector precised"
"InputEventFetcher","EventFetcher is responsible for fetching the raw VM events and forward them to the registered event handlers. Event fetching is done in a high priority process, so even with other processes (e.g. the Morphic UI process) being busy events will still be fetched.Instance Variables	inputSemaphore:		<Semaphore>	eventHandlers		<OrderedCollection>	fetcherProcess		<Process>inputSemaphore	- a semaphore registered with the VM to signal availability of an event. Currently not supported on all platforms.eventHandlers	- registered event handlers. Event buffers are cloned before sent to each handler.fetcherProcess	- a process that fetches the events from the VM. Either polling (InputEventPollingFetcher) or waiting on the inputSemaphore.Event format:The current event format is very simple. Each event is recorded into an 8 element array. All events must provide some SmallInteger ID (the first field in the event buffer) and a time stamp (the second field in the event buffer), so that the difference between the time stamp of an event and the current time can be reported.Currently, the following events are defined:Null event=============The Null event is returned when the ST side asks for more events but no more events are available.Structure:[1]		- event type 0[2-8]	- unusedMouse event structure==========================Mouse events are generated when mouse input is detected.Structure:[1]	- event type 1[2]	- time stamp[3]	- mouse x position[4]	- mouse y position[5]	- button state; bitfield with the following entries:		1	-	yellow (e.g., right) button		2	-	blue (e.g., middle) button		4	-	red (e.g., left) button		[all other bits are currently undefined][6]	- modifier keys; bitfield with the following entries:		1	-	shift key		2	-	ctrl key		4	-	(Mac specific) option key		8	-	Cmd/Alt key		[all other bits are currently undefined][7]	- reserved.[8]	- reserved.Keyboard events====================Keyboard events are generated when keyboard input is detected.[1]	- event type 2[2]	- time stamp[3]	- character code		For now the character code is in Mac Roman encoding.[4]	- press state; integer with the following meaning		0	-	character		1	-	key press (down)		2	- 	key release (up)[5]	- modifier keys (same as in mouse events)[6]	- reserved.[7]	- reserved.[8]	- reserved."
"IntegerDigitLogicTest",""
"FT2Library","This is a wrapper for the global 'library' in the plugin.It is provided for the use of Cairo APIs that take an FT_Library argument."
"EternalCookie","An EternalCookie is a cookie that live forever.Actualy not eternal, but will last one year"
"NECGlobalEntry","I represent a global variable."
"FileList","A FileList is a tool to deal with files.FileList open				""open FileList"""
"AColorSelectorMorph","ColorComponentSelector showing an alpha gradient over a hatched background."
"DiffChangeMorph",""
"Termcap","I provide a simple mapping from high-level commands to low-level terminal character sequences."
"GroupAnnouncer",""
"AssertionFailure","AsssertionFailure is the exception signaled from Object>>assert: when the assertion block evaluates to false."
"RBInstanceVariableCapitalizationRule","See my #rationale."
"ContextInspector",""
"SubscriptOutOfBounds","I am SubscriptOutOfBounds, an exception indicating that some operation attempted to use a subscript outside allowed bounds.Normally, I hold the offending subscript and/or the allowed lowerBound and upperBound (inclusive).SubscriptOutOfBounds 	signalFor: 10 	lowerBound: 1 	upperBound: 5 	in: (Array new: 5)"
"RBTempsReadBeforeWrittenRule","See my #rationale."
"PlainGroupboxMorph","Groupbox without title with a vertical layout. Appears in a lighter colour than the owner's pane colour."
"CombinedChar","Compositions classVar is a:<Dictionary       key: firstLetter charCode       value: (Dictionary             	  key: diacritical charCode              	 value: combined charCode)>	combined instVar is a <Character>"
"IdentitySet","The same as a Set, except that items are compared using #== instead of #=.Almost any class named IdentityFoo is the same as Foo except for the way items are compared.  In Foo, #= is used, while in IdentityFoo, #== is used.  That is, identity collections will treat items as the same only if they have the same identity.For example, note that copies of a string are equal:	('abc' copy) = ('abc' copy)but they are not identitcal:	('abc' copy) == ('abc' copy)A regular Set will only include equal objects once:	| aSet |	aSet := Set new.	aSet add: 'abc' copy.	aSet add: 'abc' copy.	aSetAn IdentitySet will include multiple equal objects if they are not identical:	| aSet |	aSet := IdentitySet new.	aSet add: 'abc' copy.	aSet add: 'abc' copy.	aSet"
"RadioButtonModel","A RadioButtonModel is a spec model for RadioButton! The method privateSetState: is really private and should only be used by RadioButtonGroup !You can also have a look at RadioButtonGroupExample for a full example of how to use them with a group."
"NECReadMe","NEC is based on the eCompletion package developed by Ruben Baker. We thank Ruben for having release this code in MIT. It was maintained by lukas renggli, damien Cassou and a couple of other cool developers.The current version (NEC) relies on some methods that re available in Pharo1.4. In addition the extensions made to shout has been moved to the Shout package.The goal of thise new version is to make sure that OCompletion can be just expressed as an extension of ECompletion and not a full copy of the ecompletion.This package relies on Shout."
"MetacelloSymbolicVersionNotDefinedError",""
"TextAnchor","TextAnchors support anchoring of images in text.  A TextAnchor exists as an attribute of text emphasis, and it gets control like a FontReference, through the emphasizeScanner: message.  Depending on whether its anchoredMorph is a Morph or a Form, it repositions the morph, or displays the form respectively.  The coordination between composition, display and selection can best be understood by browsing the various implementations of placeEmbeddedObject:.In the morphic world, simply embed any form or morph in text.	Workspace new		contents: (Text withAll: 'foo') , (Text string: '*' attribute: (TextAnchor new anchoredMorph: MenuIcons confirmIcon)) , (Text withAll: 'bar');		openLabel: 'Text with Form'.	Workspace new		contents: (Text withAll: 'foo') , (Text string: '*' attribute: (TextAnchor new anchoredMorph: EllipseMorph new)) , (Text withAll: 'bar');		openLabel: 'Text with Morph'.In this case you select a piece of the screen, and it gets anchored to a one-character text in the editor's past buffer.  If you then paste into some other text, you will see the image as an embedded image."
"AJCallCleanup",""
"ClassBuilderValidationTests",""
"NBUnixExternalHeapManager","Unix heap implementation, based on mmap()/munmap()functions to manage external heap."
"IntegerTest",""
"ClassReorganized","This announcement corresponds to the ReorganizedEvent, which seems to (by looking at the references of ReorganizedEvent) be raised when:- we rename a protocol (see 'renameCategory:toBe: '). if The category is not empty, SystemMethodRecategorizedAnnouncement will also be emitted- we sort (modify the order of) protocols (see 'sortCategories')- we add a protocol (see 'addCategory:before:')- we remove a protocol (see 'removeCategory:' 'removeEmptyCategories')"
"RBClassVariableNamesSpellingRule","See #name for the area where I check spelling."
"FalseTest","This is the unit test for the class False. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"HelpIcons","This class is used to store help icons for the help browser. Typically one implements a method returning a 12x12 Form instance whichshould not be called directly.Since the class provides an internal icon cache (so the icons can be reused without creating too many new instances) the icons should be accessed using the #iconNamed: message with the method selector as argument.To create a form from an icon file stored on disk you can use the following code:   | image stream |	image := ColorForm fromFileNamed: '/path/to/icon.png'.	stream := WriteStream with: String new.	image storeOn: stream.	stream contents inspect."
"MetacelloClearStackCacheNotification",""
"PluggableTabBarMorph","This morph manages a set of PluggableTabButtonMorphs.  Each tab should be added in the left to right order that they should be displayed.  Each tab will be evenly sized to fit the available space.  This morph intercepts mouse clicks, figures out which tab was clicked, pops up the new tab as the active tab and triggers the registered event.  See PluggableTabButtonMorph for information on what a tab can consist of.Example:(PluggableTabBarMorph on: nil)	addTab: (Text fromString: 'Test') withAction: [Transcript show: 'Test'; cr];	addTab: (Text fromString: 'Another') withAction: [Transcript show: 'Another'; cr];	width: 200;	openInHand"
"ZdcSecureSMTPClient","I am ZdcSecureSMTPClient.I open a ZdcSecureSocketStream to the SMTP server and connect it at the SSL level.| mailMessage |mailMessage := MailMessage empty.mailMessage setField: 'subject' toString: 'ZdcSecureSMTPClient Test'.mailMessage body: (MIMEDocument contentType: 'text/plain' content: 'This is test from Pharo Smalltalk').ZdcSecureSMTPClient	sendUsingGMailAccount: '<your-name>@gmail.com' 	password: '<your-password>'	to: '<email-address>' 	message: mailMessage"
"VileFinalizer",""
"AJx64Instruction",""
"ZnParseError","ZnParseError is the superclass of all Zinc HTTP parsing related errors.Part of Zinc HTTP Components."
"MCFileBasedRepository",""
"DynamicClassGroup","A DynamicClassGroup is a group automatically updated whose default granularity is class."
"IntegerArrayTest",""
"ComplexBorder","see BorderedMorph.poly := polygon250 baseColor := Color blue twiceLighter.border := (ComplexBorder framed: 10) baseColor: poly color.border frameRectangle: ((100@100 extent: 200@200) insetBy: -5) on: Display getCanvas.baseColor := Color red twiceLighter.border := (ComplexBorder framed: 10) baseColor: baseColor.border drawPolygon: {100@100. 300@100. 300@300. 100@300} on: Display getCanvas.border drawPolyPatchFrom: 100@200 via: 100@100 via: 200@100 to: 200@200 on: Display getCanvas.border drawPolyPatchFrom: 100@100 via: 200@100 via: 200@200 to: 100@200 on: Display getCanvas.border drawPolyPatchFrom: 200@100 via: 200@200 via: 100@200 to: 100@100 on: Display getCanvas.border drawPolyPatchFrom: 200@200 via: 100@200 via: 100@100 to: 200@100 on: Display getCanvas.border := (ComplexBorder raised: 10) baseColor: poly color.border drawPolygon: poly getVertices on: Display getCanvas360 / 16.0 22.5points := (0 to: 15) collect:[:i| (Point r: 100 degrees: i*22.5) + 200].Display getCanvas fillOval: (100@100 extent: 200@200) color: baseColor.border drawPolygon: points on: Display getCanvas.-1 to: points size + 1 do:[:i|	border drawPolyPatchFrom: (points atWrap: i) via: (points atWrap: i+1) via: (points atWrap: i+2) to: (points atWrap: i+3) on: Display getCanvas.].Display getCanvas fillOval: (100@100 extent: 200@200) color: baseColor.0 to: 36 do:[:i|	border drawLineFrom: (Point r: 100 degrees: i*10) + 200 to: (Point r: 100 degrees: i+1*10) + 200		on: Display getCanvas.].drawPolygon:Point r: 1.0 degrees: 10MessageTally spyOn:[Display deferUpdates: true.t1 := [1 to: 1000 do:[:i|	border drawLineFrom: (100@100) to: (300@100) on: Display getCanvas.	border drawLineFrom: (300@100) to: (300@300) on: Display getCanvas.	border drawLineFrom: (300@300) to: (100@300) on: Display getCanvas.	border drawLineFrom: (100@300) to: (100@100) on: Display getCanvas]] timeToRun.Display deferUpdates: false.].MessageTally spyOn:[Display deferUpdates: true.t2 := [1 to: 1000 do:[:i|	border drawLine2From: (100@100) to: (300@100) on: Display getCanvas.	border drawLine2From: (300@100) to: (300@300) on: Display getCanvas.	border drawLine2From: (300@300) to: (100@300) on: Display getCanvas.	border drawLine2From: (100@300) to: (100@100) on: Display getCanvas]] timeToRun.Display deferUpdates: false.]."
"ProtocolRemovaleException","A ProtocolRemovaleException is an error raised when someone try to remove a protocol that should not be removed"
"AnnouncementsTutorial","This is a custom help book providing a tutorial for the announcements framework."
"MetacelloGroupSpec",""
"UpdateStreamerTest",""
"NautilusMethodSelected","A NautilusMethodSelected is raised each time a mehod is selected"
"MetacelloLinearLoadDirective",""
"WeakOrderedCollectionTest",""
"CachingMorph","This morph can be used to cache the picture of a morph that takes a long time to draw. It should be used with judgement, however, since heavy use of caching can consume large amounts of memory."
"FLGlobalClassCluster","I am a cluster for classes that should be present when materializing. In other words, it only serializes a reference to the class, using its name."
"AbstractEnumerationVisitorTest",""
"RBAssignmentWithoutEffectRule",""
"RBConjunctiveCondition",""
"NBFFICallback","My instances represent a callback function, which will be called by external function at some moment.To create a new callback, first, make a subclass of me and override #fnSpec method, which is an anonymous C function signature, l.e.  'int (int foo , float bar )'  , which tells that given callback class implements a callback for a function which takes two arguments (foo, bar),and returns integer.(Additionally you can override a #callType method which determines a callback function calling convention. A default calling convention for callbacks is #cdecl,and others is barely used on x86 platforms).To use callbacks, you must instantiate it first by passing block as an argument:mycallback := MyCallback on: someBlock.The block is the closure which will be evaluated when callback function get called, so the block must take same number of arguments as specified in #fnSpec method, and its evaluation result must yield a value which can be converted back C type value, which you speficied as a return type of callback function.For example, if callback signature is 'int (int foo , float bar )' , we can create a callback with following block closure:mycallback := MyCallback on: [:foo :bar |  (foo + bar ) asInteger ]. Passing callback as an argument to external function. For passing a callbacks as an argument to C function, you can use its class name for an argument type.For example:primStQSort: base len: size compare: qsortCallback	<primitive: #primitiveNativeCall module: #NativeBoostPlugin>		^ self 		nbCall: #(void qsort (NBExternalAddress base, ulong size, 1, NBQSortCallback qsortCallback))		module: NativeBoost CLibrary 		options: #( optMayGC )as you can see , the third argument (qsortCallback) of function signature, has 'NBQSortCallback' type, which is a class name of existing NBFFICallback subclass. And, of course you are free to create any type aliases for the callback type to use different type names in signature. Just make sure that aliases are resolved correctly to an instance of NBFFICallbackType, during processing of the function signature by NBFFICallout class.!!Note!! A special care must be taken for all functions which may make callbacks! In the above qsort() example, you can see an additional option for external call - #optMayGC, which tells a code generator to call an external function via call gate (a special stub which handling a code relocation caused by GC). Thats it, for any external functions, which may call the callback you must pass this option. Rationale: since most of external functions don't make any callbacks (and so has no chance to trigger GC), using this option by default will be an overkill, which will just spend extra CPU cycles for nothing. However, if you omit this option when calling the function(s) which may call back, expect a hard crash(es) to happen.   If you unsure which external library functions may call back, you can turn on this option by default for all methods in your class by implementing  #ffiCalloutOptions method at class side:MyClass class>>ffiCalloutOptions ^ #( optMayGC )Like that, for any code generated to make external calls in methods of your class, this option will take an effect.Callback lifetime. Each time you instantiating a new callback, it reserves a small amount of external memory , which must be freed once callback is no longer used.This is done automatically, using object finalization scheme, once system detects that there is no more strong references to callback left.So, you only need to make sure that an instance of callback, which you passed to some external function will be kept around in system, as long asan external library has a pointer to it and can perform calls to it.  If you lose the last reference to callback object before making sure that external library can no longer make calls to it, this will lead to an unpredictive behavior (segmentation fault, invalid instruction, memory corruption / pick your favorite).   Redefining callback signature. A callback uses a lazy-initialization scheme to generate a common marshalling code which will be used by all instances of specific callback class.So, changing a callback signature (by changing its #fnSpec method) will not have an immediate effect, if you already created at least a single instance of it. To make changes take effect, you must restart an image."
"FixedFaceFont","I am a font for special purpose like password or fallback.I can show same form whenever someone requests any character.Variable displaySelector is future use to show a form dynamically.(Although it would be unnecessary...)"
"MCPatch","I represent a set of patch operations which can be applied by sending message applyTo: to my instances. "
"CommandLineHandlerTest",""
"RBLiteralBinding",""
"FLBadSignature","I represent an error produced during materialization when the serialized signature doesn't match the materializer's signature (accessible via FLMaterializer>>signature). A signature is a byte prefix that should prefix a well-serialized stream."
"MouseEvent",""
"SHParserST80","I am a Smalltalk method / expression parser supporting syntax highligthing. "
"ExpanderMorphExpanded",""
"MetacelloCachingGoferResolvedReference",""
"RBCreateCascadeRefactoring","A RBCreateCascadeRefactoring is a refactoring used to generate cascades in source code.Copied from OB-Refactory-Tools and should be moved into RB instead"
"EmbossedStringMorph","A label that underdraws to the top-left and/or bottom-right with a lighter and/or darker colour to the receiver."
"MCMcmReader",""
"DisplayScreen","There is only one instance of me, Display. It is a global and is used to handle general user requests to deal with the whole display screen. 	Although I offer no protocol, my name provides a way to distinguish this special instance from all other Forms. This is useful, for example, in dealing with saving and restoring the system.	To change the depth of your Display...		Display newDepth: 16.		Display newDepth: 8.		Display newDepth: 1.Valid display depths are 1, 2, 4, 8, 16 and 32.  It is suggested that you run with your monitors setting the same, for better speed and color fidelity.  Note that this can add up to 4Mb for the Display form.  Finally, note that newDepth: ends by executing a 'ControlManager restore' which currently terminates the active process, so nothing that follows in the doit will get executed.Depths 1, 2, 4 and 8 bits go through a color map to put color on the screen, but 16 and 32-bit color use the pixel values directly for RGB color (5 and 8 bits per, respectivlely).  The color choice an be observed by executing Color fromUser in whatever depth you are using."
"FLLightGeneralMapper","I know how to map an object to its default cluster. I can map every object."
"NumberParsingTest","Tests to verify parsing of numbers from streams and strings.Note: ScaledDecimalTest contains related tests for parsing ScaledDecimal."
"ReturnNode","I represent an expression of the form ^expr."
"MetacelloMCVersionSpec",""
"FileStreamTest",""
"RGSlice","A slice is an arbitrary container of elements (working unit)By inheritance it knows how to treat classes and methods"
"AbstractDescription",""
"RBExplicitVariableParser","I am a specialized version of the RBParser that takes the specialized sublcasses of RBVariableNode into account."
"WeekTest",""
"MetacelloValueHolderSpec",""
"MorphWrapper","A MorphWrapper is used to wrap a morph with a layout in the goal to be easily added to another morph"
"DummyPackageSelectedPlugin","A DummyPackageSelectedPlugin is a dummy plugin which display the counter of keystrokes"
"FLMaterializationError","I represent an error happened during materialization."
"ImagePreviewMorph","Displays an image scaled to a fixed size along with a label describing the original dimensions."
"MetacelloSymbolicVersionSpec",""
"MetacelloVersionDoesNotExistError",""
"NBExternalResourceManager","i am responsible for managing a finalization of external resources.When object, registered as external resource being garbage collected,i telling an object's class to finalize it's associated data (by passing an object,received from #resourceData message sent to an object at registration time).I automatically keep tracking for session change (image save/boot), and ignore finalization of resources of old sessions (since they are not longer valid,and cannot be freed since session changed).Like that, a users of NBExternalResourceManager don't need to implement a session checking logic, and need only to:a) register object as external resource:     NBExternalResourceManager addResource: anObject.b) an object should understand the #resourceData message, which is remembered at registration point (it can be any external resource like, id, handle or memory pointer).Then, when object is garbage collected, its class will receive a message to finalize the resource data in #finalizeResourceData:The passed data is exactly same as previously returned by #resourceData method.An example:Imagine that you want to represent an external resource by keeping its handle.Object subclass: #MyExternalObject 	instanceVariableNames: 'handle'	classVariableNames: ''	poolDictionaries: ''	category: 'XYZ'	To let your object(s) to be managed by external resource manager, you need to register it.Usually you do it after successfully claiming an external resource:MyExternalObject>>initialize	handle := self createNewExternalResource.  ""claim resource""	self assert: self handleIsValid. ""etc...""		""Now, register receiver as external resource"" 	NBExternalResourceManager addResource: self ""Another form of use is: 	NBExternalResourceManager addResource: self data: handle.""----  If you used #addResource: method for registration, you should provide an implementation of #resourceData method:MyExternalObject>>resourceData	^ handle ""since we need only handle to identify external resource""----	Now, for properly finalizing the external resource we should implement:MyExternalObject class>> finalizeResourceData: aHandle	^ self destroyHandle: aHandle. ""do whatever is needed to destroy the handle""Note that in #finalizeResourceData: you cannot access any other properties of your instance, since it is already garbage collected. You also don't need to do a session checking, since it is done automatically by resource manager. "
"RoundedBorder","Rounded corner border supporting radii of 1-4 pixels. Slower but more flexible than CornerRounder."
"PluggableSetTest",""
"LocaleID",""
"SmalltalkEditorTest",""
"ByteTextConverter","A ByteTextConverter is the abstract class for text converters on single byte encodings."
"MenuSpec",""
"BrowserCommentTextMorph","I am a PluggableTextMorph that knows enough to make myself invisible when necessary."
"NECClassVarTypeGuesserTest",""
"MCChangeSelectionRequest",""
"MessageTally","My instances observe and report the amount of time spent in methods.NOTE: a higher-level user interface (combining the MessageTally result tree with a method browser) is available from TimeProfileBrowser. Note that TimeProfileBrowser was not fancy with the different setting possibilities.	TimeProfileBrowser spyOn:  [20 timesRepeat: 			[Transcript show: 100 factorial printString]]	Strategies-----------MessageTally provides two different strategies available for profiling:* spyOn: and friends use a high-priority Process to interrupt the block or process being spied on at periodic intervals. The interrupted call stack is then examined for caller information. See below for an example showing different settings* tallySends: and friends use the interpreter simulator to run the block, recording every method call.The two give you different results:	* spyOn: gives you a view of where the time is being spent in your program, at least on a rough statistical level (assuming you've run the 	block for long enough and have a high enough poll rate). If you're trying to optimize your code, start here and optimize the methods where 	most of the time is being spent first.	* tallySends: gives you accurate counts of how many times methods get called, and by exactly which route. If you're debugging, or trying to 	figure out if a given method is getting called too many times, this is your tool.Q: How do you interpret MessageTally>>tallySendsA: The methods #tallySends and #spyOn: measure two very different quantities, but broken down in the same who-called-who format.  #spyOn: is approximate, but more indicative of real time spent, whereas #tallySends is exact and a precise record of how many times each method got executed.Examples----------Here you can see all the processes computation time			[1000 timesRepeat: [3.14159 printString. Processor yield]] fork.		[1000 timesRepeat: [30 factorial. Processor yield]] fork.		[1000 timesRepeat: [30 factorial. Processor yield]] fork.		MessageTally spyAllOn: [ (Delay forMilliseconds: 100) wait] Settings---------You can change the printing format (that is, the whitespace and string compression) by using these instance methods: 	maxClassNameSize:	maxClassPlusSelectorSize:	maxTabs:You can change the default polling period (initially set to 1) by calling	MessageTally defaultPollPeriod: numberOfMillisecondsTo understand the difference----------------------------------Here we see all the processes	[1000 timesRepeat: [		100 timesRepeat: [120 factorial].		(Delay forMilliseconds: 10) wait		]] forkAt: 45 named: '45'.	MessageTally spyAllOn: [10000 timesRepeat: [1.23 printString]]		Here we only see the execution of the expression [10000 timesRepeat: [1.23 printString]	[1000 timesRepeat: [		100 timesRepeat: [120 factorial].		(Delay forMilliseconds: 10) wait		]] forkAt: 45 named: '45'.	MessageTally spyOn: [10000 timesRepeat: [1.23 printString]]	Here we only check the exact message sends: this is not a pc-sampling approach	[1000 timesRepeat: [		100 timesRepeat: [120 factorial].		(Delay forMilliseconds: 10) wait		]] forkAt: 45 named: '45'.	MessageTally tallySends: [10000 timesRepeat: [1.23 printString]]	"
"NameLookupFailure","Signals that a name lookup operation failed.	hostName	hostName for which the name loopup failed"
"InflateStream","This class implements the Inflate decompression algorithm as defined by RFC1951 and used in PKZip, GZip and ZLib (and many, many more). It is a variant of the LZ77 compression algorithm described in[LZ77] Ziv J., Lempel A., ""A Universal Algorithm for Sequential Data Compression"", IEEE Transactions on Information Theory"", Vol. 23, No. 3, pp. 337-343.[RFC1951] Deutsch. P, ""DEFLATE Compressed Data Format Specification version 1.3""For more information see the above mentioned RFC 1951 which can for instance be found at	http://www.leo.org/pub/comp/doc/standards/rfc/index.htmlHuffman Tree Implementation Notes:===========================================The huffman tree used for decoding literal, distance and length codes in the inflate algorithm has been encoded in a single Array. The tree is made up of subsequent tables storing all entries at the current bit depth. Each entry in the table (e.g., a 32bit Integer value) is either a leaf or a non-leaf node. Leaf nodes store the immediate value in its low 16 bits whereas non-leaf nodes store the offset of the subtable in its low 16bits. The high 8 bits of non-leaf nodes contain the number of additional bits needed for the sub table (the high 8 bits of leaf-nodes are always zero). The first entry in each table is always a non-leaf node indicating how many bits we need to fetch initially. We can thus travel down the tree as follows (written in sort-of-pseudocode the actual implementation can be seen in InflateStream>>decodeValueFrom:):	table := initialTable.	bitsNeeded := high 8 bits of (table at: 1).		""Determine initial bits""	table := initialTable + (low 16 bits of (table at: 1)). ""Determine start of first real table""	[bits := fetch next bitsNeeded bits.			""Grab the bits""	value := table at: bits.						""Lookup the value""	value has high 8 bit set] whileTrue:[		""Check if it's leaf""		table := initialTable + (low 16 bits of value).	""No - compute new sub table start""		bitsNeeded := high 8 bit of value].		""Compute additional number of bits needed""	^value"
"TabLabelMorph","Specially themed label used for tab selector items. "
"NBSessionChangeAnnouncement",""
"CurveMorph","This is really only a shell for creating Shapes with smooth outlines."
"RBAbstractInstanceVariableRefactoring",""
"RBSuperSendsNewRule","See my #rationale."
"MockForCompilation",""
"ColorForm","ColorForm is a normal Form plus a color map of up to 2^depth Colors. Typically, one reserves one entry in the color map for transparent. This allows 1, 3, 15, or 255 non-transparent colors in ColorForms of depths 1, 2, 4, and 8 bits per pixel. ColorForms don't support depths greater than 8 bits because that would require excessively large color maps with little real benefit, since 16-bit and 32-bit depths already support thousands and millions of colors.ColorForms have several uses:  1) Precise colors. You can have up to 256 true colors, instead being limited to the 8-bit color palette.  2) Easy transparency. Just store (Color transparent) at the desired position in the color map.  3) Cheap color remapping by changing the color map.A color map is an Array of up to 2^depth Color objects. A Bitmap colorMap is automatically computed and cached for rapid display. Note that if you change the color map, you must resubmit it via the colors: method to flush this cache.ColorForms can be a bit tricky. Note that:  a) When you BitBlt from one ColorForm to another, you must remember to copy the color map of the source ColorForm to the destination ColorForm.  b) A ColorForm's color map is an array of depth-independent Color objects. BitBlt requires a BitMap of actual pixel values, adjusted to the destination depth. These are different things! ColorForms automatically maintain a cache of the BitBlt-style color map corresponding to the colors array for the last depth on which the ColorForm was displayed, so there should be little need for clients to work with BitBlt-style color maps.  c) The default map for 8 bit depth has black in the first entry, not transparent.  Say (cform colors at: 1 put: Color transparent)."
"NECEntryDescription","A NECEntryDescription is a holder for some information to be displayed."
"Beeper","Beeper provides simple audio (or in some other way) feedback to the user.The recommended use is ""Beeper beep"" to give the user the equivalence of a beep. If you want to force the beep to use the primitive in the VM for beeping, then use ""Beeper beepPrimitive"". In either case, if sounds are disabled there will be no beep.The actual beeping, when you use ""Beeper beep"", is done by sending a #play message to a registered playable object. You can register your own playable object by invoking the class side method #setDefault: passing in an object that responds to the #play message.The default playable object is an instance of Beeper itself which implements #play on the instance side. That implementation delegates the playing of the beep to the default SoundService.Note that #play is introduced as a common interface between AbstractSound and Beeper.This way we can register instances of AbstractSound as playable entities, for example:	Beeper setDefault: (SampledSound new						setSamples: self coffeeCupClink						samplingRate: 12000).Then ""Beeper beep"" will play the coffeeCup sound."
"RxsMessagePredicate","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A message predicate represents a condition on a character that is tested (at the match time) by sending a unary message to the character expecting a Boolean answer.Instance variables:	selector		<Symbol>"
"MonthTest","This is the unit test for the class Month."
"ProportionalSplitterMorph","I am the morph the user grabs to adjust pane splitters."
"TextAlignmentTest",""
"MorphGotFocus","I'm an announcement raised when a morph gets keyboard focus. "
"TextFontChangeTest",""
"NaturalLanguageFormTranslator","Provides support for looking up Forms by name for presentation in the UI.Different forms can be registered for a name for different locales allowingimages presented in the UI to be localised.Typically used where images contain language dependent text.E.g.buttonForm := (NaturalLanguageFormTranslator localeID: Locale current localeID)  translate: 'submit button'Form translations are added like so:(NaturalLanguageFormTranslator isoLanguage: 'en' isoCountry: 'gb')  name: 'submit button' form: aForm"
"BlocEditor",""
"MCVersionInspector","I am a tool that visually represents an MCVersion. While I can be opened on anMCVersion, you've probably seen me most often after saving a package in the Monticello Browser. I have buttons to perform common version-related actions - like browsing, loading, and viewing changes. In my main text area, I display the following information about my version - name, author, timestamp, UUID, ancestors and log message."
"SplitJoinTest","""Evaluate me to view the SplitJoin documentation:""self showDocumentation""CHANGES LOG:- merged implementations by Keith Hodges (Join) and Damiena Pollet  and Oscar Nierstrasz (RubyShards) into SplitJoin package- moved all extension methods to *splitjoin method category- merged all tests into SplitJoinTest- fixed protocol in SequenceableCollection to splitOn: and joinUsing:  and split: join: for splitters and joiners- added Object>>joinTo: aStream and SequenceableCollection>>joinTo: aStream  to support joining of either sequences or sequences of sequences- prepared some documentation- added systematic tests for all split/join cases- added Object>>join:- prepared split/join tests for all 16 cases- prepares split+join tests for 4 standard cases- reviewed/merged old tests- changed splitjoin tests to use different joiner- added separate test for split+join=id cases- adapted documentation -- join result type is type of joiner or array or string- fix split tests to check result asOrderedCollection- added split tests for OrderedCollection and SortedCollection- new join: method for OrderedCollection and SortedCollection  (uses appendTo: in Object and SequenceableCollection)- reviewed all split: implementations -- removed unnecessary helper methods- check boundary conditions -- split on empty sequence ..."""
"UnknownSystemChange",""
"FreeTypeNameParser",""
"SpecSplitterHorizontal","A SpecSplitterHorizontal is a description of the addition of a horizontal splitter"
"InstVarSetter",""
"SpaceTallyItem","I'm represent an entry in the spaceTally."
"MCDependencySorterTest",""
"Cursor","I am a Form that is a possible appearance for a mouse cursor.  My size is always 16x16, ever since the original implementation on the Alto.There are many examples available in the ""current cursor"" category of class methods.  For example, ""Cursor normal"" and ""Cursor wait"".  For example:	Cursor wait show"
"AbstractNautilusUI","An AbstractNautilusUI is an abstraction of the UI handling packages and classes.Instance Variables	cachedHierarchy:		<Object>	classesSelection:		<Object>	commentButton:		<Object>	commentTextArea:		<Object>	currentDisplayChoice:		<Object>	firstColumn:		<Object>	groupsSelection:		<Object>	hierarchyClass:		<Object>	list:		<Object>	list2:		<Object>	model:		<Object>	packagesSelection:		<Object>	secondColumn:		<Object>	sourceCodeContainer:		<Object>	sourceCodePanel:		<Object>	sourceTextArea:		<Object>	sourceTextAreaLimit:		<Object>	window:		<Object>"
"RBOnlyReadOrWrittenTemporaryRule",""
"LinkedListTest","A set of test cases which thoroughly test functionality of the LinkedList class."
"SimpleTestResourceA",""
"AbsolutePath","I represent an absolute path (a position starting from Path root)"
"BehaviorInstallingDeclaration","I'm an abstract class grouping the behavior of the code declarations that will be instaled in a behavior, such as methods, class comments, organizations..."
"Array","I present an ArrayedCollection whose elements are objects."
"MCRemovalPostscriptDefinition",""
"NewHandleMorph",""
"AbstractFont","AbstractFont defines the generic interface that all fonts need to implement."
"MCConfiguration","An MCConfiguration specifies the configuration of a set of related Monticello packages. It maintains an ordered list of package versions and a list of repositories in which the packages may be found.An MCConfiguration may be filed out for storage as an array specification, and new instances can be created from a stored array specification."
"ScriptLoaderTest",""
"Timespan","I represent a duration starting on a specific DateAndTime.
"
"RBAddClassVariableRefactoring",""
"PlatformResolverTest",""
"RBProgramNodeTest",""
"RBRemoveMethodRefactoring",""
"FileLocator","I am a late-bound reference. I refer to a file or directory in relation to a well-known location on the filesystem, called an origin. When asked to perform concrete operation, I look up the current location of my origin, and resolve my path against it. Usage----------FileLocator vmDirectory parent pathString	> '/Applications'FileLocator desktop.FileLocator desktop basename.FileLocator home basename.FileLocator image.FileLocator vmBinary asAbsolute pathString 	>  '/Applications/CogVM.app/Contents/MacOS/CogVM'FileLocator vmBinary pathString 	> '/Applications/CogVM.app/Contents/MacOS/CogVM'		Implementation------------------------origin 	A symbolic name for base reference I use to resolve myself.path	A relative path that is resolved against my origin""		"
"PluggableSliderMorph","A pluggable slider (rather than one that auto-generates access selectors). Needs to be themed..."
"MockTutorial",""
"TraitTransformation","A trait transformation is an instance of one of my concrete subclasses, TraitAlias or TraitExclusion. These represent a transformation of a trait, specified by the alias and exclusion operators. I define an instance variable named subject which holds the object that is transformed.  Thus, an alias transformation has as its subject a trait, and a trait exclusion has as its subject either a trait alias or a trait. Each of the concrete transformation classes implement the method allSelectors according to the transformation it represents. (There was formerly a subclass called TraitHolder, which was the identity transformation and which did not modify the trait.  This was clearly redundant, and was removed.)"
"AtomicSharedQueue","I am using semaphore to signal/wait for new items available in queueI am introducing extra protocol - #next,which blocks the sender until it can successfully fetch next item from queue."
"AbstractKeyPressedPlugin","AbstractKeyPressedPlugin is an abstraction of plugin which react to key strokes "
"JPEGReadWriter","I am a subclass of ImageReadWriter that understands JFIF file streams, and can decode JPEG images.This code is based upon the Independent Joint Photographic Experts Group (IJPEG) software, originally written in C by Tom Lane, Philip Gladstone, Luis Ortiz, Jim Boucher, Lee Crocker, Julian Minguillon, George Phillips, Davide Rossi, Ge' Weijers, and other members of the Independent JPEG Group."
"MetacelloMCVersionDiffReport",""
"NBExternalUnionType",""
"Point","I represent an x-y pair of numbers usually designating a location on the screen."
"GoferChanges",""
"FontSet","FontSet provides a mechanism for storing a set of fonts as a class that can be conveniently filedOut, filedIn, and installed as a TextStyle.The most common use is...	Find a font you like.	Use BitFont to convert a bunch of sizes to data files named, eg, LovelyNN.BF	Use FontSet convertFontsNamed: 'Lovely' to produce a FontSet named Lovely.	FileOut that FontSet for later use.	Use Lovely installAsTextStyle to make all sizes available in a TextStyle		named #Lovely in the TextConstants dictionary.	Use ctrl-k in any text pane to select the new Lovely style for that paragraph.	Then use cmd-1 through 5 or cmd-k to set the point-size for any selection."
"AGroupHasBeenAdded",""
"BindingsHolder","A BindingsHolder is a simple wrapper to manage the bindingsIt has actually two bindings	- the current one: the inst var bindings	  it's the first one queried	- is the needed selector is not defined in the current binding, itchecks in a default one (the class var Bindings)"
"CursorWithMask","A Cursor which additionally has a 16x16 transparency bitmap called a ""mask"".  See the comment of beCursorWithMask: for details on how the mask is treated."
"NBWinTest",""
"RBParseTreeEnvironment",""
"BMPReadWriter","I read and write BMP files.Example to save and load a screenshot of the world in a .bmp file:BMPReadWriter    putForm: (Form fromDisplay: (0@0 corner: 400@400))   onFileNamed: '/tmp/screenshot.bmp'.(ImageMorph withForm: (BMPReadWriter formFromFileNamed: '/tmp/screenshot.bmp')) openInWindow."
"AbstractResizerMorph","I am the superclass of a hierarchy of morph specialized in allowing the user to resize or rearrange windows and panes."
"RBPatternMessageNode","RBPatternMessageNode is a RBMessageNode that will match other message nodes without their selectors being equal. Instance Variables:	isCascadeList	<Boolean>	are we matching a list of message nodes in a cascaded message	isList	<Boolean>	are we matching each keyword or matching all keywords together (e.g., `keyword1: would match a one argument method whereas `@keywords: would match 0 or more arguments)"
"DummyComposableModel","A DummyComposableModel is a stupid ComposableSpec subclass used to uglyly retrieve the bindingsThe bindings should be a class side inst var of SpecInterpreter"
"ProfStefHelp","HelpSystem book documenting ProfStef"
"WeakKeyToCollectionDictionaryTest",""
"NBFloat128",""
"BalloonSolidFillSimulation","This class is a simulation of the code that's run by the Balloon engine. For debugging purposes only."
"SystemOrganizer","My instances provide an organization for the classes in the system, just as a ClassOrganizer organizes the messages within a class. The only difference is the methods for fileIn/Out."
"Socket","A Socket represents a network connection point. Current sockets are designed to support the TCP/IP and UDP protocols. Sockets are the lowest level of networking object in Pharo and are not normally used directly. SocketStream is a higher level object wrapping a Socket in a stream like protocol.ProtocolClient and subclasses are in turn wrappers around a SocketStream to provide support for specific network protocols such as POP, NNTP, HTTP, and FTP."
"SubclassPoolUser","I should be able to access the pool variables defined in my superclass."
"FreeTypeSubPixelAntiAliasedGlyphRenderer",""
"RBReturnInEnsureRule",""
"Matrix","I represent a two-dimensional array, rather like Array2D.There are three main differences between me and Array2D:(1) Array2D inherits from ArrayedCollection, but isn't one.  A lot of things that should work    do not work in consequence of this.(2) Array2D uses ""at: column at: row"" index order, which means that nothing you write using    it is likely to work either.  I use the almost universal ""at: row at: column"" order, so it is    much easier to adapt code from other languages without going doolally.(3) Array2D lets you specify the class of the underlying collection, I don't.Structure:  nrows : a non-negative integer saying how many rows there are.  ncols : a non-negative integer saying how many columns there are.  contents : an Array holding the elements in row-major order.  That is, for a 2x3 array    the contents are (11 12 13 21 22 23).  Array2D uses column major order.    You can specify the class of 'contents' when you create a new Array2D,    but Matrix always gives you an Array.    There is a reason for this.  In strongly typed languages like Haskell and Clean,    'unboxed arrays' save you both space AND time.  But in Squeak, while    WordArray and FloatArray and so on do save space, it costs time to use them.    A LOT of time.  I've measured aFloatArray sum running nearly twice as slow as    anArray sum.  The reason is that whenever you fetch an element from an Array,    that's all that happens, but when you fetch an element from aFloatArray, a whole    new Float gets allocated to hold the value.  This takes time and churns memory.    So the paradox is that if you want fast numerical stuff, DON'T use unboxed arrays!    Another reason for always insisting on an Array is that letting it be something    else would make things like #, and #,, rather more complicated.  Always using Array    is the simplest thing that could possibly work, and it works rather well.I was trying to patch Array2D to make more things work, but just couldn't get my headaround the subscript order.  That's why I made Matrix.Element-wise matrix arithmetic works; you can freely mix matrices and numbers butdon't try to mix matrices and arrays (yet).Matrix multiplication, using the symbol +* (derived from APL's +.x), works between(Matrix or Array) +* (Matrix or Array).  Don't try to use a number as an argument of +*.Matrix * Number and Number * Matrix work fine, so you don't need +* with numbers.Still to come: oodles of stuff.  Gaussian elimination maybe, other stuff probably not."
"RBExtraBlockRule",""
"AlphaImageMorph","Displays an image with the specified alpha value (translucency) and optional scale and layout (scaled, top-right etc.)."
"MCServerCredentials",""
"DisplayTransform","This class represents a base for generic transformations of 2D points between different coordinate systems (including scaling and rotation). The transformations map objects between one coordinate system and another where it is assumed that a nested hierarchy of transformations can be defined.It is assumed that transformations deal with Integer points. All transformations should return Integer coordinates (even though float points may be passed in as argument).Compositions of transformations MUST work in the following order. A 'global' transformation (the argument in #composedWithGlobal:) is defined as a transformation that takes place between the receiver (the 'local') transformation and any 'global' point computations, whereas a 'local' transformation (e.g., the argument in #composedWithLocal:) takes place between the receiver ('global') and any 'local' points. For the transformation methods this means that combining a global and a local transformation will result in the following order:		globalPointToLocal: globalPoint			""globalPoint -> globalTransform -> localTransform -> locaPoint""			^localTransform globalPointToLocal:				(globalTransform globalPointToLocal: globalPoint)		localPointToGlobal: localPoint			""localPoint -> localTransform -> globalTransform -> globalPoint""			^globalTransform localPointToGlobal:				(localTransform localPointToGlobal: localPoint)"
"FreeTypeCache",""
"FTPClient","A minimal FTP client program.  Could store all state in inst vars, and use an instance to represent the full state of a connection in progress.  But simpler to do all that in one method and have it be a complete transaction.Always operates in passive mode (PASV).  All connections are initiated from client in order to get through firewalls.See ServerDirectory openFTP, ServerDirectory getFileNamed:, ServerDirectory putFile:named: for examples of use.See TCP/IP, second edition, by Dr. Sidnie Feit, McGraw-Hill, 1997, Chapter 14, p311."
"ZdcAbstractSSLSession","I am ZdcAbstractSSLSession, an object managing the secure communication between two parties.I define the abstract interface for my subclasses.More specifically, I handle connection setup handshaking as well as the encryptionand decryption of data travelling between two parties.Apart from instanciating and later explicitely destroying me, I am used by feeding data into me using the methods in my operations protocol. These might result in data thathas to be sent to the other side.I am propably too primitive to be used directly, see ZdcSecureSocketStream for a higher level client."
"DialogGroupManager",""
"ZipFileMember","ZipNewFileMember instances are used to represent files that have been read from a ZipArchive.Their data stays in the file on disk, so the original Zip file cannot be directly overwritten."
"NewListAdapter","NewListAdapter is used to link the model and the list.It holds the ""pluggable"" part of the widget, aka the definition of the API"
"ZnLineTooLong","ZnLineTooLong is signalled when an HTTP CRLF terminated input line exceeds a predefined limit.Part of Zinc HTTP Components. "
"Win32Platform",""
"BitmapFillStyle","A BitmapFillStyle fills using any kind of form.Instance variables:	form	<Form>	The form to be used as fill.	tileFlag	<Boolean>	If true, then the form is repeatedly drawn to fill the area."
"NautilusAnnouncer","an Announcer dedicated to Nautilus relative announcements"
"RBSelfBinding",""
"UrlTest","This is the unit test for the class Url. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"TraitExclusion","See comment of my superclass TraitTransformation."
"RBClassVariableCapitalizationRule","This smell arises when class or pool variable names do not start with an uppercase letter, which is a standard style in Smalltalk. In fact a lowercase character is used to represent variables with a local scope such as instance variables, temporary variables, method and block arguments. Uppercase is used to represent the case where the scope of a variable is either global (class name and global variables such as Transcript) or shared among different classes (class variables or pool variables)."
"MCClassDefinition","A MCClassDefinition represents a class."
"MetacelloGoferPackage",""
"ArithmeticError","I am ArithmeticError, the superclass of all exceptions related to arithmentic."
"RBPatternVariableNode","RBPatternVariableNode is an AST node that is used to match several other types of nodes (literals, variables, value nodes, statement nodes, and sequences of statement nodes).The different types of matches are determined by the name of the node. If the name contains a # character, then it will match a literal. If it contains, a . then it matches statements. If it contains no extra characters, then it matches only variables. These options are mutually exclusive.The @ character can be combined with the name to match lists of items. If combined with the . character, then it will match a list of statement nodes (0 or more). If used without the . or # character, then it matches anything except for list of statements. Combining the @ with the # is not supported.Adding another ` in the name will cause the search/replace to look for more matches inside the node that this node matched. This option should not be used for top level expressions since that would cause infinite recursion (e.g., searching only for ""``@anything"").Instance Variables:	isAnything	<Boolean>	can we match any type of node	isList	<Boolean>	can we match a list of items (@)	isLiteral	<Boolean>	only match a literal node (#)	isStatement	<Boolean>	only match statements (.)	recurseInto	<Boolean>	search for more matches in the node we match (`)"
"MCOrganizationDefinition","A MCOrganizationDefinition represents a category change. "
"NautilusHelp",""
"FileReferenceTest",""
"SetInspector","A verison of the Inspector specialized for inspecting Sets.  It displays the elements of the set like elements of an array.  Note that the indices, being phyical locations in the hash table, are not meaningful outside of the set."
"ZnMonticelloServerDelegate","I am ZnMonticelloServerDelegate.I am a proof of concept implementation of a basic Monticello server.I function as a delegate for ZnServer.ZnServer startDefaultOn: 1701.ZnServer default delegate: ((ZnMonticelloServerDelegate new) 									directory: '/tmp/monticello'; 									yourself).Part of Zinc HTTP Components."
"NBObjectFormat","i am exposing an object format to ease accessing various object fields directly,without calling interpreter proxy functions, where it is appropriate"
"CompositionScanner","CompositionScanners are used to measure text and determine where line breaks and space padding should occur."
"MCDirectoryRepository",""
"RBSequenceNode","RBSequenceNode is an AST node that represents a sequence of statements. Both RBBlockNodes and RBMethodNodes contain these.Instance Variables:	leftBar	<Integer | nil>	the position of the left | in the temporaries definition	periods	<SequenceableCollection of: Integer>	the positions of all the periods that separate the statements	rightBar	<Integer | nil>	the position of the right | in the temporaries definition	statements	<SequenceableCollection of: RBStatementNode>	the statement nodes	temporaries	<SequenceableCollection of: RBVariableNode>	the temporaries defined"
"YearTest",""
"GoferRemoteChanges",""
"MCRepositoryAuthorizationTest",""
"NBNativeFunctionArgument",""
"DisplayMedium","I am a display object which can both paint myself on a medium (displayOn: messages), and can act as a medium myself. My chief subclass is Form."
"HelpTopicListItemWrapperTest",""
"ZnRequestLineTests",""
"Stream","I am an abstract class that represents an accessor for a sequence of objects. This sequence is referred to as my ""contents""."
"TimespanDoTest","I am one of several Sunit test Cases intentended to provide complete coverage for the Chronology set of classes as part of the external testing. See DateAndTimeEpochTestCase for a complete list.  tlk.My fixtures are:aDate = January 8, 2003, midnightaDuration = 91 daysaTimeSpan= 91 days, starting January 8, 2003, midnight"
"KeymapBuilderTest",""
"GlyphForm",""
"FreeTypeFontFamilyMember",""
"SequenceableCollection","I am an abstract superclass for collections that have a well-defined order associated with their elements. Thus each element is externally-named by integers referred to as indices."
"BadEqualer","I am an object that doesn't always report #= correctly.  Used for testing the EqualityTester."
"NonReentrantWeakMessageSend","NonReentrantWeakMessageSend does what it says, while the message is being executed, additional evaluations will be discarded.It's used by when:sendOnce:to: protocol from Polymorph events, but unused in the base image.when:send:to:exclusive: is used one place though.It's useful when objects are mutually registered to each other's events, but the actions may lead to the others action being triggered.Examples are - two lists whose contents update based on the selection in the other- The DiffMorph (Uses ExclusiveWeakMessageSend)ExclusiveWeakMessageSend are used when the decision whether to process an event is shared between multiple objects.IE 2 objects respond to different events, but if received simultaneously, only the first of them should have it's action executed.With Announcement, the corresponding functionality to non-reentrancy would be achieved using:VW - AnnouncementCollection>>suspendWhile:  anActionBlockPharo - Announcer >> suspend: aSubscriber while: anActionBlock (As we neither have a specific AnnouncementCollection class, nor access to Registry itself. Not implemented yet though :P)The shared state required to achieve Exclusivity would probably have to recide outside of the framework."
"WindowLabelled",""
"NBFnSpecParser",""
"ZnByteEncoder","I am ZnByteEncoder, a concrete subclass of ZnCharacterEncoder.I handle single byte encodings where byte values 0 to 127 map to ASCIIand 128 to 255 are a permutation to Unicode characters.I derive my mappings by parsing official unicode.org specifications.Part of Zinc HTTP Components."
"MyResumableTestError",""
"JobChange","A JobChange is an announcement for a job change. To get notifySystemAnnouncer uniqueInstance 	on: JobChange send: #XXX to: whoever."
"NECDetailMorph","I display some detail information for a selected ECEntry in the ECMenuMorph.The content I show, is provided by an ECDetailContentProvider subclass. "
"PanelMorph","A container morph that tracks the owner's pane colour unless an explicit fillStyle is specified. Additionally allows hooking of mouseOver events (no button down)."
"SmalltalkSyntaxTutorialTest",""
"Year","I represent a year."
"MetacelloProjectSpec",""
"AJImmediate","I am an immediate (constant integer) operand used by the assembler.Example:	asm := AJx64Assembler new.	""create an immediate from an integer""	1 asImm.	""implicitely use an immediate in an assembly instrution""	asm add: 1 to: asm RAX.	"
"CompressedBoundaryShape","This class represents a very compact representation of a boundary shape. It consists of a number of compressed arrays that can be handled by the balloon engine directly. Due to this, there are certain restrictions (see below). Boundaries are always represented by three subsequent points that define a quadratic bezier segment. It is recommended that for straight line segments the control point is set either to the previous or the next point.Instance variables:	points		<PointArray | ShortPointArray>	Point storage area	leftFills		<ShortRunArray>	Containing the ""left"" fill index of each segment	rightFills	<ShortRunArray>	Containing the ""right"" fill index of each segment	lineWidths	<ShortRunArray>	Containing the line width of each segment	lineFills		<ShortRunArray>	Containing the line fill (e.g., line color) of each segment	fillStyles	<Collections>			Contains the actual fill styles referenced by the indexesRESTRICTIONS:None of the ShortRunArrays may contain a run of length Zero.Also, due to the use of ShortRunArrays 	a) you cannot have more than 32768 different fill styles	b) you cannot have a line width that exceeds 32768In case you have trouble with a), try to merge some of the fills into one. You might do so by converting colors to 32bit pixel values. In case you have trouble with b) you might change the general resolution of the compressed shape to have less accuracy."
"MCWorkingHistoryBrowser",""
"TestRunnerCommandLineHandler","Usage: test [--junit-xml-output] [<package> ...]	--junit-xml-output    output the test results in a junit compatible format	<package>             a String matching a package name	Examples:	#Run all the tests in the Tests-Exceptions package	$PharoVM Foo.image test Tests-Exceptions		#Run all the tests in packages matching Test-.*	$PharoVM Foo.image test ""Tests-.*""		# Run test on a Hudson/Jenkins server	$PharoVM Foo.image test --junit-xml-output ""Tests-.*""	"
"GoferRepositoryError","A GoferRepositoryError is the error thrown when a repository cannot be accessed."
"SocketStreamTest",""
"Schedule","I represent a powerful class for implementing recurring schedules."
"MorphTreeColumn",""
"RBUnderscoreAssignmentRule",""
"NaNException","I am NaNException, an ArithmeticException signaled when Float nan was encountered where it was not allowed. "
"RBSemanticTest",""
"MethodBrowser","A MethodBrowser is a simple browser using Spec to display a list of methods and their source code	si := MethodBrowser new.	si openWithSpec.	si methods: Object methodDict values"
"RBExcessiveMethodsRule","See my #rationale.A good design assigns one responsibility to a class. Ask yourself, ""what is the key responsibility of this class?"" Using the strategy design pattern may be a solution to structure and delegate some behavior. An indication that a class may have too many responsibilities is when different groups of methods access a subpart of the instance variables. In a large system, having some large classes is often inevitable; but when there are more than a couple of large classes, you should really reconsider your design. 	The defined number of methods can be edited in #methodsCount."
"AbstractKeymappingTest",""
"FLSubstitutionCluster","I am a cluster for objects that have to be replaced in the object graph by another one (at serialization time).Examples of use:1) Suppose you want to substitute instances of WriteStream by nil. In such case, WriteStream has to implement this method:fuelAccept: aVisitor	^aVisitor visitSubstitution: self by: nil2) Suppose you want to substitute every integer in the graph by its string representation. In such case you should configure the analyzer through:anAnalyzer when: [:x | x isInteger] substituteBy: [:x | x printString].In this way, when you serialize #(1 2), you will then materialize #('1' '2')"
"RBRenameInstanceVariableTest",""
"FileSystem","I present a low-level protocol for interacting with filesystems. I hold a reference toa store (a subinstance of FileSystemStore) which takes care of the details of performing file and directory operations on the filesystem I represent. I keep track of the current directory, and am responsible for resolving all paths thatI pass into my store. My store acts as a factory and offers platform specific actions.FileSystem instances know two methods that return a Reference object: workingDirectory and root.FileSystem disk workingDirectoryFileSystem disk root"
"RBRenameTemporaryTest",""
"DamageRecorder",""
"ClassFactoryWithOrganizationTest",""
"Spotlight","I'm a morph who searchs classes and implementors in an easy way (it is a ""code completion"" morph in a cool place and with better ""enter"" handling).To activate it just press shift+enter"
"StepMessage","I'm a MorphicAlarm to be queued in WorldState list of stepping actions. I hold the stepTime (refresh period) of my receiver / Morph (if nil, the #stepTime value of my receiver is used).See - WordState>>runLocalStepMethodsIn:   (where the stepping actions are sent).- WorldState>>startStepping:at:selector:arguments:stepTime:  (to queue a new StepMessage)Example:MorphicUIManager currentWorld        startStepping: (Morph new openInWorld)        at: Time millisecondClockValue        selector: #toggleVisible        arguments: nil        stepTime: 500."
"FLAnalysis","I am responsible of traversing the graph of references starting from a root object. I will produce a clusterization which the serializer will store on a stream.An example of use is:	(FLAnalyzer newDefault 		clusterizationOf: (Array with: 1@2 with: 3@4))		clusters."
"RBDetectIfNoneRule",""
"BrowserUrl","URLs that instruct a browser to do something."
"ConnectionQueue","A ConnectionQueue listens on a given port number and collects a queue of client connections. In order to handle state changes quickly, a ConnectionQueue has its own process that: (a) tries to keep a socket listening on the port whenever the queue isn't already full of connections and (b) prunes stale connections out of the queue to make room for fresh ones."
"CategoryRemoved","This announcement will be emited when removing a category using:=> SystemOrganizer >> removeCategory:"
"CollectionsArithmeticReadme",""
"FLGlobalValueCluster","I am a cluster for known objects that belong to Smalltalk global dictionary.For example, Transcript could be serialized and materialized by me."
"StartupLoader","StartupLoader searches for and executes .st files from certain locations.  To find these it searches for a '.config' folder in the folder next up from where the image file sits.  Then it looks in the next folder up again and so on until reaching the root folder.  When a '.config' folder is found, StartupLoader looks within this for a 'pharo' folder. This contains the startup scripts common to all versions of Pharo, and also optionally a folder per Pharo version holding startup scripts suitable for that version only.  So a typical directory layout might be....../some/folders/pharo/Content/Resources/pharo.image..../some/folders/pharo/Content/Resources/startup.st.../some/folders/.config/pharo/author.st.../some/folders/.config/pharo/useSharedCache.st.../some/folders/.config/pharo/1.4/mystartupFor14only.st.../some/folders/.config/pharo/2.0/mystartupFor20only.st(**Note however that '.config' is an invalid filename on Windows, so '..config' is used instead)IMPORTANT: StartupLoader will search for a folder '.config' starting from the image directory until the root of the filesystem. What happens if no folder is found? It creates '.config' in the image folder. However, it is recommended that you create the '.config' following the standard, that is, in the $HOME.To know the real values for you...Print the result of ""FileDirectory preferencesGeneralFolder"" which holds the startup scripts common to all versions of Pharo.Print the result of ""FileDirectory preferencesVersionFolder"" which holds the startup scripts specific to the version of the current image.-----------StartupLoader examplewill define a script sample startup.st in your unix root on unix Its contents is StartupLoader default executeAtomicItems: {	StartupAtomicItem name: 'Open Help' code: 'Workspace openContents: ''Here is just an example of how to use the StartupLoader.I should only be displayed once.	You can also see StartupLoader class>>#example'' label: ''Help''' isSingleton: true.	StartupAtomicItem name: 'Open Workspace' code: 'Workspace openContents: ''I should be displayed each time'''.}For a more complete example, see StartupLoader class>>#example2"
"Environment",""
"ResetWindow",""
"FileStream","I represent a Stream that accesses a FilePage from a File. One use for my instance is to access larger ""virtual Strings"" than can be stored contiguously in main memory. I restrict the objects stored and retrieved to be Integers or Characters. An end of file pointer terminates reading; it can be extended by writing past it, or the file can be explicitly truncated.	To use the file system for most applications, you typically create a FileStream. This is done by sending a message to a FileDirectory (file:, oldFile:, newFile:, rename:newName:) which creates an instance of me. Accesses to the file are then done via my instance.*** On DOS, files cannot be shortened!  ***  To overwrite a file with a shorter one, first delete the old file (FileDirectory deleteFilePath: 'Hard Disk:aFolder:dataFolder:foo') or (aFileDirectory deleteFileNamed: 'foo').  Then write your new shorter version."
"EditorFindReplaceDialogWindow",""
"PackageNodeExample",""
"SystemResolver","I resolve origins that are related to the currently running Smalltalk system, using primitives provided by the VM. "
"ChangeSet","ChangeSets keep track of the changes made to a system, so they can be written on a file as source code (a ""fileOut""). This implementation of ChangeSet is capable of remembering and manipulating methods for which the classes are not present in the system.  However at the present time, this capability is not used in normal rearranging and fileOuts, but only for invoking and revoking associated with isolation layers.For isolated projects (see Project class comment), the changeSet binding is semi-permanent.  Every project exists in an isolation layer defined by its closest enclosing parent (or itself) that is isolated.  If a project is not isolated, then changes reported to its designated changeSet must also be reported to the permanent changeSet for that layer, designated in the isolated project.  This ensures that that outer project will be able to revert all changes upon exit.Note that only certain changes may be reverted.  Classes may not be added, removed, renamed or reshaped except in the layer in which they are defined because these operations on non-local classes are not revertable.If a Squeak Project is established as being isolated, then its associated changeSet will be declared to be revertable.  In this case all changes stored can be reverted.  The changeSet associated with an isolated project is tied to that project, and cannot be edited in a changeSorter.------name - a String used to name the changeSet, and thus any associated project or fileOut.preamble and postscript:  two strings that serve as prefix (useful for documentation) and suffix (useful for doits) to the fileout of the changeSet.revertable - a BooleanIf this variable is true, then all of the changes recorded by this changeSet can be reverted.changeRecords -  Dictionary {class name -> a ClassChangeRecord}.These classChangeRecords (qv) remember all of the system changes.structures -    Dictionary {#Rectangle -> #(<classVersionInteger> 'origin' 'corner')}.Of  the names of the instances variables before any changes for all classes in classChanges, and all of their superclasses.  In the same format used in SmartRefStream.  Inst var names are strings.  superclasses -    Dictionary {#Rectangle -> #Object}.Of all classes in classChanges, and all of their superclasses.Structures and superclasses save the instance variable names of this class and all of its superclasses.  Later we can tell how it changed and write a conversion method.  The conversion method is used when old format objects are brought in from the disk from ImageSegment files (.extSeg) or SmartRefStream files (.obj .morph .bo .sp).NOTE:  It should be fairly simple, by adding a bit more information to the classChangeRecords, to reconstruct the information now stored in 'structures' and 'superclasses'.  This would be a welcome simplification."
"TextFontReferenceTest",""
"TraitCompositionTest",""
"RBAbstractClassRule","See my #rationale."
"CriticToolbar","I'am a toolbar for the SmallLint CriticsInstance Variables	browseModel:		<Object>	criticHolder:		<Object>	falsepositiveModel:		<Object>	ruleHolder:		<Object>	transformModel:		<Object>browseModel	- xxxxxcriticHolder	- xxxxxfalsepositiveModel	- xxxxxruleHolder	- xxxxxtransformModel	- xxxxx"
"MultipleMethodsEditorAllButtonModel",""
"ClosureCompilerTest",""
"KMKeymap","I am the real keymap.  I have an action to evaluate when my keymap sequence is pressed."
"SettingNodeBuilder",""
"ZnBasicCredential","I am ZnBasicCredential, a concrete subclass of ZnCredential.I implement basic HTTP authentication.I hold a username and password.Part of Zinc HTTP Components."
"ZnZodiacNetworkingUtils","ZnZodiacNetworkingUtils is socket and socketstream factory subclassing ZnNetworkingUtils,instanciating Zodiac socket streams., namely ZdcSocketStream and ZdcSecureSocketStream.Obviously, this class depends on Zodiac.ZnNetworkingUtils default: ZnZodiacNetworkingUtils new.ZnNetworkingUtils default: nil.Part of Zinc HTTP Components."
"SubclassResponsibility","I am SubclassResponsibility, an exception signaled when an inherited method should have been implemented in a subclass but was not."
"PrototypeTester","I am a simple holder of a prototype object and hand out copies when requested."
"RBRemoveClassVariableRefactoring",""
"FLAbstractCollectionCluster","A FLAbstractCollectionCluster is the common behavior for all cluster collections. "
"TickDialogWindow","A TickDialogWindow is a dialog window which contains a TickList where user can pick a list of items.self example"
"FreeTypeCacheTest",""
"VariableNode","I am a parse tree leaf representing a variable. Note that my name and key are different for pool variables: the key is the Object Reference."
"KonamiCodePlugin","A KonamiCodePlugin is a plugin which run an action when the Konami code is entered"
"WikiStyleHelp","This help type extends the system with a wiki like help descriptions"
"RBPatternWrapperBlockNode","RBPatternWrapperBlockNode allows further matching using a block after a node has been matched by a pattern node.Instance Variables:	wrappedNode	<RBProgramNode>	The original pattern node to match"
"ZdcAbstractSocketStreamTests","ZdcAbstractSocketStreamTests holds units tests for socket streams.This is an abstract class, subclasses should implement #socketStreamClass "
"ExtendedTabPanelBorder","Specialized border for TabGroup. Does not draw border beneath the selectd tab and only draws on top."
"LookupKey","I represent a key for looking up entries in a data structure. Subclasses of me, such as Association, typically represent dictionary entries."
"FreeTypeFontProvider","This is a font provider for true type fonts. You can use it to add TTF files to your image:FreeTypeFontProvider current         updateFromFileEntry:                 (FileDirectory default entryAt: 'UnDotum.ttf')         directory:  FileDirectory default         locationType: #imageRelative. FreeTypeFontProvider current buildFamilies. FreeTypeFontSelectorDialogWindow new open.StandardFonts balloonFont:         (LogicalFont familyName: 'UnDotum'  pointSize: 10). StandardFonts defaultFont:         (LogicalFont familyName: 'UnDotum'  pointSize: 14)."
"PluggableCanvas","An abstract canvas which modifies the behavior of an underlying canvas in some way.  Subclasses should implement apply:, which takes a one argument block and an actual canvas to draw on.  See apply: for the specific definition."
"MCReader",""
"RBClassRefactoring",""
"GroupCreatorTreeModel",""
"RBAndEnvironment",""
"ConnectionTimedOut","Signals that a connection attempt timed out."
"Process","I represent an independent path of control in the system. This path of control may be stopped (by sending the message suspend) in such a way that it can later be restarted (by sending the message resume). When any one of several paths of control can be advanced, the single instance of ProcessorScheduler named Processor determines which one will actually be advanced partly using the value of priority.(If anyone ever makes a subclass of Process, be sure to use allSubInstances in anyProcessesAbove:.)Process-specific storage: 	An old implementation using #environmentAt: [ifAbsent:/put:] protocol are no longer supported.	One must not use a process-specific storage (PSS) methods directly, and instead use ProcessSpecificVariable (or subclass) instances to access process-specific storage.	A new implemention is a revision towards making an access to PSS faster.When new instance of ProcessSpecificVariable are created, it obtains an unique index, which is registered using #allocatePSKey: (see class side).This allows to dynamically create as many process-specific variables as needed, and access them in fast manner via simple array index (instead of dictionary lookup,as in previous implementation).Another important aspect of new implementation is that all values in PSS are held weakly. This is done to prevent accidental memory leaksas well as no need to manually unregistering a process-specific keys , once they are no longer in use."
"IconicButtonStateHolder","An IconicButtonStateHolder is a state holder for Iconic button.Since Nautilus cache the icon, I do not want to keep pointers to the iconic button's target.I use this state holder for the storage"
"MCScannerTest",""
"StandardFonts","I am a facade and a global reference to actual fonts to be used system wide in a number of predefined categories.I also provide methods to interactively choose these fonts, to reset all fonts to some default value, to set larger demo fonts, to construct a font menu and to manipulate the current settings as an external specification.The font categories that I know of are: ButtonFont, CodeFont, HaloFont, ListFont, MenuFont and WindowTitleFontExamples:- I open a dialog to choose the font for buttons with:StandardFonts chooseButtonFont.- To change base size for all fonts (when you want big fonts for a screencast or a presentation):StandardFonts setDemoFonts.- Then restore default fonts with:StandardFonts restoreDefaultFonts."
"Dictionary","I represent a set of elements that can be viewed from one of two perspectives: a set of associations, or a container of values that are externally named where the name can be any object that responds to =. The external name is referred to as the key.  I inherit many operations from Set."
"MCDefinitionIndex","I'm a simple container of MCDefinitions which can be added or removed."
"GeneratorTest",""
"SpecLayoutAdd","A SpecLayoutAdd represents the action to add a subwidget into a spec layout"
"LogicalFontManager","I reference all font families available in the  system.For example:LogicalFontManager current allFamilies.FreeTypeFontSelectorDialogWindow new open."
"LimitedWriteStream","A LimitedWriteStream is a specialized WriteStream that has a maximum size of the collection it streams over. When this limit is reached a special limitBlock is executed. This can for example be used to ""bail out"" of lengthy streaming operations before they have finished.  For a simple example take a look at the universal Object printString.The message SequenceableCollection class streamContents:limitedTo: creates a LimitedWriteStream. In this case it prevents very large (or possibly recursive) object structures to ""overdo"" their textual representation. "
"MessageAsTempNode","This node represents accesses to temporary variables for do-its in the debugger.  Since they execute in another context, they must send a message to the original context to access the value of the temporary variable in that context."
"RBBinarySelectorToken","RBBinarySelectorToken is the first-class representation of a binary selector (e.g. +)"
"UUIDGenerator","This class generates a pseudo-random UUIDby John M McIntosh johnmci@smalltalkconsulting.comSee http://www.webdav.org/specs/draft-leach-uuids-guids-01.txt"
"CheckBoxModel","A CheckboxModel is a spec model for CheckboxYou can also have a look at CheckBoxExample for a full example of how to use them with a group."
"TraitCompositionException","Signal invalid trait compositions."
"RBEndTrueFalseRule",""
"FrameLayoutSpec","A FrameLayoutSpec is for a FrameLayout"
"TraitException","General exception used for example to signal invalid trait compositions"
"RBRenameVariableChange",""
"MCSliceInfo",""
"LiteralNode","I am a parse tree leaf representing a literal string or number."
"FormCanvas","Note that when shadowDrawing is true, shadowStipple may be either a color, for a solid shadow of the given color, or it may be a stipple used to simulate gray shading when the display cannot support alpha blending."
"WindowModel","A WindowModel is a spec model for a Window"
"WeakAnnouncerTest",""
"Number","Class Number holds the most general methods for dealing with numbers. Subclasses Float, Fraction, and Integer, and their subclasses, provide concrete representations of a numeric quantity.All of Number's subclasses participate in a simple type coercion mechanism that supports mixed-mode arithmetic and comparisons.  It works as follows:  If	self<typeA> op: arg<typeB>fails because of incompatible types, then it is retried in the following guise:	(arg adaptTypeA: self) op: arg adaptToTypeA.This gives the arg of typeB an opportunity to resolve the incompatibility, knowing exactly what two types are involved.  If self is more general, then arg will be converted, and viceVersa.  This mechanism is extensible to any new number classes that one might wish to add to Squeak.  The only requirement is that every subclass of Number must support a pair of conversion methods specific to each of the other subclasses of Number.Implementation notes----------------------------------The implementation of #degreeCos and #degreeSin is such that results are exact for any multiple of 90.Care is also taken to evaluate the sine between -90° and 90°, this will avoid #degreesToRadians and i386 FPU sine fonction to accumulate round off errors due to approximate representation of pi.We can thus evaluate 240 degreeCos with at most 1 ulp error. It's not perfect, but better than previous implementation.For cosine, we know that:	cosd(x)=cosd(abs(x))	cosd(x)=sind(90-x)thus the trick is to evaluate:	cosd(x)=sind(90-abs(x)) after appropriate modulo in [-180,180[This way, we are sure to evaluate the sine between -90° and 90°The #degreesToRadians and #sin are used rather than #degreeSin to avoid cycles.For sine, it would be necessary to evaluate eithersind(x) if abs(x) <=90or sind(180-x) if abs(x) >= 90A possible implementation would be:	| x |	x := 90 + self \\ 360 - 90.	x >= 180 ifTrue: [x := 180 - x].	^x degreesToRadians sinWe prefer evaluating cosd(90-x) thus providing a branch free implementation."
"RBUsesTrueRule","See my #rationale."
"RBPullUpInstanceVariableRefactoring",""
"ExactFloatPrintPolicy","I am ExactFloatPrintPolicy.Through FloatPrintPolicy and double dispatch I force Float>>#printOn:base: to dynamically use the slower but accurate way to print Floats using Float>>#absPrintExactlyOn:base:"
"RBMessageNode","RBMessageNode is an AST node that represents a message send.Instance Variables:	arguments	<SequenceableCollection of: RBValueNode>	our argument nodes	receiver	<RBValueNode>	the receiver's node	selector	<Symbol | nil>	the selector we're sending (cached)	selectorParts	<SequenceableCollection of: RBValueToken>	the tokens for each keyword"
"RBSpellingRule","Abstract superclass. See subclasses."
"ZnResponse","I am ZnResponse, representing an HTTP Response consisting of a status line, headers and an optional entity (body).I am a ZnMessage.I can be used for generating and parsing.Part of Zinc HTTP Components."
"CircleMorphTest","A CircleMorphTest is a subclass of MorphTest.  It was first implemented when removing some unused and broken functionality.My fixtures are morph, a CircleMorph and world."
"MailAddressTokenizer","Divides an address into tokens, as specified in RFC 822.  Used by MailAddressParser."
"AbstractPackageWidget","AbstractPackageWidget is an abstraction describing a widget used to manage packages"
"AJx86Instruction",""
"ClassMethodBrowser","A ClassMethodBrowser is a simple browser using spec and reusing MethodBrowser to browse classes>>methods>>sourceCode.	| cb |	cb := ClassMethodBrowser new.	cb openWithSpec.	cb classes: Smalltalk allClasses."
"AverageCost","Part of an test resource to verify that super is well bound.See CompilerEvaluationTest"
"TestValueWithinFix",""
"DummyUIManager","I'm an alternative UIManager used to run an the image without GUI.  I redefine methods which requires user input as these requests are irrelevant in a headless environment. "
"DateAndTimeDosEpochTest",""
"MethodFromTraitAction","Action when the method comes from a trait"
"MCFilteredVersionSorter",""
"RBContextBinding",""
"MorphDropListMorph","Drop list supporting morphs in list."
"ZnResourceMetaUtilsTests",""
"TableLayout","The layout process:For computing the new layout for the children of any morph, we start with an initial rectangle which is provided as a reference.Step 1: The first step of layout computation is to compute the minimum extent each of our children can have. The minimum extent is mapped through both the local layout frame of the morph (for relative positioning) and the global layout frame (for insets, such as cursor indication) to obtain the minimal size required for each cell.Step 2: Based on the cell sizes, the number of cells we can put into each row and column is computed. For equal spacing, the maximum size of the cells is taken into account here.Step 3: Based on the row/column sizes, we compute the extra space which should be added to each row/column. For 	#leftFlush/#topFlush - we add all extra space add the end	#rightFlush/#bottomFlush - we add all extra space at the start	#centering - we add 1/2 of the extra space at start and end	#justified - we distribute the space evenly between the morphs[NOTE: If any #spaceFill morphs are encountered during this step, #justified is implied and the space is exclusively and equally distributed between those #spaceFill morphs. This is for backward compatibility and should *never* be necessary in the new regime].Step 4: The morphs are placed in the computed cells and the extra space is distributed as necessary. Placing the submorphs is done by mapping through the global and the local layout frame as requested.Start point:=> bounds: new rectangle for the morph.Compute basic arrangement of morphs:=> For each submorph compute minExtent	- if global layout frame inset in global layout frame	- if local layout frame inset in local layout frame=> Compute number of morphs per, width and height of row/column	- if equal spacing based on max size=> Compute extra space per row/column	- if centering = #justified; distribute space equally	- if centering #leftFlush/#topFlush (-1) add start extra	- if centering #rightFlush/#bottomFlush (1) add end extra	- if centering #centered add 1/2 extra to start/end	<extra space must be float and rounded accordingly!>=> Place morphs in appropriate cells	- if global layout frame inset in global layout frame	- if local layout frame inset in local layout frame	<will likely cause #layoutChanged by submorphs>Distribute morphs in row/column:=> Compute the max length of each row/column"
"ZnServerSessionManager","I am ZnServerSessionManager.I manage a collection of ZnServerSession on behalf of a ZnServer.Session ids are stored in cookies.Part of Zinc HTTP Components."
"MetacelloVersionValidator",""
"MCTraitDefinition","A MCTraitDefinition represents a trait."
"Stack","I implement a simple Stack. #push: adds a new object of any kind on top of the stack. #pop returns the first element and remove it from the stack. #top answer the first element of the stack without removing it."
"SetTest","This is the unit test for the class Set. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"IdentifierChooserMorph","An IdentifierChooserMorph is a menu builder which takes a list of labels as input and build/popup  a menu for them. The morph could be made of one menu in one column for all labels of of several menus in a scrollabe row. The action which is performed when a menu item is selected is also parametrized (see examples below).The morph can take the keyboard focus and then, up, down, left and right arrows can be used to choose a menu item.It is the responsibility of the user of this morph to decide when and how the keyboard focus is token.The design is widely inpired from PopupChoiceDialogWindow.example 1A very simple example with three label. The nil value will be represented as a menu line in the resulting morph.(IdentifierChooserMorph 		labels: {'aaaaaa'. 'bbbbbbb'. nil. 'cccccccc'}		chooseBlock: [ :chosen | UIManager default inform: (chosen, (' has been chosen' translated))])			open			example 2The same except that a color is specified		(IdentifierChooserMorph 		labels: {'aaaaaa'. 'bbbbbbb'. nil. 'cccccccc'}		chooseBlock: [ :chosen | UIManager default inform: (chosen, (' has been chosen' translated))])			baseColor: Color white;			openexample 3Allows the presentation of one menu (one column) vith two fixed labels followed by the list of all classes.(IdentifierChooserMorph 		labels: ({'aaaaaa'. 'bbbbbbb'}, { nil }, (Object allSubclasses collect: [:c | c theNonMetaClass  name]) asSet asArray sort)		chooseBlock: [ :chosen | (Smalltalk globals at: chosen asSymbol) ifNotNil: [:c | c browse] ]) 			oneMenuOfWidth: 300;			baseColor: Color white;			openInstance Variables	baseColor:		<Color>	choiceMenus:		<Array>	choicesMorph:		<AlignmentMorph>	chooseBlock:		<Block>	labels:		<Array>	maxLines:		<Integer>	requestor:		<Morph>	scrollPaneWidth:		<Integer>baseColor	- The color used for the menu items and the receiverchoiceMenus	- The array of EmbeddedMenuMorphchoicesMorph	- The AlignmentMorph which contains all menuschooseBlock	- A block with one argument which is evaluated when a menu item is selected. The argument takes the chosen label as argumentlabels	- The array of labels maxLines	- If not nil, gives the maximum number of lines for one menurequestor	- if not nil, a Morph from which the receiver is builtscrollPaneWidth	- The maximum width of the scrollPane, this contraints the width of the receiver."
"IgorsPlugin","An IgorsPlugin is a plugin which displays info about the current selection"
"MetacelloPackagesSpec",""
"AJxMMRegister",""
"FreeTypeFont",""
"Finder","I'm the finderUI model in the MVC pattern.I'm compute the search string and I construct a resultDictionary.Then I throw events everywhere and my views are redrawn."
"DenyDialogWindow","Dialog window displaying a message with a single OK button. Escape/return will close. Icon is a themed lock icon."
"CheckboxSpec","A CheckboxSpec is a spec used to describe a CheckboxButton and a RadionButton"
"ClassRecategorized","This announcement will be raised when:- we set a category to a class (see 'Class >>category:')- we set a category to a Trait (see Trait>>category:)It corresponds to the RecategorizedEvent"
"AGroupHasBeenRenamed",""
"MCEmptyPackageInfo",""
"RGContainerTest",""
"RBArgumentBinding",""
"WeightedAverageCost","Part of an test resource to verify that super is well bound.See CompilerEvaluationTest"
"Bezier2Segment","This class represents a quadratic bezier segment between two pointsInstance variables:	via		<Point>	The additional control point (OFF the curve)"
"NBInt32","I responsible for marshalling 		signed 32-bit integer type values."
"RBMultiEnvironment",""
"MCDirtyPackageInfo",""
"IllegalResumeAttempt","This class is private to the EHS implementation.  An instance of it is signaled whenever an attempt is made to resume from an exception which answers false to #isResumable."
"TutorialPlayer","I can navigate through an AbstractTutorial subclass. With #next and #previous you can go forward and backward through the tutorial. "
"SpecColumnLayout","A SpecColumnLayout is the layout used to specify a new column"
"PluggableMenuSpec","I'm a spec for a menu. The World menu pragma based registration uses it for now. I'm moved in this package so that later the ToolBuilder package can be unloaded. We could probably avoid MenuSpec and just use MenuMorph instead. "
"MCVersionLoader","A MCVersionLoader is responsible for loading a given version. "
"CategoryAdded","This announcement will be emited when adding a category using:=> SystemOrganizer >> addCategory:"
"NOCEmptyModel","I implement a null object pattern related to NOCModel in order to mark the end of possible completions in the answer list. "
"MorphTreeListManager",""
"ThumbnailMorph","A Morph that views another morph, its objectToView."
"CommandLineHandler","A CommandLineHandler is activated by the CommandLine. The responsible handler with the highest priority is selected and its instance-side method #activate is invoked.By default the handlers are selected by their class name. In the following shell invocation the FooHandler is chosen:	$PATH_TO_VM myImage.image FooHandlerA handler may provide a short name with the class-side #commandName method. If the FooHandler defined #commandName returning 'foo' it would be activated with the following shell invocation:		$PATH_TO_VM myImage.image foo	For more sophisticated handler selection the CommandLineHandler should implement the #isResponsibleFor: class-side method. An instance of the current command line options is passed to this method which should then return a boolean.Between all the responsible handlers the one with the highes #priority is chosen. To change the priority overwrite the class-side accessor."
"MetacelloGoferCommit",""
"FLPluggableSubstitutionMapper","I map substituted objects. For example, suppose you want to substitute instances of WriteStream by nil. In such case, I will map every WriteStream instance to my substitutions cluster, and its factory block will value to nil with any argument."
"RBAsOrderedCollectionNotNeededRule",""
"SmalltalkImage","My singleton is a central entry point to the system.It has many roles and responsibilities (to be documented)	- startup/shutdown image	- source management	- namespace access	- tool access	- platform access	- VM information and parameters		Startup-----------At startup and shutdown the image execute the methods startUp: and shutdown: of registered classes (registered using addToStartUpList:, addToShutDownList:, ... methods and friends).	Startup phasesDuring the first stage of start up the UI manager, the default uimanager is switched to a specific non interactive ui manager (StartupUIManager). Note that this specific non interactive UIManager kills the system on any attempt to open windows and interaction. So be warned, don't use interaction in the first phase. Then all registered classes execute their start up procedures (which should not imply interactive behavior). After startup list is finished, any deferred startup actions are executed, which you can add using the methodaddDeferredStartupAction: method.  "
"PharoUser","A PharoUser is a simple object with a username and an avatar.It also works as a factory to keep already generated instances"
"SmallDictionary","RBSmallDictionary is a special dictionary optimized for small collections. In addition to the normal dictionary protocol, it also supports an #empty message which ""empties"" the collection but may hang on to the original elements (so it could collect garbage). Without #empty we would either need to create a new dictionary or explicitly remove everything from the dictionary. Both of these take more time and #empty.Instance Variables:keys <Array of: Object> array of keys (we don't use Associations for our key value pairs)size <Integer> the size of the dictionaryvalues <Array of: Object> array of our values"
"SUnitExtensionsTest",""
"Stopwatch","A Stopwatch maintains a collection of timespans."
"MetacelloMethodSpec",""
"MetacelloVersionMethodSpec",""
"NBByteArrayPtr",""
"EllipseMidpointTracer",""
"MetacelloMCProject",""
"MCVersionDependency",""
"SearchMorph","I am a searchfield with a dropdown for the history. It is a minor extension to the EditableDropListMorph managing the search history directly in the morph. Typical use-case:	^ SearchMorph new		model: self;		setIndexSelector: #classSearchAccept:; ""sends the search result to the model""		searchList: self class classSearchList; ""sent on creation to get the initial search list""		yourself		"
"SerialPort","This class supports a simple interface to the serial ports of the underlying platform, if it supports serial ports. The mapping of port numbers to hardware ports is platform specific, but typically follows platform ordering conventions. For example, on the Macintosh, port 0 is the modem port and port 1 is the printer port, since in the programmers documentation these ports are referred to as ports A and B."
"ClassListExample","ClassListExample new openOn: Object"
"RBReplaceRule","RBReplaceRule is the abstract superclass of all of the transforming rules. The rules change the source code by replacing the node that matches the rule. Subclasses implement different strategies for this replacement.Subclasses must implement the following messages:	matching		foundMatchFor:Instance Variables:	verificationBlock	<BlockClosure>	Is evaluated with the matching node. This allows for further verification of a match beyond simple tree matching."
"WeakValueDictionary","I am a dictionary holding only weakly on my values. Clients may expect to get a nil value for any object they request."
"CustomQuestionDialogWindow","QuestionDialog supporting custom text/buttons for yes/no choices."
"Duration","I represent a duration of time. I have nanosecond precision"
"CharacterSetComplement","CharacterSetComplement is a space efficient implementation of (CharacterSet complement) taking care of WideCharacter (code > 255)However, it will maintain a byteArrayMap for character <= 255 in a cache keeping instance variables:	absent <CharacterSet> contains character that are not in the set (i.e. my complement)	byteArrayMapCache <ByteArray | nil> cache this information because it has to be used in tight loops where efficiency matters"
"FreeTypeFileInfo",""
"FLHeader","An instance of FLHeader is serialized together with the orignal object graph to serialize. This header is useful to:1) Attach additional state or metadata associated to the graph being serialized.2) Attach pre and post materialization actions"
"RBRemovePoolVariableChange",""
"RBWhileTrueRule",""
"Loader","I'm an abstract class which collect some infos about package and system (versions, dirty).#currentChangedPackages instance method and #currentMajorVersionNumber class are missing and provided by my wellknown subclass ScriptLoader (see ScriptLoader comment).Stef: This is a class that was extracted from scriptLoader because I want to slowly get in place a loader infrastructure based on Metacello."
"CursorWithAlpha","A 32-bit ARGB Cursor of arbitrary extent (some platforms may limit the size). Compositing assumes alpha is pre-multiplied."
"MCPackageModified","An MCPackageModified is raised when a MCPackage is modified"
"RBIfTrueReturnsRule",""
"FLError","I represent an error produced during Fuel operation."
"RBLiteralArrayNode","A RBLiteralArrayNode is an AST node that represents literal arrays and literal byte arrays.Instance Variables	contents: <Array of: RBLiteralNode> literal nodes of the array	isByteArray: <Boolean> if the receiver is a literal byte array	start: <Integer | nil> source position of #( or #[	stop: <Integer | nil> source position of ) or ]"
"BadHasher","I am an object that doesn't always hash correctly.  I am used for testing the HashTester."
"GroupsHolder","A GroupsHolder is a simple object which manage a collection of groups"
"RxMatchOptimizer","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A match start optimizer, handy for searching a string. Takes a regex syntax tree and sets itself up so that prefix characters or matcher states that cannot start a match are later recognized with #canStartMatch:in: method.Used by RxMatcher, but can be used by other matchers (if implemented) as well."
"MCChangeSelector",""
"InstructionPrinter","My instances can print the object code of a CompiledMethod in symbolic format. They print into an instance variable, stream, and uses oldPC to determine how many bytes to print in the listing. The variable method  is used to hold the method being printed."
"InputEventSensorSystemSettings",""
"HistoryNodeTest",""
"MockTranscript",""
"BytecodeEncoder","I am an abstract superclass for different bytecode set encoders.  Subclasses inherit the literal management of Encoder and encapsulate the mapping of opcodes to specific bytecodes."
"NBMemoryPage",""
"NullStream","I am a stream that does nothing i.e. generates and consumes an infinite number of elements (NullObject pattern). I can be used as an equivalent of /dev/null (for example a logging in off mode) or for performance benchmarks."
"TextMethodLink",""
"NBWeakFinalizerItem",""
"NautilusMonticello","A NautilusMonticello is a class used to handle monticello integration into Nautilus by creating the menu entries"
"LongMessageDialogWindow","Dialog window displaying a message with a single OK button. Escape/return will close. Icon is a themed information icon.Handles long messages through use of a text editor with potential for scrolling."
"ChangeList","A ChangeList represents a list of changed methods that reside on a file in fileOut format.  The classes and methods in my list are not necessarily in this image!  Used as the model when changes are recovered.It holds three lists:	changeList - a list of ChangeRecords	list - a list of one-line printable headers	listSelections - a list of Booleans (true = selected, false = not selected) multiple OK.	listIndex Items that are removed (removeDoits, remove an item) are removed from all three lists.Most recently clicked item is the one showing in the bottom pane."
"MethodDictionary","I'm a special dictionary holding methods. I am just like a normal Dictionary, except that I am implemented differently.  Each Class has an instance of MethodDictionary to hold the correspondence between selectors (names of methods) and methods themselves.In a normal Dictionary, the instance variable 'array' holds an array of Associations.  Since there are thousands of methods in the system, these Associations waste space.  Each MethodDictionary is a variable object, with the list of keys (selector Symbols) in the variable part of the instance.  The variable 'array' holds the values, which are CompiledMethods."
"NullCanvas","A canvas which ignores all drawing commands."
"SimplestClassListExample","SimplestClassListExample new openOn: Object"
"RBRefactoryClassChange",""
"PluggableTextEditorMorph","Multi-line text editor with support for accepting on both each change and/or when keyboard focus changes. Also supports custom selection colour and clickable highlights.Used for plain text, no styling, no code menu etc.to see later uses: TEnableOnHaloMenu"
"BorderStyle","See BorderedMorphBorderedMorh new borderStyle: (BorderStyle inset width: 2); openInWorld."
"NECTestSuperClass","I'm only for SUnit TestCases."
"FLGlobalEnvironmentTest",""
"SqNumberParser","SqNumberParser is a NumberParser specialized in reading Number with Squeak syntax.Squeak syntax follows general Smalltalk-80 conventions for integer and floats, extended with scaled decimals.Noticeable differences with st-80 and other Smalltalks are:- allow both 2r-10 and -2r10 and even -2r-10- allow floating point with radix 2r10.011- do not allow single s without following digits as ScaledDecimal- handle special case of Float (NaN Infinity and -0.0 as negative zero)"
"ErrorWhileCreationException","An ErrorWhileCreationException is an exception raised when the creation of a new issue fails"
"RBRenameTemporaryRefactoring",""
"ObjectStringConverter","Generic object<->string converter for use with PluggableTextFieldMorph.Optional regex matching for validation.Optional transform blocks for each conversion direction."
"SelectPackageBrowser","To select packages."
"RGSliceTest",""
"MCVersionNotification",""
"RBMacSpellChecker","A native spell checker of the Apple OS X platform. Source code is ripped from JMMMacSpelling.1.cs by John McIntosh <johnmci@smalltalkconsulting.com>."
"EncryptedMultiDisplayScanner","An EncryptedMultiDisplayScanner is a MultiDisplayScanner displaying stars instead of characters (for password by example)"
"RBRefactoringManager",""
"TimespanDoSpanAYearTest","I am one of several Sunit test Cases intentended to provide complete coverage for the Chronology set of classes as part of the external testing. See DateAndTimeEpochTestCase for a complete list. tlk.My fixtures include a Timespan that crosses over a year boundary:aDate = December 25, 2004, midnightaDuration = 91 daysaTimeSpan= 91 days, starting December 25, 2004, midnight"
"MCMethodDefinitionTest",""
"RBRefactoryChangeManager",""
"GoferReference","A GoferReference is an abstract superclass for various kinds of references to Monticello packages and versions."
"GoferOperation",""
"CommandLineArgumentsTest","That class tests the API given by AbstractUserInput. Since that class is obviously abstract, it can't be instantiated, the tests are running on CommandLine (which inherits from AbstractUserInput)"
"TestCaseEnded","This event is announced when testing a test case ends."
"RGMethodDefinitionTest",""
"BreakpointManager","This class manages methods that include breakpoints.It has several class methods to install and uninstall breakpoints.Evaluating ""BreakpointManager clear"" will remove all installed breakpoints in the system.Known issues:- currently, only break-on-entry type of breakpoints are supported- uninstalling the breakpoint doesn't auto-update other browsers- uninstalling a breakpoint while debugging should restart-simulate the current methodErnest Micklei, 2002Send comments to emicklei@philemonworks.com"
"RBSwapMethodRefactoring","Move a method from the class to the instance side, or vice versa. Normally this is not considered to be a refactoring."
"RBUsesAddRule",""
"ZnLogSupport","I am ZnLogSupport, I help HTTP servers and clients to manage ZnLogEvents.To use the logging framework, instanciate your own log support: 	log := ZnLogSupport new.and use it to log messages:	log info: 'Started server'.	log debug: [ 'Created ', someComplexObject printString ].To view the log, add a log listener:	log addListener: ZnTranscriptLogger new.	Make sure to enable your log support as it is off by default:	log enabled: true.Part of Zinc HTTP Components."
"RGMonticelloTest",""
"WeakIdentityKeyDictionaryTest",""
"RBNotEnvironment",""
"TraitMethodDescription","Used by TraitComposition to encapsulates a collection of methods for one particular selector when querying for changes. According to the number and kind of those methods a provided method exists, there is a conflict or there are no provided nor conflicting methods at all. I provide the interface to query for those situations, e.g., effectiveMethod returns the provided method or the conflict marker method."
"ShortRunArrayTest","SUnit Test for ShortRunArray"
"ParseNodeEnumerator","ParseNodeEnumerator implements ParseNode>>nodesDo:.  It can be used to enumerate an entire tree via	aParseNode accept: (ParseNodeEnumerator ofBlock: aBlock)or selectively, excluding the node and subnodes for which selectBlock answers false, via	aParseNode accept: (ParseNodeEnumerator							ofBlock: aBlock							select: selectBlock)Here's a doIt that generates and compiles the visiting methods:self superclass selectors do:	[:s|	self compile: (String streamContents:		[:str| | arg |		arg := 'a', (s allButFirst: 5) allButLast.		str nextPutAll: s, ' ', arg; crtab;			nextPutAll: '(theSelectBlock isNil or: [theSelectBlock value: '; nextPutAll: arg; nextPutAll: ']) ifFalse:'; crtab;			tab: 2; nextPutAll: '[^nil].'; crtab;			nextPutAll: 'theBlock value: '; nextPutAll: arg; nextPut: $.; crtab;			nextPutAll: '^super '; nextPutAll: s, ' ', arg])]"
"TextFieldExample","A TextFieldExample is a simple example of how to use TextFields."
"RemoteTempVectorNode","I am a node for a vector of remote temps, created to share temps between closures when those temps are written to in closures other than their defining ones."
"PluggableTextMorphWithLimits","I have a warningLimit ( 350 by default ) and an alertLimit ( 2* warningLimit by default ), and the number of characters of the text displayed is counted ( without space, tabs, cr etc).If my text size is below the warning limit, the background is white ( or the default color ), if it is between warningLimit and alertLimit, the background turns more and more yellow, and if it's above the alertLimit, the background turns orange :)Test it with: self example.I am designed for editing method source code !"
"DecompileMethodConverter","A DecompileMessageConverter is a wrapper wich display the decompile source code of the provided message"
"UpdatingMenuItemMorph","A menu item whose textual label and whose enablement are updatable.  The wordingProvider provides the current wording, upon being being sent the wordingSelector.The item can also dynamically update whether or not it should be enabled; to do this, give it an enablementSelector, which is also sent to the wordingProvider.."
"PointArrayTest","SUnit Test for PointArray"
"TabContainerMorph","A TabContainerMorph is a morph (which should be pluggable soon) which handle a first bar for tabs button and a container which is used to display the morph corresponding to the selected tab"
"GoferConstraintReference","A GoferPackageReference refers to the latest version of a Monticello package satisfying an additional constraint."
"SystemVersion","I am responsible for maintaining what version of Squeak and the VM is running.  I also track all of the update items that have been included in the image.I'm invoked at auto start to get the latest plugins, etc.Some queries are	SystemVersion current major	SystemVersion current minor	SystemVersion current suffix	SystemVersion current	highestUpdate"
"NBExternalEnumerationType",""
"DashedBorder","Border style supporting dashed lines of configurable patterns and colours."
"ZnCurrentServer","I am ZnSignalProgress.I am a DynamicVariable and a ProcessSpecificVariable.I hold a reference to the current ZnServer instance during HTTP processing, during the dynamic scope of #handleRequest:"
"HaloSpec","Sets spec's for how handles are layed out in a halo."
"WikiStyleHelpBuilderTest",""
"RBUnnecessaryAssignmentRule",""
"Base64MimeConverter","This class encodes and decodes data in Base64 format.  This is MIME encoding.  We translate a whole stream at once, taking a Stream as input and giving one as output.  Returns a whole stream for the caller to use.           0 A            17 R            34 i            51 z           1 B            18 S            35 j            52 0           2 C            19 T            36 k            53 1           3 D            20 U            37 l            54 2           4 E            21 V            38 m            55 3           5 F            22 W            39 n            56 4           6 G            23 X            40 o            57 5           7 H            24 Y            41 p            58 6           8 I            25 Z            42 q            59 7           9 J            26 a            43 r            60 8          10 K            27 b            44 s            61 9          11 L            28 c            45 t            62 +          12 M            29 d            46 u            63 /          13 N            30 e            47 v          14 O            31 f            48 w         (pad) =          15 P            32 g            49 x          16 Q            33 h            50 yOutbound: bytes are broken into 6 bit chunks, and the 0-63 value is converted to a character.  3 data bytes go into 4 characters.Inbound: Characters are translated in to 0-63 values and shifted into 8 bit bytes.(See: N. Borenstein, Bellcore, N. Freed, Innosoft, Network Working Group, Request for Comments: RFC 1521, September 1993, MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies. Sec 6.2)By Ted Kaehler, based on Tim Olson's Base64Filter."
"RBBrowserEnvironmentWrapper",""
"HelpIconsTest",""
"PathShape","I represent a model of an open sequence of connected points that can be queried forenclosing bounds and whether a point lies along any segment. I am typically used for drawing with a Canvas.ps := PathShape new        addVertex: 0@0;        addVertex: 30@30;        addVertex: 50@10.        self assert: (ps containsPoint: 24@24).self assert: (ps containsPoint: 40@30) not.Transcript show: ps calculatedBounds asString; cr."
"RBAbstractClassVariableRefactoring",""
"ConfigurationCommandLineHandler","Usage: config [--help] <repository url> [<configuration>] [--install[=<version>]] [--group=<group>] [--username=<username>] [--password=<password>]	--help              show this help message	<repository url>    A Monticello repository name 	<configuration>     A valid Metacello Configuration name	<version>           A valid version for the given configuration	<group>             A valid Metacello group name (or comma-separated list of names)	<username>          An optional username to access the configuration's repository	<password>          An optional password to access the configuration's repository	Examples:	# display this help message	$PharoVM My.image config		# list all configurations of a repository	$PharoVM My.image config $MC_REPOS_URL		# list all the available versions of a confgurtation	$PharoVM My.image config $MC_REPOS_URL ConfigurationOfFoo		# install the stable version	$PharoVM My.image config $MC_REPOS_URL ConfigurationOfFoo --install		#install a specific version '1.5'	$PharoVM My.image config $MC_REPOS_URL ConfigurationOfFoo --install=1.5		#install a specific version '1.5' and only a specific group 'Tests'	$PharoVM My.image config $MC_REPOS_URL ConfigurationOfFoo --install=1.5 --group=Tests	#install 2 groups	$PharoVM My.image config $MC_REPOS_URL ConfigurationOfFoo --install=1.5 --group=Tests,Core"
"MouseMoveEvent",""
"KMShortcutDeclaration",""
"SettingNode","A SettingTreeNode is used by a SettingCollector as a node for setting trees. Built trees can be viewed by a SettingBrowserInstance Variables	contents:		<Collection of SettingTreeNode>	parentNode:		<SettingTreeNode or nil>contents	- the childrenparentNode	- the parent or nil if the node is a root"
"MOPTestClassC",""
"AbstractInstructionTests","Use for a test: ClosureCompilerTest>>#closureCases"
"AbstractMethodWidget","AbstractMethodWidget is an abstraction describing a widget used to manage methods"
"MemoryFileSystemEntry","I am an abstract file system entry for a memory file system.My subclasses should specialize on the kind of file they are."
"StopwatchTest",""
"SHMethodEditingMode","This example shows how to use shout for method editing. Try it with:SHMethodEditingMode new openFor method editing, you need to provide a class to the styler. When a class is given, the styler is automatically turned into a method editing mode.The styler is then able to style the code according to the class bindings (instance variables names, shared pool...)See #shoutAboutToStyle.   - First, the class is given to the styler by sending #classOrMetaClass: to the view with the class as argument.  - Finally, in this example, #shoutAboutToStyle returns true because the code is always to be styled.Instance Variables	className:		<String>	code:		<String>className	- The class name for the stylercode	- the code which is entered into the editor  "
"MetacelloCleanLoadAndTestsNotification",""
"ZipEncoderTree","ZipEncoderTree represents a huffman tree for encoding ZipStreams.Instance variables:	bitLengths	<WordArray>	 - Bit lengths of each generated code	codes		<WordArray>	 - Codes for each value	maxCode		<Integer>	- Maximum value with non-zero frequency"
"SyntaxError","I represent syntax error report for syntax errors encountered when filing in class descriptions from a non-interactive source such as an external file. As a StringHolder, the string to be viewed is the method code or expression containing the error.The user may fix the error and accept the method to continue the fileIn."
"WeakValueAssociation","I am a lookup key (acting like an association but) holding only weakly on my value."
"RxParser","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--The regular expression parser. Translates a regular expression read from a stream into a parse tree. ('accessing' protocol). The tree can later be passed to a matcher initialization method.  All other classes in this category implement the tree. Refer to their comments for any details.Instance variables:	input		<Stream> A stream with the regular expression being parsed.	lookahead	<Character>"
"GroupsManager","A GroupsManager should be a singleton. It manages all the groups of the system, to be able to share groups among tools"
"MetacelloMemberListSpec",""
"RBReturnNode","RBReturnNode is an AST node that represents a return expression.Instance Variables:	return	<Integer>	the position of the ^ character	value	<RBValueNode>	the value that is being returned"
"RBRenameInstanceVariableChange",""
"NECStringSortingTest",""
"UnixResolver","I am an expert on Unix filesystem conventions. I resolve origins according to these conventions."
"ChangeSorterModel","A ChangeSorterModel is a model used by Change Sorter UIs for computation"
"PackageOrganizer",""
"FileListGrid",""
"FLMaterializer","I am a binary object materializer. See an example of use in FLSerializer's documentation."
"RBMethodSourceContainsLinefeedsRule","See my #rationale."
"ZnMultiThreadedServer","I am ZnMultiThreadedServer.I inherit most features from ZnSingleThreadedServer.ZnMultiThreadedServer startDefaultOn: 1701.ZnMultiThreadedServer default authenticator: (ZnBasicAuthenticator username: 'foo' password: 'secret').ZnClient get: 'http://localhost:1701' username: 'foo' password: 'secret'.I am multi threaded, I fork a new process for each incoming request.I try to keep connections alive in each process.Part of Zinc HTTP Components."
"TabGroupMorph","Organises a set of pages sharing the same space and selected through the use of tabs along the top."
"RBConsistencyCheckRule",""
"DynamicMessageImplementorTest",""
"TestReviver","I am a UI for test failures which have been serialized as fuel files. You can:* materialize the failed test process to debug* browse the test method.self open. "
"MCDependentsWrapper",""
"FLProcessSerializationTest",""
"OptimizedBlockLocalTempReadBeforeWrittenVisitor","Answer the set of temporary variables that are read before they are written in the visited parse tree.  Used by the compiler to detect those block-local temporaries of blocks in optimized loops that require nilling to prevent a value from a previous iteration persisting into a subsequent one."
"FLDictionaryCollectionCluster","A FLDictionaryCollectionCluster is a special optional cluster that rather than using the default (variable object) serialization, uses #keysAndValuesDo: to iterate objects and #add: during materialization. This way we avoid analyzing/serializing lots of nil. Also, the rehash is not needed. So far we use it for Dictionary, IdentityDictionary and MethodDictionary."
"RBRenameMethodTest",""
"UIThemeWatery","An OSX-style UI theme. Do UIThemeWatery beCurrent to use."
"MCMockRPackage","This class should be used instead of MCMockPackageInfo in the monticello tests"
"NBFloat32",""
"AJx86InstructionDescription","name:		an instruction mnemonic	group:		an instruction encoding group	o1Flags:		operand1 flags	o2Flags:		operand2 flags	opCode1:		opcode 1	opCode2:		opcode 2	opCodeR:		code for inlining in MR field as registerOperand flags:bit:	 9   |  8   |  7    |   6  |  5    |   4    |  3  |  2   |  1  | 0 |______________________________________________      *86| *64 | XMM | MM | IMM | MEM | 64 | 32 | 16 | 8|	- *64 , set on o1Flags, meaning that instruction available only for x64 processor mode- *86 , set on o1Flags, meaning that instruction available only for x86 processor mode"
"JobStartNotification","A JobStartNotification is the first notification raised when a job start."
"TextHighlightByBounds","Definition of a clickable highlighted range of text with optional borders."
"NBTString","- depending on context, acts either as char* or wchar* string"
"AJRoutineEpilogue",""
"FT2Face","Do not rearrange these fields!New fields should go at the end, because the plugin has to know about these indexes.ByteArray representing a pointer to the malloc'd FT_Face struct:handleCopied from the FT_Face struct on creation:numFaces faceIndex faceFlags styleFlags numGlyphs familyName styleName numFixedSizes availableSizes numCharmaps charmapsCopied on creation, but only relevant to scalable outlines:bbox unitsPerEm ascender descender height maxAdvanceWidth maxAdvanceHeight underlinePosition underlineThickness Working memory:glyph -- FT2GlyphSlot, set by loadGlyph or loadCharsize -- the active size, set by activateSize, used by loadGlyph, getKerning, etc.charmap -- set by setCharmap"
"ManifestManifestCore",""
"NECEntry","I represent a completion entry that is management by a ECModel and shown in the ECMenuMorph as a menu entry."
"ProcessSpecificVariable","My subclasses (not instances of them) keep state specific to the current process.There are two kinds of process-specific variables: process-local (state availablefor read and write in all methods inside the process), and dynamic variables(implementing dynamic scope)."
"RBLiteralScope",""
"CollectVisitor","I am a visitor that collects objects from the nodes I visit. I take a block similar to those passed to Collection>>collect:. I evaluate the block with DirectoryEntries for the nodes I visit, and collect the objects answered into an array.I can use any guide, and the objects in the array I produce will reflect the order imposed by the guide."
"TimeProfiler","TimeProfiler is a graphical front end of MessageTally. It gives nice facilities to navigate and browse a profile.Use examples:TimeProfiler new openTimeProfiler new openOnBlock: [SimpleGridExample new open]TimeProfiler new openOnBlock: [ClassTreeExample new openOn: Object] MessageTally spyAllOn: [ClassTreeExample new openOn: Object]"
"NautilusMCBindings","A NautilusMCBindings is a class which basically kept bindings between RPackages and MCPackage"
"NOCMenuMorph","I am a morphic item used to show ocompletion entries. "
"RelativePath","I represent a relative path (a position starting from Path workingDirectory)"
"UnreferencedSharedPool","Just a class for testing"
"MCDataStream","This is the save-to-disk facility. A DataStream can store one or more objects in a persistent form.To handle objects with sharing and cycles, you must use aReferenceStream instead of a DataStream.  (Or SmartRefStream.)  ReferenceStream is typicallyfaster and produces smaller files because it doesn't repeatedly write the same Symbols.Here is the way to use DataStream and ReferenceStream:	rr := ReferenceStream fileNamed: 'test.obj'.	rr nextPut: <your object>.	rr close.To get it back:	rr := ReferenceStream fileNamed: 'test.obj'.	<your object> := rr next.	rr close.Each object to be stored has two opportunities to control what gets stored.  On the high level, objectToStoreOnDataStream allows you to substitute another object on the way out.  The low level hook is storeDataOn:. The read-in counterparts to these messages are comeFullyUpOnReload and (class) readDataFrom:size:. See these methods for more information about externalizing and internalizing.NOTE: A DataStream should be treated as a write-stream for writing.  It is a read-stream for reading.  It is not a ReadWriteStream."
"ClassQueryTest",""
"TimeMeasuringTest",""
"InternetConfiguration","I read several parameters related to the default web browser network preferences, through the InternetConfigPlugin VM module.For example, to get the default path where downloaded files should be placed:InternetConfiguration getDownloadPath.Seems to work only on MacOSX"
"DialogGroupAdderUI",""
"RBUnwindBlocksRule",""
"ValueChanged","A ValueChanged is an announcement raised when a value of a NewValueHolder is changed"
"PasswordInitializationDialogWindow","A PasswordInitializationDialogWindow is a dialog window asking twice for the same pssword to confirm it.Used to set a password and ensure the entered value"
"MetacelloCommonMCSpecLoader",""
"Clipboard","The Clipboard class is the abstract superclass for the concrete platform specific clipboard. The legacy clipboard support using the VM supplied primitives is implemented by Clipboard/ExternalClipboard.The Clipboard implements a basic buffering scheme for text. The currently selected text is also exported to the OS so that text can be copied from and to other applications. Commonly only a single instance is used (the default clipboard) but applications are free to use other than the default clipboard if necessary."
"MCStReaderTest",""
"UUIDTest",""
"RBAddClassTest",""
"ByteCodeMethodConverter","A ByteCodeMessageConverter is a wrapper wich display the bytecode of the provided message"
"ZipArchiveMember","Subinstances of me are members in a ZipArchive.They represent different data sources:	* ZipDirectoryMember -- a directory to be added to a zip file	* ZipFileMember -- a file or directory that is already in a zip file	* ZipNewFilemember -- a file that is to be added to a zip file	* ZipStringMember -- a string that is to be added to a zip fileThey can write their data to another stream either copying, compressing,or decompressing as desired."
"FLLightGlobalMapper","I map classes, traits, and global objects that belong to Smalltalk dictionary. I collaborate in serialization default behavior. For example, the global Transcript as well as any class in the image, are mapped by me."
"RBToDoRule",""
"MenuRegistrationExample","I'm here to show you how to use the menu registration. See class side methods and try it with:----------------(PragmaMenuBuilder pragmaKeyword: 'worldMenuExample' model: nil) menu popUpInWorld----------------"
"IdentityMorphTreeListManager","An IdentityMorphTreeListManager is a MorphTreeListManager which always check for identity between items"
"GoferBrowseLocalChanges",""
"WideSymbol","This class represents the symbols containing 32bit characters."
"ListComposableModelTest","testing ListComposableModel"
"FLSimpleStack","FLSimpleStack is a simple stack used in Fuel to avoid a recursion while traversing the graph to serialize. While analizing the content of an object (inst vars) we can encounter simple objects (direct string representation) or complex objects (composite). In the latter case we start analizing those instVars.So... Imagine object X with two instVars Y and Z. Imagine the method of the traverse is called #analye:.  So you do #analize: X.  Then, in such method you check whether X has regular pointers to regular objects, and if true, you analize them. So in this case you would send #analyze: Y and #analize: Z, generating the recursion. Right ?  Notice that the time between analyse: Y and analyse: Z is dependent on the graph that is attached to Y. Y can have objects that have further objects etc. So leaving X aside, Y can be the first object to serialize and Z the last.With this FLSimpleStack, instead of sending #analyze: Y and #analize: Z  what Fuel does is just to do a push on a stack:   #push: Y  and #push: Z. And then we are done with X, so we pop from the stack and we continue with the next object (at some point in the future we will pop Y and Z) When there are no more objects in the stack it means we are done. "
"TextEditorDialogWindow","Multi-line text entry dialog."
"HashFunction",""
"Week","I represent a week."
"ZnLineReader","I am ZnLineReader and I help reading CRLF terminated lines from a stream.I can work on ascii and binary streams doing conversions as necessary.I limit lines to a maximum length.I work with a reusable buffer.Part of Zinc HTTP Components."
"FLPositive32SmallIntegerCluster",""
"NBExternalStructureType",""
"MCModification","A MCModification represents the operation to modify an entity to a snapshot. "
"BoundedGradientFillStyle","Gradient fillstyle that draws with optional extent."
"BMPReadWriterTest",""
"ExternalSemaphoreTable","By John M McIntosh johnmci@smalltalkconsulting.comThis class was written to mange the external semaphore table. When I was writing a Socket test server I discovered various race conditions on the access to the externalSemaphore table. This new class uses class side methods to restrict access using two mutex semaphores, one for removal and one for additions to the table. It seemed cleaner to deligate the reponsibility here versus adding more code and another class variable to SystemDictionary Note that in Smalltalk recreateSpecialObjectsArray we still directly play with the table.Henrik Sperre JohansenThe name is somewhat of a misnomer; the table can be used for any objects, not just semaphores.That is its main usage though, so a split which deals with semaphores and other external objects differently (In the same underlying table) is not currently worth it.Therefore, while in general not all users will care if the table is above a certain size, we still guard  against adding more objects than the limit above which external signals would be lost (on some VMs.)"
"TelnetProtocolError","Abstract super class for exceptions signalled by clients based on the telnet protocol."
"GoferRecompile",""
"ZnSecureServer","I am ZnSecureServer, an implementation of an HTTPS server.I am a ZnMultiThreadedServer(ZnSecureServer on: 1443)	certificate: '/home/sven/ssl/key-cert.pem';	logToTranscript;	start;	yourself.	Disclaimer: this is an experimental proof of concept."
"MetacelloAddMemberSpec",""
"AbstractMethodReferenceConverter",""
"RBRemoveInstanceVariableChange",""
"ZnSignalProgress","I am ZnSignalProgress.I am a DynamicVariable and a ProcessSpecificVariable.I can be used to indicate that Zn related code down the call stack has to signal HTTPProgress, for example:ZnSignalProgress 	value: true 	during: [ ^ ZnClient new get: 'http://zn.stfx.eu/zn/small.html' ]"
"TelnetProtocolClient","Abstract super class for protocol clients based on the generic telnet protocol ""<response code> <response>""Structure:	responseCode	the numerical (integer) value of the last response code"
"BasicCodeLoaderTest",""
"MetacelloConfigurationBrowserToolbar",""
"FileSystemResolver","I am an abstract superclass for objects that can resolve origins into references. Such objects use the Chain of Responsibility pattern, and when unable to resolve a particular origin, delegate that resolution request to the next resolver in the list.next	The next resolver in the list, or nil"
"ProtocolRemoved","This class is not used, but should be used when we hook into the addition and removal of protocols. Right now, we only get ClassReorganizedAnnouncement"
"Latin1","This class represents the domestic character encoding called ISO-8859-1, also known as Latin-1 used for Most of the Western European Languages."
"MCSubDirectoryRepository","A MCDirectoryRepository that looks in subdirectories too."
"RPackageCreated","I am a public announcement sent when a new RPackage is created"
"StandardSystemFontsTest",""
"MetacelloProject",""
"UserOfFooSharedPool","I am an sunit test for SystemNavigation."
"UndefinedVariable",""
"KMSingleKeyShortcut",""
"POP3LoginError","Exception for signaling POP3 login failures."
"MCDiffyVersion",""
"RBTemporaryBinding",""
"PseudoClass","I provide an inert model of a Class, used by FileContentsBrowser to manipulate filedout code. Instead of a method dictionary or selectors onto CompiledMethods, I have a dictionary (""source"") of selectors onto ChangeRecords, which were, in the case of FileContentsBrowser, parsed from a source or change set file."
"PolymorphSystemSettings","I provide settings for Morphic appearance (theme, fonts, colors, ...) that can be found and changed in the Settings browser."
"WindowOpened",""
"TestCaseStarted","This event is announced when testing a test case starts."
"ColorSelectorDialogWindow","Standard dialog for selecting a colour by HSVA colour selector, picking from the screen or editing of values."
"InstructionClientTest","This is the unit test for the class InstructionClient. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"RGElementDefinition","RGElementDefinition is the abstract class for representing elements of a class-alike definition (i.e., methods, variables, comment).parent holds the RGClassDefinition or RGMetaclassDefinition defining this element.		Now a RingEntityDefinition offers two APIs: one that is generic and works for all the source code entities and this is the one we just presented: parent, parentName and realParent. Having such interface is important to build generic tools that could manipulate any entities in a polymorphic way (yes no isKindOf: everywhere).In addition, a ring method definition offers a specific interface that should only be used when you know that you are solely manipulatespecific entity such as class element: method definition, class comment, and variables. Here is the equivalence table	realParent 				realClass	parent					ringClass	parentName			className	For example for a methodDefinition we will have the following:GENERIC API------------------* To access the ring class definition name, use parentName	aRGMethodDefinition parentName	Example:	(Point>>#dist:) asRingDefinition parentName		->  #Point		* If you have a complete model where classes and methods are ring definition, to access the ring class definition , use parent	aRGMethodDefinition parent	Example:	aRGMethodDefinition(Point>>#dist:) parent		->  aRGClassDefinition(Point)		* If you want to access the smalltalk class that contains the compiledMethod that is represented by a ringMethodDefinition, use realParent	aRGMethodDefinition realParent	Example:	(Point>>#dist:) asRingDefinition realParent		->  Point		CLASS Element specific API------------------------------------------* The message class returns the class of the object :). Yes as you see we could not use class and className because class is already used to refer to the class of the object.Example:	(Point>>#dist:) asRingDefinition class		->  RingMethodDefinition		* The message className returns the name of the ring class defining the reingMethodDefinition.Example:	(Point>>#dist:) asRingDefinition className		->  #Point				* If you have a complete model where classes and methods are ring definition, to access the ring class definition , use parent	aRGMethodDefinition ringClass	Example:	aRGMethodDefinition(Point>>#dist:) ringClass		->  aRGClassDefinition(Point)				* If you want to access the smalltalk class that contains the compiledMethod that is represented by a ringMethodDefinition, use realClass	aRGMethodDefinition realClass	Example:	(Point>>#dist:) asRingDefinition realClass		->  Point"
"TestAnnouncer","I am used to externally notify that a test has been run (or a test suite)"
"AbstractObjectsAsMethod",""
"MetacelloConfigurationBrowserPane",""
"KMStorage",""
"SelectorException","I am SelectorException, an abstract superclass for exceptions related to a selector."
"FreeTypeSystemSettings",""
"LimitingLineStreamWrapper","I'm a wrapper for a stream optimized for line-by-line access using #nextLine. My instances can be nested.I read one line ahead. Reading terminates when the stream ends, or if the limitingBlock evaluated with the line answers true. To skip the delimiting line for further reading use #skipThisLine.Character-based reading (#next) is permitted, too. Send #updatePosition when switching from line-based reading.See examples at the class side.--bf 2/19/1999 12:52"
"RBTemporaryToInstanceVariableTest",""
"FillStyleTest","A FillStyleTest is a test class for testing the behavior of FillStyle"
"HaloMorph","This morph provides a halo of handles for its target morph. Dragging, duplicating, rotating, and resizing to be done by mousing down on the appropriate handle. There are also handles for help and for a menu of infrequently used operations."
"NBUInt8","I responsible for marshalling 		unsigned 8-bit integer type values."
"ZnUrl","I am ZnUrl, an implementation of an interpreted URL/URI.URLs are an element used in describing resources, more specifically to identify them.I consist of the following parts:  - scheme - like #http, #https, #ws, #wws, #file or nil  - host - hostname string or nil  - port - port integer or nil  - segments - collection of path segments, ends with #/ for directories  - query - query dictionary or nil  - fragment - fragment string or nil  - username - username string or nil  - password - password string or nilThe syntax of my external representation informally looks like this  scheme://username:password@host:port/segments?query#fragmentI am most often created by parsing my external representation using either my #fromString: class method or by sending the #asZnUrl convenience method to a String. Using #asZnUrl helps in accepting both Strings and ZnUrls arguments.  ZnUrl fromString: 'http://www.google.com/search?q=Smalltalk'.I can also be constucted programmatically.  ZnUrl new     scheme: #https;     host: 'encrypted.google.com';     addPathSegment: 'search';     queryAt: 'q' put: 'Smalltalk';     yourself.  My components can be manipulated destructively. Here is an example:  ('http://www.google.com/?one=1&two=2' asZnUrl)    queryAt: 'three' put: '3';    queryRemoveKey: 'one';    yourself.Some characters of parts of a URL are illegal because they would interfere with the syntax and further processing and thus have to be encoded. The methods in accessing protocols do not do any encoding, those in parsing and printing do. Here is an example:  ('http://www.google.com' asZnUrl)    addPathSegment: 'some encoding here';    queryAt: 'and some encoding' put: 'here, too';    yourselfMy parser is somewhat forgiving and accepts some unencoded URLs as well, like most browsers would.  'http://www.example.com:8888/a path?q=a, b, c' asZnUrl.I can parse in the context of a default scheme, like a browser would do.  ZnUrl fromString: 'www.example.com' defaultScheme: #httpGiven a scheme, I know its default port, try #portOrDefault.A path defaults to what is commonly referred to as slash, test with #isSlash. Paths are most often (but don't have to be) interpreted as filesystem paths. To support this, I have #isFile and #isDirectory tests and #file and #directory accessors.I have some support to handle one URL in the context of another one, this is also known as a relative URL in the context of an absolute URL. Refer to #isAbsolute, #isRelative and #inContextOf:  '/folder/file.txt' asZnUrl inContextOf: ('http://fileserver.example.net:4400' asZnUrl).Sometimes, the combination of my host and port are referred to as authority, see #authority.URL/URI/URN (Uniform/Universal Resource Locator/Identifier/Name) are closely related and can be and are used as synonyms is many contexts. Refer to http://en.wikipedia.org/wiki/Url for more information.There is a convenience method #retrieveContents to download the resource a ZnUrl points to,  'http://zn.stfx.eu/zn/numbers.txt' asZnUrl retrieveContents.  Part of Zinc HTTP Components."
"ColorChooserMorph","ColorPresenter that opens a colour selector when clicked."
"RBParseTreeRewriter","ParseTreeRewriter walks over and transforms its RBProgramNode (tree). If the tree is modified, then answer is set to true, and the modified tree can be retrieved by the #tree method.Instance Variables:	tree	<RBProgramNode>	the parse tree we're transforming"
"LinkedList","A LinkedList is a sequential collection of objects where adjecent objects are linked by pointer. Using the message sequence addFirst:/removeLast causes the receiver to behave as a stack; using addLast:/removeFirst causes the receiver to behave as a queue.A LinkedList can be used to hold two different kinds of objecs:   (a) Objects inheriting frm Link  (b) Any objects.If you attempt to add any object into a LinkedList that is not a Link, it will automatically be wrapped by a ValueLink. A LinkedList therefore behaves very much like any collection, except that certain calls such as atIndex: are linear rather than constant time."
"TextMessageLink","A link to a hidden mail message.  Clicking on it allows the message to be viewed or saved to disk."
"ConnectionRefused","Signals that a connection to the specified host and port was refused.	host		host which refused the connection	port		prot to which the connection was refused"
"MemoryFileSystemTest",""
"RGGlobalDefinition","An RGGlobalDefinition is an abstract superclass for representing classes, global variables and shared pools"
"RBRemoveClassVariableTest",""
"KMMockMorph",""
"NECInstVarTypeGuesserTest",""
"Cubic","I am a segment between to points. In the form of a cubic polynomial that can be evaluated between 0..1 to obtain the end points and intermediate values."
"ProtoObjectTest","This is the unit test for the class ProtoObject. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"KeyChainViewer","A KeyChainViewer is a GUI to see and edit values of a keychain"
"HashAndEqualsTestCase","I am a simple TestCase that tests for correct operation of #hash and #=.Subclasses of me need to fill my prototypes with suitable objects to be tested."
"RBSubclassResponsibilityNotDefinedRule","See my #rationale."
"FileModifyingSimpleServiceEntry","I represent a service that may change the contents of a directory.Such changes include:* file creation* file deletion* file modification"
"RBPackageEnvironment",""
"FLReplacementClassMock",""
"RBParseTreeLintRule","A RBParseTreeLintRule is a rule that is expressed using a parse tree matcher on a method AST."
"PluggableThreePhaseButtonMorph","A PluggableThreePhaseButtonMorph is an extesion of ThreePhaseButtonMorph to make it pluggableThen a model can be defined, and queried for state, on image, off image and pressed image."
"MCMockAPoolDictionary",""
"MetacelloNullRecordingMCSpecLoader",""
"ObjectsAsMethodsExample",""
"DefaultCommandLineHandler","Usage: [<subcommand>] [--help] [--copyright] [--version] [--list]	--help       print this help message	--copyright  print the copyrights	--version    print the version for the image and the vm	--list       list a description of all active command line handlers	<subcommand> a valid subcommand in --list	Documentation:A DefaultCommandLineHandler handles default command line arguments and options.The DefaultCommandLineHandler is activated before all other handlers. It first checks if another handler is available. If so it will activate the found handler."
"Polygon","I'm a Polygon PathShape (see PathShape)."
"DynamicMessageImplementor",""
"SimpleButtonMorph","I am labeled, rectangular morph which allows the user to click me. I can be configured to send my ""target"" the message ""actionSelector"" with ""arguments"" when I am clicked. I may have a label, implemented as a StringMorph.Example:	SimpleButtonMorph new		target: Beeper;		label: 'Beep!';		actionSelector: #beep; 		openInWorldStructure:instance var 	Type		Description target 			Object 		The Object to notify upon a click actionSelector 	Symbol 		The message to send to Target (#messageName) arguments 		Array 		Arguments to send with #actionSelection (optional) actWhen 		Symbol 		When to take action: may be #buttonUp (default), #buttonDown,								#whilePressed, or #startDrag oldColor 		Color 		Used to restore color after click Another example: a button which quits the image without saving it.	SimpleButtonMorph new		target: Smalltalk;		label: 'quit';		actionSelector: #snapshot:andQuit:;		arguments: (Array with: false with: true); 		openInWorld"
"ByteSymbol","This class represents the symbols containing 8bit characters."
"Decompiler","I decompile a method in three phases:	Reverser: postfix byte codes -> prefix symbolic codes (nodes and atoms)	Parser: prefix symbolic codes -> node tree (same as the compiler)	Printer: node tree -> text (done by the nodes)	instance vars:	constructor <DecompilerConstructor> an auxiliary knowing how to generate Abstract Syntax Tree (node tree)	method <CompiledMethod> the method being decompiled	instVars <Array of: String> the instance variables of the class implementing method	tempVars <String | (OrderedCollection of: String)> hold the names of temporary variables (if known)		NOTE: POLYMORPHISM WILL BE RESOLVED IN #initSymbols:	constTable <Collection of: ParseNode> parse node associated with byte encoded constants (nil true false 0 1 -1 etc...)	stack <OrderedCollection of: (ParseNode | String | Integer) > multipurpose...	statements <OrderedCollection of: ParseNode> the statements of the method being decompiled 	lastPc <Integer>	exit <Integer>	caseExits <OrderedCollection of: Integer> - stack of exit addresses that have been seen in the branches of caseOf:'s	lastJumpPc <Integer>	lastReturnPc <Integer>	limit <Integer>	hasValue <Boolean>	blockStackBase <Integer>	numLocaltemps <Integer | Symbol> - number of temps local to a block; also a flag indicating decompiling a block	blockStartsToTempVars <Dictionary key: Integer value: (OrderedCollection of: String)>	tempVarCount <Integer> number of temp vars used by the method	lastJumpIfPcStack <OrderedCollection of: Integer> the value of program counter just before the last encountered conditional jumps"
"LiteralVariableNode",""
"RBRemoveClassVariableChange",""
"ZnHttpUnsuccessful","ZnHttpUnsuccessful is signalled when an HTTP client receives a non success response.See ZnResponse>>#isSuccessI hold the response that was unsuccessful.Part of Zinc HTTP Components. "
"RectangleMorph","A subclass of BorderedMorph that supports different fillStyles.RectangleMorph diagonalPrototype openInWorld.RectangleMorph gradientPrototype openInWorld."
"MultistateLabelMorph",""
"AlertDialogWindow","Message dialog with a warning icon."
"GoogleAttachment","A GoogleAttachment is a representation of a google issue tracker attachment"
"Magnitude","I'm the abstract class Magnitude that provides common protocol for objects that havethe ability to be compared along a linear dimension, such as dates or times.Subclasses of Magnitude include Date, ArithmeticValue, and Time, as well asCharacter and LookupKey.  My subclasses should implement  < aMagnitude   = aMagnitude   hashHere are some example of my protocol:     3 > 4     5 = 6     100 max: 9	7 between: 5 and: 10 "
"IconListModel","An IconListModel is a spec model for icon list"
"ScaledDecimal","ScaledDecimal implement a special kind of Fraction that prints in decimal notation.It uses a limited number of digits (scale) after the decimal separation dot and round the result.Note that a ScaledDecimal does not printOn: exactly, however it will storeOn: exactly because the full precision fraction is kept in memory.This is mostly usefull with denominators being powers of 10."
"MultiCharacterBlockScanner",""
"ExceptionTester",""
"WeakOrderedCollection","I am just like an OrderedCollection except that I hold my objects weakly.In use, be aware that objects only referenced by me are not ""removed"" (like in OrderedCollection), but merely nilled. So guard against nils when iterating/accessing, and don't expect #size to represent the number of objects I hold. For more details, read my tests in WeakOrderedCollectionTest. "
"FLPositive16SmallIntegerCluster",""
"TimeStampTest","This is the unit test for the class TimeStamp."
"CommentNode",""
"MCWorkingCopyTest",""
"MetacelloVersionSpec",""
"ZnLimitedReadStream","I am ZnLimitedReadStream, wrapping another read stream delegating to it but limiting reading to a fixed number of elements.I can be atEnd while my wrapped stream is not.My contentSpecies can be forced to be ByteArray (binary) or ByteString (ascii).I do byte/char conversions on the fly (support bivalent access).This implementation is really a kludge.Part of Zinc HTTP Components."
"RPackageImportFromPackageInfoTest",""
"NBExternalObjectType","I providing coercions forNBExternalObject and its subclasses"
"ViewHierarchyExplorer","A ViewHierarchyExplorer is specialized Explorer that works exclusively with morphs.  It provides the user with a tree view of the Morph Composition Hierarchy and allows you to quickly identify a tree item with its corresponding morph by ""flashing"" the node in question.  This tool facilitates the understanding of complex morph compositions.A View Hierarchy Explorer can be opened from the Halo Debug Menu > ""explore view hierarchy"", or simply send #ExploreViewHierarchy to any morph instance.try..[World exploreViewHierarchy]and[OBPackageBrowser open exploreViewHierarchy]"
"ResumableTestFailureTestCase",""
"FileSystemError","I am an abstract superclass for errors that may occur during filesystem operations."
"ResolutionRequest","I represent a request for user assistance in resolving an origin. I am a resumable exception that gets raised when there is no way of automatically resolving a particular origin. "
"RxmSubstring","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--Instance holds onto a string and matches exactly this string, and exactly once.Instance variables:	string 	<String>"
"PharoTheme","self defaultSettings: nil.self beCurrent. "
"TraitTest",""
"FileSystemHandleTest",""
"AGroupHasBeenRegistered",""
"ProgressNotification","Used to signal progress without requiring a specific receiver to notify. Caller/callee convention could be to simply count the number of signals caught or to pass more substantive information with #signal:."
"CP1250TextConverter","Text converter for CP1250.  Windows code page used in Eastern Europe."
"FLVersionTest",""
"MCOrganizationTest",""
"SettingTokenFilter","A SettingTokenFilter is SettingFilter which makes use of a token (substring) in order to keep or not a SettingHandler.Instance Variables	token:		<String>"
"RBRootScope",""
"AnnouncementsAPIDocumentation","This is a custom help book providing the API documentation for the announcements framework."
"RBReturnsIfTrueRule",""
"RBMissingSuperSendsRule","See my #rationale."
"RBParser","RBParser takes a source code string and generates an AST for it. This is a hand-written, recursive descent parser and has been optimized for speed. The simplest way to call this is either 'RBParser parseExpression: aString' if you want the AST for an expression, or 'RBParser parseMethod: aString' if you want to parse an entire method.Instance Variables:	currentToken	<RBToken>	The current token being processed.	emptyStatements	<Boolean>	True if empty statements are allowed. In IBM, they are, in VW they aren't.	errorBlock	<BlockClosure>	The block to evaluate on a syntax error.	nextToken	<RBToken>	The next token that will be processed. This allows one-token lookahead.	scanner	<RBScanner>	The scanner that generates a stream of tokens to parse.	source	<String>	The source code to parse	tags	<Collection of: Interval>	The source intervals of the tags appearing at the top of a method (e.g. Primitive calls)Shared Variables:	ParserType	<Symbol>	the type code we are parsing"
"GoogleIssueComment","A GoogleIssueComment is a representation of a Google Issue Tracker issue's comment"
"MCMockClassB","This comment has a bang! Bang! Bang!"
"SoundTheme","Groups a set of sounds to use with a UITheme.Note that, although instances may have their sounds changed the settings will still indicate the class of theme that is current."
"RBInconsistentMethodClassificationRule","See my #rationale.Extension methods: Superclass extenstion methods are ignored, since they may have a different protocol name. Pay attention when you apply automatic recategorization because it may move the subclass's method in another package."
"EUCKRTextConverter","Text converter for Korean variation of EUC."
"RBStringConcatenationRule","Check for string concatenation inside some iteration message. Since string concatenation is O(n^2), it is better to use streaming since it is O(n) - assuming that n is large enough. As a general principal avoid , since the receiver is copied. Therefore chaining , messages will lead to multiple useless copies of the receiver. Instead of writing	| string | 	string := String new.	#(1 2 3) do: [ :each |		string := string, each asString].	^ stringWrite, it is much more efficient.	String streamContents: [:s | 		#(1 2 3)  do: [:each | s nextPutAll: each asString]]"
"SMTPClientTest",""
"RBNamespace",""
"RBClassToRename",""
"SystemReference","This class defines the full reference help for the system.(contents for the full API Help).Just run ""HelpBrowser openOn: SystemReference""."
"SystemAnnouncerTest",""
"ParserNotification",""
"FullscreenMorph","Provides for another morph to occupy the full screen area (less docking bars)."
"LongTestCase","I'm a TestCase which takes time to run. I can be disabled using #doNotRunLongTestCases and enabled again using #runLongTestCases.Tests that are long should be subclasses of myself.I also provide a setting for the SettingsBrowser"
"RBEqualNotUsedRule",""
"EventHandler","Events in Morphic originate in a Hand, pass to a target morph, and are then dispatched by an EventHandler.  EventHandlers support redirection of mouse and keyboard activity by specifying and independent recipient object and message selector for each of the possible events.  In addition each eventHandler can supply an optional value parameter for distinguishing between, eg, events from a number of otherwise identical source morphs.The basic protocol of an event handler is to receive a message of the form	mouseDown: event in: targetMorphand redirect this as one of	mouseDownRecipient perform: mouseDownSelector0	mouseDownRecipient perform: mouseDownSelector1 with: event	mouseDownRecipient perform: mouseDownSelector2 with: event with: targetMorph	mouseDownRecipient perform: mouseDownSelector3 with: event with: targetMorph with: valueParameterdepending on the arity of the mouseDownSelector."
"FileListGridNode",""
"DelayWaitTimeout","DelayWaitTimeout is a special kind of Delay used in waitTimeoutMSecs: to avoid signaling the underlying semaphore when the wait times out."
"RBOwnedScope",""
"StandardFileStream","Provides a simple, platform-independent, interface to a file system. The instance variable rwmode, inherited from class PositionableStream, here is used to hold a Boolean -- true means opened for read-write, false means opened for read-only.  2/12/96 swI implement a simple read buffering scheme with the variables defined in PositionableStream (which are unused in me otherwise) in the following way:	collection	<ByteString> or <ByteArray>	This is the buffer.	position	<Integer>	The relative position in the buffer. Greater or equal to zero.	readLimit	<Integer>	The number of bytes buffered. Greater or equal to zero.Read buffering is enabled with #enableReadBuffering, disabled with #disableReadBuffering and it is enabled by default. The buffer is filled when a read attempt of an unbuffered absolute position is requested, or when a negative repositioning is made (with #position: with an argument < than the current absolute position) to an absolute position which is not buffered. In the first case, the buffer is positioned to the given absolute position. In the latter case the repositioning is made to the requested absolute position minus fourth of the buffer size. This means that further small negative repositionings won't result in buffer flushing. This is really useful when filing in code.The read buffer is flushed (#flushReadBuffer) whenever a write attempt is made.The buffer state is valid if and only if collection is not nil and position < readLimit."
"FinderClassNode","A FinderClassNode is a node used by the FinderUI's tree representing a Class"
"MCServerRegistry",""
"NBQSortCallback",""
"KMShiftModifier",""
"NBExternalUnion",""
"FT2MemoryFaceData",""
"NullTextStyler","This class is a styler NullObject"
"NewVersionBrowser","A NewVersionBrowser is a tool made for browsing the several versions of the provided method."
"BottomRightGripMorph","I am the handle in the right bottom of windows used for resizing them."
"CascadeNode","The first message has the common receiver, the rest have receiver == nil, which signifies cascading."
"LayoutFrame","I define a transformation frame relative to some rectangle. I'm basic data structure used for graphics.Instance variables:	leftFraction 	topFraction 	rightFraction 	bottomFraction 	<Float>		The fractional distance (between 0 and 1) to place the morph in its owner's bounds	leftOffset 	topOffset 	rightOffset 	bottomOffset 	<Integer>	Fixed pixel offset to apply after fractional positioning (e.g., ""10 pixel right of the center of the owner"")"
"EqualityTester","I provide a simple way to test the equality properties of any object."
"TextLineEndingsTest","This is a test case for Text>>withSqueakLineEndings and String>>withSqueakLineEndings.The main problem we've seen with the Text version is that it doesn't preserve formatting correctly."
"NOCDatedEntry","I keep a symbol entry, along with the last time it was used in the system. I am used to sort the possible answers."
"NECVarTypeGuesser","I'm an InstructionClient that tries to guess the type of a given instance variable name of a class. "
"NBBool",""
"SimpleTestResourceA1",""
"PSMCPatchMorph","I'm a Monticello tool based on polymorph used to browse diffs.Activate me with the setting named 'Use Polymorph difference tools'."
"FailingTestResourceTestCase",""
"MCClassInstanceVariableDefinition","A MCClassInstanceVariableDefinition represents a class instance variable."
"ExternalClipboard","An ExternalClipboard is the abstract superclass for the platform specific clipboards based on the clipboard plugin (former ExtendedClipboardInterface originally developed for Sophie).Instance Variables	clipboard:		SmallIntegerclipboard	- handle for the external clipboard. If 0 the external clipboard is invalid"
"MetacelloSymbolicVersionDoesNotExistError",""
"AnnotationPanePlugin","An IgorsPlugin is a plugin which displays info about the current selection"
"CircleMorphBugs",""
"ChangeSorterApplication","A ChangeSorterApplication is spec version of the dual sorter.ChangeSorterApplication 	new openWithSpec"
"HierarchicalUrlTest",""
"ModelDependentDialogWindow","DialogWindow that updates content based upon its model."
"RBLiteralValueNode","RBLiteralNode is an AST node that represents literal values (e.g., #foo, true, 1, etc.), but not literal arrays.Instance Variables:	token	<RBLiteralToken>	the token that contains the literal value as well as its source positions"
"RBRenameClassChange",""
"MCClassTraitDefinition",""
"CheckboxMorph","Checkbox with box button and label with enablement support."
"ClassTest",""
"CircleMorph","I am a specialization of EllipseMorph that knows enough to remain circular."
"RegexCompilationError","This class represents compilation errors in regular expressions."
"FLFileStreamStrategy","I am a strategy for traditional file streams."
"FontProviderAbstract","Abstract superClass for fontProviders	examples of possible fontProviders are 		StrikeFontProvider		FreeTypeFontProvider		Win32NativeFontProvider		"
"MockSourceEditor",""
"UCSTable","This class represents the Unicode conversion table from/to the domestic encodings and Unicode."
"SystemHelp","This class defines Help for the system in front of you.It defines the default contents when you open a help browser.So ""HelpBrowser open"" is the same as ""HelpBrowser openOn: SystemHelp""."
"RBParseTreeRule","RBParseTreeRule is the abstract superclass of all of the parse tree searching rules. A parse tree rule is the first class representation of a particular rule to search for. The owner of a rule is the algorithm that actually executes the search. This arrangement allows multiple searches to be conducted by a single Searcher.Instance Variables:	owner	<ParseTreeSearcher>	The searcher that is actually performing the search.	searchTree	<RBProgramNode>	The parse tree to be searched."
"NBFnArgument","I am abstract class, describing a function argument.My subclasses should know what code to emit in order to load an argument."
"MetacelloMergeMemberSpec",""
"RBProtectInstanceVariableRefactoring",""
"MorphLostFocus","I'm an announcement raised when a morph losts keyboard focus."
"Author","I am responsible for the full name used to identify the current code author."
"UIThemeWatery2",""
"MCPatcher","I can add or remove or modify definitions. My main purpose is to generate monticello snapshot out of multiple snapshots or definitions by using my most used method #apply:to:."
"MCMergeOrLoadWarning","A MCMergeOrLoadWarning is a simple warning used when amerge or a load action may override existing entities."
"FLLargeIdentitySet","A LargeIdentitySet is an IdentitySet for large collections.Rather than using linear probing, it takes advantage of the fact that identityHash (on a classic, 32bit VM) in Pharo only has 4096 unique values, using a bucket for each of those.It will still work if hash range changes (ie buckets are chosen mod 4096), but the potential gain will be lower the more diverse the hash space is.With linear probing you risk an array looking like this:Index:	Hash:	1	X	2	X	3	X	4	4	5	5	6	4	7	4	8	7	9	6	10	XWhile with buckets the same dataset looks:Index:	Hash:	1	X	2	X	3	X	4	[4, 4, 4]	5	5	6	6	7	7	8	X	9	X	10	XSo includes: can generally be done faster (also sped up byusing a special primitive), and removal of objects does not have to do extensive cleanup if object was part of a chain."
"ButtonModel","A ButtonComposableModel is an applicative model which handle a basic button.self example"
"AbstractSoundSystem","This is the abstract base class for a sound system. A sound system offers a small protocol for playing sounds and making beeps and works like a facade towards the rest of Squeak. A sound system is registered in the application registry SoundService and can be accessed by ""SoundService default"" like for example:SoundService default playSoundNamed: 'croak'The idea is that as much sound playing as possible should go through this facade. This way we decouple the sound system from the rest of Squeak and make it pluggable. It also is a perfect spot to check for the SoundSettings class>>soundEnabledTwo basic subclasses exist at the time of this writing, the BaseSoundSystem which represents the standard Squeak sound system, and the DummySoundSystem which is a dummy implementation that can be used when there is no sound card available, or when the base sound system isn't in the image, or when you simply don't want to use the available sound card."
"EventSensorConstants","This is a constants, used by EventSensor to identify various event types and theirs contents.NOTE: A constant values should be kept in sync with VM-side, which are defined in sq.h header file."
"MCSmalltalkhubRepository",""
"ZnRequestLine","I am an HTTP Request Line.I consist of an HTTP method, an URI and an HTTP protocol version.I can be used for generating and parsing.Part of Zinc HTTP Components."
"CalendarDayMorph","A CalendarDyaMorph represents a specific day on a monthly calendar.Instance Variables	bounds:		<Rectangle>	date:		<Date>	highlighted:	<Boolean>	owner:		<CalendarChooserMorph>bounds	- owner-relative bounding boxdate	- the specific date (year/month/day) the CalendarMorph representshighlighted	- flag to keep track of when a CalendarMorph has the mouse dragging over it, and is thus highlightedowner	- the morph that contains the CalendarMorph, and all its siblings"
"MorphDeleted","I'm an announcement raised when a morph is deleted. Subscribe to me when you want to do things after the morph is opened.Take into account that when a morph is deleted, all it's children also get deleted and they raise a similar announcement."
"KMCommandModifier",""
"ZnClientTests",""
"PluggableListItemWrapper","luggableListItemWrapper makes it more easy for clients to use hierarchical lists. Rather than having to write a subclass of ListItemWrapper, a PluggableListItemWrapper can be used to provide the appropriate information straight from the model:	string - an explicit string representation (contrary to the 'item' which contains any kind of object)	getStringSelector - a message invoked to retrieve the sting representation of its item dynamically from its model (when a constant representation is undesirable)	hasContentsSelector - a message invoked in the model to answer whether the item has any children or not.	getContentsSelector - a message invoked in the model to retrieve the contents for its item.All callback selectors can have zero, one or two arguments with the item and the wrapper as first and second argument."
"RBMethodSelectorsSpellingRule","See #name for the area where I check spelling."
"MorphTreeMorphMultipleSelection",""
"RBClassInstVarNotInitializedRule","See my #rationale."
"AnnotationRequest",""
"ZnServerTests",""
"Inspector","I represent a query path into the internal representation of an object. As a StringHolder, the string I represent is the value of the currently selected variable of the observed object."
"ExampleForTest12",""
"RBTranslateLiteralsInMenusRule",""
"TranslucentColorTest",""
"Semaphore","I provide synchronized communication of a single bit of information (a ""signal"") between Processes. A signal is sent by sending the message signal and received by sending the message wait. If no signal has been sent when a wait message is sent, the sending Process will be suspended until a signal is sent."
"ZnTooManyDictionaryEntries","ZnTooManyDictionaryEntries is signalled when too many entries are added to a limited ZnMultiValueDictionary.Part of Zinc HTTP Components. "
"BrowserSystemSettings",""
"AnimatedGIFReadWriter","Read an animated GIF file.Example: open all images of an animated GIF file in a Morphic windowgifPath :=  '/path/to/my_animated.gif'.forms := (AnimatedGIFReadWriter formsFromFileNamed: gifPath) forms.content := UITheme builder newRow: (forms collect: [:aForm| UITheme builder newImage: aForm]).content openInWindowLabeled: 'Content of ', gifPath."
"StartupAction","I am an atomic item used to execute a portion of code at image startup."
"MetacelloRepositoriesSpec",""
"UTF8TextConverterTest",""
"ZdcSocketStreamTests","ZdcSocketStreamTests tests ZdcSocketStream"
"ZnLineReaderTests",""
"MacStore","I'm a specific store for OSX file systems"
"SMTPClient","This class implements the SMTP (mail sending) protocol specified in RFC 821.HELO <SP> <domain> <CRLF>MAIL <SP> FROM:<reverse-path> <CRLF>RCPT <SP> TO:<forward-path> <CRLF>DATA <CRLF>RSET <CRLF>SEND <SP> FROM:<reverse-path> <CRLF>SOML <SP> FROM:<reverse-path> <CRLF>SAML <SP> FROM:<reverse-path> <CRLF>VRFY <SP> <string> <CRLF>EXPN <SP> <string> <CRLF>HELP [<SP> <string>] <CRLF>NOOP <CRLF>QUIT <CRLF>TURN <CRLF>"
"MCMockClassE",""
"FLObsolete","I am an error produced during serialization, signaled when trying to serialize an obsolete class as global. It is a prevention, because such class is lekely to be absent during materialization."
"MetacelloPostLoadDirective",""
"SmalllintManifestCheckerTest",""
"SUnitAPIDocumentation",""
"RBInstVarInSubclassesRule","See my #rationale.In addition, have a look at the initialize method in each of the subclasses because if the instance variable is really the same, it will be initialized similarly in different places."
"AllProtocol","An AllProtocol is a special protocol to hanlde the ""all"" case"
"StreamBugz",""
"OpenToolTest",""
"AGroupHasBeenCreated",""
"SeparatorMorph","Simple themed separator morph."
"RWBinaryOrTextStream","A simulation of a FileStream, but living totally in memory.  Hold the contents of a file or web page from the network.  Can then fileIn like a normal FileStream.Need to be able to switch between binary and text, as a FileStream does, without recopying the whole collection.  Convert to binary upon input and output.  Always keep as text internally."
"FloatArrayTest","These tests are used to assert that FloatArrayPlugin has same results as Float asIEEE32BitWord"
"MCPostscriptDefinition",""
"ZnUrlTests",""
"RBLocalBinding",""
"W2KGroupboxMorph",""
"Exception","This is the main class used to implement the exception handling system (EHS).  It plays two distinct roles:  that of the exception, and that of the exception handler.  More specifically, it implements the bulk of the protocols laid out in the ANSI specification - those protocol names are reflected in the message categories.Exception is an abstract class.  Instances should neither be created nor trapped.  In most cases, subclasses should inherit from Error or Notification rather than directly from Exception.Exceptions have an optional #messageText that can be set when they are signaled.Exceptions also have the concept of #signaler, the object that is the subject of the exception.This will be set automatically (to the #receiver), but can be set when the exception is signaled. In implementing this EHS, The Fourth Estate Inc. incorporated some ideas and code from Craig Latta's EHS.  His insights were crucial in allowing us to implement BlockContext>>valueUninterruptably (and by extension, #ensure: and #ifCurtailed:), and we imported the following methods with little or no modification:ContextPart>>terminateTo:ContextPart>>terminateMethodContext>>receiver:MethodContext>>answer:Thanks, Craig!"
"CodeHolderSystemSettings",""
"RPackageWithDoTest",""
"Unicode","This class holds the entry points for the utility functions around characters."
"FinderUI","A FinderUI is a UI used to render a Finder instance.This tool is used to look for selectors, class, source code or patterns through the system, or through a specified environment"
"ZnNetworkingUtils","I am ZnNetworkingUtils holding various utilities related to HTTP networking.My class side is a general API.My instance side is a factory.Part of Zinc HTTP Components."
"ClassBuilder","Responsible for creating a new class or changing the format of an existing class (from a class definition in a browser or a fileIn). This includes validating the definition, computing the format of instances, creating or modifying the accompanying Metaclass, setting up the class and metaclass objects themselves, registering the class as a global, recompiling methods, modifying affected subclasses, mutating existing instances to the new format, and more.You typically only need to use or modify this class, or even know how it works, when making fundamental changes to how the Smalltalk system and language works.Implementation notes:ClassBuilder relies on the assumption that it can see ALL subclasses of some class. If there are any existing subclasses of some class, regardless of whether they have instances or not, regardless of whether they are considered obsolete or not, ClassBuilder MUST SEE THEM."
"NullObjectSpec","A NullObjectSpec is a NullPattern object spec"
"WeakAnnouncementSubscription","A WeakAnnouncementSubscription is a subscription which is removed automatically when the subscriber is unreferenced.No support for ephemerons currently prevents this from working for Block actions (blocks hold their receiver, which is the default subscriber strongly). To switch between subscription types, use makeStrong/makeWeak on the subscription returned when initially registering with announcer.Note, that list and next must be first instance variables."
"NECMenuMorph","I show the possible completions in a menu like appearance. The user may choose an entry from my list and complete the word he was typing in the editor. I'm showed with the Tab key and will be deleted when with ESC key or when a successful completion occurs. The following keystrokes are supported:Ctrl-Space or Tab: Open a new morph. Tab requires at least one character in front of the cursor. When already open complete the selected entry. Esc: Close meCtrl+u: Change to untyped mode, so I show all selectors of all classes in the system and the variables that are accessible to the current context.Arrow Up: Move one entry up.Arrow Down: Move one entry downEnter: (like Ctrl-Space and Tab): Complete with the selected item and close the morphany letter or digit: Narrow the completion furtherCtrl+t: Toggle the expand flag. When expand is disabled, you don't see selectors belonging to Object and ProtoObject. "
"TickSelectionListMorph","A TickSelectionListMorph is used to render the tick liststoreValue	- xxxxx"
"CompiledMethodTest","This is the unit test for the class CompiledMethod. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"RGMetatraitDefinition","RGMetatraitDefinition is a concrete representation of metaclasses of traits"
"RBAddInstanceVariableTest",""
"Browser","I represent a query path into the class descriptions, the software of the system."
"MenuLineMorph",""
"Authorizer","The Authorizer does user authorization checking. Each instance of authorizer keeps track of the realm that it is authorizing for, and the table of authorized users. An authorizer can be asked to return the user name/symbol associated with a userID (which concatenates the username and password from the HTTP request) with the user: method."
"Preferences","An empty class to help people loading their code when it contains sends to  methods of the old Preferences."
"SelfEvaluatingObjectTest",""
"Text","I represent a character string that has been marked with abstract changes in character appearance. Actual display is performed in the presence of a TextStyle which indicates, for each abstract code, an actual font to be used.  A Text associates a set of TextAttributes with each character in its character string.  These attributes may be font numbers, emphases such as bold or italic, or hyperling actions.  Font numbers are interpreted relative to whatever textStyle appears, along with the text, in a Paragraph.  Since most characters have the same attributes as their neighbors, the attributes are stored in a RunArray for efficiency.  Each of my instances has	string		a String	runs		a RunArray"
"FLGlobalCompiledMethodCluster","I clusterize CompiledMethods that will be obtained on materialization accessing method dictionary of the corresponding class in Smalltalk globals."
"NOCCompletionTable","I keep track of symbols to be retrieved in ocompletion algorithm. Unlike ecompletion, I learn something and try to retrieve users last occurences of typing sequences first, then the system symbols which match. TODO remove stupid symbols (like packages and method extensions and timestamp)"
"WideStringTest","This is the unit test for the class String. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"InterpolatedGradientFillStyle","Gradient fill style that uses proper alpha-aware interpolation."
"TextClassLink",""
"NautilusGroupSelected","A NautilusGroupSelected is raised when a group is selected"
"NBUTF8StringExample","This is an example of defining custom type.This type accepts a string(s) and converts them into utf-8 representation on stack on the fly and then pushes the pointer to converted string to callee.UTF8TextConverter new convertFromSystemString: (NBBasicExamples new encodeToUTF8: 'owehjfopeh fr´' asWideString)"
"ProcessorScheduler","My single instance, named Processor, coordinates the use of the physical processor by all Processes requiring service."
"RBCompositeRefactoryChange",""
"ZnBivalentWriteStreamTests",""
"FLGlobalTraitSerializationTest","I test the serialization of traits as *external* objects, i.e. the traits has to be present in the image at materialization time."
"SUnitHelp","This is a custom help book for the SUnit framework."
"ISO885915TextConverter","Text converter for ISO 8859-15.  An international encoding used in Western Europe, similar to ISO 8859-1 but adds the Euro symbol and drops others like one quarter."
"RBExtractMethodRefactoring",""
"Quadrangle","I represent a particular kind of Rectangle that has a border and inside color."
"TestFailure","The test framework distinguishes between failures and errors.  A failure is an event whose possibiity is explicitly anticipated and checked for in an assertion, whereas an error is an unanticipated problem like a division by 0 or an index out of bounds.  TestFailure is raised when the boolean parameter of an assert: ... or deny: ... call is the opposite of what the assertion claims."
"MessageBrowserTest","A MessageBrowserTest is a test class for testing the behavior of MessageBrowser"
"RBClassScope",""
"RBPrecedenceRule",""
"RBClassNotReferencedRule","See my #rationale."
"TestSuiteEnded","This announcment is thrown when a test suite just finished (more precisly when hisoties are updated)"
"GoferMerge",""
"NBCallbackCodeGen","The generated callback code does following:1. Trunk1.0. Each callback instance has unique trunk code, which is installed into external memory during callback initialization.1.1. An external function makes a call to trunk address.1.2. Trunk code sets the globally registered callback index to ECX register and jumps to callback entry code.2. Entering callback 2.1. saves the VM's execution state (stack/frame pointers, reenterInterpreter jump buffer). See #saveExecutionState.2.2. fetching the callback oop for index passed from trunk.2.3. coercing the callback function arguments to their smalltalk equivalent and creates an array with them. See #emitArgumentsCoercion.2.4. synthesizes a fresh method context which is an activation of #pvtEnter:stackPointer:primitiveMethod: 	and swaps the active context with synthesized context. See #activateCallbackContext: .2.5. increments a global callback counter value. See #incrementCallbackCounter.2.6. enters an interpreter loop by calling VM's #enterSmalltalkExecutiveImplementation function.3. Leaving callback.3.1. A leave procedure starts from method: #primLeave:stackPtr:contextOop:returnValue:primitiveMethod: , whichsimply jumps to provided leave address, a code, generated for leaving from given callback.3.2. Coerce the return value from smalltalk object to it's C equivalent. See #generateCallbackLeaveCodeFor:leaveAddr:.3.3. Swaps a currently active context with one which were before entering callback3.4. jumps to #returnToC label in callback entry code3.5. sets the current C stack frame back to callback enter procedure.3.6. restores the VM execution state (an opposite to 2.1) , see #restoreExecutionState.3.7. decrements global callback counter.3.8. returns to external function"
"SmalltalkEditor","The editor built specifically for Smalltalk code"
"ZnUrlExtensionTests",""
"ProtocolOrganizer","A ProtocolOrganizer is part of a ClassOrganizer.It manages the protocols of the class that owns it"
"MethodHighlightingTests",""
"ReadWriteStreamTest","This is the unit test for the class ReadWriteStream.Unit tests are a good way to exercise thefunctionality of your system in a repeatable andautomatic manner. They are therefore recommended ifyou plan to release anything. For more information,see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"PluggableTextFieldMorph","Single-line text field editor with DialogWindow key integration (return for default, escape for cancel) and keyboard focus navigation (tab/shift-tab). Additionally supports pluggable converters to translate between an object and its string form and vice-versa."
"PreorderGuideTest",""
"SmalltalkEditingState","See EditingState comments.SmalltalkEditingState is made to manage data for Smalltalk code editing sessions (such as a selector chooser).Instance Variables:   selectorChooser <SelectorChooserMorph>- selectorChooserThe basic selector chooser which is popup to fetch available selectors or class names begining with a prefix. The prefix is token from the current caret location (see SelectorChooserMorph comments)."
"CheckboxButtonMorph","Checkbox/radio - button only."
"CompoundTextConverterState","This represents the state of CompoundTextConverter."
"RBPragmaEnvironment",""
"FLNegative16SmallIntegerCluster",""
"AlphaInfiniteForm","Alpha aware InfiniteForm."
"SmalllintManifestChecker",""
"FloatArray","FloatArrays store 32bit IEEE floating point numbers."
"MCSnapshotResource",""
"GoogleUser","A user entity needed by Google to ensure authentification"
"RBGuardingClauseRule",""
"FreeTypeCacheConstants",""
"MetacelloPharoPlatform",""
"NECSelectorEntry","I represent a selector"
"GraphicFontSettings",""
"RBCategoryEnvironment",""
"RBMultiKeywordLiteralToken",""
"LargeNegativeIntegerTest",""
"SingleTreeTest",""
"PluggableButtonMorph","A PluggableButtonMorph is a combination of an indicator for a boolean value stored in its model and an action button. The action of a button is often, but not always, to toggle the boolean value that it shows. Its pluggable selectors are:		getStateSelector		fetch a boolean value from the model		actionSelector		invoke this button's action on the model		getLabelSelector		fetch this button's lable from the model		getMenuSelector		fetch a pop-up menu for this button from the modelAny of the above selectors can be nil, meaning that the model does not supply behavior for the given action, and the default behavior should be used. For example, if getStateSelector is nil, then this button shows the state of a read-only boolean that is always false.The model informs its view(s) of changes by sending #changed: to itself with getStateSelector as a parameter. The view tells the model when the button is pressed by sending actionSelector.If the actionSelector takes one or more arguments, then the following are relevant:		arguments			A list of arguments to provide when the actionSelector is called.		argumentsProvider	The object that is sent the argumentSelector to obtain arguments, if dynamic		argumentsSelector	The message sent to the argumentProvider to obtain the arguments.Options:	askBeforeChanging		have model ask user before allowing a change that could lose edits	triggerOnMouseDown	do this button's action on mouse down (vs. up) transition	shortcutCharacter		a place to record an optional shortcut key"
"CollectionIsEmpty","I am CollectionIsEmpty, an exception indicating that an operation was attempted on an empty collection where that does not make sense.I am an Error and thus an Exception.The collection that is empty is in my inherited signaler instance variable."
"FLDecoder","I am an abstraction used by the materialization algorithm to decode the graph from a stream."
"QuestionWithoutCancelDialogWindow","A yes/no message dialog. Yes (return) is the default. Escape will answer no."
"TextStopConditions","A TextStopConditions is a private helper class for text composition (See class CharacterScanner and subclasses).It maps some characters controling the text layout (like carriage return, line feeds, space and tabulation) to some selector representing the action to be performed by the CharacterScanner.By default, a TextStopConditions does not map any action to control character; instances must be properly initialized by sending #at:put: messages.For example, inter-word spacing can be adjusted so as to obtain ""justified"" paragraphs. See implementors of #paddedSpace, #cr, #space, #columnBreak for example of special character actions.A TextStopConditions also store two selectors for mapping the actions to be taken when:- end of run is encountered;- text overflows horizontal composition bounds.These actions are by default #endOfRun and #crossedX (see implementors of these messages), but can enventually be changed using #endOfRun: and #crossedX:.In a text (see class Text), the ""runs"" are used to store text style attributes, so an ""end of run"" event probably means some action in the textcomposer should be taken to change the font.TextStopConditions current implementation can only map 256 character codes (from 1 to 256). It is the composer responsibility to encode the character before sending #at:. Presumably, the composer will use the character codePoint + 1 (see implementors of #codePoint).If this is not sufficient, then this class could be changed to use a Dictionary or a LargeTableHistorically, the EndOfRun and CrossedX were two TextConstant of value 257 and 258, which did occupy corresponding slots in the stops array. Since these are valid character codePoint, this usage has been deprecated. However, because any error in text composition would have catastrophic consequences (unresponsive user interface), backward compatibility with obsolete historical code is still maintained internally which is why the stops array has a sze of 258.Instance Variables	crossedX:		<Symbol | nil>	endOfRun:		<Symbol | nil>	stops:		<Array of: Symbol | nil>crossedX	- selector to perform when the composed text overflows X composition boundendOfRun	- selector to perform at end of runstops	- an array mapping character code (codePoint + 1) to special actions, or nil if character is to be rendered normally"
"RBInstanceBinding",""
"ConfigurationOfFuel","Fuel is a general-purpose object serialization framework.See more information in our website:http://rmod.lille.inria.fr/web/pier/software/Fuel/"
"FLNegative24SmallIntegerCluster",""
"MulticolumnLazyListMorph","A variant of LazyListMorph that can display multi-column lists."
"DynamicVariable","My subclasses are dynamic variables: each subclass represents a variablewhose value persists inside the block passed to #value:during:. There isno way to change the value inside such a block, but it is possible totemporarirly rebind it in a nested manner."
"WeakSet","I'm a Set with weak elements. Implementation.	flag is a special object that indicates that at a given slot the set has a free entry."
"FLGZipStrategy","I am a strategy for using GZipStream."
"MetacelloVersionNumber","# Metacello version formatThanks to [Mozilla Toolkit version format](https://developer.mozilla.org/en/Toolkit_version_format) for inspiration.##Version FormatA version string consists of one or more version parts, separated with dots or dashes.A version part with a leading dot is numeric. A version part with a leading dash is string.The rationale behind splitting a version part into a sequence of strings and numbers is that when comparing version parts, the numeric parts are compared as numbers, e.g. '1.0-pre.1' < '1.0-pre.10', while the strings are compared bytewise. See the next section for details on how versions are compared.##Comparing versionsWhen two version strings are compared, their version parts are compared left to right. Empty parts are ignored.If at some point a version part of one version string is greater than the corresponding version part of another version string, then the first version string is greater than the other one.If a version string has extra parts and the common parts are equal, the shorter version string is less than the longer version string (1.0 is less than 1.0.0).Otherwise, the version strings are equal. ##Comparing version partsVersion parts are also compared left to right, A string-part that exists is always less-then a nonexisting string-part (1.6-a is less than 1.6).Examples```1 == 1. < 1.0 == 1..--0< 1.1-a < 1.1-aa < 1.1-ab < 1.1-b < 1.1-c< 1.1-pre < 1.1-pre.0 < 1.1-pre.1-a < 1.1-pre.1-aa < 1.1-pre.1-b < 1.1-pre.1< 1.1-pre.2< 1.1-pre.10< 1.1 < 1.1.0 < 1.1.00< 1.10< 2.0```"
"GenericUrl","a URL type that can't be broken down in any systematic way.  For example, mailto: and telnet: URLs.  The part after the scheme name is stored available via the #locator message."
"FLBasicSerializationTest",""
"MCMockClassF",""
"FLSortedCollectionSerializationTest",""
"HelpBrowser","A HelpBrowser is used to display a hierarchy of help topics and their contents.Instance Variables	rootTopic: 		<HelpTopic>	window:			<StandardWindow>	 	treeMorph:		<PluggableTreeMorph>	contentMorph:		<Morph>			rootTopic	- xxxxxwindow	- xxxxxtreeMorph 	- xxxxxcontentMorph 	- xxxxx"
"FLGlobalClassSerializationTest","I test the serialization of classes as *global* objects, i.e. the classes has to be present in the image at materialization time."
"NBFinalizationRegistry","i am a simplified implementation of WeakRegistry,and have same public protocol.The implementation is simpler and faster, because i rely on new finalization support in VM."
"FLWeakVariableObjectCluster","I am a cluster for objects with weak indexable variables."
"IconicButton","A ""Simple Button"" in which the appearance is provided by a Form."
"BooleanApiSetter",""
"CodeImporter","I'm an object in charge of import source files.  I know a format object that knows how to parse the files, and I import the parsed results into the image.I handle doIts normally, but some special cases like class organization, class comment or methods are handled via a double dispatch (See my method extensions for that).=-=-=- How to use me -=-=-=If you want to fileIn the code -aka compile/evaluate it:CodeImporter evaluateReadStream: '2+2!' readStream.orCodeImporter evaluateString: '2+2!'orCodeImporter evaluateFileNamed: 'something.st'orCodeImporter evaluateFileStream: (FileStream readOnlyFileNamed: 'something.st')Now, you can also generate a model of code declarations inside a file by just creating an instance:CodeImporter fileStream: (FileStream readOnlyFileNamed: 'something.st').And then query me sending the message#codeDeclarationsInstances of me can be created through #fromString:#readStream:#fileNamed:#fileStream:"
"MCInstanceVariableDefinition","A MCInstanceVariableDefinition represents an instance variable definition."
"SpecBinder","A SpecBinder is a stupid dictionary where keys are spec symbolic name and values are corresponding spec class"
"DependentsArrayTest",""
"ZnCharacterStreamTests",""
"DebuggerTest",""
"RBExcessiveVariablesRule","See my #rationale.Sometimes instance variables are used instead of method arguments or temporaries. You can check if an instance variable's value is always valid during the complete lifetime of an object. In addition, looking at methods used together by a group of methods may be an indication that a new object should be created. Large classes often exhibit a large number of instance variables. Some people also confuse classes and namespaces. The defined number of instance variables can be edited in #variablesCount."
"MethodPragmaTest",""
"EventManager","An EventManager is used to registers a 'observer' object's interest in in changes to an 'observed' object.  Then when the observered object is changed,  EventManager broadcasts the an update message to all objects with a registered interest.  Finally, the Event manager can be used to remove an object from the list of observer object.An interested object is said to be a dependant on the target object.  Registering an interest in an event is called adding a dependant. Deregistering is called removing  a dependant.  The EventManager's action map is a WeakIdentityDictionary that maps events (selectors) to dependants (objects & selectors) in a way that ensures the mapping is to specific objects (hence identity) and in a way that allows the object to be garbage collected if not other used (hence weak.)  EventManager class has ActionMaps which has one actionMap for each object.Classic uses of an EventManager are to implement the Observer Pattern, see ChangeNotification or the MorphicModle as examples."
"SortedCollection","I represent a collection of objects ordered by some property of the objects themselves. The ordering is specified in a BlockContext."
"RBSendsDifferentSuperRule","See my #rationale.A common example of this is in creation methods. You might define a method such as:	createInstance		^super new initializeIf the new method is not defined in the class, you should probably rewrite this to use self instead. Also, if the new method is defined, you might question why you need to send new to the superclass instead of to the class."
"MetacelloAbstractVersionConstructor",""
"NBWin32Hdc",""
"PackageTreeExample","PackageTreeExample new open"
"RBFloatEqualityComparisonRule",""
"KMShortcut",""
"SHParserST80Test",""
"AnnouncementMockA","This is a simple test mock."
"AnnouncementsHelp","This is a custom help book for the announcements framework."
"RPackageClassesSynchronisationTest",""
"CompilerSyntaxErrorNotifyingTest","A CompilerSyntaxErrorNotifyingTest is a specialization for testing correct handling of non interactive compiler notification.Non interactive is a very relative notion in Smalltalk...Here it means that user interaction will not happen directly in the TextEditor holding source code, but rather thru a SyntaxError window that will pop-up.This test intercept the Notification before the pop-up is raised."
"KMCombinationTests",""
"FLInMemoryBasicSerializationTest",""
"DuplicatedVariableError",""
"RBAllAnyNoneSatisfyRule",""
"RBPrettyPrintCodeRefactoring",""
"SharedQueueTest",""
