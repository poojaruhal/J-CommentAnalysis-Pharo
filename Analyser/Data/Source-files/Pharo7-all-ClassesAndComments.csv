"class","comment"
"IceTipCommitCommand","I open a the commit window, with all latest changes."
"GLMAllNotNilCondition","Used to test if all defined arguments of a condition or not nil.We use this as a default condition for presentations. Usually, you will want to define a condition as a block such as '[ :class :category | (class isKindOf: Class) and: [ category isKindOf: Symbol ] ]' (or something like that) but sometimes you just want to make sure that all arguments are defined. Since we do not know the number of arguments in advance, we use this class to interpret #glamourValueWithArgs: and return true if all arguments are not nil."
"GLMTabbedArrangement",""
"WatchpointIconStyler","I'm in charge to style an ast when there are watchpoints"
"RegisteredClassAnnotationsTests",""
"EyeSetInspector","Specialized version of inspector showing values only"
"FileTest","Unit tests for file operations"
"RubSelectionChanged","I am raised when the current selection is modified "
"ClyGroupedExtendingPackages","I am a package query result which converts all packages to the instances of ClyExternalPackageMethodGroup.I am used in full browser logic to show extending method groups in the third pane."
"GLMTransmissionStrategy","The classes from this hierarchy define strategies for what should happen after the value have been set to the destination port."
"DynamicComposableModel","This is deprecated class because the original class DynamicComposableModel was renamed to DynamicComposablePresenter. You should stop to use this class and modify your code to use DynamicComposablePresenter."
"FFIIndirectFunctionResolution","I will perform an ""indirect function call"" as explained here: https://en.wikipedia.org/wiki/Function_pointerIn summary: I take a function pointer kept in a global symbol and execute it. I implement the option:  optIndirectCall "
"WorkingCopyToolBar","WorkingCopyToolBar new openWithSpec"
"MetacelloCleanLoadAndTestsNotification",""
"ScrollBar","Inspired by an oiginal design of Hans-Martin Mosner, this ScrollBar is intended to exercise the handling of input events in Morphic.  With sufficient flexibility in this area, all particular behavior can be concentrated in this single class with no need to specialize any other morphs to achieve button, slider and menu-button behavior.Once we have this working, put in logic for horizontal operation as well.CachedImages was added to reduce the number of forms created and thrown away. This will be helpful for Nebraska and others as well."
"ClySwitchBrowserModeCommand","I am a root of commands which are supposed to switch browser mode.My instances are represented in browser toolbar as radio buttons which state reflects the ""applied status"" of the command.So subclasses should implement the method #isAppliedToBrowser.The radio button is wraped by ClyBrowserModeSwitch widget.Also I force browser toolbar update after execution"
"RBExtractToTemporaryRefactoring","Add a new temporary variable for the value of the selected code. Every place in this method using the same piece of code is replaced by accessing this new temporary variable instead.As the code is now only evaluated once for initializing the variable value, this refactoring may modify the behavior if the code statements didn't evaluate to the same value on every call.My preconditions verify that the new temporary name is a valid name and isn't already used (neither a temporary, an instance variable or a class variable)."
"GoferConfigurationReference","A GoferPackageReference refers to the latest version of a Monticello package representing a Metacello Configuration."
"TextEmphasisTest","SUnit tests for TextEmphasis"
"ClyMethodCounterGroupProviderTest",""
"NNavDirectionPreviousBrother","Go back to the brother before"
"NaturalLanguageTranslatorTest","Tests for NaturalLanguageTranslator"
"GLMActionBrickPopupThemer",""
"Trait1",""
"StringMorph","StringMorph is a ""lightweight"" Morph to display a String. It supports only a single font, color, and emphasis combination. For multiple text styles, use TextMorph.Structure:instance var    	Type              Description font 			StrikeFont 		(normally nil; then the accessor #font gives back TextStyle 				or nil			defaultFont) emphasis 		SmallInteger	bitmask determining character attributes (underline, bold, 								italics, narrow, struckout) contents 		String 			The text that will be displayed. hasFocus 		Boolean 		Do I have the keyboard focus or not? A StringMorph may also be used like a SimpleButtonMorph to do an action when clicked. Use the menu 'extras' / 'add mouseUpAction'.The following propery will be defined:aStringMorph valueOfProperty: #mouseUpCodeToRun"
"DateAndTimeUnixEpochTest","Tests for unix epoch of DateAndTime"
"IceTipRepairLocateRepository","I'm a repair action to locate the directory were a repository resides.I'm active when repository can not be located in disk.Notice that doing this can lead you to another situation that needs repair (like a detached status)"
"TextMethodLink","An active link in a text linking to a method"
"GLMBrickHeightTraverser",""
"RBAddPoolVariableChange","I am a refactoring for a pool  variable addition. My changes are executed on the instance side."
"Process","I represent an independent path of control in the system. This path of control may be stopped (by sending the message suspend) in such a way that it can later be restarted (by sending the message resume). When any one of several paths of control can be advanced, the single instance of ProcessorScheduler named Processor determines which one will actually be advanced partly using the value of priority.(If anyone ever makes a subclass of Process, be sure to use allSubInstances in anyProcessesAbove:.)Process-specific storage: 	An old implementation using #environmentAt: [ifAbsent:/put:] protocol are no longer supported.	One must not use a process-specific storage (PSS) methods directly, and instead use ProcessSpecificVariable (or subclass) instances to access process-specific storage.	A new implemention is a revision towards making an access to PSS faster.When new instance of ProcessSpecificVariable are created, it obtains an unique index, which is registered using #allocatePSKey: (see class side).This allows to dynamically create as many process-specific variables as needed, and access them in fast manner via simple array index (instead of dictionary lookup,as in previous implementation).Another important aspect of new implementation is that all values in PSS are held weakly. This is done to prevent accidental memory leaksas well as no need to manually unregistering a process-specific keys , once they are no longer in use."
"SugsDebuggerContext","I know how to talk with a debugger and extract the information needed for the suggestions :)"
"ClyTextWrapModeSwitchMorph","I am a clickable label to toggle wrap mode of text morph. Internal Representation and Key Implementation Points.    Instance Variables	wrapModeLabel:		<StringMorph>"
"SendsDeprecatedMethodToGlobalRule","Checks for sends of deprecated messages that might be removed in upcoming releases of Pharo."
"TraitsTestCase",""
"RubScrolledTextMorphThemer",""
"DiffPresenter","I am a Spec widget useful for visualising differences between two strings.When a classContext: is setted, the strings are highlighted using such contextual information.Examples:self exampleWithoutOptions.self exampleWithOptions."
"RxParser","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--The regular expression parser. Translates a regular expression read from a stream into a parse tree. ('accessing' protocol). The tree can later be passed to a matcher initialization method.  All other classes in this category implement the tree. Refer to their comments for any details.Instance variables:	input		<Stream> A stream with the regular expression being parsed.	lookahead	<Character>"
"TCopySequenceableWithReplacement","A trait for test purposes"
"CmdManualActivationStrategy","I represent manual command activation to allow reuse activation machinery in cases when user creates command instances manually.For example I can be used in button kind widgets where model is command activator. In that case widgets are able create activator directly from given command using my instance and null tool context."
"ObjectsAsMethodsExample",""
"MorphicTabAdapter","I am the adapter used to bridge a TabPresenter and a Tab"
"MalSccNodeDecomposition",""
"MCRepositoryTest","Abstract superclass for Repository tests"
"RGContainerTest","SUnit tests for container"
"OSWindowGenericRendererExampleEventHandler","I am the event handler linked to the SDL2JoystickExample"
"DiffMorphChangeRecordConverter","A DiffMorphChangeRecordConverter is a converter used to show the diff between two methodreferences with a side by side view."
"GLMMorphicActionListRenderer",""
"GLMTabPanelBorder","Specialized border for TabGroup. Does not draw border beneath the selectd tab and only draws on top."
"RubTextChanged","I am raised when the text is modified"
"MethodRemoved","This announcement will be emitted when a method is removed from a trait or a class, using ClassDescription >>removeSelector: or TraitDescription >> removeSelector."
"GLMAccordionArrangement",""
"LinkedListTest","A set of test cases which thoroughly test functionality of the LinkedList class."
"ShAbstractClassBuilderTest","Abstract Test class for the Shift Class Builder tests"
"IRBytecodeGenerator","Handles the byte code generation of jumps, literals and similar things. Byte code independent. The encoder is bytecode dependent.I generate bytecodes in response to 'instructions' messages being sent to me.  I rewrite jumps at the end so their jump offsets are correct (see #bytecodes).  For example, to create a compiled method that compares first instVar to first arg and returns 'yes' or 'no' (same example as in IRBuilder), do:	BytecodeGenerator new		numArgs: 1;		pushInstVar: 1;		pushTemp: 1;		send: #>;		if: false goto: #else;		pushLiteral: 'yes';		returnTop;		label: #else;		pushLiteral: 'no';		returnTop;		compiledMethodYou can send #ir to the compiledMethod to decompile to its IRMethod, and you can send #methodNode to either to decompile to its parse tree.Instance Variables	additionalLiterals:		<OCLiteralSet> Those are literals evaluated for effect and optimized control flow messages selectors used in the method in order to be able to do sendersOf: on these literals with success.	bytes:		<OrderedCollection of bytes> current sequence of bytecodes being written 	encoder:		<BytecodeEncoder> Set the one you need depending on which bytecode set you want to use.	forceLongForm:		<Boolean> true if instance variable access requires a long form (typically, Context access)			Following inst vars are used to map bytecode pc to IR instruction		instrMap:		<OrderedCollection>	instrMaps:		<IdentityDictionary of OrderedCollection>				lastLiteral:		<Behavior> Basically in the case you would compile without annotating the method with its class and its selector, this literal is used to enforce the method class to be a literal to allow super sends.	lastSpecialReturn:		<Message> used to generate quick returns	literals:		<OCLiteralList> literals of the methods	numArgs:		<Smi> number of arguments of the method	numberOfTemps:		<Smi> number of temps of the method	primNumber:		<Smi> primitive number (or 0)	properties:		<AdditionalMethodState | nil> used to hold the additional method state (pragmas for examples)				Following inst vars are used to correctly map the jumps (See #initialize for extra information)	orderSeq:		<OrderedCollection> Reverse map of seq order	seqBytes:		<IdentityDictionary>	seqOrder:		<IdentityDictionary>	jumps:		<IdentityDictionary>	currentSeqId:		<Object>	currentSeqNum:		<Smi>				stack:		<Stack> simulated stack. Only simulates the depth of the stack. Store its maximum value in stacks instance variable.	stacks:		<IdentityDictionary (seqId -> stackCount)> used to find out the maximum depth of the method and therefore set the largeFrameBit"
"ZnHTTPSTests","ZnHTTPSTests.These require that the ZnZodiacNetworkingUtils socket stream factory is enabled:	ZnNetworkingUtils default: ZnZodiacNetworkingUtils new.	Part of Zinc HTTP Components"
"GLMOSWindowMorphWorldRenderer","I am a Glamour renderer that uses morphic in a external window."
"ClyInteractiveRemoveMethodStrategy","I am a base class for remove method strategies which request some additional information from the user.Strategies should be created with browser which is used by subclasses for user requests: 	ClyInteractiveRemoveMethodStrategy newForBrowser: aBrowser Internal Representation and Key Implementation Points.    Instance Variables	browser:		<Object>"
"TickDialogWindow","A TickDialogWindow is a modal dialog window which contains a TickList where user can pick a list of items.See self example"
"ManifestMultilingualEncodings","Different Encodings for Multilingual support"
"IceDiff","I am a diff between two Iceberg Commitish's. I calculate a diff by: - Asking to the repository the list of changed files/packages between the two versions. These are obtained, for example, by the Monticello dirty flags and the list of modified files provided by Git. - Using that list, the diff calculates two trees of IceDefinition. Those trees are represented as compositions of IceNode. - Then, the two trees are diff'd (see #diff:with:), and a tree of differences is obtained. This tree is also a composition of IceNodes, but contains IceOperation objects instead (additions, deletions and modifications).The diff is calculated from left to right. This means that the resulting operations are the operations to apply on the right tree (the destination) to obtain the same tree as in the left (the source).I am created by doing one of the following:- IceDiff from: aVersion to: anotherVersion.- IceDiff new	sourceVersion: aVersion;	targetVersion: anotherVersion;	build;	yourself"
"IceTipFetchAllProjectCommand","I'm a command to perform a fetch operation on all registered projects."
"Editor","New text editors.TextEditor provides most of the functionality that used to be in TextMorphEditor. This class is no longer a Controller!SmalltalkEditor has Smalltalk code specific features."
"FLBufferedWriteStream","FLBufferedWriteStream is a buffered write stream we use for Fuel serialization. Instead of directly using the stream provided to FLSerializer at creation time by the user, we create an instance of FLBufferedWriteStream for that stream.MultiByteFileStream has no real buffer and goes to disk too frequently. With FLBufferedWriteStream we keep stuff in a cache and only go to disk when this is full.The way of using it is jut FLBufferedWriteStream on: aWriteStream. For example:FLBufferedWriteStream on: (FileDirectory default forceNewFileNamed:  'TestFile') binaryWith the message #sizeBuffer: you can set the size of the buffer.Make sure to always send #flush or #close when you're done, otherwise the last buffer might not yet have been written."
"FFIExternalStructureFieldParserTests","Tests for FFIExternalStructureFieldParser"
"MirrorPrimitives","It is container of all mirror primitives implemented in VM.Mirror primitives allow to call some primitive on object without sending message to it. It is achived by using receiver as first argument of primitive.Mirror primitives  violates the principle that each object has sovereign control own state (for example  over the storing of values into its instance variables). But it is essential for the	 debugger. 	For details see  Object documentation whatIsAPrimitive."
"FFIOop",""
"DynamicEyeElement","I am a dynamic eye element, if you are too lazy to create your own subclass of AbstractEyeElement, use it..."
"ZnPercentEncoderTests",""
"SpecTransferMorph","I am a Spec specific subclass of TransferMorph used to initialize the trasnfer morph state correctly with the Spec constraints"
"MorphicMenuItemAdapter","I am the bridge between a MenuItemPresenter and a ToggleMenuItemMorph"
"IceAddition","I am an addition in a tree. I contain the definition I'm adding. I know what is the icon for addition and how to calculate a conflict with other operations."
"TIndexAccessForMultipliness","A trait for test purposes"
"RBPrecedenceRule","Checks for mathematical expressions that might be evaluated different (from left-to-right) than the developer thinks."
"InstructionClient","My job is to make it easier to implement clients for InstructionStream. See InstVarRefLocatoras an example. "
"LGitFetchPruneTypeEnum",""
"RBChildrenToSiblingsRefactoring","I am a refactoring operation for moving a class and its subclasses to a new super class.You can choose which of the original childclasses should become now siblings.For example,  we can generate a new Superclass for ClassS inObject >> ClassP >> ClassSObject >> ClassP >> ClassS >> ClassC1Object >> ClassP >> ClassS >> ClassC2Object >> ClassP >> ClassS >> ClassC3and choose to move ClassC2 and ClassC3 to the new superclass - ClassNewP.Object >> ClassP >> ClassNewP >> ClassSObject >> ClassP >> ClassNewP >> ClassS >> ClassC1Object >> ClassP >> ClassNewP >> ClassC2Object >> ClassP >> ClassNewP >> ClassC3Any method and instance variables,  defined in ClassS and used by the new siblings of ClassS are pushed up to the new superclass."
"RBBrowserSupportHelp","This is the chapter of  the refactoring framework help about refactoring support in the System Browser."
"MorphicCoreUIManager","This is a very simplified version of MorphicUIManager for Moprhic subset that contains ony Morphic-Core package and has only support of the most basic morphs."
"FTAllItemsStrategy","I am a Strategy that will use the function on all the tree.BE CAREFUL, do NOT use me if you are not sur that your tree is finish. If a branch is infinite I will go in an infinite loop. If you are sure about it, use this otherwise use other search strategies. Description-----------------------I will search in every item of the tree and I needed I will expand the items to show the results of the function.As said in my superclass I am use by a FTTreeDataSource to help with a FTFunction.Public API and Key Messages------------------------ #realSearch 	is the method that will launch the search.Example-----------------------	| ds |	ds := FTTreeDataSource		roots:			((ProtoObject allSubclasses sort: [ :a :b | a asString < b asString ])				reject: [ :e | e asString endsWith: 'class' ])		children: [ :item | item subclasses sort: [ :a :b | a asString < b asString ] ].	ds searchStrategy: #allItems. ""This will say to the FTTreeDataSource to use me.""	FTTableMorph new		extent: 200 @ 400;		dataSource: ds;		explicitFunction;		openInWindow Internal Representation and Key Implementation Points.-----------------------    Instance Variables	index:		I am the index of tfe elements I am testing now. 	result:		I am a collection of index that is the result of the search."
"TBehaviorCategorization","Kernel trait for Behavior categorization"
"NOCEntryList","I am the list of entries (possible symbols) returned by nocompletion algorithm.I am sorted according to last acceptance from the user."
"ClyTypedScope","My subclasses represent the scope of concrete typed objects.I do not require them to implement any specific methods. They just define logically what objects they represent. And they should provide methods to assess information from them.For example there is ClyClassScope which is based on set of classes. And there is ClyPackageScope which is based on set of packages.And they provide methods which queries are using to retrieve required objects: 	aClassScope classesDo: aBlock	aClassScope methodsDo: aBlock 	aPackageScope packagesDo: aBlock 	aPackageScope classesDo: aBlock 	aPackageScope methodsDo: aBlockI provide several methods to instantiate typed scopes:	ClyClassScope of: String.	ClyClassScope of: String in: ClyNavigationEnvironment currentImage.	ClyClassScope of: String in: ClyNavigationEnvironment currentImage named: 'String scope'.They create class scopes based on single basis object String.	ClyClassScope ofAll: {String. Point}.	ClyClassScope of: {String. Point} in: ClyNavigationEnvironment currentImage.	ClyClassScope of: {String. Point} in: ClyNavigationEnvironment currentImage named: 'String and Point'.They create scopes of two classes String and Point.Also users can ask for empty scope: 	ClyClassScope empty.	ClyClassScope emptyIn: ClyNavigationEnvironment.	I implement several methods convert existing scopes to new one with modified basis:- withNewBasisObjects: newBasisObjectsIt returns new scope similar to receiver but with basis.- withExtraBasisObject: extraBasisObject It returnes new scope similar to receiver but with basis extended by given extraBasisObject.- withExtraBasisObjects: extraBasisObjects It returnes new scope similar to receiver but with basis extended by all extraBasisObjects.- withoutBasisObject: existingBasisObject It returnes new scope similar to receiver but with basis which excludes existingBasisObject. It ignores the case when given object is not in the basis of receiver scope.- withoutBasisObjects: existingBasisObjects It returnes new scope similar to receiver but with basis which excludes all existingBasisObjects. It ignores the case when some of given objects are not in the basis of receiver scope.- restrictedBy: anotherScopeIt returnes new scope similar to receiver but with basis of given anotherScopeAlso I provide scope composition method which merges two scopes: 		(ClyClassScope of: String) , (ClyClassScope of: Array)	It returns ClyCompositeScope instance. To support composite scope and query I introduce method #asUnifiedInstance which supposed to return similar scope with same kind of scope class and internal parameters but with empty basis.So any possible instance of my subclass should produce equal unified instance with this method. It is used to merge subqueries and their scopes when ClyUnionQuery is built. 	Also I implement my superclass abstract methods like: - supportsQuery: aQuery. It returns true for any kind of ClyTypedQuery.- representsScope: aScopeClass. It just checks if receiver is kind of given scope class.- adoptQuery: aQuery. It just assigns receiver to the aQuery to be it scope."
"OCASTTranslator","I visit an abstract syntax tree and generate IR (intermediate representation) instructions for each node by sending the appropriate message to my methodBuilder (an IRBuilder).  I hold onto my two subclasses OCASTTranslatorForValue for generating instructions for effect and value, andOCASTTranslatorForEffect for generating instructions for effect only.Which one to use depends on the AST nodes and whether the code will only be executed (for effect only) or if the value is used afterwards (for value).For example, when translating a return, the value to return needs to be pushed on stack, so the valueTranslator is used:visitReturnNode: aReturnNode 	valueTranslator visitNode: aReturnNode value.	methodBuilder returnTop.	Whereas, in #visitMethodNode:,  the effectTranslator is used, because no value is pushed on stack at the end of the method body:...effectTranslator visitNode: aMethodNode body.."
"FFIWin64CallbackArgumentReader","I am the responsible to parse the callback arguments in Win64.In Win64 the structures are always passed by reference. The first 4 parameters are passed in the registry. If the parameter is an integer, it is in the integer registers (general purpouse registers).If the parameter is a float, it is in the float registers (SSE registers).The first parameter is always in the first register of the set, the second always in the second register, etc. Following the type of arguments.Ex: int f( int a, float b, char c)The parameter a is in the first integer register, the parameter b is in the second float register, and the parameter c is in the third integer register.The fifth and following parameters are passed in the stack.If any of the four first parameters does not fit in the registers are passed in the stack."
"IceTipRemoteActionCommand","I'm a generic command to perform actions where remote is the main actor.Tipically, this is usually Pull and Push operations. My children will take care about it."
"GrafPort","Provides extended Graphic support like translucency"
"SlotLayoutExtensionTest",""
"ClyFFIMethodGroupProvider","I provide ""FFI calls"" method groups when given classes define them"
"LGit_GIT_ENOTFOUND",""
"ClyClassContextOfFullBrowser","I am a context of selected classes in full browser"
"FFIExternalStructureReferenceHandle","I'm an offset accessor for nested structures. The idea is that I remap the accessing to an offseted byte array, thus providing access to the inner structure without copying the values. This is useful when you have nested structures, something like this: struct StructNested {	int value;}struct StructA {	int one;	struct StructNested theNest;}then you can do something like this: s := StructA new.s theNest value: 42. And the value will be set in the StructA instance, not in a copy as before. "
"OpenOnStringExample","I am the component of DynamycSpecExample used for String.self example I show also how to dynamically redrawn a widget."
"MCDirectoryRepository","A metacello repository in a directory "
"OpenOnNilExampleTest",""
"ValueAdded","A ValueAdded is an announcement raised when an item (or a collection of items) was added to CollectionValueHolder."
"OSTouchTwoFingersRotationBeginEvent","Two fingers had began to rotate"
"IceMergeResolutionRequest",""
"RBCommentTest","SUnit tests for RBComment"
"IRReturnInstVar","specific node when returning an inst var"
"CalendarPresenter","I am a composable presenter to show a calendar to the user.See my example methods on class side."
"ZnStatusLineTests",""
"AthensStrikeFontRenderer","I am used to render font with cairo ""toy"" text api if no freetypefont is used.AthensCairoSurfaceExamples exampleDrawText"
"OSTouchGestureNeedingThresholdDetector","I am a gesture detector for gestures who has to travel a certain distance before being detected"
"PluggableListItemWrapper","luggableListItemWrapper makes it more easy for clients to use hierarchical lists. Rather than having to write a subclass of ListItemWrapper, a PluggableListItemWrapper can be used to provide the appropriate information straight from the model:	string - an explicit string representation (contrary to the 'item' which contains any kind of object)	getStringSelector - a message invoked to retrieve the sting representation of its item dynamically from its model (when a constant representation is undesirable)	hasContentsSelector - a message invoked in the model to answer whether the item has any children or not.	getContentsSelector - a message invoked in the model to retrieve the contents for its item.All callback selectors can have zero, one or two arguments with the item and the wrapper as first and second argument."
"TestInheritableVariable","I am example of inheritable process specific variable.I implement isInheritable on class side to return true when I enabled (I become enable only in tests because existance of inheritable variables effect process instantiation performance)"
"GTBytecodeBrowser","This is a simple browser that displays bytecode and previews each node on the source code.Example:self openOn: (self>>#compose) "
"DoubleWordLayout","I am a raw data layout that holds double words (64 bit)."
"KMDispatchChain","I am an object that controls the dispatch order of keymaps given a hierarchy of morphs."
"ISO88597TextConverter","Text converter for ISO 8859-7.  An international encoding used for Greek. "
"DAPackageAnalyzerPackageDependenciesWindow","UI merging SpecTreeModel cycles and browser"
"ClyMethodTagsEditorMorph","I am status bar tool for method editors to input method tags for the editing method. Internal Representation and Key Implementation Points.    Instance Variables	textMorph:		<Object>"
"IceTipToolbarItemButtonMorph","I implement a toolbar button.I do not have border or insets.I can show a badge.I'm used with IceTipToolbarItem"
"ZnUnknownHttpVersion","ZnUnknownHttpVersion is signalled when an unknown/unsupported HTTP version is found.Part of Zinc HTTP Components. "
"EpDashboardPresenter","I'm a Spec model to manage the global state of Epicea.Open with:self open"
"FLLightGlobalMapper","I map classes, traits, and global objects that belong to Smalltalk dictionary. I collaborate in serialization default behavior. For example, the global Transcript as well as any class in the image, are mapped by me."
"ShAbstractChangeDetector","I detect the changes to a given Class.My subclasses implements #compareClass: oldClass with: aBuilder to calculate the changes performed to the class.I am responsible of adding the changes to the builder..Check the initialization of the builder in the ShiftClassBuilder and in the ShDefaultBuilderEnhancer to see when the comparers are registered in the Shift class builder."
"FileCompilerRequestor","I am an Object used to interact with the OpalCompiler.I keep a reference to the original input so that error messages can be properly analyzed later-on."
"IcePluginManager","I keep plugins configured for a repository. WARNING: Managers are kept in a weak dictionary with Repository as a key, reason why plugins can't have any kind of reference that could cause a memory leak. Consider using stateless plugins or instance copies of relevant information instead."
"ObsoleteTest","Example class for ClassTest"
"AthensWorldMorph","An AthensWorldMorph is a special version of a WorldMorph.It is within a real Morph in a real morphic world. The Morph it is in defines the DisplayScreen dimension. (see AthensWrappedWorldDisplay)"
"ClassChangeRecord","A ClassChangeRecorder keeps track of most substantive changes premissible in a project, isolated or not.Structure:inForce		a boolean			Tells whether these changes are in effect.			true for all changeSets in and above the current project.			It should be sufficient only to record this for the changeSet			as a whole, but this redundancy could help in error recovery.classIsLocal	a boolean			True if and only if this class is defined in this layer of the			project structure.changeTypes an identitySet			Summarizes which changes have been made in this class.			Values include #comment, #reorganize, #rename,			and the four more summarized below.thisName	a string			Retains the class name for this layer.priorName	a string			Preserves the prior name.thisComment	a text			Retains the class comment for this layer.priorComment	a text			Preserves the prior comment.thisOrganization	a classOrganizer			Retains the class organization for this layer.priorOrganization	a classOrganizer			Preserves the prior organization.thisMD	a methodDictionary			Used to prepare changes for nearly atomic invocation			of this layer (see below).priorMD	a methodDictionary			Preserves the state of an altered class as it exists in the next			outer layer of the project structure.methodChanges		a dictionary of classChangeRecords			Retains all the method changes for this layer.Four of the possible changeTypes are maintained in a mutually exclusive set, analogously to MethodChangeRecords.  Here is a simple summary of the relationship between these four changeType symbols and the recording of prior state			|	prior == nil			|	prior not nil		---------	|----------------------------	|--------------------	add		|	add					|	change	---------	|----------------------------	|--------------------	remove	|	addedThenRemoved	|	removeA classChangeRecorder is notified of changes by the method		noteMethodChange: <ClassChangeRecord>.ClassChangeRecorders are designed to invoke a set of changes relative to the definition of a class in an prior layer.  It is important that both invocation and revocation of these changes take place in a nearly atomic fashion so that interdependent changes will be adopted as a whole, and so that only one flush of the method cache should be necessary.  A further reason for revocation to be simple is that it may be requested as an attempt to recover from an error in a project that is failing."
"AthensCubicSegment","i represent a cubic Bezier path segment"
"MetacelloScriptingResource",""
"ClyClassWithProblemMethods","I am an example class which methods have example critiques"
"DeflateStream","I'm the base class for ""stream compressor"". For example, my subclass GZipWriteStream can compress a stream contents using gzip algorithm.Try:gzData := String streamContents: [:aStream|         (GZipWriteStream on: aStream)                nextPutAll: 'Some data to be gzipped';                close. ].Transcript         show: gzData;         cr;        show: (GZipReadStream on: gzData) upToEnd;        cr.See InflateStream"
"RBAtIfAbsentRule","Replaces at:ifAbsent: by at:ifAbsentPut:. Its leads to shorter and more readable code."
"CurrentImage","I am an object representing the current image to get all sorted packages for browsing.CurrentImage new packages	=> all packages in the image sorted	THIS CLASS IS NOW DEPRECATED AND OBSOLETE - please use   Smalltalk image packages to receive all packages in the image sorted"
"GTSpotterCandidateAdded",""
"RBAddAssignmentTransformationTest",""
"TreeNodePresenter","I represent a node in a tree widget.I hold an item, an icon and the list of my children.In addition, I have a filtering mechanism"
"GTSpotterCategorySelected",""
"T2TraitWithCategories","Unit test for categorization of traits"
"FBDLoop","I represent a loop in the bytecode.My instances represent an unconditional loop. These loops can't fall through the code right after as it's infinite, however, it can finish if there is a return inside.Conditional loops are instances of my subclass.backjump <Smi> pc of the backjump instruction"
"MorphTreeNodeMorph","I draw the node part of a tree."
"IcePharoPlugin",""
"LargeNegativeIntegerTest","SUnit tests for large negative integers"
"PharoTutorialAPIHelp","I'm a PharoTutorial which builds a HelpSystem book by collecting comment from classes and method."
"IceTipCommitishModel","I'm a base model for all commitish models to be used.I can provide #commitModels which changes depending on concrete model."
"ClyMessageBasedQuery","I am a root of hierarchy of method queries which uses set of selectors to filter methods.My instances can be created using following methods:	ClyMessageSenders of: #selector.	ClyMessageImplementors of: #selector from: aScope.	ClyMessageSenders ofAny: #(selector1 selector2).	ClyMessageImplementors ofAny: #(selector1 selector2) from: aScope.I provide suitable printing methods and correct comparison implementation. Internal Representation and Key Implementation Points.    Instance Variables	selectors:		<Array of<Symbol>>"
"FFIExternalStructureFlatLayoutField","I represent a field in a structure layout. I am used for computing which fields present in a structure are passed in registers, and which are not."
"RBRefactoringCoreHelp","A chapter with a more in-depth description of the core components of the refactoring engine."
"SHParserST80Test","SUnit tests for Shouts ST80 parser"
"FFICompilerPluginTests","Tests for FFICompilerPlugin"
"GLMRubricHighlightedTextPresentation","|browser|browser := GLMTabulator new.browser row: #row.browser transmit to: #row; andShow: [ :composite |	composite custom: (GLMRubricHighlightedTextPresentation new		editingMode: [GLMHighlighterTextRubEditingMode 			withStylerDecorator: (RbEPersonDecorator new				styler:  (GLMHighlighterTextParserStyler new					parser: RbEPersonColorizer new))]) ].	browser openOn: 'person {		name	=	''Phil'';	age = ''23'';	}person {}'."
"FFITestStructureSmallFloatStructure","I am a structure that in the AMD64 SystemV ABI is passed in 2 float registers."
"FLMaterializer","I am a binary object materializer. See an example of use in FLSerializer's documentation."
"RBPushDownInstanceVariableTest",""
"MultiByteBinaryOrTextStream","It is similar to MultiByteFileStream, but works on in memory stream."
"RelativePathStoredSetting","I am responsible for storing information about RelativePath objects."
"ClyMetalinkCommand","I am a base class for commands which add/remove metalinks into given method or source node"
"MessageDialogWindow","Dialog window displaying a message with a single OK button. Escape/return will close. Icon is a themed information icon."
"TimeProfilerNode","A TimeProfilerNode represents a node in the tally tree"
"OpenOnIntExample","I am the component of DynamycSpecExample used for Integer.self example "
"RBLongMethodsRule","This smell arises when a long method is found with meny statements. Note that, it counts statements, not lines. Long methods should often be split into several smaller ones. Long methods should often be split into several smaller ones. When you start to need an empty line to separate groups of statements, this is an indication that you should probably define a new method. 	Do not forget that methods are points of extension in an object-oriented language. It means that each time you define a method, a subclass may override and extend it while taking advantage and reusing the calling context of your method. This is the basis for the Hook and Template Design Pattern and central to good object-oriented design. So keep your methods short. Use the extract method refactoring, which even checks whether the method you are extracting already exists in the class. 	The defined number of statements can be edited in #longMethodSize. In the future such rule should hold state and not be based on method redefinition for its customization. "
"LGitSignature","A LGitSignature represents the information of a specific person for a commit.Instance Variables	email:		ByteString	name:		ByteString	when:		DateAndTime"
"OCCompilerExceptionsTest",""
"ClyClassReferencesQueryTest",""
"GTGenericStackDebuggerTest",""
"ZnMimeType","I am ZnMimeType.Mime types are an element used in describing resources, more specifically their format.Here are some examples MIME types:	text/plain	text/html	text/plain;charset=utf-8	image/png	text/* A mime type has a main/sub form with optional parameters. For more information: http://en.wikipedia.org/wiki/MIME_typeI know whether I am binary or not and know my charset when applicable.My class side offers access to some common constants.Note that for text types we default to UTF-8 encoding.Examples:	ZnMimeType textPlain = 'text/plain;charset=utf-8' asZnMimeType.	ZnMimeType textPlain charSet.	ZnMimeType textHtml matches: ZnMimeType text.	ZnMimeType default matches: ZnMimeType any.	ZnMimeType imagePng isBinary.	ZnMimeType forFilenameExtension: 'html'.I started life as a copy of WAMineType.Part of Zinc HTTP Components."
"FLPositive64SmallIntegerCluster","unsigned, 64-bit integer"
"RBMoveMethodToClassTest",""
"SpecTableLayoutSend","A SpecTableLayoutSend is a spec layout action used when a selector is sent to the layout. It differs from SpecLayoutSend by being independent from specific layout."
"AthensShadowPaint","I representing a shadow paint object used by Athens.My subclasses provide backend-specific implementation.I am more serving to define the common protocols andrequirements for all backends (such as defaults).IMPORTANT NOTE: a shadow paint object provides a protocol only for setting shadow properties, but not retrieving them back.This is intentionally, because the way how these properties ismanaged are highly backend-specific. The shadow paint has following properties: - color. A shadow color defined in RGBA color space.	Default: Color black alpha: 0.5 - shadow width. Can be set using #width:	Default: if width is not set explicitly for shadow paint,		it is assumed to be equal to 2.0.		 - shadow offset. Defines how far shadow is located.	Shadow offset is a point where x component defines ofset on x-asix and y component on y-axis.		Default: if offset is not set  explicitely it is assumed to be equal 2@2.			 - shadow blur. Defines how smooth shadow is.	Blur is a point with x component defining bluring along x-axis and y component along y axis		Default: if blur is not set explicitely it is assumed to be equal 4@4"
"ManifestToolExternalBrowser","Package for hosting browsers to acces external infos (like *.cs files and other)"
"IceMerge","I implement the merge between two versions. I calculate the diff tree of each version and then calculate a merge tree containing the operations that should be applied to the right target tree to arrive to the left tree.I am created by doing one of the following:- IceMerge from: aVersion to: anotherVersion.- IceMerge new	sourceVersion: aVersion;	targetVersion: anotherVersion;	build;	yourself"
"ManifestCollectionsWeak","All weak collections"
"RubScrolledTextSideRuler","I am an abstract class to add decoration on a text area"
"GLMUIThemeExtraIcons","This class offers a number of extra icons that work with the Glamorous Theme."
"RBSmalllintTestNoClassCommentObject",""
"RFEntityReification","#entity stands for the structural entity that the link is installed on. It is #node for AST nodes, #variable for variables."
"FormTest","SUnit tests for class Form"
"ManifestSystemSessionManager",""
"IceTipEditProjectDialog",""
"FLRectangleCluster","FLRectangleCluster is an optional class that optimizes Rectangle instances, since there are a lot of instances in the system, it makes sense to optimize them. We take advantage of bytecode optimizations done by Pharo for messages like #new, #@, #x and #y. In addition, we avoid the overhead of class reshape, etc. "
"DiffChangeMorph","A morph to display text differences"
"DurationTest","SUnit tests for class  Duration"
"EditableDropListMorph","I'm a DropListMorph which content can be modified.Try:(EditableDropListMorph        on: [#(one two three)]        list: #value        selected: nil        changeSelected: nil) openInWindow extent: 400@20."
"EncodedCharSet","An abstract superclasss of the classes that represent encoded character sets.  In the old implementation, the charsets had more important role.  However, in the current implementation, the subclasses are used only for keeping the backward compatibility.	The other confusion comes from the name of ""Latin1"" class.  It used to mean the Latin-1 (ISO-8859-1) character set, but now it primarily means that the ""Western European languages that are covered by the characters in Latin-1 character set."
"OCMockCompilationClass",""
"ClyTraitUserScopeTest",""
"EditorFindReplaceDialogWindow","A find/replace dialog window for editors"
"TimespanDoTest","I am one of several Sunit test Cases intentended to provide complete coverage for the Chronology set of classes as part of the external testing. See DateAndTimeEpochTestCase for a complete list.  tlk.My fixtures are:aDate = January 8, 2003, midnightaDuration = 91 daysaTimeSpan= 91 days, starting January 8, 2003, midnight"
"DockingBarToggleMenuItemMorph","A DockingBarToggleMenuItemMorph is a specialized version of its superclass for DockingBar behavior.There is a bit of duplication between DockingBarToggleMenuItemMorph and DockingBarMenuItemMorph because iof single inheritance limit: DockingBarToggleMenuItemMorph inherits from ToggleMenuItemMorph (and also from DockingBarMenuItemMorph).One of the problem is that in addition, the use of toggleMenuItem or simple menuItem looks random.DockingBarMenuItemMorph is created by	add: wordingString icon: aForm help: helpString subMenu: aMenuMorph 	and DockingBarToggleMenuItemMorph is created by	add: wordingString font: aFont icon: aForm help: helpString subMenu: aMenuMorph "
"OSWindowCloseEvent","I am delivered when user closing the window.The default action (unless suppressed) will also destroy the window."
"SelectorFilter","A filter for selectors"
"GTSpotterRecorderContextChangedEvent","A GTSpotterRecorderContextChangedEvent stores current query written in Spotter input field. This event stores the size of the query and wheather or not the current query is a refinment of a previous query.Instance Variables	text:		<String>text	- query writen in Spotter input field"
"IceLogVersion","I'm a log version. I keep a commit and a method definition from each method version tracked on IceLog>>#historyOfMethod:."
"GLMWrapperMorphicTest",""
"TextMorph","TextMorphs support display of text with emphasis.  They also support reasonable text-editing capabilities, as well as embedded hot links, and the ability to embed submorphs in the text.Late in life, TextMorph was made a subclass of BorderedMorph to provide border and background color if desired.  In order to keep things compatible, protocols have been redirected so that color (preferably textColor) relates to the text, and backgroundColor relates to the inner fill color.Text display is clipped to the innerBounds of the rectangle, and text composition is normally performed within a rectangle which is innerBounds inset by the margins parameter.If text has been embedded in another object, one can elect to fill the owner's shape, in which case the text will be laid out in the shape of the owner's shadow image (including any submorphs other than the text).  One can also elect to have the text avoid occlusions, in which case it will avoid the bounds of any sibling morphs that appear in front of it.  It may be necessary to update bounds in order for the text runaround to notice the presence of a new occluding shape.The optional autoFitContents property enables the following feature:  if the text contents changes, then the bounds of the morph will be adjusted to fit the minimum rectangle that encloses the text (plus any margins specified).  Similarly, any attempt to change the size of the morph will be resisted if this parameter is set.  Except...If the wrapFlag parameter is true, then text will be wrapped at word boundaries based on the composition width (innerBounds insetBy: margins) width.  Thus an attempt to resize the morph in autofit mode, if it changes the width, will cause the text to be recomposed with the new width, and then the bounds will be reset to the minimum enclosing rectangle.  Similarly, if the text contents are changed with the wrapFlag set to true, word wrap will be performed based on the current compostion width, after which the bounds will be set (or not), based on the autoFitcontents property.Note that fonts can only be applied to the TextMorph as a whole.  While you can change the size, color, and emphasis of a subsection of the text and have it apply to only that subsection, changing the font changes the font for the entire contents of the TextMorph. Still a TextMorph can be composed of several texts of different fonts| font1 font2 t1 t2 tMorph|tMorph := TextMorph new.font1 := (TextFontReference toFont: (StrikeFont familyName: 'Atlanta' size: 22)).font2 := (TextFontReference toFont: (StrikeFont familyName: 'Atlanta' size: 11)).t1 := 'this is font1' asText addAttribute: font1.t2 := ' and this is font2' asText addAttribute: font2.tMorph contents: (t1,t2).tMorph openInHand.Yet to do:Make a comprehensive control for the eyedropper, with border width and color, inner color and text color, and margin widths."
"GTInspectorDynamicNode","I am a variable node for representing any dynamically computed attribute that should be displayed in the Raw presentation. I should not be used for slots or indexed variables."
"FastTableModel","This is deprecated class because the original class FastTableModel was renamed to FastTablePresenter. You should stop to use this class and modify your code to use FastTablePresenter."
"AthensMorphicGradientPaint","Deprecated class"
"ClassQueryTest","Unit tests for queries on classes"
"ClyRunTestsFromSelectedItemsCommand","I am a root of commands hierarchy which are supposed to run tests related to selected items.I provide initialization, description and icon for subclasses. Internal Representation and Key Implementation Points.    Instance Variables	testItems:		<Collection of<ClyDataSourceItem>>"
"RBScannerTest","SUnit tests for RBScanner"
"ProperlyImplementedSUnitClassesTest","This class checks if test classes have been properly implemented"
"WBWindowsWebBrowser","Provides native access to the web browser on Windows. Do not use directly, use class WebBrowser instead."
"OCTempVariable","I model temp variables. With Closures, there are two kinds: Copying and those that are stores in a so called temp vector, a heap allocated array that itself is stored in an un-named copying temp variable."
"DamageRecorder","Recording damages to repair by repainting"
"TonelWriter","I'm a monticello writer for tonel format, writing - a package per directory - a class per file - a set of extensions to a single class per file (for example, all extensions of a package to String will be in a single file)I'm created on a file reference to a directory where the package will be written.[[[TonelWriter on: ('someDirectory' asFileReference ensureCreateDirectory)]]]My main methods are- ==#writeVersion:== that receives as argument a monticello version to write, from where I'll extract the corresponding monticello snapshot.- ==#writeSnapshot:== that receives as argument a monticello snapshot to write, from where I'll write all the contained definitions.I also provide a way to easily export a single class in the Tonel format to a stream. [[[	TonelWriter sourceCodeOf: self.		(FileSystem memory / 'test.st') writeStreamDo: [ :s | TonelWriter exportClass: self on: s ]; yourself.]]]! Implementation detailsNotice that while writing, if the written package/snapshot already exists in the directory I'll overwrite it (i.e., remove it and recreate it)."
"RubSegmentIconMenuItemMorph",""
"FLError","I represent an error produced during Fuel operation."
"RubMorphAnnouncement","I am an abstract class related to morph announcements"
"ZnBufferedReadStream","I am ZnBufferedReadStream.I wrap another ReadStream and add efficient buffering for the typical access pattern of parsers: sending lots of #next, #peek and #atEnd messages.By design I do not implement #position and #position: or anything based on that.I can wrap both binary or character streams and act accordingly.Part of Zinc HTTP Components."
"FLHashedCollectionSerializationTest","SUnit tests for fuel serialization of hashed collections"
"MCLazyVersionInfo","A MCLazyVersionInfo puts ancestor and stepChilds data in WeakArrays to allow their memory to be reclaimed and reloaded on demand.For all purposes, a MCLazyVersionInfo behaves exactly like a MCVersionInfo with the same data, but:- let the ancestry (and step children) be garbage collected- and reload that ancestry (and stepChildren) from the MC repositories when accessed (MCLazyVersionInfo>>loadAncestorsAndStepChildren for the reload, MCLazyVersionInfo>>ancestors and MCLazyVersionInfo>>stepChildren for the access).MCLazyVersionInfo is installed just as the ancestor in a MCWorkingAncestry (the direct ancestry of a WorkingCopy, which is the state all packages take when they are loaded in an image). It allows a MCWorkingAncestry to still know which package it is coming from, and, of course, the MCLazyVersionInfo to be able to reload the relevant ancestry from the right package.Once installed, by flushing the Monticello package cache, all the stored ancestry is garbage collected, except the roots of those ancestry trees, which are the MCLazyVersionInfo instances inside the MCWorkingAncestry instances.Warnings:- Algorithms which traverse the entire ancestry chain of all packages will force a reload of all the packages contained in the image, which is a time and memory and network consuming process...- It degrades gracefully when reloading becomes impossible (returns an empty ancestry, keeps knowledge of the fact some ancestry is missing, reloading a full ancestry on when possible). This has been tested."
"LargePositiveIntegerTest","SUnit tests for large positive integers"
"GLMCustomCell",""
"ManifestCollectionsSequenceable","Sequenceable collections: arrays, intervals, ordered collections and dictionaries, etc."
"RBTransformationRuleTest1",""
"CircleMorphTest","A CircleMorphTest is a subclass of MorphTest.  It was first implemented when removing some unused and broken functionality.My fixtures are morph, a CircleMorph and world."
"MultiByteFileStreamFileOutTestClass","MultiByteFileStreamFileOutTestClass is used in MultiByteFileStreamTest>>#testFileOutNonAscii."
"CompositionScanner","A CompositionScanner measures text and determines where line breaks.Given a rectangular zone on input, it is used to split text in horizontal lines, and produce information about those lines on output (at which index a line starts/stops, which vertical space does the line require, which horizontal space if left for adjusting inter-word spacing, etc...)Instance Variables	baseline:		<Number>	baselineAtSpace:		<Number>	lastBreakIsNotASpace:		<Boolean>	lineHeight:		<Number>	lineHeightAtSpace:		<Number>	nextIndexAfterLineBreak:		<Integer>	spaceIndex:		<Integer>	spaceX:		<Number>baseline	- the distance between top of line and the base line (that is the bottom of latin characters abcdehiklmnorstuvwx in most fonts)baselineAtSpace	- memorize the baseline at last encountered space or other breakable character.	This is necessary because the CompositionScanner wants to break line at a breakable character.	If a word layout overflows the right margin, the scanner has to roll back and restore the line state to last encountered breakable character.lastBreakIsNotASpace	- indicates that the last breakable character was not a space.	This is necessary because handling a line break at a space differs from non space.	If line break occurs on space, the space won't be displayed in next line.	If it's another breakable character, it has to be displayed on next line.lineHeight	- the total line height from top to bottom, including inter-line spacing.lineHeightAtSpace	- the line height at last encountered space or other breakable character.	See baselineAtSpace for explanation.nextIndexAfterLineBreak	- the index of character after the last line break that was encountered.spaceIndex	- the index of last space or other breakable character that was encounteredspaceX	- the distance from left of composition zone to left of last encountered space or other breakable character 	See baselineAtSpace for explanation.Note: if a line breaks on a space, a linefeed or a carriage return, then the space, linefeed or carriage return is integrated in the line.If there is a carriage return - linefeed pair, the pair is integrated to the line as if it were a single line break for compatibility with legacy software."
"GTEventBundleTest","A GTEventBundleTest is a test class for testing the behavior of GTEventBundle"
"ZnMaximumNumberOfDictionaryEntries","I am ZnMaximumNumberOfDictionaryEntries.I am a DynamicVariable and a ProcessSpecificVariable.I am used to control the maximum number of entries being added to a limited ZnMultiValueDictionary.Used by ZnMultiValueDictionary and thus for reading headers,  url query and application form url encoded entity fields. This helps to protect us from malicious content."
"LGitWriteBackValueUInt",""
"MetacelloValidationFailure",""
"AthensGradientPaint","I am used to convert gradient fill style(s) to appropriate paint(s) in Athens."
"RBUnconditionalRecursionRule","Checks for unconditional recursion that might cause the image to hang when executed."
"IceRepositoryRegistryAnnouncement","I'm a generic announcement to notify when the repository registry has changed."
"FileSystemResolver","I am an abstract superclass for objects that can resolve origins into references. Such objects use the Chain of Responsibility pattern, and when unable to resolve a particular origin, delegate that resolution request to the next resolver in the list.next	The next resolver in the list, or nil"
"SycMethodNameEditor","I am an editor to set the name of a method.I was copied from OB.I should be created on the instance of RBMethodName: 	methodName := RBMethodName selector: selector arguments: argumentNames copy.	dialog := SycMethodNameEditor openOn: methodName.I modify given method name instance. When dialog is submitted you can ask new properties: 	methodName selector.	methodName argumentsInternal Representation and Key Implementation Points.    Instance Variables	argumentIndex:		<Integer>	labelMorph:		<StringMorph>	methodName:		<RBMethodName>	selectorField:		<Object>"
"AdditionalBinding","When handing over a dictionary with additonal binding to the compiler:	 Smalltalk compiler        bindings: {(#test -> Point)} asDictionary;        evaluate: 'test := 42'.all associations are changed to be AdditionaBinding."
"RFReturnOperation","I am a message send. I am here as a subsclass so we have all operations in one spot"
"PharoDocCommentTest","SUnit test for PharoDocComment"
"MCMergeOrLoadWarning","A MCMergeOrLoadWarning is a simple warning used when amerge or a load action may override existing entities."
"IceTipAddRemoteCommand","Command that opens a dialog to add a remote to a repository."
"GLMEditableLabelBrick","A GLMEditableLabelBrick is improved label that can be edited in-place double-clicking on it or using edit iconInstance Variables	editBrick:		<Object>	labelBrick:		<Object>editBrick	- xxxxxlabelBrick	- xxxxx"
"GlobalIdentifierPersistence","I represent persistence strategy for GlobalIdentifier. I can load or save existing preferences (a dictionary) using #load: or #save: message. I know whare the preference file is stored (#preferences). I also know what previous persistence stategy was used; for that reason you should use #ensure: instead of #load: message. In that case, I will load the old file and then save it using new persistence strategy.Collaborators: GlobalIdentifier uses me for loading and saving values; in both cases GlobalIdentifier uses #ensure:Public API and Key Messages- ensure: it loads stored values, merge with existing in the image and saves the current state on the diskExample:	GlobalIdentifierPersistence ston		previous: (GlobalIdentifierPersistence fuel					preferences: FileLocator workingDirectory / 'example.fuel';					yourself);		preferences: FileLocator workingDirectory / 'example.ston';		ensure: (Dictionary new at: #a put: 1; at: #b put: 2);		yourselfInternal Representation and Key Implementation Points.    Instance Variables	preferences:				<FileReference>	previousPersistence:		<GlobalIdentifierPersistence>"
"EpExpressionEvaluation","I represent a expression evaluation. For example, a 'Do It' or an 'Inspect It'."
"ManifestRingMonticello","Deprecated ring extensions for Monticello."
"IceSavedPackageVersion","A version of a package as saved in a repository. We have one of this for each commit in a repository which modifies the specified package.Internal representation- commit is the commit from which I loaded this version. - originatingCommit is the commit in which this version was first introduced, it is useful for comparing this version to another one."
"ClyExtendingPackagesQuery","I return packages which extends methods available from given scope.My scope should understand #methodsDo: which I use to filter all extensions and collect their extending packages.I was mainly introduced to implement #extensions method group in full browser. When you expand it you see all packages which extends the class.But I can give you extending package from any scope. For example you can retrieve all packages in the system which extends some class: 	(ClyExtendingPackages from: ClyNavigationEnvironment currentImageScope) execute."
"GeneralScrollBar","Support for GeneralScrollPane."
"Random","This Random Number Generator graciously contributed by David N. Smith.  It is an adaptation of the Park-Miller RNG [1] which uses Floats to avoid the need for LargeInteger arithmetic.If you just want a quick random integer, use:		10 atRandomEvery integer interval can give a random number:		(6 to: 12) atRandomSequenceableCollections can give randomly selected elements:		'pick one of these letters randomly' atRandomSequenceableCollections also respond to shuffled, as in:		($A to: $Z) shuffledThe correct way to use class Random is to store one in an instance or class variable:		myGenerator := Random new.Then use it every time you need another number between 0.0 and 1.0 (excluding)		myGenerator nextYou can also generate a positive integer		myGenerator nextInt: 10		[1] 'Random Number Generators:  Good Ones Are Hard to Find' by Stephen K. Park and Keith W. Miller (Comm. Asso. Comp. Mach., 31(10):1192--1201, 1988). http://www.firstpr.com.au/dsp/rand31/p1192-park.pdf"
"IceLibgitTonelLog","I'm a tool to ask the full history of a method (based on tonel file format)."
"TCopySequenceableWithReplacementForSorted","A trait for test purposes"
"WeakAnnouncementSubscription","A WeakAnnouncementSubscription is a subscription which is removed automatically when the subscriber is unreferenced.No support for ephemerons currently prevents this from working for Block actions (blocks hold their receiver, which is the default subscriber strongly). To switch between subscription types, use makeStrong/makeWeak on the subscription returned when initially registering with announcer.Note, that list and next must be first instance variables."
"GLMScriptingTest",""
"IceTipRepairFetchRemoteBranch","I will fetch repositories to try to find the unknown commit. matches if: 	- workingCopy referenceCommit isUnknownCommit"
"GLMBrowserClosing","Browser is closing"
"IceTipTreeRemote",""
"EpRenameInstanceVariableRefactoring","I represent the execution of a ""rename instance variable"" (RBRenameInstanceVariableRefactoring) refactoring."
"AthensBalloonSolidColorPaint","maybe Color could act as a AthensPaint by itself by implementing a corresponding protocol"
"FFIExternalEnumeration","FFIExternalEnumerationType reifies the enum declarations in C and offers a nice interface (especially in terms of debug/inspect).To use it just subclass the FFIExternalEnumeration and add an #enumDecl method to the class side such as:FFIExternalEnumeration subclass: #FFITestEnumeration	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'NativeBoost-Tests'FFITestEnumeration class>>enumDecl	^ {(#AAA -> 1).	(#BBB -> 2).	(#CCC -> 3).	(#DDD -> 2400)} asDictionary DO NOT FORGET to call the #initialize method on your class. The rest is automatically done ;)You can use your new enum in two ways:	- add it to a client class poolDictionaries list (see  #FFIExternalEnumTests for an example), 		and then just write CCC in your code -- CCC here is an item of your enum	- send the name of an item to your class --- FFITestEnumeration DDDThe FFIExternalEnumeration implements  (instance and class) some more API methods like:	#itemAt: retrieves the item having a specific value  --- NBTestEnumeration itemAt: 2	#includes: checks the existence of a specific item in the enum --- FFITestEnumeration includes: #AAA"
"LazyMorphTreeNodeMorph","A node for ""lazy drawing"" in a morphic based tree"
"GoferBrowseRemoteChanges","Browse remote changes"
"LocaleChangedTest","Unit tests for LocaleChanged announcement"
"RFSlotWrite","I model the write to a global variable"
"DialogItemsChooser","Dialog for choosing from a list of items"
"RubPlainSegmentMorph",""
"PackageMethodNodeExample","Example for a package method node"
"MethodChunkCompilerRequestor","I am an Object used to interact with the OpalCompiler during compilation of a method chunk. I keep a reference to the original input so that error messages can be properly analyzed later-on."
"ZnBufferedWriteStream","I am ZnBufferedWriteStream.I wrap a write stream and add buffering.Make sure to always send me #flush or #close when you're done,otherwise the last buffer might not yet have been written.My class side's #on:do: helps to ensure this.I can wrap both binary or character streams and act accordingly.Part of Zinc HTTP Components."
"MetacelloReferenceTestCase",""
"SettingsStonWriter","I am a writer of system settings to a file (stream). I know how to write the settings into a stream.Collaborators: SystemSettingsPersistencePublic API and Key Messages- stream:- store Internal Representation and Key Implementation Points.    Instance Variables	storedSettings:		<Array>	stream:				<WriteStream>"
"DelaySemaphoreScheduler","I add multi-producer/single-consumer semaphore based syncronization to the basic scheduler."
"ModificationForbidden","This exception is raised when mutating a read-only object.My instances have 4 fields to be able to reproduce the modification through retryModification method.object <Object> read-only object that the code attempted to mutateindex <SmallInteger> index of the field in the object mutated, relevant for the corresponding selectorvalue <Object> value that was attempted to be stored into the read-only objectselector <Symbol> selector that can be used to reproduce the mutation (typically, #at:put:, #instVarAt:put:, etc.)"
"ClassMultiplePoolUser","I'm a class using two shared pools. "
"CalendarDayMorph","A CalendarDyaMorph represents a specific day on a monthly calendar.Instance Variables	bounds:		<Rectangle>	date:		<Date>	highlighted:	<Boolean>	owner:		<CalendarChooserMorph>bounds	- owner-relative bounding boxdate	- the specific date (year/month/day) the CalendarMorph representshighlighted	- flag to keep track of when a CalendarMorph has the mouse dragging over it, and is thus highlightedowner	- the morph that contains the CalendarMorph, and all its siblings"
"RBRefactoryChangeFactory","This object is the  abstract factory of all the changes, the idea is to have another version of the changes that can use the atomic class installer."
"ZdcPluginSSLSessionTests","ZdcPluginSSLSession Tests tests ZdcPluginSSLSession."
"GLMInteractableBrick","A GLMInteractableBrick is a subclass of GLMBrick to allow user interactions such as: mouseLeave, mouseEnter, mouseDown, mouseUp and for each state can change background color or background image, that resizes accordinately to Brick's size. Supports doubleClick out of box, but it should be enabled sending enableDoubleClick message. When doubleClick is enabled announces #onDoubleClicked.By default interactable brick is disabled and doesn't react to any user action. It should be first enabled sending enable message.Instance Variables	announcer:		<Announcer>	checkedColor:		<Object>	checkedImage:		<Object>	isChecked:		<Boolean>	isDoubleClickEnabled:		<Boolean>	isEnabled:		<Boolean>	isPressed:		<Boolean>	isSelected:		<Boolean>	normalColor:		<Object>	normalImage:		<Object>	pressedColor:		<Object>	pressedImage:		<Object>	selectedColor:		<Object>	selectedImage:		<Object>announcer	- xxxxxcheckedColor	- xxxxxcheckedImage	- xxxxxisChecked	- xxxxxisDoubleClickEnabled	- xxxxxisEnabled	- xxxxxisPressed	- xxxxxisSelected	- xxxxxnormalColor	- xxxxxnormalImage	- xxxxxpressedColor	- xxxxxpressedImage	- xxxxxselectedColor	- xxxxxselectedImage	- xxxxx"
"OSJoyDeviceRemappedEvent","I am a joystick device remapped event.This event is generated when a joystick layout is remapped."
"NNavNavigation","I'm the one who manage the navigation and I have memory from what I've been navigating"
"TTLAssociation","I am TTLAssociation. I am an Assiciation.I maintain a timestamp that gets updated each time my value changes.I decide myself when I am stale, using a cache defined default time to live."
"EpOldStateVisitor","I answer a String that represents the old state of an EpEvent."
"TraitCompositionTest",""
"Delay","I am the main way that a process may pause for some amount of time.  The simplest usage is like this:	(Delay forSeconds: 5) wait.   ""or...""	5 seconds asDelay wait.An instance of Delay responds to the message 'wait' by suspending the caller's process for a certain amount of time. The duration of the pause is specified when the Delay is created with the message forMilliseconds: or forSeconds:. A Delay can be used again when the current wait has finished. For example, a clock process might repeatedly wait on a one-second Delay.  Delays work across  clock roll-overs.The maximum possible delay depends on which DelayScheduler is used:  * DelayMillisecondScheduler uses a 32-bit value that rolls over about every six days, or SmallInteger maxVal // 2 milliseconds.  * DelayMicrosecondScheduler is 64-bit and rolls over every 50,000 years. A delay in progress when an image snapshot is saved and resumed when the snapshot is re-started. "
"FTExampleDropDataSource","I'm a simple example of fast table who will accept drops of classes.FTExamples exampleDragAndDrop1."
"IceUnbornBranch","I am an unborn branch. I exist only on a new repository that has no commits inside. I manage the special case of a first repository commit and branch creation."
"EpHelp","Help for Epicea project."
"SDL_Renderer","I represent a handle of SDL rendering context, coming from SDL2 library"
"GLMButtonBrick","A GLMButtonBrick is a basic  button with label and icon to the left of the labelInstance Variables	iconBrick:		<GLMInteractableBrick>	labelBrick:		<GLMLabelBrick>iconBrick	- an icon to be displayed to the left of the labellabelBrick	- label showing button text"
"WriteBarrierStub","A stub for WriteBarrier to be used by tests"
"IceCreateBranchCommand","I'm a command to create a new branch from a commit. this is usefull in the case of commiting changes in unsync repositories (so you open a branch and you commit there)"
"IceCodeDefinition","I am an IceDefinition that have some source code in my contents.See my sub/superclasses for more information."
"CallbackForARM32","A CallbackForARM32 is a callback for platforms with ARMv4/v5/v6/v7 processors using the System V ABI."
"ClyMethodGroup","I am a root of hierarchy of method groups.Any method group is created on method query:	ClyMethodGroup named: 'some group' on: aMetodQueryMethod query can be also composite but it should return methods.Also method group can be expanded to subgroups using subgroupsQuery. You can specify it in another instance creation method: 	ClyMethodGroup named: 'some group' on: aMethodQuery withSubgroupsFrom: aQuery	And there are additional constructors to specify priority of group:	ClyMethodGroup named: 'some group' priority: 20 on: aMethodQuery.	ClyMethodGroup named: 'some group' priority: 20 on: aMethodQuery withSubgroupsFrom: aQueryAll groups are sorted by priority and name in the browser. Larger priority value put group to the top of list.I provide several methods to implement various commands: - importMethod: aMethodIt supposed to modify given aMethod in the way that it will become the part of the group.- importMethods: methods It imports multiple methods		 - removeWithMethodsIt removes all methods and should ensure that groups will be removed too which is true for all virtual groups.And I provide method #includesMethod: which is used in the browser to highlight groups which contains selected methods.Internal Representation and Key Implementation Points.    Instance Variables	methodQuery:		<ClyMethodQuery>	subgroupsQuery:		<ClyQuery>"
"WeakRegistryTest","A trait for test purposes"
"ConnectionQueue","A ConnectionQueue listens on a given port number and collects a queue of client connections. In order to handle state changes quickly, a ConnectionQueue has its own process that: (a) tries to keep a socket listening on the port whenever the queue isn't already full of connections and (b) prunes stale connections out of the queue to make room for fresh ones."
"RBDetectContainsRule","Checks for bytecodePrimEqual  using the do: method instead of using the contains: or detect: methods."
"CurrentJob","I am a DynamicVariable whose value is the current Job in a process."
"ByteSymbol","This class represents the symbols containing 8bit characters."
"SessionErrorHandlingTest","SUnit tests for session error handling"
"ActiveClassAnnotationsTests",""
"Cursor","Description--------------------I am a Form that is a possible appearance for a mouse cursor. My size is always 16x16, ever since the original implementation on the Alto.There are many examples available in the ""constants"" category of class methods. For example, ""Cursor normal"" and ""Cursor wait"". Public API and Key Messages--------------------- #showWhile: 	When send to a cursor, it will use the cursor as the current cursor during the block executionExamples--------------------	""Use the wait cursor for 3 seconds""	Cursor wait showWhile: [ 3 second wait ].		""Morph implements methods to help with the management of cursors via the hand morph. This is useful when you want to change the cursor and revert the change in different places instead of changinig it during the execution of a block.""	self currentHand showTemporaryCursor: Cursor wait. 	self flag: #doSomethingHere.	self currentHand showTemporaryCursor: nil. ""Reset the cursor to the previous one"""
"TWithBranchModel",""
"IceTipRemovePackageDialog",""
"ClyCompositeQuery","I represent composition of queries. I am abstract class and my subclasses implement concrete logic what to do with subqueries.They should only implement three methods: - buildResult: aQueryResult Subclasses should deside what to do with result of subqueries.- #unionWith: typedQueries as: aQueryResultSubclasses should implement how union itself with given query collection.- #, anotherQuery Subclasses should implement union with another query.Other methods from the superclass I implement using delegation to my subqueries.My instances can be created using #with: message: 	ClyCompositeQuery with: { aQuery1. aQuery2 }	ClyCompositeQuery with: { aQuery1. aQuery2 } as: aQueryResult	My scope is composition of scopes from all my subqueries. In general it is ClyCompositeScope instance. But in case of similar subscopes it can be single typed scope.I redefine #description to print subqueries splitted by comma by default. Internal Representation and Key Implementation Points.    Instance Variables	subqueries:		<Set of: <ClyQuery>>"
"ClyQueryBrowserContext","I represent query browser context"
"EllipseMidpointTracer","Utility class for calculating"
"AthensCairoPatternPaint","i am abstract class for different kinds of paints in cairo backend."
"OSWindowWorldMorphAdapter","I am a Spec adapter that uses a WorldMorph in an external OSWindow."
"StrikeFontStoredSetting","I am responsible for storing information about StrikeFont objects."
"GoferRemoteChanges","Handling remote changes"
"FFIExternalResourceManager","I am responsible for managing a finalization of external resources.When object, registered as external resource being garbage collected,i telling an object's class to finalize it's associated data (by passing an object,received from #resourceData message sent to an object at registration time).I automatically keep tracking for session change (image save/boot), and ignore finalization of resources of old sessions (since they are not longer valid,and cannot be freed since session changed).Like that, a user of FFIExternalResourceManager don't need to implement a session checking logic, and need only to:a) register object as external resource:     FFIExternalResourceManager addResource: anObject.b) an object should understand the #resourceData message, which is remembered at registration point (it can be any external resource like, id, handle or memory pointer).Then, when object is garbage collected, its class will receive a message to finalize the resource data in #finalizeResourceData:The passed data is exactly same as previously returned by #resourceData method.An example:Imagine that you want to represent an external resource by keeping its handle.Object subclass: #MyExternalObject 	instanceVariableNames: 'handle'	classVariableNames: ''	poolDictionaries: ''	category: 'XYZ'	To let your object(s) to be managed by external resource manager, you need to register it.Usually you do it after successfully claiming an external resource:MyExternalObject>>initialize	handle := self createNewExternalResource.  ""claim resource""	self assert: self handleIsValid. ""etc...""		""Now, register receiver as external resource"" 	FFIExternalResourceManager addResource: self ""Another form of use is: 	FFIExternalResourceManager addResource: self data: handle.""----  If you used #addResource: method for registration, you should provide an implementation of #resourceData method:MyExternalObject>>resourceData	^ handle ""since we need only handle to identify external resource""----	Now, for properly finalizing the external resource we should implement:MyExternalObject class>> finalizeResourceData: aHandle	^ self destroyHandle: aHandle. ""do whatever is needed to destroy the handle""Note that in #finalizeResourceData: you cannot access any other properties of your instance, since it is already garbage collected. You also don't need to do a session checking, since it is done automatically by resource manager. "
"TonelSourceScannerTest",""
"RBCreateCascadeRefactoring","I am  a refactoring used to generate cascades in source code.Two or more message sends to the same object are replaced by a cascaded message send. It expects a selection of the messages and the receiver variable."
"StackFilter","A filter on the current stack for debugging"
"BagEyeElement","I am an eye element for bags, showing appropriate thing with occurrences"
"ClyAsyncBrowserQueryResultAdapter","I adopt ClyAsyncQueryResult retrieving ClyBrowserQueryResult to the ClyBrowserQueryResult.I am used by ClyAsyncQueryResult in case when actual query produces kind of ClyBrowserQueryResult. In that case actual result items are ClyBrowserItem instances. But owner ClyAsyncQueryResult is not a kind of ClyBrowserQueryResult. So without special adapter nobody will collect properties of retrieved browser items. And browser query interface will not be supported.Notice that ClyQueryResultBrowserAdapter can not be used in that case because it expects that items real objects instead of ClyBrowserItem instances. It required details to correctly implement items query interface.When async result retrives another basic result then my superclass is used as adapter as in any other cases"
"MetaLinkAnonymousClassBuilder","I build anonymous subclasses for object with instance specific MetaLinks. I can compile methods in those subclasses, and provide access to anonymous classes;I also handle the migration of an object from its original class to an anonymous subclass and vice versa.I consider that for one anonymous subclass i hold one object reference. I therefore cannot work as is with other clients using anonymous subclasses."
"SaveCommandLineHandler","Usage: save <imageBaseName> [--delete-old] 	<imageName>     a base name for the image	--delete-old    remove the old image and changes file	Documentation:Saves the image and changes file under a new name.Examples:	# create a 'bar.image' and 'foo.changes'	pharo Pharo.image save bar	# create the same file as in the previous example but delete Foo.image and Foo.changes	pharo Pharo.image save bar --delete-old"
"RGGlobalVariableDefinition","A global variable definition"
"EpTestLogBuilder","I am a helper for creating toy logs."
"GLMPagePushed",""
"TextLine","A TextLine embodies the layout of a line of composed text.	left right top bottom		The full line rectangle	firstIndex lastIndex		Starting and stopping indices in the full text	internalSpaces		Number of spaces to share paddingWidth	paddingWidth		Number of pixels of extra space in full line	baseline				Distance of baseline below the top of the line	leftMargin			Left margin due to paragraph indentationTextLine's rather verbose message protocol is required for compatibility with the old CharacterScanners."
"MCPackageManager","MCPackageManager is a kind of package wrapper knowing if the package is dirty or not.The class side manages registered package managers.Instance Variables:	package	<MCPackage>	modified	<Boolean>Class Instance Variables:	registry	<Dictionary>"
"ProfStef","ProfStef is the Pharo teacher. To start the tutorial, evaluate:[[[ ProfStef go.]]]To go to the next lesson evaluate:[[[ProfStef next.]]]To execute your own tutorial:[[[ProfStef goOn: MyOwnTutorial]]]MyOwnTutorial should be a subclass of AbstractTutorial.To see a table of contents with all defined tutorials:[[[ProfStef contents Metacello Configuration Tutorial Part1	ProfStef goOn: MetacelloConfigurationTutorialPart1Metacello Configuration Tutorial Part2	ProfStef goOn: MetacelloConfigurationTutorialPart2Metacello Development Cycle	ProfStef goOn: MetacelloDevelopmentProcessInside Metacello Toolbox API	ProfStef goOn: MetacelloToolBoxTutorialPharo Syntax Tutorial	ProfStef goOn: PharoSyntaxTutorial']]]Metacello Configuration Tutorial Part1	ProfStef goOn: MetacelloConfigurationTutorialPart1Metacello Configuration Tutorial Part2	ProfStef goOn: MetacelloConfigurationTutorialPart2Metacello Development Cycle	ProfStef goOn: MetacelloDevelopmentProcessInside Metacello Toolbox API	PharoTutorial goOn: MetacelloToolBoxTutorialPharo Syntax Tutorial	ProfStef goOn: PharoSyntaxTutorial']]]"
"IceRepositoryRegistryModified","I'm a generic announcement to notify when the repository registry has changed."
"TextFieldExampleTest",""
"GTFuelPacking","I serialize or materialize objects using FUEL framework. Create instance of me calling GTEventPacking fuel."
"TransformationMorph","A TransformationMorph is like a transformMorph, except that it does not clip, and its bounds include its entire submorph.  TransformationMorphs are assumed to have only one submorph -- the idea is that it is a wrapper that enables its submorph to scale and rotate.  A TransformationMorph may come to have more than one submorph if, eg, a menu sprouts a sub menu, using the transformationMorph temporarily as its world, but this ability is only sparsely supported (as in layoutChanged).See TransformationMorph class example1 method."
"PermaLink","I specify a kind of persistence for links to be put on a slot, a temporary variable or a class variable.  I can be of kind: - #read only read nodes- #write only assignment nodes - #all bothI know the class of the slot/var the link will be put on. I also know my link, although several versions of me can exist for the same link, but with different targets (slots/var).The isInstanceSpecific inst var seems to be needed to keep track that the metalink is installed on an object, because this information is lost after the link is installed through the API. It could be done better perhaps. "
"ZnPositionableReadStream","I am ZnPositionableReadStream.I am polymorphic with (the most used/important methods of) ReadStream and PositionableStream.I wrap another read stream and store the elements that I read in a sliding circular buffer so that I am able to go back to any position inside that buffer. Essentially, I implement #position and #position: to be used to back out of reading ahead.Note that the size of my buffer limits how far I can go backwards. A SubscriptOutOfBounds exception will be signalled when an attempt is made to go too far backwards.The index returned by #position should be considered abstract, without concrete meaning, but it is currently implemented as the count of elements read by #next on the wrapped stream. On a simple stream over an in memory collection, that will be equivalent to an integer index into that collection. But on network streams or streams that were already further along, this will no longer be the case.The most elementary example of my capabilities can be seen in my implementation of #peek. See also the unit tests #testPlainExcursion and #testSearchOf course, backing out of an excursion is only possible within the window of the buffer size.Implementation- stream <ReadStream> the read stream that I wrap and add positioning to- buffer <String|ByteArray> sliding, circular buffer- index <PositiveInteger> zero based index into buffer, where next will be stored- count <PositiveInteger> number of next operations done on wrapped stream- delta <PositiveInteger> number of positions that I was moved backwardsThe real core methods are #next, #atEnd, #position and #position: and are used to implement the rest.Part of Zinc HTTP Components"
"MalTarjan","I implement the well known Tarjan's algorithm. My purpose is to find the strongly connected components (aka circuits /cycles) of a graph in O(m+n).See https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm for more details."
"SugsMenuBuilder","I'm the one who finds the best suggestion for your selection or poition in text.I also add the options to the displayed menus."
"ClyMoveMethodGroupToClassCommand","I am a command to move method group together with methods into another class.By default I am activated by dragging method groups into the target class. Internal Representation and Key Implementation Points.    Instance Variables	targetClass:		<Class>"
"SortedCollection","I am a collection close to an OrderedCollection at the exception that I keep my elements sorted by using a Block.Description -------------------Like my superclass, I am a collection that can grow in size but I keep my elements sorted.Because of that you cannot add elements at a fix index (with #at:put: or #insert:before: methods for example).The sort block I use should return a boolean. It takes 2 elements and return true if the first parameter should be before the second, else false.I should be used only if you really need to keep the elements sorted all the time (but there are some exceptions, see at the end). If you do not need it, use OrderedCollection (and possibly his #sort: method).Public API and Key Messages-------------------- class method: #sortBlock:  aBlock 		is a contructor. 		- #sort: aBlock 		is a function to change the way I am sorted. I will also update the index of my elements with the new block.Example-------------------	sortColl := SortedCollection sortBlock: [ :elem1 :elem2 | elem1 < elem2 ].	sortColl		add: 4;		add: 2;		add: 1;		add: 2.	sortColl. 		""result: a SortedCollection(1 2 2 4)""		""But you can also add a collection.""		sortColl addAll: #(3 5 0 6).	sortColl. 		""result: a SortedCollection(0 1 2 2 3 4 5 6)""				""You can charge the block, imagine you have a collection with number and you want at the beginning the odd elements sorted by value then the even elements sorted by value.""		sortColl 		sort:			[ :int1 :int2 | 				((int1 even and: [ int2 even ]) or: [ int1 odd and: [ int2 odd ] ])					ifTrue: [ int1 < int2 ]					ifFalse: [ int1 odd ] 			].	sortColl 		""result: a SortedCollection(1 3 5 0 2 2 4 6)"" Internal Representation and Key Implementation Points.-------------------    Instance Variables	sortBlock:		<Block> 		This is  a sort block used to keep me sorted. I can take 2 parameters that are two values and I return true if the first parameter should be before the second.I refuse the methods that add elements at a fix index.When the user is adding an element, I use some methods like #reSort or #indexForInserting: to add an element at the right position.Discussion----------------(1) sort: and sortBlock: can be used to set an order to my elements but uses different implementation of the sort algorithm... See  https://pharo.fogbugz.com/f/cases/17925/Why-SortedCollection-sort-and-sortBlock-do-not-uses-the-same-method-to-sort.(2) DO NOT USE ADDLAST:!!!! https://pharo.fogbugz.com/f/cases/14812/addLast-should-not-work-in-SortedCollectionx := SortedCollection with: 4 with: 3 with: 2 with: 1 with: 7.y:=x addLast: 6; yourself.y isSorted ""-> false"""
"IdentifierChooserMorph","An IdentifierChooserMorph is a menu builder which takes a list of labels as input and build/popup  a menu for them. The morph could be made of one menu in one column for all labels of of several menus in a scrollabe row. The action which is performed when a menu item is selected is also parametrized (see examples below).The morph can take the keyboard focus and then, up, down, left and right arrows can be used to choose a menu item.It is the responsibility of the user of this morph to decide when and how the keyboard focus is token.The design is widely inpired from PopupChoiceDialogWindow.example 1A very simple example with three label. The nil value will be represented as a menu line in the resulting morph.(IdentifierChooserMorph 		labels: {'aaaaaa'. 'bbbbbbb'. nil. 'cccccccc'}		chooseBlock: [ :chosen | UIManager default inform: (chosen, (' has been chosen' translated))])			open			example 2The same except that a color is specified		(IdentifierChooserMorph 		labels: {'aaaaaa'. 'bbbbbbb'. nil. 'cccccccc'}		chooseBlock: [ :chosen | UIManager default inform: (chosen, (' has been chosen' translated))])			baseColor: Color white;			openexample 3Allows the presentation of one menu (one column) vith two fixed labels followed by the list of all classes.(IdentifierChooserMorph 		labels: ({'aaaaaa'. 'bbbbbbb'}, { nil }, (Object allSubclasses collect: [:c | c theNonMetaClass  name]) asSet asArray sort)		chooseBlock: [ :chosen | (Smalltalk globals at: chosen asSymbol) ifNotNil: [:c | c browse] ]) 			oneMenuOfWidth: 300;			baseColor: Color white;			openInstance Variables	baseColor:		<Color>	choiceMenus:		<Array>	choicesMorph:		<AlignmentMorph>	chooseBlock:		<Block>	labels:		<Array>	maxLines:		<Integer>	requestor:		<Morph>	scrollPaneWidth:		<Integer>baseColor	- The color used for the menu items and the receiverchoiceMenus	- The array of EmbeddedMenuMorphchoicesMorph	- The AlignmentMorph which contains all menuschooseBlock	- A block with one argument which is evaluated when a menu item is selected. The argument takes the chosen label as argumentlabels	- The array of labels maxLines	- If not nil, gives the maximum number of lines for one menurequestor	- if not nil, a Morph from which the receiver is builtscrollPaneWidth	- The maximum width of the scrollPane, this contraints the width of the receiver."
"RBProtectInstanceVariableTest",""
"FreeTypeSystemSettings","Settings for the FreeType system"
"OSWindowWorldMorph","I am a morphic world that uses OSWindow.For opening a World in a external window, the following script can be used:world := OSWindowWorldMorph new.world open."
"MetacelloMCVersionSpecTestCase",""
"FontSubstitutionDuringLoading","signaled by font loading code when reading a DiskProxy that calls for a missing font."
"ExpanderMorphContracted","I am an Announcement that occurs when an ExpanderMorph is contracted (rolled-up). Example where visibility of another UI component depends on the expanded/contracted state of Expander 2 |builder expanders ex1 ex2 text list row|builder := UITheme builder.expanders := builder newColumn: { ex1 := builder newExpander: 'Expander 1'. ex2 := builder newExpander: 'Expander 2'}.expanders width: 100; hResizing: #rigid.text := builder newTextEditorFor: (ValueHolder new contents: 'Some text') getText: #contents setText: #contents:.list := (builder newListFor: (ListModel new list: #('One' 'Two' 'Three' 'Four'); selectionIndex: 3) list: #list selected: #selectionIndex changeSelected: #selectionIndex: help: 'This is a list')  minWidth: 120;  visible: false;  disableTableLayout: true.ex2 announcer when: ExpanderMorphContracted do: [list hide; disableTableLayout: true]; when: ExpanderMorphExpanded do: [list show; disableTableLayout: false].row := builder newRow: { expanders. (builder newRow: {text. list})  vResizing: #spaceFill}."
"ClyPackageIconTableDecorator","I decorate table with simple constant icon for packages"
"MockSourceEditor","A mock object mocking a source editor"
"SugsBrowseVariableDefintion","I add a menu to variables to browse the defintion"
"FTSelectionChanged","I announce a selection change (usually a click, but can also be done with arrows up and down).Description-------------------I store the old selected rows and the new selected row. I should be use to act with the user when he interact with a Fast Table.Public API and Key Messages-------------------- #from: arrayOfIndexes to: arrayOfIndexes 		is the commun constructor. Internal Representation and Key Implementation Points.------------------    Instance Variables	newSelectedRowIndexes:		An array of indexes that store the new selection.	oldSelectedRowIndexes:		An array of indexes that store the old selection.			From the index you can get an object from the FTTableMorph with: aFTTableMorph dataSource elementAt: selectedRowIndex "
"NECGlobalEntry","I represent a global variable."
"STONReference","STONReference holds a forward reference to another object during materialization."
"CoverageDemo","I'm an example of how metalinks can be used to show the coverage of an execution.CoverageDemo open"
"PharoFilesOpener","My role is to open the .sources and .changes files. My only public methods are in the 'public' protocol. The most important method is #checkAndOpenSourcesAndChanges."
"LGitObject",""
"FFIVariableNameNotFound","I am FFIVariableNameNotFound, an exception to indicate that a variable is not correctly used inside an ffi function"
"MetacelloCleanNotification",""
"SDL2Handle","My subclasses represent various handles coming from SDL2 library"
"MetalinkChanged","Announce that a metalink changed"
"RubDisplayScanner",""
"RBExcessiveVariablesRule","Sometimes instance variables are used instead of method arguments or temporaries. You can check if an instance variable's value is always valid during the complete lifetime of an object. In addition, looking at methods used together by a group of methods may be an indication that a new object should be created. Large classes often exhibit a large number of instance variables. Some people also confuse classes and namespaces. The defined number of instance variables can be edited in #variablesCount."
"ClyMethodDiffTool","I a browser tool to compare two methods.I am automatically activated when two methods are selected. Internal Representation and Key Implementation Points.    Instance Variables	diffMorph:		<DiffMorph>	leftMethod:		<CompiledMethod>	rightMethod:		<CompiledMethod>"
"HEClassTrait","I represent a ClassTrait.I am stored as a symbol.When serialized I get the name of the base trait.When deserialized I find the classTrait in the target environment"
"IceTipAddRepositoryCommand","I register Iceberg projects.I will open a dialog to take the new possible repository (from available options) and I will register it into the IceRepository>>#registry list."
"RFMetaContext","I model the meta level when activating a MetaLink."
"GLMBrickLayoutParentState",""
"Latin1Environment","This class provides the support for the languages in 'Latin-1' category.  Although we could have different language environments for different languages in the category, so far nobody seriously needed it."
"IceTipLabelMorph","I am a non-editable, non-selectable text morph."
"RBSuperNode","I am a specialized variable node for 'super'"
"IceTipHistoryContext","I'm a context for the history browser (IceHistoryBrowser)"
"ToolRegistry","I am serving as a system-wide hub for various tools.Instead of using direct class names for tools, which is not always nice because can introduce inter-packagedependencies, i provide a uniform way for accessing tools, via Smalltalk global:Smalltalk tools someToolName,where 'someToolName' is a name of the tool , under which some tool are registered.Tools are adding themselves to registry by implementing #registerToolsOn: message at class side, for example:MyClass>>registerToolsOn: registry   registry register: self as: #myToolRegisters a MyClass as a tool under name #myTool, and can be accessed via:Smalltalk tools myTool and avoid putting 'MyClass' reference into code.You can add  ' self registerToolsOn: Smalltalk tools ' in class #initialize,so your new tool(s) can be registered during package loading.To reset tool registry to defaults , use: Smalltalk resetTools.Also registry storing a map of inspector types. This is to replace an old scheme which using #inspectorClass , and introducing dependencies.Now, an inspecting class dont needs to have any knowledge about its specialized inspector.Instead, a specialized inspector could tell registry that it is available for inspecting instances of given class (see #registerInspector:for:  senders).This allows to avoid dependency from instance class to its inspector class or using extension methods.WARNING: The point of the tools registry is NOT to be a facade full of protocols but to be a registration for tools that get loaded. So, the tools registry should NOT hold specific tool's protocol.  the tool's client should invoke the correct methods of the tool.----------- The category 'menu' is for backward compatibility with ToolSet. We should remove it."
"SessionManagerRegistrationTest","SUnit tests for registration on the Pharo session manager"
"IceNotInBranch",""
"InputEventSensor","An InputEventSensor is a replacement for the old Morphic EventSensor framework.It updates its state when events are received so that all state based users of Sensor (e.g., Sensor keyboard, Sensor leftShiftDown, Sensor mouseButtons) will work exactly as before. The usage of these funtions is discouraged. Instance variables:	mouseButtons <Integer>	- mouse button state as replacement for primMouseButtons	mousePosition <Point>	- mouse position as replacement for primMousePt	eventQueue <SharedQueue>	- an optional event queue for event driven applications	modifiers		<Integer>	- modifier statesClass variables:	ButtonDecodeTable	KeyDecodeTable"
"ManifestGTDebugger","Debugger from the Glamarous Toolkit (GT)"
"AthensCloseSegment","i represent close segment (when user issuing #close command to path builder)"
"ZnServerStartedEvent","ZnServerStartedEvent notes the startup of an HTTP server is complete."
"ReIntervalSourceAnchor","This anchor stores the actual interval object which is set during initialization."
"GLMTestPort",""
"ReCriticEngine","I contain some functionality shared between code entities"
"GLMBrickedMorph","A GLMBrickedMorph is a direct subclass of Morph with removed layouting mechanism"
"DAMessageSendAnalyzer","I analyze package sent messages to reveal dependencies.Examples:(self on: 'Kernel') difference(self on: 'Kernel') missingMethodsWithPotentialMatch(self on: 'Kernel') possibleDeadCode(self on: 'Kernel') missingDependencies(self on: 'Kernel') 	missingMethodsWithPotentialMatchAfterMissingDependenciesAddition"
"LongMessageDialogWindow","Dialog window displaying a message with a single OK button. Escape/return will close. Icon is a themed information icon.Handles long messages through use of a text editor with potential for scrolling."
"ListModel","This is deprecated class because the original class ListModel was renamed to ListPresenter. You should stop to use this class and modify your code to use ListPresenter."
"SugsMessageBrowserContext","I know how to use a Text model that came from a SmalltalkEditor and extract the information needed for the suggestions :)"
"GlyphForm","A specialized form for glyphs"
"LinkedList","I am a sequential collection where adjecent objects are linked.Description-------------------I can store any kind of objects that I will wrap into a Link (See implementation points).I act pretty much as an OrderedCollection, but my access times differs: the method #atIndex: is depending of the number of elements so is not constant. In the worse case, the whole list must be crossed.Using the message #addFirst: / #removeLast causes the receiver to behave as a stack; using #addLast: / #removeFirst causes the receiver to behave as a queue.I use the Link class (or his subclasses) in my implementation. Public API and Key Messages-------------------- #new / #withAll: aCollection / #with: anObject 	are common constructors- #add: anObject / #at: anIndex put: anObject 	allow to add new elements to myself.- #remove: anObject 	allow to remove an element.	- #do: aBlock / #collect: aBlock / #select: aBlock / #reject: aBlock 	are common iterators.Example ------------------- 	""There is many ways to create a LinkedList, here are some:""	linkedList := LinkedList new.	linkedList		add: 'one';		add: 'two';		addFirst: 'zero';		addLast: 'three'.	linkedList.		""returns: a LinkedList('zero' 'one' 'two' 'three')""	""or""	linkedList := LinkedList with: 'one' with: 'two' with: 'three'.	linkedList.		""returns: a LinkedList('one' 'two' 'three')""	""or from an other collection (here an Array)""	linkedList := LinkedList withAll: #('one' 'two' 'three').	linkedList.		""returns: a LinkedList('one' 'two' 'three')""	""Some manipulations""	linkedList := LinkedList new.	linkedList		add: 1;		add: 2.	linkedList.		""returns: a LinkedList(1 2)""	linkedList remove: 1.	linkedList.		""returns: a LinkedList(2)""	""A last one""	linkedList := LinkedList with: $b with: $c with: $a.	linkedList sort: [ :first :second | first < second ].			""returns: a LinkedList($a $b $c)""	linkedList collect: [ :element | element asUppercase ].	""returns:  a LinkedList($A $B $C)""	linkedList select: [ :element | element >= $b ].			""returns:  a LinkedList($b $c)""	linkedList do: [ :element | element inspect ].	linkedList asArray									""returns: #($a $b $c)""			Internal Representation and Key Implementation Points.-------------------    Instance Variables	firstLink:		 <Link> 	A link that contains the first value of the LinkedList.	lastLink:		 <Link> 	A link that contains the last value of the LinkedList.If you attempt to add any object into a LinkedList that is not a Link, it will automatically be wrapped by a ValueLink."
"IRPushRemoteTemp","push remote temp"
"SugsInlineTemporary","This inline a variable in an assignment sentence"
"RxsCharSet","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A character set corresponds to a [...] construct in the regular expression.Instance variables:	elements	<OrderedCollection> An element can be one of: RxsCharacter, RxsRange, or RxsPredicate.	negated		<Boolean>"
"MetacelloValidationError","MetacelloValidationError indicates that errors are to be expected if an attempt to use the configuration/version is made"
"RBParseErrorNodeVisitor","Visit any RBParseErrorNode in the syntax tree and evaluate a generic block"
"DisplayScreenTest","I am a class that test the DisplayScreen primitives"
"ClyCreateTraitCommand","I am a command to create new trait in selected package.I am a copy of command from Nautilus.I just ask user to type trait definition in dialog window. Then I compile trait by evaluation of given definition.Internal Representation and Key Implementation Points.    Instance Variables	package:		<RPackage>	classTag:		<Symcol>"
"ZipFileSystemFile","I represent a zip file system entry for a file. Together with ZipFileSystemDirectory I take care of lazily accessing archive members."
"ClassDescriptionTest","This is the unit test for the class ClassDescription. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"GTPlayPagePersistence",""
"DelayMicrosecondTickerSimulation","To facilitate unit tests without interferring with the live VM interface,I simulate the VM code for the microsecond primitives."
"MorphLostFocus","I'm an announcement raised when a morph losts keyboard focus."
"ManifestIcebergLibgitTonel","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"GLMScrollPaneBrick","A GLMScrollPaneBrick is a simple scrollpane with customisable scrollbarsInstance Variables	band:		<Object>	lastScrollTimeStamp:		<Object>	scrollPosition:		<Object>	velocity:		<Object>	verticalScrollbar:		<Object>band	- xxxxxlastScrollTimeStamp	- xxxxxscrollPosition	- xxxxxvelocity	- xxxxxverticalScrollbar	- xxxxx"
"MetacelloExampleProjectConfig",""
"CollapsedMorph","This Morph is used to show  a collapsed Morph when the World lacks a Taskbar. "
"GLMPhlowListBrick",""
"MemoryFileSystemFile","I represent a memory file system entry for a regular file"
"DynamicWidgetChangeTest",""
"IceGitHttpRemote","A remote repository created out of a HTTP  url, such as 'http://localhost/owner/repository.git'."
"RegexError","This is a common superclass for errors in regular expressions."
"CannotReturn","Block and Context cases for CannotReturn need to signal a dedicated exception.(see subclasses and the related testcases)"
"IceRemoteDesynchronized","I indicate when a remote is desyncronized. It means the version I have in the working copy (not the image) is different to the version I have in the remote (then I need to pull/branch/whatever before commiting)."
"ClyRequestMethodTagForEditorCommand","I am a command to request method tag from the user which should be used to tag editing method"
"BottomLeftGripMorph","I am the handle in the left bottom of windows used for resizing them."
"Announcer","The implementation uses a threadsafe subscription registry, in the sense that registering, unregistering, and announcing from an announcer at the same time in different threads should never cause failures.For security reasons, registry is kept private, and has no accessor like in other implementations"
"StoredSettingsMergerTest","A StoredSettingsMergerTest is a test class for testing the behavior of StoredSettingsMerger"
"DoubleLinkedListTests",""
"LGitCheckoutNotifyTypeEnum",""
"ClyItemNameFilterTest",""
"RBRemoveInstanceVariableChange","I am a refactoring for removing an instance variable. My changes are executed on the instance or class side."
"GLMTransmissionContextTest",""
"FTSizeMetrics","I map the FT_SizeMetrics type."
"ClySystemScope","I am a root of hierarchy of scope classes which represent a global point of view on concrete system.My subclasses define what is the concrete system and implement accessing methods to retrieve all possible information from it.I am supposed to be created with single object basis. In case of multiple basis I signal error.So to create me use single basis #of: message: 	ClyConcreteSystemScope of: aSystemAnd to access the system I provide simple message #system which just returns single basis item"
"ZdcByteArrayManagerTests","ZdcByteArrayManagerTests holds unit tests for ZdcByteArrayManager"
"ContextualClassAnnotationExample1",""
"RubAdornmentDisplayer","RubAdornmentDisplayer adds a simple adornment for text area"
"GeneratorTest","SUnit tests for class Generator"
"LogicalFontStoredSetting","I am responsible for storing information about LogicalFont objects."
"NullSound","The NullSound means silence "
"SUnitTutorial","This is a custom help book providing a tutorial for the SUnit framework."
"LGitBufferSignatureCallback",""
"GLMActionListPresentation","The goal of a GLMActionListPresentation is to group together and display a set of actions.  Actions should be added using the normal API from GLMPresentation.The rendred will decide the actual way in which the actions are displayed (usually using a set of buttons).For an example see GLMBasicExamples>>#simpleActionList"
"OCCopyingTempVariable","A copying temp is a temp that is copied into a block that later reads this variable.Not: the temp vector is passed as a copying temp, too."
"SymbolicBytecodeBuilder","I parse a method and create a collection of SymbolicBytecode objects for introspection."
"ClyTraitUserHierarchy","I represent hierarchy of classes where roots are common traits or classes without traits.The children of every trait are user classes or traits.And basic classes has no children because they are not traits"
"GLMMorphicPharoScriptRenderer",""
"ClyClassWhichInheritsAbstractSubclass","I am example of class which inherits from abstract superclass"
"OCAbstractScope","I am a symbol table where variable names are associated with SemVars.  Each context (method/closure) get a fresh scope that inherits from its outer scope."
"RubScrolledTextModel","I am the main model of a text area. I should be used to dialog with the container of the text area. I am able to communicate the necessary infos to the morph. "
"RBRealizeClassRefactoring","Complete the set of defined methods of this class, by generating a ""self shouldBeImplemented"" method for all abstract methods defined in its superclass hierarchy. Where an abstract method is a method sending ""self subclassResponsibilty.Shows a warning if this class has abstract methods on its own."
"RBClassToRename",""
"AthensPathSegmentConverter","this class is subject of changes/removal. do not use it."
"SubclassPoolUser","I should be able to access the pool variables defined in my superclass."
"SycGeneratePrintStringCommand",""
"FileDoesNotExistException","I am raised when an operation is attempted on a file that does not exist.The method used to signal the exception depends on the form the file name exists in:- For strings: (FileDoesNotExistException file fileName: aString) signal - For Files: FileDoesNotExistException signalOnFile: aFile- For FileReferences: FileDoesNotExistException signalWith: aFileReferenceApplications that want to offer the user the opportunity to select a different file can use:	UIManager default fileDoesNotExistsDefaultAction: exception"
"ConfigurationGenerator","Probably to be removed to use metacello toolbox"
"MutexSet","A MutexSet helps with aquiring a set of mutexes."
"ZnDispatcherDelegateTest",""
"IcePackageUnloaded","I announce when a package has been unloaded."
"OSTouchTwoFingersPinchBeginEvent","Two fingers started pinching"
"GTPlaygroundBasicTest",""
"CommandLineHandler","A CommandLineHandler is activated by the CommandLine. The responsible handler with the highest priority is selected and its instance-side method #activate is invoked.By default the handlers are selected by their class name. In the following shell invocation the FooHandler is chosen:	pharo Pharo.image FooHandlerA handler may provide a short name with the class-side #commandName method. If the FooHandler defined #commandName returning 'foo' it would be activated with the following shell invocation:		pharo Pharo.image foo	For more sophisticated handler selection the CommandLineHandler should implement the #isResponsibleFor: class-side method. An instance of the current command line options is passed to this method which should then return a boolean.Between all the responsible handlers the one with the highes #priority is chosen. To change the priority overwrite the class-side accessor."
"DANode","A PDNode is an abstract class for to display nodes in a tree."
"OCASTTranslatorTest",""
"ImageCleanerCommandLineHandler","Usage: clean [ --release ]	--release        do #cleanUpForRelease	--production   do #cleanUpForProduction	Documentation:	This allows to run the ImageCleaner from the commandLine.	With no special option it runs Smalltalk cleanUp: true.Usage:	pharo Pharo.image clean	pharo Pharo.image clean --release"
"ClyHierarchicallySortedClasses","I am a class query result which represent retrieved classes as hierarchically sorted list.I do not implement hierarchy building logic by myself. Instead I delegate it to the hierarchy variable, a kind of ClyClassHierarchy.And I use built map to enumerate classes in hierarchical order and convert them to ClyBrowserItem instances.You can create my instances directly from hierarchy: 	ClySubcalssHierarchy new asQueryResult	Or use explicit class side method: 		ClyHierarchicallySortedClasses with: ClySubcalssHierarchy new.	I also provide converting methods to get inverse hierarchy result or sorted by another function: 	aQueryResult withInverseHierarchy.	aQueryResult sortedBy: aSortFunction."
"ClyRegexPatternTest",""
"ClyUnclassifiedMethodsQuery","I return all unclassified methods."
"IntervalTest","SUnit tests for intervals"
"ClySwitchFocusToPreviousBrowserPaneCommand","I am a command to move browser focus to previous (left) navigation pane"
"ClySystemEnvironmentScope","I represent global scope of full system environment.I provide view on all packages, classes and methods in the system.My basis is instance of ClySystemEnvironment which represents global Smalltalk with friends (package organizer, system annoncer and others).You can access default instance from current image environment: 	ClyNavigationEnvironment currentImageScope"
"SUnitHelp","This is a custom help book for the SUnit framework."
"SimpleTestResourceA2","I'm a simple test ressource for test purposes"
"GTDebuggerSystemSettings","I register settings only needed for GTDebugger."
"ZnMessageBenchmark","I am ZnMessageBenchmark helps to test the benchmarking and profiling of ZnMessage writing and reading.Instance Variables	buffer:					<ByteArray>	message:				<ZnObject>	representation:		<ByteArray>ZnMessageBenchmark new	simpleRequest;	write: 10000.ZnMessageBenchmark new	simpleRequest;	writeRepresentation;	read: 10000.ZnMessageBenchmark new	simpleResponse;	write: 10000.ZnMessageBenchmark new	simpleResponse;	writeRepresentation;	read: 10000."
"VTermOutputDriver2","I convert high-level terminal commands  to characters sequences understood by the terminal.I use a term info backend to communicate with the terminal. The default term info implementation is TermInfoCharacter.I have two different style, the current styles (with any modifications the user made on it) and the installedStyle which is the style of the terminal.I give access to the styles I'm not implementing with the method set(For example self set:'1m'  will make the font bold)I use a SharedPool named VTermOutputStylesExample of usage:| out |	out := VTermOutputDriver2 stdout.	out 	tab;	<< 'normal text with a tab';	newLine;	redFont;	blueBackground: 'red text with blue background';	newLine;	bold;	<< 'red bold text';	bold;	underline;	newLine;	<< 'underlined red bold text';	insertLines:2;	close"
"GTSpotterStackedLayout",""
"TraitAlias","It is kept for compatibility with extension methodsCheck the class TaAbstractComposition for the new implementation."
"ReadStream","I represent an accessor for a sequence of objects that can only read objects from the sequence."
"ClyProjectManager","My subclasses represent concrete package management system like Cargo or Metacello.They implement behaviour which is needed to query project and package information from concrete management system: version, comment, metadata.Project and package are represented by classes ClyManagedProject and ClyManagedPackage"
"EyeFileSystemInspector","I am an inspector dedicated to the visualization of file systems"
"TelnetProtocolError","Abstract super class for exceptions signalled by clients based on the telnet protocol."
"FLLargeIdentityDictionary","I am an IdentityDictionary optimized for including a large number of elements."
"TextInputFieldModel","This is deprecated class because the original class TextInputFieldModel was renamed to TextInputFieldPresenter. You should stop to use this class and modify your code to use TextInputFieldPresenter."
"StartupPreferencesLoader","StartupPreferencesLoader searches for and executes .st files from certain locations such as Library/Preferences/pharo on Mac OS X.  StartupPreferencesLoader looks within such locations for a 'pharo' folder. This contains the startup scripts common to all versions of Pharo, and also optionally a folder per Pharo version holding startup scripts suitable for that version only.  So a typical directory layout might be....../some/folders/pharo/Content/Resources/pharo.image..../some/folders/pharo/Content/Resources/startup.st.../some/folders/.config/pharo/author.st.../some/folders/.config/pharo/useSharedCache.st.../some/folders/.config/pharo/1.4/mystartupFor14only.st.../some/folders/.config/pharo/2.0/mystartupFor20only.st(**Note however that '.config' is an invalid filename on Windows, so '..config' is used instead)To know the real values for you...Print the result of ""StartupPreferencesLoader preferencesGeneralFolder"" which holds the startup scripts common to all versions of Pharo.Print the result of ""StartupPreferencesLoader preferencesVersionFolder"" which holds the startup scripts specific to the version of the current image.-----------StartupPreferencesLoader examplewill define a script sample startup.st in your unix root on unix Its contents is StartupPreferencesLoader default executeAtomicItems: {	StartupAtomicItem name: 'Open Help' code: 'Workspace openContents: ''Here is just an example of how to use the StartupPreferencesLoader.I should only be displayed once.	You can also see StartupPreferencesLoader class>>#example'' label: ''Help''' isSingleton: true.	StartupAtomicItem name: 'Open Workspace' code: 'Workspace openContents: ''I should be displayed each time'''.}EXAMPLE 1============	"" an example of script generation ""	| item1 item2 |	item1 := StartupAction name: 'Open Help' code: 'Smalltalk tools workspace openContents: ''Here is just an example of how to use the StartupPreferencesLoader.I should only be displayed once.	 You can also see StartupPreferencesLoader class>>#example'' label: ''Help''' runOnce: true.	item2 := StartupAction name: 'Open Workspace' code:  [ Workspace openContents: 'I should be displayed each time' ].	StartupPreferencesLoader default addAtStartupInGeneralPreferenceFolder: {item1. item2}.		StartupPreferencesLoader default loadFromDefaultLocations.	StartupPreferencesLoader default loadFromDefaultLocations.EXAMPLE 2============	"" it's my personal script provided as example""	| items |	items := OrderedCollection new.	items add: (StartupAction name: 'Set the Author' code: [ Author fullName: Author fullName printString ]). ""replace it by your name""		StartupPreferencesLoader default addAtStartupInPreferenceVersionFolder: items named: 'author.st'.	items removeAll.		items add: (StartupAction name: 'Debugger option' code: [ Smalltalk tools debugger alwaysOpenFullDebugger: true ]).	items add: (StartupAction name: 'Dragging Option' code: [ UITheme defaultSettings fastDragging: true ]).	items add: (StartupAction name: 'Dialog Auto Accept' code: [ TextEditorDialogWindow autoAccept: true ]).	StartupPreferencesLoader default addAtStartupInPreferenceVersionFolder: items named: 'settings.st'.	items removeAll.		items add: (StartupAction name: 'Fonts option' code: [ FreeTypeSystemSettings loadFt2Library: true.		FreeTypeFontProvider current updateFromSystem.	StandardFonts defaultFont: (LogicalFont familyName: 'Lucida Grande' pointSize: 10) forceNotBold.	GraphicFontSettings resetAllFontToDefault.	StandardFonts codeFont: (LogicalFont familyName: 'Consolas' pointSize: 10).] runOnce: true).		StartupPreferencesLoader default addAtStartupInPreferenceVersionFolder: items named: 'fonts.st'.	items removeAll.	StartupPreferencesLoader default addAtStartupInImageDirectory: items.		StartupPreferencesLoader default loadFromDefaultLocations.EXAMPLE 3============	| items |	items := OrderedCollection new.		items add: (StartupAction name: 'General Preferences for all Pharo versions' code: [ 		FileStream stdout lf; nextPutAll: 'Setting general preferences for all Pharo versions'; lf.		FileStream stdout lf; nextPutAll: 'Finished'; lf.		 ]).	StartupPreferencesLoader default addAtStartupInGeneralPreferenceFolder: items named: 'generalSettings.st'.		items removeAll.	items add: (StartupAction name: 'Settings' code: [ 		FileStream stdout lf; nextPutAll: 'Setting general preferences for Pharo 2.0'; lf.		FileStream stdout lf; nextPutAll: 'Finished'; lf.		 ]).	StartupPreferencesLoader default addAtStartupInPreferenceVersionFolder: items named: 'settings.st'.		items removeAll.	items add: (StartupAction name: 'Image diretory' code: [ 		FileStream stdout lf; nextPutAll: 'Setting preferences for image directory'; lf.		FileStream stdout lf; nextPutAll: 'Finished'; lf.		 ]).	StartupPreferencesLoader default addAtStartupInImageDirectory: items "
"ClyMainItemCellMorph","I represent main cell in table row. I responsible to show expansion icon, current depth indentation when tree structure is specified.I allow to decorate me with- definition morph which will be placed before label	cellMorph definitionMorph: aMorph	cellMorph definitionIcon: iconName- extraToolMorphs which will be placed after label	cellMorph addExtraTool: aMorph	cellMorph addExtraIcon: iconName- any kind of properties for my label	cellMorph label emphasis: TextEmphasis italic emphasisCode.I implement layout logic in method #build.My instances are created using:	ClyMainItemCellMorph on: aDataSourceItemI provide two identation strategies which you can switch using fullIndentation variable.In full identation mode children items are shifted together with collapsing button.Otherwise collapsion button is always in same place but label and icons are shifted.Internal Representation and Key Implementation Points.    Instance Variables	definitionMorph:		<Morph>	extraToolMorphs:		<OrderedCollection of<Morph>>	item:		<ClyDataSourceItem>	itemDepth:		<Integer>	fullIndentation: <Boolean>"
"GTRunToSelectionDebugAction","This action is responsible for continuing the execution up to the point selected in the code pane."
"SycMoveMethodsToInstanceSideCommand","I am a command to move method to the instance side of defining class"
"GoferMerge","Merge work"
"LGitOptionsVersionsEnum","I map names to versions for all the option structs."
"CmdWorldMenuRegistration","I implement registration of world menu and global shortucts using standard system pragmas: - <worldMenu>- <keymap>In addition to support shortucts I register special #CmdWorldShortcutsCategory in current World instance. During shortcuts collection I use this category to add keymaps into the given builder.  Registration is done during class initialization. Or you can reevaluate it with:	CmdWorldMenuRegistration attachShorctutsToWorld "
"SDL_PixelFormat","SDL2 library structure"
"WindowOpened","I am emitted when a window opened."
"DelayBenchmark","The delay scheduling loop is THE highest priority code which is run in Pharo, in other words it is time-critical. The speed of this code is critical for accurate responses, it is critical for network services, it affects every last part of the system.DelayBenchmark provides a means for evaluating modifications.  This is fairly basic, providing only Transcript output of results.Over a number of trials the amount of concurrent delays is increased.  The durations are randomly pre-generated into an array to avoid that overhead in the trials.  A fixed seed is used to try and improve comparisons between runs. Uncomment the additional seeds to provide better averaging of results."
"RFASTTranslatorForValue","WORKAROUND: copy of OCASTTranslatorForValue.Will be removed when the new Translor design is in place"
"TChunkVisitor","I am a trait defining the basic methods for visiting a chunk object."
"RGMetaclassDefinition","RGMetaclassDefinition is a concrete representation of metaclasses of classes (traits are excluded)"
"OSEnvironment","I represent the user environment variables. See  `man environ` for more details.Get access using: 	Smalltalk os environmentI have a Dictionary-like API to access the system environment variables.The common denominator for all platforms implements a simple API that uses strings.In other words, methods- #at:- #at:put:and its variants receive normal strings and decide wether they have to encode those strings to platform bytes or not depending on the platform.My subclasses may or may not provide additional APIs to have more control on the particular encoding used."
"HiddenInstanceVariableSlot","I am a hidden instance variable.I work just like any other ivar, but I am not shown when asking for the #slots of a class.The idea is that virtual slots can use hidden non-virtual slots to store their state. Example are PropertySlot, BooleanSlot..."
"SlotClassVariableTest",""
"ManifestSpecCore","Core package for the Spec UI framework"
"IceTipMetacelloInstallBaselineGroupCommand","I'm a command to install a baseline (choose the group(s) to install)"
"SycRefactorVariableCommand","I am a base class for command which perform particular kind refactoring on given variables.I provide suitable method to create refactoring instances: - createRefactorings: variableRefactoringClass- createRefactorings: variableRefactoringClass using: initBlockSubclasses use this methods to create refactoring instances.I delegate actual refactoring instantiation to the each variable. It allows abstract difference between different kind of variables and to have single command for same kind of class variable refactoring and instance variable refactoring:	eachVar createVariableRefactoring: variableRefactoringClass	Look at #createVariableRefactoring: implementors for details."
"BIConfigurableFormatterFormattingTest","Tests for BIConfigurableFormatter"
"GLMListPresentation","A GLMListPresentation simply shows the given elements within a list.Instance Variables	tagsBlock:		<Object>	tagsFilterBlock:		<Object>tagsBlock	- xxxxxtagsFilterBlock	- xxxxx"
"MetacelloCoreVersionQueryTestCase",""
"RBSubclassResponsibilityNotDefinedRule","This rule checks if all subclassResponsibility methods are defined in all leaf classes. if such a method is not overridden, a subclassResponsibility message can be occur when this method is called."
"LabelledContainerTest",""
"RBAddVariableAccessorTransformationTest",""
"GLMMorphicWatcherRenderer","This is a special widget renderer in that it will get to render multiple panes on the same container morph provided by a unique instance of the GLMWatcherWindow."
"GoferRecompile","Recompile"
"AbstractTreeFilter","I am an abstract class for tree filters.My children should propose a filter for tree nodes"
"ZnFileRetrieveContents","I am ZnFileRetrieveContents.I am a ZnUrlOperation.I implement the #retrieveContents URL operation for FILE urls.Part of Zinc HTTP Components."
"EphemeronLayout","A layout for ephemeron objects"
"TestCase","A TestCase is an implementation of the Command pattern to run a test.  TestCase instances are created with the class method #selector:, passing the symbol that names the method to be executed when the test case runs.  Various UIs exist to run these instances and they can also be created and run programmatically.When you discover a new fixture, subclass TestCase and create a #test... method for the first test.  As that method develops and more #test... methods are added, you will find yourself refactoring temps into instance variables for the objects in the fixture and overriding #setUp to initialize these variables.  As required, override #tearDown to nil references, release objects and deallocate.See my superclass' comment for assertion and logging information."
"GLMItemAdded",""
"SizeInMemoryTest","SUnit tests for the size of objects in memory"
"RBClass2","I represent the instance side of a class in a refactoring namespace. You can query methods and (instance) var names, poolDictionaries, class category and comment.I shouldn't be created directly, but always be part of a refactoring namespace.My  namespace usally knows me and my meta class."
"CairoFontMetricsProvider","Provide font metrics (Cairo)"
"GZipWriteStream","gzip is an integral part of the VM. "
"GLMPrintSelection","I am event indicating to the renderer to execute and print the currently selected text."
"PharoDocCommentNodeTest","SUnit test for PharoDocCommentNode"
"MyTestNotification","A notification for tests "
"TraitsBootstrap","Utility class with bootstrap scripts"
"TClass","Kernel trait for Class"
"ClyFlagMethodGroupProvider","I provide ""flags"" method groups when given classes define methods with flag"
"GLMPaneAnnouncement","These announcements are used by the browser to communicate with the renderer whenever the panes configuration is modified in some way.Instance Variables:	pane	<GLMPane>	browser	<GLMBrowser>	position	<Integer>"
"ClyNavigationEnvironmentTest",""
"NullTermInfo","I provide a simple mapping from high-level commands to low-level terminal character sequences."
"ClyOldMessageBrowserAdapter","I am a special adapter for the old message browser interface which users call using: 	Smalltalk tools messageList The most of system queries are triggered by SystemNavigation which collects list of result methods and pass them to the registered message browser.In contrast Calypso needs instance of query.So to suppord old (current) approach I build special ClyOldMessageBrowserQuery on constant list of methods and then I open ClyQueryBrowser on it. When Calypso is registered as default browser I am used as #messageList.In future we should introduce #queryBrowser instead of it with direct usage of Calypso queries.Internal Representation and Key Implementation Points.    Instance Variables	autoSelect:		<Boolean>	messages:		<Collection of<CompiledMethod>>	refreshingBlock:		<BlockClosure>	title:		<String>"
"GTMockSpotterStep",""
"MCInstanceVariableDefinition","A MCInstanceVariableDefinition represents an instance variable definition."
"RBExtractToTemporaryTest",""
"ObjectFinalizer","Represents an action that is to be taken when a target object (not referenced by the ObjectFinalizer) is garbage-collected."
"IRPop","Instruction ""popTop"""
"DADependentPackageNode","A PDDependentPackageNode is used to display a dependent package in a tree."
"ZnStaticFileServerDelegate","I am ZnStaticFileServerDelegate.I am a simple proof of concept implementation of a web server serving static files.I handle urls with an optional prefix as requests for files in a directory.I serve index.html or index.htm when a directory is requested and these files exist.I do a redirect when a path that is not does not end with a / refers to directory.I function as a delegate for ZnServer.ZnServer startDefaultOn: 1701.ZnServer default delegate: ((ZnStaticFileServerDelegate new) 									prefixFromString: 'apple/macosx'; 									directory: '/Library/WebServer/Documents' asFileReference; 									yourself).Part of Zinc HTTP Components."
"SpecStubDiffView","Only stub object, no real view is displayed."
"ExpanderMorph","A morph that can expand or collapse to show its contents."
"OmSequentialSuffixStrategy","Use FileReference>>nextVersion to find the new name."
"TIceRepositoryReader","I indicate when a clas is reader for iceberg "
"ReFeedbacker","I am reporting complaints about critics. No one should use me dirrectly. Use ReCritic>>#reportUselessness instead"
"TemporaryVariableTest",""
"RubPluggableGetMenuPolicy","I am used to get the correct menu of common text areas"
"ManifestSystemSources","Support for source and changes files"
"SpecStubCheckBoxView","Only stub object, no real view is displayed."
"TLGitPrintingTrait",""
"RBRemoveClassTransformationTest",""
"FFICallbackReturnValue","Obsolete support for old-style callbacks.  An instance of FFICallbackReturnValue specifies a return value to be passed to a callback callee.  It is intended to have overlaid the following struct:/* * Returning values from callbacks is done through a CallBackReturnSpec * which contains a type tag and values.  It is designed to be overlaid upon * an FFICallbackReturnProxy created at the Smalltalk level to return values. */typedef struct {    long type;# define retint32  0 # define retint64  1# define retdouble 2# define retstruct 3    long _pad; /* so no doubt that valflt64 & valint32 et al are at byte 8 */    union {        long valint32;        struct { long low, high; } valint64;        double valflt64;        struct { void *addr; long size; } valstruct;    } rvs;} CallBackReturnSpec;"
"UserInterruptHandler","An UserInterruptHandler watches incoming input events and checks for the user interrupt key.If encountered it interrupts the current process and opens a notifier..Instance Variables	interruptKey:		<Object>interruptKey	- definition of the user interrupt key"
"IceWorkingCopyState","I represent the state of a working copy. I have several methods to combine myself with package states and generate new working copy states."
"IceGitRemoteBranch",""
"GTSpotterSelectedCandidateChanged",""
"ClyAddStaticBreakpointCommand","I am a command to add static breakpoint into particular source node."
"LGitCallback",""
"FLIteratingCluster","I am a template class whose algorithm for serialize a collection of objects consists on delegate the serialization of each individual object to the subclass."
"ReSystemAnnouncer","I announnce events related to Renraku and it's users.To see the possilbe announcements check ReCriticEvent hierarchy.To subscribe use:ReSystemAnnouncer uniqueInstance week ..."
"BasicBehaviorClassMetaclassTest","This class contains some tests regarding the classes 	Behavior		ClassDescription			Class			Metaclass "
"GTInspectorSelfNode","I model the  `self` variable. This the value of this variable is always the host object. "
"ClyFlagMethodGroupProviderTest",""
"FreeTypeGlyphRenderer","This class produces glyphs for a FreeTypeFont.It can be subclassed to provide, for example, sub-pixel anti-aliased glyphs."
"RxsBranch","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A Branch is a Piece followed by a Branch or an empty string.Instance variables:	piece		<RxsPiece>	branch		<RxsBranch|RxsEpsilon>"
"GLMAllNilCondition","Used to test if all defined arguments of a condition are nil."
"OSWindowFormRenderer","I provide a way of delivering form's bits to window's contents.To obtain my instance, first one create a valid OSWindow and then use #newFormRenderer: .Then you can render on form, and form's contents will serve as medium which will be displayed inside a window."
"ZnMonticelloServerDelegate","I am ZnMonticelloServerDelegate.I am a proof of concept implementation of a basic Monticello server.I function as a delegate for ZnServer.ZnServer startDefaultOn: 1701.ZnServer default delegate: ((ZnMonticelloServerDelegate new) 									directory: '/tmp/monticello'; 									yourself).Part of Zinc HTTP Components."
"OCCompilerSyntaxErrorNotifyingTest","A CompilerSyntaxErrorNotifyingTest is a specialization for testing correct handling of non interactive compiler notification.Non interactive is a very relative notion in Smalltalk...Here it means that user interaction will not happen directly in the TextEditor holding source code, but rather thru a SyntaxError window that will pop-up.This test intercept the Notification before the pop-up is raised."
"ClyVariableMethodGroup","I am group of methods which reference some variable. I not keep this variable directly. All required information is passed to my instance from variables query"
"DelayMutexScheduler","I add shared-resource based synchronization to the basic scheduler."
"InputEventFetcher","EventFetcher is responsible for fetching the raw VM events and forward them to the registered event handlers. Event fetching is done in a high priority process, so even with other processes (e.g. the Morphic UI process) being busy events will still be fetched.Instance Variables	inputSemaphore:		<Semaphore>	eventHandlers		<OrderedCollection>	fetcherProcess		<Process>inputSemaphore	- a semaphore registered with the VM to signal availability of an event. Currently not supported on all platforms.eventHandlers	- registered event handlers. Event buffers are cloned before sent to each handler.fetcherProcess	- a process that fetches the events from the VM. Either polling (InputEventPollingFetcher) or waiting on the inputSemaphore.Event format:The current event format is very simple. Each event is recorded into an 8 element array. All events must provide some SmallInteger ID (the first field in the event buffer) and a time stamp (the second field in the event buffer), so that the difference between the time stamp of an event and the current time can be reported.Currently, the following events are defined:Null event=============The Null event is returned when the ST side asks for more events but no more events are available.Structure:[1]		- event type 0[2-8]	- unusedMouse event structure==========================Mouse events are generated when mouse input is detected.Structure:[1]	- event type 1[2]	- time stamp[3]	- mouse x position[4]	- mouse y position[5]	- button state; bitfield with the following entries:		1	-	yellow (e.g., right) button		2	-	blue (e.g., middle) button		4	-	red (e.g., left) button		[all other bits are currently undefined][6]	- modifier keys; bitfield with the following entries:		1	-	shift key		2	-	ctrl key		4	-	(Mac specific) option key		8	-	Cmd/Alt key		[all other bits are currently undefined][7]	- reserved.[8]	- reserved.Keyboard events====================Keyboard events are generated when keyboard input is detected.[1]	- event type 2[2]	- time stamp[3]	- character code		For now the character code is in Mac Roman encoding.[4]	- press state; integer with the following meaning		0	-	character		1	-	key press (down)		2	- 	key release (up)[5]	- modifier keys (same as in mouse events)[6]	- reserved.[7]	- reserved.[8]	- reserved."
"TCloneTest","A trait for test purposes"
"MCTraitParser","A MCTraitParser extracts an MCTraitDefinition from the source."
"ClippingCanvas","A modified canvas which clips all drawing commands."
"OCASTSemanticAnalyzer","I visit each node in the abstract syntax tree while growing and shrinking a scope chain. Each method and block node is linked with its corresponding scope object, and each variable def and ref is linked with its corresponding OCVariable. Exceptions are raised for undefined variable references and so on (see subclasses of OCSemanticWarning)."
"ClyRestUntaggedClassesQueryTest",""
"IceUnbornRepositoryProperties",""
"ClyBrowserToolDecorator","I a base class for various kinds of browser tab decorators.Decorators are added to browser tools by browser plugins using following method: 	aBrowserTool addDecorator: aBrowserToolDecorator	Subclasses should implement single method: - decorateToolWhen decorator is added to the tool it sets my browserTool variable.And #decorateTool method performs required logic with this given tool. Internal Representation and Key Implementation Points.    Instance Variables	browserTool:		<ClyBrowserTool>"
"ClyOpenSpotterMenuCommand","I'm a command to open ""spotter navigation"" menu.This navigation brings an easy way to access all available panels and commands of selected browser.activation is usually cmd+/ (because is close to the arrows)"
"OSMouseButtonPressEvent","i am delivered when user presses a mouse button"
"KMKeyCombinationSequence","I represent a sequence of key combinations.In order to have a match between me and a user's key presses, all user events must match all of my inner shortcuts in the same exact order.To create a sequence of key combinations use the #, message. Like for example:$a command , $b shift"
"RBSendsUnknownMessageToGlobalRule","Checks for messages that are sent but not implemented by a global. Reported methods will certainly cause a doesNotUnderstand: message when they are executed."
"STONWriter","STONWriter serializes objects using the Smalltalk Object Notation format. Customization options are:- prettyPrint <Boolean> default is false	if true, produce pretty printed output- newLine <String> default is String cr	what sequence to use for EOL- asciiOnly <Boolean> default is false   if true, use \u escapes for all non-ASCII characters   most common control characters are still escaped- jsonMode <Boolean> default is false	if true, the follow changes occur	- strings are delimited with double quotes	- nil is encoded as null	- symbols are treated as strings	- only STON listClass and STON mapClass instances are allowed as composite objects	it is wise to also use either #error or #ignore as referencePolicy to avoid references- referencePolicy <#normal|#ignore|#error> default is #normal	if #normal, track and count object references and use references to implement sharing and break cycles	if #error, track object references and signal STONWriterError when a shared reference is encountered	if #ignore, don't track object references which might loop forever on cycles - keepNewLines <Boolean> default is false	if true, any newline sequence CR, LF or CRLF inside strings or symbols will not be escaped 	but will be written as the newline EOF convention	Note that in default STON mode I only use the following named character escapes: \b \t \n \f \' and \\ while in JSON mode \' is replaced by \"""
"MCMockDependency","A test object mocking a dependency"
"IceErrorVisitor","I'm a generic error visitor to traverse diferent iceberg errors."
"RBRenameVariableTransformation","Renames a variable in a class and all its direct accesses. It is necessary to indicate whether the variable is an instance or class variable. It is not implemented as a composite transformation because the rename is made internally in the model.Usage:transformation := (RBRenameVariableTransformation			rename: 'classBlock' to: 'asdf'			in: #RBBasicLintRuleTest			classVariable: false)			transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:overrides from RBAddVariableRefactoring and RBRemoveVariableRefactoring"
"TestDelayMutexSchedulerMicrosecondTicker","I inherit delay scheduler system tests and run them for the specific combination of...  scheduler DelayMutexScheduler  ticker DelayMicrosecondTicker."
"RBProtectVariableTransformationTest",""
"GTSpotterContextChanged",""
"HaloMorph","This morph provides a halo of handles for its target morph. Dragging, duplicating, rotating, and resizing to be done by mousing down on the appropriate handle. There are also handles for help and for a menu of infrequently used operations."
"GTSpotterRecorderCategorySelectedEvent","A GTSpotterRecorderCategorySelectedEvent  models the action of  selecting a category in the search results. This event stores the name of the category and the number of results that were matched by the current query.Instance Variables	categoryLabel:		<Object>	elementCount:		<Object>categoryLabel	- xxxxxelementCount	- xxxxx"
"HelpTopicListItemWrapperTest","SUnit tests for class HelpTopicListItemWrapper"
"ClyFailedTestMethodsQuery","I return all failed tests from given test cases available in my scope"
"TonelWriteError","I'm a writing error.I happen whenever an unrecoverable problem was encountered during writing of tonel."
"MCFileTreeFileSystemUtils",""
"IceGitSshRemote","A remote repository created out of a git  url, such as 'git://localhost/owner/repository.git'."
"IceTipRepairCheckoutNewBranch","I will perform a checkout of a new branch starting from the current reference commit. This way, by changing the HEAD into something that fits the image, my repository will be attached and repository will be able to perform commits and all regular operations.I'm active when: 	- working copy is detached 	- repository HEAD is detached"
"MCMockClassD",""
"GTDebugActionButton",""
"AthensBalloonSurfaceExamples","Athens example using Ballon as surface "
"SlotAnnouncementsTest",""
"OmFuelEntryWriter","I implement how to write entries to a stream using Fuel serializer."
"RBClassTest",""
"EpLogBrowserToolbarPresenter","I am a toolbar to be used in the EpLogBrowserModel."
"RubTextStyleChanged","I am raised when the style (font, style...) is changed"
"LGitConfig","/** Memory representation of a set of config files */typedef struct git_config git_config;https://libgit2.github.com/libgit2/#HEAD/type/git_config"
"ClyMethodTagsAndPackageEditorMorph","I am status bar tool for method editors to select method tags or extending package for the editing method.While system only support tags when method is not extension I do not show both elements.So I provide checkbox for extension status.When it is active I should extending package in the label.When it is not active I show method tag (protocol) in the label.When user toggle checkbox I request either package or protocol depending on requested mode of method. Internal Representation and Key Implementation Points.    Instance Variables	editButton:		<Morph>	extensionCheckbox:		<Morph>	label:		<StringMorph>"
"GoferBrowseLocalChanges","Browse local changes"
"RPackageTagTest","SUnit tests for RPackage tags"
"IceTipDirectMergeType","I'm a direct merge.I will perform a simple merge: 		Current branch <- Merging branchThis is the default merge mechanism (what users do most of the time)"
"GLMFormatedPresentation","GLMFormatedPresentation is an abstract presentation that offers a format block to be used for formatting the rendering of the presentation. The renderer will use the formatDisplayValueOf: method."
"ClySwitchMethodViewModeCommand","I am a base class for commands which switch full browser method group mode.It can be either method groups or variables.Subclasses define what kind of method groups whey target. They implement following class side method: - methodGroupType"
"IceGitTransferProgress",""
"EpReferenceFixerVisitor","I fix references from Epicea events to Epicea entries."
"PreDebugDoesNotUnderstandAction","A PreDebugDoesNotUnderstandAction adds the DoesNotUnderstandDebugAction debugging actions to the pre debug window. When executed, it will further close the pre debug window and open the full debugger. Instance Variables	preDebugWindow:		<Object>preDebugWindow	- xxxxx"
"FreeTypeFontSelectorDialogWindow","I'm a dialog to select a font. Usage example:|fontSelector|fontSelector := FreeTypeFontSelectorDialogWindow new.UITheme builder openModal: fontSelector.fontSelector selectedFont inspect."
"MCPackage","MCPackage represents a package. It is merely a wrapper on top of a package set or packageInfo.Strangely enough it does not inherit from MCDefinition.Its most important method is snapshot which returns a snapshot with all the entities that should be saved. "
"FileException","Common superclass for exceptions while using file streams"
"EpOmbuFileReaderService","I implement a service for browsing Epicea logs."
"RBDummyLintRuleTest",""
"ClyQueryBrowser","I am a query browser.I show in one table result of any system query.To show query use following method: 	ClyQueryBrowser openOn: (ClyMessageSenders of: #do:)I implement more simple API on class side: 	ClyQueryBrowser browseSendersOf: #do:.	ClyQueryBrowser browseImplementorsOf: #do:.	ClyQueryBrowser browseMethods: {Point>>#x. Point>>#y}.Last method is suitable to show given list of methods. But normally users should use first class queries.I provide scoping mechanizm: user can filter query result using scopes from the compobox in toolbar.When I spawned from the browser I receive all its navigation scopes.For full browser I receive current selection package and class scopes.For query browser I inherit all scopes which it has.Also I add extra scopes to my scope list which is based on my current selection.For example selected method will bring extra class and package scopes of this method.  Internal Representation and Key Implementation Points.    Instance Variables	activeScope:		<ClyScope>	queryScopes:		<OrderedCollection of<ClyScope>>	resultView:		<ClyQueryView>	systemQuery:		<ClyQuery>"
"ScaledDecimalTest","I provide a test suite for ScaledDecimal values. Examine my tests to see how SmallIntegers should behave, and see how to use them."
"DynamicPresentersListBuilder","I allow to build a list of spec presenters into a DynamicComposablePresenter depending on an arbitrary number of objects.I also allow to specify the layout to use for these presenters.See[[[	self example.]]]"
"GLMExtensionsTest",""
"OSNullWindowDriver","I provide a mock (or null) driver, which can create a valid OSWindow instances, despite the fact that underlaying OS may not support any notion of windows or even graphical user interface.I can be used for testing (by picking as a preferrable driver in window attributes),or as a default driver while running image in headless mode.Using null driver allows most of the code which relies on existance of at least single main window to work flawlessly, by simply ignoring all requests/commands passed to it."
"RubTextSegmentIconDisplayer",""
"ChainedSortFunctionTest","Unit test for chained sort functions"
"ByteString","This class represents the array of 8 bit wide characters."
"LGitDiff",""
"IceUndefinedRemote","I am a null object representing a not found remote. I'm mainly used for polimorphism when the well known remote 'origin' is not found in the repository."
"MorphicUIBugTest","A MorphicUIBugTest is a class for testing the shortcomings and repairs of the MorphicUI manager..Instance Variables	cases:		<aCollection>cases	- a list of morphs that may need to be deleted during teardown.	the tests are expected to fill this list it starts out empty by default.		"
"GTSpotterDiveOut",""
"KMMetaModifier","I represent the Meta or Command key modifier. Look at my superclass for a more detailed explanaition."
"QuestionWithoutCancelDialogWindow","A yes/no message dialog. Yes (return) is the default. Escape will answer no."
"TimedOut","I am signalled by #duration:timeoutDo: if the receiving block takes too long to execute.I am signalled by a watchdog process spawned by #duration:timeoutDo: and caught in the same method. I am not intended to be used elsewhere."
"SpecTableLayoutAddSpacer","A SpecTableLayoutAddSpring class is a description of the addition of a spacer to a table layout.Can be either:- flexible (fills available space; default) - of a fixed sizeNote that flexible spacers do not work with wrapDirection other than #none."
"ZnSimplifiedByteEncoder","I am ZnSimplifiedByteEncoder, a concrete subclass of ZnCharacterEncoder.I handle single byte encodings where byte values 0 to 127 map to ASCII and 128 to 255 are a permutation to Unicode characters.I am like ZnByteEncoder, a subclass of me, but I implement just two mappings, latin1 or iso-8859-1 and ASCII, to conserve memory."
"RBEquivalentSuperclassMethodsRule","This smell arises when a method is equivalent to its superclass method. The methods are equivalent when they have the same abstract syntax tree, except for variables names. Such method does not add anything to the computation and can be removed since the superclass method have the same behaviour. Furthermore, the methods #new and #initialize are ignored once they are often overridden for compatilbity with other platforms. The ignored methods can be edited in RBEquivalentSuperclassMethodsRule>>ignoredSelectors"
"ReImageRuleBaner","A pluggable functionality used to ban rules in the image scale"
"CommandLineArgumentsTest","That class tests the API given by AbstractUserInput. Since that class is obviously abstract, it can't be instantiated, the tests are running on CommandLine (which inherits from AbstractUserInput)"
"SystemNavigationTest","I am an sunit test for SystemNavigation with the default value for its environment (Smalltalk globals)."
"ControlButtonMorph","Specially themed ""control"" button. Used for drop-lists, expanders etc."
"LabelledSliderInput","I am a LabelledContainer specialized to manage a SliderInput.See LabelledContainerself exampleI provide the accessors sliderInput to be more intuitive than subwidget, and the shortcuts input and slider.I provide shortcuts for the most common methods to avoid the use of the DoesNotUnderstand or the writing of long chain of accessors."
"RBExtractMethodTest",""
"FontChooser","I'm an object holding information to choose a font from a list of fonts."
"SubscriptionRegistry","The subscription registry is a threadsafe storage for the subscriptions to an Announcer.In Pharo, subscriptionsFor: protocol is not implemented.This is because Announcer does not provide public access to its registery for encapsulation reasons.(We do not want access to the announcer from action blocks to break encapsulation to other subscribers)"
"RFTempWrite","I model temp write."
"BenchmarkResult","I am BenchmarkResult. I know how much iterations where executed in a specific elapsed time duration.I am the result of running the same piece of code multiple times.I can compute my average #frequencey (#executionsPerSecond) and #period (#timePerExecution).I have a human friendly print representation.BenchmarkResult new	iterations: 20000;	elapsedTime: 10 seconds;	yourself."
"FTStrongSelectionChanged","I announce a strong selection happened (this is a double-click)Description-------------------I store the index of the row and the event (doubleClick) the FTTableMorph received.I should be use by the user to defined an action to execute when a DoubleClic happen on a Table.Public API and Key Messages-------------------- #rowIndex: anIndex event: anEvent 		is the commun constructor. Internal Representation and Key Implementation Points.------------------    Instance Variables	event:		An event received by the FTTableMorph.	selectedRowIndex:		The index of the row in the table that was selected. 			From the index you can get an object from the FTTableMorph with: aFTTableMorph dataSource elementAt: selectedRowIndex  "
"PluggableDialogWindow","Pluggable form of dialog window supporting custom selector on model for applying changes along with configurable content and buttons."
"MenuRegistration","A MenuRegistration stores the declaration of a menu item. It is mainly an handler for a PluggableMenuItemSpec. A menu item is declared withing a particular method tagged with a pragma. This kind-of method takes a builder as argument and its evaluation results in the building of a MenuRegistration sub-tree which is stored in the builder.   As an example:MenuRegistrationExample class>>myOwnCoolToolRegistrationOn: aBuilder 	<worldMenuExample> 	(aBuilder item: #MyOwnCoolTool)		label: 'My own cool tool';		target: Workspace; 		selector: #openContents: ;		arguments: #('yep, my own cool tool can be opened from the world menu ! :)')	Evaluating this method results in the creation of a MenuRegistration which name is #MyOwnCoolTool. Thus, the resulting sub-tree is only made of a root node. After it has be built, this root node is recorded in the builder. To experiment this, just evaluate the following code:-------------| builder |builder := PragmaMenuBuilder new.MenuRegistrationExample myOwnCoolToolRegistrationOn: builder.builder explore-------------Using pragma allows the menu builder to dynamically discover which are the methods to evaluate in order to build a menu. Thus, a resulting menu is built by evaluating a set of methods which share the same pragma keyword.In the following example, all method having <worldMenuExample> are evaluated for the building of the resulting menu:---------------(PragmaMenuBuilder pragmaKeyword: 'worldMenuExample' model: nil) menu popUpInWorld---------------Within a method, three kind of declarations can be used: (1) item by item (2) an item with a sub-menu and (3) a group.1 -  item by item menu registration declaration:This kind of declaring is for the setting of one menu item and only one within a method.1.1 -  A simple menu item with an actionIn the following example, a menu item with the name #'Browser' and a action which consists in sending #openClassBrowser to StandardToolSet is declared:AClassSomewhere class>>openBrowserOn: aBuilder	<myMenuTest>	(aBuilder item: #'Browser') 		target: StandardToolSet; 		selector: #openClassBrowser.A simple action without any argument can also be set with a block:	(aBuilder item: #'Browser') action: [StandardToolSet openClassBrowser]You can also indicate a balloon help string and a particular icon:	(aBuilder item: #'Browser') 		action: [StandardToolSet openClassBrowser];		help: 'Open a system browser';		icon: MenuIcons smallSystemBrowserIconIf the action needs one or several arguments, you can also give it/them as follow:	(aBuilder item: #'Save and quit') 		target: SmalltalkImage current; 		selector: #snapshot:andQuit:.		arguments: #(true true)		By default, the item label is set with the item name but it can be explicitly given as follow:	(aBuilder item: #'Browser')		label: 'System browser'; 		target: StandardToolSet; 		selector: #openClassBrowser.1.2  -  Placing the menu item in a  menuThe resulting menu item of previous example will be placed at the root of the menu.In order to declare another place for it, you have to explicitly set its parent name.As an example, consider the following item which declares a simple entry with no action.Such item is typically used as a root for a sub-menu tree:AClassSomewhere class>>openToolsOn: aBuilder	<myMenuTest>	(aBuilder item: #'Tools')Now, a sub-menu item for #Tools can be declared separately, within another methodby using the #parent: message:AnotherClassSomewhere class>>myToolsOn: aBuilder	<myMenuTest>	(aBuilder item: #'CoolTool')		label: 'Cool tool';		parent: #Tools;Note that the argument of #parent: must be the name of another item. If it is not the case, then the parent name indication is simply ignored.1.3  -  Item orderingIf no ordering setting is indicated, items ordering is unpredicable (it depends on method retrieving order). If one want an item to appear at a certain position, it is possible to set it by sending #order: to a MenuRegistration. The #order: message takes a float as argument. As an example, see  the two following declarations, in the resulting menu, Wozy is placed before 'Wozy configuration'AnotherClassSomewhere class>>myWozySystemOpenOn: aBuilder	<myMenuTest>	(aBuilder item: #'Wozy')		parent: #CoolTool;		order: 1.0		AnotherClassSomewhere class>>myWozySystemConfigOn: aBuilder	<myMenuTest>	(aBuilder item: #'Wozy configuration')		parent: #CoolTool;		order: 2.02) Item with a submenuThe one menu item - one declaring method way can be ugly. When a set a menu items are known to be put all-together, it is possible to declare the sub-tree in one method. The following example show such a sub-tree with the #Tools item at root and four sub-items declared in a single method. Note a menu target declared for the root is shared by all sub-items. In that case, it also remains possible for a sub-item to declare its own target.AClassSomewhere class>>openToolsOn: aBuilder	<myMenuTest>	(aBuilder item: #'Tools')		target:  StandardToolSet; ""The target is shared by all children""		with: [ ""My sub-menu are given here""			(aBuilder item: #'System browser') selector: #openClassBrowser.			(aBuilder item: #Workspace) selector: #openWorkspace.			(aBuilder item: #'Test Runner') selector: #openTestRunner.			(aBuilder item: #'Monticello Browser') selector: #openMonticelloBrowser]		3) group of menu itemsWhen you want some items to be shown always grouped together, you can use a group. Its declaring is like an item with a submenu except that you are using the message #group: instead of #item:. The consequence is that only the children are shown in the menu. Of course, #label and #icon: are ignored for a group. Here is an example:AClassSomewhere class>>mostUsedToolsOn: aBuilder	<myMenuTest>	(aBuilder group: #MostUsedTools) ""My name can be also used as parent name""		withSeparatorAfter; ""A separator will be added after my last child""		order: 0; ""the entire group will be placed at the top""		target:  StandardToolSet; ""The target is shared by all children""		with: [			(aBuilder item: #'System browser') selector: #openClassBrowser.			(aBuilder item: #Workspace) selector: #openWorkspace.			(aBuilder item: #'Test Runner') selector: #openTestRunner.			(aBuilder item: #'Monticello Browser') selector: #openMonticelloBrowser]---------------------------		Instance Variables	isGroup:		<Boolean>	itemList:		<SortedCollection>	order:		<Number>	owner:		<MenuRegistration>	parentName:		<Symbol>	spec:		<PluggableMenuItemSpec>isGroup	- if true, then this item is ignored and flattenitemList	- all my MenuRegistration (my sub-menus or my elements if i'm a group)order	- my order in the owner listowner	- my ownerparentName	- the declared parent name which serve as basis for PragmaBenuBuilder>>#arrangeRegistrationsspec	- my PluggableMenuItemSpec"
"RBPatternPragmaNode","RBPatternPragmaNode  is a RBPragmaNode that is used by the tree searcher  tomatch pragma statements. Just like RBPatternMethodNode for method nodes.Instance Variables:	isList	<Boolean>	are we matching each keyword or matching all keywords together (e.g., `keyword1: would match a one argument method whereas `@keywords: would match 0 or more arguments)"
"RBAbstractClassVariableTest",""
"IceTipVersionHistoryBrowser","I'm a browser and panel to show the version history of a method. (self onRepository: aRepository method: aMethod) openWithSpec."
"IRVisitor","I visit an IRMethod instructions and write them out to a print stream."
"OSMouseMoveEvent","i am delivered when user moves a mouse"
"FTTableContainerMorph","I am a Morph that contain visible rows in a FTTableMorph. Description ------------------I am the main Morph of the FastTable that is responsible of displaying all the rows of a Table. My owner need to be a FTTableMorph and I will use his dataSource to display the needed informations.Public API and Key Messages-----------------		- #updateAllRows - #updateExposedRows- #ipdateHeaderRow Internal Representation and Key Implementation Points.----------------    Instance Variables	exposedRows:		A dictionary of index/row with all the exposed rows.	headerRow:			When not nil contains the header row of the container.	needsRefreshExposedRows:		A boolean that is true if the container need a refresh. The method #drawOn: is responsible of my rendering."
"ClyProperty","I am a root of hierarchy of item properties.My subclasses represent specific information about objects"
"ExternalType","An external type represents the type of external objects.Instance variables:	compiledSpec	<WordArray>		Compiled specification of the external type	referentClass	<Behavior | nil>	Class type of argument required	referencedType	<ExternalType>	Associated (non)pointer type with the receiverCompiled Spec:The compiled spec defines the type in terms which are understood by the VM. Each word is defined as:	bits 0...15 	- byte size of the entity	bit 16		- structure flag (FFIFlagStructure)				  This flag is set if the following words define a structure	bit 17		- pointer flag (FFIFlagPointer)				  This flag is set if the entity represents a pointer to another object	bit 18		- atomic flag (FFIFlagAtomic)				  This flag is set if the entity represents an atomic type.				  If the flag is set the atomic type bits are valid.	bits 19...23	- unused	bits 24...27	- atomic type (FFITypeVoid ... FFITypeDoubleFloat)	bits 28...31	- unusedNote that all combinations of the flags FFIFlagPointer, FFIFlagAtomic, and FFIFlagStructure are invalid, EXCEPT from the following:	FFIFlagPointer + FFIFlagAtomic:		This defines a pointer to an atomic type (e.g., 'char*', 'int*').		The actual atomic type is represented in the atomic type bits.	FFIFlagPointer + FFIFlagStructure:		This defines a structure which is a typedef of a pointer type as in			typedef void* VoidPointer;			typedef Pixmap* PixmapPtr;		It requires a byte size of four (e.g. a 32bit pointer) to work correctly.[Note: Other combinations may be allowed in the future]"
"ClyAllMethodsQueryTest",""
"AColorSelectorMorph","ColorComponentSelector showing an alpha gradient over a hatched background."
"RBkeysDoRule","Replaces keys/values do: by keysDo: and valuesDo:.  This rule is based on the observation that using aDict keys do: or aDict values do: create an intermediary collection. Dictionary>>keys	""Answer an Array containing the receiver's keys.""		^Array new: self size streamContents: [:s| self keysDo: [:key| s nextPut: key]]	This array can be quite large and using the keysDo: does not create such intermediate collection."
"GLMDropDownListMorphSelectionChanged",""
"FLGlobalNotFound","I represent an error produced during materialization when a serialized global name doesn't exist (at Smalltalk globals)."
"SortFunctionTest","Unit test for sort functions"
"ReTestClassNameShouldNotEndWithTestsTest",""
"RePriorInvocationCritique","The critic tells that a required message is missing prior to the one in question"
"SimpleTestResourceCircular1","I'm a simple test ressource for test purposes"
"PaneScrolling","I am an announcement raised when a scroll pane is scrolled.My two attributes are	- step: a point representing the scrollbar movement	- scrollPane: a pointer to the widget raising the announcement"
"ClyBrowserItem","I wrap actual object retrieved by query and extend it with information required for the browser:- name of item- type of item (a class)- position inside result items- depth inside items hierarchy (if hierarchycal result was built)- properties about actual objectFor example you can query classes from system. The result can be sorted by name. Or classes can be arranged in subclass hierarchy. In first case I will represent particular class with one position and zero depth. But in another case position of same class will be different and depth could be not zero.	Properties are represented by first class objects: subclasses of ClyProperty. To add and access them use following messages:	- addProperty: aProperty	- getProperty: aPropertyClass	- getProperty: aPropertyClass ifAbsent: aBlock	- hasProperty: aPropertyClassThere are special kind of properties for specific purposes:There is hierarchy of item tags represented by subclasses of ClySimpleTag. They allow mark object with specific tag. For example there is ClyAbstractItemTag which is used to mark abstract classes and methods.You can use following methods to manage tags:	- markWith: aSimpleTagClass	- isMarkedWith: aSimpleTagClass. It is analogue to #hasProperty:There is special property ClyItemChildrenTag to mark object that it includes particilar kind of children. Kind of children is represented by class of children type.For example you can mark class with methods:	classItem markWithChildrenOf: ClyMethod.To check that object has particular children use:	classItem hasChildrenOf: ClyMethodAnother special kind of property is ClyItemLocalHierarchyProperty. It includes number of all local children which exists in item query result. For example if you look at classes as a hierarchy then you can see Object and its subclasses. This hierarchy can be limited by package scope.So in case of one particular package Object can have 10 subclasses. But in another package it can be 30 (for example).And ClyItemLocalHierarchyProperty represents such local hierarchy size. To access it use following methods:	- localHierarchySize	- localHierarchySize: countClyItemLocalHierarchyProperty is used by tools to organize tree view for list of items which provide local hierarchy by themselves. Item has no real list of children. But instead it knows count of internal tree. It allows tool hide right number of items when given parent node needs to be collapsed. Important condition here is that property must hold count of full subtree of local hierarchy (not just first level children).I collect properties using environment plugins. Query result prepares own browser items lazely when they should be returned to the user:	aBrowserItem prepareIn: environmentBut actual preparation is delegated to plugins:	environment pluginsDo: [ :each | aBrowserItem decorateBy: each].So every plugin decorates item with properties. At the end decoration is dispatched to the item type which sends concrete typed message back to the plugin. For example method decoration is evaluated to:	aPlugin decorateBrowserItem: aBrowserItem ofMethod: aBrowserItem actualObject.	Properties computation can be heavy process and I use special flag #isPrepared to collect them only once.To create my instances there is class side method:	ClyBrowserItem named: aString with: anObjectBut normally you should ask anObject directly: 		anObject asCalypsoBrowserItemDuring instance creation I collect the type of given object:	anObject calypsoEnvironmentType The idea behind item type is to separate it from object class to not depends on single implementation of particular kind of objects. For example there is CompiledMethod, RGMethodDefinition and RG2MethodDefinition. They all represent different model of methods. But for the browser it is important to work with them in same way. So all of them return ClyMethod class as calypsoEnvironmentType. It allows avoid duplication of methods by delegating actual logic to the reusable item type class. For example system browser defines commands to be used in context of selected methods. It uses ClyMethod type to attach commands to methods. And they available and work independently from concrete method class. But by default the calypso type is the class of object. And it is not necessery to introduce separate type for every kind of item.I provide several methods to compare items: - isSameAs: anotherBrowserItemIt checks that receiver and argument represent same actual object. The #same meaning is based on item type to which I delegate actual comparison:	type checkCalypsoItem: actualObject isSameAs: anotherBrowserItem actualObject- isEqualTo: anotherBrowserItem It checks that receiver and argument represent equal actual objects. The #equal meaning is based on item type to which I delegate actual comparison:	type checkCalypsoItem: actualObject isEqualTo: anotherBrowserItem actualObject- isSimilarTo: anotherBrowserItemIt is very weak comparison which return true for two equaly named items of same type. If they are named differently then isEqualTo: comparison will be result.The method is used in browser logic to restore desired selection. For example when user selects new class which has the method similar to the prevous method selection of another class.As you see comparison logic is also delegated to the item type. So in method example all method implementations do not need to duplicate them.There are few other testing methods:- representsItemOfType: itemTypeIt check that browser item belongs to the given type. It uses #includesBehaviour: logic.- representsObject: anObjectIt checks that browser item represents same object as argument. Actual comparison is delegated to the item type.- representsObjectEqualTo: anObjectIt checks that browser item represents object equal to argument. Actual comparison is delegated to the item type.Internal Representation and Key Implementation Points.    Instance Variables	actualObject:		<Object>	name:		<String>	position:		<Number>	depth:		<Number>	type: <Class>	properties:		<Collection of<ClyProperty>>	isPrepared:		<Boolean>	"
"ExternalBrowserTest",""
"WriteStreamTest","A trait for test purposes"
"OmBlock","I represent a portion of a .ombu file. I'm a collaborator of OmBlockFileStore."
"IceGitHubSelectListModel","I'm a dialog to select a list of anything (used by branches now)."
"MorphicTreeColumnAdapter","I am the bridge between a TreeColumnPresenter and a MorphTreeColumn.Ialso add support for on the fly refresh"
"IceTipHistoryActionBrowser","I'm a base browser for pull/push action browser."
"MetacelloCommonVersionNumberTestCase",""
"RubAbstractTextArea","I am a re-implementation of TextMorph. I'm intended as a temporary solution. Soon, I will be replaced by, or integrated with, TxText, a beautiful new text toolkit.About the contextual menuBy default, the menu is given by the editingMode.The model can implement a #menu method to impose a specific menu.To change the way the menu is looked-up, one can also change the getMenuPolicy.This menu retrieving algorithm is implemented by a dedicated objet, hold by the RubAbstractTextArea>>#getMenuPolicy instance variable. This dedicated object implements a #lookupMenu method for this.By default, it is the textArea itself (see RubAbstractTextArea>>defaultGetMenuPolicy). The policy can be changed with RubAbstractTextArea>>#getMenuPolicy:, by passing whatever object that answer to #lookupMenu.Instance Variables	editingMode:		<Object>	editingState:		<Object>	editor:		<Object>	hasFocus:		<Object>	holder:		<Object>	margins:		<Object>	menuAllowed:		<Object>	model:		<Object>	paragraph:		<Object>	readOnly:		<Object>	scrollPivot:		<Object>	text:		<Object>	textColor:		<Object>	textStyle:		<Object>	wrapped:		<Object>editingMode	- xxxxxeditingState	- xxxxxeditor	- xxxxxhasFocus	- xxxxxholder	- xxxxxmargins	- xxxxxmenuAllowed	- xxxxxmodel	- xxxxxparagraph	- xxxxxreadOnly	- xxxxxscrollPivot	- xxxxxtext	- xxxxxtextColor	- xxxxxtextStyle	- xxxxxwrapped	- xxxxx"
"MCVersionInfoWriter","I serialize an MCVersionInfo into a given stream.If the version info has been serialized before I output a compacted version consiting of the id."
"ClyPackageExtensionMethodsQueryTest",""
"IdentityDictionary","Like a Dictionary, except that keys are compared with #== instead of #= .See the comment of IdentitySet for more information."
"ClyCritiqueQueryTestCase",""
"MetacelloMCTestsAbstractConfig",""
"MetacelloConfigTemplate","Copy me to create a new configuration or edit and evaluate the following doits.        ""Create configuration class and initial baseline method""        MetacelloToolBox                 createBaseline: '1.0-baseline'                for: 'MyProject'                repository: 'http://www.example.com/MyProjectRepository'                requiredProjects: #('Gofer')                packages: #('MyProject-Core' 'MyProject-Tests')                dependencies:                        {('MyProject-Core' -> #('Gofer')).                         ('MyProject-Tests' -> #('MyProject-Core'))}                groups:                        {('default' -> #('Core')).                        ('Core' -> #('MyProject-Core')).                        ('Tests' -> #('MyProject-Tests'))}.	   ""create initial development method from the baseline""         MetacelloToolBox               createDevelopment: '1.0'               for: 'MyProject'                importFromBaseline: '1.0-baseline'                description: 'initial version'."
"TestResult","This implements the Collecting Parameter pattern for running a bunch of tests.  It holds tests that have run, sorted into the result categories of passed, failures and errors.TestResult is an interesting object to subclass or substitute. #runCase: is the external protocol you need to reproduce. TestResult subclasses can  handle multi-threaded tests (see SUnitXProcPatterns) and might record coverage information or send emails when the run completes."
"CairoGlyphsArray","Captain obvious tells this is an array of CairoGlyph(s),corresponds to cairo_glyph_t structure:typedef struct {    unsigned long        index;    double               x;    double               y;} cairo_glyph_t;"
"DynamicPresentersListLayout","I am an abstract layout builder for a DynamicComposablePresenter built using DynamicPresentersListBuilder."
"RBCollectionProtocolRule","Checks code using the do: method instead of using the collect: or select: methods. This often occurs with new people writing code. The collect: and select: variants express the source code''s intentions better."
"ManifestCalypsoSystemPluginsSUnitBrowser","I am a plugin for Calypso browser.I add tools and commands to Calypso related to SUnit.For example I add commands to run tests or commands to generate and jump to tests."
"AthensCompositePaint","i am used to convert CompositeFillStyle into paint, used in Morphic."
"RBFooLintRuleTest",""
"OSWindowWorldMorphModel","I am a Spec model that uses a WorldMorph in an external OSWindow.I am to be use by sending the openExternalWindowWithSpec message to ComposablePresenter. For example:ProtocolBrowser new openExternalWindowWithSpec."
"PaginatedMorphTreeMorph","A paginated tree morph"
"RubCharacterBlock",""
"HDCoverageReport","Hudson report for test coverage"
"CatalogCommandLineHandler","Command line handler for dealing with projects from the command lineUsage: get [--help] ProjectName [--version=<version>]	--help                        Show this help message	ProjectName         The name of the project in catalog	<version>                A valid version for the given configuration (default is #stable)	Examples:	# installs Seaside3 	pharo Pharo.image get Seaside3		# installs Seaside3 version 3.1.2	pharo Pharo.image get Seaside3 --version=3.1.2"
"ExampleForTest12","An example class at level 2 (indirectly below Object) used for testing class hierarchy"
"RBSearchTest",""
"SoundTheme","Groups a set of sounds to use with a UITheme.Note that, although instances may have their sounds changed the settings will still indicate the class of theme that is current."
"PopupChoiceOrRequestDialogWindow",""
"OSTouchComplexEvent","I am a touch event composed by several others basic events. "
"SpecDemo","Set of demos that show capabilities of the Spec UI framework.SpecDemo open"
"RxmBranch","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--This is a branch of a matching process. Either `next' chain should match, or `alternative', if not nil, should match. Since this is also used to build loopbacks to match repetitions, `loopback' variable indicates whether the instance is a loopback: it affects the matcher-building operations (which of the paths through the branch is to consider as the primary when we have to find the ""tail"" of a matcher construct).Instance variables	alternative		<RxmLink> to match if `next' fails to match.	loopback		<Boolean>"
"IRPushReceiver","I am modelling the push self bytecode"
"GTGenericStackDebuggerSelectionChanged","A GTGenericStackDebuggerSelectionChanged is an event send to the debugger after the selection in the stack pane is changed."
"OCEnvironmentScope","I am the glonal environment. The default is Smalltalk globals"
"FileSystemError","I am an abstract superclass for errors that may occur during filesystem operations."
"IceCheckoutConflictError","I indicate there are conflicts when I try to checkout so I can't perform the operation."
"Canvas","A canvas is a two-dimensional medium on which morphs are drawn in a device-independent manner. Canvases keep track of the origin and clipping rectangle, as well as the underlying drawing medium (such as a window, pixmap, or postscript script).Subclasses must implement (at least) the following methods:	* Drawing:		#fillOval:color:borderWidth:borderColor:		#frameAndFillRectangle:fillColor:borderWidth:borderColor:		#drawPolygon:color:borderWidth:borderColor:		#image:at:sourceRect:rule:		#stencil:at:sourceRect:rule:		#line:to:width:color:		#paragraph:bounds:color:		#text:bounds:font:color:	* Support		#clipBy:during:		#translateBy:during:		#translateBy:clippingTo:during:		#transformBy:clippingTo:during:"
"OSWindowMoveEvent","I am delivered when window moved by user or OS/window manager."
"SingleCodeCriticResultList","I am a browser for the SmallLint Critics of a rule."
"RadioButtonGroupPresenter","I am a group for radio buttons.See DynamicComposablePresenterself exampleYou can also have a look at MrAndMrsRadioButton and RadioButtonGroupExample for more examples.I ensures that only one button is activated at the same time and I hold the button activated.I provide the following variables and their accessors- buttons is the collection of the buttons I manage.- currentActivated is the last activated button.I provide the following methods- addRadioButton: to add a button in my collection and link it at others.- default: to activate the button when I am built.- linkRadioButton: to make the button deselected when another is selected.defaultOnce: is use to avoid a problem appearing with default: when it is include in other DynamicComposablePresenter but it should be replace by a fix.I use the following method for my internal work- createWidgets assign each button of my collection in my super class collection that manage dynamical subwidgets.- dynamicLayout refresh the layout using my super class collection.- rebuildWidget trigger the steps for refresh the widget and the layout.todo- canDeselectByClick"
"CompressedBoundaryShape","This class represents a very compact representation of a boundary shape. It consists of a number of compressed arrays that can be handled by the balloon engine directly. Due to this, there are certain restrictions (see below). Boundaries are always represented by three subsequent points that define a quadratic bezier segment. It is recommended that for straight line segments the control point is set either to the previous or the next point.Instance variables:	points		<PointArray | ShortPointArray>	Point storage area	leftFills		<ShortRunArray>	Containing the ""left"" fill index of each segment	rightFills	<ShortRunArray>	Containing the ""right"" fill index of each segment	lineWidths	<ShortRunArray>	Containing the line width of each segment	lineFills		<ShortRunArray>	Containing the line fill (e.g., line color) of each segment	fillStyles	<Collections>			Contains the actual fill styles referenced by the indexesRESTRICTIONS:None of the ShortRunArrays may contain a run of length Zero.Also, due to the use of ShortRunArrays 	a) you cannot have more than 32768 different fill styles	b) you cannot have a line width that exceeds 32768In case you have trouble with a), try to merge some of the fills into one. You might do so by converting colors to 32bit pixel values. In case you have trouble with b) you might change the general resolution of the compressed shape to have less accuracy."
"ClyClassDefinitionEditorToolMorph","I am an editor of class definition.I allow to modify class properties (package, tags and variables) using text editor.And in addition I allow to create new classes by typing new class name"
"AthensShape","This class represents an interface, which should be supported by all shapes used for drawing with Athens framework.Shapes do not have to inherit directly from me, for example Rectangle implements my protocol (via extensions), and as result can be used as a valid shape for drawing with Athens."
"RenrakuHelp","Renraku is a framework for defining and processing quality rules. The framework operates with three main concepts: entities, rules and critiques.!! EntitiesEntities are not a part of Renraku, but Renraku is validating entities. Theoretically entity can be any object, but in practice we mostly focus on code entities such as methods, classes, packages, AST nodes.!! RulesRules are the objects that describe constraints about entities. A rule can check an entity and produce critiques that describe the violations of the entity according to the rule.!! CritiquesCritique is an object that binds an entity with a rule that is violated by that entity. The critique describes a specific violation, and may provide a solutions to fix it."
"SDL2SpecialCharacterMapping","This class keeps a maps for key symbols that are represented by Morphic as special characters."
"NNavDirectionChild","I'm the one who knowshow to navigate inside the child nodes"
"IceLibgitFiletreeReader","Reads an MCVersion from a git repository (its blob, not a working copy!) using libgit bindings.Currently we only support metadata-less repositories."
"GLMPresentStrategy","The abstract strategy that deals with setting of presentations on the pane of the destination port."
"SDL2AthensExample","Superclass to show how to use OSWindow properly with athens"
"GTSpotterA2",""
"BinaryFileStream","I am a concrete subclass of AbstractBinaryFileStream for normal files. Regardless the position of the file, I will make my operarions on my position and then return the file it's own position.In addition to my superclass' API I provide the following methods.stream upToEnd""reads the full stream up to the end and returns the contents"""
"TestSharedPool","I am a shared pool used for testing."
"ManifestIssueTrackingTests","Unit tests for issue tracking on Pharo development"
"KmGlobalDispatcher","I am a dispatcher that dispatches the global keymappings."
"IceTipFiletreeToTonelDialog","I'm a dialog validate and perform a migration of sources from filetree to tonel."
"SelectPackageBrowser","To select packages."
"TraitFileOutTest",""
"MCRepositoryAdded","Announcement sent when a Repository is added to a Repository group."
"ClyMethodGroupProviderTestCase",""
"ProtocolRenamed","This is event about protocol rename. It should substitute ClassReorganized announcement "
"LGit_GIT_EUNCOMMITTED",""
"RBToken","RBToken is the abstract superclass of all of the RB tokens. These tokens (unlike the standard parser's) remember where they came from in the original source code.Subclasses must implement the following messages:	accessing		lengthInstance Variables:	sourcePointer	<Integer>	The position in the original source code where this token began."
"GLMFastListOutlineDataSource","I'm a model datasource to handle glamour fast outline list presentations.Description --------------------My basics functionnalities works as in my superclass but I do not get my data at my creation. Instead I ask to my Glamour presentation to get them.I work with a GLMFastListPresentation and a GLMMorphicFastListRenderer. Internal Representation and Key Implementation Points.--------------------    Instance Variables	announcer:		This is an announcer use to work with Glamour workflow. 	glamourPresentation:		This is a glamour presentation use to get some informations as the data manage by myself.	tagsToFilterBy:		This is a list of filtering tags for the dasaSource."
"ManifestIcebergPluginGitHub","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"MouseWheelEvent","A mouse event generated by intercepting the keyboard events (ctrl+up/down arrow) generated by the VM in response to mouse wheel activity."
"ZnFastLineReader","I am ZnFastLineReader, a helper to efficiently read CR, LF or CRLF terminated lines from a character stream."
"MCOrganizationTest",""
"MorphicGenericAdapter","I am a generic adapter used to embed directly a Morph in spec.Be aware that when you use this, you broke Spec plateform independency and force you application to run only on top of Morphic"
"ClyScope","My subclasses represent specific point of view on system environment. They play role of source of data for queries which are always executed from concrete scope instance.Concrete types of scopes implement several methods to access concrete type of objects which are visible from given scope. This methods are supposed to be in form of enumeration based on block:	aScope someKindOfObjectsDo: aBlockWithObjectArgFor example ClyPackageScope shows objects which are visible from given packages: packages, classes and methods. And to access them it implements following methods:- packagesDo:- classesDo:- methodsDo:Scope instances are always created in some environment and based on set of basis objects. Basis objects are the root of information which scope can provide for queries.Scopes which are based on single type objects are represented by subclasses of ClyTypedScope. They provide instance creation methods:	scope := ClyPackageScope of: 'Kernel' asPackage in: ClyNavigationEnvironment currentImage.	scope := ClyPackageScope ofAll: {'Kernel' asPackage. 'Alien' asPackage} in: ClyNavigationEnvironment currentImage.For more information read ClyTypedScope comment.I do not provide any constructor because I do not know how concrete scope will be created, how it will setup the basis.But I provide set of operation to convert any scope to the given typed scope class:- asScope: aTypedScopeClass. It creates instance of given scope class using receiver basis and environment.- asScope: aTypedScopeClass of: singleBasisObject. It creates instance of given scope class using given singleBasisObject and receiver environment.- asScope: aTypedScopeClass ofAll: newBasisObjects. It creates instance of given scope class using given newBasisObjects and receiver environment.So the main point of these methods is to create new scope instances with existing properties of given scope. Where environment is always shared. Also I implement several testing methods which are used in some UI logic:- isBasedOn: aBasisObject- isBasedOnEmptyBasis- isBasedOnSingleBasis- isBasedOnMultipleBasisAlthough it is preferred to instantiate scopes in the environment in some cases it is conveinient to bound scope to the environment separately from instantiation. For this purpose there are few methods:- isBoundToEnvironment- bindTo: aNavigationEnvironmentScope is integral part of query. So it participates in environment query cache. And therefore any scope should correctly implement comparison: equal and hash operations. I provide default implementation based on basis objects. And subclasses which introduce extra parameters should provide specialized implementation.Also it adds restriction that scope should be completaly initialized at query execution time and after it should never be modified. It is protected by write barrier logic when query fixes state before execution. It forces scope to beReadOnlyObject.To support query execution I also provide several methods which are supposed to not be used externally:- query: aQuery- isQueryEmpty: aQueryThese methods are called by query. And I just delegate them to the environment.Also subclasses should implement #adoptQuery: method to prepare given query for execution from receiver.For example there is composite scope which converts given query to the composite query. Because simple query can't be executed directly from composite.And by same reason I require subclasses implement:- supportsQuery: aQueryQuery checks it when it is assigned to the scope. It allows to detect incompatibitily early and signal error.Also in case of composite scope users can be still interested to know that they work with some simple scope which is part of composite. To made such test independent of type of scope I require subclasses to implement:- representsScope: aScopeClass In case of composte it will check subscopes. And in case of simple scope it will simply check isKindOf:.In addition I provide printing infrastructure.Subclasses can define class side method #defaultName. And users can override it in instance:	aScope name: 'special name'  I implement #description with these names which is used in UI and to print queries:	aScope descriptionIn addition basis objects are appended in the end of desription. Subclasses can specialize how basis objects are printed using method #printBasisObject:on:.For printString logic I just print basis in brackets. Look at examples:	(ClyPackageScope of: 'Kernel' asPackage) description ""==> 'packages: Kernel'""	(ClyPackageScope of: 'Kernel' asPackage) printString ""==>  'a ClyPackageScope(Kernel)'"" Internal Representation and Key Implementation Points.    Instance Variables	basisObjects:		<Set>	environment:		<ClyNavigationEnvironment>	name:		String"
"HashAndEqualsTestCase","I am a simple TestCase that tests for correct operation of #hash and #=.Subclasses of me need to fill my prototypes with suitable objects to be tested."
"DisplayScanner","A DisplayScanner is an abstract class for displaying characters.It is splitting text into elementary chunks of displayable String/Font pairs (see scanning protocol).Subclasses responsibility is to handle the effective rendering of these chunks on various backends.Instance Variables	backgroundColor:		<Color>	defaultTextColor:		<Color>	foregroundColor:		<Color>	ignoreColorChanges:		<Boolean>	lastDisplayableIndex:		<Integer>	lineY:		<Number>	morphicOffset:		<Point>	stopConditionsMustBeReset:		<Boolean>backgroundColor	- the background color for displaying next chunk of text.	Note that this can be set to Color transparent, in which case no background is displayed.defaultTextColor	- the default foreground color for displaying text in absence of other text attributes specification foregroundColor	- the foreground color for displaying next chunk of textignoreColorChanges	- indicates that any change of color specified in text attributes shall be ignored.	This is used for displaying text in a shadow mode, when dragging text for example.lastDisplayableIndex	- the index of last character to be displayed.	A different index than lastIndex is required in order to avoid display of control characters.	This variable must be updated by the stop condition at each inner scan loop.lineY	- the distance between destination form top and current line topmorphicOffset	- an offset for positionning the embedded morphs.	THE EXACT SPECIFICATION YET REMAINS TO BE WRITTENstopConditionsMustBeReset	- indicates that it's necessary to call setStopConditions in next scan loop.Notes:In order to correctly set the lastDisplayableIndex, the display scanner performs the stopCondition BEFORE displaying the string being scanned.This explains why the stopCondition must not reset the font immediately, but differ this reset AFTER the display, thanks to stopConditionsMustBeReset."
"OSTouchOneFingerDoubleTapDetector","I am the detector of a finger which double tapped.I send these event back to my handler: 	- OSTouchOneFingerDoubleTapEvent"
"ClyMoveClassToGroupCommand","I am a command to move classes into given class group.By default I only available by dragging classes into the target class group.Internal Representation and Key Implementation Points.    Instance Variables	classGroup:		<ClyClassGroup>"
"MirrorPrimitivesTests","Unit tests for mirror primitives."
"RBTemporaryToInstanceVariableRefactoring","I am a refactoring for changing a temporary variable to an instance variable.The temporary variable is added to the class definition and removed from the temporary declaration in this method.My preconditions verify that this variable is not yet used as an instance variable in the whole hierarchy of this class."
"MorphicAlarm","I represent a message to be scheduled by the WorldState.For example, you can see me in action with the following example which print 'alarm test' on Transcript one second after evaluating the code:Transcript open.MorphicUIManager currentWorld        addAlarm: #show:         withArguments: #('alarm test')         for: Transcript         at: (Time millisecondClockValue + 1000).* Note *Compared to doing:[(Delay forMilliseconds: 1000) wait. Transcript show: 'alarm test'] forkAt: Processor activeProcess priority +1.the alarm system has several distinctions:- Runs with the step refresh rate resolution.- Alarms only run for the active world. (Unless a non-standard scheduler is in use)- Alarms with the same scheduled time are guaranteed to be executed in the order they were added"
"GLMSpawnBrowserAction",""
"FTCharMapRec","I implement the FT_CharMap_Rec"
"OSWindowGenericRenderer","I am an abstract renderer that provides a generic API for native window rendering."
"AthensEllipticalArcSegment","I representing an elliptical arc, using endpoint parametrization:- initial endpoint (x0,y0), which comes from previous segment- final endpoint (x1,y1)- rh, rv , the radii of unrotated ellipse- Large arc flag: true if more than 180 degrees of the arc is to be traversed (as measured on the unscaled circle), false otherwise- Sweep flag: true if the arc is to be traversed in the counter-clockwise direction, false otherwise(not functional yet)"
"TableLayoutProperties","Properties for Table layouts like inset, spacing, ..."
"FLDelayedSerializationMock",""
"MenuCapturingMorph","It's difficult to test whether menus appear because the test might block the UI thread and prevent it.I use Morphic stepping to monitor the world for a new menu. If I find one, you can get it by sending me #menu."
"ReTransformationCritique","A critique which contains the AST that should replace the existing one of the criticized entity"
"RBRuleIfNotNilDo","ifNotNilDo: should not be used as ifNotNil: works for blocks with arguments, too."
"GlobalIdentifierWithSton","SUnit tests for GlobalIdentifier with STON"
"ReBasicTreeRule","I'm a basic root for all ast-based rules. My basicCheck: gets a method AST as the parameter"
"LGitPathSpecFlagTypeEnum",""
"ChooseDropListDialogWindow","Message dialog containing a drop list for selection of an item."
"MetalinkTargetResolver","My job is to resolve targets for metalinks to be put on. I only return the target(s) i resolved for the given parameters, which could be: - a collection of ast nodes- a slot- a temporary variable - a literal variableSome methods have an option parameter. This is the case for links to be put on slots, temporaries and literal variables.The option can be one of the following:#all - will lookup for all access nodes.#read  - will lookup for read nodes only. #write - will lookup for write nodes only (i.e. assignment nodes) .I do not take care that methods, slots or globals do exist. Users must ensure they provide valid parameters and/or to handle possible errors.I only have utility methods in class side."
"FlagIconStyler","I'm in charge to style an ast when there is a message send of #flag:.This is used to tag methods for TODOs, having many of these is a badsign...	self flag: #Bob"
"TStructuralEqualityTest","Tests whether two objects are equals: they contain the same objects in the same order."
"WidgetBuilt","I am raised when a widget has been built"
"ZnChunkedReadStream","I am ZnChunkedReadStream, implementing HTTP 1.1 chunked transfer encoding on a wrapped streams.Clients should read me until I am atEnd.After I am completely read, I can tell you my totalSize and optional extraHeaders.Part of Zinc HTTP Components."
"ManifestGTSpotter","Includes the Spotter from GT Toolkit"
"WeakKeyToCollectionDictionaryTest","SUnit tests for weak key to collection dictionaries "
"RBNoClassCommentRule","This smell arises when a class has no comment. Classes should have comments to explain their purpose, collaborations with other classes, and optionally provide examples of use."
"MetacelloMCGroupSpecTestCase",""
"MetacelloNameNotDefinedError",""
"TabPanelBorder","Specialist border for a TabGroup panel. Does not draw border beneath selected tab."
"ClyAllMethodCritiqueQuery","I return critiques of all methods visible from my scope"
"RBWhileTrueRule","Checks for users of whileTrue: when the shorter to:do: would work.For example statements1. [index <= stop] 	whileTrue: 	[ 	blockStmts1. 	index := index + 1].statements2"
"OSWindowEvent","i am the root of various window events hierarchy"
"MCPostscriptDefinition","A postscript evaluated after load"
"Base64MimeConverter","This class encodes and decodes data in Base64 format.  This is MIME encoding.  We translate a whole stream at once, taking a Stream as input and giving one as output.  Returns a whole stream for the caller to use.           0 A            17 R            34 i            51 z           1 B            18 S            35 j            52 0           2 C            19 T            36 k            53 1           3 D            20 U            37 l            54 2           4 E            21 V            38 m            55 3           5 F            22 W            39 n            56 4           6 G            23 X            40 o            57 5           7 H            24 Y            41 p            58 6           8 I            25 Z            42 q            59 7           9 J            26 a            43 r            60 8          10 K            27 b            44 s            61 9          11 L            28 c            45 t            62 +          12 M            29 d            46 u            63 /          13 N            30 e            47 v          14 O            31 f            48 w         (pad) =          15 P            32 g            49 x          16 Q            33 h            50 yOutbound: bytes are broken into 6 bit chunks, and the 0-63 value is converted to a character.  3 data bytes go into 4 characters.Inbound: Characters are translated in to 0-63 values and shifted into 8 bit bytes.(See: N. Borenstein, Bellcore, N. Freed, Innosoft, Network Working Group, Request for Comments: RFC 1521, September 1993, MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies. Sec 6.2)By Ted Kaehler, based on Tim Olson's Base64Filter."
"NECSelectorEntry","I represent a selector"
"OCThisContextVariable","I model thisContext variables"
"IceTipCommitModel","I'm a model for IceCommit entries. "
"ResumableTestFailureTestCase","SUnit tests for ResumableTestFailure"
"RBAbstractVariablesRefactoring","I am a refactoring used by other refactoring operations for extracting direct inst var and pool var access to accessor methods.For example RBMoveMethodRefactoring uses me."
"EventManagerTest",""
"ReRewriteTreeWrapper","A concrete wrapper implementation that uses a rewrite expression to create a new node"
"StrikeFont","I represent a compact encoding of a set of Forms corresponding to characters in the ASCII character set. All the forms are placed side by side in a large form whose height is the font height, and whose width is the sum of all the character widths. The xTable variable gives the left-x coordinates of the subforms corresponding to the glyphs. Characters are mapped to glyphs by using the characterToGyphMap.Subclasses can have non-trivial mapping rules as well as different representations for glyphs sizes (e.g., not using an xTable). If so, these classes should return nil when queried for xTable and/or the characterToGlyphMap. This will cause the CharacterScanner primitive to fail and query the font for the width of a character (so that a more programatical approach can be implemented).For display, fonts need to implement two messages:	#installOn: aDisplayContext foregroundColor: foregroundColor backgroundColor: backgroundColorThis method installs the receiver (a font) on the given DisplayContext (which may be an instance of BitBlt or Canvas (or any of it's subclasses). The font should take the appropriate action to initialize the display context so that further display operations can be optimized.	#displayString: aString on: aDisplayContext from: startIndex to: stopIndex at: aPoint kern: kernDeltaThis method is called for each subsequent run of characters in aString which is to be displayed with the (previously installed) settings."
"SelectorChooserMorph","A SelectorChooserMorph is an IdentifierChooserMorph specialized to allow a selector query from a selector prefix and for a TextMorph. When the prefix starts with an uppercase, then, only globals names and class names that begins with the prefix are shown.Otherwise, all systems symbols that begins with the prefix are presented (the string comparison is not case sensitive).It takes the keyboard focus when a navigation key (up, down, left or right key) is first pressed in the TextMorph from which it has been opened.Instance Variables	prefix: <String>	requestorPos <Point>	prefix	- The prefix which has been used to compute the labels list.requestorPos	- private, used to be able to automatically close the menu if the position of the requestor is changing"
"FFISystemV64CallbackArgumentReader","I represent the parsing of arguments in the SystemV 64 bits calling convention.In this convention the passing of the parameters is done in the registers for the first 6 integers and the first 6 floats.The count of the register used is indepent of the type. Ex: int f(int a, int b, float x, float y, int c)a -> 1st int register.b -> 2nd int register.x -> 1st float register.y -> 2nd float register.c -> 3rd int register.If there are more that 6 parameters of a given type, the seventh goes in the stack.The structs in this calling convention are passed in the stack or in the registers.If a struct occupies #maxStructureSizeToPassInRegisters bytes or less it is passed in the registers. Using the two next registers available.If there are no available registers or the struct is bigger, the stack is used. All the integer types are promoted to Int64 or UInt64."
"ClyClassGroupContextOfFullBrowser","I am a context of selected class groups in full browser"
"RubTextEditor","I represent the editor for plain text, I do the operations related to plain text"
"GLMMorphicTableRenderer",""
"MetacelloGoferLoad",""
"ShBitLayoutChangeDetector","I can compare an old class and a builder to detect if the layout kind changed and if there is need to propagate it."
"SycAddNewMethodTagCommand","I am a command to add new method tag (protocol) top the class Internal Representation and Key Implementation Points.    Instance Variables	tagName:		<String>	targetClass:		<Class>"
"LGitErrorTypeEnum",""
"OSWindowResizeEvent","I am delivered when window resized by user or OS/window manager."
"RubAnnouncement","I am an abstract announcement class. Extend me if you want to use an announcement related to a Rubric action  "
"ZnEncodedReadStream","I am ZnEncodedReadStream, an abstract support class for read streams on a binary encoded wrapped stream.Part of Zinc HTTP Components"
"ManifestSpecInspector","Spec based object inspectors ('Eye inspector' framework)"
"GLMMorphicActionRenderer",""
"LGitRemoteHead","I'm a description of a reference advertised by a remote server, given out on `ls` calls.https://libgit2.github.com/libgit2/#HEAD/type/git_remote_head"
"GoferPackageReference","A GoferPackageReference refers to the latest version of a Monticello package."
"SugsStoresIntoInstVar","I know how to find stores into for an instance var"
"OCOpalExamples","I am the central place for example code used in tests"
"ClyFlaggingMethodsQueryTest",""
"FFI_x86_64_Windows","I represent the X86_64 architecture, using the Windows X64 ABI.Parameters passed in integer registers: RCX RDX R8 R9Parameters passed in floating point registers: XMM0 to XMM3, inclusiveShadow space for spilling registers: 32 bytes.Structures are never split into registers with this ABI.These ABI details are very important to keep in mind for receiving callbacks."
"SettingNode","A SettingTreeNode is used by a SettingCollector as a node for setting trees. Built trees can be viewed by a SettingBrowserInstance Variables	contents:		<Collection of SettingTreeNode>	parentNode:		<SettingTreeNode or nil>contents	- the childrenparentNode	- the parent or nil if the node is a root"
"ReInspectorPresentationsNonlazyCode","If you execute some code during the method execution it will  slow down the inspector.Try to put all the code in blocks in the setup messages, such as #title:, #display:,  #when:. Buy doing this your code will be executed lazily when the presentation is selected."
"ClyInheritedTraitScope","I represent class scope of all inherited traits excluding basis.I see methods of all traits which are used by my basis classes or traits"
"RBBrowserEnvironmentsClassesHelp","Book from RBBrowserEnvironments classes"
"RubHighlightSegmentMorph","A RubHighlightSegmentMorph is a volatile segment that deletes itself whenever the user interacts with the editor. It can be used to add selection-like segments."
"Deprecation","This Warning is signalled by methods which are deprecated.Idiom: Imagine I want to deprecate the message #foo.foo	^ 'foo'I can replace it with:foo	self 		deprecated:   'The method #foo was not good. Use Bar>>newFoo instead.'		on:  'here add date'		in:  'here add version'		 transformWith:   '`@receiver foo' -> '`@receiver newFoo'.		^self newFoo		The  transformWith:  part is optional. It allows to transform the deprecated method automatically when called.If the transformation is defined, the Warning will not signalled."
"MetacelloVersionMethodSection",""
"FLNegative32SmallIntegerCluster","A cluster of unsigned int 32bit"
"ScrollPane","The scroller (a transform) of a scrollPane is driven by the scrollBar.  The scroll values vary from 0.0, meaning zero offset to 1.0 meaning sufficient offset such that the bottom of the scrollable material appears 3/4 of the way down the pane.  The total distance to achieve this range is called the totalScrollRange.Basic clue about utilization of the ScrollPane class is given in:	ScrollPane example1.	ScrollPane example2."
"FileLocatorStoredSetting","I am responsible for storing information about FileLocator objects."
"MCVersionTest",""
"RBStringReplaceRule","RBStringReplaceRule replaces a matched tree with another tree (which may include metavariable from the matching tree). This is a very succint syntax for specifying most rewrites.Instance Variables:	replaceTree	<RBProgramNode>	The tree to replace the matched tree with."
"SimpleButtonMorph","I am labeled, rectangular morph which allows the user to click me. I can be configured to send my ""target"" the message ""actionSelector"" with ""arguments"" when I am clicked. I may have a label, implemented as a StringMorph.Example:	SimpleButtonMorph new		target: Beeper;		label: 'Beep!';		actionSelector: #beep; 		openInWorldStructure:instance var 	Type		Description target 			Object 		The Object to notify upon a click actionSelector 	Symbol 		The message to send to Target (#messageName) arguments 		Array 		Arguments to send with #actionSelection (optional) actWhen 		Symbol 		When to take action: may be #buttonUp (default), #buttonDown,								#whilePressed, or #startDrag oldColor 		Color 		Used to restore color after click Another example: a button which quits the image without saving it.	SimpleButtonMorph new		target: Smalltalk;		label: 'quit';		actionSelector: #snapshot:andQuit:;		arguments: (Array with: false with: true); 		openInWorld"
"GoferCommit","Commit work"
"TreeNodeModel","This is deprecated class because the original class TreeNodeModel was renamed to TreeNodePresenter. You should stop to use this class and modify your code to use TreeNodePresenter."
"RBPatternMethodNode","RBPatternMethodNode is a RBMethodNode that will match other method nodes without their selectors being equal. Instance Variables:	isList	<Boolean>	are we matching each keyword or matching all keywords together (e.g., `keyword1: would match a one argument method whereas `@keywords: would match 0 or more arguments)"
"RBMinMaxRule","The use of the messages #min: and #max: improves code readability and avoids heavily nested conditionals.For example [[[ 	a < b ifTrue: [a] ifFalse: [b]]]]			is transformed into [[[  a min: b]]]					"
"BaselineOfCommander",""
"SpecStubTreeColumnView","Only stub object, no real view is displayed."
"SelectVisitor","I am a visitor that selects objects from the nodes I visit. I take a block similar to those passed to Collection>>select:. I evaluate the block with DirectoryEntries for the nodes I visit.I can use any guide, and the objects in the array I produce will reflect the order imposed by the guide."
"TConvertAsSetForMultiplinessIdentityTest","A trait for test purposes"
"LazyMorphTreeMorph","I am a MorphTreeMorph, but I only render the rows lazily as they appear on screen. Caveat: There is no rendering in the background. This means that if a row takes too long to render, you can experience a shorter or longer freeze when scrolling."
"OSTouchOneFingerDoubleTapEvent","A finger tapped quickly two time at the same position"
"TAsStringCommaAndDelimiterTest","A trait for test purposes"
"MCOrganizationDefinition","A MCOrganizationDefinition represents a category change. "
"SpecStubTextAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"MacOSClipboard","The clipboard for MacOS"
"MetacelloLoadData",""
"GLMLinearLayout",""
"TabPresenterTest",""
"ClyBreakpointMethodGroupProviderTest",""
"AbstractStoredSetting","I am an abstract class of all stored settings. My subclasses are responsible for keeping SettingNode identifier and its real value that is supposed to store or has been loaded. There are some objects that cannot by directly stored into a file, e.g. fonts, because they includes too much information for storing. For that reason SettingNode objects are converted into objects of my subclasses that keeps storing simple. Collaborators: StoredSettingsFactory, SystemSettingsPersistencePublic API and Key Messages- realValue- settingNodeIdentifier - settingNodeIdentifier:- isForSettingNode:- StoredSettingsFactory creates instances of me.Internal Representation and Key Implementation Points.    Instance Variables	settingNodeIdentifier:		<Symbol>"
"RenrakuCritiqueHelp","Critique is an object that binds an entity with a rule that is violated by that entity. The critique describes a specific violation, and may provide a solutions to fix it."
"TextEditor","See comment in Editor.My instances edit Text, this is, they support multiple lines and TextAttributes.They have no specific facilities for editing Smalltalk code. Those are found in SmalltalkEditor."
"MorphicEventHandlerTest",""
"IceTipDiscardChangesCommand","Command that discard all changes in the repository"
"IceCommit","I represent a repository commit. As such, I hold information about commit message, date, author and id:  aCommit id.  aCommit author.  aCommit datetime.  aCommit comment.I also provide operations to access my history:  aCommit parent.  aCommit ancestors.  aCommit isAncestorOf: anotherCommit.  aCommit isParentOf: anotherCommit.And to the packages existing in that commit:  aCommit packageNames.IMPORTANT IMPLEMENTATION NOTE. For optimization purposes, a commit caches the names of the packages inside himself. This was made under the assumption that a commit is immutble and nobody ""cooks"" the commit once it is in the repository."
"IceTipRepositoryModel","I'm a model for IceRepository entries."
"RGCommentDefinition","RGCommentDefinition is a first-class representation of class's comments"
"Iceberg","I am a cache providing access to several Ice objects, such as packages, repositories, working copies, etc.Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points"
"Boolean","Boolean is an abstract class defining the protocol for logic testing operations and conditional control structures for the logical values represented by the instances of its subclasses True and False.Boolean redefines #new so no instances of Boolean can be created. It also redefines several messages in the 'copying' protocol to ensure that only one instance of each of its subclasses True (the global true, logical assertion) and False (the global false, logical negation) ever exist in the system."
"InstructionStream","Instance variables:	sender: <Context|nil> context that invoked this context	pc: <SmallInteger> (pc = program counter) offset of the bytecode instruction currently executedMy instances can interpret the byte-encoded Smalltalk instruction set. They maintain a program counter (pc) for streaming through CompiledMethods. My subclasses are Contexts, which inherit this capability. They store the return pointer in the instance variable sender, and the current position in their method in the instance variable pc. For other users, sender can hold a method to be similarly interpreted. The unclean re-use of sender to hold the method was to avoid a trivial subclass for the stand-alone scanning function."
"SliderModel","This is deprecated class because the original class SliderModel was renamed to SliderPresenter. You should stop to use this class and modify your code to use SliderPresenter."
"GTGlamourWrapperDebuggingAction","I simply wrap an existing glamour action. Currently I just return the action when one send #asGlamourAction."
"CPUWatcher","CPUWatcher implements a simple runaway process monitoring toolthat will suspend a process that is taking up too much of Pharo'stime and allow user interaction. By default it watches for a Process thatis taking more than 80% of the time; this threshold can be changed.CPUWatcher can also be used to show cpu percentages for each process from within the ProcessBrowser.	CPUWatcher startMonitoring.	""process period 20 seconds, sample rate 100 msec""	CPUWatcher current monitorProcessPeriod: 10 sampleRate: 20.	CPUWatcher current threshold: 0.5.	""change from 80% to 50%""	CPUWatcher stopMonitoring."
"IceTipDiffPreviewModel",""
"DAPackageAnalyzerDiffTreeModel","A PDPackageAnalyzerDiffTreeModel is to watch what are the difference between two analysis of dependencies."
"ClySubstringPatternTest",""
"FTSearchFunction","I define a search function for a table. I respond to any alphanumeric element and I add a search box to the  owner table. I use FTDataSource>>#searchTable:text: as input for my searchs. In general, my entry point is through #keyStroke:, because I intend to react to keyboard inputs in the owner table."
"HashTester","I provide a simple way to test the hash properties of any object.  I am given an object that should be tested and I treat it like a prototype.  I take a copy of it when I am given it so that it can't change whilst I am holding on to it.  I can then test that multiple copies of this object all hash to the same value."
"LGitRepositoryCreateCallback",""
"ClyFilteringCritiqueQuery","I am abstract critique query which subclasses wrap another critique query and filter result critiques according to their logic.To create my instances use following expression: 	ClyFilteringCritiqueQuery filter: aCritiqueQuery from: aScope	Internal Representation and Key Implementation Points.    Instance Variables	baseCritiqueQuery:		<ClyCritiqueQuery>"
"MorphWrapper","A MorphWrapper is used to wrap a morph with a layout in the goal to be easily added to another morph"
"EpUnknownRefactoring","I represent a refactoring which it's not possible to reconstruct because the original information is lost."
"RubTextSetInModel","I am raised when text is set in the model"
"ZipEncoderTree","ZipEncoderTree represents a huffman tree for encoding ZipStreams.Instance variables:	bitLengths	<WordArray>	 - Bit lengths of each generated code	codes		<WordArray>	 - Codes for each value	maxCode		<Integer>	- Maximum value with non-zero frequency"
"ClyTableFilterFactory","I responsible to create new filter instances of given itemFilterClass using specified string pattern.I am a kind of hook to be able configure complex filters for fast table where it uses just a filter class. Fast table instantiates instances using #pattern: message which I define as filter creation methodInternal Representation and Key Implementation Points.    Instance Variables	itemFilterClass:		<ClyItemStringFilter class>	stringPattern:		<ClyStringPatter>"
"ClyClassCommentsQuery","I am a query of class commentsI filter available classes using particular string pattern which class comment should satisfy.For example it can be simple substring or regex expression. But generally pattern is represented by ClyStringPattern subclasses.To create my instances use following methods:	ClyClassComment withString: 'probe string'.	ClyClassComment withString: 'probe string' caseSensitive: true.	ClyClassComment filteredBy: aStringPattern	Internal Representation and Key Implementation Points.    Instance Variables	pattern:		<ClyStringPattern>"
"ZnResponseTests",""
"AthensCairoSurface","i am a concrete implementation of Athens surface which using cairo graphics library for rendering.Cairo library, by itself can have multiple surface types.This class uses image surface (a bitmap located in system memory) and maps to cairo_image_surface_t* C type.**NOTE**As a workaround of bitblt bug, the actual Cairo surfaces, created internally is with 1 extra pixel higher than requested. This is, however completely hidden from users."
"GTSpotterProcessorLink",""
"RBPullUpVariableTransformationTest",""
"WBMacWebBrowser","Provides native access to the web browser on Mac. Do not use directly, use class WebBrowser instead."
"MetacelloProjectSpecGenerator",""
"GLMUpdateInterdependentPanesTest",""
"RPackageWithDoTest","SUnit tests for RPackage"
"LayoutPolicy","A LayoutPolicy defines how submorphs of some morph should be arranged. Subclasses of the receiver define concrete layout policies."
"TonelParser","I'm a parser for tonel files. I parse a class with the following format: Tonel spec====    [comment]    type { typeDefinition }    (        [{ methodMetadata }]        method [            methodBody ]     )*comment---""comment string""is optional (but it should be there, in good design ;)type---Class|Trait|ExtensiontypeDefinition---a STON file with class/trait/extension metadatamethodMetadata---a STON file with method metadatais optional (but also, recommended)method---method declaration as this: Class[ class] >> selectormethodBody ---the method body (we do not parse contents, that's class builder task)"
"RGClassDescriptionDefinition","RGClassDescriptionDefinition is the common parent for classes and metaclasses defining instance variables"
"GLMScrollListBrick",""
"TDictionaryKeysValuesAssociationsAccess","A trait for test purposes"
"SpecStubListView","Only stub object, no real view is displayed."
"RBMultiplePeriodsTerminatingStatementRule","A rule to check for multiple periods terminating the same statement, which is unnecessary, probably unintentional, and can cause problems when porting to other platforms like GemStone."
"FileSystemResolverTest","SUnit tests for FileSystemResolver"
"MailAddressParserTest","This is the unit test for the class MailAddressParser. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"SDL_ControllerDeviceRemappedEvent","SDL2 library structure representing a controller device remapped event data."
"ReNoPrintStringInPrintOnRuleTest",""
"DiffMapMorph","A morph to display a map of join mappings"
"PNGReadWriterTest","SUnit tests for class PNGReadWriter"
"AthensAbstractShape","In Athens, any object can play role of a shape.I demonstrating the minimal protocol which should be supportedby ""shape"" role, to be used with Athens canvas.See my methods comments for more details."
"OSWindowNullGenericRenderer","I am an implementation of the generic API for native window rendering that does nothing."
"IceTipDiffSelectingPanel","I'm a diff panel that shows packages/classes/methods changed in a column and a diff in the other.I give users the possibility of select changes.  By default, all my elements are selected on opening.As my father, I receive a model that needs to understand #elements.also #elements answer should be a collection of elements that also understand elements."
"RePersistentImageRuleBaner","Same as the superclass but also saves the banned rule with a setting"
"ClyScopeExample",""
"ManifestRegexCore","Support for regular expressions."
"DropListMorph","Displays a selected item and a drop button. When pressed will popup a list to enable changing of the selection. Supports enablement."
"LGit_GIT_EPEEL",""
"RBRemoveTemporaryVariableTransformation","RBRemoveTemporaryVariableRefactoring is responsible for removing temporary variables inside a method. In Pharo, temporary variables can be declared inside blocks as well.Example: | transformation |transformation := (RBRemoveTemporaryVariableTransformation	variable: 'transformation'	inMethod: #testTransform	inClass: #RBAddTemporaryVariableTransformationTest)	transform.(ChangesBrowser changes: transformation model changes changes) open	Preconditions:- Check whether this method has a temporary variable with the given name.Observations about the transformation:- The transformation looks for the variable inside blocks too"
"MCVariableDefinition","A MCVariableDefinition represents a variable."
"ManifestIcebergMetacelloIntegration","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"OSTouchSwipeDetector","I am the abstract class for all the Swipe gesture detectors"
"RBAddPragmaTransformation","I am responsible for adding a pragma inside a method. In this implementation, all pragma definition, e.g., '<selector: args>' must be described.Usage:| transformation |transformation := (RBAddPragmaTransformation				pragma: '<gtInspectorPresentationOrder: 213>'				inMethod: #methodBefore				inClass: #RBAddPragmaTransformationTest)				transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- the class exists,- the method exists, and- the method does not have a pragma with the same selector. "
"EpLogBrowserToolbarModel","I am deprecated. Please use my superclass."
"OCBytecodeDecompilerTest",""
"PharoEnvironmentHelp","This is introductory help for the Pharo environment and tools. ! Keyboard ShortcutsPharo has a variety of useful keyboard shortcuts that help you navigate its environment without always using a mouse.!! Browser ShortcutsThere are many keyboard shortcuts available in Pharo:- A full list is available in the System Browser by clicking the window menu button (the triangle) at the top right of the browser title, and selecting the 'Shortcuts Description' menu item.  Alternatively you can evaluate (cmd-d) the following code now:KMDescription new categories: #(NautilusGlobalShortcuts); openWithSpec.- Shortcuts are typically multi-key combinations, where you hold a modifier key and press the listed secondary key. For example if something is listed as CMD-F, CMD-C you would press and hold the CMD key while typing  F and then C- The modifier key varies between platforms: - Windows = CTRL - Mac/OSX = CMD - Linux = CTRL!! Spotter/Global searchSimilar to the Spotlight search on OSX, or the Windows Search charm - Pharo has a global code search tool that is activated using:  Shift+EnterThis search tool shows a popup window on the center of the screen where you can incrementally search for classes, packages, symbols,  pragmas, files, folders and many other types of data.  As you type a search query  all available searches are performed at the same time and results are displayed as they are discovered and grouped based on the type of the search.You can cursor/keyboard navigate through the results, or press enter to spawn a new tool to examine the selected result.The following shortcuts are available:	Ctrl+Arrow_right dives in and restricts the available types of searches only to the selected element.	Ctrl+Shift+Arrow_right dives in and shows all the rearch results from a category.	Ctrl+Arrow_left dives out to the previous search	Ctrl+p toggles the preview pane	Enter  spawns a new tool to examine the selected result	Ctrl+Shift+Arrow_down/Ctrl+Shift+Arrow_down navigatew through different types of searches	Shift highlights all butons from the UI (only works with newer VMs)!! Visual ExplorationA useful way of discovering how things work in Pharo, is to point your mouse cursor at something on the screen (e.g. a browser button) and invoke a visual Halo selection by pressing:   Alt+Shift + left mouse clickIf you continue clicking the left mouse button (while holding Alt+Shift), the halo will expand it's selection to the current item's parent. This is useful for traversing the lineage of graphical Morph's to see what contains what.The halo has a series of icons, which if you hover over them will give you some balloon help about their operation. For exploring, the spanner icon is useful for letting you inspect or browse the current item to locate where the actual code is implemented.To remove the halo,  simply click anywhere outside of the current halo.It is possible to directly explore a visual object and bypass using the halo mechanism by pressing:  Ctrl+Shift + left mouse clickThis will give you a menu for the current item with options to inspect, debug etc.! Browsing and Navigating CodeFinding and navigating through code in Pharo is an important part of developing programs in Smalltalk.!! System Browser (Nautilus)The System Browser (available in the desktop World menu), is the primary way of viewing your source code. This browser framework has been rewritten in Pharo and is often referred to as Nautilus (see the other top level help item for more technical details)!!! Showing HierarchiesNautilus defaults to a simple 'Flat' display of the list of classes that are in the currently selected package (far left). If you want to see the hierarchy of a particular class, first select it and then press (toggle) the 'Flat' button, to show show its 'Hierarchy'. Pressing this button again will toggle back to the 'Flat' model.!!! Browser HistoryThe browser records the history of methods and classes you have visited similar to a Web Browser. The dropdown list in the middle right of the panes (above the lower text pane) shows this history, and clicking on one of its items will navigate to that item. This is convenient if you have clicked on a different package, or navigated to superclass and want to return back to where you were. !!! CustomisingThe system browser can also be configured with a different title as well as optional plugins. These are all available in the window dropdown menu in the top right of the title bar (normally a small triangle).!! SpotterUse the Shift+Enter global keystroke to activate a popup window that lets you incrementally search for methods, classes, packages, pragmas, files, folders and many other types of data.!! Finder The code Finder browswer is available from the World | Tools menu. The Finder lets you enter some general text in top edit field and then categorize it as either text, or language construct in the dropdown list to refine your search. There are more detailed instructions in the bottom pane of the browser detailing the different options.!! WorkspaceIn any workspace you can type or select any text and then perform an 'code search' (context menu item) that will look for matching senders, implementors, references or method source.! IconsThere are many icons that are visible in the envionment, each with different meanings.!! GeneralAn orange smudge in the top right of any editable text field indicatest that the field has been modified and should be saved with CMD+S.!! Class PaneIn the System Browser class pane, you will see the following icons appear next to specific types of class objects:- Red exclamation mark: a missing class comment. The pharo team reccommend that all classes should describe their intent with a comment. - Gray dot: a TestCase - Yellow Lightening bolt: an Exception - 3 Coloured Balls: a Collection - Blue Speech bubble: an Announcement - Blue Paragraph symbol: a String - Gray Epsilon symbol: a Magniture - Blue Matrix box: a graphcial Morph - Purple Ball with T: a Trait!! Protocol PaneIn the System Browser protocol pane, you will see the following icons appear next to specific types of protocol objects:- Yellow diamond: initialisation methods- Red Square: private methods!! Method PaneIn the System Browser methods pane, you will see the following icons appear next to specific types of method objects:- Green Up Arrow: indicates this method overrides a method in a super class- Green Down Arrow: indicates this method is overriden in a subclass!! Source PaneIn the System Browser lower code source pane, you will see the following icons appear which have the following meaning:- Orange Smudge top right: the source has changed and should be saved- Yellow Stripe right margin: a long or complicated method that needs refactoring- Yellow Padlock top right: when locked, indicates the current method source will be displayed stacked with other locked methods in the source pane! Getting More HelpIf you need more detailed help, here are some additional places to look.!! Pharo TutorialTry using the Pharo Smalltalk tutorial by evaluating (CMD+D) the code below: 	ProfStef go.!! Online ResourcesYou can find more information about Pharo by visiting: 	http://www.pharo.orgIn particular, you may also be interested in:- Joining discussions and getting help at: http://pharo.org/community - The Pharo By Example book (available as a free PDF): http://www.pharobyexample.org- Browsing the online documentation: http://www.pharo.org/documentation- Reporting problems: http://pharo.org/contribute"
"ManifestAnnouncementsCore","A package with classes for the announcement framwork - an event notification framework."
"FFITestStructureByPlatform","A structure for test purposes"
"DynamicSpecExample","I am an example of how dynamically create the UI corresponding at an object.self exampleIntself exampleNilself exampleString"
"ManifestHiedra","Small Pharo project to visually connect items in a history-like graph. It uses Athens, and provides support for Morphic and Spec."
"RubCompositionScanner","I scan a paragraph"
"GLMMorphicAction","A GLMMorphicAction is special GLMAction that is only active when rendering Glamour browsers with Morphic."
"NECController","I live as an instance variable in a Browser, Debugger, Workspace or other window. I'm the glue between all participants of the completion system. I create the NECContext and pass myself to the NECMenuMorph. I process the keyboard events and pass them to the NECMenuMorph or close the morph if needed.My method codeCompletionAround: aBlock textMorph: aTextMorph keyStroke: evtis the starting point of the completion process.I'm invoked before and after a keystroke. Check method handleKeystrokeBefore: evt editor: editor and handleKeystrokeAfter: evt editor: editor.The completion occurs in specific character position. The editor is responsible for determining such positions: look at senders of ==atCompletionPosition=="
"ClyRunFailedTestsFromMethodDataSourceCommand","I am a command to run all failed tests available in given data source"
"DialogWindow","Dialog style window with no window controls (expand, collapse etc). Usually opened modally (the morph that is used to modally open determines the modal scope, use of World implies ""system modal"").Designed to be subclassed with content.Supports Escape key for cancel and Enter key for default button."
"SycRemoveMessageArgumentCommand","I am a command to remove existing argument from the message.Internal Representation and Key Implementation Points.    Instance Variables	argumentName:		<String>"
"ZnLogEvent","I am ZnLogEvent, the base class of a log events emitted by elements of the Zinc HTTP Components framework.I add a timestamp and a simple id attribute. The id can wrap around and should only be used to distinguish between events that have the same timestamp.ZnLogEvents are distributed as Announcement through a singleton Announcer that I maintain.I have a small convenience API to log to the Transcript or open a simple GUI on the emitted log events."
"RBTransformationRule","A RBTransformationRule is a special rule that not only detects problems but also can automatically transform the good."
"ClyClassSideScope","I represent class side of classes"
"RBThemeAPIUpdateRule","Do not explicitly refer to UITheme current but use Smalltalk ui theme. Similarly do not directly refer to ThemeIcons current but use Smalltalk ui icons."
"ClyClassScopeTest",""
"IceTipStatusBarTargetItem","I'm a status bar item that gets its values from a target object.For me, #contents keeps a selector of the method that will provide the actual value. "
"ModelDependentDialogWindow","DialogWindow that updates content based upon its model."
"MethodNameEditor","A MethodNameEditor is an editor to set the name of a method.This class is imported from OB.Maybe it should be redone with Spec, but since it works well, I will not put more energy here."
"ClyClassGroup","I am a root of hierarchy of class groups.Any class group is created on class query:	ClyClassGroup named: 'some group' on: aClassQueryClass query can be also composite but it should return classes.Also I can be expanded to subgroups using subgroupsQuery. You can specify it in another instance creation method: 	ClyClassGroup named: 'some group' on: aClassQuery withSubgroupsFrom: aQuery	And there are additional constructors to specify priority of group:	ClyClassGroup named: 'some group' priority: 20 on: aClassQuery.	ClyClassGroup named: 'some group' priority: 20 on: aClassQuery withSubgroupsFrom: aQueryAll groups are sorted by priority and name in the browser. Larger priority value put group to the top of list.I provide several methods to implement various commands: - importClass: aClassIt supposed to modify given aClass in the way that it will become the part of group.- importClasses: classes It imports multiple classes		 - removeWithClassesIt removes all classes and should ensure that groups will be removed too which is true for all virtual groups.Internal Representation and Key Implementation Points.    Instance Variables	classQuery:		<ClyClassQuery>	subgroupsQuery:		<ClyQuery>"
"SycMethodCommand","I am a base class for commands which perform operations with collection of methods.Internal Representation and Key Implementation Points.    Instance Variables	methods:		<Colletion of<CompiledMethod>>"
"TimeStampMethodConverter","A TimeStampMessageConverter is a wrapper wich display the timestamp of the provided message"
"ReDeadMethod","Non-exisitng selector send in a method that has itself no senders means that the whole method most likely is dead code."
"RubTextFieldArea","I am a TextArea that only has one line of text."
"CmdMenuCommandActivationExample",""
"OSWindowJoystickExample","I am a basic example to show how we can draw something and use the joystick.To launch the example:self new open"
"SpecDemoDynamicMemoryGamePresenter","I implement a really simple memory game using the dynamic presenters lists builder of Spec.The goal of the game is to find all pairs of cards having the same number.The purpose is to show that with DynamicPresentersListBuilder, you can easily build dynamic presenters containing a list of presenters for which the size depends of some objects provided as input.The slider triggers rebuilds of the dynamic presenter in order to update the number of cards in the game."
"MetacelloMCNamelessProjectSpec",""
"DAPackageCycleGenerator","A PDGraphVizGenerator is a class able to generate a dot file from a package cycle (PDPackageCycle)"
"Latin1","This class represents the domestic character encoding called ISO-8859-1, also known as Latin-1 used for Most of the Western European Languages."
"GLMSelectedTextChanged",""
"IceGitHubCreatePullRequestModel","I'm a dialog to ask for data relevant to create a pull request."
"MCVersionInfo","Adds to the record of ancestry, other identifying details."
"MCPoolImportDefinition","A MCPoolImportDefinition represents a pool definition."
"SlotMethodRecompilationTest",""
"GTDebuggerContextPredicate","I encapsulate a condition that can be verified against a Context.To add concrete conditions a subclass should be create that overrides the method #matchContext:Public API and Key Messages- #matches: - #hasMatched- #resultInstance Variablesresult:		the last value returned by matches:"
"MetacelloLinearLoadDirective",""
"GLMPagerBoundsChanged",""
"WideCharacterSet","WideCharacterSet is used to store a Set of WideCharacter with fast access and inclusion test.Implementation should be efficient in memory if sets are sufficently sparse.Wide Characters are at most 32bits.We split them into 16 highBits and 16 lowBits.map is a dictionary key: 16 highBits value: map of 16 lowBits.Maps of lowBits  are stored as arrays of bits in a ByteArray.If a bit is set to 1, this indicate that corresponding character is present.8192 bytes are necessary in each lowmap.Empty lowmap are removed from the map Dictionary.A byteArrayMap is maintained in parallel with map for fast handling of ByteString.(byteArrayMap at: i+1) = 0 means that character of asciiValue i is absent, = 1 means present."
"VersionBrowser","A VersionBrowser is a tool made for browsing the several versions of the provided method."
"MalDominanceNode",""
"ClyClass0FromPWithSingleClass",""
"RBAddReturnStatementTransformation","I am responsible for adding a return statement inside a method. In this implementation, all the return value (including the '^') shall be described.Usage: | transformation |transformation := (RBAddReturnStatementTransformation				return: '^ variable'				inMethod: #methodBefore				inClass: #RBAddReturnStatementTransformationTest)				transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- the method does not have a return statementObservations about the transformation:- The transformation is straightforward: parse the return value and add the resulting node to the end of the method"
"ClyClass9FromPExtendedByP5",""
"CollectionCombinator","For a collection of collections, enumerate all elements of the cartesian product. The code shows how recursion is used to implement variable nesting of loops.The cartesian product is usually a huge collection, that should not be kept in memory. Therefore the user of the class has to provide a block with one argument that is called each time a tuple is constructed. When possible, that block should not build a collection of all these tuples, but should immediately drop unsuitable tuples. To get a first impression, try this with 'inspect it':     | result |     result := OrderedCollection new.    CollectionCombinator new         forArrays:  (OrderedCollection with: #(#a #b #c)                                             with: #(1 2 3 4 5)                                             with: #('v' 'w' 'x' 'y' 'z')                                             with: #('one' 'two' 'three')                         )         processWith: [:item |result addLast: item].    result         "
"UpdatingMenuItemMorph","I am a menu item morph with the ability to refresh periodically all my values (name, state, enablement, icon, submenu)Since it is not a good idea to change the shortcut, this ability is not available"
"RBAddClassCommentTransformation","Adds a comment to a class. It replaces the current comment for the new one (i.e., it does not append the given text to the existing class comment)Usage:| transformation |transformation := (RBAddClassCommentTransformation		comment: 'New comment'		in: RBTransformationTest)		transform.(ChangesBrowser changes: transformation model changes changes) open"
"SpecLayoutAddRow","A SpecLayoutAddRow is an action representing the addition of a row to a layout"
"RBUnclassifiedMethodsRule","All methods should be put into a protocol (method category) for better readability."
"KeymapBrowser","A KeymapBrowser  shows a list of all defined keymappings.It shows a filterable list of keymap shortcuts,  name and categories.Use the context menu to browse the method that defines the shortcut."
"MCFileTreeStWriter","A writer for Smalltalk code"
"OCCompilerNotifyingTest","A CompilerNotifyingTest is a TestCase for checking that Compiler/Parser notifications are inserted at the right place in a TextEditor.Instance Variables	expectedErrorPositions:		<Array of: Integer>	expectedErrors:		<Array of: String>	failure:		<Object>	morph:		<TextMorph>	text:		<String>errorPositions	- the position where error text should be inserted for each chunk of text evaluatederrors	- the error text that should be inserted on evaluation of each chunk of text evaluatedfailure	- an object returned in case of evaluation error and whose identity can be uniquely recognized as a failure	morph	- the Morph holding the text	text	- the string containing all the chunks to be evaluated (separated by %)	  and the expected error messages (`enclosed in back quotes`)	  this text will be stripped of the error messages before being evaluated."
"OSWindowAthensRenderer","I am an abstract Athens renderer. "
"ClyFullBrowserStateTest",""
"SliderPresenter","A SliderPresenter is a spec presenter for a slider.See AbstractWidgetPresenterself exampleI provide the following variables and their accessors- max is the maximum of the slide.- min is the minimum of the slide.- value is the value of the slide, it is between the maximum and the minimum- absoluteValue is the value of the slide in a percent of the maximum.- label is the label in the background.I provide the following methods- color: to set the background color, it must be called after have displayed the widget.todo- quantum"
"VMCallbackContext64","A VMCallbackContext64 is an Alien for the 64-bit version of VMCallbackContext (defined in the VMMaker package), a struct that maintains all the necessary context for a callback.typedef struct {    void *thunkp;    char *stackptr;    long *intRegArgs;    double *floatRegArgs;    void *savedCStackPointer;    void *savedCFramePointer;    union {                            long vallong;                            struct { int low, high; } valleint64;                            struct { int high, low; } valbeint64;                            double valflt64;                            struct { void *addr; long size; } valstruct;                        }   rvs;    jmp_buf trampoline; } VMCallbackContext;Instance Variables"
"ClyCompositeScope","I am scope which merges multiple subscopes. I am supposed to represent scope of composite query where real execution logic is delegated to each subquery. So am not really participate in query execution. But I am still can be used by UI tools to provide optional scopes for query execution.To create my instances use following script:		ClyCompositeScope on: { aScope1. aScope2 }		But usually I am created using concatenation message to simple scope: 	aScope1 , aScope2 	I am supposed to be created on the set of typed scopes.And I implement abstract methods of superclass: - adoptQuery: aQuery. It creates ClyUnionQuery with subqueries created from given aQuery with each subscope.- representsScope: aScopeClass. It ask every subscope if it represents given scope.- supportsQuery: aQuery. I support only composite queries.Internal Representation and Key Implementation Points.    Instance Variables	subscopes:		<ClyTypedScope>"
"MorphicTableContainerAdapter","I am the adapter providing container with table layout"
"ManifestSystemCommandLine","Terminal / Command line support"
"IRAccess","IRAccess models all bytecodes that read or write variables or self/super/thisContext"
"RBProgramNodeTest","SUnit tests for RBProgramNode"
"CmdShortcutSetting","I represent a setting of concrete instance of shortcut activation strategy, the annotation instance registered in the system.I use redefinition mechanizm of class annotations to change the parameters of given shortcut activation. Currently I only modify key combination value, the actual shortcut value.I mark redefined shortcut with special star (*) at the beginning of my label.When I user reset value to default I revert redefined annotation instance:	shortcutActivation revertRedefinedInstanceI am used in class side methods of CmdShortcutCommandActivation which settings browser nodes for all registered shortcut instances.Internal Representation and Key Implementation Points.    Instance Variables	shortcutActivation:		<CmdShortuctCommandActivation>"
"MCScriptDefinition","Common superclass for script definitions"
"ClyMethodScope","I am a scope of methods.Currently I do not provide any information except methods itself"
"FFIUInt16","I'm an unsigned short type."
"NotFound","I am NotFound, an exception to indicate that something is not found in a collection.I am an Error and thus Exception.Typically, the thing not found is in my object instance variable.The collection where this thing was not found is in my inherited signaler instance variable.[ NotFound signalFor: 10 in: #(1 2 3) ] on: NotFound do: [ :exception | exception ]"
"FTBBox","I represent the FT_BBox type"
"ZnUnknownHttpMethod","ZnUnknownHttpMethod is signalled when an unknown/unsupported HTTP method is found while parsing a request.I am resumable to allow non-standard methods.Part of Zinc HTTP Components. "
"FTNilFunction","I am a Function that do nothing to use a Null Object Pattern.	Example (Should only be create by a FTTableMorph)-------------------------------------------------FTNilFunction table: (FTTableMorph with: (1 to: 200))"
"ClassWithBrokenAnnotatingMethod",""
"RBInlineAllMethodTest",""
"InstVarRefLocator","My job is to scan bytecodes for instance variable references.BlockContext allInstances collect: [ :x |	{x. x hasInstVarRef}]."
"RenrakuCritiqueDesignHelp","This book contains explanations of the design behind critiques"
"AnnouncementDeliveryCondition","I represent condition which should be satisfied on given announcement to be delivered to subscription.I am used to implement instance specific subscription on announcements. To create me send message #where to announcement class with condition block:	Announcement where: [ :ann | ann param = #expected ]I can be used directly in announcer subscription API in place of announcement class:	announcer when:  (ValueChanged where: [:change | change oldValue = 100])Be carefull with me because blocks in subscriptions produce references to outer contexts (recever and all senders) Internal Representation and Key Implementation Points.    Instance Variables	announcementClass:		<Announcement class>	conditionBlock:		<BlockClosure>"
"InfiniteDebuggerTest",""
"GLMFastTableDataSource","I'm a model datasource to handle glamour fast table presentations.Description --------------------I am a GLMFastListDataSource that can also manage multi columns.I work with a GLMFastTablePresentation and a GLMMorphicFastTableRenderer.   I rely on TGLMFastTableColumnsRenderer for the logic that actually builds the row morphs. "
"DropFilesEvent","This event is sent when an external file is dropped into the image itself.The event can be used by any Morph implementing:#wantsDropFiles: anEvent #dropFiles: anEvent "
"RBMethodNodeTest","SUnit tests for RBMethodNode"
"GTFilterRegex",""
"PreorderGuideTest","SUnit tests for class PreorderGuide"
"ZipArchive","A ZipArchive represents an archive that is read and/or written using the PKZIP file format.ZipArchive instances know how to read and write such archives; their members are subinstances of ZipArchiveMember."
"BitBltTest","SUnit tests for class BitBlt "
"OmEntryWriter","I implement how to write entries to a stream."
"ObjectFinalizerCollection","An ObjectFinalizerCollection is simple collection which is intended to hold ObjectFinalizers and be used by WeakRegistry."
"Adler32","The Adler32 checksum algorithm was developed by Mark Adler for his ZLib algorithm. It is defined in IETF RFC 1950: http://tools.ietf.org/html/rfc1950#page-10.The purpose of this class is mainly grouping as the ZipPlugin already implements Adler32. See also the comment in #update:from:to:in:Note that Adler32 is not a CRC, strictly speaking."
"SpecStubFastTableView","Only stub object, no real view is displayed."
"EdgeGripMorph","Similar to a ProportionalSplitterMorph but designed to attach to an edge of a single morph only."
"IceLibgitTonelWriter","I write versions and snapshots in tonel format."
"FFICallout","I'm implement a callout mechanism to be used with nb calls formatting.Callout arguments can be either:- an integer constant, boolean or nil- a type name (string or symbol)- a class name- a class variable- any other object, which responds to #asExternalTypeOn:Options: Options may change the execution/compilation of ffi calls. Not many are predefined, here a small explanation of them: optIndirectCall 		This will perform an ""indirect function call"" as explained here: https://en.wikipedia.org/wiki/Function_pointer"
"DynamicComposablePresenter","I'm a CompsableModel with a dynamic behavior for managing subwidgets and the value holder communicates with them.The idea is that instead of having a fix set of valueHolders controlling various aspects of the model. I have a dictionary to hold such elements.You can also have a look at DynamicalPopup for an example.I provide the following variables and its accessors- layout to put a layout created dynamically.- widget is a Dictionary containing my dynamics widgets.I'm specializing- doesNotUnderstand:  to search in my dictionary before rise an exception, so that the programmer can simply use accessors to access my dynamic elements. - openWithSpec to use the layout in my variable if it is not nil.I provide the following messages- instantiateModels: to create instances of subwidgets. It takes a collection of pair, first of each pair is the string to use as key in the dictionary, second is the class name to instantiate.- assign:to: to put in the dictionary a widget already instantiated.todo- needFullRebuild:- retrieveSpec:"
"GLMRubEditingArea",""
"SpecTableLayoutAddWithSpec","A SpecLayoutAddWithSpec is an action representing an add in the spec table layout with a spec selector precised"
"RBReturnsBooleanAndOtherRule","This smell arises when a method return a boolean value (true or false) and return some other value such as (nil or self). If the method is suppose to return a boolean, then this signifies that there is one path through the method that might return a non-boolean. If the method doesn''t need to return a boolean, it should be probably rewriten to return some non-boolean value since other programmers reading the method might assume that it returns a boolean."
"IceAnnouncer","I'm the general announcer of Iceberg.I'm an announcer that knows how to suspend just some kind of announcements (the ones that matches matching block on #suspendAllMatching:while:).In current implementation of Iceberg, I will be used mainly for the convenience method: #suspendAllForRepository:while:"
"MetacelloCannotUpdateReleasedVersionError",""
"ForbiddenClassAnnotation","I represent class annotation which annotates forbidden classes.I am only used during registry bulding. And my instances are never added to the registry.When annotation is attatched to forbidden class I am used instead during registry building. I guard actual annotation from being added to the registry.I define #isForbidden method to be always true. So it never fails.I was introduced to check actual annotation inside ensure block. So if #isForbidden method fails (due to bad implementation) the full annotation will be safelly replaced by BrokenClassAnnotation with details about error.But if it not fails then such annotation is replaced by me. And outer place where annotation is added to the registry can safelly check #isForbidden without error guard.  "
"OSWindowFrameEvent","Some strange event nobody knows what it does.??"
"OSTouchThreeFingersScrollMoveEvent","Three fingers are scrolling"
"RBAllAnyNoneSatisfyRule","Replace ad-hoc implementations (using explicit logic based on do:) of ==allSatisfy:==, ==anySatisfy:== and ==noneSatisfy:== by the adequate calls to ==allSatisfy:==, ==anySatisfy:== or ==noneSatisfy:==. For example [[[  collection do: [ :each |				...				condition					ifFalse: [ ^ false ] ]]]]is transformed into [[[  collection allSatisfy: [ :each | condition ]]]]"
"ManifestOpalCompilerCore",""
"OmDeferrerTest","An EpDeferrerTest is a test class for testing the behavior of EpDeferrer"
"MorphTreeColumnButton","A button in a morphic based tree"
"AssociationTest","SUnit tests for Associations"
"GLMTableColumn","This is a helper class for the TablePresentation.Instance Variables:	title	<ProtoObject | PseudoContext>	computation	<ProtoObject | PseudoContext>"
"MCWorkingCopyBrowserTest",""
"MorphicRadioButtonAdapter","I am the adapter used to link a RadioButtonPresenter with a CheckboxMorph (which can also act as a radio button)"
"DAPackageDependencyTest",""
"MCScannerTest",""
"EventSensorConstants","This is a constants, used by EventSensor to identify various event types and their contents.NOTE: A constant values should be kept in sync with VM-side, which are defined in sq.h header file. "
"InstanceVariableEyeElement","I am an eye element for instance variables."
"LGitDiffFindOptions",""
"ClyFlaggingMethodsQuery","I return all methods which send #flag: message"
"ResetWindow","A ResetWindow is simple UI to reset the currently analysed model."
"HTTPProgress","I am HTTPProgress, a notification to show progress when using HTTP.I include	- total: The total size of the download/upload (if known)	- amount: The completed amount of the download/upload (if known)Use #total:, #amount: or #amountLeft: to set the appropriate byte counts to indicate progress.Use #fraction or #percentage as a value that indicates progress.Total and amount are optional and can be nil. Test using #isEmpty.You can try 	HTTPProgress example."
"LGitCredentials",""
"ClyInstanceVariable","I represent instance variable of class.I am like slot but include explicit information about defining class.You can create my instance using:	ClyInstanceVariable named: #x definedIn: Point.	ClyInstanceVariable on: aSlot definedIn: aClass"
"TaSingleComposition","I am the superclass of all the operations that modifies a single trait."
"ManifestCollectionsNative","Arrays of native types: byte, word, float and integer"
"SimpleHierarchicalListMorph","Display a hierarchical list of items.  Each item should be wrapped with a ListItemWrapper.For a simple example, look at submorphsExample.  For beefier examples, look at ObjectExplorer or FileList."
"LogicalFont","I describe a font."
"IceTipRepairPullRemoteBranch","I will perform a pull from a remote, to bring put repository in sync.matches if: 	- workingCopy is detached AND there is no commit in the current available commits"
"ClyClassWithDeprecatedMethods","I am example class which deprecated methods"
"HESymbol","I represent the symbols.I just extend the HEByteString representation.I just add a conversion from String to Symbol after reading the value."
"ManifestASTCore","Manifest for AST-Core package"
"ReferenceFinder","Finds reference paths between objects to help find memory leaks. It finds the shortest paths between the objects. If you want to find a path between the ""Smalltalk"" global dictionary and some instance of a class, you can use the findPathToInstanceOf: method. For example, ""ReferenceFinder findPathToInstanceOf: WriteStream"" will find a reference path between Smalltalk and an instance of WriteStream."
"MorphicTreeAdapter","I am the adapter used to bridge a TreePresenter and a MorphTreeMorph"
"MCMczWriter","Writing MCZ format"
"ZnCookieJar","I represent a container for storing HTTP Cookies for a client session.Part of Zinc HTTP Components."
"ContainerModel","This is deprecated class because the original class ContainerModel was renamed to ContainerPresenter. You should stop to use this class and modify your code to use ContainerPresenter."
"RadialGradientPaint","I represent a radial gradient paint.The center point and radius defining a circle where gradient will be drawn in user space coordinates.The gradient's ramp color at 0 maps to the focal point and ramp color at 1 maps to the edge of the circle,interpolating colors in between.Also check the comment of my superclass to know better how and when you can use me."
"OSTouchThreeFingersScrollEndEvent","Three fingers finished to scroll"
"ClyOldMessageBrowserQuery","I am a special query which is based on constant list of methods or class comments. I am introduced to support old (current) approach for system queries which is based on SystemNavigation collecting list of methods.I am used by ClyOldMessageBrowserAdapter which is installed as default as part of Calypso toolset.I implement semantics of old MessageBrowser. Internal Representation and Key Implementation Points.    Instance Variables	criteriaBlock:		<BlockClosure>	criteriaString:		<String>	extraMethods:		<Collection of<CompiledMethod>>"
"NECStringSortingTest",""
"OCPerformTest","I test a primitive failure with perform:withArguments: which was raised when selectors with many arguments was called from methods with small stack sizes."
"ProtocolOrganizer","A ProtocolOrganizer is part of a ClassOrganizer. It manages the protocols of the class that owns it"
"ReRuleManagerTest",""
"NNavDirectionParent","I'm the one who knows how to navigate going to the parent node."
"AthensTransform","My instances represent an interface for coordinate system transformation defined by 3x3 matrix of following kind:| sx   shx   x   || shy sy     y   ||  w0  w1  w2 |sx and sy define scaling in the x and y directions, respectively;shx and shy define shearing in the x and y directions, respectively;tx and ty define translation in the x and y directions, respectively.AthensSurface are responsible for providing specific implementation of me, which is most appropriate for backend its using.My internal representation isnt available for manipulation, for example dont assume i'm a matrix. In short, do not copy my state or modify it directly, instead use methods such as #loadAffineTransformation:, and talk to my surface.My subclasses should implement a common protocol for applying generic types of affine transformationson coordinate system:- translate- rotate- shear- scale- matrix multiply- matrix loadSurface must support 4 kinds of transformations of coordinate system(s):- path-to-surface (#pathTransform) to transform path coordinates to surface space- image-to-surface (#imageTransform) to transform between user coordinates and surface pixels- fill-paint-to-user (#fillTransform)- stroke-paint-to-user (#strokeTransform)Given a (fill or stroke) paint-to-user transformation Tp and user-to-surface transformation Tu, the paint color and alpha of a pixel to be drawn with surface coordinates (x, y) is defined by mapping its center point (x + 1/2, y + 1/2) through the inverse transformation (Tu * Tp)^-1 , resulting in a sample point in the paint coordinate space.All transformations, except image-to-surface , ignoring w0 , w1 and w2 values and always assume them set to { 0 , 0 , 1 } respectively.For accessing a particular kind of transformation, send message to canvas, i.e.:canvas pathTransform translateBy: 10@10.It is safe to store transformation in temporary variable, as long as canvas is valid."
"MetaLinkNodesMapper","I map how instance specific links are put on nodes, in different ways.I provide an interface to easily and fastly find a links for a given node or nodes for a given link."
"SystemSettingsPersistenceTest","A SystemSettingsTest is a test class for testing the behavior of SystemSettings"
"UnlimitedInstanceVariableSlot","We store state in a hidden array. Contrary to normal instance variables the number is unlimited."
"RBRemoveClassRefactoring","I am a refactoring for removing classes. My precondition verifies that the class name exists in this namespace and the class has no references, resp. users, if this is used to remove a trait.If this class is ""empty"" (has no methods and no variables), any subclass is reparented to the superclass of this class. It is not allowed to remove non-empty classes when it has subclasses."
"LabelPresenter","A LabelPresenter is a spec presenter for Labels.See AbstractWidgetPresenterself exampleI provide the following variables and their accessors- label is the text displayed that I display.I am specializing defaultColor to change the color of my text.todo- emphasis"
"LGitStatusCallback",""
"ClyTaggedMethodGroupProviderTest",""
"CmdCommandActivationStrategyTests",""
"GLMSouthDirection",""
"SUnitTest","This is both an example of writing tests and a self test for the SUnit. The tests here are pretty strange, since you want to make sure things blow up. You should not generally have to write tests this complicated in structure, although they will be far more complicated in terms of your own objects- more assertions, more complicated setup. Kent says: ""Never forget, however, that if the tests are hard to write, something is probably wrong with the design""."
"OSWindow","I am a central class, which provides a top-level API for creating/controlling an operating-system windows.To create a new OS window with default attributes, just useOSWindow new.For better control of window creation, use OSWindow createWithAttributes: ...message. (See OSWindowAttributes for description).A newly created OSWindow instance can be used and controlled by application.To handle events (mouse/keyboard) of newly created window, one must bind own event handler to it (#eventHandler:) which must understand #handleEvent: message.To render on window's surface, first application must obtain an OSWindowRenderer instance.Currently there's two kinds of renderers available:- form renderer (to use existing form for updating window's contents)- opengl renderer (to render using OpenGL).OSWindow instance and its handle:  - all operations with window (like hiding/showing/resizing etc) is possible only if its handle is valid. If window gets destroyed, or image opened in a new session while window was created in previous session, the handle becomes invalid, and any operations will lead to error. To test if window is still valid, you can just use #isValid message.Text inputWhy does OSWindow need a text input API?When I press a key on my keyboard, my program receives a character event, right?Well, it's not always that simple. Sometimes it can take multiple key presses to produce a character. Sometimes a single key press can produce multiple characters.Text input is not as simple as it seems, particularly when you consider International users (and you should). It's not hard to figure out why that is when you look at languages like Chinese, Japanese, and Korean. These languages, collectively referred to as the CJK, have thousands of symbols.It would not be feasible to have a keyboard with over ten-thousand keys, would it? The solution to this is a software input method.Related methods: - startTextInput - stopTextInput - isTextInputActive(reference https://wiki.libsdl.org/Tutorials/TextInput)"
"MorphicMenuGroupAdapter","I am used to compute a MenuGroupPresenter.There is not Morphic represenation of a MenuGroup, that is why I do not have a coresponding morph."
"IceTipCheckoutNewBranchCommand","Action to start the creation of a new branch from the selected commit.Then checkout the selected branch."
"ByteSymbolTest","SUnit tests for byte symbols"
"IceTipAction","I'm like a lightweight command, used in general for apply concrete actions. "
"MonitorDelay","This is a specialization of the class Delay that is used for the implementation of the class Monitor."
"ProcessTerminateBug","SUnit tests for Process termination"
"MetacelloPharoCommonPlatform","MetacelloPharoPlatform contains all Pharo specific code to load Metacello."
"MetacelloRepositorySpec",""
"BaselineOfAthens","Baseline managing the Athens project for the Pharo bootstrap.Load type: - linear"
"SugsBreakAlwaysSuggestion","This class defines AST node menus for breakpoints"
"ClyNoTagClassGroupProviderTest",""
"GTSpotterContext",""
"SugsRenameClass","I know how to rename a class"
"ClyAsyncQueryResult","I am special kind of query result which implements building in background process.I override #rebuild method where I fork actual query execution and mark myself with ClyBackgroundProcessingTag.When actual query is done I notify my observers to perform update.I am created by ClyAsyncQuery as actual result instance instead of requiredResult. My #buildingQuery is actual query which I execute in the background.Besides background processing I have other differences to my superclass logic:- metadata is not lazy and it is built in background together with items- built tems are never reset due to system changes. They are replaced with actual result when it is finally built.I override #isBuilt method to detect that background processing completes and items are really built.So you can check that async query is done using following expression: 	asyncQuery execute isBuilt  I keep reference to actual result in my #actualResult instance. So it is keep in memory as soon as I am used by somebody.To force async query execution you need convert given query using: 	aQuery async	It returns ClyAsyncQuery instance with #asyncResult variable which points to me.I use specific logic to adopt my instances for the browser. Look at #adoptForBrowser. When I represent raw query result then my superclass implementation is fine. The instance of ClyQueryResultBrowserAdapter will be returned which wraps raw query items to ClyBrowserItem instances.But If I represent a kind of ClyBrowserQueryResult then it is already adopted for the browser. But from the other side I do not provide required API of ClyBrowserQueryResult. So in that case I will return ClyAsyncBrowserQueryResultAdapter which adopts my instance to the ClyBrowserQueryResult.Internal Representation and Key Implementation Points.    Instance Variables	actualResult:		<ClyQueryResult>	buildProcess:		<Process>"
"IceTipCheckoutSelectedTagCommand","Command that checks out the selected tag"
"SimulateKeystrokesTest","SUnit tests to simulate and test key strokes"
"RBRemoveClassVariableRefactoring","I am a refactoring for removing class variables.My precondition verifies that there is no reference to this class variable."
"IceTipPullModel","I'm a model to present pull commits and operations."
"MorphExtension","MorphExtension provides access to extra instance state that is not required in most simple morphs.  This allows simple morphs to remain relatively lightweight while still admitting more complex structures as necessary.  The otherProperties field takes this policy to the extreme of allowing any number of additional named attributes, albeit at a certain cost in speed and space."
"MultiColumnListPresenter","A MultiColumnListPresenter is a spec presenter for Multi columns list"
"InternetConfiguration","I read several parameters related to the default web browser network preferences, through the InternetConfigPlugin VM module.For example, to get the default path where downloaded files should be placed:InternetConfiguration getDownloadPath.Seems to work only on MacOSX"
"PharoLightTheme","The theme is developed in the context of the Glamour project, and its goal is to create a look that:- does not look like a specific operating system. In particular, the icons should be operating system agnostic, because, for example, people in Windows are confused by the red, yellow, green buttons of apple.- uses a limited amount of colors and effects.- is fast.self defaultSettings: nil.self beCurrent. Is adopted as the theme for Pharo3, but it was renamed to avoid collisions with the glamour team,"
"ClyMethodGroupCommand","I am a base class for command which perform some action with method groups. Internal Representation and Key Implementation Points.    Instance Variables	methodGroups:		<Collection of<ClyMethodGroup>>"
"OverflowRowMorph","Instances of this class accept, via #baseMorph:, a morph that is expected to be row-like containing submorphs.Based on the receiver's layout, the base morphs that are able to fit within the receiver (subject to minExtents) are layed out along with, if necessary, a button to pop-up a column of any remaining, unfittable, base morphs.Handy for button bars etc.Example:(OverflowRowMorph new	baseMorph: (UITheme builder newRow: ((1 to: 6) collect: [:i | |label|		label := 'Button ', i asString.		(UITheme builder			newButtonFor: Transcript			getState: nil			action: #show:			arguments: {label}			getEnabled: nil			label: label			help: nil)			hResizing: #spaceFill]))) openInWindow			"
"RBRemoveParameterRefactoring","I am a refactoring for removing (unused) arguments.My preconditions verify that the argument to be removed is not referenced by the methods and that the new method name isn't alread used.Any sender of the prior selector will be changed to the new.If the method contains more than one argument, I request the user to choose one of the arguments."
"CommandLinePasswordManagerTest","A CommandLinePasswordManagerTest is a test class for testing the behavior of CommandLinePasswordManager"
"ManifestMorphicWidgetsPluggable","Pluggable widgets for morphic"
"Pragma","I represent an occurrence of a pragma in a compiled method.  A pragma is a literal message pattern that occurs between angle brackets at the start of a method after any temporaries.  A common example is the primitive pragma:	<primitive: 123 errorCode: 'errorCode'>but one can add one's own and use them as metadata attached to a method.  Because pragmas are messages one can browse senders and implementors and perform them.  One can query a method for its pragmas by sendng it the pragmas message, which answers an Array of instances of me, one for each pragma in the method.I can provide information about the defining class, method, its selector, as well as the information about the pragma keyword and its arguments. See the two 'accessing' protocols for details. 'accessing-method' provides information about the method the pragma is found in, while 'accessing-pragma' is about the pragma itself.Instances are retrieved using one of the pragma search methods of the 'finding' protocol on the class side.To browse all methods with pragmas in the system evaluate	SystemNavigation new browseAllSelect: [:m| m pragmas notEmpty]and to browse all nonprimitive methods with pragmas evaluate	SystemNavigation new browseAllSelect: [:m| m primitive isZero and: [m pragmas notEmpty]]"
"AbstractSpecLayoutAction","AbstractSpecLayoutAction is an abstract class representing a spec layout action."
"ProcessBrowser","Change Set:		ProcessBrowserDate:			14 March 2000Author:			Ned Konzemail: ned@bike-nomad.comThis is distributed under the Squeak License.Added 14 March:	CPUWatcher integration	automatically start and stop CPUWatcher	added CPUWatcher to process list menuAdded 29 October:	MVC version	2.8, 2.7 compatibility	rearranged menus	added pointer inspection and chasing	added suspend/resume	recognized more well-known processes	misc. bug fixesAdded 26 October: highlight pc in source codeAdded 27 October: added 'signal semaphore'added 'inspect receiver', 'explore receiver', 'message tally' to stack list menuadded 'find context', 'next context' to process list menuadded 'change priority' and 'debug' choices to process list menu27 October mods by Bob Arning:alters process display in Ned's ProcessBrowser to - show process priority- drop 'a Process in' that appears on each line- show in priority order- prettier names for known processes- fix to Utilities to forget update downloading process when it ends (1 less deadprocess)- correct stack dump for the active process"
"RBDeprecateClassTransformationTest",""
"CmdOpenContextMenuCommand","I am a hierarchy of commands which opens context menu using specified tool context which was using to activate me.Subclasses should be created to open special kind of menus represented by different kind of CmdMenuCommandActivationStrategy.They should implement method #activationStrategy by returning a class for required type of menu.Internal Representation and Key Implementation Points.    Instance Variables	context:		<CmdToolContext>"
"IceTipTreeItem","I'm a leaf element of a tree."
"GLMBrickPopupEditShadowThemer",""
"AnimatedImageFrame","I am a single frame in a sequence of frames that comprise an animated image. I am designed for use by classes like AnimatedImageMorph and am created during the reading of some image files such as GIFs (see GIFReadWriter).I contain a Form describing my image, a delay time in milliseconds that describes how long I should be displayed in a sequence of animated frames, and a disposal symbol that implementors can use when compositing myself in a sequence of frames. See AnimatedImageMorph for examples of how I am used."
"ManifestMorphicBase","Basic classes for Morphic - a direct-manipulation User Interface (UI) construction kit "
"TestFailedByForkedProcess","I am special failure which signalled that some processes was forked during tests and was failed.I am resumable and resume will open debuggers on failed processes (in fact they will be resumed).I mark tests red when they produce such processes. So no green tests which spawn ""background debuggers"".Also I am signalled first when test itself is failed. By resuming it debugger will be opened on test too together with failed processes "
"ZnTestRunnerDelegate","I am ZnTestRunnerDelegate, a web service interface to run unit tests.	ZnTestRunnerDelegate startInServerOn: 1701.		ZnEasy get: 'http://localhost:1701/sunit/ZnUtilsTests'.	ZnEasy get: 'http://localhost:1701/sunit/ZnUtilsTests/testBase64'.Web Service API:	GET /sunit/MyTestCase	GET /sunit/MyTestCase/testOnePart of Zinc HTTP Components"
"FLVersionTest","SUnit tests for fuel versioning"
"MetacelloOldSemanticVersionNumber",""
"GlobalIdentifierWithDefaultConfiguration","SUnit tests for GlobalIdentifier with a default configuration"
"AthensWrapMorph","I make sure that all my submorphs will be drawn using Athens, not Balloon. For that I use a separate surface."
"SlotSilentTest","I am an abstract class to silence certain parts of the system while running tests in my subclasses.Currently this class silences the SystemAnnouncer and sets the Author to the class name when a test is run. "
"GLMMorphicListRenderer",""
"MetacelloLookupProjectSpec","**MetacelloLookupProjectSpec** is signalled to allow a handler to substitute a different (equivalent) project spec for fetching or loading purposes"
"SycAddNewPackageCommand","I am a command to add new package into the system.I should be created on particular system environment which allow create packages: 	resultPackage := systemEnvironment createPackageNamed: packageName	Currently only Calypso provide such compatible environment (ClySystemEnvironment)	 Internal Representation and Key Implementation Points.    Instance Variables	packageName:		<String>	resultPackage:		<RPackage>	systemEnvironment:		<Object>"
"FTExampleDataSource","I'm a simple example of fast table, who will use a list of classes and traits as data source elements.FTExamples example1.FTExamples example2."
"MetaLinkTest","Tests for MetaLink"
"MetacelloTestsMCPackage",""
"StartupUIManager","I am a non interactive UI manager that is used only during image startup, where parts of the system are not fully initialized yet."
"ClyShowMessageImplementorCommand","I am a command to show all message implementors.To show implementors I ask the browser to spawn new query browser.Internal Representation and Key Implementation Points.    Instance Variables	browser:		<ClyBrowser>"
"ZnApplicationFormUrlEncodedEntity","I am ZnApplicationFormUrlEncodedEntity, a concrete HTTP Entity holding a set of fields (key value pairs) that is form URL encoded.I am a ZnEntity.Part of Zinc HTTP Components."
"Date","Instances of Date are Timespans with duration of 1 day.Their default creation assumes a start of midnight in the local time zone.Comparing DatesWe tend to use dates in one of two modes:- Time zone dependent- Time zone independentIn the first instance, dates are only the same if they are in the sametime zone (otherwise they are two different 24 hour periods).  This isthe default behaviour of Date.In the second, we are only interested in whether the day, monthand year are the same.As an example, take someone's birthday.  If I want to know whether wewere born on the same day (and the same age), I will want to compare dates without time zones.  If I want to know if it is currently their birthday where theyare, I'll want to use time zones.To compare two dates with time zones use #<, #<=, #=, #>= and #>.To compare two dates ignoring time zones use #isBefore:, #isOnOrBefore:, #equals:, #isOnOrAfter: and #isAfter:.| birthday1 birthday2 |birthday1 := (DateAndTime fromString: '2018/01/01T00:00:00+10') asDate.birthday2 := (DateAndTime fromString: '2018/01/01T00:00:00+01') asDate.""Do person 1 and person 2 have the same birthday?""birthday1 equals: birthday2.   ""true""""Do birthday1 and birthday2 represent the same 24 hour period of time?""birthday1 = birthday2.  ""false""birthday1 < birthday2.  ""true""birthday1 isBefore: birthday2.  ""false""birthday1 isOnOrBefore: birthday2.  ""true"""
"RBRefactoringFailure","This error is signalled whenever there is a non recoverable error during refactorings."
"ForbiddenClassAnnotationExample",""
"OCIfNotNilTests",""
"RBMethodNode","RBMethodNode is the node that that represents AST of a Smalltalk method.Some properties aren't known to the parser creating this Object. For example, the scope value isn't known by parsing the code but only after doing asemantic analysis. Likewise the compilation context isn't needed until we try to do the semantic analysis. Instance Variables:	arguments	<SequenceableCollection of: RBVariableNode>	the arguments to the method	body	<BRSequenceNode>	the body/statements of the method	nodeReplacements	<Dictionary>	a dictionary of oldNode -> newNode replacements	replacements	<Collection of: RBStringReplacement>	the collection of string replacements for each node replacement in the parse tree	selector	<Symbol>	the method name	keywordsPositions	<IntegerArray | nil>	the positions of the selector keywords	source	<String>	the source we compiled	scope	<OCMethodScope | nil> the scope associated with this code of this method	pragmas	< SequenceableCollection of: RBPragmaNodes > Nodes representing the pragma statements in this method	compilationContext	<CCompilationContext | CompilationContext>"
"MenuGroupModel","This is deprecated class because the original class MenuGroupModel was renamed to MenuGroupPresenter. You should stop to use this class and modify your code to use MenuGroupPresenter."
"ClyTaggedClassGroupProviderTest",""
"ShNoChangesInClass","This notification is raised if there is no changes in a class when invoked the class builder."
"SMTPClient","This class implements the SMTP (mail sending) protocol specified in RFC 821.HELO <SP> <domain> <CRLF>MAIL <SP> FROM:<reverse-path> <CRLF>RCPT <SP> TO:<forward-path> <CRLF>DATA <CRLF>RSET <CRLF>SEND <SP> FROM:<reverse-path> <CRLF>SOML <SP> FROM:<reverse-path> <CRLF>SAML <SP> FROM:<reverse-path> <CRLF>VRFY <SP> <string> <CRLF>EXPN <SP> <string> <CRLF>HELP [<SP> <string>] <CRLF>NOOP <CRLF>QUIT <CRLF>TURN <CRLF>"
"SDL_ControllerDeviceAddedEvent","SDL2 library structure representing a controller device added event data."
"GRIvarNeitherReadNorWrittenRule","This smell arises when an instance variable is not both read and written. If an instance variable is only read, the reads can be replaced by nil, since it could not have been assigned a value. If the variable is only written, then it does not need to store the result since it is never used. This check does not work for the data model classes since they use the #instVarAt:put: messages to set instance variables."
"ClyProjectChildItemTableDecorator",""
"IllegalName","I am raised on an attempt to use an illegal file name"
"RBPatternParserTest","SUnit tests for RBPatternParser.RBPatternParser needs some extra tests not covered by RBPatternTest for its extended syntax(pattern variables and pattern blocks)"
"ClyClassHierarchyToolbarGroup","I am a toolbar menu group to show class view modes of the browser together"
"SDL_Color","SDL2 library structure"
"GTFilterStringMatch",""
"DocCommentIconStyler","IconStyler for highlight example expressions in method documents (seee PharoDocCommentNode). Enabled / Disabled by a Setting in group ""Code Browsing"""
"HEAssociation","I am simple representation of an association.I store both values, the key and the value.The key and the value are transformed as HEExportedLiterals.When writing or reading, the key is before of the value."
"SlotExamplePerson","A SlotExamplePerson is an example class to demonstrate the workings of relation slots."
"IntegerTest","SUnit tests for integers."
"MethodAdded","This announcement is emited when we add a method to a class or a trait using:	=> Behavior >> compile: or TraitBehavior >> compile:"
"MCGitHubRepository",""
"OSTouchTwoFingersScrollMoveEvent","Two fingers are scrolling"
"FLOptimizedObjectCluster","I have shared behavior of some optional clusters."
"ReAbstractCritique","I am an abstract critic class.My subclasses should define whether they provide a selection interval, or refactory change"
"ClyAddConditionalBreakpointCommand","I am a command to add conditional breakpoint into particular source node..Condition is configured by block Internal Representation and Key Implementation Points.    Instance Variables	conditionBlock:		<BlockClosure>"
"LabelledDropListButton","I am a LabelledContainer specialized to manage a DropListButton.See LabelledContainerself exampleI provide the accessors dropListButton to be more intuitive than subwidget, and the shortcuts button and dropList.I provide shortcuts for the most common methods to avoid the use of the DoesNotUnderstand or the writing of long chain of accessors."
"IceGitWorkingCopyUpdateVisitor",""
"HEArray","I represent an instance of an ArrayMy value instance variable has an array in it. Each of the values of the original array is transformed in a HEExportedLiteral. When writing to the stream the array is written in the following way:1. The size of the array is written as a 32bits integer.2. Each of the literals is written.This allows us to export any kind of array, if it is limited to a size of 32 bits integer.The reading is perform in the inverse order"
"SDL2TouchGestureExample2","Only one gesture at the time, you can scroll to move the circle, pinch to zoom, rotate to rotate, double tap to change the color of the circle and swipe to have a little surprise"
"MCGitlabRepository","Description--------------------I am a repository managing projects hosted on gitlab.com or a self hosted gitlab.I am able to manage schemes such has:- gitlab://pharo-project/pharo:master/src- gitlab://pharo-project/pharo:master- gitlab://pharo-project/pharo- gitlab://git.pharo.org:pharo-project/pharo:master/src- gitlab://git.pharo.org:pharo-project/pharo:master- gitlab://git.pharo.org:pharo-project/pharo- gitlab://git.pharo.org:1234:pharo-project/pharo:master/src- gitlab://git.pharo.org:1234:pharo-project/pharo:master- gitlab://git.pharo.org:1234:pharo-project/pharo	 Internal Representation and Key Implementation Points.--------------------    Instance Variables	hostname:		<aString>			The hostname of the repository. By default gitlab.com. Can also be the URL of the self hosted gitlab.	sshPort:		<aString>			Non default SSH port."
"TonelScanner","I'm a generic scanner to help on parsing tonel files."
"RGNamespaceTest","SUnit tests for namespaces"
"GTSpotterA1",""
"MCFileTreeAbstractStWriter","Abstract superclass for FileTree writers"
"ClyClassHierarchyChanged","I am a root of special kind of ClassAnnouncement which subclasses are triggered by ClyInheritanceAnalysisEnvironmentPlugin to invalidate related method queries.Plugin decorates methods with overriding and overridden status. And to update this information in arbitrary method queries plugin triggers special kind of events which override default event processing logic.For example Object methods status should be updated when you remove some subclass which overrides his method.And otherwise when you change superclass of another class. Subclasses of another class should update their methods status because they could override methods from original removed deep superclass."
"ManifestRingTestsMonticello","Manifest for DEPRECATED package for Ring monticello tests"
"MorphicTextInputFieldAdapter","I am the adapter used to bridge a TextInputFieldPresenter and a PluggableTextFieldMorph"
"IceTipRemoveFromRepositoryPackageCommand","Command that removes a package from the repository, without removing it from the system."
"MetaLinkObjectAPITests",""
"ClySimpleTag","I am a root of hierarchy of first class tags which can mark objects.For example ClyAbstractItemTag is created to mark abstract classes and methods.ClyBrowserItem provides suitable methods for tagging:	- item markWith: aSimpleTagClass	- item isMarkedWith: aSimpleTagClass	I provide singleton instance for my subclasses:	ClyAbstractItemTag instance So tagging items do not produce garbage"
"GTSpotterRecorderActOnEvent","A GTSpotterRecorderActOnEvent models the action of pressing enter (or double clicking) on an element."
"ZnSingleThreadedServer","I am ZnSingleThreadedServer.I can be customized with a delegate (#handleRequest:) and an authenticator (#authenticateRequest:do:).  ZnSingleThreadedServer startDefaultOn: 1701.  ZnSingleThreadedServer default authenticator: (ZnBasicAuthenticator username: 'foo' password: 'secret').  ZnClient new username: 'foo' password: 'secret'; get: 'http://localhost:1701'.I use ZnDefaultServerDelegate when no other delegate is set.I am single threaded, I run in a single process.I close connections after each request/response cycle.Part of Zinc HTTP Components."
"RubHorizontalScrolled","I am raised when a horizontal scroll is done"
"CNGBTextConverter","Text converter for Simplified Chinese variation of EUC.  (Even though the name doesn't look so, it is what it is.)"
"ClyRenameMethodTagCommand","I am a command to rename method tag (protocol).My method group should be either ClyTaggedMethodGroup or ClyNoTagMethodGroup. Internal Representation and Key Implementation Points.    Instance Variables	methodGroup:		<ClyMethodGroup>	newName:		<String>"
"ClySwitchToTraitUsersCommand","I a command to show in browser a hierarchy of traits which are used by selected classes"
"ClyTraitTag","I am used to mark traits"
"ComposableMorph","Morph with an inset border by default and theme access."
"PharoChangesCondenser","I create a new more compact changes files with a single version of each method in the image."
"RePassExceptionStrategy","Pass the exception on, allowing handlers up the stach to deal with it, or open the debugger if there are no handlers."
"CmdCommandExampleInDeepMenuGroup",""
"RBRenameClassTest",""
"ThumbnailMorph","A Morph that views another morph, its objectToView."
"EUCTextConverterTest","SUnit tests for EUC-JP encoding"
"RGDefinition","I am the root class of the Ring meta-model.A Ring definition has a name, can be annotated and knows its environment"
"CairoBackendCache","I providing a simple [weak]key->value storage used to cache various objects used by Athens for Cairo backend, like fonts/forms etc.The cache is global (there's only a single instance of me used at a time) andcache is visible globally by all entities of Cairo backend.The cached objects is held weakly.The cache is flushed for a new image session."
"RBEmptyExceptionHandlerRule","Empty exception handler blocks hide potential bugs. The situation should be handled in a more robust way.[  .... ]	on: Error	do: [  ]	having an empty block is a bad idea because the program silently fails."
"IceGitHubNewBranchFromIssuePanel","I'm a panel to create a new branch taking a GitHub issue as basis.A GitHub issue will be created in the form: 123-a-github-issue"
"GlobalVariable","I model Globals. I am stored as a binding in the Smalltalk globals.The compiler forwards bytecode generation to me for accessing the variable."
"EpTraitModification","I represent the modification of a trait."
"IceTipPullCommand","I'm a command to perform a pull of incomming commits. I open a pull view window."
"ClyItemLocalHierarchyProperty","I represent how many local children exist for object in concrete query result.For example if you look at classes as a hierarchy then you can see Object and its subclasses. This hierarchy can be limited by package scope.So in case of one particular package Object can have 10 subclasses. But in another package it can be 30 (for example).And I represents such local hierarchy size. To access it from browser item use following methods:	- aBrowserItem localHierarchySize	- aBrowserItem localHierarchySize: countI am used by tools to organize tree view for list of items which provide local hierarchy by themselves. Item has no real list of children. But instead it knows count of internal tree. It allows tool hide right number of items when given parent node needs to be collapsed. Important condition here is that I must hold count of full subtree of local hierarchy (not just first level children). To manually create my instances use:	ClyItemLocalHierarchyProperty size: 10Internal Representation and Key Implementation Points.    Instance Variables	subtreeSize:		<Integer>"
"ThisContextEyeElement","This eye element is used in the right panel of the debugger to show thiscontext instead of self as a label"
"GTSpotterUIThreadStream",""
"SDL_SysWMinfo_UIKitInfo","A structure that contains UIKit specific information about a window. "
"ValueChanged","A ValueChanged is an announcement raised when a value of a NewValueHolder is changed"
"FFIExternalStructureTests","Tests for external structures"
"SystemResolverTest","SUnit tests for SystemResolver"
"DuplicatedVariableError","I am an error signalled when a variable is redeclared. For instance when a method is created wich has a temporary or argument with the same name as an instance variable."
"GTEventUnpacking","I represent an unpacking object that is able to receive serialized objects, e.g., FUEL or STON, and tries all available packing systems to unpack the serialized objects.Others can ask me for materializing an object by sending me #unpack:. I resent the request to GTEventPacking objects and if anyone is able to materialize it, I will return the materialized object. Otherwise, I raise an error.Collaborators Part: GTEventPacking, GTEventInitializationError, GTEventUnpackingError.Public API and Key Messages- unpack: aByteArray- addPacking: aGTEventPacking- how to create instances: #default on the class side.Example:	(GTEventUnpacking default		unpack: (GTEventPacking ston 					pack: (GTEventCollector new 							add: 1; add: 2; add: 3; yourself)) 			data) unpackedData Internal Representation and Key Implementation Points.    Instance Variables	packings:		<OrderedCollection>"
"RBBasicDummyLintRuleTest",""
"SolidFillStyle","SolidFillStyle is a fill which represents a color for the BalloonEngine.Instance variables:	color	<Color>	The color to use.	pixelValue32 <Integer>	The cached pixel value to use."
"GTSpotterRecorderHidePreviewEvent","A GTSpotterRecorderHidePreviewEvent  models the action of explicitly hidding the preview."
"ClyMetaLevelClassScope","I am abstract scope which represents concrete meta level of class. There are instance side and class side scopes. Look at subclasses. They should implement class side method #resolveClass:  which returns instanceSide of classSide of given class"
"RGVariableDefinition","A variable definition"
"RBAssignmentOnBlockArgumentRule","Check for assignments on block arguments.For example:[:x :y|	x:= x+y.	]The block argument ""x"" should not be written. This is considered bad style. And some compiler may reject that code."
"IRReconstructor","I am a specialized IRBuilder for the decompiler"
"MethodMapTests",""
"AbstractLayout","I'm a container for slots."
"Stopwatch","A Stopwatch maintains a collection of timespans."
"OSSDL2AthensRenderer","I am an Athens renderer which uses SDL2."
"IceGitHubTreeViewPullRequestCommand","I'm a command to show the pull request review browser."
"MailAddressTokenizer","Divides an address into tokens, as specified in RFC 822.  Used by MailAddressParser."
"RefactoringHelp","This is a custom help book for the refactoring framework."
"FTBitmapSize","I represent the FT_Bitmap_Size type."
"LGitCheckoutOptions",""
"LGit_GIT_EUNMERGED",""
"ClyUndeclaredMethodTableDecorator","I decorate table items with red font for methods which use undeclared variables"
"TestWorkingSession","I'm a special working session for test purposes.I provide a way to escape from the UIManager. "
"ReverseSortFunction","A ReverseSortFunction wraps over another SortFunction so as to sort in reverse order."
"BaseSlot","I am a hidden non-virtual slot that the virtual slots BooleanSlot and PropertySlot store into.They, when a class is created containing it, makes sure that there is one slot of me defined. When the last virtual slot is removed, I am removed."
"TaCompositionElement","I represent the root element in a TraitComposition.I wrap a class or Trait to be used as a trait in a trait composition."
"RBMethodTransformation","I'm a transformation whose focus is a method. "
"EyeDictionaryInspector","Specialized version of inspector showing keys on left panel and values on description panel"
"RBLiteralArrayContainsCommaRule","Checks for literal arrays that contain the #, symbol. The user may have thought that it was a separator."
"MorphicUIManager","The Morphic ui manager. I was packaged in toolbuilder and I may change in the future. For the moment, the goal is to unload toolbuilder. "
"GLMPrivacyAgreementBrick",""
"RBClassNotReferencedRule","This smell arises when a class is not referenced either directly or indirectly by a symbol. If a class is not referenced, it can be removed."
"RBAbstractClass","I am the base class of RBClass and RBMetaclass implementing the common behavior for creating and accessing class and metaclass elements in a refactoring namespace. My subclass instances are created in a refactoring namespace when querying the environment for existing classes (or metaclasses) and when creating or changing classes during refactoring operations.RBClass and RBMetaclass are used to model existing, changed or newly added classes before actually applying the refactoring change to the system. You can query the class name,  defined methods and  variables. They provide a similar interface like the real classes, but only the part that is necessary  for the refactoring framework.They shouldn't be directly used and always be a part of a refacotoring namespace - the model.Likewise this classes, my methods aren't real methods but models (RBMethod) that representing a real methods.Changes for my methods during refactoring are stored in a list ofnewMethods and removedMethods.Like a real class I referre to my superclass and subclass, which again are actually RBClasses."
"IceRepositoryCommand","I'm a generic command  for iceberg repositories."
"CairoGlyph","i correspond to cairo_glyph_t structure:typedef struct {    unsigned long        index;    double               x;    double               y;} cairo_glyph_t;"
"ZnServerSessionManager","I am ZnServerSessionManager.I manage a collection of ZnServerSession on behalf of a ZnServer.Session ids are stored in cookies.Part of Zinc HTTP Components."
"ClyAddBreakpointCommand","I am a base class for commands which add new breakpoints into particular source node.My subclasses should implement single method: - applyBreakpointCondition: aBreakpoint"
"IceDirectoryDefinition","I represent a directory inside the iceberg repository. My contents is an empty string.See my superclasses for more information."
"OSWindowHiddenEvent","I am delivered when a window is hidden."
"HelpTopic","A HelpTopic provides content information that can be used as a help to the user.It can be labeled with a title, identified using an (optional) unique key and marked with an (optional) icon.Help topics form a hierarchy since any topic is able to have zero or moresubtopics. Instance Variables	contents:		<Object>      The help topic contents	icon:			<Form|nil>	   An optional icon for the topic	key:			<String|nil>    An optional unique key	subtopics:	      <Collection>  A collection of subtopics	title:			<String>        The titlecontents	- The help topic contents - typically containing the help topics informationicon	- An optional icon for the topickey	- An optional unique key which can be used to identify the topic. subtopics	- A collection of subtopics. 	  By default the subtopics are not sorted, so the insertion order is used. 	  If necessary it is possible to sort the subtopics by title.title	- A meaninful title for the help topic"
"LRUCacheTests","I am NeoLRUCacheTests."
"ClyRunAllTestsFromMethodDataSourceCommand","I am a command to run all tests available in given data source"
"MCWriter","Common superclass for metacello writers"
"RelationSet","I'm a Set like collection that is used to hold collections of associated objects. When an object is added to or removed from this collection the inverse side is also updated."
"RBCompositeMethodTransformation",""
"JobStart","A JobStart is announcement announcing the start of a job execution.SystemAnnouncer uniqueInstance 	on: JobStart send: #XXX to: whoever."
"RBUnwindBlocksRule","Move assignment out of unwind blocks.For example[[[[ statements. var := object ] ifCurtailed: block]]][[[ var := [ statements. 	    object] ifCurtailed: block]]]"
"GLMPopupBrickPredicate","I am a predicate that defines a boolean function used to decide whether an opener or closer should perform their actions"
"ManifestSystemSupport","General support for the Pharo system like access to the VM or image"
"GIFReadWriter","I am GIFReadWriter.I am a concrete ImageReadWriter.Updated implementation of a GIF file (byte-level) decoder.I implment a Stream-like behavior over a GIF image file, and can both read and write GIF files.Previously, two classes distinguished between ""still"" and ""animated"" GIFs. However, the standard specifies that any GIF can have ""frames"" and be animated. This reimplementation treats this as normal.See these links for more detailed information:  https://www.w3.org/Graphics/GIF/spec-gif89a.txt https://en.wikipedia.org/wiki/GIF http://www.matthewflickinger.com/lab/whatsinagif/bits_and_bytes.aspFor writing GIF files, I take a collection of AnimatedImageFrame objects and write the appropriate headers, Graphics Control Extensions, and everything else needed for writing an animated GIF.For reading GIF files, I take a binary filestream and set my own `frames` variable to be a collection of AnimatedImageFrames, which themselves contain decoded Forms and instructions for disposal, delay, etc.NOTE: I make use of the LzwGifDecoder and LzwGifEncoder classes in order to encode/decode individual bitmap data for each image frame of the GIF.See `GIFReadWriter exampleAnim` for more information.  "
"FFICallbackThunk","An instance of FFICallbackThunk is a reference to a machine-code thunk/trampoline that calls-back into the VM.  The reference can be passed to C code which can use it as a function pointer through which to call-back into Smalltalk.  The machine-code thunk/trampoline is different for each instance, hence its address is a unique key that can be used to assocuate the Smalltalk side of the call-back (e.g. a block) with the thunk.  Since thunks must be executable and some OSs may not provide default execute permission on memory returned by malloc we may not be able to use malloc directly.  Instead we rely on a primitive to provide memory that is guaranteed to be executable.  The FFICallbackThunk class>>allocateExectablePage primitive answers an Alien that references an executable piece of memory that is some (possiby unitary) multiple of the pagesize.  Class-side code then parcels out pieces of a page to individual thunks.  These pieces are recycled when thunks are reclaimed.  Since the first byte of a thunk is non-zero we can use it as a flag indicating if the piece is in use or not.See Callback for the higher-level construct that represents a Smalltalk block to be run in response to a callback.  Callbacks wrap instances of FFICallbackThunk and VMCallbackContext[32|64] instances that describe the stack layout and register contents for receiving callback arguments.Class VariablesAccessProtect <Semaphore> critical section for ExecutablePages (de)allocationAllocatedThunks <AlienWeakTable of <FFICallbackThunk -> Integer>> - weak collection of thunks, used to return thunk storage to the executable page pool.ExecutablePages <Set of: Alien ""executable page""> - collection of pages with execute permissions used to provide executable thunks"
"RBProtocolEnvironment","I am a RBBrowserEnvironment on a set of protocols of a class.Example:(RBBrowserEnvironment new) forClass:Morph protocols:{'printing'}."
"TabBuildingIconMorph","I implement rotated icon to animate background tab building. I use stepping mechanizm for animation.Just create my instance with #new message to use in other morphs.Internal Representation and Key Implementation Points.    Instance Variables	progress:		<Integer>	progressIconMorph:		<ImageMorph>    Implementation Points"
"MCVersionReader","A version reader"
"ZnManagingMultiThreadedServer","ZnManagingMultiThreadedServer is a ZnMultiThreadedServer that manages the socket stream connections used by the worker threads that are spawned.  ZnManagingMultiThreadedServer startDefaultOn: 1701.I keep track of all the connections that I spawn so that I can close them when I am stopped.Part of Zinc HTTP Components."
"ZnCharacterEncodingError","I am ZnCharacterEncodingError.I am an Error.I signal when something goes wrong while encoding or decoding characters.Part of Zinc HTTP Components"
"TextURL","I'm a text attribute used to encode an URL."
"AthensTextLine","I representing a single line of text"
"TIceRepositoryWriter","I indicate when a class is writer for iceberg "
"RFObjectReification","Using the ObjectRefification, one can pass a pointer to the object where the link is installed in"
"FTEasyListMorph","I'm an easy list used to simplify the creation of lists.My parent is too powerful, I'm just a simplification of it (and no, I will not go to the psy to deal with that). Example: =========FTEasyListMorph new	extent: 300@550;	elements: Morph methods;	display: [ :method | method selector ];			openInWindow.	"
"ClyVariableReferencesTestCase",""
"ZipNewFileMember","ZipNewFileMember instances are used to represent files that are going to be written to a ZipArchive.Their data comes from external file streams."
"OCAbstractLocalVariable","I am an argument or temporary variable of a method or block.index is not the index in the bytecode but just used for sorting(see tempVars). to be fixed..."
"ChangeSorterApplication","A ChangeSorterApplication is spec version of the dual sorter.ChangeSorterApplication 	new openWithSpec"
"RadioButtonGroup","I am a group for radio buttons which ensures that only one button is activated at the same time.I collaborate with- RadioButtonPresenter are usually the buttons I manage.- ValueHolder to link buttons.I provide the following methods- addRadioButton: to add the button in my collection and link it at the other.- buttons getter of my collection.- default: activate a button when it is built.todo- canDeselectByClick"
"FLBinaryFileStreamStrategy","Specific to BinaryFileStream"
"CmdMenuGroupExample1",""
"ThreadSafeTranscript","I'm an output device.    Transcript show: 'hello'.I implement TTranscript.While ThreadSafeTranscript is threadsafe wrt stream access, the morphic code invoked by #changed: is not. So #changed: should not be sent from multiple threads (at random times) since this causes a morph's #update: method to conflict with the UI-thread running the morph's #drawOn: method in parallel. Whereas Morphic seems to assume that #update: and #drawOn: are run sequentially from the same thread.The #step method is assumed to be invoked only from the main UI thread, so from here it is safe to send #changed: and consequently #update:. Methods #clear and #endEntry are invoked from multiple threads, so these signal to #step to call #changed: with the required parameter (#clearText and #appendEntry respectively.)Method #contents should not directly return ==stream contents==, since even with a mutex around that, multiple calls from Morphic may unexpectedly get different results and fail.  #contents needs to return a value that is static between each #step (which is ==stepContents== that is only udpated in #step).The ==stream reset== is left to occur from #clear being invoked from multiple threads. The ==stream resetContents== is moved to #step so this occurs directly after ==stepContents== is set from ==stream contents==."
"ZeroDivide","I am ZeroDivide, an ArithmeticError that may be signaled when a mathematical division by 0 is attempted."
"GTSpotterCandidatesAmountChanged",""
"LGitStructVersionsEnum",""
"EpApplyTest",""
"FileSystemVisitor","I am an abstract superclass for objects that can perform operations on directory trees. My subclasses implement the visitor protocol, and process filesystem nodes shown to them by guides."
"GLMPanePort","A port that belongs to a pane.Bound ports have a few special characteristics in comparison to their superclass. For one, they don't just assign a value to themselves using #value: but rather generate a transmission that set the value so that the pane can handle the transmission and forward it to other ports if necessary, depending on the policy of the containing browser."
"DAPackageRelationGraphDiff","A PDPackageRelationGraphDiff do the diff between two PDPackageRelationGraph (an older and a newer) to detect : - which packages added/removed : packagesDiff. - which dependent packages added/removed from a package : dependentPackagesDiff. - which dependencies added/removed from a dependent package."
"ClyLocalClassScopeTestCase",""
"CompiledBlock","Specific version of compiled code for block's.CompiledBlock are used only in the recent BlockClosure implementation by Eliot Miranda and Clement Bera, also known as FullBlockClosure. This new representation makes possible heavier runtime optimisations while simplifying a lot of code, both image-side and VM-side.In addition the execution mechanics, a compiled block have an extra optional literal. The last literal is the compiled code referring to the compiled block. "
"SugsMockContext","I'm a mock context with lot of stuff hardcoded.I'm used in the tests to make easier the configuration for detecting diferents context."
"GLMPopper","This is a morph used for displaying various notifications.It has a special ability to delete itself either when Esc is pressed, or when the focus is lost.When opened the user has to spefify a text morph whose position and cursor are user to position this morph.When triggered from a context menu action the class method installAlarmFor: should be used to open the popper as the text morph gets back the focus after the action was executed (and, hence, the popper is closed)."
"LGitRefSpec","Use:	LGitRefSpec fromString: '+refs/heads/*:refs/remotes/origin/*'.Note: The asterisk wildcard (*) matches all refs of a given path (not explicitly documented in the below).From the git-fetch man page:<refspec>           The format of a <refspec> parameter is an optional plus +, followed by the source           ref <src>, followed by a colon :, followed by the destination ref <dst>.           The remote ref that matches <src> is fetched, and if <dst> is not empty string,           the local ref that matches it is fast-forwarded using <src>. If the optional plus           + is used, the local ref is updated even if it does not result in a fast-forward           update.               Note               If the remote branch from which you want to pull is modified in non-linear               ways such as being rewound and rebased frequently, then a pull will attempt a               merge with an older version of itself, likely conflict, and fail. It is under               these conditions that you would want to use the + sign to indicate               non-fast-forward updates will be needed. There is currently no easy way to               determine or declare that a branch will be made available in a repository               with this behavior; the pulling user simply must know this is the expected               usage pattern for a branch.               Note               You never do your own development on branches that appear on the right hand               side of a <refspec> colon on Pull: lines; they are to be updated by git               fetch. If you intend to do development derived from a remote branch B, have a               Pull: line to track it (i.e.  Pull: B:remote-B), and have a separate branch               my-B to do your development on top of it. The latter is created by git branch               my-B remote-B (or its equivalent git checkout -b my-B remote-B). Run git               fetch to keep track of the progress of the remote side, and when you see               something new on the remote branch, merge it into your development branch               with git pull . remote-B, while you are on my-B branch.               Note               There is a difference between listing multiple <refspec> directly on git pull               command line and having multiple Pull: <refspec> lines for a <repository> and               running git pull command without any explicit <refspec> parameters. <refspec>               listed explicitly on the command line are always merged into the current               branch after fetching. In other words, if you list more than one remote refs,               you would be making an Octopus. While git pull run without any explicit               <refspec> parameter takes default <refspec>s from Pull: lines, it merges only               the first <refspec> found into the current branch, after fetching all the               remote refs. This is because making an Octopus from remote refs is rarely               done, while keeping track of multiple remote heads in one-go by fetching more               than one is often useful.Some short-cut notations are also supported.           o    tag <tag> means the same as refs/tags/<tag>:refs/tags/<tag>; it requests               fetching everything up to the given tag.           o   A parameter <ref> without a colon fetches that ref into FETCH_HEAD, and               updates the remote-tracking branches (if any)."
"CallbackForX64","A CallbackForX64 is a callback for platforms with x64/x86_64 processors using the System V ABI."
"ManifestRingTestsContainers","Manifest for DEPRECATED package for Ring containers tests"
"IRPopIntoInstVar","Pop into instance variable."
"TrueTest","SUnit tests for true/True class"
"ZnImageExampleDelegate","I am ZnImageExampleDelegate.I am a implementation of the web app in 'Building and deploying your first web app in Pharo'.I serve an image that web clients can change by uploading a new one.  ZnServer startDefaultOn: 1701.  ZnImageExampleDelegate installInDefaultServer.  ZnServer stopDefault.I implement the following API or resources	GET /image - returns an HTML page showing our image and a form to upload a new image	GET /image?raw=true - directly serves the last uploaded image	POST /image - handler accepting a multipart form data entity with a file part containing GIF, JPEG or PNG bytes	Part of Zinc HTTP Components."
"CairoScaledFont","my instances map tocairo_scaled_font_t * data type"
"LGitDiffNotifyCallback","Diff notification callback function.https://libgit2.github.com/libgit2/#HEAD/group/callback/git_diff_notify_cbThe callback will be called for each file, just before the git_delta_t gets inserted into the diff.When the callback: - returns < 0, the diff process will be aborted. - returns > 0, the delta will not be inserted into the diff, but the diff process continues. - returns 0, the delta is inserted into the diff, and the diff process continues."
"ClyConcreteGroupCritiqueQuery","I return critiques of my base query which belongs to particular group.To create my instance use following expression: 	ClyConcreteGroupCritiques filter: aCritiqueQuery from: aScope byGroup: aString Internal Representation and Key Implementation Points.    Instance Variables	groupName:		<String>"
"MCRemovalPreambleDefinition","A preamble evaluated before unloading/removing"
"TimeZone","TimeZone is a simple class to colect the information identifying a UTC time zone.offset			-	Duration	- the time zone's offset from UTCabbreviation	-	String		- the abbreviated name for the time zone.name			-	String		- the name of the time zone.TimeZone class >> #timeZones returns an array of the known time zonesTimeZone class >> #default returns the default time zone (Grenwich Mean Time)"
"TestAnnouncement","Notify about testing a test"
"ClyMethodVisibilityLevel","I am a root of hierarchy of different kind of method visibilities.Instances are created with currently visible class scope and extra scope which can be activated.Activation/decactivation methods returns new scope which represent result method visibility: - activateExtraScope - deactivateExtraScope My instances are used by browser to switch method visibility of inherited classes. They use simple method #toggleScope which also returns result method scope.To represent current state of visible scope I compute #isActive flag:If any of classes from extra scope is included in the visible scope then my instance is considered activeMy instances are created on currently visible class scope. And subclasses create extra scope according to their logic. Internal Representation and Key Implementation Points.    Instance Variables	visibleClassScope:		<ClyClassScope>	extraClassScope:		<ClyAbstractClassScope>	isActive:		<Boolean>	    Implementation Points"
"TPointAccess","Contains methods for accessing points stored in variable word classes.Initially used by PointArray & ShortPointArray"
"ClyClassVariable","I represent Class variable of class.I am like ClassVariable but I include explicit information about defining class.You can create my instance using:	ClyClassVariable named: #DependentsFields definedIn: Object.	ClyClassVariable on: aClassVariable definedIn: aClass "
"RBInlineMethodFromComponentTest",""
"SparseLargeArray","A version of SparseLargeTable that does not populate its bins until a value other than the default is stored.!"
"RBRefactoryVariableChange","I am the baseclass for all refactoring changes for all kind of variable changes, adding or removing class,  instance variables and pool variables.I only hold the name of the actual variable. The concrete kind of variable and how the defintion for adding this variable looks like, is implementedby my subclasses."
"SourceMethodConverter","A SourceMessageConverter is a wrapper wich display the source code of the provided message"
"NECUntypedModel","When no receiver class is known, I'm the right model. I store all temporary variables, instance variables of the selected class and all selectors in system. For performance reasons I only collect selectors when at least one character is known."
"RBDummyClassToRename","This is a dummy class to test RenameClass transformation"
"UIThemeDecoratorTest","I hold tests for UIThemeDecorator."
"ZnDefaultServerDelegate","I am ZnDefaultServerDelegate.I function as a delegate for ZnServer, implementing #handleRequest:I implement responses to the following prefixes:/echo - an echo text of request information for debugging purposes/dw-bench - a dynamic html page for benchmarking purposes/unicode - a unicode test page/random - a random string (/random/32 for a specific size)/bytes - bytes according to a pattern (/bytes/32 for a specific size)/favicon.ico - a Zn favicon/status - a server status page/error - force server errors/session - a simpler session based counter/help - lists all page prefixes/ - an html welcome pageWithout any matches, I respond with a page not found.I can be reused without any default handlers mapped using #empty and configured using #map:to: where the second argument can be a block.Part of Zinc HTTP Components."
"RBCommentNodeVisitor","Visit any RBCommentNode in the syntax tree and evaluate a generic block.The block  has two optional parameters:  	aCommentArray (the collection of 1 or more RBComment's)	aNode (the node which containts the comment)"
"ClyAllClassesQuery","I am a query of all classes from given scope"
"IceBitbucketRepositoryType","I resolve Bitbucket repositories"
"LGitTransportMessageCallback",""
"ArrayTest","This is the unit test for the class Array. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)		- the sunit class category"
"ClyTestedEnvironmentPluginTest",""
"FT2Outline","@instVar: contoursSize - The number of contours in the outline.@instVar: pointsSize - The number of points in the outline.@instVar: points - an array of  26.6 fixed point integer pairs giving the outline's point coordinates.@instVar: tags	- an array of pointsSize bytes, giving each outline point's type. (counting from 0)If bit 0 is unset, the point is 'off' the curve, i.e., a Bézier control point, while it is 'on' when set.Bit 1 is meaningful for 'off' points only. If set, it indicates a third-order Bézier arc control point; and a second-order control point if unset.@instVar: contours - an array of contoursSize shorts, giving the end point of each contour within the outline. For example, the first contour is defined by the points '0' to 'contours[0]', the second one is defined by the points 'contours[0]+1' to 'contours[1]', etc.@instVar: flags - a set of bit flags used to characterize the outline and give hints to the scan-converter and hinter on how to convert/grid-fit it."
"SubscriptOutOfBounds","I am SubscriptOutOfBounds, an exception indicating that some operation attempted to use a subscript outside allowed bounds.Normally, I hold the offending subscript and/or the allowed lowerBound and upperBound (inclusive).SubscriptOutOfBounds 	signalFor: 10 	lowerBound: 1 	upperBound: 5 	in: (Array new: 5)"
"HECharacter","I represent a character.I serialize myself as a String of a single character.When I am readed back I just read the first character of the value.My value is always a String"
"SugsBreakConditionSuggestionTest",""
"GLMBundleTransmissionTest",""
"CompiledMethodTrailerTest","SUnit tests for CompiledMethodTrailer"
"ReMissingMethodCritique","This kind of critiques occur when a method is missing. The critique knows what is the selector of the missing method, and it's perspective class. The critique provides a change which is a creation of the missing method. Also a sourcecode of a method can be specified. For now there are two shortcuts for the source code, that set it to either subclassResponsability or shouldBeImplemented "
"ClassTestCase","This class is intended for unit tests of individual classes and their metaclasses.It provides methods to determine the coverage of the unit tests.Subclasses are expected to re-implement #classesToBeTested and #selectorsToBeIgnored.They should also implement to confirm that all methods have been tested.#testCoverage	super testCoverage."
"AthensMorphScene","Allows to render a morph as a scene in athens"
"STONTestUser2","STONTestUser2 extends STONTestUser with explicit implementations of #fromSton: and #stonOn:"
"GLMFlexiblePresentation","A presentation that flexibly changes it behavior depending on the current entity.If the entity is a collection, this class renders as a ListPresentation, otherwise as a TextPresentation."
"ExecutionCounter","I am a meta-object that can be put on any AST node to count executionTo install a watchpoint in a node: 	ExecutionCounter installOn: aNode	Class CounterIconStyler then renders an icon in the editor, mouse over it to see the current counter value."
"ExecutionEnvironment","I am  special meta object  represent current execution environment for active process.I allow to manage new forked child processes.When I am installed on process I will receive message #prepareForNewProcess: for every forked child process.By default I am not installed on any process. And  DefaultExecutionEnvironment instance is returned for callers which does nothing. Tools could define specific environment to provide specific hooks for code execution in context of them.For example SUnit installs special TestExecutionEnvironment to manage all forked processes during test"
"ClassCommentChunk","I represent the declaration of a class comment in a file.  My contents are the class comment to import, and the comment reader is the object who knows the class where to put the class comment.Sending me the message #import makes me install the comment into the class."
"PharoDocCommentExtensionsTest","SUnit tests for extensions made by PharoDocComment package"
"TestRunner","<lint: #ignore rule: #classNotReferenced rational: 'this view is only accessed from menus'>Although tests can be most easily be run from a browser, I provide the ability to: * select sets of test suites to run. I am designed to make it easy to execute groups of tests* obtain a more detailed log of the results UI Description ___________ My left-most pane lists all of the categories that contain test classes (i.e., subclasses of TestCase); when some of these categories are selected, the test classes that they contain appear in the pane to the right. Abstract classes are italicized, and the test class hierarchy is shown by indentation, so subclasses of ClassTestCase are indented more than subclasses of TestCase. The tests that did not pass (if any) are listed in the right-hand panes of the Test Runner; if you want to debug one, to see why it failed, just click on the name."
"RBRemoveVariableTransformationTest",""
"DependentsArray","Act as an array of (weak) dependents of some object.When dependents are reclaimed, they are replaced by an UndefinedObject in the DependentsArray.This is why instances of this class will take care to iterate only on non nil elements.These nil also cause loops written as (1 to: self size do: [:i | (self at: i) doSomething]) to be inefficient.This is because #size and #at: both require scanning for nils.For this reason, DependentsArray though sequenceable, is not a subclass of SequenceableCollection."
"ZnPercentEncoder","I am ZnPercentEncoder.I implement RFC 3986 percent encoding and decoding.All characters that are not part of a safe set are encoded using a percent (%) followed by a two digit hexadecimal number of a byte value. Non-ASCII characters are first encoded, normally using UTF-8.My #encode: and #decode: messages work from String to String.My decoder will accept + as an encoding for a space by default.See also http://en.wikipedia.org/wiki/Percent-encodingPart of Zinc HTTP Components"
"HMAC","HMAC is a mechanism for message authentication using cryptographic hash functions. HMAC can be used with any iterative cryptographic hash function, e.g., MD5, SHA-1, in combination with a secret shared key.  The cryptographic strength of HMAC depends on the properties of the underlying hash function.See RFC 2114."
"RBPullUpInstanceVariableRefactoring","I am a refactoring for moving a instance  variable up to the superclass."
"FloatingPointException","I am FloatingPointException, an ArithmeticError indicating a problem in a floating point calculation.Precision underflow or overflow could be considered FloatingPointExceptions.ZeroDivide, DomainError and NaNException are examples of more specific ArithmeticErrors that can be signaled before an operation is actually attempted."
"EyePointerWrapper","A wrapper used by the PointerExplorer.I wrap a reference so we can stop follwoing back pointers."
"STONReaderTests","STONReaderTests test materialization."
"GTSpotterExceptionMock5",""
"IRTempAccess","I model the pushTemporary Bytecode"
"IceTipTagModel",""
"EpSessionSnapshot","When an image is launched, a session starts. After that, the session can be snapshoted multiple times. I represent the snapshot of a session."
"FFIExternalStructureType","I'm a type to handle structures. "
"SpecStubAbstractAdapter","I am an abstract class providing all the properties shared amongs all the stub adapters. They do not produce real views, only stub objects."
"UndefinedObject","I describe the behavior of my sole instance, nil. nil represents a prior value for variables that have not been initialized, or for results which are meaningless."
"OCCompiledMethodIntegrityTests",""
"ToManyRelationSlot","I'm a relation slot  that  describes  slots that contain collections."
"OSTouchStateGestureDetector","I am a gesture detector who detects gestures with a begin, current and end state"
"GLMScrollListBrickTest","A GLMScrollListBrickTest is a test class for testing the behavior of GLMScrollListBrick"
"GLMPluggableButtonMorph",""
"ClyRunClassScriptCommand","I a command to run particular script by given class. Internal Representation and Key Implementation Points.    Instance Variables	script:		<ClyClassScript>	targetClass:		<Class>"
"MetacelloMethodSectionPath",""
"IceShouldCommitBeforePull","I'm thrown when an attempt to pull was made and there are changes in the image. This is a resumable error because user may want to do it anyway."
"RBAddMethodCommentTransformation","Adds a comment in the beginning of the method (after its signature).Usage:| transformation |transformation := (RBAddMethodCommentTransformation		comment: 'New comment'		inMethod: #testTransform		inClass: #RBAddClassTransformationTest)		transform.(ChangesBrowser changes: transformation model changes changes) open"
"IceGenericError",""
"OCClosureTests",""
"ObjectLayout","I am the superclass of standard layouts for Objects."
"KMDescriptionPresenter","A KMDescription is a window showing the description of shortcuts for a specified set of symbols reprensenting KMCategories"
"IceTipPackageModel","I'm a model for IcePackage entries."
"ClassOrganizationChunk","I represent the declaration of a class organization in a file.  My contents is the class organization string to import, and the class organizer is the one of the changed class.Sending me the message #import makes me install the class organization I carry into the class."
"RadioButtonGroupModel","This is deprecated class because the original class RadioButtonGroupModel was renamed to RadioButtonGroupPresenter. You should stop to use this class and modify your code to use RadioButtonGroupPresenter."
"LGitOdbWritepack",""
"LGitDiffFormatTypeEnum",""
"GLMImplicitBrowser","A GLMImplicitBrowser is an abstract implementation of a browser that defines an implicit flow of transmissions.When using implicit browsers, the developer does not have access to the internal transmissions."
"Pharo3Theme","Use PharoLightTheme now"
"EpTraitRemoval","I represent the removal of a trait."
"RBTransformationDummyRuleTest1",""
"PragmaMenuAndShortcutRegistrationItem","A PragmaMenuAndShortcutRegistrationItem is an item of a menu or keymap"
"RBRuleIfNotEmptyDo","ifNotEmptyDo: should not be used as ifNotEmpty: works for blocks with arguments, too."
"FLUserGuidesTest","SUnit tests to guide users with fuel serialization"
"RBExplicitRequirementMethodsRule","Classes that use traits with explicit requirement methods should either implement the method or inherit it."
"ClyDeprecatedMethodsQueryTest",""
"FLNotSerializableMock","A test mock which is not serializable"
"GLMPaneAdded","A new pane was added"
"CmdCommandAborted","I am exception which used to break command execution. Usually I am signalled during command preparation when user declines UI request "
"FFICalloutMethodBuilder","I build FFI method bytecodes for a call. "
"LGitResetTypeEnum",""
"AsClassRule","Do not use methods such as	#asClass	#asClassIfAbsent:	#asClassIfPresent:	because they do not take into account an environment. Instead use `self class environment at: #ClassName`"
"FileWriteError","Notify about an error when trying to attempt to write to a file"
"SourceCodeFonts","I'm a font setting for Source Code Pro fonts."
"IceBasicProjectReader","I am a basic project reader that is used by default in case no other project reader was found.I create an IceBasicProject in case a .project file is found, or an IceUnbornProject otherwise."
"MetacelloPackagesSpecTestCase",""
"ZnBase64EncoderTests",""
"LGitWriteBackValueSizeT",""
"ClyTestedClassProperty","I mark classes which has covering test case. I include reference to coverint test class. Internal Representation and Key Implementation Points.    Instance Variables	coveringTestCase:		<TestCase>"
"WriteStream","I represent an accessor for a sequence of objects that can only store objects in the sequence."
"StartupPreferencesLoadingError","I represent an unrecoverable exceptional event while trying to load preferences during startup. I should be handled by the public methods of StartupPreferencesLoader."
"FLEncoder","I am an abstraction used by the serialization algorithm to encode the graph in a stream."
"AthensBezier3Scene","I just a helper class used to debug & visualize rendering of bezier segment. This class is subject of changes or complete removal"
"ZdcSecureSocketStreamTests","ZdcSecureSocketStreamTests tests ZdcSecureSocketStream "
"RBRemoveMethodTest",""
"SpecStubTreeNodeAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"TemporaryVariable","I model a temporary variable, similar to Slot and LiteralVariable.For now I am cread on need and never persisted. (this might change laterto allow me to be annotated with properties.)I know the method that I come from. If I am a block temp, I record the startPC of that block."
"GTSpotterDeploymentExceptionHandlerMock5",""
"RGInstanceVariableDefinition","An instance variable definition"
"MetacelloAbstractPackageSpec",""
"RBCascadedNextPutAllsRule","Use cascaded nextPutAll:''s instead of #, in #nextPutAll:.Indeed this is really important to understand that the implementation of the concatenation of strings creates a new string for each uses of ,.Therefore if you use five , to concatenate an expression you create 5 intermediate strings for nothing. Using nextPutAll: just add the string in the stream.Have a look at  streamContents:. Here is an exampleString streamContents: [ :s|		s nextPutAll: '---'.		s nextPutAll: self.		s nextPutAll: '---' ]."
"ImageModel","This is deprecated class because the original class ImageModel was renamed to ImagePresenter. You should stop to use this class and modify your code to use ImagePresenter."
"SDL2TuioObjectStateMachine",""
"TonelFileSystemUtils","I'm a file utils implementation who works with FileSystem framework.Pharo should use me."
"ClyUntaggedClassesQueryTest",""
"FloatReferencesRuleTest",""
"ClyCriticEnvironmentPlugin","I plug environment with information about critiques:1) I decorate critiques with various properties 2) I provide ""critiques"" method group I allow disable method group using class side methods: - ClyCriticEnvironmentPlugin disableMethodGroup.- ClyCriticEnvironmentPlugin enableMethodGroup.Internal Representation and Key Implementation Points.    Instance Variables	providesMethodGroup:		<Boolean>"
"RubUnderlinedSegmentMorph",""
"ExampleForTest11","An example class at level 2 (indirectly below Object) used for testing class hierarchy"
"Text","I represent a character string that has been marked with abstract changes in character appearance. Actual display is performed in the presence of a TextStyle which indicates, for each abstract code, an actual font to be used.  A Text associates a set of TextAttributes with each character in its character string.  These attributes may be font numbers, emphases such as bold or italic, or hyperling actions.  Font numbers are interpreted relative to whatever textStyle appears, along with the text, in a Paragraph.  Since most characters have the same attributes as their neighbors, the attributes are stored in a RunArray for efficiency.  Each of my instances has	string		a String	runs		a RunArray"
"DiskFileSystemTest","SUnit tests for the disk filesystem"
"GTSaveDebugAction","This debugger action is responsible for saving the current method from a debugger."
"RBCompositeVariableTransformation",""
"SerialPort","This class supports a simple interface to the serial ports of the underlying platform, if it supports serial ports. The mapping of port numbers to hardware ports is platform specific, but typically follows platform ordering conventions. For example, on the Macintosh, port 0 is the modem port and port 1 is the printer port, since in the programmers documentation these ports are referred to as ports A and B."
"ClySwitchToMethodGroupsCommand","I am a command to switch full browser to the method group mode.In that state browser shows method tags (protocol) and other virtual groups"
"ClySwitchClassMetaLevelCommand","I am a base class for the commands which switch the full browser meta level.Full browser can show instance side or class side of selected classes.My subclasses define target meta level in following method: - metaLevelScopeIt should return ClyInstanceSideScope or ClyClassSideScope.Also I am annotated with toolbar activation strategy. So my subclasses will be shown in the browser toolbar as radio buttons.And they should implement #toolbarOrder method"
"MCFileTreePackageStructureStWriter","Writer for a package structure"
"DAMessageSendNode","I'm a tree node representing a specific message send in the package under analysis."
"FLCompiledMethodSerializationTest",""
"RubCodeSizeFeedback","I represent the colored feedback to alert a too long method"
"IceAttachedSingleVersionWorkingCopy","I am a working copy whose packages were all loaded from the same single commit."
"GLMDropDownListPresentation","A GLMDropDownListPresentation is takes a list of objects and displays them in a drop down view.For an example see GLMBasicExamples>>#dropDownList"
"SpecStubTreeAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"FLBitsObjectCluster","I have the common behavior for generic storing and loading variable bits objects."
"ReProperMethodProtocolNameRuleForConverting","Rule to favour 'converting' method protocol over similar ones (like 'conversion' or other)"
"GLMButtonModel",""
"ClassTagRemoved","I am announced when existing class tag is removed from package"
"IceTipURLLabelMorph",""
"GLMPopupBrick","I am a popup with an action button hint text"
"CollectionValueHolderTest","Unit tests for collection value holders"
"RGGlobalDefinitionTest","SUnit tests for global definitions (pools, global variables)"
"GLMMorphicFTRenderer","I am an abstract class that define the way to render a FastTable related presentation.Description--------------------I manage a FastTable dataSource and a FastTable morph. I define how to build and render them. I try to manage the maximum of the rendering and I let my subclasses define some specialities. My subclasses are use by a FastTable related presentation as GLMFastListPresentation or GLMFastTreePresentation. I use a FTTableMorph to manage the rendering and a subclass of FTDataSource to manage the data. Public API and Key Messages--------------------- #render: aPresentation 		This method is the main method of the class It allow to render myself on the presentation.		My subclasses should manage: - #createDataSourceFrom: aPresentation 		This method have to return  a new dataSource that match the presentation.		- #specificTableMorphInitializiation and #specificDataSourceInitializiation 		are two methods  my subclasses can override to add functionalites to the FastTable.Internal Representation and Key Implementation Points.--------------------    Instance Variables	tableModel:		Is a DataSource for Glamour that will hold the data of the presentation.	tableMorph:		Is a FastTableMorph use to display the presentation."
"MenuItemMorph","I represent an item in a menu.Instance variables:	isEnabled 	<Boolean>	True if the menu item can be executed.	subMenu 	<MenuMorph | nil>	The submenu to activate automatically when the user mouses over the item.	isSelected 	<Boolean>	True if the item is currently selected.	target 		<Object>		The target of the associated action.	selector 		<Symbol>	The associated action.	arguments 	<Array>		The arguments for the associated action.	icon		<Form | nil>	An optional icon form to be displayed to my left."
"ZnHttpSaveContentsToFile","I am ZnHttpSaveContentsToFile.I am a ZnUrlOperation.I implement the #saveContentsToFile: URL operation for HTTP(S) urls, which downloads the url resource to a file.  'http://zn.stfx.eu/zn/numbers.txt' asZnUrl saveContentsToFile: Path * 'numbers.txt'.Part of Zinc HTTP Components."
"TextSelectionColor","I represent a text selection attribute that can be added to a text for a text emphazing (text color). I have a color block (colorBlock) which is evaluated in order to get the text color. I have three instances, one for the primary selection and the two others for the secondary selection and the find replace selection. PrimarySelection is used in TextEditor>>#storeSelectionInParagraph in order to emphasize the selection text if the selection text color setting is not nil.SecondarySelection and FindReplaceSelection are manage by MultiNewParagraph if secondary selection text and find replace selection text colors are not nil.Instance Variables	colorBlock:		<Block>colorBlock	- The block which is evaluated in order to get the text color"
"GLMPagerBarBrick",""
"CmdContextMenuActivation","I describe how access and execute commands from context menu items.Add me to commands using:	YourCommand>>yourApplicationContextMenuActivation		<classAnnotation>		^CmdContextMenuCommandActivation byRootGroupItemFor:  YourAppContextIt will add command to the root of context menu. There are a couple of methods to specify menu group and order:- byRootGroupItemOrder: aNumber for: YourAppContext- byItemOf: YourMenuGroupClass for: YourAppContext- byItemOf: YourMenuGroupClass order: aNumber for: YourAppContextLarger order puts command to the end of menu.Application which wants menu based on commands should create current application context instance and use my class side method to build menu:	CmdContextMenuCommandActivation buildMenuInContext:  anYourAppContextDuring full menu building my instances build menu items. They delegate building to underlying command instance:	command fillContextMenu: aMenu using: aCommandActivatorCommands  can override this method to build something specific but by default they just build menu item morph with label and icon. To parametrize this default behaviour commands can define two methods:- defaultMenuItemName - setUpIconForMenuItem:  Look also at my superclass CmdMenuCommandActivator comment for more details"
"SpecStubMenuView","Only stub object, no real view is displayed."
"NECTypedModelTest",""
"PharoShortcuts","I am a class defining the current shortcuts of the system. My main purpose is to avoid the duplication of shortcut definition amongst basic tools and to allow to change the shortcuts from a single place.Users may query me to know the key combinations used to accept or cancel an action, browse or inspect an object.EXAMPLESPharoShortcuts current browseShortcut => Cmd-BATTENTION - I'm not still finished. My #current method returns always a new instance of myself instead of a configured one.NEXT Steps: Allow one to configure the shortcuts and to define several shortcut configurations via settings."
"OSTouchThreeFingersSwipeEndEvent","Three fingers finished to swipe"
"GTSpotterTest",""
"ClyTextEditingMode","I am used to override standard text editor operations in Calypso way.Actual logic is in ClyTextEditor. I am another helper class which allows hook into the text morph.Internal Representation and Key Implementation Points.    Instance Variables	browserTool:		<ClyTextEditorTool>	isForScripting:		<Boolean>"
"TonelShouldIgnore","I'm a notification to say tonel writer that he should ignore a section. This typically happens on a MCClassTraitDefinition, because it will be managed on MCTraitDefinition.(see TonelWriter>>typeOf:)"
"HistoryNodeTest","SUnit tests for HistoryNode"
"ClyClassScriptEnvironmentPlugin","I am special plugin which decorates scripting class side methods.I use hierarchy of ClyClassScript to detect that given method provides a script"
"FTFilterFunction","I define a filter function for a table. I respond to any alphanumeric element and I add a filter box to the  owner table. In general, my entry point is through #keyStroke:, because I intend to react to keyboard inputs in the owner table.I save an initial data source if the user want to see some result already filter.I use a semaphore in order to let a delay before I filter the table. With this the user is able to type more than 1 letter before I filter./!\ To use me the data source must implement the method #newDataSourceMatching: aRegex"
"ClassMethodBrowser","A ClassMethodBrowser is a simple browser using spec and reusing MethodBrowser to browse classes>>methods>>sourceCode.self example"
"NumberTest","SUnit tests for numbers"
"DialogWindowModel","This is deprecated class because the original class DialogWindowModel was renamed to DialogWindowPresenter. You should stop to use this class and modify your code to use DialogWindowPresenter."
"FFITestStructureSmallIntFloatStructure","I am a structure that in the AMD64 SystemV ABI is passed in 1 integer register, and in 1 float register."
"RBArchitectureLintRule","I represent an architectural rule.I work at the package level and check dependencies among packages."
"ClyCommitMCPackageCommand","I am a command to commit given packages.I use Iceberg if it is repository of package. Otherwise I use Komitter."
"LGit_GIT_EUSER",""
"OSWindowClipboard","This is a private class for handling clipboard text. There's no direct use of it.For setting/retrieving clipboard text, use clipboardText/clipboardText: accessors of OSWindow instances."
"ClySUnitEnvironmentPlugin","I extend items with information about contained tests.I decorate package, classes and methods with ClyTestResultProperty. Browser plugin uses it to show special icon/button and install test related commands.Also I provide failed tests group to show all such tests together.When I am activated on environment I subscribe to test history announcer. And when tests run I ask environment to process results (I wrap SUnit event with my ClyTestCaseRan)."
"ClyRegexPattern","I represent string pattern using regex expression"
"SyntaxErrorDebugger","I am a special Debugger for syntax errors encountered when filing in class descriptions from a non-interactive source such as an external file. As a StringHolder, the string to be viewed is the method code or expression containing the error.The user may fix the error and accept the method to continue the fileIn."
"ClyQueryResultMetadata","I represent metadata of query result as collection of first class properties (kind of ClyProperty).I allow annotate query result with summary information about items. For example SUnit plugin annotates method queries with information about tests.Another example: ClyAsyncQueryResult includes metadata ClyBackgroundProcessingTag which indicates that result is still in processing. To access properties use following methods: - addProperty: aProperty- getProperty: aPropertyClass- hasProperty: aPropertyClassMetadata is collected lazely when user asks it from the result: 	aQueryResult metadata Actual logic to collect metadata is implemented by environment plugins. But concrete dispatch method is choosen by query which built given result:	metadata := ClyQueryResultMetadata new.	environment pluginsDo: [:each | 		buildingQuery collectMetadataOf: self by: each	] Query sends typed message depending on items which query retrieves. For example:		ClyMethodQuery>>collectMetadataOf: aQueryResult by: anEnvironmentPlugin		anEnvironmentPlugin collectMetadataOfMethods: aQueryResultSo metadata is property of query result. But when you open browser cursor metadata is passed to the cursor instances. It is important optimization for remote scenario where result is remote proxy. In that case cursor is transferred to the client by value together with metadata. So all properties are available for the local cursor user.	Internal Representation and Key Implementation Points.    Instance Variables	properties:	<OrderedCollection of: <ClyProperty>>"
"Win32Environment","I am a specialized OSEnvironment for Windows.See my superclass to understand my common usage.# Encoding ManagementWindows hides the environment variables encoding through its API, and it's not up to the user how to encode them.Thus, I do not propose an API to specify encodings.# Implementation Details I use FFI calls to manage encodings. Pharo strings are first encoded in utf8 and used to create Win32 WideStrings, whose are used in the windows function calls.See Win32WideString"
"MetacelloScriptNotification",""
"Termcap","I provide a simple mapping from high-level commands to low-level terminal character sequences."
"WeakIdentityKeyDictionaryTest","SUnit tests for weak identity key dictionaries"
"TickSelectionListNode","A TickSelectionListNode is node for the tree used to render the tick listselected	- xxxxx"
"PSMCMergePatchMorph","Display Monticello merge patchs"
"ClyClassWithHalts","I am example class which has methods with halts"
"IceTipMetacelloRepositoryInstallBaselineCommand","I'm a command that will generate several menu entries: two for each baseline existent in repository.It will allow the install of baselines.I reuse IceTipMetacelloInstalllBaselineDefaultCommand and IceTipMetacelloInstalllBaselineGroupCommand"
"PSMCOrganizationChangeWrapper","Wrapper for changes on organization"
"ExternalChangesBrowser","I'm a simple changes browser. When the user drop a .cs or .st files and select to view them, I display a sequenceable and simple list of changes and a way to file in the code. !! Examples[[[ExternalChangesBrowser new openWithSpec.ExternalChangesBrowser openOn: Smalltalk changesFile fullName]]]"
"AthensTextComposer","Compose text"
"FT2Error","This is an Error that knows how to get the Freetype2 error code and string."
"RBSmalllintTestLocalMethodsSameThanTraitObject","This class should trigger the RBLocalMethodsSameThanTraitRule"
"ClyModifiedPackageTableDecorator","I decorate dirty packages in the table using special icon.I am active only when ClyMonticelloBrowserPlugin is installed into the browser"
"BISimpleFormatter","I'm a simple formatter that prints nodes (without using source code). I'm usefull when AST are programmatically assembled. I could be improved but the goal is to get the information is a more or less ok form."
"DockingBarMenuMorph",""
"AnnouncementMockA","This is a simple test mock."
"Unix32Platform","urce: 22651600"
"FTExampleMethodTableDataSource","I'm an example of fast table, who will use a list of methods as data source elements.self example1.self example2."
"GTFilterFileReference",""
"DAPackageCycleDetectorTest",""
"ClyBrowserQueryCursor","I organize stream access to query result represented with ClyBrowserItem instances.I can be opened on any query result:	aQueryResult openBrowserCursorFor: anObserver Or you can request me directly from query: 	aQuery openBrowserCursorFor: anObserver It executes given aQuery and cursor is opened on the result like in first case.The argument anObserver here is subscribed by result on changes. It is responsibility of anObserver to update its cache when it receives notification. Result sent #itemsChanged to it.So I am passive object. Users should react on result changes and request me for update.I can't be active and subscribe on result by myself because in remote scenario it would not work. I am supposed to be transfered by value to the client and it leads to such restrictions.So I am always created with observer which is subscribed on result changes. When users do not need cursor anymore they should close it:	aCursor close It will unsubscribe observer. I keep reference to it im my variable itemObserver.The result of #close operation is ClyClosedBrowserCursor instance. So users can replace my instance with it to indicate closed state:	cursor := cursor close.I cache part of result items and load more by demand. When user ask next item I check cache for it and if it is not in cache I load new part of items and use it as a new cache.Loaded items are always prepared. Observed query result computes properties of cached items when cache is created or updated. My cache is represented by instance of ClyBrowserQueryCache which maintains start position, cache size and cached items. When user asks me for items at given position which are not exist in cache I move cache to requested position which loads new portion of items.When user asks me to update items I retrieve new updated cache from query result. It returns new cache instance with updated items, total result size and result metadata:	aCursor updateItemCacheTogether with item cache I keep total result size and result metadata.Metadata is an instance of ClyQueryResultMetadata which represents information about result in general. Internally it is collection of properties collected by environment plugins from all result items. To access it use following methods:- getMetaProperty: aPropertyClass- hasMetaProperty: aPropertyClass- metadata All logic around stream access with cache and metadata follows one important goal: provide optimized access to remote items which was build by query in remote environment.In remote scenario cursor, cache and metadata is transfered by value to client side. But observed result is represented by proxy. Cache and metadata allow avoid communication with remote side because they include all required data to build tools to browse result items.Communication will happen only when new portion of data is needed or when observed result is changed. For UI it means that only visible part of items is loaded by tools and usually in one request.To access items one by one use following methods:	- currentItem 	- moveTo: positionNumber	- moveToStart	- moveToNext	- moveToItemWhich: conditionBlock	- nextItem. It moves cursor to next position and returns new current item	To find group of items:	- findItemsWhich: conditionBlock 	- findItemsWith: actualObjects. it returnes browser items which represent actualObjects. Result will be in same order and with same size as given actualObjects array. If some object is absent in result then it will be nil in place of it. 	- findItemsSimilarTo: sampleBrowserItems. There is criteria of similarity between two browser items. For example two items with same name are similar to each other. It is usefull for tools to restore selection when data source is changed.	There are also methods to retrieve all result items: 	- retrieveAll. It returns all items of observed result. All items will be prepared as in other requests.  Internal Representation and Key Implementation Points.    Instance Variables	cache:		<ClyBrowserQueryCache>	metadata:		<ClyQueryResultMetadata>	queryResult:		<ClyBrowserQueryResult>	position:		<SmallInteger>	itemCount: <Integer>	itemObserver: <Object>"
"RBTemporaryToInstanceVariableTest",""
"CollectVisitor","I am a visitor that collects objects from the nodes I visit. I take a block similar to those passed to Collection>>collect:. I evaluate the block with DirectoryEntries for the nodes I visit, and collect the objects answered into an array.I can use any guide, and the objects in the array I produce will reflect the order imposed by the guide."
"OCLiteralVariable","I am a global, pool, or class variable."
"ReProperMethodProtocolNameRuleForInstanceCreation","Rule to favour 'instance creation' method protocol over similar ones (like 'instance-creation' or other)"
"MenuItemPresenter","I represent a menu item.You can also have a look at ApplicationWithToolbar for a full example of how to use them.I collaborate with MenuGroupPresenter to manage me.I provide the following variables and their accessors- name is the text I display.- icon is the text I display.- description is the text I display in my tooltip.- action is the action to perform when I am clicked.- subMenu is the submenu to display when I am clicked.Usually I do NOT have an action AND a submenu.todo- autoRefresh- enabled- fromSpec:- performMenuActionWith:- shortcut is ..., the shortcut is displayed near my name.- state"
"GLMBrowser","The Browser is one of the core components in Glamour.It contains panes and transmissions between their ports. These transformations can either be explicitely defined by the user (such as in the Tabulator) or implicitely defined (such as in the Finder).Browsers serve as composition managers. They determine when and under which conditions transmissions should be triggered and how they connect the ports of panes. In return, panes inform the browsers when event occur on their ports so that the browser can make an informed decission on what to do.A Browser is a Presentation which means that it can be nested into other browsers."
"GTPlayground","Playground is the correspondent of a classic Smalltalk Workspace. The problem with the name Workspace is that it implies that work should be carried out in this space, while this is not a best practice. Playground describes better the intention of providing a place in which we can quickly play with some code.The model behind a Playground instance is a PlayPage object.!!Use casesThe Playground can be used in two ways# As a place to construct and try out code snippets.# as an entry point into an inspection process.In both cases, the ability of diving into objects to the right is an important feature.!!Running[ [ [ 	self open. ] ] ]"
"GLMPageSwitched",""
"IceGitIndex",""
"MetacelloAllowConflictingProjectUpgrade",""
"FileStream","I'm a deprecated class. Since the version 5, Pharo provides a new file streams API that makes the old one based on classes like FileStream or MultiByteBinaryOrTextStream deprecated. Pharo 7 makes the next important steps and removes usages of the old API from the kernel.What you should remember:- use file references as entry points to file streams - DO NOT USE FileStream class- 'file.txt' asFileReference readStream and similar methods now return an instance of ZnCharacterReadStream instead of MultiByteFileStream- 'file.txt' asFileReference writeStream and similar methods now return an instance of ZnCharacterWriteStream instead of MultiByteFileStream- the new API has a more clear separation between binary and text files1. Basic FilesBy default files are binary. Not buffered.Read UTF-8 text from an existing fileObsolete code:FileStream readOnlyFileNamed: '1.txt' do: [ :stream |     stream upToEnd ].New code:(File named: ‘name’) readStream.(File named: ‘name’) readStreamDo: [ :stream | … ].'1.txt' asFileReference readStreamDo: [ :stream |     stream upToEnd ].2. EncodingTo add encoding, wrap a stream with a corresponding ZnCharacterRead/WriteStream.“Reading”utf8Encoded := ZnCharacterReadStream on: aBinaryStream encoding: ‘utf8’.utf16Encoded := ZnCharacterReadStream on: aBinaryStream encoding: ‘utf16’.“Writing”utf8Encoded := ZnCharacterWriteStream on: aBinaryStream encoding: ‘utf8’.utf16Encoded := ZnCharacterWriteStream on: aBinaryStream encoding: ‘utf16’.Force creation of a new file and write a UTF-8 textObsolete code:FileStream forceNewFileNamed: '1.txt' do: [ :stream | stream nextPutAll: 'a ≠ b' ].New code:(File named: ‘name’) writeStream.(File named: ‘name’) writeStreamDo: [ :stream | … ].'1.txt' asFileReference ensureDelete;     writeStreamDo: [ :stream | stream nextPutAll: 'a ≠ b' ].Get all content of existing UTF-8 fileObsolete code:(FileStream readOnlyFileNamed: '1.txt') contentsOfEntireFile.New code:'1.txt' asFileReference readStream upToEnd.3. BufferingTo add buffering, wrap a stream with a corresponding ZnBufferedRead/WriteStream.bufferedReadStream := ZnBufferedReadStream on: aStream.bufferedWriteStream := ZnBufferedWriteStream on: aStream.It is in general better to buffer the reading on the binary file and apply the encoding on the buffer in memory than the other way around. See[file := Smalltalk sourcesFile fullName.(File named: file) readStreamDo: [ :binaryFile |(ZnCharacterReadStream on: (ZnBufferedReadStream on: binaryFile) encoding: ‘utf8’) upToEnd]] timeToRun. “0:00:00:09.288”[file := Smalltalk sourcesFile fullName.(File named: file) readStreamDo: [ :binaryFile |(ZnBufferedReadStream on: (ZnCharacterReadStream on: binaryFile encoding: ‘utf8’)) upToEnd]] timeToRun. “0:00:00:14.189”The MultiByteFileStream was buffered. If you create a stream using the expression'file.txt' asFileReference readStream.then the ZnCharacterReadStream is not created directly on top of the stream but on top of a buffered stream that uses the file stream internally.If you create a ZnCharacterReadStream directly on the file stream, then the characters from the file are read one by one which may be about ten times slower!ZnCharacterReadStream on: (File openForReadFileNamed: 'file.txt').4. File SystemBy default, file system files are buffered and utf8 encoded to keep backwards compatibility.‘name’ asFileReference readStreamDo: [ :bufferedUtf8Stream | … ].‘name’ asFileReference writeStreamDo: [ :bufferedUtf8Stream | … ].FileStream also provides access to plain binary files using the #binaryRead/WriteStream messages. Binary streams are buffered by default too.‘name’ asFileReference binaryReadStreamDo: [ :bufferedBinaryStream | … ].‘name’ asFileReference binaryWriteStreamDo: [ :bufferedBinaryStream | … ].If you want a file with another encoding (to come in the PR https://github.com/pharo-project/pharo/pull/1134), you can specify it while obtaining the stream:‘name’ asFileReference    readStreamEncoded: ‘utf16’    do: [ :bufferedUtf16Stream | … ].‘name’ asFileReference    writeStreamEncoded: ‘utf8’    do: [ :bufferedUtf16Stream | … ].Force creation of a new file and write binary data into itObsolete code:(FileStream forceNewFileNamed: '1.bin')     binary;    nextPutAll: #[1 2 3].New code:'1.bin' asFileReference ensureDelete;     binaryWriteStreamDo: [ :stream | stream nextPutAll: #[1 2 3] ].Read binary data from an existing fileObsolete code:(FileStream readOnlyFileNamed: '1.bin') binary; contentsOfEntireFile.New code:'1.bin' asFileReference binaryReadStream upToEnd.Force creation of a new file with a different encodingObsolete code:FileStream forceNewFileNamed: '2.txt' do: [ :stream |     stream converter: (TextConverter newForEncoding: 'cp-1250').    stream nextPutAll: 'Příliš žluťoučký kůň úpěl ďábelské ódy.' ].New code:('2.txt' asFileReference) ensureDelete;    writeStreamEncoded: 'cp-1250' do: [ :stream |        stream nextPutAll: 'Příliš žluťoučký kůň úpěl ďábelské ódy.' ].Read encoded text from an existing fileObsolete code:FileStream readOnlyFileNamed: '2.txt' do: [ :stream |     stream converter: (TextConverter newForEncoding: 'cp-1250').    stream upToEnd ].New code:('2.txt' asFileReference)    readStreamEncoded: 'cp-1250' do: [ :stream |        stream upToEnd ].Write a UTF-8 text to STDOUTObsolete code:FileStream stdout nextPutAll: 'a ≠ b'; lf.New code:(ZnCharacterWriteStream on: Stdio stdout)    nextPutAll: 'a ≠ b'; lf;    flush.Write CP-1250 encoded text to STDOUTObsolete code:FileStream stdout     converter: (TextConverter newForEncoding: 'cp-1250');    nextPutAll: 'Příliš žluťoučký kůň úpěl ďábelské ódy.'; lf.New code:(ZnCharacterWriteStream on: Stdio stdout encoding: 'cp1250')    nextPutAll: 'Příliš žluťoučký kůň úpěl ďábelské ódy.'; lf;    flush.Read a UTF-8 text from STDINCAUTION: Following code will stop your VM until an input on STDIN will be provided!Obsolete code:FileStream stdin upTo: Character lf.New code:(ZnCharacterReadStream on: Stdio stdin) upTo: Character lf.Write binary data to STDOUTobsolete codeFileStream stdout     binary    nextPutAll: #[80 104 97 114 111 10 ].New code:Stdio stdout     nextPutAll: #[80 104 97 114 111 10 ].Read binary data from STDINCAUTION: Following code will stop your VM until an input on STDIN will be provided!Obsolete code:FileStream stdin binary upTo: 10.New code:Stdio stdin upTo: 10.Positionable streamsThe message #position: always works on the binary level, not on the character level.'1.txt' asFileReference readStreamDo: [ :stream |     stream position: 4.    stream upToEnd ].This will lead to an error (ZnInvalidUTF8: Illegal leading byte for UTF-8 encoding) in case of the file created above because we set the position into the middle of a UTF-8 encoded character. To be safe, you need to read the file from the beginning.'1.txt' asFileReference readStreamDo: [ :stream |    3 timesRepeat: [ stream next ].    stream upToEnd.].5. Line Ending ConventionsIf you want to write files following a specific line ending convention, use the ZnNewLineWriterStream.This stream decorator will transform any line ending (cr, lf, crlf) into a defined line ending.By default, it chooses the platform line ending convention.lineWriter := ZnNewLineWriterStream on: aStream.If you want to choose another line ending convention you can do:lineWriter forCr.lineWriter forLf.lineWriter forCrLf.lineWriter forPlatformLineEnding.-------------------------------------------Old comment: I represent a Stream that accesses a FilePage from a File. One use for my instance is to access larger ""virtual Strings"" than can be stored contiguously in main memory. I restrict the objects stored and retrieved to be Integers or Characters. An end of file pointer terminates reading; it can be extended by writing past it, or the file can be explicitly truncated.	To use the file system for most applications, you typically create a FileStream. This is done by sending a message to a FileDirectory (file:, oldFile:, newFile:, rename:newName:) which creates an instance of me. Accesses to the file are then done via my instance.*** On DOS, files cannot be shortened!  ***  To overwrite a file with a shorter one, first delete the old file (FileDirectory deleteFilePath: 'Hard Disk:aFolder:dataFolder:foo') or (aFileDirectory deleteFileNamed: 'foo').  Then write your new shorter version."
"FFITypeArrayType","I define the type for FFITypeArray objects."
"RBOnlyReadOrWrittenTemporaryRule","Checks that all temporary variables are both read and written. If an temporary variable is only read, you can replace all of the reads with nil, since it couldn''t have been assigned a value. If the variable is only written, then we don''t need to store the result since we never use it."
"RBGuardingClauseRule","Checks for ifTrue: or ifFalse: conditions at end of methods that have two or more statements inside their blocks. Such code might better represent the true meaning of the code if they returned self instead."
"PluggableThreePhaseButtonMorph","A PluggableThreePhaseButtonMorph is an extesion of ThreePhaseButtonMorph to make it pluggableThen a model can be defined, and queried for state, on image, off image and pressed image."
"ClassEyeElement","I am an eye element for the class of an inspected element."
"ClyTraitChild1",""
"FLClassNotFound","I represent an error produced during materialization when a serialized class or trait name doesn't exist."
"IceCommitish","I represent a repository commitish, in other words, an object that is or could be used as a commit.I am an abstract class presenting the main API of my subclasses.My main actions are - checkout: load all code of a commit into the working copy, and set itself as HEAD.     aCommitish checkout. - checkoutPackageNamed: load the code of a package into the working copy, without setting HEAD.     aCommitish checkoutPackageNamed: aPackageNameString. - merge: merge myself in the working copy     aCommitish merge.- switch: set myself as HEAD    aCommitish switch.I can also be queried for packages, ancestry and to make diffs to another commitishs: aCommitish packageNames. aCommitish diffTo: anotherCommitish. aCommitish commits. aCommitish newCommitWalk."
"MetacelloUseUpgradeError",""
"AssemblyManifest","I store meta-data for a package assembly. I'm the common superclass of all package assemblies."
"GLMUpdateAction","GLMUpdateAction is used for controlling the updating of a presentation when an announcement. is sent by the announcerObjects.Instance Variables:	condition	<Boolean>	presentation	<GLMPresentation>	announcement	<Announcement>	announcerObjects	<(Collection of: Objects)>	transformation	<BlockClosure>"
"MetacelloMCProjectSpec",""
"STONLargeWriteReadTests","STONLargeWriteReadTests test the optimalizations for large structures."
"RBFloatEqualityComparisonRule","Floating point types are imprecise. Using the operators = or ~= might not yield the expected result due to internal rounding differences."
"FFIMethodRegistry","I keep a  registry of FFI prepared methods. Registry is used to know exactly which methods are executing FFI-NB calls and then which ones need to be recompiled when a platform has change."
"MCOldDataStreamExtensions","This is an extension class for the MCDataStream, it should only used if you need backward compatibility. But we have tested that is only needed because is ""copy-pasted"" code. MC is not using at all the defined types id. This package is unloadeable."
"IceTipLinkFilterFunction",""
"CharacterScanner","A CharacterScanner holds the state associated with scanning text. Subclasses scan characters for specified purposes, such as computing a CharacterBlock or placing characters into Forms.Instance Variables	alignment:		<Integer>	destX:		<Number>	destY:		<Number>	emphasisCode:		<Object>	font:		<AbstractFont>	indentationLevel:		<Integer>	kern:		<Number>	lastIndex:		<Integer>	leftMargin:		<Number>	line:		<TextLine>	map:		<Array>	pendingKernX:		<Number>	rightMargin:		<Number>	runStopIndex:		<Integer>	spaceCount:		<Integer>	spaceWidth:		<Number>	stopConditions:		<Array>	text:		<Text>	textStyle:		<TextStyle>	wantsColumnBreaks:		<Boolean>	xTable:		<Array>alignment	- an Integer encoding the alignment of textdestX	- horizontal position for next character (distance from left of composition area)destY	- vertical position for next character (distance from top of composition area)emphasisCode	- an Integer encoding the current text emphasis to use (bold, italic, ...)font	- the current font used for measuring/composing/displaying charactersindentationLevel	- an Integer specifying a number of leading tabs to be inserted at beginning of new lineskern	- a Number specifying additional horizontal spacing to place between characters (spacing is reduced when kern is negative)lastIndex	- the Integer index of next character to be processed in the textleftMargin	- a Number specifying the distance between left of composition zone and left of first character in the line.line	- an object holding information about the line currently being displayed (like first and last index in text).	Note: this is either a TextLine in Morphic, or TextLineInterval for ST80 compatibilitymap	- an array mapping character code to glyph position.	This is used by primitive 103 only, in case of ByteString.pendingKernX	- a Number to be added to horizontal spacing of next char if ever it is in the same font than previous one.	The inner scan loop is interrupted by a change of text run.	But some changes won't change the font, so the kerning must be remembered and applied later.rightMargin	- a Number specifying the distance between right of composition zone and right of last character in the line.runStopIndex	- the Integer index of last character in current text run.spaceCount	- the number of spaces encoutered so far in current line. This is useful for adjusting the spacing in cas of Justified alignment.spaceWidth	- the width of space character in current font.stopConditions	- an Array mapping a table of characters codes for which special actions are to be taken.	These are typically control characters like carriage return or horizontal tab.text	- the text to be measured/composed/displayedtextStyle	- an object holding a context for the text style (which set of font to use, which margins, etc...)wantsColumnBreaks	- a Boolean indicating whether some special handling for multiple columns is requested.	THIS ONLY MAKES SENSE IN CompositionScanner AND SHOULD BE MOVED TO THE SUBCLASS	xTable	- an array mapping character code to glyph x coordinate in form.	This is used by primitive 103 only, in case of ByteString.	Implementation note: accelerated Character scanning with primitive 103 requires following order for 5 first instance variables, please don't alter:destX lastIndex xTable map destY"
"HelpBrowser","A HelpBrowser is used to display a hierarchy of help topics and their contents.Instance Variables	rootTopic: 		<HelpTopic>	window:			<StandardWindow>	 	treeMorph:		<PluggableTreeMorph>	contentMorph:		<Morph>			rootTopic	- xxxxxwindow	- xxxxxtreeMorph 	- xxxxxcontentMorph 	- xxxxx"
"MCPreambleDefinition","A preamble evaluated before load"
"AbsolutePath","I represent an absolute path (a position starting from Path root)"
"TOccurrencesTest","A trait for test purposes"
"MCSaveVersionDialog","Monticello's dialog that allows the user to change the version name and to enter a message for the commit log."
"LGitWritepackFreeCallout",""
"IceTipNewRepositoryPanel","I'm a presenter to create a new repository from scratch.Usually, I'm part of an IceTipRegisterProjectPresenter.I will define location, name and source subdirectory and I will use that to create a #newRepository."
"RBLocalMethodsSameThanTraitRule","If a class has a method in its trait composition, the method should not be implemented in the class."
"ClyBrowserQueryCache","I represent the cache of browser items retrieved by query. I have start position of loaded items, actual cache size and cached items.My instances can be created using:	ClyBrowserQueryCache withSize: cacheSize.	ClyBrowserQueryCache filledBy: aBrowserQueryResult startingAt: startPosition size: cacheSizeI am used by ClyBrowserQueryCursor to cache observed items. It uses first instantiation method to prepare initial cache. It not loads any items from query result. Items are loaded explicitly by one of my methods: 	- loadItemOf: aBrowserQueryResult at: position. It checks if given position is already cached and if it is not then It loads new portion of items starting from requested position.	- loadItemsOf: aBrowserQueryResult startingWhere: conditionBlock. It asks given result to load new portion of items starting at position where conditionBlock is true. At the end method will return true if such item is found and false otherwise. If no items were found the current cached items will be not changed.	Second method is used when cursor performs full items update. In that case query result itself is asked to create full update object which includes new cache. It is important for remote scenario because in that case result is remote object and in one request it will return complete cache object including total result size, starting position and updated items.I am supposed to be used by loading new items into cache from different positions. If original result is changed completaly the new cache instance should be requested from it. For example if user removes method from class it will change total size of class methods. In that case all observing cursors should request updated information:	update := cache createFullUpdateOf: aBrowserQueryResult.	updatedCache := update itemCacheIt returns new instance of cache with updated items and total result size. In remote scenario it will return all information in one request.	I provide few methods to simplify access to my cached items: 	- itemAt: globalPosition. It returns cached item at position of underlying query result. globalPosition here is not index inside cache. It is index inside full query result. So the method computes local cache position and if cache has no such item then error is signalled.	- findItemsWith: actualObjects forAbsentDo: absentBlock. it returns items which represent actualObjects. If there is no item for some of given objects method uses absentBlock result.	- findItemWhich: blockCondition ifExists: presentBlock. It finds item in cache which satisfies given condition. And if item exists then presentBlock is evaluated with it.	My cached items are always prepared ClyBrowserItem instances. All their properties are precomputed by plugins and ready to use. It is logic of browser query result to prepare items requested by user. Which means for the browser that only visible items collect properties.Internal Representation and Key Implementation Points.    Instance Variables	items:		<SequenceableCollection of<ClyBrowserItem>>	sizeLimit:		<Integer>	startPosition:		<Integer>"
"GLMMorphicLabelRenderer",""
"GLMMorphicPaneWithoutTitleRenderer",""
"GLMFastListDataSource","I'm a model datasource to handle glamour fast list presentations.Description --------------------My basics functionnalities works as in my superclass but I do not get my data at my creation. Instead I ask to my Glamour presentation to get them.I work with a GLMFastListPresentation and a GLMMorphicFastListRenderer. Internal Representation and Key Implementation Points.--------------------    Instance Variables	announcer:		This is an announcer use to work with Glamour workflow. 	glamourPresentation:		This is a glamour presentation use to get some informations as the data manage by myself.	tagsToFilterBy:		This is a list of filtering tags for the dasaSource."
"MessageNotUnderstood","This exception is provided to support Object>>doesNotUnderstand:."
"PostorderGuideTest","SUnit tests for class PostorderGuide"
"StartupPreferencesHandler","I manage the links of the chain of responsibilites to retrieve the good preference file."
"OSTouchOneDirectionGestureDetector","I detect gestures which needs all fingers to go on the same direction"
"OCArrayLiteralTest",""
"RenrakuBaseTestCase","I provide a testing package which is destroyed later"
"ClyClassInitializationScript","I represent class side method #initialize"
"IRFix","Fix the IR nodes.Transforms:store, pop => popIntosome returns => quick returns"
"WorkspaceTest","SUnit tests for Workspace"
"AbstractFormButtonPresenter","AbstractFormButtonPresenter is an abstract class for button of form (like radiobuttons or checkbox).See AbstractWidgetPresenterself exampleI provide the following variables and their accessors- activationAction and desactivationAction are actions to perform when I am activeted / desactivated.- label is the text displayed near the box.- state is a boolean representing if I am activated, it is false by defaultI provide the following methods- click to simulate a click on me.- toggleState to reverse my state."
"IceTipGitProviderRepositoryPanel",""
"RubEncryptedDisplayScanner",""
"EpLogBrowserOperationVisitor","I am an abstract superclass useful for visitors of EpLogBrowserOperation."
"SettingRegexpFilter","A SettingRegexpFilter is SettingFilter which makes use of a regular expression in order to keep or not a SettingHandler.Instance Variables	regexp:		<String>regexp	- a regular expression string"
"IncrementalSliderMorph",""
"GLMListPresentationTest",""
"ClyUnknownQueryTest",""
"RubEditingMode","I am an abstract class to choose the editing mode of the text area "
"FTSimpleDataSource","I'm a simple datasource and just implement a direct-to-table provision of my elements.  I can work with the default implementation of FTTableMorph. Users might want to subclass me to have better options."
"MFClassB","I'm a dummy class for test purposes  "
"FLMaterialization","I implement the algorithm for materializing an object graph on a stream. FLMaterializer known how to build instances of me."
"RPackageAnnouncement","Common superclass for package related announcements"
"DiskStore","I am an abstract superclass for disk store implementations. My subclasses provide access to the actual data storage of a particular kind of filesystem. "
"LabelledDropList","I am a LabelledContainer specialized to manage a DropListPresenter.See LabelledContainerself exampleI provide the accessor dropList to be more intuitive than subwidget.I provide shortcuts for the most common methods of the droplist api to avoid the use of the DoesNotUnderstand or the writing of long chain of accessors."
"RubTextSegmentMorph",""
"SDL_Rect","SDL2 library structure"
"SimplestPaginatedClassListExample","Example for a paginated class list"
"TonelParserTest",""
"RxsLookaround","I lookaround is used for lookaheads and lookbehinds. They are used to check if the input matches a certain subexpression without consuming any characters (e.g. not advancing the match position).Lookarounds can be positive or negative. If they are positive the condition fails if the subexpression fails, if they are negative it is inverse."
"RBAddClassTraitChange","I am a refactoring change for a class trait  addition, the meta side of a trait definition."
"MetacelloPreLoadDirective",""
"GLMMorphicValidatorRenderer",""
"RBRemoveAssignmentTransformation","I am responsible for removing an assignment statement inside a method. In this implementation, the variable name and the expression value must be described separately.Usage:| transformation |transformation := (RBRemoveAssignmentTransformation				variable: 'variable'				value: '1 asString'				inMethod: #methodBefore				inClass: #RBRemoveAssignmentTransformationTest)				transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- there is an assignment to the given variable.Observations about the transformation:-  If the method has more than one assignment to the given variable, the transformation will remove the assignment that is more similar to the specified value, in terms of AST nodes."
"ProtocolAdded","This class is not used, but should be used when we hook into the addition and removal of protocols. Right now, we only get ClassReorganizedAnnouncement"
"DirectoryIsNotEmpty","I am raised on an attempt to delete a directory when is not empty."
"LargePositiveInteger","I represent positive integers of more than 30 bits (ie, >= 1073741824).  These values are beyond the range of SmallInteger, and are encoded here as an array of 8-bit digits.  Care must be taken, when new values are computed, that any result that COULD BE a SmallInteger IS a SmallInteger (see normalize).Note that the bit manipulation primitives, bitAnd:, bitShift:, etc., = and ~= run without failure (and therefore fast) if the value fits in 32 bits.  This is a great help to the simulator."
"PluggableTabButtonMorph","This is a specialized pluggable button morph that is meant to represent a tab in a set of tabs arranged horizontally.  Each tab will overlap slightly when drawn.  All but one tab will be drawn in left to right order in the specified color, but lighter.  The active tab will be drawn last in the full color and slightly taller to indicate that it is selected.  Clicking the active tab has no effect but clicking any other tab will change the active tab to the clicked tab.This morph does not itself accept any events.  The parent tab set will grab the mouse clicks and handle notifying the appropriate tabs that they have been activated or deactivated.There is a single selector which provides the text for the button label and affects the width of the tab.  When the width changes the tab will inform its parent that it has changed and that the layout needs to be updated.  The model for the text selector of course should be the client for the tab set.The button label can be a String, Text, or Morph.  Texts work better than plain Strings."
"NewValueHolderTest","Unit tests for new ValueHolder"
"ManifestDeprecatedFileStream","Deprecated package including the old file stream implementations"
"FLDecoder","I am an abstraction used by the materialization algorithm to decode the graph from a stream."
"ClyQuery","I am a root of hierarchy of queries.My subclasses implement specific logic how to retrieve particular objects from given environment scope. Any query should be created with scope:	query := ClyAllMethods from: scope	And to create scope instance you need some navigation environment. For example to query Smalltalk image there is global #currentImage environment: 	scope := ClyClassScope of: Object in: ClyNavigationEnvironment currentImage.	When query instance is created you can simply execute it: 	result := query execute.	The result of any query is a kind of ClyQueryResult.By default it is always ClyRawQueryResult which do not apply any formatting or transformation on retrieved items.The required result is a parameter of any query, the variable #requiredResult. Responsibility of result is to format or transform items retrieved by query. For example there are ClySortedQueryResult which sort items using given sort funciton.The value of requiredResult variable is used as prototype to create actual result instances. During execution the query creates it using: 	actualResult := requiredResult prepareNewFor: aQuery in: environment	You can specify requird result when you create query instances. For example: 	ClyAllClassQuery from: packageScope as: ClySubclassHierarchy new asQueryResult.	My subclasses provide various constructors to specify such parameters.	Any query instance can be converted to query with new required result: 	aQuery withResult: ClySpecialQueryResult new	There are other converting methods which are supported by any kind of queries: - withScope: aScope, it returnes similar query but with different scope- withScopeOf: newBasisObjects, it returns similar query with scope of different basis- restrictedByScope: aScope, it returnes similar query with similar scope restricted by basis of given scope.- filtereBy: anItemFilter, it returns wrapper query which filters original query result using given filterMy subclasses must implement several methods: 	- buildResult: aQueryResult It is the method where query retrieves items from the scope and fill given result with them. Look at implementors.- checkEmptyResultIt checks that result will be empty without full execution.-isResult: aQueryResult affectedBy: aSystemAnnouncementAny query can be affected by system changes. Subclasses should decide what changes can affect them.- retrivesItem: anObjectSubclasses should check that given item can be retrieved. This check should not depends on query scope.- retrivesItemOfType: aClassSubclasses should check what kind of items they retrieve.- executesQuery: aTypedQueryClassSubclasses should check that they in fact executes given query class. For example composite query will ask subqueries for this question. But typed queries will use simple isKindOf: check.- withScope: aScope Subclasses should implement converting to the similar query from new given scope.- withScopeOf: newBasisObjects Subclasses should implement converting to the similar query from the similar scope of new given basis. - #unionWith: typedQueries as: aQueryResultSubclasses should implement converting to composite query union given collection of subqueries.- #, anotherQuery Subclasses should implement union with another query.-collectMetadataOf: aQueryResult by: anEnvironmentPluginSubclasses should dispatch metadata collection to the given environment plugin.Also there is special ClyUnionQuery class which requires additional method to be implemented: - mergeOwnInstances: queriesIt should merge similar query instances. Idea to reduce subqueries count in union query. Subclasses should produce single query with merged collection of parameters. The argument is always collection of receiver instances.Queries should define user friendly #description. I provide very general implementation based on class name. Look at implementors for examples.Navigation environment caches my instances and their results. It requires correct implementation of equality and hashing.Some queries include various state which can be initialized at different time. It is important that instance will be not modified after execution because instead it can affect hash and equality functions which are used by cache. For this reason I implement special method #fixStateBeforeExecution which marks the instance and related state (the scope for example) as read only objects (#beReadOnlyObject). So after execution my instances became immutable.And according to this logic I provide special hook #prepareStateBeforeExecution to prepare complete state of query instance before execution. It allows initialize lazy variables before making instance immutable.			The Calypso-Browser package provide UI widget to browse query results. For this purpose I provide helper method to open browser cursor:	aQuery openBrowserCursorFor: anItemObserverIt is shortcut method to execute query and open cursor on result. So read details in ClyQueryResult comments. Internal Representation and Key Implementation Points.    Instance Variables	requestedResult:		<ClyQueryResult>	scope:		<ClyScope>"
"GTPlayBook","This class holds the pages that are loaded in the image.At class initialization time, it loads pages from the cacheDirectory and then maintains the pages in memory."
"JobEnd","A JobChange is an announcement for a job end.A JobChange is an announcement for a job change. To get notifySystemAnnouncer uniqueInstance 	on: JobEnd send: #XXX to: whoever."
"GTSpotterProfiler",""
"FuelOutStackDebugAction","A FuelOutStackDebugAction is	a debugging action that serialize a portion of the current stack trace using fuel."
"MetacelloProjectSpecLoadedNotification","**MetacelloLoadProjectSpecVersionNotification** is signalled to indicate that the given project spec was loaded into the image."
"ClySubclassHierarchy","I represent hierarchy of classes where roots are all common superclasses and children of every class are its subclasses.In addition I provide default hierarchy for variables and for method visibility.Variable hierarchy order them by relation between defining classes. I keep default hierarchy in class side variable #hierarchyForVariables.You can invert it using settings or just by method call: 	ClySubclassHierarchy invertVariableHierarchy.	The method visibility hierarchy is used to represent inherited classes in full browser when you expand first item in third pane. I manage default hierarchy in variable #hierarchyForMethodVisibility.You can invert it using settings or just by method call: 	ClySubclassHierarchy invertMethodVisibilityHierarchy"
"Warning","A Warning is a Notification which by default should be brought to the attention of the user."
"ClyRemoveExecutionCounterCommand","I am a command to remove execution counters from given method of node"
"HiRuler","I represent a ruler of nodes with links."
"SettingsStonWriterTest","A SettingsStonWriterTest is a test class for testing the behavior of SettingsStonWriter"
"GTPrintSelectionDebugAction","This action is responsible for printing a selected piece of code from the code pane of the debugger."
"BitBltClipBugsTest","SUnit tests for BitBlt clipping bugs"
"OrderedIdentityDictionaryTest","SUnit tests for OrderedIdentityDictionary"
"FFICallback","I define a callback for an external function call.I allow blocks to be evaluated when an external block funtion needs it. 	cb := FFICallback			signature:  #(int (const void *a, const void *b))			block: [ :arg1 :arg2 | ((arg1 doubleAt: 1) - (arg2 doubleAt: 1)) sign].argument types are calculated and converted using same parsing logic than FFICallout"
"PharoTutorialTestNavigation","SUnit tests for tutorial navigation"
"GTMoldableDebugger","I provide the basic functionality needed to create new debuggers. Subclasses should override the following methods:	debuggerStructureIn: -> provides the structure of the debugger	debuggerTransmissionsIn: -> creates transmissions between the widgets of a debuggers	selectedContext "
"IceGitHubGenericError","I'm an error that happens when something went wrong on GitHub API operations."
"ZnClient","I am ZnClient, an object to build, execute and process HTTP client requests.I have a rich protocol to construct requests and to access responses.I have various error handling options.I can reuse an existing connection to a specific host:port.I handle sessions, cookies, redirects and authentication.I have many options (settings) with sensible defaults.Simplest possible invocation:	ZnClient new		get: 'http://zn.stfx.eu/zn/numbers.txt'.	Using some features to make a better HTTP request:	ZnClient new		systemPolicy;		accept: ZnMimeType textPlain;		http;		host: 'zn.stfx.eu';		path: 'zn/numbers.txt';		contentReader: [ :entity | entity contents lines collect: [ :each | each asNumber ] ];		ifFail: [ :exception | self inform: 'I am sorry: ', exception printString ];		get.Part of Zinc HTTP Components."
"GLMStacker","A GLMStacker is an explicit browser that allows us to stack panes on top of each other and typically show them as tabs."
"LGitCredentialsSSH","I'm a set of credentials who asks public/private keys from from files (in case you need something different than what is answered by ssh-agent, provided by LGitCredentialsSSHAgent)"
"BaseAnnotationUserExample",""
"CharacterTest","This is the unit test for the class Character. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"ClyTaggedMethodsQueryTest",""
"StoredSetting","I represent a part of SettingNode that can be stored to a preference file.Responsibility: I keep SettingNode's stored value and I know to which SettingNode I belong.Collaborators:  - SystemSettings manages all my instances, stores, load, and gives an appropriate stored value for any SettingNode. - StoredSettingBuilder creates instances of me. - I represent stored value of #realValue of a SettingNode object.Public API and Key Messages- realValue returns SettingNode's stored value.- isForSettingNode: returns true if my instance belongs to a given SettingNode. Internal Representation and Key Implementation Points.    Instance Variables	methodClass:		<Class>	selector:			<Symbol>	realValue:		<Object>"
"IceRepositoryCreated","I announce when a repository has been created."
"EyeMethodContextInspector","I am an eye inspector specified for MethodContext"
"ReCritiqueEvent","A Renraku critic event about an entity"
"Win32WideString","I represent a Win32 wide string, supporting non-ascii characters.I manage the conversion between Pharo strings and Windows strings.(Win32String fromString: 'âùö') asString = 'âùö'! Implementation DetailsI'm on purpose a subclass of ExternalObject and not FFIExternalObject.The rationale is that the kernel should not be tied to UFFI (which depends on the compiler) to do simple ffi calls. Because of this I implement on #handle, #handle: and #asExternalTypeOn: to be compatible with UFFI external structures."
"ClassOrganizationTest","SUnit tests for class organization"
"IceTipTreeTag",""
"ClySuperclassScopeTest",""
"KMShortcutSetting","I represent a shortcut setting. I relate a keymap with its default shortcut and its current shortcut, so it can be mutated."
"GLMLiveLabelBrick","A GLMLiveLabelBrick is simple extended label brick that updates text every world step. Text logic can be set by sending textLogic: message to me.Instance Variables	textLogic:		<BlockClosure>textLogic	- defines text updating logic"
"FFIInt64","I'm an signed int type (64bits)I map to a longlong type. "
"SpecStubTextInputFieldView","Only stub object, no real view is displayed."
"ClyWrapQueryTestCase",""
"MalDijkstraNode",""
"TaAbstractComposition","I represent a trait composition.All the trait compositions are represented by operations. My subclasses are the possible operations. I know how to resolve the methods and slots included in a trait or traited class.Also I and my subclasses control how the new methods are compiled."
"IRReturn","Instruction ""returnTop"""
"GTPlaygroundPlayPagesList",""
"TestInWorldMorph","Helper class for MorphTest"
"ClyRunCoveringTestMethodsCommand","I am a command to run all covering tests of selected methods"
"GLMVariableBindingsChanged","I am event indicating to the renderer to update its variable bindings."
"RBReturnInEnsureRule","Checks for return statements within ensure: blocks that can have unintended side-effects."
"SDL_GLContext","I represent a handle of GL rendering context, coming from SDL2 library"
"GoferOperationTest","SUnit tests for Gofer operations"
"LabelledSliderInputTest",""
"ClySortItemGroupFunctionTest",""
"FLSimpleCollectionCluster","A FLSimpleCollectionCluster is a special optional cluster that rather than using the default (variable object) serialization, uses #do: to iterate objects and #add: during materialization. So far we use it for Set, IdentitySet and OrderedCollection."
"AthensBalloonEngine","- balloon engine using only first 4 variables of receiver instance: - work buffer - span - bitBlt (Bitblt object) - forms"
"IceUrlBuilder",""
"GZipReadStream","gzip is an integral part of the VM. "
"MCReleaseTest",""
"IRBytecodeScope","I am an internal class used by the  decompiler to recreat variable information"
"MetacelloDirective",""
"FileReference","I combine a filesystem and path, which is sufficient to refer to a concrete file or directory. I provide methods for navigating my filesystem, performing filesystem operations and opening and closing files.  I am the primary mechanism for working with files and directories. | working |working := FileSystem disk workingDirectory.working files | disk |disk := FileSystem disk.disk root.                               	""a reference to the root directory""disk working.                         	""a reference to the working directory"""
"ClyOverriddenMethodChanged","I am a special kind of MethodAnnouncement which represent that overridden method changes own ""overridden status"""
"MetacelloSymbolicVersionSpec",""
"MCPseudoFileStream","A pseudo file stream which can be used for updates."
"GLMBrickPopupErrorThemer",""
"AthensBalloonGradientPaint","my subclasses used internally in balloon backend for Athens to represenet gradient paints."
"RBRemoveMethodTransformationTest",""
"OCClassScope","I include all variable enries for class, pool and global vars."
"RPackageTraitTest","SUnit tests for RPackage"
"ResolutionRequest","I represent a request for user assistance in resolving an origin. I am a resumable exception that gets raised when there is no way of automatically resolving a particular origin. "
"ManifestCollectionsStreams","All Stream hierarchy: read/write stream"
"ClyAccrossWindowNavigationState","I represent the state of the browser which spawn another browser.I am recorded as first item in navigation history of spawned browser.When I am applied to the browser I close it and activate original one using window reference. If window is closed I recreate new browser instance from scratch.I keep all original browser parameters in my variables including its own navigation history. So recreated browser instances is ready to continue go back in history. Notice that I do not keep reference to original browser. I keep reference to window. When window is closing the browser cleans references to it. So closed window do not reference browser.To create my instance use following expression: 	ClyAccrossWindowNavigationState from: aBrowser 	Internal Representation and Key Implementation Points.    Instance Variables	browserPlugins:		<Collection of<ClyBrowserPlugin>>	browserState:		<ClyBrowserState>	navigationEnvironment:		<ClyNavigationEnvironment>	navigationHistory:		<ClyNavigationHistory>	window:		<SystemWindow>	windowGroup:		<ClyGroupWindowMorph>"
"GLMBrickListModel","A GLMBrickListAdaptor is scriptable implementation of adaptor that is mostly used with list scroll brickInstance Variables	countLogic:		<Object>	morphLogic:		<Object>	origin:		<Object>countLogic	- xxxxxmorphLogic	- xxxxxorigin	- xxxxx"
"IceTipReloadPackageCommand","Command that reloads the code of an already loaded package, discarding all changes done in the meantime that were not committed."
"OSTouchRotationEvent","Superclass of all rotation events"
"RoundedBorder","Rounded corner border supporting radii of 1-4 pixels. Slower but more flexible than CornerRounder."
"ClyAllProblemMethodsTest",""
"GTSUnitDebugSession","I am a debugging session for the SUnit debugger. I extract from the execution stack various data needed by the user interface of the SUnit debugger, like the test object and method.Public API and Key Messages- process:context: does the initialization of the session- data is provided using the methods in the accessing protocol    Instance Variables	actualResult:		<Object>	assertionContext:		<Object>	expectedResult:		<Object>	testObject:		<Object>"
"OSSDL2Driver","A window driver used for running things using SDL2 library"
"RBRemoveMessageSendTransformation","I am responsible for removing a message send inside a method. In this implementation, only the selector of the message is necessary to execute this transformation.Usage:| transformation |transformation := (RBRemoveMessageSendTransformation				messageSend: #byteAt:				inMethod: #methodBefore				inClass: #RBRemoveMessageSendTransformationTest)				transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- Check whether this method ever calls the given message.Observations about the transformation:- If the method contains more than one message send like the one specified in this transformation, all of these message sends will be removed.- Removing the message send means removing the receiver, too. The only exception occurs when the receiver is another message send (e.g., in a cascade)"
"IndexedEyeElement","I am an eye element for indexable fields. (at:)"
"LGitWritingTreeFailed",""
"WelcomeHelp","I'm the help page for welcoming new users. I pass through basic concepts to getting started with Pharo."
"OmFileStore","I am a single-file store of entries. Each new entry is appended at the end. Entries are lazily read from file on demand."
"MetacelloProjectSpecLoadError",""
"AthensCairoSurfaceExamples","self example1"
"Pharo3TabPanelBorder","Specialized border for TabGroup. Does not draw border beneath the selectd tab and only draws on top."
"DAPotentialDependenciesNode","I'm a node allowing to compute and browse potential dependencies of a package, i.e. messages sent in the package but with no corresponding method in the package or in its dependencies."
"RBParseTreeSearcher","ParseTreeSearcher walks over a normal source code parse tree using the visitor pattern, and then matches these nodes against the meta-nodes using the match:inContext: methods defined for the meta-nodes.Instance Variables:	answer	<Object>	the ""answer"" that is propagated between matches	argumentSearches	<Collection of: (Association key: RBProgramNode value: BlockClosure)>	argument searches (search for the BRProgramNode and perform the BlockClosure when its found)	context	<RBSmallDictionary>	a dictionary that contains what each meta-node matches against. This could be a normal Dictionary that is created for each search, but is created once and reused (efficiency).	messages	<Collection>	the sent messages in our searches	searches	<Collection of: (Association key: RBProgramNode value: BlockClosure)>	non-argument searches (search for the BRProgramNode and perform the BlockClosure when its found)"
"RadioButtonGroupExample","A RadioButtonGroupExample is an simple example about how to use RadioButtonGroupPresenter.self example"
"IRJumpIf","Instruction ""if: boolean goto: labelNum1 otherwise: labelNum2"""
"GlobalIdentifierPersistenceChecker","I check whether a persistence should be stored. I return answer of `FileIdentifier home exists`. Such use case is important for a server deployment, where HOME directory may not exists. See https://pharo.fogbugz.com/f/cases/19944I collaborate with GlobalIdentifierPersistence that uses me for checking before any disk operation."
"STONWriteReadCommentsTests","Unit test writing and reading of comments"
"TraitBuilderEnhancer","I am here to extend the ShiftClassBuilder when creating a Trait or TraitedClass.My class side method #isApplicableFor: is responsible of detecting if we are creating a trait or a class using a trait.I create the new class using the TraitedMetaclass or MetaclassForTraits.I inject the methods from TraitedClass to the generated metaclass. Also I add all the slots and methods in the trait composition."
"LGitUpdateTipsCallback",""
"ClyFindMethodInBrowserCommand","I am a command to find method in methodView of full browser.I request user with search dialog using method view query.So dialog shows all methods from method view panel.By default I am activated by cmd+f."
"GTSpotterExceptionMock2",""
"DynamicLeftToRightRowsLayout","I am the layout for which you define the number of rows to store you presenters and set them from left to right in these rows."
"IceRemote","I represent a reference to an upstream repository, i.e. the repository to which you want to push/pull. Usually I am called a  'remote' but I could also be local. Most frequently each repository has at least one remote named 'origin'.I am abstract, my subclasses provide access to different kinds of remotes.Right now I just provide information about the different parts of the url, I could get smarter in the future.Internal Representation and Key Implementation Points.    Instance Variables	url:		<String>"
"GLMMorphicIcons",""
"SugsCreateInstanceVarAccessors","I know how to create accessors for an instance var"
"GLMTransmissionTriggered","A GLMTransmissionTriggered is announced by a browser when a transmission brokered by the browser is triggered."
"PlatformResolver","I am an abstract superclass for platform-specific resolvers."
"OSWindowFocusInEvent","I am delivered when window obtains a user input focus."
"HiSnakeLinkRenderer","I draw links with curved lines. See comment in superclass."
"ClyClassWithoutTraits",""
"RBRemoveClassTest",""
"SpecTableLayoutAdd","A SpecTableLayoutAdd represents the action to add a subwidget into a spec table layout"
"LocaleIDTest","A unit test class for class LocaleID"
"EpBehaviorCommentChange","I represent a change in the comment of a class or a trait."
"ClyAllInstanceVariablesQueryTest",""
"ImageMorph","ImageMorph is a morph that displays a picture (Form). My extent is determined by the extent of my form.Use #image: to set my picture.Structure: instance var		Type 		Description image				Form		The Form to use when drawingCode examples:	ImageMorph new openInWorld; grabFromScreen	(Form fromFileNamed: 'myGraphicsFileName') asMorph openInWorldRelationship to SketchMorph: ImageMorph should be favored over SketchMorph, a parallel, legacy class -- see the Swiki FAQ for details ( http://minnow.cc.gatech.edu/squeak/1372 ). "
"ReVarSearchSourceAnchor","Same as search string source anchor but uses specific heuristics for finding a better string based on the fact that we are looking in a class definition"
"GTSpotterExceptionHandler",""
"CriticBrowser","I display code critics, the results obtained when running a lint rule.Example: | rule env |rule :=  RBExcessiveArgumentsRule new.env := (RBPackageEnvironment packageName: 'Manifest-Core').(CriticBrowser openOnRule: rule onEnvironment: env)."
"IceTipTreeFilter","I'm a filter function to be used by subclassing and implementing #matches: method.I filter tree leafs, keeping the parent branches alive to show where selected elements come from.To work, the elements of the tree I use need to be instances of the IceTipTreeNode hierarchy."
"RBOrEnvironment","I am the combination of two RBEnvironments, a logical OR. That is: entity A is in this environment if it is in at least ONE environment I am constructed from.Do not construct instances of me directly, use method #| for two existing environments:env1 | env2 -> a RBOrEnvironment."
"ClyUndeclaredMethodGroupProviderTest",""
"ShSharedPoolChangeDetector","I know how to detect a change in the shared pools."
"GLMMorphicFinderRenderer",""
"GLMTransmissionScriptingTest",""
"PointerLayout","I am the superclass for all layouts with Slots."
"FT2Types","I am a shared pool with all the mapping to the types used from the FreeType library."
"TaAliasMethod","I aliases a method in a trait.As a result, the new trait includes both methods, the original and the newone with the new selector.I implement the #@ operator."
"ZnServerReadErrorEvent","ZnServerReadErrorEvent signals an error during the reading of a request. These errors are considered mostly benign and the connection gets closed."
"ClyIcebergShowMethodVersionCommand","I am a command to show method history available from iceberg repository.So I am only available for packages driven by Iceberg. Internal Representation and Key Implementation Points.    Instance Variables	method:		<CompiledMethod>	repository:		<IceRepository>"
"ClySwitchToScopedModeCommand",""
"SessionManagerUnregistrationTest","SUnit tests for unregistration from the Pharo session manager"
"RaisedBorder","see BorderedMorph"
"WeakKeyToCollectionDictionary","This class represents an identity dictionary with weak keys, whose values are collections. Keys not in the dictionary are mapped to the empty collection.  Conversely, if a collection becomes empty, the mapping can be removed to save time and space.  However, because this requires re-hashing, it does not pay to do this to eagerly."
"IceCloneLocationAlreadyExists",""
"RBNamespace","I am a namespace for refactoring operations.I collect changes during refactoring and provide an environment for resolving named entities likeclasses, method senders or implementors. The default environment for a namespace contains all classes in the system, but you can create an instance of me with a scoped environment to apply the refactoring operations only on entities in that environment.Resolving named entities includes classes and methods changed or added during refactoring, beforeactually applying this changes to the system. For this, I create model classes - RBClass and RBMetaclass - modeling real classes.The changes that will be applied to the system are collected as refactoring changes (RBRefactoryChange).Example: This creates a new namespace on the default environment (all system classes): model := RBNamespace onEnvironment: RBBrowserEnvironment new.This creates a Refactoring operation for adding a class, with me as the namespace model:    refactoring := RBAddClassRefactoring        model: model        addClass: #SomeClass        superclass: #Object        subclasses: {}        category: #Category.This will do a ""dry run"", only collect the changes of this refactoring:    refactoring primitiveExecute.Now can ask me for this list of changes:   model changes.this acutally gives a composite refactory change that holds a list of all single refacoring changes.Note, some of my methods for querying method senders and implementors don't work well for Trait methods, because we don't have yet modeling classes for Traits and some refactoring operations don't support refactorings on trait methods."
"CollectionArithmeticTests","Unit tests for collection arithmetic"
"ZnSimplifiedServerTransactionEvent","ZnSimplifiedServerTransactionEvent is a ZnServerLogEvent that notes the completion of a served side HTTP transaction (request/response). Only a limited number of simpler data is held. ZnServerTransactionEvent contains much more detailed data.Instance Variables	method: HTTP verb	url: ZnUrl requested	response:	numeric response code	size: number of bytes in response	duration: millisecondsZnSimplifiedServerTransactionEvent is ideal for classic HTTP logging with little overhead through its default string representation."
"IRReturnReceiver","specific node when returning self"
"IceNoCommitMessage","I indicate when a commit will be performed without a message comment.This is usually possible, but bad, very bad. Do not do it."
"GTSpotterBreadcrumbSeparatorRenderer",""
"ExternalStructure","This class provides an abstract base for all structures that can be used by external functions. ExternalStructures have two possible handle types:	- ExternalAddress		If the handle is an external address then the object described does not reside in the Smalltalk object memory.	- ByteArray		If the handle is a byte array then the object described resides in Smalltalk memory.Useful methods should be implemented by subclasses of ExternalStructure using the common ByteArray/ExternalAddress platform dependent access protocol which will transparently access the correct memory location."
"SpecStubButtonAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"CategoryRemoved","This announcement will be emited when removing a category using:=> SystemOrganizer >> removeCategory:"
"ClyClassBindingsTest",""
"LabelPresenterTest",""
"ClyBackgroundProcessingTag","I mark object that it is processed in background.I can be used to resolve item properties in background process when it is too slow.Tools can indicate it with special animation"
"ExecutionEnvironmentStub","I am stub to test ExecutionEnvironment's"
"PlainGroupboxMorph","Groupbox without title with a vertical layout. Appears in a lighter colour than the owner's pane colour."
"GrowlMorph","A GrowlMorph is a little Morph to announce event happening. Freely inspired from the MIT Snarl developed by  Tony Garnock-Jones. GrowlMorph new openInWorld.10 timesRepeat: [	(GrowlMorph openWithLabel: 'The time' contents: DateAndTime now)""		vanishDelay: 1000;		resetVanishTimer"".	World doOneCycle ].(GrowlMorph openWithLabel: 'The time' contents: DateAndTime now) 	actionBlock: [Transcript open]."
"TickingWindowModel","This is deprecated class because the original class TickingWindowModel was renamed to TickingWindowPresenter. You should stop to use this class and modify your code to use TickingWindowPresenter."
"GLMBrickLayoutTrait","I declare api and logic to layout Bricks"
"GoferLocalChanges","Handling local changes"
"ShClassChanged","When there is a change in the class structure I announce that change.I announce with a copy of the old class and the new class."
"ReVarSearchSourceAnchorTest",""
"AbstractEnumerationVisitor","I'm an abstract superclass for enumeration operations on directory entries. "
"PharoDocCommentExpression","I am represent an expression within a String (typically the contents of a RBCommentNode resp. the comment text of a method. I am used as expression or the expected expression value by a PharoDocCommentNode."
"TextKernTest","SUnit tests for class TextKern"
"FT2Version","Do not rearrange these fields!This is used to report FT2 version information. Its fields must remain unchanged, or you must change FT2Plugin>>primitiveVersion."
"FFIInt32","I'm a signed int type (32 bits)"
"NumberParsingTest","Tests to verify parsing of numbers from streams and strings.Note: ScaledDecimalTest contains related tests for parsing ScaledDecimal."
"LGit_GIT_PASSTHROUGH",""
"IceTipCreateTagPanel","I am a spec component that manages the creation of a new tag.I have a form with a label and an input, and the commitish to tag.I'm done to be embedded in a dialog, so I implement doAccept to execute my action."
"DAMessageSendDependency","I represent a potential Dependency on a Package because it implements a method called by the package under analysis but the method is not implemented in the package, neither in the static dependencies of this package (inheritence, reference, trait, extension)."
"DropListExampleTest",""
"IceTipMergePatchMorph","I redefine part of monticello's PSMCMergePatchMorph to not require to rebuild a tree but use Iceberg's one directly. I also adapt the patch morph to handle files and several packages at the same time."
"ClySwitchToInheritedTraitsCommand","I a command to show in browser a hierarchy of traits which are inherited by selected classes"
"PharoCriticRules","I hold default rules used to check quality of code that is proposed for integration into Pharo."
"GLMMorphicTabulatorRenderer",""
"RBNullFormatterTest","SUnit tests for RBNullFormatter"
"DateAndTimeDosEpochTest","SUnit test for dos epoch (see DateAndTime)"
"SlotBasicTest",""
"SugsAbstractContext","I'm the API used by smart suggestions with facilities to know the selected text, and having all the needed information for execute the commands."
"GLMErrorPopper","I am a popper that displays an error message.GLMErrorPopper simpleErrorPopper"
"FTSelectionStrategy","I define a strategy to handle selections. The sense of this class is shown in my children: I allow to handle the case of multiple and simple selection in a well designed way, instead using ifs everywhere."
"MCPatchBrowser","The Monticello patch browser"
"ClassSessionHandler","I handle a Session for a specific class, providing the API the class should implement.Handlers will be triggered by the SessionManager."
"ClyOverridingMethodsChanged","I am a special kind of MethodAnnouncement which represent that overriding methods changes the ""override status"" because the method which they override (my affected method) is changed.So I modify default MethodAnnouncement processing logic to affect overriding methods."
"ClyTraitChild3",""
"IceCheckoutDoNotLoadPackages",""
"SugsFinderContext","I know how to  extract the information needed for the suggestions from a finder UI object"
"IcePlaintextCredentials","I keep a username and a password for connecting to a repository."
"Job","A Job is a task to run and potentially notified to the user.[:job | job title: 'Let us get started'.	1 to: 10 do: [:each |		job			progress: (0.1 * each);			title: 'Youpi ', each printString.		(Delay forMilliseconds: 100) wait.		] ]  asJob run"
"RBRefactoringError","The receiver is signaled whenever a precondition of a refactoring is violated. The action block, if defined, might help the user to resolve the issue."
"SycMessageDescription","I represent message description which includes selector and argument names.In addition I keep reference to so named contextUser. It is an object which uses given message, which was used to retrieve message instance.The #contextUser is either a method or RBMessageNode.To create my instance use following expressions: 	SycMessageDescription ofMethod: Magnitude >> #between:and:.	SycMessageDescription ofMessageNode: (SycRenameMessageCommand >> #createRefactoring) ast sendNodes first.I implement suitable method for commands to request new signature: 	aMessage requestNewSignatureIt returnes new message instance.Also I provide a method to compute argument permutations comparing to another message: 	aMessage1 computeArgumentPermutationsFor: aMessage2	It is required for rename method refactoring. Internal Representation and Key Implementation Points.    Instance Variables	argumentNames:		<Array of<String>>	contextUser:		<Object>	selector:		<Symbol>"
"ClyCritiqueFixableTag","I mark critiques which can be fixed by refactoring"
"ClyToolbarMorph","I implement toobar in the browser (middle panel).I collect all commands annotated by ClyToolbarCommandActivation strategy and ask them to build toolbar items.This logic is implemented in method #updateItems. You can ask it anytime to update toolbar in the browser.It is based on Commander menu:	menu := CmdMenu activatedBy: ClyToolbarCommandActivation.But in contrast to context menu all toolbar groups inline UI items into single toolbar panel.So the menu groups in toolbar only allow to group several commands together to be close to each other. My instances are created on the browser: 	ClyToolbar of: aBrowser	 Internal Representation and Key Implementation Points.    Instance Variables	browser:		<ClyBrowser>"
"RBSharedPoolForTest",""
"ClyDesiredSelection","I represent desired selection which should be restored on different data sources.For example when in the browser user selects particular method and switches to another class then similar method (with same name) should be selected in new class automatically. I am created by ClyNavigationView when user manually selects new table items. When new data source is set to view I responsible to restore previous selection of table:	desiredSelection restoreCurrentSelection: aDataSourceSelection Inside this method I ask given selection to find similar items as mine to set them as a new selection:	aDataSourceSelection restoreDesiredSelectionWith: newItems silently: selectionIsSame.Last argument indicates that items from new data source are same as selected before. So table should not trigger selection changed event because in fact selection is still same.To achieve this logic I keep flag that I am the same as current selection from which I was created. Internal Representation and Key Implementation Points.    Instance Variables	isSameAsCurrent:		<Boolean>"
"GTSUnitExampleWithSetUpAndTearDownTest","I am not a test! I provide usage examples for the SUnit debugger."
"LGitFilemodeEnum",""
"FBDOptimizedMessagesRewriter","I am a tool that allows you to reoptimize messages into a decompiled method.I receive an AST and I replace non-optimized message nodes that have been reconstructed by the AST builder into optimized message nodes, then I return the AST.Public API : use rewriteAST: to transform it with optimized messages.example: FBDOptimizedMessagesRewriter rewriteAST: (Object >> #asString ) ast.I only rewrite nodes with ""reconstructed"" property to ensure that I reoptimize only the messages that were optimized in the non-decompiled method."
"Lesson","See class side messages #welcome, #doingVSPrinting...."
"FLPlatform",""
"IceTipWorkingCopyModel","I'm a model to for IceWorkingCopy entries."
"ManifestFileSystemPath","This package contains the path management of Pharo's FileSystem manager. It is responsible for the modelisation of absolute and relative paths in the file system.A documentation of this library is available in the Deep Into Pharo book, «Chapter 3: Files with FileSystem»."
"Generator","A Generator transforms callback interfaces into stream interfaces. The Generator class was originally written by Paolo Bonzini and inspired from functional programming languages.With basic iterators, you specify an action to be perform to elements of a collection or stream but you do not control when computation pass from one element to the next one. In addition you cannot perform a lazzy computation on potentially infinite stream of objects. Generators offer a nice solution to such problem. Generators provide a way to use blocks to define a stream of values. The return values are computed one at a time, as needed, and hence need not even be finite. A generator needs a block and will make sure that the block is executed once at a time and that the block has the control to decide when to yield computation. A generator offers an API that is compatible with the one of stream since it act as a stream of objects. A generator should be instantiated using the expression ==Generator on: [...]==. The following code creates an infinite streams of 1. [[[| g | g := Generator on: [ :gen | [ gen yield: 1 ] repeat ].g next> 1g next > 1]]]!! Behavior The generator itself is passed to the block, and as soon as a message like ==next==, ==peek==, ==atEnd== or ==peekFor:== is sent to the generator, execution of the block starts/resumes and goes on until the generator's ==yield:== method is called: then the argument of ==yield:== will be the generator's next element. If the block goes on to the end without calling ==yield:==, the generator will produce no more elements and ==atEnd== will return true.A generator is a quick way to create a stream of objects. A generator is a kind of pluggable stream, in that a user-supplied blocks defines which values are in a stream.For example, here is an empty generator and two infinite generators:[[[Generator on: [ :gen | ]Generator on: [ :gen | [ gen yield: 1 ] repeat ]]]]As a more concrete example taken from GNU Smalltalk implementation, these lines process a file and create Person objects out of the file:[[[lines := file lines.lines := lines select: [ :line | line ~ '^[A-Za-z]+ [0-9]+$' ].fields := lines collect: [ :line | line subStrings ].people := fields collect: [ :data |            Person name: data first age: data second asInteger ].]]]Let's see how to rewrite them to use a single Generator instead:[[[Generator on: [ :gen |    file linesDo: [ :line || data |        line ~ '^[A-Za-z]+ [0-9]+$' ifTrue: [            data := line subStrings.            gen yield: (Person name: data first age: data second asInteger) ] ] ].]]]As you can see, ==select:== becomes an if-statement, and the value from the final stream is yielded to the user of the generator.Generators use continuations, but they shield the users from their complexity by presenting the same simple interface as streams.Instance Variables	block:		<BlockClosure> The block associated with the generator.	continue:	<MethodContext>	The continuation to return to.	home:		<MethodContext>	The home (root) context of the activated block	next:		<Object>		The next object to return from the Generator."
"ClyClassBindings","I am posible result of class query.I convert given clases to bindings.I am used by ClyClassReferences query to adopt class queries to the variables (bindings are polymorphic to them)"
"OSKeySymbols","This pool contains all the platform independent key symbols. They are the same used by SDL2 to avoid having to perform any kind of translation."
"EyeViewHierarchyInspector","A special tree inspector that displays the submorph hierarchy of the inspected morph."
"SemanticWarningIconStyler","I'm in charge to style an ast when there are semantic warnings"
"GLMTreePresentation","A GLMTreePresentation  shows the given elements within a tree. The #children block is used to compute the children of an elements. It does not guard against infinite recursion.Instance Variables	allExpanded:		<Object>	children:		<Object>	expandLevel:		<Object>	rootsExpanded:		<Object>	tagsBlock:		<Object>	tagsFilterBlock:		<Object>allExpanded	- xxxxxchildren	- xxxxxexpandLevel	- xxxxxrootsExpanded	- xxxxxtagsBlock	- xxxxxtagsFilterBlock	- xxxxx"
"RPackageSet","I'm a set who can be instantiated by pattern matching RPackages (""name"" and ""name-*"").My purpose is to provide a bridge between monticello and system packages, to allow backward compatibility with old packaging. "
"TDictionaryAssociationAccessTest","A trait for test purposes"
"BrokenClassAnnotation","I represent broken class annotation when declaration method raises error during registry building.I include description of raisen error in my variable errorString.To debug broken annotation you can inspect all of them using:	BrokenClassMetaAnnotation registeredInstances Then ask #debug to choosen annotation:	brokenAnnotation debug.It perform declaration method which will open debugger.	My instances are created using mesage #withError:	BrokenClassAnnotation withError: anErrorI only collect description of given error to not keep garbage of failed process.	Internal Representation and Key Implementation Points.    Instance Variables	errorString:		<String>"
"ZnHtmlOutputStream","I am ZnHtmlOutputStream. I wrap another character write stream to offer a richer API for generating correct HTML markup.See https://en.wikipedia.org/wiki/HTMLMy streaming protocol contains the traditional write stream operations. These are raw and do not do any conversions/escaping.My html protocols contains a rich API for generating correct HTML. String streamContents: [ :out | | html |	html := ZnHtmlOutputStream on: out.	html html5.	html tag: #html do: [ 		html tag: #body do: [			html tag: #div class: #main do: [				html tag: #p with: 'Hello World & Universe !'.				html tag: #hr.				html 					tag: #em 					attributes: #(class big id 1 disable nil) 					with: 'The END' ] ] ] ].	ZnHtmlOutputStream streamContents: [ :html |	html page: 'Hello World' do: [ 		html tag: #div class: #main do: [			html tag: #p with: 'Hello World & Universe !' ] ] ]Part of Zinc HTTP Components."
"DAPackageUnderAnalysisNode","A PDPackageNode is used to display a package in a tree."
"CmdTextLeftBarMenuActivation","I represent special context menu of left side bar in text editors.Currently this bar is known as #textSegmentIcons ruler in the Rubric editor. It shows various iconic tips about source code. I provide context menu by cmd+click or right click on this Rubric area: I build normal context menu with commands annotated by me."
"SpecTreeNodeModel","I am a Tree node especially made for being used by the Spec framework."
"RubGetMenuPolicy","I am an abstract class to get the correct menu of a text area"
"STON","STON implements serialization and materialization using the Smalltalk Object Notation format.I am a class side facade offering a high level API to write and read objects using STON.U s a g eBasic operations  #toString:  #fromString:  STON toString: DisplayScreen boundingBox.  STON fromString:  'Rectangle{#origin:Point[0,0],#corner:Point[1920,1030]}'.  STON toString: { DateAndTime now. Float pi. 1 to: 10 by: 2. 3 days }.  STON fromString:  '[DateAndTime[''2016-03-15T13:57:59.462422+01:00''],3.141592653589793,Interval{#start:1,#stop:10,#step:2},Duration{#nanos:0,#seconds:259200}]'You can also read from or write to streams  #fromStream:  #put:onStream:There is also the option to do pretty printing (indenting, multi line output)   #toStringPretty:  #put:onStreamPretty:STON is more or less a superset of JSON and is backwards compatible with JSON while parsing, and can be compatible with it while writing. The important differences (and the whole reason why STON exists in the first place) are   - class information (except for lists (Array) and maps (Dictionary))  - proper handling of shared and circular references  - more Smalltalk like syntax (Symbols with #, single qouted Strings, nil instead of null)  - more defined special types (Date, Time, DataAndTime, ByteArray, Point)Parsing JSON is done using #fromString: or #fromStream: with the results being composed of Arrays and Dictionaries.Writing objects as JSON is done using:   #toJsonString[Pretty]:  #put:asJsonOnStream[Pretty]:Note that you can only write Arrays and Dictionaries !For a much more sophisticated JSON parser/writer implementation, have a look at NeoJSON.Like JSON, STON does not allow for comments. However, a preprocessor option can skip C style comments before parsing.I also define some contants used in the implementation: the class used as list, map and association, as well as the optional class name key (used when reading objects using an unknown class).I m p l e m e n t a t i o nThe 2 key methods are  #stonOn:  #fromSton:which work together with STONWriter and STONReader; read their class comments for all configuration options (you can use the #reader and #writer methods to avoid referring to these classes directly).Several methods are used to support and/or control the implementation  #stonName - defines the external name for a class  #stonAllInstVarNames - defines which instance variable to write  #stonContainSubObjects - shortcut looking into objects for subobjects  #stonShouldWriteNilInstVars - option to skip writing nil valued instance variablesS y n t a x	value	  primitive-value	  object-value	  reference	  nil	primitive-value	  number	  true	  false	  symbol	  string	object-value	  object	  map	  list	object	  classname map	  classname list	reference	  @ int-index-previous-object-value	map	  {}	  { members }	members	  pair	  pair , members	pair	  string : value	  symbol : value	  number : value	list	  []	  [ elements ]	elements	  value 	  value , elements	string	  ''	  ' chars '	chars	  char	  char chars	char	  any-printable-ASCII-character-	    except-'-""-or-\	  \'	  \""	  \\	  \/	  \b	  \f	  \n	  \r	  \t	  \u four-hex-digits	symbol	  # chars-limited	  # ' chars '	chars-limited	  char-limited	  char-limited chars-limited	char-limited	  a-z A-Z 0-9 - _ . /	classname	  uppercase-alpha-char alphanumeric-char	number	  int	  int frac	  int exp	  int frac exp	int	  digit	  digit1-9 digits 	  - digit	  - digit1-9 digits	frac	  . digits	exp	  e digits	digits	  digit	  digit digits	e	  e	  e+	  e-	  E	  E+	  E-"
"DockingBarMorph","I'm a kind of container which adhere to one edge of the screen. See me in action with: DockingBarMorph new 	addMorph: (SimpleButtonMorph new                                           label: 'Say hello';                                           target: [UIManager inform: 'Hello'];                                           actionSelector: #value);	addMorph: (SimpleButtonMorph new                                           label: 'Say bonjour';                                           target: [UIManager inform: 'Bonjour'];                                           actionSelector: #value);	addMorph: (SimpleButtonMorph new                                           label: 'Close';                                           target: [DockingBarMorph allInstances last delete];                                           actionSelector: #value);	adhereToBottom;	openInWorld."
"MCFileTreeStSnapshotWriter","Snapshot writer"
"ClyOpenCriticBrowserCommand","I am a command to open a critic browser on given set of packages"
"PluggableToggleButtonMorphExample","I keep some examples on how to use a PluggableToggleButtonMorph"
"IceGitUnbornBranch",""
"RPackageRegistered","I am a public announcement sent when a new RPackage is created"
"OmSessionStoreTest",""
"SystemNavigationOnNewlyCreatedEnvironmentTest","SUnit tests for SystemNavigation on newly created environments"
"RBSelfSentNotImplementedRule","This smell arises when a message is sent to self by a method,  but no class in the superclass chain implements such a message. This method sent will certainly cause a doesNotUnderstand: message when they are executed."
"HiLinkRenderer","I know how to render a ruler link in an Athens canvas.Note: an instance of me cannot be used to render in more than one canvas."
"RBCustomTransformationTest",""
"CairoUTF8ConverterTest","A CairoUTF8ConverterTest is a test class for testing the behavior of CairoUTF8Converter"
"RubEditingArea","I am the common class to use for editing text in an area"
"RPackageObsoleteTest","SUnit tests for RPackage"
"ClyHaltMethodTableDecorator","I decorate table with special icon for methods with halt or breakpoint"
"GTSpotterProcessorFilter","I am the root class for filters that decide what processors can be loaded in a step. I have no conection whatsoever with the GTFilter hierarchy.Subclasses need to implement #shouldEnableProcessorsCreateBy: to indicate whether or not a given processor should be enabled.Subclasses can return a configuration block from #configurationBlockForProcessorsCreatedBy: if they want to customize a certain processor."
"ClyDebugTestCommand","I am a command to debug selected test method.I install breakpoint to the start of method which opens debugger during following test run"
"GLMExpanderLabelNodeModel",""
"RFMessageOperation","MessageSend subclass, just here to see them all together"
"VTermOutputStyles","I am a SharedPool for the style constants used by VTermOutputDriver"
"Socket","A Socket represents a network connection point. Current sockets are designed to support the TCP/IP and UDP protocols. Sockets are the lowest level of networking object in Pharo and are not normally used directly. SocketStream is a higher level object wrapping a Socket in a stream like protocol.ProtocolClient and subclasses are in turn wrappers around a SocketStream to provide support for specific network protocols such as POP, NNTP, HTTP, and FTP."
"GTSpotterAnnouncement",""
"ZnEntityTests",""
"FLSerializationTest","Superclass for serialization tests"
"AnnouncementsHelp","This is a custom help book for the announcements framework."
"RubParagraph","I represent a paragraph of a text area"
"AbstractObjectsAsMethod",""
"LGitBlame",""
"TabLabelItem","I am a special label morph for tabs.This way I can control which of my submorphs to show according to the tab size"
"ZnUtils","I am ZnUtils holding various utilities related to HTTP handling.Part of Zinc HTTP Components."
"TickingWindowPresenter","In addition to my superclass, I provide an API to execute the #step method every #stepTime."
"MonticelloBootstrap","This class contains the required behavior to bootstrap monticello in a new image. A new image has no monticello meta-data, working copies, or whatsoever. Then, Monticello (this package) is initially loaded using an ST file in chunk format (see the CodeImporter package). Once Monticello is installed, this class is required to: - recreate the corresponding MC working copies for each package in the system - reload all methods, recreate their source code (and thus create the .changes file)I can be created from a directory using the #inDirectory: class message. e.g.,  MonticelloBootstrap inDirectory: 'test'.Then, the method #loadPackageVersion: will load a specific version, and #loadBootstrapPackages will load the packages in the correct order for the corresponding version of the bootstrap.The convenience method #bootstrapDefault will create an instance with the default parameters for bootstrap and load all bootstrap packages.  MonticelloBootstrap bootstrapDefault"
"OpenOnStringExampleTest",""
"KMPragmaKeymapBuilder","I am a singleton object, subscribed to system events, to listen to the creation of methods marked with the <keymap> and keymap:> pragmas.When I listen one of those events, I reinitialize the KMRepository default instance and reload it with all declared keymaps."
"IRSend","Instruction ""send: selector"" or ""send: selector toSuperOf: behavior"""
"CompoundTextConverterState","This represents the state of CompoundTextConverter."
"TRemoveTest","A trait for test purposes"
"MCVersionSaved","I announce that a MCVersion was saved into a MCRepository."
"LazyListMorph","The morph that displays the list in a PluggableListMorph.  It is ""lazy"" because it will only request the list items that it actually needs to display.I will cache the maximum width of my items in maxWidth to avoid this potentially expensive and frequent computation."
"NonInteractiveTranscriptTests","I am NonInteractiveTranscriptTests"
"IceTipBranchWithCommitStatusBarItem",""
"GLMBrickTabLabelThemer","I'm a style module related to tab label"
"ProgressBarMorph","Instances of this morph get used by SystemProgressMorph or a JobProgressBar to display a bar (i.e., the rectangular part of a progress bar).Here is an example of how to use it. | p |p := ProgressBarMorph from: 0 to: 200.p extent: 200@20.p openInWorld.[	(1 to: 200) do: [ :i | p value: i.  (Delay forMilliseconds: 10) wait ].	p delete ] fork| p |p := ProgressBarMorph from: 0 to: 200.p extent: 600@7.p openInWorld.[	(1 to: 200) do: [ :i | p value: i.  (Delay forMilliseconds: 5) wait ].	p delete ] fork"
"AbstractDelayTicker","I represent the interface to the VM time-base primitives for tick generation and signalling.This facilitates the DelaySchedulerXXX implementations to be independent of any particular time-based. I supply /nextTick/ to the VM and wait for /timingSemaphore/ to be signalled.I read time-base specific ticks from the VM, and scale ticks around snapshot pauses."
"LGitPathSpec","I'm a compiled pathspec (used to match)See https://libgit2.github.com/libgit2/#HEAD/type/git_pathspec"
"IceTipRepairMergeWithBranch","I will perform a switch and merge of current reference commit with the selected branch. I'm active when: 	- working copy is detached 	- repository HEAD is NOT detached"
"WindowAnnouncement","I am the base class for all WindowAnnouncementsI define the common interface for WindowAnnouncements. You can check the type of the announcement (isMoved/isScrolled ...)My subclasses implement the specific window announcements and may provide further states."
"ExternalBrowser","Browser the current image:	ExternalBrowser openOn: Smalltalk image.Browse a FileOut	| internalStream |	internalStream := (String new: 1000) writeStream.	SystemOrganization 		fileOutCategory: 'Tool-ExternalBrowser'		on: internalStream.	ExternalBrowser browseStream: internalStream contents readStream."
"DADependencyItemDiff","A PDDependencyItemDiff is a object which represent a dependent package who added/removed from an old analysis."
"LzwGifEncoder","I implement the modified Lempel-Ziv-Welch (LZW) algorithm for lossless GIF bitmap compression. My primary purpose is to encode/compress streams of bitmap bytes as specified by the GIF standard.My instances require at minimum:- A size of bytes in a row of bitmap bits for the image (#rowByteSize:)- The extent of the image being encoded (#extent:)- An array of bits in a bitmap (as bytes) for encoding (sent with #encode:)- A stream of Bytes on which to output the encoded bytes (#codeStream:)- A minimum code size as specified from GIF header information (#minimimCodeSize:)Once all of these are set, implementors simply send the #encode: message along with acollection of bitmap values as bytes that need to be encoded. Instead of responding with a collection of encoded bytes, #encode: will write to the output stream specified by #codeStream: directly.For an example of use, see GIFReadWriter >> #writeBitData:NOTE: LZW compression for GIFs is complex and the #encode: method is largely taken verbatim from Kazuki Yasumatsu's 1995 Squeak implementation (as opposed to the Decoder, which was heavily refactored for readability and comprehension). Any contributions to fleshing this out in a comprehensible way are much appreciated!See:https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welchhttps://www.w3.org/Graphics/GIF/spec-gif89a.txt"
"GLMFormatCode",""
"IceTipHistoryDiffUpdater","I represent the direction of calculus of diffs.Since orders may change for different operations, I need a different approach for each scenario."
"GlobalVariableTest",""
"ClyShowClassRefCommand","I am a command to show all class referencesTo show references I ask the browser to spawn new query browser.Internal Representation and Key Implementation Points.    Instance Variables	browser:		<ClyBrowser>"
"ClyAllMethodGroupsQuery","I am a query of all method groups from given scope.Scope should support #methodGroupsDo:. Currently it is only ClyAbstractClassScope.The scope delegates method group building to the environment plugins.It asks each plugin to collect method group providers using: 	plugin collectMethodGroupProviders And then each provider creates set of method groups using method: 	groupProvider buildGroupsFrom: aClassScopeThe scope ensures that all methods from given scope will be enumerated only once.So provider should return groups without looking into the methods of scope.Then the scope itself will check that every built group includes at least one method:	aGroup dependsOnMethod: aMethodSo scope will enumerate all available methods once and verify each group.Scope also allow static groups which do not need any method check. Provider of such groups should return true from method #isStatic: 		methodGroupProvider isStatic >>> trueLook at ClyMethodGroupProvider for more details"
"IceMetacelloLoadSessionContext","I'm a dynamic variable to keep a load session."
"ZdcOptimizedSocketStreamTests","ZdcOptimizedSocketStreamTests tests ZdcOptimizedSocketStream"
"FileListGrid","A grid for a list of files"
"RBRenrakuWrapperLintRule","I'm a wrapper of renraku rules, so they can be used in other tools that follow the RB architecture"
"ClyClassWithBreakpoints","I am example class which has methods with breakpoints"
"MCFileTreeWriter","Writer for the file tree"
"SpecSplitterVertical","A SpecSplitterVertical is the description of the addition of a vertical splitter"
"MCSubDirectoryRepository","A MCDirectoryRepository that looks in subdirectories too."
"GZipConstants","This class defines magic numbers taken from the RFC1952 GZIP file format specification version 4.3 (1996) [1].  A class imports these constants as 'class variables' by including the following in its class definition:    poolDictionaries: 'GZipConstants' A method on the class side initialises the values. [1] http://www.ietf.org/rfc/rfc1952.txt  (Section 2.3.1 Member header and trailer) -------------8<----snip--------------- As an aside the following in [GzipConstants class >> initialize] does not match the specification for bit 5 as ""reserved"".     GZipEncryptFlag := 16r20.    ""Archive is encrypted"" I did find it defined here [2] & [3] however the FAQ [4] specifically says encryption is NOT part of the standard. This constant is only used in [GzipReadStream >> on:from:to] as...     (flags anyMask: GZipEncryptFlag)         ifTrue:[^self error:'Cannot decompress encrypted stream']. So perhaps its okay to leave but maybe some slight benefit from amending the text as follows..     GZipEncryptFlag := 16r20.    ""Archive is encrypted.  Not supported. Not part of the standard.""     ifTrue:[^self error:'Cannot decompress encrypted stream. Encryption is not part of RFC1952']. It is a better presentation to a user if you can indicate that it is someone else's fault that their decompress failed, and not Pharo. [2] http://www.onicos.com/staff/iz/formats/gzip.html[3] http://research.cs.wisc.edu/wpis/examples/pcca/gzip/gzip.h[3] http://www.gzip.org/#faq15"
"FLPrimitiveCluster","I am a cluster that serializes and materializes interacting directly with the stream."
"IceTipMetacelloInstallBaselineCommand","I'm a general command to install metacello baselines."
"ClyItemNameFilter","I filter objects by name using given string filter.So I am compatible with objects which respond to the #name"
"GLMVerticalLinearLayout",""
"DAPackageRelationGraphTest",""
"FLPharoPlatform",""
"ManifestSystemModel",""
"FileSystem","I present a low-level protocol for interacting with filesystems. I hold a reference toa store (a subinstance of FileSystemStore) which takes care of the details of performing file and directory operations on the filesystem I represent. I am responsible for resolving all paths thatI pass into my store. My store acts as a factory and offers platform specific actions.FileSystem instances know two methods that return a Reference object: workingDirectory and root.FileSystem disk workingDirectoryFileSystem disk root"
"PluggableButtonMorph","A PluggableButtonMorph is a combination of an indicator for a boolean value stored in its model and an action button. The action of a button is often, but not always, to toggle the boolean value that it shows. Its pluggable selectors are:		getStateSelector		fetch a boolean value from the model		actionSelector		invoke this button's action on the model		getLabelSelector		fetch this button's lable from the model		getMenuSelector		fetch a pop-up menu for this button from the modelAny of the above selectors can be nil, meaning that the model does not supply behavior for the given action, and the default behavior should be used. For example, if getStateSelector is nil, then this button shows the state of a read-only boolean that is always false.The model informs its view(s) of changes by sending #changed: to itself with getStateSelector as a parameter. The view tells the model when the button is pressed by sending actionSelector.If the actionSelector takes one or more arguments, then the following are relevant:		arguments			A list of arguments to provide when the actionSelector is called.		argumentsProvider	The object that is sent the argumentSelector to obtain arguments, if dynamic		argumentsSelector	The message sent to the argumentProvider to obtain the arguments.Options:	askBeforeChanging		have model ask user before allowing a change that could lose edits	triggerOnMouseDown	do this button's action on mouse down (vs. up) transition	shortcutCharacter		a place to record an optional shortcut key"
"OSJoyButtonDownEvent","This event is delivered when user pressing down a joystick button."
"PNGReadWriter","I am PNGReadWriter.I am a concrete subclass of ImageReadWriter.I read and write the  Portable Network Graphics (PNG) image format.  https://en.wikipedia.org/wiki/Portable_Network_GraphicsSubmitted by Duane Maxwell"
"SpecStubContainerView","Only stub object, no real view is displayed."
"OCASTCheckerTest",""
"FLNegative24SmallIntegerCluster","A cluster of unsigned int 24bit"
"DADependencyChecker","Utility class to easily check  dependencies of packages.DADependencyChecker new dependenciesOf: #CargoPackageManager.DADependencyChecker new transitiveDependenciesOf: #'CargoPackageManager-Minimal'.DADependencyChecker new dependentsOf: #CargoPackageManager."
"RBReplaceRule","RBReplaceRule is the abstract superclass of all of the transforming rules. The rules change the source code by replacing the node that matches the rule. Subclasses implement different strategies for this replacement.Subclasses must implement the following messages:	matching		foundMatchFor:Instance Variables:	verificationBlock	<BlockClosure>	Is evaluated with the matching node. This allows for further verification of a match beyond simple tree matching."
"GoferResolvedReference","A GoferVersionReference refers to a specific version of a Monticello package in a particular repository. This class is the only one that can actually load the version, because it is the only one knowing where to find it."
"IRPushThisContext","I model push thisContext bytecode"
"IceTipReadOnlyTextMorph","I'm a read-only text morph. I catch key events and forbid them to happen. This is useful to use in components where I do not want to allow edition, but I want to allow coping anyway."
"AthensPath","This class represents an interface, which should be supported by all paths (special kind of shape) used for drawing with Athens framework.Path data organization is up to surface where it built,therefore paths are not interchangeable between different surfaces."
"MCWorkingCopyDeleted","A MCWorkingCopyDeleted class is an announcement raised when a MCWorkingCopy is removed"
"TGLMFastTable","I am a Trait that manage some Glamour Model related functionalities. Description --------------------I contains some functionnalities used by all the Glamour related data sources like the annoucements. Since a dataSource can be a list, or a outline list, or a tree … They cannot inherit from the same class. I am here to avoid a duplication of code."
"SHStyleElementTest","SUnit tests for class SHStyleElement"
"IceTipTreeRepositoryGroup",""
"ContinuationTest","I represent intentend to provide complete coverage for the Continuation class."
"IceTipRepairRepositoryDialog",""
"IRMethod","I am a method in the IR (intermediate representation) language consisting of IRInstructions grouped by IRSequence (basic block).  The IRSequences form a control graph (therefore I only have to hold onto the starting sequence).  #compiledMethod will convert me to a CompiledMethod.  #methodNode will convert me back to a parse tree."
"MetacelloAllowProjectUpgrade",""
"UnicodeTest","Tests the character classification methods against the generalCategory table.  Note that the correctness of the table is not checked. It probebably should be, but that is another task. "
"MacOSPlatform","I am a an object representing a Mac OS (pre OSX) platform. Use myself to access platform specific features."
"CodeChunk","I'm the abstract superclass of all the code declarations that should exist in an exported file."
"SDL_MouseWheelEvent","SDL2 library structure"
"ClySwitchToHierarchicalQueryResultCommand","I am a command to switch query browser to hierarchically sorted items list.In this mode items is grouped by defining class and shown in class hierarchy tree sorted by name"
"KMCategoryBinding","I am the reification of the relation morph<->category, created when a morph gets attached a category of shortcuts."
"ClyClassIconTableDecorator","I decorate classes with their icons defined by #systemIcon method.My decoration logic is a bit complex. I am supposed to work in remote browser too. And sending #systemIcon to remote class would be very expensive.So instead I find same class in my local environment and ask it for the icon."
"SystemDictionary","I represent a special dictionary used as global namespace for class names :	Smalltalk globals classNames.and for traits too:	Smalltalk globals traitNames.	and a few other globals:	(Smalltalk globals keys		reject: [ :k | 			| g |			g := Smalltalk globals at: k.			g isBehavior or: [ g isTrait ] ]) collect: [ :k | k -> (Smalltalk globals at: k) class ].As the above example let you guess, the global namespace of Smalltalk system is accessed through:	Smalltalk globals."
"ClassWithForbiddenAnnotationExample",""
"SDL_Keysym","SDL2 library structure"
"ReEntityCriticized","I am an event of an entity being criticized by the rules. Happens when #critics is called"
"IceUnknownCommit","I represent an commit that cannot be found in the current repository. I have a commit id/hash, but that commit was not fetched (or was wrongly set). Once the real commit is fetched, I'll be becomed into a real commit."
"HEFraction","I represent a Fraction.I store myself as two exported literals: the numerator and the denominator."
"BadHasher","I am an object that doesn't always hash correctly.  I am used for testing the HashTester."
"TextFontChange","A TextFontChange encodes a font change applicable over a given range of text.  The font number is interpreted relative to the textStyle governing display of this text."
"SycSingleClassCommand","I am a base class for commands which perform operations with single class Internal Representation and Key Implementation Points.    Instance Variables	targetClass:		<Class>"
"ZnByteStringBecameWideString","I am ZnByteStringBecameWideString, a resumable Error signalled to indicate that some byteString was changed to a wideString.Used by ZnUTF8Encoder>>#readInto:startingAt:count:fromStream: to avoid a #becomeForward: when a ByteString automagically changes into a WideString.Part of Zinc HTTP Components."
"IceTipManagePackagesCommand","I'm a command to open the package manager browser for a project."
"MenubarMenuMorph","Description--------------------I am a specialization of the MenuMorph for the Menubar. I adapt the keyboard navigation of the menubar."
"OmNullStore","I represent the null OmStore (Null Object design pattern)."
"MetacelloTestsGoferCleanup",""
"IncompatibleLayoutConflict","I am an error raised when extending a class with an incompatible layout."
"GLMFastTableColumn","I'm a glamour column for fast tables."
"RBLiteralArrayToken","I am the start of a literal array, normal literal arrays#() or byte arrays #[]."
"OSWindowRenderThread","I am a pharo process that performs all rendering calls. "
"FFIExternalEnumerationType","I define the type for FFIExternalEnumeration objects."
"GTSpotterCandidateSelectedMoved",""
"GZipReadStreamTest","Tests for the GZipReadStream class"
"InstVarRefLocatorTest","This is the unit test for the class InstVarRefLocator. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"IceGitRemote",""
"GLMPagerButtonDeselected",""
"AthensArcSegment","i am abstract class , representing an arc segment"
"RBClassRegexRefactoring","I am a regex refactoring renaming class names."
"ClyFullBrowserState","I represent state of full browser. So I keep its current metaLevelScope and methodGroupQuery. Internal Representation and Key Implementation Points.    Instance Variables	metaLevelScope:		<ClyMetaLevelClassScope>	methodGroupQuery:		<ClyQuery>"
"DACompositeDependency","A PDCompositeDependency is a composite dependency. A composite pattern is using.Actually in all case this dependency contains the dependencies between two packages and the instance variable dependencies contains all the type of dependencies (Extension, Inheritance, Reference, Trait)."
"IceLibgitTonelLogReader","I read exclusively the definition of the method defined in fileName.I'm using to speed the creation of a version list on IceLibgitTonelLog."
"LGitBlameFlagTypeEnum",""
"MorphicLabelAdapter","I am the adapter used to bridget a LabelPresenter and a LabelMorph"
"NetNameResolverTest","SUnit tests for NetNameResolver "
"RBNamespaceTest",""
"DynamicPresentersListBuilderTest","Test class for DynamicPresentersListBuilder."
"TabManagerPresenterTest",""
"LGitBuf",""
"ClyMethodVisibilityProvider","I am special annotation which marks classes that they can provide special hierarchy to represent method visibility classes.Users do not need to lookup my instances. They can simple use following method which will find appropriate class and create the hierarchy:	ClyMethodVisibilityProvider defaultHierarchyIn simple case it is just inverse ClySubclassHierarchy. So when you expand inherited classes (first item in third browser pane) you will see selected class on top of list and then all superclasses.But when class uses traits then traits are also shown in the hierarchy in special inheritance order. It is available only when trait plugin is loaded to the system. Plugin brings new type of hierarchy ClyTraitUserHierarchy which overrides default method visibility hierarchy by annotation.During annotations lookup the first registered annotation is used. It has lagest priority. So ClyTraitUserHierarchy is just annotated with high priority value 100 which overrides default hierarchy annotation.I expect that annotated classes will implement following class side method - hierarchyForMethodVisibilityLook at ClyMethodVisibilityProvider references for details"
"RubScrollBar","I am a scroll bar"
"GLMCompositeArrangement","This is a strategy to capture the intended arrangement of multiple presentations of a composite presentation. The subclasses define the actual arrangement."
"ClyOverriddenMethodsQueryTest",""
"KMStorage","I am a storage of shortcuts. I store and provide facilities to access named and annonimous shortcuts."
"DAReferenceDependency","A PDReferenceDependency is a reference dependency between two packages. Instance Variables	reference:		the reference class	selector:		the selector that references the class	method : 		the CompiledMethod"
"MCRepositoryRemoved","Announcement sent when a Repository is removed from  a Repository group."
"T2TestClass","Test Class used in the Traits tests"
"GLMPortEventTest",""
"ClyClassTableDecorator","I am a base class for class table decorators.I am annotated by decoration strategy in context of selected class.So my subclasses should just implement decoration logic"
"Polygon","I'm a Polygon PathShape (see PathShape)."
"LGit_GIT_EORPHANEDHEAD",""
"AthensFontDescription","Creates a new font description from a string representation in the form ""[FAMILY-LIST] [STYLE-OPTIONS] [SIZE]"", 1)FAMILY-LIST is a comma separated list of families optionally terminated by a comma,2)STYLE_OPTIONS is a whitespace separated list of words where each WORD describes one of style, variant, weight, stretch, or gravity. If STYLE-OPTIONS is missing, then all style options will be set to the default values3)SIZE is a decimal number (size in points) or optionally followed by the unit modifier ""px"" for absolute size. "
"RBSelectorEnvironment","I am a RBBrowserEnvironment for a set of selectors. Usually I am constructed as a result of a query on another environment:env referencesTo:#aselector -> a RBSelectorEnvironments."
"RGCommentDefinitionTest","SUnit tests for comment definitions"
"FLTraitSerializationTest","I have the common behavior for testing trait serialization."
"ClyAllCritiquesMethodGroup","I am a method group which include all methods with critiques.Also I am expanded to critique groups allowing user filter methods by particular severity level of problem.I am based on async method query. And in the browser I am animated to indicate query background processing"
"RBErrorToken","I'm an scanned error.I can have multiple causes."
"SpecDemoFormTableDataSource","Utility class for connection of the SpecDemoFormModel with a fast table"
"OSTouchTwoFingersScrollDetector","I am detecting the scrolls made with two fingers.I send these event back to my handler: 	- OSTouchTwoFingersScrollBeginEvent 	- OSTouchTwoFingersScrollMoveEvent 	- OSTouchTwoFingersScrollEndEvent "
"DelayTest","SUnit tests for class Delay"
"HookGenerator","New version-> takes all links and one node-> returns the complete AST for the hook."
"Interval","I represent a finite arithmetic progression (a range of number).Description--------------------------I allow to iterate easily on a range of number (for example to manupulate an index) with a define step (by default one by one).Zero step size is not allowed and will raise an error.I know at which number I begin, at which number I end and the step.I work with the Number class. I manipulate some numbers and I can be created from a Number.  Public API and Key Messages--------------------------- I implement most of the classic Iterators as #do: or #collect:.- #from: to: and #from: to: by:  are my two common contructors. But I am usually created by a message send on Number  (See examples).Examples --------------------------To create an Interval from 1 to 100 there is many ways:	Interval from: 1 to: 100	or	Interval from: 1 to: 100 by: 1		or from a Number 		1 to: 100 	or 	1 to: 100 by: 1		You can also use floats or fractions: 		0.1 to: 0.5 by: 0.01	or	1/10 to: 1/2 by: 1/100		NB: both expressions will not give exactly the same result. The first will contains only floats and the second only fractions.	 Internal Representation and Key Implementation Points.--------------------------    Instance Variables	start:		<Number> 	The beginning of the Interval.	step:		<Number> 	The end of the Interval.	stop:		<Number> 	The step of the interval. If the step is 3 and we begin at 1 the interval will be 1, 4, 7, 10, 13… until the end."
"PropertySortFunction","I implement collation of objects using their property. Property is defined by selector or one arg block which can be converted directly to my instances:	#name ascending.	#name descending.	[:a | a name] ascending	[:a | a name] descendingLook at SortFunction comments for more details.Internal Representation and Key Implementation Points.    Instance Variables	property		<Symbol, BlockClosure>"
"Semaphore","I provide synchronized communication of a single bit of information (a ""signal"") between Processes. A signal is sent by sending the message signal and received by sending the message wait. If no signal has been sent when a wait message is sent, the sending Process will be suspended until a signal is sent."
"RBValueNode","RBValueNode is an abstract class that represents a node that returns some value.Subclasses must implement the following messages:	accessing		startWithoutParentheses		stopWithoutParentheses	testing		needsParenthesisInstance Variables:	parentheses	<SequenceableCollection of: Inteval>	the positions of the parethesis around this node. We need a collection of intervals for stupid code such as ""((3 + 4))"" that has multiple parethesis around the same expression."
"RBParseErrorNode","I am a node representing a source code segement that could not be parsed. I am mainly used for source-code coloring where we should parse as far as possible and mark the rest as a failure.Parsing faulty code without rasing a syntax error is done by RBParser parseFaultyExpression:orRBParser parseFaultyMethod: The return value are  either valid nodes representing the AST, or nodes representing the valid portion and a RBParseErrorNode for the remaining invalid code."
"ClyWrapperQuery","I represent hierarchy of wrapper queries.The wrapper query is a single item composite query which uses single subquery in own execution logic.To create my instances use #for: message: 		ClyWrapperQuery for: aQuerySubclasses can use #actualQuery to access single subquery for convenience.I redefine #description to look like subquery by default."
"SUnitExtensionsTest","SUnit tests for extensions to SUnit"
"TonelFileUtils","I declare file operations to be used in tonel. I'm necesary because tonel is meant to be portable, and different dialects have different ways of dealing with file systems. "
"LGit_GIT_ITEROVER",""
"SugsExtractMethod","If you want to extract code in a new method I'm your guy"
"IceChangeImporter","I am a visitor that imports changes from different sources into a tree.I receive the node where I have to work on, a version, and the I can be visited by several sources (like git or image changes). I work recursively: I create new instances of myself to build the children nodes of my node."
"IceTipAbstractPlaintextCredentialsModel","I implement the basic behavior of all the plaintext credentials.My subclasses implements the specific behavior for each of the operations."
"MouseMoveEvent","A move event from the mouse"
"AbstractWidgetPresenter","AbstractBasicWidget is an abstract class for basic widgetsI collaborate with- ValueHolder to managed some of my variables.- ComposablePresenter to manage me with other elements.I provide the following variables and their accessors- enabled is a boolean representing if I am usable or not, it is true by default. It  have also shortcut enable and disable.- help is the text displayed in the tooltip.- borderWidth, its default value is 0, it must be called after have displayed the widget. - borderColor, its default value is transparent, it must be called after have displayed the widget. For the two methods borderWidth and borderColor, notice that some of my subclasses don't display my borderMe and my subclasses provide shortcut hook for my valueHolder, they are named ""when"" followed of the event.My drag and drop system don't work well.todo- defaultColor- color- eventKeyStrokesForNextFocus"
"AthensCairoPaintMode","I control the paint modes supported by Cairo backend.for the list and description of paint modes supported by Cairo library, seehttp://cairographics.org/operators/"
"RubMouseClick","I am raised when a mouse down is done"
"BreakpointTest","A BreakpointTest is a test class for testing the behavior of Breakpoint"
"MorphTreeChunkPager","A chunk pager"
"ExampleBuilderMorph","Morph with an inset border by default and theme access. Overrides openModal: to allow multiple free example dialogs to be presented."
"AsyncFile","An asynchronous file allows simple file read and write operations to be performed in parallel with other processing. This is useful in multimedia applications that need to stream large amounts of sound or image data from or to a file while doing other work.Closing the file after its use is currently required to not leak external semaphores. "
"IceTipInspectCommand","I am a command implementing the inspect option. I have several context activations to be able to inspect different objects in Iceberg's UI"
"RBUtilityMethodsRule","List methods that have one or more arguments and do no refer to self or an instance variable. These methods might be better defined in some other class or as class methods."
"ZnReadEvalPrintDelegate","I am ZnReadEvalPrintDelegate, I export a REPL Web Service.You can use this service to work with a headless image.	ZnReadEvalPrintDelegate startInServerOn: 1701.		ZnClient new		url: 'http://localhost:1701/repl';		contents: '42 factorial';		post.	Web Service API:	POST /repl <some Smalltalk code>	 Here is an example terminal session:$ curl http://localhost:1701/repl# Pharo Smalltalk REPL. POST expressions to evaluate# Here is one way (type ctrl-d to end input)curl -X POST -H'Content-Type:text/plain' --data-binary @- http://localhost:1701/repl$ curl -X POST -H'Content-Type:text/plain' -d '42 factorial' http://localhost:1701/repl1405006117752879898543142606244511569936384000000000$ curl -X POST -H'Content-Type:text/plain' --data-binary @- http://localhost:1701/repl{ (1 to: 10) sum. (1 to: 10) average }{55. (11/2)}There is error handling as well:$ curl -X POST -H'Content-Type:text/plain' --data-binary @- http://localhost:1701/repl1 plus: 2MessageNotUnderstood: SmallInteger>>plus:SmallInteger(Object)>>doesNotUnderstand: #plus:	Receiver: 1	Arguments and temporary variables: 		aMessage: 	plus: 2		exception: 	MessageNotUnderstood: SmallInteger>>plus:		resumeValue: 	nil	Receiver's instance variables: 1UndefinedObject>>DoItCompiler>>evaluate:in:to:notifying:ifFail:logged:Compiler>>evaluate:in:to:notifying:ifFail:Compiler>>evaluate:in:to:ZnReadEvalPrintDelegate>>evaluate: in Block: [| result |...BlockClosure>>on:do:ZnReadEvalPrintDelegate>>evaluate: in Block: [:out | [| result |...String class(SequenceableCollection class)>>new:streamContents:WARNING: never open this service beyond your local network !This service gives you absolute control over and access to everything in your image. For example, the following will kill your image:$ curl -X POST -H'Content-Type:text/plain' -d 'Smalltalk quitPrimitive' http://localhost:1701/replPart of Zinc HTTP Components. "
"ClyInterestingSuperclassScope","I am similar to ClySuperclasScope but I restrict superclasses chain up to Object which is not interesting command class for many browser scenarios.So I show all superclasses, their methods and variables except Object, ProtoObject and all their related stuff.You can restrict any class scope to be interesting scope using convertation method: 	aClassScope asInterestingClassScope By default it will return class scope itself. But in case when given scope consist of superclass scope it will be replaced by my instance"
"GLMPortIdentifierTest",""
"ClyExpandedDataSource","I am table data source which items are all initially expanded.I maintain list of collapsed items and compute items position according to it (row indexes in full table).Internal Representation and Key Implementation Points.    Instance Variables	collapsedItems:		<SortedCollection of: ClyDataSourceItem>	sorted by item position"
"FallbackMenu","I appear when there is an error while trying to build a menu from pragmas.I include items to:* Debug: give the user an opportunity to see and correct the error* Explain: why they're seeing a different menu* Custom: clients can add items to me by implementing #fallbackMenuOn:. Browse implementors for examples."
"NotFoundError",""
"ClySubclassWithTraitsOfClassWithTraits",""
"RBAddClassTransformationTest",""
"ZnBufferedReadWriteStreamTests",""
"WriteBarrierAnotherStub","Another stub for WriteBarrier to be used by tests"
"Bezier3Segment","This class represents a cubic bezier segment between two pointsInstance variables:	via1, via2	<Point>	The additional control points (OFF the curve)"
"TraitedClass","I contain the methods that are included in a TraitedClass.The Traits are also TraitedClass, as they share the same behavior.These methods override the implementation in Class I am added during the creation of the class, if the superclass does not have them.Check TraitedMetaclass >> #initializeBasicMethods This method is invoked during the construction of the class, and flattens my methods in the new traited class."
"ClyVariableWritersQuery","I return only methods which write given variables"
"ClyClassWhichInheritsAbstractClass","I am example of class which inherits from abstract superclass"
"ClyClassSideScopeTest",""
"GTSpotterCandidatesListProcessor","This is a candidates processor that can be parameterized via blocks."
"ClyUncommentedItemTableDecorator","I decorate table with special icon for classes which has no comment.I add this icon as an extra tool of table cell. So it do not override and do not overridden by other decorators."
"SpecStubSliderAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"GLMMorphTreeColumn",""
"OSWindowWorldState","I am a world state that does not use the Display global variable."
"ParagraphSelectionBlock","A selection block in a text paragraph "
"CompositeAnnotationContextTests",""
"OCUndeclaredVariableWarning","I get signalled when a temporary variable is used that is not defined.  My default action is to create an Undeclared binding and add it to the Undeclared dictionary."
"ClySortMethodBySelectorFunctionTest",""
"Break","I am a Breakpoint signal.use class Breakpoint to insert me reflectively"
"ClyReflectiveEnvironmentPlugin","I am special plugin which decorate methods with various kind of metalinks: halts, breakpoint, counters and watchpoints.And I provide related method groups- breakpoints- counters- watchpointsThey group related methods together"
"HDTestReport","Hudson report for test results"
"LGitCredentialsFreeCallout",""
"CustomHelpHelpBuilder","This builder builds help topics from a help topic description (which is typically storedin a class). The help topic description object has to understand the following messages:  #bookName - should return the name of the help book  #icon - should return the icon of the help book  #key - should return a unique key to identify the book  #pages - should return an array of method selectors to call to get the books pages"
"ClyCompositeScopeTest",""
"ClyExtensionLastSortedClasses","I am a special class query result which put extension classes to the end of list.I am used in class view to show all extensions in the bottom. To detect which classes are extensions I use the scope from where the query was executed. In fact I detect which classes are defined in building query scope. And the rest are extensions.For this logic I find in scope the package which defines given class. So I expect that query scope understands #packagesDo:. Now it is ClyPackageScope and ClyProjectScope.Look at #isQueryScopeDefinesClass: for details.And at last step I format classes from each part. I use #baseQueryResult for this.I can be configured to show classes in simple sorted way: 	ClyExtensionLastSortedClasses simple 	or to show classes in sorted hierarchy: 	ClyExtensionLastSortedClasses hierarchical	For other cases you can instantiate me by #using: method: 	ClyExtensionLastSortedClasses using: ClySubclassHierarchy inverse asQueryResult In addition I mark all extended classes with ClyExtendedClassTag which is used by UI to work with such classes differently.Also notice that I am a kind of ClyBrowserQueryResult. So I convert all given classes to the ClyBrowserItem instances.Internal Representation and Key Implementation Points.    Instance Variables	baseQueryResult:		<ClyQueryResult>"
"FileReferenceTest","SUnit tests for file reference"
"ZipArchiveError","I'm raised by ZipArchive when a trouble arrives."
"IceTipGitRepositoryPanel","I'm a presenter to define remote repositories.Repositories needs to have a valid url (one that can be parsed by IceRemote) and a valid location (where to place the clone)"
"ClyFixCritiqueCommand","I am a command to fix given critique by applying proposed changes.I open changes preview on them"
"ImagePresenter","An ImagePresenter is a spec presenter for images.See AbstractWidgetPresenterI provide the following variables and their accessors- action is the action performed when I am displayed.- image is the form i display."
"RenrakuExtensionsTest",""
"MCStWriter","I write Category/Classes/Methods/.... definitions into Monticello source.st file format found in .mcz packages.    See also MCStReaderExample:String streamContents: [:aStream| |writer|    writer := MCStWriter on: aStream.    writer writeDefinitions: {True asClassDefinition. False asClassDefinition}.]"
"AbstractFormButtonModel","This is deprecated class because the original class AbstractFormButtonModel was renamed to AbstractFormButtonPresenter. You should stop to use this class and modify your code to use AbstractFormButtonPresenter."
"PluggableTextFieldMorph","Single-line text field editor with DialogWindow key integration (return for default, escape for cancel) and keyboard focus navigation (tab/shift-tab). Additionally supports pluggable converters to translate between an object and its string form and vice-versa."
"DeleteVisitor","I delete the directory tree that I visit. I use the PostorderGuide so that I can delete files before deleting their containing directories."
"ConnectionTimedOut","Signals that a connection attempt timed out."
"IceGitClone",""
"GTCurrentSpotterExceptionHandler",""
"IdentitySet","The same as a Set, except that items are compared using #== instead of #=.Almost any class named IdentityFoo is the same as Foo except for the way items are compared.  In Foo, #= is used, while in IdentityFoo, #== is used.  That is, identity collections will treat items as the same only if they have the same identity.For example, note that copies of a string are equal:	('abc' copy) = ('abc' copy)but they are not identitcal:	('abc' copy) == ('abc' copy)A regular Set will only include equal objects once:	| aSet |	aSet := Set new.	aSet add: 'abc' copy.	aSet add: 'abc' copy.	aSetAn IdentitySet will include multiple equal objects if they are not identical:	| aSet |	aSet := IdentitySet new.	aSet add: 'abc' copy.	aSet add: 'abc' copy.	aSet"
"ZnMessage","I am ZnMessage, an abstract class representing an HTTP Message.Part of Zinc HTTP Components."
"FTFunctionWithField","I am an abstract class. My subclasses are some functions for a FastTable that need a field when they are use explicitely.Description-------------------------------------------------I act as my superclass but I manage a field. When the user type in the field an Announcement will call #update:Public API and Key Messages-------------------------------------------------- #update: anAnnoucement	is call when the user type something into the field	Example (Should only be create by a FTTableMorph)-------------------------------------------------FTFunctionWithField table: (FTTableMorph with: (1 to: 200))Internal Representation and Key Implementation Points.-------------------------------------------------    Instance Variables	field:		I am the field to display at the bottom of the FTTableMorph"
"MetacelloValueHolderSpec",""
"RunToSelectionDebugAction","A RunToSelectionDebugAction resumes the execution until the selected position in the source code is reached."
"GTSpotterExceptionMock3",""
"GoferUpdate","Update"
"SlotMigrationTest",""
"TextMorphForEditView","I'm a TextMorph that must be embedded in a PluggableTextMorph.Multi-line text editor with support for accepting on both each change and/or when keyboard focus changes. Also supports custom selection colour and clickable highlights From PluggableTextEditorMorph.Instance Variables	acceptOnCR:		<Object>	acceptOnFocusChange:		<Object>	autoAccept:		<Object>	editView:		<Object>	selectionColor:		<Object>acceptOnCR	- xxxxxacceptOnFocusChange	- xxxxxautoAccept	- xxxxxeditView	- xxxxxselectionColor	- xxxxx"
"ClySortItemGroupFunction","I implement sorting groups, kind of ClyItemGroup.I sort them first by priority and after by name"
"TabExample","I am an example of how to:	- instanciate tabs (#tabs)	- use a tab manager	Nothing really complicated here.self open"
"ClyVarDefinitionMethodGroup","I am group of methods which reference any instance variable of some class.I not keep this class directly. All required information is passed to my instance from variables query"
"OSTouchGestureDetector","I am an abstract class for the gestures detector, to work I have to register with an OSWindowGestureHandler"
"ReRuleManager","I should be used as singleton which provides sets of rules for checking classes and methods.Use:ReRuleManager uniqueInstance classRules ""to get rules for checking classes""ReRuleManager uniqueInstance methodRules ""to get rules for checking methods"""
"UndoRedoGroup","An UndoRedoGroup is a composite node of an history tree. It is made to allow redoing or undoing of several commands in one shot. See for example its use to record all text replacement when a ""replace all"" is performed from a FindReplaceService (see TextEditor>>replaceAll: with: startingAt:)Instance Variables"
"PragmaMenuAndShortcutRegistration","A PragmaMenuAndShortcutRegistration is the list items holder"
"IcePackageDefinition","I represent a package inside the iceberg repository. How I am built depends on the repository format (e.g., tonel or filetree).My contents are the tags defined in the package.See my superclasses for more information."
"LogicalFontManager","I reference all font families available in the  system.For example:LogicalFontManager current allFamilies.FreeTypeFontSelectorDialogWindow new open."
"BaselineOfSystemCommands",""
"LayoutFrameTest","SUnit tests for class LayoutFrame"
"RGSliceTest","SUnit tests for slices"
"IceCloneRemoteNotFound",""
"RBAddClassTransformation","Adds a class in the image, optionally inside an hierarchy (with superclass or subclasses).Usage:| transformation |transformation := (RBAddClassTransformation	addClass: #FooTest	superclass: #RBTransformationTest	subclasses: (Array with: RBAddClassTransformationTest)	category: #'Refactoring2-Transformations-Tests')	transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- superclass must be an existing class- each subclass also must be an existing class- name of the class to be added must be non-existent in the system- name of the category must be a valid one"
"JobChange","A JobChange is an announcement for a job change. To get notifySystemAnnouncer uniqueInstance 	on: JobChange send: #XXX to: whoever."
"RubMethodEditingExample","self open"
"EditableListTest",""
"ZnClientTests",""
"OSWindowTouchEventHandler","I am the basic event handler for the example"
"GLMPhlowPharoMethodBrick",""
"IceTipToolbarActivation",""
"ZnValueDelegate","I am ZnValueDelegate.I forward #handleRequest: messages to the object that I wrap using #value:ZnServer default delegate: 	(ZnValueDelegate with: [ :request | 		ZnResponse ok: (ZnEntity with: 'You asked for ', request uri printString) ] ).Part of Zinc HTTP Components."
"OCSpecialVariable","I model self, thisContext and super"
"RBProtectInstanceVariableRefactoring","I am a refactoring for protecting instance variable access.If a class defines methods for reading and writing instance variables, they are removed and all calls on this methods.Omit method that are redefined in subclasses."
"EyeBasicInspector","I am a special inspector that only lists the real fields of an object. I have exactly the same behavior as my superclass but I am used as a placeholder for the the different inspector views in the InspectorNavigator."
"IconStyler","I'm in charge to styling an ast with highlighting. To highglight something I need the rubric text model in textModel."
"ClyConstantQueryTest",""
"RxsPredicate","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--This represents a character that satisfies a certain predicate.Instance Variables:	predicate	<BlockClosure>	A one-argument block. If it evaluates to the value defined by <negated> when it is passed a character, the predicate is considered to match.	negation	<BlockClosure>	A one-argument block that is a negation of <predicate>."
"ClyBrowserQueryResultTestCase",""
"OCCompilerASTPlugin","I am an abtract superclass for compiler plugins.The compiler consists of multiple passes:source 	- [ Scanner/Parser ]  -> AST 	- [ SemCheck ] -> AST   <<HERE>>	- [ ASTTranslator ] -> IR 	- [ IRBuilder ] -> CompiledMethodThese plugins are called <<HERE>>, that is, after semantic analysis before generating the IR.They are sorted by #priority and handed a *copy* of the AST."
"RBScanner","RBScanner is a stream that returns a sequence of token from the string that it is created on. The tokens know where they came from in the source code and which comments were attached to them.Instance Variables:	buffer	<PositionableStream>	Accumulates the text for the current token.	characterType	<ByteSymbol>	The type of the next character. (e.g. #alphabetic, etc.)	classificationTable	<Array of: Symbol>	Mapping from Character values to their characterType.	comments	<Collection of: Interval>	Source intervals of scanned comments that must be attached to the next token.	currentCharacter	<Character>	The character currently being processed.	errorBlock	<BlockClosure>	The block to execute on lexical errors.	extendedLiterals	<Boolean>	True if IBM-type literals are allowed. In VW, this is false.	nameSpaceCharacter	<Character>	The character used to separate namespaces.	numberType	<ByteSymbol>	The method to perform: to scan a number. 	separatorsInLiterals	<Boolean>	True if separators are allowed within literals.	stream	<PositionableStream>	Contains the text to be scanned.	tokenStart	<Integer>	The source position of the beginning of the current tokenClass Instance Variables:	classificationTable	<Array>		the default classification table for all charactersShared Variables:	PatternVariableCharacter	<Character>	the character that starts a pattern node"
"ClyProjectScope","I am a scope of projects.So I see all objects which are defined in given projects:- projects- packages- classes - methods"
"GLMHintableActionButtonBrick",""
"AthensTreeView","A tree visualization using Athens for display"
"MCFtpRepository","I am an monticello repository implementation for the FTP protocol."
"ZnUnknownHttpStatusCode","ZnUnknownHttpStatusCode is signalled when an unknown/unsupported HTTP status code is found.Part of Zinc HTTP Components. "
"GLMDropListModel",""
"TickSelectionListMorph","A TickSelectionListMorph is used to render the tick liststoreValue	- xxxxx"
"MetacelloIssueTestCase",""
"RBRefactoringManager","I collect refactorings during a refactory execute-step.All changes are applied to the system and collected by a unique RBRefactoryChangeManager instance. You should use the uniqe instance of me."
"MetacelloSymbolicVersionMethodSpec",""
"EpDisabledIntegrationTest",""
"Trait","My instances are the traits used to create traited classes.The traits can be combined in different ways check TaAbstractComposition to see the different possible operations.I am a subclass of Class, and I implement the specific behavior for traits.So, the traits are polymorphic with classes.I support stateful traits. Also Traits uses other metaclass to implement the behavior, check MetaclassForTraits. Also a nice diagram can be seen evaluating:((ZnEasy getPng: 'https://raw.githubusercontent.com/wiki/pharo-project/pharo/figures/traits.png') 	asMorph resize: 800@800; openInWindow) "
"MCVersionLoaderStopped","Announcement sent when a Version has finished loading"
"ZnDigestAuthenticatorTests",""
"AthensSimpleTreeNode","A node in an AthensTreeView"
"GTEventRecorder","I represent an event recorder, an object that collects data and regularly sends them to a server. The data could represent user activity, tool usage, or any other statistic usefule for further analysis. I cover data collectors, packing, and delivery objects the way they cooperate together and the collected data are regularly send to server(s). It is not mandatory, but it is supposed that I represent a Singleton pattern.I collaborate with GTEventCollector objects, that are responsible for collecting data. I keep any number of those objects and whenever GTEventDelivery asks me for collected data, GTEventPacking object packs data from each GTEventCollector and hand them as collection of GTEventBundle objects to the GTEventDelivery. GTEventDelivery sends the bundles to server(s).Public API and Key Messages- addCollector: it adds GTEventCollector object and activates delivery process if inactive   - removeCollector: it removes  GTEventCollector object and deactivates delivery process if there are no other collectors.- activateDelivery: activates delivery process- deactivateDelivery: deactivates delivery processInternal Representation and Key Implementation Points.    Instance Variables	announcer:		<Annoucner>	collectors:		<GTEventCollectors>	delivery:		<GTEventDelivery>	packing:		<GTEventPacking>	privacy:		<true|false|ClosureBlock>"
"IceTipDialog","I'm a general dialog. I implement a default accept method that needs to be overriden my children and some utility methods to easier build a dialog."
"TickSelectionListNodeMorph","A TickSelectionListNodeMorph is the morph used to render the tree used to render te tick list"
"ClyAddConditionalBreakpointCommandTest",""
"EyeFloatInspector","I am EyeFloatInspector.I am an EyeInspector.I am a specialized Inspector for Floats.I add extra elements (sign, significand, exponent) of the Float object that I am inspecting.Note that these should be interpreted assign * significand * (2 raisedToInteger: exponent)"
"RBSplitClassTransformation","Creates another class with a subset of instance variables from an existing class. References to instance variables in the original class will be replaced by invocations to getters and setters on the new class.Usage:transformation := (RBSplitClassTransformation	class: #RBRemoveDirectAccessToVariableTransformation	instanceVariables: #(receiver)	newClassName: #RBRemoveAccessWithReceiverTransformation	referenceVariableName: #newReceiver)	transform.(ChangesBrowser changes: transformation model changes changes) openIn this example,the class ""RBRemoveAccessWithReceiverTransformation"" will be created with the variable ""receiver"". The variable ""receiver"" will be removed from the original class ""RBRemoveDirectAccessToVariableTransformation"". All references to ""receiver"" in this class and its subclasses will be replaced by: ""newReceiver receiver ..."" or ""newReceiver receiver: ...""Preconditions::-  the instance variable exists"
"GLMBrickPopupEditBorderThemer",""
"ManifestSpecDeprecated","Manifest for deprecated Spec-Deprecated package"
"ClyBrowserToolMorph","I am a root of browser tabs hierarchy.My subclasses should implement single method #build where they should create and add required widgets.The build is always executed in background due to the TabManagerMorph logic.Tab manager collects all subclasses which should be opened for current browser state.It lookups tools annotated with ClyTabActivationStrategy for current browser context.So to enable any tool in the browser you should annotated it with еру strategy for appropriate context where tool should be opened.For example:	ClyMethodCodeEditorTool class>>methodTabActivation		<classAnnotation>		^ClyTabActivationStrategy for: ClyMethod asCalypsoItemContextIt will open method editor when method is selected in the browser.	Subclasses can define extra condition to check that they can be opened in particular browser context instance.They should override class side method: - shouldBeActivatedInContext: aBrowserContextIt returns true by default.Also abstract subclasses are never opened in the browser. By default the tool is abstract if it has subclasses.The class side method #isAbstact should be overridden if this default condition is not valid.Tab instances are created with browser context 	ClyBrowserTool for: aBrowser inContext: aBrowserContext	Subclasses should implement initialization methods to retrieve required state from the given context:- setUpModelFromContext- setUpParametersFromModelLast method is also used to update tool when model is changed.Subclasses should override method #isSimilarTo: to compare with another tool which has same parameters.For example ClyMethodCodeEditorTool checks that other method editor is based on same method.#isSimilarTo: method is used by ClyTabManager to update existing tabs in new browser state. If similar tool is already opened in browser then it will be not replaced by new instance.Look ClyTabManager comments for details.Tab manager never close dirty tabs when browser selection is changed. Instead if ask the tool to indicate different browser context.To support this logic tools should implement following methods: - belongsToCurrentBrowserContextFor example method editor checks that browser still selects editing method.- warnUserAboutMyContextHere the tool is supposed to reset any indication of different context. It happens when user move selection back where dirty tab should be opened again. - warnUserAboutDifferentContextHere the tool can indicate that it is now is untouched from the current browser state. For example when user selects new method while dirty method is still opened. - warnUserAboutChangedContextIt just merges previous two methods by testing for #belongsToCurrentBrowserContext.To support dirty state subclasses should implement method #hasUnacceptedEdits. It is false by default.And indication of dirtiness can be overridden in the method #updateDirtyState. By default it just adds * to the tab title. - hasUnacceptedEdits (false by default)- updateDirtyStateSo tabs are based on some models. For example method editor model is a method. When tool model is removed from system (method is removed) the tab should be automatically closed.Tab manager detects such conditions using following method which tools should implement:- belongsToRemovedBrowserContextFor example method editor checks that editing method was removed from system.So the model of the tool can be modified and therefore the tool should implement update logic using following methods:- attachToSystemIt should subscribe the tool for model changes.- detachFromSystemIt should unsubscribe the tool from the model.In addition I provide method #update which subclasses should reuse in the update logic of the method changes.#update refreshes basic visual properties of tool retrieved from the model and it rebuilds status bar.TabManager orders retrieved tools using method #tabOrder.Also manager chooses what tab should be selected first. It selects the tool with highest #activationPriority which is equal to #tabOrder by default.In general tab selection logic is more complex. Look at ClyTabManager comments for details.To specify tab title and icon subclasses can implement following methods: - defaultIconName- defaultIcon (to be able create dynamic icon instance when simple icon name is not enough)- defaultTitle (by default it is the name of current selected item in the browser or just a tool class name if nothing selected)I provide status bar. And subclasses can add items to it in the method: - fillStatusBarAny tool can be decorated by browser plugins which can inject other widgets or modify general style of the tool.Plugins add decorators using following method: 		aBrowserTool addDecorator: aBrowserToolDecoratorAnd at the end of building process I apply all configured decorators:	self applyDecorations	Notice that full tab building logic is implemented in the method: - buildAndDecorateTo remove the tool from browser just call #removeFromBrowser method.Internal Representation and Key Implementation Points.    Instance Variables	browser:		<ClyBrowser>	containerTab:		<TabMorph>	context:		<ClyBrowserContext>	decorators:		<OrderedCollection of<ClyBrowserToolDecorator>>	isDirty:		<Boolean>	isManagedByUser:		<Boolean>	statusBar:		<ClyStatusBar>"
"FLIgnoredVariablesTest","SUnit tests for serialization with ignored variables"
"MergeJoinSection","A join section usable for merging"
"GLMExpanderContentsNodeModel",""
"GLMMorphicStackerRenderer",""
"KeyedTreeTest","SUnit tests for keyed trees"
"EpLogBrowserModel","I am deprecated. Please use my superclass."
"GTEventRegistryTest","A GTEventRegistryTest is a test class for testing the behavior of GTEventRegistry"
"ZnUTF16Encoder","I am ZnUTF16Encoder, a concrete subclass of ZnCharacterEncoder.I implement the variable length UTF-16 encoding and decoding of Unicode according to RFC 2781.Wikipedia reference http://en.wikipedia.org/wiki/UTF-16Part of Zinc HTTP Components."
"EpMonticelloVersionsLoad","I represent a Monticello ""Load Versions"" operation performed in the system."
"RBRemovePragmaTransformation","I am responsible for removing a pragma definition in a method. In this implementation, all the pragma (i.e., selector and arguments) must be described.Usage:| transformation |transformation := (RBRemovePragmaTransformation				pragma: '<gtInspectorPresentationOrder: 34>'				inMethod: #methodBefore				inClass: #RBRemovePragmaTransformationTest)				transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- the class exists,- the methos exists, and- this method has a pragma with the given selector.Observations about the transformation:- Although the pragma must be described, the transformation will remove the pragma that has the same selector as the specified one."
"BISettingPreviewer","Preview to see the effect of a setting on the behavior of the pretty printer.self new openWithSpec "
"ZnClientRetryingEvent","ZnClientRetryingEvent signals a client is retrying is main operation. The number of retries is configurable."
"CommandLineArguments","The CommandLineArguments represents the arguments passed to the image.In the following case,	$PHARO_VM myImage.image --foo bar	`CommandLineArguments default` contains {'--foo'. 'bar'}."
"ClySingleClassGroupProvider","I am a root of hierarchy of class group providers which build just one group for given package scope.While class group is based on class query my subclasses should implement two methods: - createClassQueryFrom: aPackageScopeIt should return class query representing classes for the group.- createClassGroupFor: aClassQuery from: aPackageScopeIt should creates group instance using given scope. The package scope is given to build subgroups query if needed. Any class group can be expanded to children subgroups"
"LGitAbstractError",""
"CairoLibrary","I provide access to cairo library. Since paths and names can be tricky in different versions, I have methods to solve this in any platforms I want cairo to run."
"ClyTraitUsersHierarchyTest",""
"RBIfTrueReturnsRule","Checks for common ifTrue: returns that could be simplified using a boolean expression."
"RBReadBeforeWrittenTesterTest","SUnit tests for RBReadBeforeWrittenTester"
"FooSharedPool","Just a class for testing."
"ClyMethodWithWatchpointTag","I mark methods that they have installed watchpoints"
"ZnSignalProgress","I am ZnSignalProgress.I am a DynamicVariable and a ProcessSpecificVariable.I can be used to indicate that Zn related code down the call stack has to signal HTTPProgress, for example:ZnSignalProgress 	value: true 	during: [ ^ ZnClient new get: 'http://zn.stfx.eu/zn/small.html' ]"
"SDL_CommonEvent","SDL2 library structure"
"ChangeSetClassChangesTest","Class category changes are not being properly added to the default changeset in Squeak 3.7. This test case will pass in Squeak 3.6, and fail in Squeak 3.[7-9]."
"TTranscript","I define the API of Transcript, which is quite similar to stream.A Transcript acts like a character write stream, accumulating output send to it. Some operations buffer output without necessarily showing it (like #nextPut: nextPutAll: #print: #cr #space and #tab), while others add their output and show any buffered output (like #show: #crShow: and <<). Use #flush or #endEntry to force buffered output to be shown.Clients are required to implement #critical: #flush: #nextPut: and #nextPutAll: Note that #critical: should serialize multithreaded accessClient can optionally implement #close or #clear themselvesHistorical note: #ensureCr and #reset were removed since they were not used"
"ClyAbstractClassExample","I am example of class with abstract methods"
"ClyOverriddenMethodsQuery","I return all method from given scope which are overridden by any subclasses.To detect overridden method I use inheritanceAnalyzer which caches this information"
"AdditionalMethodState","I am class holding state for compiled methods. All my instance variables should be actually part of the CompiledMethod itself, but the current implementation of the VM doesn't allow this.  Currently I hold the selector and any pragmas or properties the compiled method has.  Pragmas and properties are stored in indexable fields; pragmas as instances of Pragma, properties as instances of Association.I am a reimplementation of much of MethodProperties, but eliminating the explicit properties and pragmas dictionaries.  Hence I answer true to isMethodProperties."
"TaRenameSlot","I am able to rename a slot in a trait, so it does not conflict with the ones in the class.Also I rename all the uses of this slot in my methods.I implement the #>> operator in traits."
"NECMenuMorph","I show the possible completions in a menu like appearance. The user may choose an entry from my list and complete the word he was typing in the editor. I'm showed with the Tab key and will be deleted when with ESC key or when a successful completion occurs. The following keystrokes are supported:Ctrl-Space or Tab: Open a new morph. Tab requires at least one character in front of the cursor. When already open complete the selected entry. Esc: Close meCtrl+u: Change to untyped mode, so I show all selectors of all classes in the system and the variables that are accessible to the current context.Arrow Up: Move one entry up.Arrow Down: Move one entry downEnter: (like Ctrl-Space and Tab): Complete with the selected item and close the morphany letter or digit: Narrow the completion furtherCtrl+t: Toggle the expand flag. When expand is disabled, you don't see selectors belonging to Object and ProtoObject. "
"SpecPragmaCollector","A SpecPragmaCollector is a specialized PragmaCollector.Sonce we just want specs defined on class side, we do not have to check the whole system, then to restrain."
"RelationSlot","I'm a Slot that represents one side of a relationship. If this side of the relationship is updated I take care of keeping the other side up to date.I'm abstract, use  the ToOne or ToMany  subclass depending on the cardinality.Instance Variables	inverseName:		<String>	inverseSlot:		<RelationSlot>	targetClass:		<Class> or <Symbol>inverseName	- the name  of the slot of the other side of the relationshipinverseSlot	- the slot of the other side of the relationshiptargetClass	- the class or the name of the class this slot refers to"
"AthensCompositeStrokePaint","i am used to convert CompositeBorderStyle into paint, used in Morphic.The ""withInset"" attribute defines whether each sub stroke  outlinesa smaller rectangle. If not, all strokes draw the same rectangle.(useful for multi-color-dashes)"
"ZipEncoderNode","ZipEncoderNode represents a node in a huffman tree for encoding ZipStreams.Instance variables:	value 		<Integer>	- Encoded value	frequency	<Integer>	- Number of occurences of the encoded value	height 		<Integer>	- Height of the node in the tree	bitLength 	<Integer>	- bit length of the code	code		<Integer>	- Assigned code for this node	parent		<ZipEncoderNode>		- Parent of this node	left			<ZipEncoderNode>		- First child of this node	right		<ZipEncoderNode>		- Second child of this node"
"HEBinaryReader","I wrap a binary stream implementing helping methods to read basic types: - Byte - Int32 - ByteArray - ByteString - ByteSymbol - Unsigned Int32The format is platform independent. It uses always 4 bytes per integer (32 bits).In this way the format can be used in any platform and architecture.The integers are stored in little endian style."
"MailMessageTest","SUnit tests for MailMessage"
"ClyPackageToolbarGroup","I am a toolbar menu group to show package view modes of the browser together"
"HDLintReport","Hudson report for lint results"
"RubWorkspaceExample","self open"
"IceUnbornProject",""
"TIncludesForIdentityCollectionsTest","A trait for test purposes"
"OSWindowAttributes","My instances hold a number of various attributes, used during initial window creation and its initialization:- initial bounds- title- icon- screen id- fullscreen or not- etc...Please note, that depending on driver used, some attributes can be ignored by driver and will have no any effect.  The preferableDriver attribute is special, that it allows user to bypass the default driver selection mechanism and tell directly, which driver shall be used for creating a window."
"RBClassUsingSharedPoolForTest",""
"IceTipBranchModel","I expose data of a branch."
"MCClassTraitDefinition","A class trait definition"
"TInspectorActions","I contain common actions for inspectors and inspector elements/wrappers"
"SycRemoveMethodCommand","I am a command to remove given methods.I use special remove strategy to define what to do when given methods are in use.So I delegate actual remove operation to the strategy: 	removeStrategy removeMethods: methods Internal Representation and Key Implementation Points.    Instance Variables	removeStrategy:		<SycRemoveMethodStrategy>"
"MorphicTransferAdapter","I am a morphic specific adapter used to build a transfer object during a drang and drop operation"
"ClassWithSingleAnnotation",""
"ManifestJobs","This package contains the code related to Jobs.Jobs are a way to manage the run of a task and optionnaly make it easier to notify the user of the progress. They also announce the progress of the task (when it begins, progress and ends).The main class to use is Job. Here is an example:[:job | job title: 'Let us get started'.	1 to: 10 do: [:each |		job			progress: (0.1 * each);			title: 'Youpi ', each printString.		100 milliSeconds wait.		] ]  asJob run"
"CurrentChangeSetChanged","Announce that the current change set has changed"
"LGitCredAcquireCallback","/** * Signature of a function which acquires a credential object. * * - cred: The newly created credential object. * - url: The resource for which we are demanding a credential. * - username_from_url: The username that was embedded in a ""user@host"" *                          remote url, or NULL if not included. * - allowed_types: A bitmask stating which cred types are OK to return. * - payload: The payload provided when specifying this callback. * - returns 0 for success, < 0 to indicate an error, > 0 to indicate *       no credential was acquired */"
"MultiFontTest","Test for internationalized fonts"
"SpecStubSliderView","Only stub object, no real view is displayed."
"AbstractCache","I am Cache.I am an abstract class.I am a limited cache holding onto key/value pairs.My primary interface is #at:ifAbsentPut: which takes two arguments: a key and a block. Either the key is found (cache hit) and its value is returned, or the key is not found (cache miss). If the latter case, block should compute a new value to cache. Because block takes the key as optional argument, you can specify a factory style argument as well. With an explicit factory specified, you can also use #at: to access me.For each addition to the cache, a weight is computed by #computeWeight (a selector or block) and added to #totalWeight. When #totalWeight is no longer below #maximumWeight, the least recently used item of the cache is evicted (removed) to make room. The default #computeWeight returns 1 for each value, effectively counting the number of entries. The default #maximumWeight is 16.I count hits and misses and can return my #hitRatio.Optionally, but not by default, I can be configured so that it is safe to access me from different threads/processess during my important operations. See #beThreadSafe."
"IceEmptyMerge","I am a null object representing the absence of a merge. I am used when no merge is needed between two versions, for example, in case the commit to merge is already in the image and the commit to merge into is an ancestor of this commit."
"Bag","I represent an unordered collection of possibly duplicate elements.	I store these elements in a dictionary, tallying up occurrences of equal objects. Because I store an occurrence only once, my clients should beware that objects they store will not necessarily be retrieved such that == is true. If the client cares, a subclass of me should be created."
"IceTipPushAction","I perform a push."
"TextVariableLink","An active link in a text linking to a variable"
"SugsExtractStatements","A SugsSelectedValidCodeAsMethod the action needed to extract the selection to another method in the same class.THe difference between SugsExtracMethod is that this actually uses the user selection.In fact we should replace the SugsExtracMethod  with this one."
"DATraitDependencyNode","A PDCycleNode is used to display a trait dependency in a tree."
"GLMProfileSelection","I am event indicating to the renderer to profile the currently selected text."
"IceTipForgetRepositoryCommand","I will allow the ""forget"" of a repository (remote it from list of registered repositories).I also add the possibility of remove the repository from file system."
"DynamicWidgetChange","I am a dummy proto to see how easy it is to replace a subwidget with another one dynamically.slef example"
"SpecStubTransferView","Only stub object, no real view is displayed."
"FLGZipStrategy","I am a strategy for using GZipStream."
"SDL_SysWMinfo","A structure that contains system-dependent information about a window. "
"MultipleSettingDeclaration","A declaration for multiple settings"
"AthensWorldState","An AthensWorldState is a subclass of WorldState, that uses a special (fake) Display based on a real Morph. This is used to simulate a WorldMorph that actually resides in another Morph. This display adapts the owner dimensions as the ""DisplayScreen""-Dimension."
"VTermOutputFont","I'm the font style of a VTermOutputDriverI'm characterized by the color of the font that will be printed."
"StepIntoDebugAction","A StepIntoDebugAction the current context."
"SDL_SysWMinfo_MirInfo","A structure that contains Mir specific information about a window. "
"IceGitUsernameOrEmailNotFound","I'm an error to be sent when the error that comes from external library can be guessed to be the absense of user.name and user.email properties."
"IceTipDirectoryPresenter","I'm a model to choose directories."
"TelnetProtocolClient","Abstract super class for protocol clients based on the generic telnet protocol ""<response code> <response>""Structure:	responseCode	the numerical (integer) value of the last response code"
"HEGlobalVariable","I represent a Global variable.I am stored as a symbol.When serialized I get the name of the variable.When deserialized I find the global variable in the target environment.I use the class being created to look up the binding. If there is no binding I create an undeclared. "
"MorphDeleted","I'm an announcement raised when a morph is deleted. Subscribe to me when you want to do things after the morph is opened.Take into account that when a morph is deleted, all it's children also get deleted and they raise a similar announcement."
"DraggableCallback","I represent a callback to make the window draggable from any chosen rectangle. Useful for undecorated windows.Warning : Only available with SDL 2.0.4 or higher !"
"SycRenameMessageCommand","I am a command to rename message selector.In addition I allow to swap arguments in signature. Internal Representation and Key Implementation Points.    Instance Variables	newSignature:		<SycMessageDescription>"
"MCMockDependentItem","Mock for dependency testing"
"SDL2Example","Couple examples.."
"MetacelloNullRecordingMCSpecLoader",""
"RBRemovePoolVariableChange","I am a refactoring for removing a pool variable. My changes are executed on the instance side."
"ZnBasicCredential","I am ZnBasicCredential, a concrete subclass of ZnCredential.I implement basic HTTP authentication.I hold a username and password.Part of Zinc HTTP Components."
"GradientFillStyle","A gradient fill style is a fill which interpolates smoothly between any number of colors.Instance variables:	colorRamp	<Array of: Association> Contains the colors and their relative positions along the fill, which is a number between zero and one.	pixelRamp	<Bitmap>		A cached version of the colorRamp to avoid needless recomputations.	radial		<Boolean>	If true, this fill describes a radial gradient. If false, it is a linear gradient.	isTranslucent	<Boolean>	A (cached) flag determining if there are any translucent colors involved.Class variables:	PixelRampCache <LRUCache>	Recently used pixelRamps. They tend to have high temporal locality and this saves space and time."
"GLMPagerModelTest",""
"ClyAllClassGroupsQueryTest",""
"BinaryFileStreamTest","Unit tests for binary file streams"
"IceExternalJob",""
"MetacelloCommonMCSpecLoader",""
"RBBrowserMethodRefactoringHelp","This is the chapter of the refactoring help book about the method  refactoring available in the System Browser."
"GLMTabSelectorBrick","A GLMTabSelectorBrick is a simplified TabSelectorMorph with support of smart tab resizing.New implementation doesn't have any scrollbars or scroll arrows.Instance Variables	controls:		<Object>	font:		<Object>	selectedIndex:		<Object>	tabs:		<Object>	visibleTabRange:		<Object>	wrapScrolling:		<Object>controls	- xxxxxfont	- xxxxxselectedIndex	- xxxxxtabs	- xxxxxvisibleTabRange	- xxxxxwrapScrolling	- xxxxx"
"MCMockClassG",""
"SycBrowseVariableCommand","I am a command to browse given variable.For instance or class variable I just open browser on defining class.For global variable I open browser of class of variable value"
"GTBytecodeDebuggerVariablesBrowser","I provide a different view of all variables from  a Context suitable for a bytecode debugger:- I show the complete stack of variables stored by the context (both named and unnamed variables)- I show the slots of the receiver object using the notation rcv0, rcv1, etc., as this is how slots are accessed in bytecode instructions"
"SDL_Point","SDL2 library structure"
"ClassModifiedClassDefinition","This announcement will be emitted when a class or a trait definition changes.For example, when an instance variable is added or when the trait composition is modified in a class definition."
"IceMCVersionInfo","Adapter to produce an MCVersionInfo that knows how to (lazily) load ancestors from an Iceberg repository."
"SDL_JoyDeviceAddedEvent","SDL2 library structure representing a joystick device added event data."
"ZnUrlTests",""
"FreeTypeFontFamily","FreeType font family"
"IceTipCommentPanel","I'm a comment panel.I can obtain a comment text and certain ""commit specific"" options. "
"ZnMagicCookieTests",""
"ZdcByteArrayManager","I manage the allocation and recycling of ByteArrays. For each size, I maintain up to limit instances, configurable using #limit:I never preallocate.I am threadsafe.My public API consists of just 2 messages: #byteArrayOfSize:zero: and #recyle:There is one global current instance for me, but I can be used as needed.	ZdcByteArrayManager current limit: 4.		ZdcByteArrayManager current limit: 0."
"Matrix","I represent a mathematical matrix or a two-dimensional array. I provide methods for creating matrices, operating on them arithmetically and algebraically. Structure: - numberOfRows : a non-negative integer saying how many rows there are. - numberOfColumns : a non-negative integer saying how many columns there are. - contents : an Array holding the elements in row-major order.  That is, for a 2x3 array the contents are (11 12 13 21 22 23).  Element-wise matrix arithmetic works; you can freely mix matrices and numbers butdon't try to mix matrices and arrays (yet).Matrix multiplication, using the symbol +* (derived from APL's +.x), works between(Matrix or Array) +* (Matrix or Array).  Don't try to use a number as an argument of +*.Matrix * Number and Number * Matrix work fine, so you don't need +* with numbers."
"AbstractFileReference","I am an abstract superclass for FileLocator and FileReference. By implementing most of the methods on myself most code duplucation between the locator and the reference can be avoided"
"ClyToolbarActivation","I annotate commands which should be placed in the toolbar.By default I use #defaultMenuItemName to be used as a title of toolbar UI elements.But if you want the title which is different from context menu then you should override #defaultToolbarItemName in the instance side of command"
"ClassFactoryForTestCase","I'm useful when classes needs to be created during the execution of the test. This avoid polluting your unit tests with dummy and mock classes.A typical usage of it is:TestCase subclass: #YourTest       instanceVariableNames: 'classFactory'YourTest>>setUp       classFactory := ClassFactoryForTestCase newYourTest>>tearDown       classFactory deleteClasses.YourTest>>testIsBehavior       | cls |       cls := classFactory newClass.       self assert: cls isBehavior"
"GTSpotterStepPopped",""
"FuzzyMatcherExample","FuzzyExample is a class used to showcase the FuzzyMatcher score matching. See the example on the class side."
"LGitStructWithDefaults",""
"ZnChunkedWriteStream","I am ZnChunkedWriteStream, I wrap another write stream and add HTTP 1.1 chunked transfer encoding.I write a chunk for each #nextPutAll: or #next:putAll:startingAt:I should be wrapped in a ZnBufferedWriteStream for #next: to work.When done, send #close or #finish to me.Part of Zinc HTTP Components."
"PoolDefiner","A pool used for testing purposes"
"GTBrowsingActions","I provide various actions for browsing a Context object. These actions are loaded by the debugger in the context menu of a stack."
"MethodPragmaTest","SUnit tests for method pragmas"
"FFICallbackTests","Tests for callbacks"
"AthensCanvas","The Athens canvas is a central object which is used to performs drawings on a surface.Please note, that Athens does not allows you to instantiate canvas directly, instead you obtain a ready for use instance as an argument in #drawDuring: message, sent to athens surface:surface drawDuring: [:canvas | .... ]Using canvas outside a #drawDuring: method is highly discouraged. Doing so may lead to unpredicted behavior/data corruption/image crash."
"OmDeferrer","I schedule and postpone a message send until the specified duration passed."
"SugsRenameMethod","I know how to rename methods"
"ManifestIcebergPlugin","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"ClassAnnouncement","I am an abstract class used to gather all the announcements related to class modifications."
"EpProtocolAddition","I represent the addition of a protocol of a class or a trait."
"TSortTest","A trait for test purposes"
"ClyTableIconCommandActivation","I describe how to access and execute commands using iconic button in table row.I implement way how to decorate table view with icons like in Nautilus method pane.These icons are buttons based on commands which are marked with my instances.Actual table decoration is delegated to command itself:		command decorateTableCell: anItemCellMorph using: selfBy default command just builds single iconic button using default menu icon. So you can simply implement #defaultMenuIconName on class side of command and it will be shown in the table.But if you want special icon (different from menu) then you can redefine instance side method #tableCellIcon. At the end iconic button is added into the cell morph: 	command decorateTableCell: anItemCellMorph with: aMorphBy default icon is added as cell definition morph:	anItemCellMorph definitionMorph: aMorphBut command subclasses can define it as extra tool:	anItemCellMorph addExtraTool: aMorphCommand subclasses can redefine default decoration logic and build completally different UI items instead of iconic button. They should override method:- createTableCellButtonWith: anIcon using: aCommandActivatorMultiple commands can override decorated elements of each others. To manage such overrides you can specify priority for decoration:	^ClyTableIconCommandActivation priority: 100 for: ClyMethodScope.The command with most priority will decorate table at last order which means that their UI elements will present in table.To implement correct order of my instances in registry I provide special sorted container for this. It manages instances in opposite order then default one"
"FTExampleMethodListDataSource","I'm an example of fast table, who will use a list of methods as data source elements.self example1.self example2.self example3.self example4.self example5."
"Character","I represent a character by storing its associated Unicode. The first 256 characters are created uniquely, so that all instances of latin1 characters ($R, for example) are identical.	The code point is based on Unicode.  Since Unicode is 21-bit wide character set, we have several bits available for other information.  As the Unicode Standard  states, a Unicode code point doesn't carry the language information.  This is going to be a problem with the languages so called CJK (Chinese, Japanese, Korean.  Or often CJKV including Vietnamese).  Since the characters of those languages are unified and given the same code point, it is impossible to display a bare Unicode code point in an inspector or such tools.  To utilize the extra available bits, we use them for identifying the languages.  Since the old implementation uses the bits to identify the character encoding, the bits are sometimes called ""encoding tag"" or neutrally ""leading char"", but the bits rigidly denotes the concept of languages.	The other languages can have the language tag if you like.  This will help to break the large default font (font set) into separately loadable chunk of fonts.  However, it is open to the each native speakers and writers to decide how to define the character equality, since the same Unicode code point may have different language tag thus simple #= comparison may return false.I represent a character by storing its associated ASCII code (extended to 256 codes). My instances are created uniquely, so that all instances of a character ($R, for example) are identical."
"WeakSubscriptionBuilder","I am a wrapper around an Announcer, used to create weak subscriptions at subscription time.Use me like this:anAnnouncer weak subscribe: Announcement send: #foo to: barObject.I raise an error for block subscriptions, as they require non-existing Ephemeron support to function correctly."
"IceGitLocalBranch",""
"IdentityNewValueHolder","I am a special because I announce changes only if the new value set is different from the current value."
"SearchableListTest",""
"ClyMethodCounterGroupProvider","I provide ""counters"" method group which put together all methods with installed execution counters"
"FileExistsException","Notify when file exists"
"LGitTransportCallback",""
"IceTipDiffContext",""
"ColorArray","An array of colors"
"RBNotEnvironment","I am the complement of RBEnvironments, a logical NOT. That is: entity A is in this environment if it is in NOT in the environment I am constructed from.Do not construct instances of me directly, use method #not for an existing environment:env1 not -> a RBNotEnvironment."
"ZnStringEntity","I am ZnStringEntity, a concrete HTTP Entity based on a String.It is used to hold textual (non-binary) data.I am a ZnEntity.Optionally, an encoding is used to convert to and from bytes.The default encoding it UTF-8.Note that content length is the encoded byte count, not the number of characters in the string.Part of Zinc HTTP Components."
"DiffMorph","I am a morph useful for visualising differences between two strings.When a classContext: is setted, the strings are highlighted using such contextual information."
"ClassDiffBuilder","I'm like TextDiffBuilder, but I split the input text by Character >> #separators, instead of new lines. I'm probably ment to create diffs of class definitions."
"Error",">From the ANSI standard:This protocol describes the behavior of instances of class Error. These are used to represent error conditions that prevent the normal continuation of processing. Actual error exceptions used by an application may be subclasses of this class.As Error is explicitly specified  to be subclassable, conforming implementations must implement its behavior in a non-fragile manner.Additional notes:Error>defaultAction uses an explicit test for the presence of the Debugger class to decide whether or not it is in development mode.  In the future, TFEI hopes to enhance the semantics of #defaultAction to improve support for pluggable default handlers."
"IcePullRemoteCommand","I'm a command to perform a pull from a remote."
"MenubarSeparatorMorph","Description--------------------I am a simple morph used by the MenubarMorph to add some separators. Use me via the #addSeparator method of MenubarMorph."
"RBProgramNodeVisitor","RBProgramNodeVisitor is an abstract visitor for the RBProgramNodes."
"FileSystemGuide","I am an abstract superclass for objects that fulfill the Guide role in the Guide/Visitor pattern. My subclasses know how to traverse a filesystem in a specific order, ""showing"" the files and directories they encounter to a visitor.visitor	An object that fulfills the Visitor role and implements the visitor protocol.	work	An OrderedCollection, used to keep track of filesystem nodes that have not yet been visited"
"RBRefactoringTest",""
"ExternalClipboard","An ExternalClipboard is the abstract superclass for the platform specific clipboards based on the clipboard plugin (former ExtendedClipboardInterface originally developed for Sophie).Instance Variables	clipboard:		SmallIntegerclipboard	- handle for the external clipboard. If 0 the external clipboard is invalid"
"MCSnapshotBrowser","Browser for snapshots"
"ClyProjectContextOfFullBrowser","I am a context of selected projects in full browser"
"IceTipTreeLinkFilterFunction","I'm a filter function that links with a text presenter. "
"GLMMorphicWrapperRenderer",""
"DialogItemsChooserUI","unselectedItems is the original list to search inselectItems is the list of the selected items"
"PragmaCollector","A PragmaCollector is used in order to collect some Pragma instances. A PragmaCollector makes use of SystemChangeNotifier event notifications in order to maintain its contents up-to-date according to its filter: when a method is added, removed or updated, if the method is defined with a pragma which is acceptable according to its filter, then the collector contents is updated. A PragmaCollector makes use of an announcer in order to notify all registered listeners when a pragma is added, removed or updated. A PragmaAnnouncement is announced when a Pragma is added, removed or updated. Corresponding announcement classes are, respectiveley, PragmaAdded, PragmaRemoved and PragmaUpdated. Explore the result of the expression below. In the collected instance variable should be stored all pragmas of the system:---------------------------(PragmaCollector filter: [:pragma | true]) reset---------------------------In the following example, collected pragma are thoses with the 'primitive:' keyword (<primitive:>)---------------------------(PragmaCollector filter: [:prg | prg keyword = 'primitive:']) reset---------------------------Instance Variables		announcer:		<Announcer>		collected:		<Collection>	filter:			<Block or MessageSend>				announcer	the announcer which is used to announce the adding, the removing or the updating of a method with an acceptable pragma declarationcollected			the current collection of Pragma	filter	a block or a message send which is used in order to filter the pragma. This is a one argument valuable. When evaluated, the candidate pragam is passed as argument and the result must be a boolean. 	"
"ManifestCollectionsStack","I only contain a Stack implementation."
"ZnCharacterReadWriteStream","I am a read-write character stream. I am mainly used to open the Pharo source and changes files."
"RBSendsDifferentSuperRule","Checks for methods whose source sends a different super message.A common example of this is in creation methods. You might define a method such as:	createInstance		^super new initializeIf the new method is not defined in the class, you should probably rewrite this to use self instead. Also, if the new method is defined, you might question why you need to send new to the superclass instead of to the class."
"GTSpotterAllCandidatesRemoved",""
"RBBlockNode","RBBlockNode is an AST node that represents a block ""[...]"".Like RBMethodNode, the scope attribute is only valid after doing a semantic analyzing step.Instance Variables:	arguments	<SequenceableCollection of: RBVariableNode>	the arguments for the block	bar	<Integer | nil>	position of the | after the arguments	body	<RBSequenceNode>	the code inside the block	colons	<SequenceableCollection of: Integer>	positions of each : before each argument	left	<Integer>	position of [	right	<Integer>	position of ]	scope	<OCBlockScope | OCOptimizedBlockScope | nil> the scope associated with this code of this block"
"MCVersionNameAndMessageRequest","Notify to requests for version name and message"
"DelayMicrosecondTicker","I interface to the microsecond based VM primitives."
"IceConvertFormatAction",""
"FFIBool","Bool type.Represented as single byte on C side."
"FTOutlineDataSource","I'm a data source which will have many list of elements. My goal is to allow a FTOutlineTable to render me with separators between my differents items.Users might want to subclass me to have better options."
"NECContext","A completion is started by the ECController. The controller creates me to compute the context of the completion. The most important information about the context are the receiverClass and the completionToken. I create a ECModel or subclass when requested by the 'model' method.I use SHParser and SHRange to parse the text input.narrowString holds the current part of the text that should be completed (be it a class, variable or methods). For example in the case of a message:     selectors are all the selectors that could be used.    entries are the selectors that match the narrowString.My method createModel is important since it is the one deciding the kind of model that will be used: - none empty when no completion should be done- untyped when basically we have no clue about the receiver, (structurally xx|)- typed when the receiver is know (structurally var xx|)"
"PSMCClassChangeWrapper","Wrapper for class changes"
"SugsBrowseTraitUsers","I know how to browse users of a trait"
"MFClassA","I'm a dummy class just to have a package that is not empty."
"HiRulerBuilder","I know how to build rulers."
"IceCheckoutStrategy","I'm a general strategy to perform checkouts. In Pharo, checkouts are a lot more complicated than a simple checkout in file system, since we have packages installed that corresponds with the commit of reference.Doing a checkout then means also introduce new versions into the image, and there are different possible strategies to perform this task in a safe way. My children will implement method #checkoutPackagesOn: to perform this task."
"GLMMorphicPharoCodeRenderer",""
"OSTouchTwoFingersPinchDetector","I am detecting the pinches made with two fingers.I send these event back to my handler: 	- OSTouchTwoFingersPinchBeginEvent 	- OSTouchTwoFingersPinchMoveEvent 	- OSTouchTwoFingersPinchEndEvent "
"GRVariableAssignedLiteralRule","If a variable is only assigned a single literal value then that variable is either nil or that literal value. If the variable is always initialized with that literal value, then you could replace each variable reference with a message send to get the value. If the variable can also be nil, then you might want to replace that variable with another that stores true or false depending on whether the old variable had been assigned."
"TestResource","Normally a test will set up all the objects it needs and tear them down again after it has run.  This self-containedness makes a test more robust.  Use TestResources only for objects that are needed by several tests and that are too 'expensive' (in time or otherwise) to recreate and destroy for each test.  A viable approach is to develop the code in MyTestCase's #setUp and #tearDown methods, then at some point refactor the code into the #setUp and #tearDown of a TestResource whose class is added to MyTestCase class>>resource method.TestResource uses the singleton pattern.  A TestResource class will set up a single instance of itself when first requested and tear it down again at the end of TestSuite>>run (or TestCase>>run, >>debug and >>debugAsFailure).  Normally, a TestResource, once setUp, remains active during the running of all remaining tests and is #reset after all tests have run.  For an exception, see subclass CompetingResource in SUnitResourcePatterns.  Users can choose to #reset a resource in the #tearDown of a test that alters it, sacrificing the performance gain of having a single #setUp of the resource for the certainty that other tests using it will not see the alterations.  Generally however, this should be the exception:  if you need to reset the resource for every test that uses it, its code should just be part of your test's #setUp and #tearDown code.To use, create a subclass of TestResource and override the following:	- TestCase class>>resources, to return a collection including the TestResource class, for all test case classes that need it		* a TestCase' resources are set up in the order returned and torn down in the reverse order	- TestResource class>>resources, if the resource itself always needs some other resource to be present before it can set up		* a TestResource's resource are set up before it and torn down after it, and are set up in the order returned and torn down in the reverse order	- TestResource>>setUp and tearDown, to define initial and final behaviour (just like a test)	- TestResource>>isAvailable, to return true if it is and false if it isn't (the framework calls this after setUp);  ideally, this call should not change the resource' state - that should be done in setUpTestResource implements the singleton pattern in its class-side #isAvailable and #reset methods.  Do not override these when creating specific resources;  unless you are developing a whole new pattern of use, it will always be correct to override instance-side #setUp, #tearDown and #isAvailable, and dangerous to override class>>isAvailable, class>>isAlreadyAvailable and class>>reset.Generally, users do not code interactions with a test's resources during the running of a test.  Code that reads a resource' values while leaving its state strictly alone is safe enough.  A test must leave a resource in a clean state:  always use #reset if a test must protect later-running tests from unsafe changes (and review whether in such a case a resource is the right thing to use in the first place).See my superclass' comment for assertion and logging information."
"CairoFontOptions","i represent various font options exposed by cairo library"
"RBSplitCascadeRefactoringTest","Test refactoring for splitting a cascade message send in multiple messages.The method #methodWithCascades is not called, it is just a ""test data"" method used as target for the refactoring operation."
"ManifestCollectionsSupport","Some basic classes used in collections: Link, Associtation, Weak*, CharacterSet, SetElement, etc."
"RubPluggableTextMorph","This class was introduced to ease the migration to Rubric.It is still based on change/update.Try to not use it "
"TimeMeasuringTest",""
"EpDashboardModel","I am deprecated. Please use my superclass"
"ZnEntityWriter","I am ZnEntityWriter, I help writing ZnEntities to a stream given meta data in headers.I deal with chunking and gzip encoding.Part of Zinc HTTP Components."
"GLMBrickPopupSuccessThemer",""
"ScheduleTest","SUnit tests for recurring schedules (class Schedule)."
"IceWorkingCopy","I represent and manage all code that is loaded in the current image. My main responsibilities are the bookeeping of loaded packages, the loaded commits, the modification and diffs, and the main entry point for committing code.! Adding and Loading PackagesAdding a working copy to a repository is achieved by the message addPackageNamed:  repository addPackageNamed: aPackageNameString.I can be later on queried using the following messages  repository includesPackageNamed: aPackageNameString.  repository isLoadedPackageNamed: aPackageNameString.  repository packageNames.Packages already in a repository can be loaded and unloaded with:  repository checkoutPackageNamed: aPackageNameString.  repository unloadPackageNamed: aPackageNameString.And queried with:  repository loadedPackages.! The Working Copy StateThe working copy can be in different states depending on the repository and the package. It is the working copy state reponsibility to decide wether we can commit, if we are on a merge, and so on... The working copy state can be obtained through the message #workingCopyState.  workingCopy workingCopyState.The working copy state is calculated every time that it is called. This is because the state of the repository can be modified from outside the system (e.g.,  the command line or another tool). In any case, calculating the working copy state is fast enough to be executed on-line even for big repositories such as Pharo's. The working copy state is calculated from the status of each of its packages. It was decided like this because it may happen that somebody downloads a package from different commits. If this situation changes in the future, this is a good point for simplification.Working copy states are instances of IceWorkingCopyState. Check it and its subclasses for more information.! The Current Commit(s)A crucial information bookeept by the working copy is the current loaded commit(s). Indeed, depending on the state of the packages and the loaded code, there may be a single current commit or several: - having a single commit means that all loaded packages were loaded from the same commit - having multiple commits mean that we are in a merge situation - having no commit means that no packages were loaded or that they were loaded from another mechanism such as monticello In general terms, the current commit should not be accessed directly.The following methods allow for testing and accessing the current commits:  repository hasSingleCommit.  repository hasUnknownCommit.  repository isInMerge.  repository referenceCommit.  repository referenceCommits.!  Changes and CommittingThe working copy bookkeeps the loaded packages and their state and thus it provides methods to query and commit those changes into the repository.  repository modifiedPackages.  repository isModified.  repository commitWithMessage: aMessageString.  repository commitChanges: aListOfChanges withMessage: aMessagString.  repository commitPackages: aListOfPackages withMessage: aMessageString.NOTICE that commits can only be done if the following is true: - repositroy HEAD is not detached (i.e., it is a branch) - I am not detached. I.e., my reference commit (in case of a merge, it should be the first one) is the same commit as #headCommitSuch validations can be verified with the following messages  repository validateCanCommit.  repository isDetached.!  MergingThe main entry point for merging a commit is the working copy, through the method #mergeCommit:. This method will, delegating to the working copy state, verify that the commit needs to be merged, can be merged, and if it has conflicts. In case there are no conflicts an automatic merge will be issued by default.  workingCopy mergeCommit: aCommit.IMPORTANT IMPLEMENTATION NOTE. The version information and commits are so far stored inside MCWorkingCopy and co. Check #updatePackage:toCommits:"
"IceGitHubTreeOpenOnGithubCommand","Description--------------------I am a command opening the repository page of the remote on GitHub if possible."
"SpecDemoButtonsPage","Demo page for SpecDemoButtonsPresenter"
"CmdCommandActivatorTests",""
"FLWordObjectCluster","I am the generic cluster for storing and loading variable word objects. Most word-like objects are subclasses from ArrayedCollection. Hence, we may have used the method #writeOn: to serialize, and #newFromStream: to materialize. #writeOn: is slow because it ALWAYS encode wors in a big endian format. Most machines today are even little endian. Even worst, #newFromStream: has to always do a #restoreEndianness. #newFromStream: is fast because it uses the method #nextWordsInto: which is a hack but that is really fast. The problem is that #nextWordsInto: has to always do the #restoreEndianness when we are in little endian machines (most of the time).Hence, this cluster provives the best of both worlds: the serialization is done with a platform-dependen way, that is, the endianness will be the same of the machine where we are serializing. In addition, we serialize with the same hack that #nextWordsInto: uses, that is, the Bitmap >> hackBits:And the materialization will use a variation of #nextWordsInto:  (#fuelNextWordsInto:) that ONLY does the #restoreEndianness if the machine where we are materializing has a different endianness than where we have serialized the object. To do this, while serializing, we store in the header of the Fuel stream, the endianness. Then in materialization, we compare agains that. Conclusion: we only restore endianness when needed.Notice, in addition, that the method #newFromStream: sends the message #restoreEndianness. This method EXPECTS that the object was serialized in big endian format, and it will only change the endianness if we are materializing in a little endian machine. This means that if you serialize in little endian and materialize in big endian, you are screw.  For this reason, this cluster uses a method that always change the endianness, Bitmap class >> swapBytesIn:from:to: Future work: maybe we can modify and use the Bitmap hackBits:   not only for materialization but also for serialization. "
"GLMExplicitBrowserCopyTest",""
"CmdOpenStandardContextMenuCommand","I am a command to open standard context menu.I use CmdContextMenuCommandActivation to collect menu items."
"MetacelloPrePostLoadDirective",""
"VTermOutputDriver","I convert high-level terminal commands like moving the cursor or setting the color to characters sequences understood by the terminal.Furthermore I do some bookkeeping to reduce the number of characters sent to the terminal.Example of usage:	out := VTermOutputDriver stdout.	out << 'normal text'.	out lf.	'red text' do: [ :c | out color256: Color red. out << c ].	out lf.	'bold text' do: [ :c | out bold. out << c ].	out clear.	out lf."
"TCPSocketEchoTest","TCPSocketEchoTest is both a unit test and an example.It implements and tests a TCP echo service.Input is read and send back in response.You can also run the example manually,by inspecting each expression separately.  TCPSocketEchoTest new runServer.  TCPSocketEchoTest new clientSend: 'Hello @ ', Time now asString.  TCPSocketEchoTest new clientSend: #quit.Each TCP client connection creates a worker process on the server handling the connection until it is closed. Each worker process reads input one time and sends it back.The server runs until it receives quit as input. If necessary, use the Process Browser to terminate a running server.Note: this example deliberately does not use SocketStream to show how to use Socket directly. In practice however, you should use SocketStream."
"AthensMoveSegment","Move segment always indicates starting of a new contour.If contour ends with close command, then my insntance will have 'closed' flag set to true.See AthensPathBuilder , which is responsible for building paths."
"GTSpotterHelp","A helper class containing the help for GT Spotter."
"ZdcPluginMissing","I am ZdcPluginMissing, signaled when a plugin required by Zodiac is missing.You can find more information on Zodiac's website	http://zdc.stfx.eu"
"HandleMorph","A HandleMorph provides mouse-up control behavior."
"ClyTypedScopeTestCase",""
"FileDoesNotExist","I am raised when an operation is attempted on a file that does not exist. This includes cases where a file operation is attempted on a directory."
"IceTipCommand","I'm a generic iceberg command. My children implement real functionality available through iceberg tools."
"MetacelloProjectRegistry",""
"GTEventRecorderError","I am an abstract class for all errors related to GT-EventRecorder."
"RBRenameInstanceVariableChange","I am a refactory change for a instance variable renaming. The RBRefactory api is implemented in my super class, I just definethe concrete ""instance variable"" renaming."
"ClySingleMethodGroupProvider","I am a root of hierarchy of simple method group providers which always supply single group for given class scope.I simplify implementation of simple plugins which only want to define one extra method group. They should implement two methods: - createMethodQueryFrom: aClassScopeIt should return method query representing methods for the group.- createMethodGroupFor: aMethodQuery from: aClassScopeIt should create group instance using given scope. The class scope is given to build subgroups query if needed. Any method group can be expanded to children subgroupsAll my subclasses are not static by default. So they particupate in analysis of all methods in the scope"
"GLMListingPresentation","This is the abstract class for a presentation that is supposed to show a list of elements. Thus, the displayValue should be a list.Instance Variables:	tagsBlock	<Object>	searchBlock	<MocketryProxy | Object | SMProxy>	filterBlock	<MocketryProxy | Object | SMProxy>	amountToShowBlock	<Object>	allowsMultipleSelection	<Boolean>	tagsFilterBlock	<MocketryProxy | Object | SMProxy>	allowsDeselection	<Boolean>	tagsStyle	<String>	helpMessage	<String>"
"ZdcSimpleSocketStreamTests","ZdcSimpleSocketStreamTests tests ZdcSimpleSocketStream"
"SettingTree","A SettingTree is responsible for the building of system setting trees from a collection of pragma.Built tree nodes are instances of SettingNode. Built trees are suitable for tree browsing with the help of a MorphTreeMorph (see SettingBrowser>>treeMorphIn: and SettingBrowser>>roots to know how a SettingBrowser is initializing its MorphTreeMorph with the help of a SettingTree). Below, two examples of tree building with a SettingCollector are shown.---------------(SettingTree acceptableKeywords: #(#'systemsettings')) settingTreeRoots. ""get system setting trees""---------------Instance Variables	collector		<PragmaCollector>	nodeList		<A list of SettingNode>"
"HEInstaller","I am the entry point to load a package of Hermes.I am the basic implementation, I can only handle basic cases:- If there is a new undeclared I produce an error.- If there is an existing element I produce an error.For more extended options check HEExtendedEnvironmentExample: 	file := 'aFile.hermes'.	installer := HEInstaller new.		reader := HEBinaryReader new		stream: (File named: file) readStream;		yourself.	readPackage := HEPackage readFrom: reader.	installer installPackage: readPackage"
"SDL2Error","I am the Pharo Local Exception return that something wrong in SDL2"
"SycGenerateVariableAccessorCommand","I am a command to generate accessors for given variables"
"EyeSyntaxTreeInspector","I am an inspector showing abstract syntax trees. Instead of showing the full complexity, show the structure of the code by only showing the nodes.As an example, inspect 	(Object>>#halt) ast"
"TTLCacheTests",""
"ZdcAbstractSSLSession","I am ZdcAbstractSSLSession, an object managing the secure communication between two parties.I define the abstract interface for my subclasses.More specifically, I handle connection setup handshaking as well as the encryptionand decryption of data travelling between two parties.Apart from instanciating and later explicitely destroying me, I am used by feeding data into me using the methods in my operations protocol. These might result in data thathas to be sent to the other side.I am propably too primitive to be used directly, see ZdcSecureSocketStream for a higher level client."
"ClySUnitMethodMenuGroup",""
"ExampleClassVariable","I am an example for a class variable that stores the value in the variable.(same semantics as normal variables but using reflective code path for testing)"
"RBClassEnvironment","I am a RBBrowserEnvironment on a set of classes.I containt all entities of this set.Example:(RBBrowserEnvironment new) forClasses: Number withAllSubclasses."
"RBPatternVariableNode","RBPatternVariableNode is an AST node that is used to match several other types of nodes (literals, variables, value nodes, statement nodes, and sequences of statement nodes).The different types of matches are determined by the name of the node. If the name contains a # character, then it will match a literal. If it contains, a . then it matches statements. If it contains no extra characters, then it matches only variables. These options are mutually exclusive.The @ character can be combined with the name to match lists of items. If combined with the . character, then it will match a list of statement nodes (0 or more). If used without the . or # character, then it matches anything except for list of statements. Combining the @ with the # is not supported.Adding another ` in the name will cause the search/replace to look for more matches inside the node that this node matched. This option should not be used for top level expressions since that would cause infinite recursion (e.g., searching only for ""``@anything"").Instance Variables:	isAnything	<Boolean>	can we match any type of node	isList	<Boolean>	can we match a list of items (@)	isLiteral	<Boolean>	only match a literal node (#)	isStatement	<Boolean>	only match statements (.)	recurseInto	<Boolean>	search for more matches in the node we match (`)"
"ToolShortcutsCategory","ToolShortcuts defines some global keyboard shortcuts to open tools for workspaces, system browser, monticello browser, settings, transcript and also image saving. "
"MetaLinkTargetResolverTests","Note that for API with options the same methods are called for objects and classes, so the test is made only once."
"PointerEyeElement","I am an element that wraps host and value in a PointerWrapper. Following back pointers stops at the wrapper, not showing the framwork related references e.g. of the tree."
"GLMExplicitBrowserTest",""
"NECContextTest",""
"FTDataSource","I am an abtract class to define the basic implementation of a DataSource. A DataSource is a Model for a FTTableMorph. My purpose is to provide content to it .Description--------------------My subclasses will store some values that will be use to feed a FTTableMorph. I work with a FTTableMorph so I store one.Public API and Key Messages--------------------- #elementAt: anIndex 		return an object to display for an index in the table.		- #numberOfRows 			return the max number of rows inside the table.			- #cellColumn: index1 row: idex2 		return a Morph (probably a FTCellMorph) that will be display in the table. The Morph need to contains the object at index2 and everything the user want to display for a data.		- #newDataSourceMatching: aRegex / #searchText: aString 		these methods are use with a FTFunction. For more information see FTSeachFunction or FTFilterFunction for mone information.Example-------------------This is an Abstract class, see subclasses for examples. Internal Representation and Key Implementation Points.-------------------    Instance Variables	table:		A FTTableMorph that use the dataSource."
"ClyTestedClass2","I am example of class which is covered by tests using Test sufix"
"FreeTypeFont","A FreeType font"
"MCTestCase","Abstract superclass for monticello tests"
"WorldMorph","A WorldMorph is a special morph that represents the world.It is a paste up and it holds active hand.A World, the entire Smalltalk screen, is a PasteUpMorph.  A World responds true to isWorld."
"SimpleBalloonMorph","A simple ballon morph with straight segments"
"ChunkFileFormatParser","I represent the chunk file format.  Right now I know how to parse chunks from a readStream, but not how to write them."
"CollectionTest","Basic Collection tests"
"HowToContributeHelp","A help topic on how to contribute"
"ClassRenamed","the annoucement will be emitted when renaming a class or a trait using:  	=> RenameClassRefactoring >> rename:to:	=> class>>rename:The corresponding event is raised in: SystemDictionary>>renameClass:from:to:"
"IceTipCommitBrowser","I'm a browser to commit changes to a repository.(self onRepository: IceRepository registry anyOne) openWithSpec"
"Latin9Environment","This class provides the support for the languages in 'Latin-9' category."
"IceTipReadOnlyForm","I'm a ""read only form"", used to display data in a more readable way than a list morph or a panel morph.I receive a list of ""label"" and ""values"", being label a string and value a string or text object.I can show lists of elements as this example shows: IceTipReadOnlyForm new 	addLabel: 'Commit:' value: 'a test';	addLabel: 'Parents:' value: '123456789';	addLabel: 'Author:' value: 'Some Author <author@email.net>';	addLabel: 'Date:' value: DateAndTime now asStringYMDHM;	addLabel: 'Labels:' value: '';	addLabel: 'Comment' value: String loremIpsum;	openWithSpec.	"
"MetacelloToolBoxBaselineConstructor",""
"RBRemoveMethodTransformation","Removes a method from a class. Only the selector of the method is needed.Usage:| transformation |transformation := (RBRemoveMethodTransformation 		selector: #transform		from: RBRemoveMethodTransformation)		transform. (ChangesBrowser changes: transformation model changes changes) openPreconditions:Checks whether there are any references to this method"
"MetacelloMCVersionSpec",""
"FFIMethodArgument","I implement the push strategy for method arguments who are simple variables."
"ClyGoToSpotterCandidate","I represent spotter search candidate which performs goto operation.Actual action is defined in actionBlock by ClySpotterModel.  Internal Representation and Key Implementation Points.    Instance Variables	actionBlock:		<BlockClosure>	icon:		<Form>	name:		<String>"
"RBContainsRule","Checks for the common code fragment: ""(aCollection detect: [:each | ''some condition''] ifNone: [nil]) ~= nil"". contains: can simplify this code to ""aCollection contains: [:each | ''some condition'']"". Not only is the contains: variant shorter, it better signifies what the code is doing"
"AthensPathConverter","i am a base class for path conversion. i take a path as input and producing a path commands as output.My default implementation just passing all path commands without changes to destination without any conversionExample of use: converter := AthensXYZConverter dest: (AthensPolygonPath new).convertedPath := converter convert: sourcePath.You can chain multiple converters:basicConverter := AthensZYXConv dest: AthensPolygonPath new. compoundConverter := AthensABCConverter dest: basicConverter.compoundConverter convert: somePathin this case, an initial conversion is performed by instance of AthensABCConverter, and then conversion results are passed down to AthensZYXConv,and then finally to instance of AthensPolygonPath."
"FIFOQueueTests","SUnit tests for FIFO queues"
"GTFilterSubstring",""
"ZnHeaders","I am ZnHeaders.I am a collection of HTTP headers.I can be used for generating and parsing.Header names are normalized and used case insensitive.Header values can be multi-valued.Part of Zinc HTTP Components."
"GLMFormSubmitted",""
"MetacelloSpecTestCase",""
"FTRootItemsStrategy","I am a Strategy that will use the function on the roots item only.Description-----------------------I will search in the roots item of the tree.As said in my superclass I am use by a FTTreeDataSource to help with a FTFunction.Public API and Key Messages------------------------ #realSearch 	is the method that will launch the search.Example-----------------------	| ds |	ds := FTTreeDataSource		roots:			((ProtoObject allSubclasses sort: [ :a :b | a asString < b asString ])				reject: [ :e | e asString endsWith: 'class' ])		children: [ :item | item subclasses sort: [ :a :b | a asString < b asString ] ].	ds searchStrategy: #rootsOnly. ""This will say to the FTTreeDataSource to use me.""	FTTableMorph new		extent: 200 @ 400;		dataSource: ds;		explicitFunction;		openInWindow "
"SDL_KeyDownEvent","SDL2 library structure"
"ZnClientConnectionClosedEvent","ZnClientConnectionClosedEvent signals that a client side connection to address:port is closed."
"IceGitHubNilPullRequest","Description--------------------I am a nil PR that can be used when the user has no PR to see."
"TabManagerMorph","I am the entry point for tabs.I am composed of a TabBar and a Morph used as a canvas to render the morph represented by the selected tab.I am very stupid (as you can see only four methods). I just listen to selected tab, and render it"
"MetacelloFetchingMCSpecLoader",""
"MetacelloProjectSpecLoadConflict",""
"OSWindowMaximizedEvent","I am delivered when the window got maximized."
"LGit_GIT_ELOCKED",""
"LGitCloneLocalTypeEnum",""
"SycNotRemoveMethodStrategy","I am simple cancel method remove operation by doing nothing"
"CompositeFillStyle","Fillstyle supporting compositing of multiple sub-fillstyles."
"FFITestCallback",""
"RecursionStopperTest","SUnit tests for class  RecursionStopper"
"ChangeSet","ChangeSets keep track of the changes made to a system, so they can be written on a file as source code (a ""fileOut""). ---preamble and postscript:  two strings that serve as prefix (useful for documentation) and suffix (useful for doits) to the fileout of the changeSet.changeRecords -  Dictionary {class name -> a ClassChangeRecord}.These classChangeRecords (qv) remember all of the system changes."
"RBDeprecateMethodRefactoring","I am a refactoring to mark a method as deprecated and replace the implementation by a call to a new method.oldSelector	- is a selector which shouldn't be used anymore, it's deprecatednewSelector	- is a selector which will be used instead of a deprecated oneThe implementation of oldSelector is replaced by a call to#deprecated:on:in:  and the newSelector.The message #deprecated:on:in:  will be used to inform the user about the deprecation.Note: It is recommended to use this refactoring only if number of arguments is either equal in both selectors, or the new one has no arguments at all.If new selector has fewer number of arguments than the old one, it may lead to unexpected results.If you use it in other conditions an error may be be occured."
"GLMNoBrowserTest",""
"GTSpotterExceptionHandlerNotFound",""
"LGitPushNegotiationCallback",""
"DisplayObject","The abstract protocol for most display primitives that are used by Views for presenting information on the screen."
"TraitMethodDescription","Used by Trait to encapsulates a collection of methods for one particular selector when querying for changes. According to the number and kind of those methods a provided method exists, there is a conflict or there are no provided nor conflicting methods at all. I provide the interface to query for those situations, e.g., effectiveMethod returns the provided method or the conflict marker method."
"ZipConstants","This class defines magic numbers taken from RFC1951 [1b], and also possibly RFC1950 [1a] & RFC1952 [1c]. It presets some dictionary structures as described at [1a] 8.1. A class can import these bindings as 'class variables' by including the following in its class definition:    poolDictionaries: 'ZipFileConstants' Following are source references to these constants contained within several class side initialization methods. (These might be better spread through out those methods as time permits) initializeDeflateConstants     WindowSize [2e]""w_size"", [2a]""windowBits is the base two logarithm of windowSize where default windowBits=15""     WindowMask [2e]""w_mask""     MaxDistance [2e]""MAX_DIST""     MinMatch [2c]     MaxMatch [2c]     HashBits [2e]""hash_bits""     HashMask [2e]""hash_mask""     HashShift [2e]""hash_shift"" initializeDistanceCodes     BaseDistance [2f]     DistanceCodes [2f] initializeExtraBits     ExtraLengthBits [1]3.2.5, [2b]     ExtraDistanceBits [1]3.2.5, [2b]     ExtraBitLengthBits [2b]     BitLengthOrder [1]3.2.7, [2b] initializeFixedTrees     [1]3.2.6 initializeWriteStreamConstants     MaxBits [2d]     MaxBitLengthBits [2b]     EndBlock [2b]     StoredBlock [2c]     FixedBlock [2c]     DynamicBlock [2c] [1]3.2.3""BTYPE""     NumLiterals     MaxLengthCodes [2e]     MaxDistCodes [2e]     MaxBitLengthCodes [2e]     MaxLiteralCodes     Repeat3To6 [2b]     Repeat3To10 [2b]     Repeat11To138 [2b] [1a]  ""ZLIB Compressed Data Format Specification version 3.3"" http://www.ietf.org/rfc/rfc1950.txt[1b] ""DEFLATE Compressed Data Format Specification version 1.3"" http://www.ietf.org/rfc/rfc1951.txt[1c] ""GZIP file format specification version 4.3"" http://www.ietf.org/rfc/rfc1952.txt[2] ZLIB Source Code http://zlib.net/zlib-1.2.5.tar.gz[2a] zlib.h [2b] trees.c [2c] zutil.h [2d] inftrees.c [2e] deflate.h [2f] trees.h "
"DATarjanAlgorithm","A class to do Tarjan Algorithm on a PDPackageRelation, in order to detect strongly connected components.Give a package dependency graph (PDPackageRelationGraph)  in entry of the message run to run the Tarjan algorithm and retrieve all the strongly connected components graph."
"ASTCacheResetTest",""
"STONShortListWriter","STONShortArrayWriter helps in writing short array based STON representations."
"MCPatchOperation","I'm an abstract class that represent an single delta element between two packages: removal, addition or modification."
"FLNegative16SmallIntegerCluster","A cluster of unsigned int 16bit"
"ClyCritiqueQuery","I am a root of critique queries hierarchy.My subclasses are supposed to return critiques instances.I implement system changes processing and metadata collection logic."
"UITheme","Common superclass for User Interface themes. Provides methods for creating new morphs in a standard way, various ""services"" like a file dialog, message dialogs etc. and also methods for customising aspects of the appearance of various morphs.Though conceptually abstract, no code is ""missing"". Subclasses, therefore, should override the aspects they wish to change."
"KMModifiedKeyCombination","I represent key combinations combining a single key + a modifier.The modifier could be a single modifier key (look at my subclasses) or a combination of them. For example, valid modified key combinations could be:- shift + a- ctrl + shift + cTo create a modified key combinations use the #command, #alt, #control or #shift messages. Like for example:$a command$b shift$1 control$z alt"
"ClyResetMethodTagForEditorCommand",""
"MalDisjointSetNode",""
"GLMWizardStep","A step in a wizard"
"ManifestCollectionsStrings","Contains String, ByteString, Symbol, ByteSymbol, WideSymbol and WideString"
"RGMetaclassDefinitionTest","SUnit tests for Ring metaclass definitions"
"IRVisitorTest",""
"GTSUnitDebuggerJumpToTestAction","I implement a debugging action for selecting in the stack the context containing the test  method.  I am only valid if the context that triggered the failed assertion is diffferent than the context containing the test method (e.g., the assertion method was called from an utility method of the test)"
"SettingDontTranslateDescriptionRule","When defining a description of a setting, you don't need to translate it, and this will be done by the setting itself."
"RBCreateAccessorsForVariableRefactoring","I am a refactoring for creating accessors for variables.I am used by a couple of other refactorings  creating new variables and accessors.My procondition is that the variable name is defined for this class."
"SDL_Surface","SDL2 library structure"
"FTBasicTreeListDataSource","Simple tree list data source.For example usage see methods on the class side under the protocol ""examples"". "
"SycCopyClassCommand","I am a command to copy given class using given name. Internal Representation and Key Implementation Points.    Instance Variables	newClassName:		<String>	originalClass:		<Class>	resultClass:		<Class>"
"SugsSyntaxErrorDebuggerContext","I know how to talk with a syntax error debugger and extract the information needed by the suggestions"
"ClyExampleScript","I represent the action of the performed on class side methods marked with pragma <example> or with selector beginning with example word.example1	BorderedMorph new openInWorld 	or foo	<example>		BorderedMorph new openInWorld	will open both a new morph in the world. Note that if you add in addition the pragma <sampleInstance> you will get an inspector on the result. "
"GLMRubTextScrollPane",""
"GLMFoundationBrick","A GLMFoundationBrick is connection layer between brick widgets and morphic.See GLMBrick class comment for more info.Instance Variables	brickRoot:		<Object>brickRoot	- xxxxx"
"ProtoObjectTest","This is the unit test for the class ProtoObject. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"MCMockDefinition","A mock definition used for testing purposes"
"FFIUInt8","I'm an unsigned byte."
"FFIExternalEnumerationTests","Tests for external enumerations"
"OrientedFillStyle","OrientedFill is an abstract superclass for fills which can be aligned appropriately.Instance variables:	origin	<Point>	The point at which to align the fill.	direction <Point>	The direction in which the fill is defined	normal	<Point>	Typically, just the direction rotated by 90 degrees."
"BlockCannotReturn","This exception is thrown when a block tries to return but there is no home context."
"IceTipPushModel","I'm a model to present push commits and operations."
"MCPackageTest",""
"GLMAction","Actions are elements of behavior that are executed upon a keyboard shortcut or other event.Instances of Action are stored and maintained by Presentations. The exact representation is determined by the renderer, but actions can define a keyboard shortcut that should trigger the action or a title, category and position to be able to use the action as a context menu item."
"MetacelloVersionValidator",""
"ManifestCodeExport","Package manifest for package metadata"
"DACycleNode","A PDCycleNode is used to display a cycle in a tree."
"ClyAsyncQuery","I run my subquery using background process.I do not implement #buildResult: as other queries. Instead I return special ClyAsyncQueryResult instance to represent result of execution. Async result overrides building logic in the way that it forks actual query execution and updates itself when execution completes. For details look at this class.So I only implement hook which triggers background execution of actual query.Any query can be converted to async query using:	aQuery async 	It returns instance of me. And in case when I am receiver I just return myself.There is special mode to emulate sync execution of fast queries. To activate it use #semyAsync message instead of simple #async: 	aQuery semiAsync It will return my instance configured with ClySemiAsyncQueryResult. So during execution it will be used instead of simple ClyAsyncQueryResult.The idea of semi async execution is to wait half seconds until query will be executed. If this time is enough (which is true for fast queries) then for users it will look like normal syncronous execution. But otherwise it will be asyncronous execution and returned result will indicate progress.The concrete type of async result is holden in asyncResult variable.While I am executed users can check the execution state. A ClyAsyncQueryResult is returned from #execute method which can be checked for the status:	aQuery execute isBuilt	It returns true only when execution is completed.For the empty test (#checkEmptyResult) I always return false when execution is still in progress. Idea that we do not know exactly if result would be empty or not. And for many scenarios it is convenient to get false in that case.Internal Representation and Key Implementation Points.    Instance Variables	asyncResult:		<ClyAsyncQueryResult>"
"ShCBEmptyClassWithMethods","I am a test class."
"ZnHttpRetrieveContents","I am ZnHttpRetrieveContents.I am a ZnUrlOperation.I implement the #retrieveContents URL operation for HTTP(S) urls.  'http://zn.stfx.eu/zn/numbers.txt' asZnUrl retrieveContents.Part of Zinc HTTP Components."
"GTSpotterEventCollectorTest","A GTSpotterEventCollectorTest is a test class for testing the behavior of GTSpotterEventCollector"
"MalDisjointSetsNextNode",""
"GLMMorphicModel",""
"ContainerPresenter","I am a model for a container. My purpose is to hold multiple subwidgets to glue them together.I should not be used directly"
"GLMAnnouncer","This is a specialization of the Announcer. The main added functionality is the ability to suspend the announcements from this announcer."
"IceTipRegisterRepositoryDialog","I'm a dialog to register new repositories.I can create new repositories, add existing ones and clone for different places (including a generic url clone).self new 	onAccept: [ :newRepository | newRepository register ];	openDialogWithSpec"
"TestSuiteEnded","This announcment is thrown when a test suite just finished (more precisly when hisoties are updated)"
"ClyMethodWatchpointsQuery","I return all methods which has installed watchpoints"
"ClyShowGroupsInMethodBrowserCommand","I am a command to show all methods in the groups in new method browser.To show methods I ask the browser to spawn new query browser.Internal Representation and Key Implementation Points.    Instance Variables	browser:		<ClyBrowser>"
"DAMissingMethodNode","I'm a tree node representing a message send, at least one time, in the package under analysis having no implementor in this package and its dependencies. "
"OCCompilerDynamicASTPlugin","Look at the OCCompilerASTPlugin class comment for information about compiler plugins.I allow the dynamic creation of compiler plugins.Instanciate me using """"newFromTransformBlock: aBlock andPriority: aPriority"""" to get a compiler plugin you can add to an OpalCompiler instance with OpalCompiler>>addPlugin:.- aBlock must be a block of the form [ :ast | do something to ast ] that returns the modified ast.- aPriority is the priority the created plugin should haveCheck out my test class (OCCompilerDynamicASTPluginTest) for a usage example."
"FTGlyphMetrics","I Implement the FT_Glyph_Metrics type"
"SimpleTestResourceTestCase","SUnit tests for simple test resources"
"MetacelloProjectReferenceSpecTestCase",""
"IceTipDeleteTagCommand","Command that deletes the selected tag"
"ClyPackageChange","I represent all possible changes with package.I am used to subscribe with single subscription to any changes related to packages.So you can write code like this: 	SystemAnnouncer uniqueInstance when: (ClyPackageChange of: aPackage) do: [ :ann | ann logCr ].	I provide more general subscription logic than subscribing on base RPackageAnnouncement class. Many other events can be also related to package changes like class creation. They are not covered by RPackageAnnouncement hierarchy.I reuse logic of queries how they detect that their result is affected by system changes: 		ClyPackageChange>>handlesAnnouncement: anAnnouncement  		^anAnnouncement affectsPackage: affectedPackage	I am used by class editor tools to be updated when editing class is changed.	Internal Representation and Key Implementation Points.    Instance Variables	affectedPackage:		<RPackage>"
"ClySortFunction","I implement first class function to be used instead of block in sorted collection.There is system SortFunction. I am introduced to be safely used in caches.Now in Pharo 7 SortFunction is improved and can completally replace and can be used instead of me.But for Pharo 6 compatibility am still here and use by other Calypso based packages.So for general overview read system SortFunction comments.Internal Representation and Key Implementation Points.    Instance Variables	direction:		<Integer>"
"MetacelloScriptingStdTstHarness",""
"SettingNodeBuilder","Used to build nodes from the settings framework"
"DASomeClass","A simple class to test dependency analyzer"
"ClyEmptyPackageTableDecorator","I decorate table with special icon for empty packages which has no classes"
"ClyTaggedClassesQuery","I return all classes marked with particular tag.To create my instance use following methods: 	ClyTaggedClasses by: #SomeTag	ClyTaggedClasses by: #SomeTag from: aScope Internal Representation and Key Implementation Points.    Instance Variables	tag:		<Symbol>"
"RubTextUpdatedInModel","I am raised when the model text is changed"
"CornerRounder","This class is a quick hack to support rounded corners in morphic.Rather than produce rounded rectangles, it tweaks the display of corners.Rather than work for any radius, it only supports a radius of 6.Rather than work for any border width, it only supports widths 0, 1 and 2.The corners, while apparently transparent, still behave opaquely to mouse clicks.Worse than this, the approach relies on the ability to extract underlying bits from the canvas prior to display.  This ran afoul of top-down display, it seems, in SystemWindow spawnReframeHandle: (qv).  It will also make a postscript printer very unhappy.But, hey, it's cute."
"RBAddInstanceVariableChange","I am a refactoring for a instance  variable addition. My changes are executed on the instance or class side."
"LGitSubmoduleIgnoreTypeEnum",""
"GTSpotterBreadcrumbVisibilityChanged",""
"FFICalloutAPI","I'm a façade to perform ffi nb calls."
"ObjectStringConverter","Generic object<->string converter for use with PluggableTextFieldMorph.Optional regex matching for validation.Optional transform blocks for each conversion direction."
"ZnResponseWrittenEvent","ZnResponseWrittenEvent signals that response was written in duration milliseconds."
"ClyNotRemoveAndShowSendersMethodStrategy","I am a remove method strategy which do not remove methods but instead it shows all senders."
"AndreasSystemProfiler","AndreasSystemProfiler uses sub-msec VM supported PC sampling.	In Memory of Andreas Raab.  Author, Friend, Colleague. 	http://forum.world.st/In-Memory-of-Andreas-Raab-td4663424.html	Released by Ron, Julie and DavidExample:AndreasSystemProfiler spyOn: [ 10000 timesRepeat: [ 3.14159 printString ] ]-=-=-=-=-=-=-=Apparently, the time taken to run the provided block is as twice as long as run without the profiler.-=-=-=-=-=-=-=Both AndreasSystemProfiler and MessageTally are periodic sampling profilers.  The essential difference between AndreasSystemProfiler and MessageTally is in how the current method is sampled.MessageTally is driven from a high-priority process in a loop waiting on a delay.  When the delay fires the lower-priority process being profiled is interrupted, its stack is walked to determine the methods along the call chain, and that data is recorded.  But since the sampling occurs when the high-priority process preempts the lower-priority process, a sample is only taken at a preemption point.  In particular, primitives are *not* profiled because they are not suspension points.  A process can only be suspended on method activation (a non-primitive method activation, or primitive failure) or on backward branch.  The cost of primitives is charged to a caller and is inferred by subtracting the cost of children of the caller from the caller itself (subtracting the number of samples in children of the caller form the number of samples in the caller itself).  Another problem is that using the clock that underlies Delay, which is typically the clock used by processes being profiled, causes sampling errors due to the sampling and sampled processes cohering.  Delays are limited in resolution (at best 1 millisecond) so if the profiled process waits on a delay it'll fire immediately after the profiling process (because the profiling process is at higher priority) and so the sampling process may only ever see the sampled process in a wait state.If MessageTally is used to profile multiple processes then a third problem is that if a primitive causes a process switch then its cost will end up being charged to the process switched-to, not switched from.  This is again because sampling can only occur after a primitive has completed (successfully or not).AndreasSystemProfiler is driven from a high-priority process in a loop waiting on a Semaphore known to the VM.  The profiling process uses a primitive to schedule a sample some number of ticks of the VM's high-performance clock in the future.  When the time is reached the VM samples the current method and the current process, *before any process preemption takes place*, and independently of the standard clock, and signals the semaphore.  The profiling process then collects the method,process pair via primitives.  So AndreasSystemProfiler provides much more accurate results.That said there are still limitations with primitives and Cog.  Currently Cog only samples ""interpreter"" primitives.  Those primitives it implements in machine code (integer and float arithmetic, closure evaluation, at:, identityHash) are not sampled and won't show up; they will be charged to the calling method.  This is fixable, since Cog actually compiles the sampling direct into interpreter primitive invocation when profiling is in effect and not at other times, but sampling could be a significant cost in these simple and performance-critical primitives."
"LGitCompletionCallback",""
"RPackageReadOnlyCompleteSetupTest","The tests takes as fixture the following situation and exercises the readonly queries.We should be able to use a test resources to speed it up.P1 	A1DefinedInP1	A1DefinedInP1>>methodDefinedInP1	B1DefinedInP1		A2DefinedInP2>>methodDefinedInP1	P2	A2DefinedInP2	A2DefinedInP2>>methodDefinedInP2	B2DefinedInB2	P3	A3DefinedInP3		A2DefinedInP2>>methodDefinedInP3 "
"RBExtractMethodToComponentTest",""
"MCMergingTest",""
"DockingBarMenuLineMorph","A DockingBarMenuLineMorph is specialized version of its superclass for DockingBar behavior."
"JPEGColorComponent","I represent a single component of color in JPEG YCbCr color space.  I can accept a list of blocks in my component from the current MCU, then stream the samples from this block for use in color conversion.  I also store the running DC sample value for my component, used by the Huffman decoder.The following layout is fixed for the JPEG primitives to work:	currentX 		<SmallInteger>	currentY 		<SmallInteger>	hSampleFactor 	<SmallInteger>	vSampleFactor 	<SmallInteger>	mcuBlocks 		<Array of: <IntegerArray of: DCTSize2 * Integer>>	widthInBlocks 	<SmallInteger>	heightInBlocks 	<SmallInteger>	dctSize 			<SmallInteger>	mcuWidth 		<SmallInteger>	mcuHeight 		<SmallInteger>	priorDCValue 	<SmallInteger>"
"SmallDictionaryTest","SUnit tests for small dictionaries"
"SugsRenameInstanceVar","I know how to rename an instance variable"
"ClySubclassLOfSubclassMFromP3",""
"WindowsResolver","I am an expert on Windows filesystem conventions. I resolve origins according to these conventions."
"TimespanDoSpanAYearTest","I am one of several Sunit test Cases intentended to provide complete coverage for the Chronology set of classes as part of the external testing. See DateAndTimeEpochTestCase for a complete list. tlk.My fixtures include a Timespan that crosses over a year boundary:aDate = December 25, 2004, midnightaDuration = 91 daysaTimeSpan= 91 days, starting December 25, 2004, midnight"
"GLMMorphicDropDownRenderer",""
"LGit_GIT_EEOF",""
"GLMPaginatedResizableMorphTreeMorph",""
"InvalidGlobalName","I am a warning signaled when trying to build a class with invalid name."
"RBReturnNode","RBReturnNode is an AST node that represents a return expression.Instance Variables:	return	<Integer>	the position of the ^ character	value	<RBValueNode>	the value that is being returned"
"FFITestNestingStructureWithArray","A nesting structure with an array for test purposes"
"ManifestSlot",""
"ClyFFIMethodTableDecorator","I decorate table with special icon for ffi methods"
"PopupChoiceDialogWindowWithMessage","I'm a dialog which ask the user to select a element in a list. See me in action:UIManager default inform:        (UIManager default                 chooseFrom: #(one two three)                 values: #('1' '2' '3')                  message: 'Select one'                 title: 'PopupChoiceDialogWindowWithMessage example')."
"ShouldTransformedIntoAssert","should: will be deprecated sooner or leater. Use assert: instead"
"TraitTest",""
"RBLiteralArrayContainsSuspiciousTrueFalseOrNilRule","Some times ago, arrays were not allowed to contain true false and nil objects. They only contain their symbol representation: evaluating #(true false nil) returns #(#true #false #nil). Nowadays, #(true false nil) is equivalent to {true . false . nil }, i.e., it returns an array with the objects true, false, and nil. This smells checks methods having #(#true #false #nil) in their literal frame since it can be the source of potential bugs. 	 "
"FileSystemStore","I am an abstract superclass for store implementations. My subclasses provide access to the actual data storage of a particular kind of filesystem. The file system can be accessed via	FileSystem disk 	FileSystem memory	My associated filesystem can be accessed as follows:      DiskStore currentFileSystem"
"EpEntryItem","I am a log browser item that represents an entry."
"IceTipCommitContext",""
"MethodFinder","I'm a method finder that will find methods from given examples in an array.The examples array should contain one object for the receiver, one object per expected argument and then a final object with the expected result.In other words  - a unary method example expects an array of input objects #( receiver ) and an expected result - a binary method example expects an array with two input objects #( receiver argument ) and an expected result - a keyword method example expects an array with at least two elements  #( receiver argument1 argument2 ... ) and an expected resultsThe method finder will take the input objects (receiver and arguments) and perform their permutation to be able to find more results.Then, it will lookup in the receiver's hierarchy the approuved and forbidden methods to run on the hierarchy and run them on the permutation of objects.NewMethodFinder new findMethodsByExampleInput: #( 1 2 ) andExpectedResult: 3"
"RBThreeElementPointRule","Checks arithmetic statements for possible three element points (i.e., a point that has another point in its x or y part)."
"GLMBasicExamples","self open"
"GTPlayPageStashPersistence",""
"GLMBrickThemer","A GLMBrickThemer is the main Brick themer class where styles for core and basic Bricks are defined.Instance Variables	modules:		<Dictionary>modules	- dictionary with all registered style modules with association module name -> module"
"ZnMaximumEntitySize","I am ZnMaximumEntitySize.I am a DynamicVariable and a ProcessSpecificVariable.I am used to control the maximum size of entities being read from streams."
"HaltIconStyler","I'm in charge to style  the editor for  message sends with the ""halt"", ""halt:"" or ""haltIf:"" selectors, like ""self halt""."
"ReflectivityDemos","This class collects simple demos for Reflectivity.each method contains a small, self-contained demo."
"ClyMethodSourcesQuery","I return all methods which source code includes particular string pattern.For example it can be simple substring or regex expression. But generally pattern is represented by ClyStringPattern subclasses.To create my instances use following methods:	ClyMethodSources withString: 'probe string'.	ClyMethodSources withString: 'probe string' caseSensitive: true.	ClyMethodSources filteredBy: aStringPattern	Internal Representation and Key Implementation Points.    Instance Variables	pattern:		<ClyStringPattern>"
"SugsBrowseClassReferences","I know how to browse references from a class"
"GLMStackedScrollPaneBrick","A GLMStackedScrollPaneBrick is a more complicated scrollpane, with scrollbars and stacking mechanism of subbricks that have #stack floating parameter"
"MulticolumnLazyListMorph","A variant of LazyListMorph that can display multi-column lists."
"NonInteractiveUIManager","This is a non-interactive UI manager, i.e. a UI manager which doesn't provides any kind of interactivity with users.For most of requests, it throws an ErrorNonInteractive exception, which can be handled by various tools to do things differently when UI is not avaliable. For example:response := [ UIManager default request: 'what is your name?' ] on: ErrorNonInteractive do: [:ex | ex resume: 'Mr. John Smith' ].You can replace the default UI Manager with my instance in cases, when you need to guarantee that your task(s) will run in fully automated mode. This is useful for things like:  - when image runs as a persistent application on a server  - image runs headless from command-line with some batch scripts/commands"
"LoginFailedException","Exception for signaling login failures of protocol clients."
"SHRange","I associate a type with a range of characters in a StringI have these instance variables...	start - the one based index of the first character of the range within the String.	end - the one based index of the last character  of the range within the String.	type - a Symbol describing the type of the range	A sequence of instances of me are created by an instance of SHParserST80 which can then used by an instance of  SHTextStyler to style Text. "
"GTSUnitActivationPredicate","I decide when the SUnit debugger should be active."
"RFOriginalMethodReification","I reify the method where the link is installed.Note: this is the original method, that is, the one that has this link *not* installed."
"TableContainerModel","This is deprecated class because the original class TableContainerModel was renamed to TableContainerPresenter. You should stop to use this class and modify your code to use TableContainerPresenter."
"DAInheritanceDependencyNode","A PDCycleNode is used to display a inheritance dependency in a tree."
"MetacelloValidationWarning","MetacelloValidationWarning indicates that there is a logical inconsistency that is not likely to cause any functional problems"
"GLMMorphicFixedPanesFinderRenderer",""
"DirectoryEntryTest","SUnit tests for FileSystemDirectoryEntry"
"GLMAccumulatorTest",""
"FLPositive8SmallIntegerCluster","unsigned, 8-bit integer"
"SpecStubDialogWindowAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"WeakKeyDictionary","I am a dictionary holding only weakly on my keys. This is a bit dangerous since at any time my keys can go away. Clients are responsible to register my instances by WeakArray such that the appropriate actions can be taken upon loss of any keys. As key may disappear at any time, my reported size may be greater than the number of keys encountered in iterations.See WeakRegistry for an example of use.Implementation notes:I am a set of WeakAssociations. Each WeakAssociation can be in one of three states: a key is present, or the key has been garbage-collected, or the association is expired (meaning that the value has also been released). During finalization, associations with no key expire, but I still keep them to avoid rehashing the entire set. When adding a new entry, the new entry can either go into a slot that is nil, or one that has an expired association. I keep a count of expired associations and rehash when there are too many (currently, if they account for more than 25% of the space)."
"WikiStyleHelpBuilderTest","SUnit tests for class WikiStyleHelpBuilder"
"FLStandardFileStreamSerializationTest",""
"SimplestClassListWithChunkExample","SimplestClassListWithChunkExample new openOn: Object"
"IceTipGitLabRepositoryPanel",""
"MessageSendDebugAction","A MessageSendDebugAction is an action that sends a message to a receiver with the right amount of arguments. To specify the receiver subclasses have to override the method #receiver. Furthermoe subclasses must specify an id. The selector is optional as the id will be used if no selector is present/Instance Variables	id:		<Object>	selector:		<Object>id	- xxxxxselector	- xxxxx"
"IceTreeVisitor","I implement a basic tree visitor for Iceberg trees implemented through IceNode"
"ManifestCollectionsArithmetic","This package only makes extensions to existing collection classes by adding the arithmetic protocols. Such protocols allow one to perform in particular vector-operations on collection"
"PlatformIndependentEnvironment","I'm a platform independent environment who is intent to work when none other works. Specially, I'm intended to work as a replacement for environments when there is no NativeBoost present, therefore I provide stubs for method calls that answers just default values. "
"SpecStubWindowView","Only stub object, no real view is displayed."
"ClyItemFilterTestCase",""
"IceGitHubSelectItem","I'm a helper to keep selected items in a list."
"RBAddTemporaryVariableTransformation","I am responsible for adding a temporary variable inside a method. In Pharo, temporary variables can be declared inside blocks as well. By default, the container is the method itself.Usage: | transformation |transformation := (RBAddTemporaryVariableTransformation			variable: #newVariable			inMethod: #methodBefore			inClass: #RBAddReturnStatementTransformationTest)			transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- Check whether there is a variable inside the method with the same name.Observations about the transformation:- In this implementation, the temporary variable will be added to the body of the method"
"RPackageIncrementalTest","The tests takes as fixture the following situation (which is constructed partially)For tests that do not need to check the incremental construction.P1 	A1DefinedInP1>>methodDefinedInP1	B1DefinedInP1		A2DefinedInP2>>methodDefinedInP1  (was *P2)	P2	A2DefinedInP2>>methodDefinedInP2	B2DefinedInB2	P3	A3DefinedInP3		A2DefinedInP2>>methodDefinedInP3  (was *P2*)"
"TimespanTest","SUnit tests for Timespan class"
"RBRemoveSubtreeTransformation","Removes a subtree from a method. This is a first step on providing small AST tranformations. It might replace the message send, assignment, return, etc. transformations proposed by other tools. This transformation can also be reused by more complex ones, such as Extract Method.Usage:| transformation |transformation := (RBRemoveSubtreeTransformation		code: 'selector := aSelector'		from: #selector:from:		in: #RBRemoveMethodTransformation)		transform. (ChangesBrowser changes: transformation model changes changes) openPreconditions:- the class and method exist- the code from which the subtree will be extracted should be parseable"
"IceRemoteAlreadyExistsError",""
"GLMBrickAbstractModel","A GLMBrickAbstractAdaptor is an interface for all adaptors to be used with brick lazy widgets"
"MockTutorial2","Mocking another tutorial for test purposes"
"ClassDescription","I add a number of facilities to basic Behaviors:	Named instance variables	Category organization for methods	The notion of a name of this class (implemented as subclass responsibility)	The maintenance of a ChangeSet, and logging changes on a file	Most of the mechanism for fileOut.	I am an abstract class, in particular, my facilities are intended for inheritance by two subclasses, Class and Metaclass."
"SpecTestCase","I am an abstract test for Spec widgets.I use classToTest to initialize an instance. And I can keep the created windows in a variable that I clean after tests.I provide openInstance and openInstance: to open it. These methods make me keep the created window in the variable.- testOpenWithSpec tests a call at openWhitSpec, it test the minimal use but can fail in some widgets needing to be initialized.- testExample tests the class side method example if exist, example should be a representative use."
"IceTipRepairEditRepository","I will open the edit repository window.I'm active when: 	- src subdirectory is not found."
"RBParser","RBParser takes a source code string and generates an AST for it. This is a hand-written, recursive descent parser and has been optimized for speed. The simplest way to call this is either 'RBParser parseExpression: aString' if you want the AST for an expression, or 'RBParser parseMethod: aString' if you want to parse an entire method.Instance Variables:	currentToken	<RBToken>	The current token being processed.	emptyStatements	<Boolean>	True if empty statements are allowed. In IBM, they are, in VW they aren't.	errorBlock	<BlockClosure>	The block to evaluate on a syntax error.	nextToken	<RBToken>	The next token that will be processed. This allows one-token lookahead.	scanner	<RBScanner>	The scanner that generates a stream of tokens to parse.	source	<String>	The source code to parse	tags	<Collection of: Interval>	The source intervals of the tags appearing at the top of a method (e.g. Primitive calls)Shared Variables:	ParserType	<Symbol>	the type code we are parsing"
"RBCompositeRefactoryChange","I am a composition of RBRefactoryChanges. I hold a list of changes. I implement many ""environment change"" operation like renameClass/removeClass/ rename instance variable that areactually called on the name space by a refactoring operation and my responsibilty is to create a appropriate refactoring changeand save it in my list of changes."
"SDL_MouseButtonUpEvent","SDL2 library structure"
"LanguageEnvironment","The name multilingualized suggests that you can use multiple language at one time.  This is true, of course, but the system still how to manage the primary language; that provides the interpretation of data going out or coming in from outside world. It also provides how to render strings, as there rendering rule could be different in one language to another, even if the code points in a string is the same.  Originally, LanguageEnvironment and its subclasses only has class side methods.  After merged with Diego's Babel work, it now has instance side methods.  Since this historical reason, the class side and instance side are not related well.  When we talk about the interface with the outside of the Squeak world, there are three different ""channels""; the keyboard input, clipboard output and input, and filename.  On a not-to-uncommon system such as a Unix system localized to Japan, all of these three can have (and does have) different encodings.  So we need to manage them separately.  Note that the encoding in a file can be anything.  While it is nice to provide a suggested guess for this 'default system file content encoding', it is not critical.  Rendering support is limited basic L-to-R rendering so far.  But you can provide different line-wrap rule, at least."
"GLMWhitespaceTheme","The theme is developed in the context of the Glamour project, and its goal is to create a look that:- does not look like a specific operating system.- maximizes whitespace.- is fast.!!Installation of the theme[[[	PolymorphSystemSettings desktopColor: Color white.	self defaultSettings: nil.	self beCurrent.	self setPreferredShoutColors]]]"
"ManifestTextScanning","Contains classes caring about text scanning"
"TextInputFieldPresenterTest",""
"MCVersionInspector","I am a tool that visually represents an MCVersion. While I can be opened on anMCVersion, you've probably seen me most often after saving a package in the Monticello Browser. I have buttons to perform common version-related actions - like browsing, loading, and viewing changes. In my main text area, I display the following information about my version - name, author, timestamp, UUID, ancestors and log message."
"InvalidSlotName","I am signaled when the name of a Slot is an invalid variable name."
"GTSpotterItemActionbarBrick",""
"MorphicImageAdapter","I am the bridge between an ImagePresenter and a AlphaImageMorph"
"StandardWindow","Themed SystemWindow that avoids being picked up except via the title bar. Supports opening in ""fullscreen"" mode, taking docking bars into account.Prevents yellow button menu.Uses TEasilyThemed for easy theme access to subclasses."
"RBSmalllintContext",""
"CollectionRootTest","I'm the root of the hierarchy of the collection tests."
"NECTypedModel","I'm the model for a typed completion, that means when a receiver class is known. I only have selectors."
"RGNamespace","A namespace is a container that in addition to managing classes and methods, it also knows how to treat pools and global variables"
"ClyInheritedMethodGroupProvider","I statically provide single ClyAllMethodGroup.It is shown in the browser either with 'instance side' or 'class side' names depending on meta level of my method query"
"SDL_SysWMinfo_WindowsInfo","A structure that contains Window specific information about a window. "
"IceTipItemPositionLeft","I place item buttons at left. I am the default behaviour."
"ClyTypedQueryTestCase",""
"IceTipHistoryDiffToAncestor","I keep a diff from a commit to his mail parent."
"MCHttpRepository","I am general http repository for monticello.I support the general protocol for listing files in a remote repository."
"SDL2MappedEvent","SDL2 library structure"
"PluginBasedJPEGReadWriter","I am PluginBasedJPEGReadWriter.I am a concrete subclass of ImageReadWriter.I implement the JPEG image format.  https://en.wikipedia.org/wiki/JPEGI provide fast JPEG compression and decompression. I require the VM pluginJPEGReadWriter2Plugin, which is typically stored in same directory as the Squeak virtual machine.JPEGReadWriter2Plugin is based on LIBJPEG library. This sentence applies to the plugin:   ""This software is based in part on the work of the Independent JPEG Group"".The LIBJPEG license allows it to be used free for any purpose so long as its origin and copyright are acknowledged. You can read more about LIBJPEG and get the complete source code at www.ijg.org."
"NullTextStyler","This class is a styler NullObject"
"MailAddressToken","a single token from an RFC822 mail address.  Used internally in MailAddressParser"
"MemoryFileSystemDirectory","I represent a memory file system entry for a directory"
"DropEvent","I model the event produced when a hand drops a (grabbed) morph into another morph.I know the position of the drop, the dropped morph and the hand that produced me.To handle this event a morph should override one of these methods:#acceptDroppingMorph:event:#justDroppedInto:event:Additionaly, a morph can specify if it wants to accept a dropped morph by overriding #wantsDroppedMorph:event:. Symmetrically, the morph being dropped can specify if it wants to be dropped in another morph by overriding #wantsToBeDroppedInto:. Note that for a successful drop operation both parties need to agree.See HandMorph>>dropMorph:event: for an example of usage."
"ZnServerHandlerErrorEvent","ZnServerHandlerErrorEvent signals an error that occurred during handling by the delegate. This is considered a real error."
"ClyClass1FromP1",""
"RBRenameVariableTransformationTest",""
"ClyAsyncQueryResultTest",""
"ExampleSlotWithState","I am a simple example for a Slot.Instead of mapping to a field, I store the value myself. This means that all instances share theslot, similar to a class variable.I just overide the methods for reflective read and write (#read and #write:to:), I do not bother to emit bytecode myself but rely on the fallback that the compiler will generate code for reflective read and write (see the emit* method of my superclass).PharoClassInstaller make: [ :builder |	builder name: #A;	slots: { TestSlot named: #iv };	category: #Playground ].In class A we can implement accessors:iv	^iviv: anObject	iv := anObjectThey look like normal ivar accesses, but in the background, the compiler delegated to the Slot the code generation, calling emit*, which leadsto the bytecode e.g. for the read:21 <20> pushConstant: iv => TestSlot22 <70> self23 <E1> send: read:24 <7C> returnTopyou could override the emit* methods to generate faster code, but to get something running it is not needed.To test, e.g. you can set the slot from one object and read it from another:A new iv: 6A new iv Then inspect the slot: (A slotNamed: #iv) inspect"
"GTSpotterMorph",""
"HEAdditionalMethodState","I represent an AdditionMethodState.I serialize myself into a stream with the following fields:    - method    - selector    - an array containing all the elements in the original additional method state.Each of this elements is exported as a HEExportedLiteral.My value contains the array of elements in the AdditionalMethodState."
"RFReceiverReification","I reify the receiver of a Message or a method"
"ProportionalLayout","I represent a layout that places all children of some morph in their given LayoutFrame."
"ClassTreeExample","ClassTreeExample new openOn: Object"
"MetacelloCoreIssue125TestCase",""
"StopwatchTest","SUnit tests for the stopwatch "
"RenrakuGlobalBanningTest",""
"OSJoyButtonEvent","I am the root of the joystick button events hierarchy.The which parameter identifies the joystick that produced this event.The button parameter is the joystick dependent index of the button that was pressed or released.The pressed parameter tells if the button was pressed or released.The  mapped  parameters tells if the button index have been mapped into a standard controller layout.The hasMapping parameters tells if this joystick is generating a mapped version of the event."
"MemoryFileSystemEntry","I am an abstract file system entry for a memory file system.My subclasses should specialize on the kind of file they are."
"ConfigurationCommandLineHandler","Command line handler for dealing with Metacello configurations from the command lineUsage: config [--help] <repository url> [<configuration>] [--install[=<version>]] [--group=<group>] [--username=<username>] [--password=<password>][--no-quit][--no-save]	--help              show this help message	--no-quit        keep the image running after configuration install	--no-save       Don't save the image after configuration install	<repository url>    A Monticello repository name 	<configuration>     A valid Metacello Configuration name	<version>           A valid version for the given configuration	<group>             A valid Metacello group name	<username>          An optional username to access the configuration's repository	<password>          An optional password to access the configuration's repository	Examples:	# display this help message	pharo Pharo.image config		# list all configurations of a repository	pharo Pharo.image config $MC_REPOS_URL		# list all the available versions of a confgurtation	pharo Pharo.image config $MC_REPOS_URL ConfigurationOfFoo		# install the stable version	pharo Pharo.image config $MC_REPOS_URL ConfigurationOfFoo --install		#install a specific version '1.5'	pharo Pharo.image config $MC_REPOS_URL ConfigurationOfFoo --install=1.5		#install a specific version '1.5' and only a specific group 'Tests'	pharo Pharo.image config $MC_REPOS_URL ConfigurationOfFoo --install=1.5 --group=Tests"
"ClyTaggedClassesQueryTest",""
"InstanceVariableNotFound","Description--------------------------I am an exception raised when we try to access to an instance variable by its name but the receiver does not know this instance variable.Examples --------------------------	InstanceVariableNotFound signalFor: 'test'.		Object new instVarNamed: 'test'.		[ Object new instVarNamed: 'test' ] on: InstanceVariableNotFound do: [ :ex | ex ].Internal Representation and Key Implementation Points.--------------------------    Instance Variables	instVarName:		<aString>	Name of the instance variable we tried to access."
"RubPluggableTextMorphExample","shows how to use a RubPluggableTextMorph.see example class side"
"ClyToolbarSeparatorMorph","I am a vertical line which is used to separate toolbar elements which belongs to different menu groups.I am used by CmdMenuGroup to build toolbar items: 	menuGroup buildBrowserToolbar: aToolbar"
"SpecDialogWindow","A SpecDialogWindow is a window made for embedding Spec models into dialog windows"
"MouseButtonEvent","A button event from a mouse"
"ClyUndeclaresUserTag","I mark methods which use undeclared variables"
"RxParserTest","This class provides tests for the regular expression parser."
"IceGitHttpsRemote","A remote repository created out of a HTTPS  url, such as 'https://github.com/npasserini/iceberg.git'."
"MetacelloIgnorePackageLoaded",""
"GLMMenuItemSelected",""
"ClassWithPharoDocComment","A class with a Pharo doc comment to be used in tests"
"SDL_SysWMinfo_X11Info","A structure that contains X11 specific information about a window. "
"ClyNavigationHistoryTestCase",""
"FLNegative64SmallIntegerCluster","A cluster of unsigned int 64bit"
"RubFindTextChanged","I am raised when the text to find changed"
"ExternalSemaphoreTable","By John M McIntosh johnmci@smalltalkconsulting.comThis class was written to mange the external semaphore table. When I was writing a Socket test server I discovered various race conditions on the access to the externalSemaphore table. This new class uses class side methods to restrict access using two mutex semaphores, one for removal and one for additions to the table. It seemed cleaner to deligate the reponsibility here versus adding more code and another class variable to SystemDictionary Note that in Smalltalk recreateSpecialObjectsArray we still directly play with the table.Henrik Sperre JohansenThe name is somewhat of a misnomer; the table can be used for any objects, not just semaphores.That is its main usage though, so a split which deals with semaphores and other external objects differently (In the same underlying table) is not currently worth it.Therefore, while in general not all users will care if the table is above a certain size, we still guard  against adding more objects than the limit above which external signals would be lost (on some VMs.)"
"ClySubclassScopeTest",""
"ClyToolContextNavigatorMorph","I represent the context of given browser tab (tool).I show kind of path to the tab model.For example for the method editor it would be package/class string.In addition I provide a button to force browser to restore state when the tool was created.I simply ask the tool: 	ownerTool restoreBrowserState "
"IceTipComposablePresenter","I'm a generic presenter of IceTip UI elements."
"PragmaRemoved","A PragmaRemoved is announced by a PragamColllector when a method defined with an acceptable pragma according to the PragmaCollector filter is removed.Instance Variables"
"MCDictionaryRepositoryTest",""
"IceNewBranchFromGitHubIssueCommand",""
"FFIExternalString","String type.Represented as char* on C side."
"SycChangeMessageSignatureCommand","I am a base class for commands which modify signature of given message.My subclasse should implement two methods: - createRefactoring It should return refactoring instance which will perform actual change.- resultMessageSelector it should return target selector of the message after modification.Internal Representation and Key Implementation Points.    Instance Variables	originalMessage:		<ClyMessageDescription>"
"ClySwitchToVariablesCommand","I am a command to switch full browser to the variables mode.In that state browser shows variables in the third pane"
"SmalltalkImage","My singleton is a central entry point to the system.It has many roles and responsibilities (to be documented)	- startup/shutdown image	- source management	- namespace access	- tool access	- platform access	- VM information and parameters		Startup-----------At startup and shutdown the image execute the methods startUp: and shutdown: of registered classes (registered using addToStartUpList:, addToShutDownList:, ... methods and friends).	Startup phasesDuring the first stage of start up the UI manager, the default uimanager is switched to a specific non interactive ui manager (StartupUIManager). Note that this specific non interactive UIManager kills the system on any attempt to open windows and interaction. So be warned, don't use interaction in the first phase. Then all registered classes execute their start up procedures (which should not imply interactive behavior). After startup list is finished, any deferred startup actions are executed, which you can add using the methodaddDeferredStartupAction: method.  "
"HiRulerLazyMorph","I'm a Morph that ask to a model a source form and a source rectangle to draw myself."
"MCRepositoryError","I am an MC-specific errror"
"OSButtonState","I am holding a set of mouse buttons state (pressed or not).Used by various mouse events."
"ClyPackageScope","I am a scope of packages.So I see all objects which are defined by given packages: - packages- classes - methods"
"RBSearchingLiteralRule","Checks for repeated literal equalitity tests that should rather be implemented as a search in a literal collection."
"BaselineOfFlashback","Baseline managing the Flashback project for the Pharo bootstrap.Load type: - linear"
"InteractiveResolverTest","SUnit tests for InteractiveResolver"
"ClySortByNameFunctionTest",""
"TraitMethodDescriptionTest",""
"GB2312","This class represents the domestic character encoding called GB 2312 used for simplified Chinese."
"GoferApiTest","SUnit tests for Gofer API"
"ClyTraitFirstSortFunction","I sort classes in the order by name but I put traits before normal classes.I am used in method visibility hierarchy where inherited traits are shown in merged hierarchy with user classes"
"IceTipCommitRangeModel",""
"RGTraitDefinitionTest","SUnit tests for trait definitions"
"GroupWindowMorph","I'm a morph where you can drag windows to group them as tabs.Try:(GroupWindowMorph new openInWindowLabeled: 'Window organizer') extent: 400@400."
"GLMBrickLayoutDummState",""
"GTProtoObjectVariablesBrowser","This is a specialization that works with ProtoObject and all its subclasses that except for Object that has its own specialization.Example:self openOn: ProtoObject new"
"TBeginsEndsWith","A trait for test purposes"
"SycDemoteToPackageWithTagCommand","I am a command to demote given packages into the package with tag"
"RBVariableNode","RBVariableNode is an AST node that represent a variable (global, inst var, temp, etc.).Although this is the basic class for the concrete variable types, this is not an abstract class and is actually usedby the parser for all variables that aren't special builtin types like self/super/thisContext. All other variables arejust RBVariableNodes until the semantic analyser can deduce thte type.Instance Variables:	name	<RBValueToken>	the variable's name I represent	nameStart <Integer>	the position where I was found at the source code"
"DiffElement","My instances are container objects used by TextDiffBuilder for comparison. They hold a string and the precomputed hash of the string to speed up #=. They may reference another DiffElement object which is their pair in the diff.Instance Variables	hash:		<Integer>	match:		<DiffElement>	string:		<String>hash	- the hash of string, stored for fast accessmatch	- another DiffElement object which has the same string and turned out to be my pair in the longest common subsequence found by a TextDiffBuilder, or nil if I don't a matching DiffElementstring	- a part of a longer text, typically a line"
"ExampleClassVariableTest",""
"HashTesterTest","I am a simple test case to check that HashTester works correctly"
"GLMMorphicValidatorPaneRenderer",""
"FFICharacterType","Character type.Represented as single byte on C side."
"SycPushUpMethodCommand","I am a command to push up given methods"
"ClyNavigateBrowserForwardCommand","I am a command to go forward in the browser.I move browser to the next navigation state which was recorded after go back operation.By default I can be executed by alt+right shortcut"
"GTSpotterScrollPageUp",""
"RBRemoveDirectAccessToVariableTransformation","Replaces all the direct accesses to this variable in this class by invocation to this variable's getter and setter. It assumes that both getter and setter are implemented in the class.Usage:transformation := (RBRemoveDirectAccessToVariableTransformation	instanceVariable: 'environment'	class: #RBNamespace)	transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- the class must exist- the class defines a variable with the given name- the class defines both getter and setter for this variable"
"PackageChecker","Utility class to check packages"
"OSTouchTwoFingersRotationEvent","I am the abstract class for all two fingers rotation events"
"LGitTransferProgressCallback",""
"ProcessTest","A ProcessTest holds test cases for generic Process-related behaviour."
"IceMethodDefinition","I represent a method read from an Iceberg repository, either from a commit or from the working directory in disk.My contents is the code of the method.See my superclasses for more information."
"ZnUrl","I am ZnUrl, an implementation of an interpreted URL/URI.URLs are an element used in describing resources, more specifically to identify them.I consist of the following parts:  - scheme - like #http, #https, #ws, #wws, #file or nil  - host - hostname string or nil  - port - port integer or nil  - segments - collection of path segments, ends with #/ for directories  - query - query dictionary or nil  - fragment - fragment string or nil  - username - username string or nil  - password - password string or nilThe syntax of my external representation informally looks like this  scheme://username:password@host:port/segments?query#fragmentI am most often created by parsing my external representation using either my #fromString: class method or by sending the #asZnUrl convenience method to a String. Using #asZnUrl helps in accepting both Strings and ZnUrls arguments.  ZnUrl fromString: 'http://www.google.com/search?q=Smalltalk'.I can also be constucted programmatically.  ZnUrl new     scheme: #https;     host: 'encrypted.google.com';     addPathSegment: 'search';     queryAt: 'q' put: 'Smalltalk';     yourself.  My components can be manipulated destructively. Here is an example:  'http://www.google.com/?one=1&two=2' asZnUrl    queryAt: 'three' put: '3';    queryRemoveKey: 'one';    yourself.Some characters of parts of a URL are illegal because they would interfere with the syntax and further processing and thus have to be encoded. The methods in accessing protocols do not do any encoding, those in parsing and printing do. Here is an example:  'http://www.google.com' asZnUrl    addPathSegment: 'some encoding here';    queryAt: 'and some encoding' put: 'here, too';    yourselfMy parser is somewhat forgiving and accepts some unencoded URLs as well, like most browsers would.  'http://www.example.com:8888/a path?q=a, b, c' asZnUrl.I can parse in the context of a default scheme, like a browser would do.  ZnUrl fromString: 'www.example.com' defaultScheme: #httpGiven a scheme, I know its default port, try #portOrDefault.A path defaults to what is commonly referred to as slash, test with #isSlash. Paths are most often (but don't have to be) interpreted as filesystem paths. To support this, I have #isFilePath and #isDirectoryPath tests and #file and #directory accessors.I have some support to handle one URL in the context of another one, this is also known as a relative URL in the context of an absolute URL. Refer to #isAbsolute, #isRelative and #inContextOf:  '/folder/file.txt' asZnUrl inContextOf: 'http://fileserver.example.net:4400' asZnUrl.Incomplete relative references can be parsed and resolved in the context of a base URL using #withRelativeReference:  'http://www.site.com/static/html/home.html' asZnUrl withRelativeReference: '../js/menu.js'.Sometimes, the combination of my host and port are referred to as authority, see #authority.URL/URI/URN (Uniform/Universal Resource Locator/Identifier/Name) are closely related and can be and are used as synonyms is many contexts. Refer to http://en.wikipedia.org/wiki/Url for more information.There is a convenience method #retrieveContents to download the resource a ZnUrl points to,  'http://zn.stfx.eu/zn/numbers.txt' asZnUrl retrieveContents.This is implemented using a ZnUrlOperation. Part of Zinc HTTP Components."
"OmSuffixAfterDotStrategy","I generate a name by attaching a suffix after last dot in the name received as argument. My subclasses implement the concrete ways to do it."
"GLMBrickPopupEditThemer","I am a themer for a text edit popup"
"VTermOutputStyleElement","I represent a style element of a VTermOutputStyle.I can change my color"
"ClyEvaluationScript","I represent class side methods with pragma <script>"
"ManifestFileSystemTestsDisk","This package contains the disk tests of Pharo's FileSystem manager.A documentation of this library is available in the Deep Into Pharo book, «Chapter 3: Files with FileSystem»."
"RegexSyntaxError","This class represents syntax errors in regular expressions."
"GTEventRecorderTestServer","I represent a ZnServer that is used for testing purpose. I know how to start ZnServer that is started on a random port. For that reason I keep right URL that you can use sending #url message. "
"FLGlobalClassSerializationTest","I test the serialization of classes as *global* objects, i.e. the classes has to be present in the image at materialization time."
"GLMDataSourceUpdated","I am an annoucement use by Glamour to signal that the dataSource of a Renderer changed.Description --------------------I keep a pointer to the new dataSource. I can be use when the user filter a FastTable for example.I am use by a Fast related renderer in GLMMorphicFTRenderer.Public API and Key Messages------------------- newDataSource: aDataSource 		is my constructor.		Internal Representation and Key Implementation Points.------------------     Instance Variables	newDataSource:		The new DataSource."
"RFMethodOperation","I am representing a method ready to be executed. I know the receiver and the arguments, #value will execute the method"
"ShDefaultBuilderEnhancer","I am notified of all the events and modifications performed by the ShiftClassBuilder.I am the point of extension to add new features to it in a modular way.Also I can configure the builder to add more comparers or do additional things."
"BaselineOfDisplay","This baseline is used to generate Pharo images from the local clone of pharo-project/pharo repository. Depends on:- BaselineOfSUnitLoad type: - linearInstalls:- Graphics-* packages (Form, Bitmap, GrafPort...)"
"IceLibgitTonelFileUtils","Emulates other 'file utils' classes by reading from a git repository (its blob, not a working copy'). Allows for reading any tree (from any commit) in the repository."
"LGitExternalStringArray","I represent an external array of strings. Since strings are of variable size, they can not be easily represented by the general implementation.I take care of converting regular strings to external ones (which allocates and reserves the memory) and reading strings from memory.I override #free to ensure that the memory for the external strings is correctly freed."
"QSystemTally","Tally for assembling system profiles. It's a subclass of Link so we can chain tallies together in the receivers list."
"IceRemoteBranch","I am a remote tracked branch. I am a copy to a branch that exists in a remote. I can thus only synchronize myself with the external repository through fetches and with the local branches.  branch fetch.  branch fetchFrom:.  branch outgoingCommits.  branch hasOutgoingCommits."
"RBCompositeLintRuleTest",""
"MCFrontier","Utility class"
"KeyNotFound","I am KeyNotFound, an exception indicating that a key was not found in a Dictionary."
"TComposingDescription","Kernel trait for ComposingDescription"
"SDL_ControllerButtonEvent","SDL2 library structure representing a game controller button event data."
"OCAbstractVariable","I am an entry in a Scope that gets associated with variable nodes of the same name. "
"RBThisContextNode","I represent the specialized variable named 'thisContext'"
"MCBitbucketRepository",""
"FormCanvas","Note that when shadowDrawing is true, shadowStipple may be either a color, for a solid shadow of the given color, or it may be a stipple used to simulate gray shading when the display cannot support alpha blending."
"SugsRenameClassVar","I know how to rename a class variable"
"DelayBasicScheduler","I schedule delays in a basic way independent of any particular time-baseand without any special multi-threaded synchronisation protection. I provide the delay scheduling loop running as the system's highest priority process waiting for user delay scheduling events or VM events indicating a delay needs to be expired.I manage suspendedDelays as a Heap sorted by the resumption time of the delay.My main collaborators are:Delay - holds the resumptionTick calculated by the tickerDelay{time-base}Ticker - time-base specific interaction with VM and calculation of resumptionTicks USER-API #schedule: aDelay	Forwards delay from user-thread to #timingPrioritySchedule: thread (via signalling #timingPriorityRunEventLoop) #unschedule: aDelay	Forwards delay from user-thread to #timingPriorityUnschedule: thread (via signalling #timingPriorityRunEventLoop) 	SYSTEM-API#startTimerEventLoop{Priority:}	creates a process runnning the delay scheduling loop, customisable priority to help unit testing#stopTimeEventLoop	flags the delay scheduling loop to execute and expire all suspended delays#shutDown	suspend the delay scheduling loop to facilite clean snapshot #startUp	unsuspend delay scheduling loop when snapshot resumesINTERNAL - TIMING PRIORITY FACILITIEStimingPriority is the highest priority process in the system#timingPriorityRunEventLoop 	outer loop uses the ticker to wait for VM or user signals	handles suspend-loop requests from #shutDown 	invokes the main event handler	when loop exits, signals all remaining suspendedDelays#timingPriorityHandleEvent	the main event handler	hands delays to the next two methods...#timingPrioritySchedule: aDelay   inserts into suspendedDelays and determines activeDelay#timingPriorityUnSchedule: aDelay   deletes from suspendedDelays and determines activeDelayINTERNAL - SYNCHRONISATIONLacking synchronisation protection I rely solely on the implict semantics of process scheduling.Specifically, in #schedule:/#unschedule there can be no suspension point between the variable assignment and the following #signal which transfers execution to the highest priority process that consumes and clears the variable. In practice this currently works quite well,but is fragile wrt changing process scheduling semantics.  Subclasses add specific synchronisationprotection."
"InsetBorder","see BorderedMorph"
"ZipEncoder","A ZIP encoder"
"HelpBuilder","This is an utility class that builds the books for a help system.Instance Variables	rootTopics:		<OrderedCollection>rootTopics	- a collection of books "
"HEUndefinedObject","I represent nil as a literal.I am only stored as my tag. I have no content."
"AthensInteractiveScene","i am like my superclass, can display any scene (object which understands #renderOn:  message)and support free-form pan and zoom.but in addition, i expecting that scene object understands following:scene handleEvent: event in: sceneView at: position This method should answer true if scene object wants to handle event by itself , preventing default handling of view (pan & zoom).The point is coordinates of event in scene coordinate space (not screen coordinate space). The event is MorphicEvent (currently limited only to mouse move&button events).Note that if scene view enters zooming or panning state, no events will be passed to scene object as long as state is active. "
"TabActionButtonMorph","I am a multi state button supporting icon.I am used to render tab actions"
"ManifestRingCoreKernel","Manifest for DEPRECATED package of Ring"
"FFIExternalType","I'm an abstract class to implement FFI external types (types who will later be mapped to something understandable for a C library)"
"ClyUnknownQuery","I am special kind of query which implements NULL pattern.I always return empty array as result and for any convertion methods I return myself.Users should use my singleton #instance defined in class side: 			ClyUnknownQuery instance I am used as default query in Calypso-Browser widgets"
"ClySwitchToFlatQueryResultCommand","I am a command to switch query browser to flat items list.By default flat list is sorted by item name (selector in case of methods)"
"TextKern","A TextKern encodes a kerning change applicable over a given range of text.  Positive values of kern spread letters out, negative kern will cause them to overlap more.  Note that kerns other than 0 will display somewhat slower, as kerning is not yet supported in the text scanning primitive. "
"IceGitFileRemote","I am a 'remote' repository which is stored locally in your machine and accessed through a 'file://' url."
"EpMethodChange","I represent a change in the method dictionary of a class or a trait."
"IceLibgitTonelReader","I'm a reader for the tonel file format."
"MethodRepackaged","Notify about repackaging of a method"
"GLMMorphicFastTreeWithColumnsRenderer","I am a Morphic renderer for a GLMFastTreeTablePresentation. My main responsability is  to configure the table specific aspects of the presentation (columns, insets) and delegate to the appropriate data source.Description--------------------I use a GLMFastTreeTableDataSource to manage the data of the tree with columns.I will configure the renderer and the data source  based on a GLMFastTreeTablePresentation."
"ShouldSendSuperTearDownAsLastMessage","In a test case the tearDown method should call super tearDown as last message"
"IceRepositoryModified","Announces an unspecified change to a repository."
"ReNodeMatchRule","The base rule for smalltalk code pattern matching (relies on rewrite expressions). The rule operates on AST nodes.Use the following methods in the initialization to setup your subclass:- matches:- addMatchingExpression:	add a string of rewrite expression to be matched by rule- matchesAny:	same as previous but takes a collection of strings to match	- addMatchingMethod:	add a string of rewrite expression which should be parsed as a method	you may use #afterCheck:mappings: to do a post-matching validation of a matched node and mapping of wildcards."
"RubGhostTextDisplayer",""
"CompositeAnnotationContext","I am composite context. I represent users of annotations which satisfy all my parts.To create my instances use following method:	CompositeAnnotationContext with: {aContext1. aContext2}	Or use comma message to concatenate other contexts: 	aContext1 , aContext2Internal Representation and Key Implementation Points.    Instance Variables	parts:		<Collection of<AnnotationContext>>"
"EpRenameClassRefactoring","I represent the execution of a ""rename class"" (RBRenameClassRefactoring) refactoring."
"LGitAnnotatedCommit",""
"UnicodeTestRNG","The random number generator used by the UnicodeTest"
"FLGZippedBasicSerializationTest","SUnit tests for basic serialization that is zipped"
"ClyMessageImplementorsQuery","I return all implementors of given selectors"
"MOPTestClassC",""
"DoubleWordArray","DoubleWordArrays store 64-bit unsigned Integer values."
"GTEventCollectorTest","A GTEventCollectorTest is a test class for testing the behavior of GTEventCollector"
"LocaleTest","A unit test class for class Locale"
"ZnMultiPartFormDataEntity","I am ZnMultiPartFormDataEntity, a concrete HTTP Entity holding multi part form data that is encoded according to specific rules.I am a ZnEntity.Acknowledgement: some code borrowed from AJP.Part of Zinc HTTP Components."
"SystemOrganizerTest","SUnit tests for SystemOrganizer"
"MorphicSwappedColorDiffAdapter",""
"AthensLineSegment","i represent a line segment,created using 	#lineTo: command of AthensPathBuilder"
"BaselineOfIDE","This baseline is used to generate Pharo images from the local clone of pharo-project/pharo repository. Depends on:- BasicTools- Traits- Shift- Slots- AthensLoad type: - linearInstalls:- Epicea- decompiler- tests- refactoring- GT Tools- Versionner- TxText- OSWindow- QualityAssistant- some other packages "
"BoxedFloat64","My instances hold 64-bit Floats in heap objects.  This is the only representation on 32-bit systems.  But on 64-bit systems SmallFloat64 holds a subset of the full 64-bit double-precision range in immediate objects."
"GlobalIdentifierStonPersistence","I serialize or materialize objects using STON framework. Create instance of me calling GlobalIdentifierPersistence ston."
"SugsAddParameter","I know how to add a parameter to a method"
"STONCStyleCommentsSkipStream","I am STONCStyleCommentsSkipStream, a character ReadStream wrapping another character ReadStream. I skip C style comments, much like a classic C preprocessor.C, C++, Java, JavaScript style comments are either the multiline	/* a comment */	or the single line, up to end of line	// a comment 	I deal with any end of line convention. Multiline comments cannot be nested. You create me #on: another character ReadStream. Here is an example:	(STONCStyleCommentsSkipStream on: 'abc/*comment*/def' readStream) upToEnd.	Comments inside single and double quote delimited strings are ignored. Backslash escapes for single and double quotes inside strings are honored."
"MetacelloVersionLoadDirective",""
"RBAddTemporaryVariableTransformationTest",""
"AthensSceneView","i am simple morph for representing some scene.The scene is any object which implements #renderOn: method,or a block with single argument.(an argument passed is an Athens canvas).I implement a simple view panning and zooming with mouse drag and mouse-wheel (correspondigly).Example1: open scene view, by passing a simple rendering block.| view |view  := AthensSceneView new.view scene: [:canvas |	canvas surface clear:  Color black.	canvas setPaint: Color red.	canvas drawShape: (0@0 corner:120@100)].view openInWindow.Example2: open scene view on imported SVG file (note you need 'Athens-SVG' package loaded):| view |view  := AthensSceneView new.view scene: (AthensSVGConverter fromFile: 'lion.svg').view openInWindow."
"ZnConstants","I am ZnConstants, holding various constants that we use.Part of Zinc HTTP Components."
"ThemeSettings","Configurable basic settings for themes."
"DoubleLinkedList","I am DoubleLinkedList, an ordered list data structure consisting of objects, most likely DoubleLinks or something compatible, connected to each other by forward and backwards links.Note that some of my API deals with the elements that I hold, like any other collection, while some of my API references the links that I use internally (those usually have the word link in the selector name). Some methods accepts both values or links as argument (like #add:). Because I expose some if my internal structure, I can be broken quite easily."
"LGitObjectNotFound",""
"ClyItemFilter","I am a root of hierarchy of filters.My subclasses must implement method #matches: to check if given object satisfies specific condition.My instances are used by various types of queries. For example ClyFilterQuery select subset of actual query result using some of my subclasses.So as part of query I am participate in the environment query cache. And therefore my subclasses should correctly implement comparison methods (equality and hash) when they are pluggable by any parameter"
"RBAddMetaclassChange","I am a refactoring change for the class side of a class addition."
"GLMPortReference","A PortReference is used in Transmissions to bahavior that is specific to a Transmission instance."
"SimpleSwitchMorph","I represent a switch that can be either on or off.  I chnage my state in response to a mouse click.  When clicked, I also send my actionSelector to my target, just like a SimpleButtonMorph.	SimpleSwitchMorph new openInWorld"
"NECInstVarTypeGuesser","I'm a simple InstructionClient that tries to guess the type of a given instance variable name of a class. "
"TheHeartOfSpec","A SpecExamples is the second sub-book of SpecHelpTopics. It contains the core of Spec briefly explained.See class side for selectors."
"HelpHowToHelpTopics","Explains help topics"
"RBCompositeLintRule","A RBCompositeLintRule is a composite rule holding rules."
"SDL_SysWMinfo_WaylandInfo","A structure that contains Wayland specific information about a window. "
"FFIArchitecture","I'm a base class for different kind of architectures. My children implement different architecture-dependent functionality."
"MenuLineMorph","A MenuLineMorph is a item separator in menu."
"PluggableMorphListMorph","A type of PluggableListMorph that supports morphs for items. Useful for lists with icons etc."
"CmdOpenTextLeftBarMenuCommand","I am a command to open context menu of left side bar of text editor.I use CmdTextLeftBarMenuActivation to collect all releated commands"
"LogicalFontManagerTest","A LogicalFontManagerTest is a test class for testing the behavior of LogicalFontManager"
"TabManagerModel","This is deprecated class because the original class TabManagerModel was renamed to TabManagerPresenter. You should stop to use this class and modify your code to use TabManagerPresenter."
"FileDialogWindowTest","Unit tests for File dialog window"
"HiNode","I am a node used to render a Hiedra ruler."
"LGitDiffHunk",""
"ExternalLibrary","An external library bundles calls to functions from the same library. It is provided mainly as convenience since every external function can be fully specified by the name and the module it resides in.Every external function that is defined in an external library by default will use the library it is defined in. This can always be modified by providing the appropriate module in the specification. "
"LGitPushTransferProgressCallback",""
"SDL_Cursor","I represent  handle of a mouse cursor."
"RBInstVarInSubclassesRule","This smell arises when instance variables are defined in all subclasses. Many times you might want to pull the instance variable up into the class so that all the subclasses do not have to define it. In addition have a look at the initialize method in each of the subclasses because if the instance variable is really the same, it will be initialized similarly in different places."
"OmBlockFileStoreTest",""
"RBMoveTemporaryVariableDefinitionTransformationTest",""
"ClyMetaLevelToolbarGroup","I am a toolbar menu group to show meta level modes of the browser together"
"DiffChangeRecordConverter","A DiffChangeRecordConverter is a converter used to show the diff between two methodreferences"
"ExactFloatPrintPolicy","I am ExactFloatPrintPolicy.Through FloatPrintPolicy and double dispatch I force Float>>#printOn:base: to dynamically use the slower but accurate way to print Floats using Float>>#absPrintExactlyOn:base:"
"LGitStatusTypeEnum","/** * Status flags for a single file. * * A combination of these values will be returned to indicate the status of * a file.  Status compares the working directory, the index, and the * current HEAD of the repository.  The `GIT_STATUS_INDEX` set of flags * represents the status of file in the index relative to the HEAD, and the * `GIT_STATUS_WT` set of flags represent the status of the file in the * working directory relative to the index. */"
"ReStringBasedCritique","I am a critic that provides a selection interval by searching a 'faulty substring' in the target's source code. I also use the 'faulty substring' to enhence the critic's title"
"MCClassDefinition","A MCClassDefinition represents a class."
"ChangeSorterModel","A ChangeSorterModel is a model used by Change Sorter UIs for computation"
"GLMPane","A GLMPane represents the ""physical"" building block of a browser. A pane is presented using a composite presentation (held in the presentations instance var).It announces:- GLMMatchingPresentationsChanged- GLMPresentationsChangedInstance Variables	browser:		Browser	lastActivePresentation:		Presentation	name:		Symbol	ports:		Collection of Ports	presentations:		CompositePresentation"
"SocketAddressTests","Unit test for SocketAddress"
"LGitRevwalk",""
"MCRepositoryGroup","A singleton class, holds the list of repositories. Can look for a requested VersionInfo among its repositories."
"ClyNavigationEnvironmentTestCase",""
"ReAbstractRule","I an the root of all quality rules rules.If you want to learn about the features of rules or how to create your own, please read:RenrakuRuleHelp readInHelpBrowser"
"SDL_MouseButtonEvent","SDL2 library structure"
"ClassWithThreeAnnotations",""
"GTSpotterDiveInCategory",""
"TonelReader","I'm a monticello reader for tonel format repositories. I read - a package per directory - a class per file - a set of extensions to a single class per file (for example, all extensions of a package to String will be in a single file)I'm created on a file reference to a directory where the package will be read and the name of the package to read.[[[TonelReader on: 'someDirectoryWithTonelPackages' asFileReference filename: 'MyPackageName']]]My main method is- ==#definitions== reads and parses the tonel file, returns a list of monticello definitions.- ==#snapshot== returns a monticello snapshot with the read definitions.- ==#version== returns a monticello version with the read snapshot.! Implementation detailsThe monticello versions I return do have artificial information. Since I'm just meant to read versions from a directory, this directory has no information such as commit message, commit time, author, or ancestors. Check the method ==#loadVersionInfo== for more information."
"BottomRightGripMorph","I am the handle in the right bottom of windows used for resizing them."
"ManifestSystemChanges","Packacke with support for system changes recorded in changesets"
"SDL_ControllerButtonDownEvent","SDL2 library structure representing a game controller button down event data."
"File","I represent a sequential binary File. I provide the minimum operations to:- move the cursor fo the file- reading- writingI am also the entry point of the FilePlugin primitives.!Examples of usage""Creating a file""file := File named: 'asd.txt' asFileReference fullName.""Opening / closing it""file open.file openForAppend.file close.""Accessing the file properties""file size.file position.file position: 0.file seekAbsolute: 10.file seekRelative: 10.file atEnd.""Writing""file nextPutAll: 'sdd'.""Reading""file next: 2.""Buffered write""file next: 2 putAll: 'abc' startingAt: 2.""Buffered read""buffer := ByteArray new: 5.file readInto: buffer startingAt: 1 count: 5.buffer asString."
"MetacelloMCProjectReferenceSpecTestCase",""
"ClyClassHierarchyMap","I represent the actual relationship between classes using simple map between parents and children.Concrete type of hierarchy build my instances where it defines what classes should be parent and what should be children:	aHierarchyMap addChild: childClass to: parentClass.My instances are created by hierarchies using following method: 	map := ClyClassHierarchyMap for: aHierarchy of: classes.And my method #build initiates actual map building. Users do not need to create map directly. Instead they ask concrete hierarchy to build from classes: 	map := ClySubclassHierarchy buildFrom: classes.During building I collect roots which are used as a starting point to access classes in hierarchical order:	map doInOrder: [ :class |  ]	map doInOrderWithDepth: [ :class :depth | ]You can also iterate roots: 	map rootsDo: [ :class |  ]Childen of every class are sorted according to the sort function of the hierarchy.Internal Representation and Key Implementation Points.    Instance Variables	classes:		<IdentitySet<Class>>	hierarchy:		<ClyClassHierarchy>	parentMap:		<Dictionary<Class, SortedCollection<Class>>>	roots:		<IdentitySet<Class>>"
"CheckBoxPresenter","A CheckBoẍPresenteris a spec presenter for Checkbox.See AbstractFormButtonPresenterself exampleYou can also have a look at CheckBoxExample for a full example of how to use them.I provide the following methodstodo- labelOnLeft and labelOnRight- labelClickable"
"GTSpotterHidePreview",""
"AbstractTwoButtons","I am an abstract Spec widget managing two ButtonPresenter.I provide shortcuts to set easier the buttons-  firstIcon:secondIcon: that take two name of icon and set the buttons with the corresponding icons.- firstLabel:secondLabel: to set labels.- firstAction:secondAction: to set blocks to perform.I provide two layout on my class side, vertical and horizontal."
"TestDynamicVariable","TestDynamicVariable is a test class using in ProcessSpecificTest."
"Categorizer","A Categorizer is responsible to manage the class categories and method protocols. Instances consist of an Array of category names (categoryArray), each of which refers to an Array of elements (elementArray). This association is made through an Array of stop indices (categoryStops), each of which is the index in elementArray of the last element (if any) of the corresponding category. For example: categories := Array with: 'firstCat' with: 'secondCat' with: 'thirdCat'. stops := Array with: 1 with: 4 with: 4. elements := Array with: #a with: #b with: #c with: #d. This means that category firstCat has only #a, secondCat has #b, #c, and #d, and thirdCat has no elements. This means that stops at: stops size must be the same as elements size. Instance Variables      categoryArray:          <SequenceableCollection of: Object>      categoryStops:          <SequenceableCollection of: Integer>      elementArray:           <SequenceableCollection of: Object>categoryArray       - holds the list of categories.       A category could be any Object but is generally a String or Symbol.       Categories should be unique (categoryArray asSet size = categoryArray size)categoryStops       - holds the index of last element belonging to each category.       There should be a category stop for each category (categoryStops size = categoryArray size).       The categoryStops should be sorted (categoryStops sorted = categoryStops).       A category stop equal to its predecessor (= 0 for the first category stop) denotes an empty category.elementArray      - holds the elements to be classified. The elements are sorted by category.Class variables       Default is the default category used to classify yet unclassified methods of a class       NullCategory is the category to be displayed in a Browser for a class having no method."
"X11Encoding","X11 encoding"
"EpTEventVisitor","I am a visitor for EpEvent subinstances."
"ZnEntityTooLarge","ZnEntityTooLarge is signalled when too big an entity is read from a stream.This is a resumable exception"
"ClyExtendedClassGroupProvider","I provide ""extensions"" class group. I add this group only when package has extensions."
"MetacelloMethodSection",""
"CheckBoxExampleTest",""
"DateParsingTests","SUnit tests for date parsing"
"GLMNewScriptingTest",""
"MorphicTickingWindowAdapter","I am the adapter used to bridge a TickingWindowPresenter and a TickingSpecWindow"
"ClyGroupItemTableDecorator","I delegate decoration of any group item to the group itself:	groupItem actualObject decorateTableCell: anItemCellMorph of: groupItem	The actualObject is a kind ClyGroup. There are method, class and package groups.If you introduce new kind of group then to activate this decorator you will need to annotate me with new decoration strategy for new context of this new group"
"SugsDelegateMethod","I know how to delegate the selected method in an instance variable and move the code to a class"
"NonBooleanReceiver","Some constructs are optimized in the compiler :#whileTrue:#whileFalse:#ifTrue:#ifFalse:#ifTrue:ifFalse:#ifFalse:ifTrue:So you cannot by default use them on non boolean objects.	If you really need to use optimized constructs, you can enable Opal compiler and do one of the following :		- recompile your method with the pragma : <compilerOptions: #(+ optIlineNone)>		- recompile your class with the method : MyClass class>>compiler 			^ super compiler options: #(+ optIlineNone)		- call from this method by Object>>#mustBeBooleanInMagic:"""
"StrikeFontSetStoredSetting","I am responsible for storing information about StrikeFontSet objects."
"ClyEnvironmentChanged","I am announced when query result when it is changed due to occured system change"
"FFIFloat32","Float type. Represented as float in C side."
"FFIFloat64","Float type. Represented as double in C side."
"RxsContextCondition","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--One of a few special nodes more often representing special state of the match rather than a predicate on a character.  The ugly exception is the #any condition which *is* a predicate on a character.Instance variables:	kind		<Selector>"
"FTTreeFunctionStrategy","I am an abstract class that describe a Strategy to search/filter a FTTreeDataSource.Description----------------------I have a dataSource that I can use and I can have a seach pattern which I use to search/filter the dataSource if needed.I am use by a FTTreeDataSource and I help it with the possible FTFunction of his FTTableMorph. Public API and Key Messages----------------------- #search    	activate a search of the dataSource with the current pattern.	- #filter    	activate the filter of the dataSource with the current pattern.	- #searchWith: aString dataSource: dataSource 	is one of my constructors, it return the result of a search.-#filterWith: aRegex dataSource: dataSource 	is an other of my constructor, it returns a new dataSource filtered by the regex. 	Example----------------------I am an abstract class. I should not be use. Internal Representation and Key Implementation Points.----------------------    Instance Variables	dataSource:		The data source I need to search/filter.	pattern:		The search pattern in need to use,  this is a String or a Regex."
"CmdKMDispatcher","I implement dispatch by delegating execution to appropriate command which defines shortcut activation strategy suitable for given KM events.User should override morph kmDispatcher to use me instead of default:	YourMorph>>kmDispatcher		^ CmdKMDispatcher attachedTo: self		In case when commands should be provided by another object instead of morph you should use another method: 		CmdKMDispatcher attachedTo: self withCommandsFrom: someObjectWithCommandContext	During dispatch process I ask command provider to create command context. And by default provider is morph itself. Internal Representation and Key Implementation Points.    Instance Variables	commandProvider:		<Object>"
"ClyOverridingMethodTag","I mark overriding methods (which override any of subclass or trait methods)"
"GLMMorphicRenderer","This is the class responsible for the binding to Morphic.| browser |browser := GLMTabulator new.browser column: #one; column: #two.browser transmit to: #one; andShow: [:a | a list.].browser transmit to: #two; from: #one; andShow: [ :a |	a text.].browser openOn: #(a b c d)"
"MOPTestClassA",""
"SmallInteger","My instances are 31-bit numbers, stored in twos complement form. The allowable range is approximately +- 1 billion (see SmallInteger minVal, maxVal)."
"ShLayoutChangeDetector","I know how to detect a change in the layout of a class."
"SDL_JoyAxisEvent","SDL2 library structure representing a joystick axis event data."
"SugsMorphicTextAdapterContext","A SugsMorphicTextAdapterContext is a context that know how to work with the MorphicTextAdapter."
"UndoRedoRecord","An UndoRedoRecord is a leaf of an history tree. It  holds undo and redo commands. Such a command is represented by a MessageSend. Instance Variables	redoMessage:		<MessageSend>	undoMessage:		<MessageSend>redoMessage	- The command which is performed for redoingundoMessage	- The command which is performed for undoing"
"FFICallbackType","I'm a FFICallback type. I can handle callback type parameters.What I actually do is to pass the content of #thunk instVar of the objectClass as parameter. Thunk needs to be a callback thunk (and then an ExternalAddress).The C side of a callback is void* (because is a pointer to a function)"
"MorphAnnouncement","I am an abstract announcement for morphic events.  I carry the morph where the event has ocurred.My subclasses should add information for more precise events."
"EpEvent","I am an abstract class that represents a system event."
"GTSUnitDebugger","I am a custom debugger for SUnit.I embed a textual diff when an #assert:equals: assertion fails and provide access to the setUp/tearDown methods of a test."
"TextClassLink","An active link in a text linking to a class"
"GLMAnimation","A GLMAnimation class is a basic animation class that works in background thread and performs brick transformation in UI thread"
"Latin1CharsetTest","Tests for the Latin1Charset class.  The invariant is that Latin1Charset is  a subset of Unicode, and therefore all of the methods defined there shouldhave behaviour consisetent with Unicode.There may appeaer to be no tests here; that's because this class inherits all of  its tests from AsciiCharset."
"TextFieldExample","A TextFieldExample is a simple example of how to use TextFields."
"MetacelloSkipDirtyPackageLoad",""
"MCFileBasedRepository","A file based metacello repository"
"HiLinkBuilder","I know how to build ruler links."
"SycOpenSourceCodeMenuCommand","I am a command to open special source code menu.I show in menu all commands annotated by SycSourceCodeMenuActivation"
"GLMFlexiblePresentationTest",""
"FTPClient","A minimal FTP client program.  Could store all state in inst vars, and use an instance to represent the full state of a connection in progress.  But simpler to do all that in one method and have it be a complete transaction.Always operates in passive mode (PASV).  All connections are initiated from client in order to get through firewalls.See ServerDirectory openFTP, ServerDirectory getFileNamed:, ServerDirectory putFile:named: for examples of use.See TCP/IP, second edition, by Dr. Sidnie Feit, McGraw-Hill, 1997, Chapter 14, p311."
"ReflectivityExamples2","Examples for RF per object."
"ClyAllMethodCritiquesTest",""
"RenrakuCritiqueExamplesHelp","In the topics of this book You will find references to the concrete critiques implementations. For more please browse the subclasses of ReAbstractCritique"
"DAGraphVizGenerator","A PDGraphVizGenerator is a class able to generate a dot file to represent a graph."
"IceTipAbstractSSHCredentialsModel","I implement the basic behavior of all the ssh credentials.My subclasses implements the specific behavior for each of the operations."
"GTDebuggerBrowserUpdateRequest","A GTDebuggerBrowserUpdateRequest is a wrapper for a DebugActionExecuted event. It is sent to the debugger after the DebugActionExecuted event was handled by the debugger."
"GLMLoggerTest",""
"NullPresenter","A null presenter that contains nothing.Used by DynamicPresentersListBuilder to fill empty space when required for the layout."
"ClyRemoveMetalinkCommand","I am a base class for commands which remove particular kind of metalink from given method or source node.My subclasses should implement following class side methods: - metalinkManagerClassIt is a class which manages target type of metalinks. For example Breakpoint or ExecutionCounter.- contextMenuOrderIt should return order in context menu"
"ProtocolRemovalException","A ProtocolRemovalException is an error raised when someone try to remove a protocol that should not be removed"
"CustomHelp","This is a common superclass for custom help. Subclasses of this class are automatically included into the system help.By default the informations provided on the receiver class are converted into help topics by a specific builder - here the CustomHelpHelpBuilder. Note that you can provide an own custom builder by overriding the #builder method"
"SearchableTree","I am a tree plus an input field to be able to filter the tree elements"
"RubCurrentLineBarDecorator",""
"IRLiteralVariableAccess","LiteralVariables are -> Globals-> Pool access-> Class Var access"
"ClyClassWithScripts","I am example class which includes all kind of scripts.Look at the class side"
"RBRefactoryTestDataApp",""
"ClySwitchToPackagesCommand","I am a command to switch full browser to raw packages mode. "
"AbstractMorphicUITest",""
"CharacterBlock","I describe the location of one character displayed on the screen. My instances are used to return the results of methods:	Paragraph characterBlockAtPoint: aPoint and	Paragraph characterBlockForIndex: stringIndex.Any recomposition or movement of a Paragraph can make the information I store stale.text (Text): The text where my character is fromstringIndex (Integer): The index of my character in the text, starting from 1textLine (TextLine): The displayed line my character is onorigin (Point): The top-left corner of the area allocated for displaying my		character's glyph, in pixels, counting right then down from the		top-left corner of the text display area, and starting from 0@0corner (Point): The bottom-right corner of the area allocated for displaying my		character's glyph, in pixels, counting right then down from the		top-left corner of the text display area, and starting from 0@0"
"FFIExternalObjectType","I'm en external object type (a pointer)"
"FinderClassNode","A FinderClassNode is a node used by the FinderUI's tree representing a Class"
"DAAssemblyNode","I reprensent a package assembly (i.e. a set of packages).I collect all dependencies related to the assembly parts."
"ClyPackageContextOfFullBrowser","I am a context of selected packages in full browser"
"ClyUnclassifiedMethodsQueryTest",""
"MalCseEdge",""
"IceAuthenticationError","I indicate when an error trying to authenticate occurs (tipically, when cloning without credentials)"
"PrettyTextDiffBuilder","I'm like TextDiffBuilder, but I use the pretty-printed version of the source code if available.Instance Variables	sourceClass:		<Class>sourceClass	- this class provides the pretty-printer"
"ClyMethodFlag","I mark methods which send #flag: message"
"SpecStubMenuGroupAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"ReProperty","I'm an external property of some entity. I have a source anchor to it…"
"GLMDiffPresentation","GLMDiffPresentation is meant to show the difference between two input text objects.The convention is that the transformed entity should provide a collection with two elements."
"AbstractEyeElement","I represent an abstract inspection element. In an EyeInspector, a eye element corresponds to a wrapper around a field element.Public API :label: display on left list panel of the eye inspectordescription: printed on the right panel of the eye inspectorhost: object inspected in the eye inspector value: object represented by this eye element "
"RBUsesTrueRule","Checks for uses of the classes True and False instead of the objects true and false.true is the object true, while True is the class whose true is the sole instance."
"RBParserTest","SUnit tests for RBParser"
"ButtonPresenter","A ButtonPresenter is an applicative presenter which handle a basic button.See AbstractWidgetPresenterself exampleYou can also have a look at CustomerStatisfaction for another example.I provide the following variables and their accessors- action is the action performed when I am clicked.- icon is the icon displayed on me.- label is the text displayed on me.- state is a boolean representing if I am highlighted, it is false by default and it is reversed while clicking.todo- askBeforeChanging- font- menu- shortcut"
"TestDelaySemaphoreSchedulerMicrosecondTicker","I inherit delay scheduler system tests and run them for the specific combination of...  scheduler DelaySemaphoreScheduler  ticker DelayMicrosecondTicker."
"InfiniteForm","I represent a Form obtained by replicating a pattern form indefinitely in all directions."
"GTEventRecorderHelp",""
"GTInspectorContextNamedTempNode","I am a variable node for representing a  temporary  variable stored in a  Context object that has a name attached. This includes  local variables and method parameters."
"RGMethodDefinition","RGMethodDefinition is a concrete representation of methods. It can be used to build browser for methods that are not in the image. It is polymorphic with CompiledMethod. * We can ask a RGMethodDefinition for its selector using the selector message.Example:	(Point>>#dist:) asRingDefinition selector		-> #distWe can also ask the ring object representation of its class or the Smalltalk class actually implementing the corresponding compiledMethod. * To access the ring class definition name, use parentName	aRGMethodDefinition parentName	Example:	(Point>>#dist:) asRingDefinition parentName		->  #Point		* If you have a complete model where classes and methods are ring definition, to access the ring class definition , use parent	aRGMethodDefinition parent	Example:	aRGMethodDefinition(Point>>#dist:) parent		->  aRGClassDefinition(Point)		* If you want to access the smalltalk class that contains the compiledMethod that is represented by a ringMethodDefinition, use realParent	aRGMethodDefinition realParent	Example:	(Point>>#dist:) asRingDefinition realParent		->  Point		Now a RingEntityDefinition offers two APIs: one that is generic and works for all the source code entities and this is the one we just presented: parent, parentName and realParent. Having such interface is important to build generic tools that could manipulate any entities in a polymorphic way (yes no isKindOf: everywhere).In addition, a ring method definition offers a specific interface that should only be used when you know that you are solely manipulatespecific entity such as class element: method definition, class comment, and variables. Here is the equivalence table	realParent 				realClass	parent					ringClass	parentName			className* The message class returns the class of the object :).Example:	(Point>>#dist:) asRingDefinition class		->  RingMethodDefinition		* The message className returns the name of the ring class defining the reingMethodDefinition.Example:	(Point>>#dist:) asRingDefinition className		->  #Point				* If you have a complete model where classes and methods are ring definition, to access the ring class definition , use parent	aRGMethodDefinition ringClass	Example:	aRGMethodDefinition(Point>>#dist:) ringClass		->  aRGClassDefinition(Point)				* If you want to access the smalltalk class that contains the compiledMethod that is represented by a ringMethodDefinition, use realClass	aRGMethodDefinition realClass	Example:	(Point>>#dist:) asRingDefinition realClass		->  Point"
"GLMActionBrickDarkThemer",""
"IceWrongUrl","We can not parse the origin URL you have introduced. Maybe you made a typo, or maybe we do not support that kind of URLs."
"PolygonMorphTest","This class holds tests for PolygonMorph"
"IceCredentialStore","I am the responsible for storing the credentials. Now I can store plain text credentials and SSH key pairs. I store the credentials in a fuel file, this is non encrypted. So it should be improved later.There is a default instance that stores the credentials in a file per image, in the pharo-local directory.In the settings you can modify the location of the credentials file."
"ErrorDialogWindow","A message dialog with an error icon."
"OSTouchEvent","i am the different touch events. As a lot of event should be raises at the same time I should be par of I have the same logic as the Android Event. For my realy first draw maybe I should be refined late, depending of the need.I am design to manage:	- Touch Event from mobile platform	- Touch Event from Graphical Tools (graphical palette)	Developpement version Todo Work in progress"
"RubScrolledTextExtra","RubScrolledTextExtra represents the root of rulers graphical representations (which add specific behavior to the scrolledText on which they are attached).Subinstances are the graphical representation of the associated decorators defined in the . the main methods are 	- computedExtentFrom:	- computedHeightFrom: 	- computedPositionFrom:	- computedWidthFrom:	"
"TableLayout","The layout process:For computing the new layout for the children of any morph, we start with an initial rectangle which is provided as a reference.Step 1: The first step of layout computation is to compute the minimum extent each of our children can have. The minimum extent is mapped through both the local layout frame of the morph (for relative positioning) and the global layout frame (for insets, such as cursor indication) to obtain the minimal size required for each cell.Step 2: Based on the cell sizes, the number of cells we can put into each row and column is computed. For equal spacing, the maximum size of the cells is taken into account here.Step 3: Based on the row/column sizes, we compute the extra space which should be added to each row/column. For 	#leftFlush/#topFlush - we add all extra space add the end	#rightFlush/#bottomFlush - we add all extra space at the start	#centering - we add 1/2 of the extra space at start and end	#justified - we distribute the space evenly between the morphs[NOTE: If any #spaceFill morphs are encountered during this step, #justified is implied and the space is exclusively and equally distributed between those #spaceFill morphs. This is for backward compatibility and should *never* be necessary in the new regime].Step 4: The morphs are placed in the computed cells and the extra space is distributed as necessary. Placing the submorphs is done by mapping through the global and the local layout frame as requested.Start point:=> bounds: new rectangle for the morph.Compute basic arrangement of morphs:=> For each submorph compute minExtent	- if global layout frame inset in global layout frame	- if local layout frame inset in local layout frame=> Compute number of morphs per, width and height of row/column	- if equal spacing based on max size=> Compute extra space per row/column	- if centering = #justified; distribute space equally	- if centering #leftFlush/#topFlush (-1) add start extra	- if centering #rightFlush/#bottomFlush (1) add end extra	- if centering #centered add 1/2 extra to start/end	<extra space must be float and rounded accordingly!>=> Place morphs in appropriate cells	- if global layout frame inset in global layout frame	- if local layout frame inset in local layout frame	<will likely cause #layoutChanged by submorphs>Distribute morphs in row/column:=> Compute the max length of each row/column"
"ClyPackageExtensionScopeTest",""
"MetacelloSemanticVersionNumberTestCase",""
"ClySwitchFocusToNextBrowserPaneCommand","I am a command to move browser focus to next (right) navigation pane"
"ClyGroupedCritiqueResult","I am critique query result which group given critiques by group name.I represent these groups with ClyConcreteCritiqueMethodGroup instances"
"ZdcPluginSSLSession","I am ZdcPluginSSLSession, an object managing the secure communication between two parties.I am a ZdcAbstractSSLSession.I am a wrapper for the SqueakSSL plugin.I am probably too primitive to be used directly, see ZnSecureSocketStream for a higher level client.Ackowledgement: based on the original SqueakSSL code."
"RBClassNameInSelectorRule","This smell arises when the class name is found in a selector. This is redundant since to call the you must already refer to the class name. For example, #openHierarchyBrowserFrom: is a redundant name for HierarchyBrowser."
"IceTipPullContext","I'm a context for the pull browser."
"MetacelloPackageLoadDirective",""
"TOccurrencesForIdentityCollectionsTest","A trait for test purposes"
"RxmLink","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A matcher is built of a number of links interconnected into some intricate structure. Regardless of fancy stuff, any link (except for the terminator) has the next one. Any link can match against a stream of characters, recursively propagating the match to the next link. Any link supports a number of matcher-building messages. This superclass does all of the above. The class is not necessarily abstract. It may double as an empty string matcher: it recursively propagates the match to the next link, thus always matching nothing successfully.Principal method:	matchAgainst: aMatcher		Any subclass will reimplement this to test the state of the matcher, most		probably reading one or more characters from the matcher's stream, and		either decide it has matched and answer true, leaving matcher stream		positioned at the end of match, or answer false and restore the matcher		stream position to whatever it was before the matching attempt.Instance variables:	next		<RxmLink | RxmTerminator> The next link in the structure."
"IceTipExtendedVersionBrowser","DEPRECATED: Replace it with its ancestor."
"TextEmphasis","A TextEmphasis, encodes a characteristic applicable to all fonts.  The encoding is as follows:	1	bold	2	itallic	4	underlined	8	narrow	16	struck out"
"T2AbstractTest","Abstract Test of all the TraitsV2 tests"
"MissingClassError","I'm a specialized error that is invoked when trying to load a method for a non existing class. By default this exception is not resumable but it can be set and used for example as follow:	[ FileStream fileIn: aFile ]		on: MissingClassError		do: [ :exception | 				exception defineClass. 				exception asResumable.				exception resume. ]						So we give the possibility to compile and resume compution.The method defineClass defines a simple class inheriting from Object (or from the class specified using #superclassName:)The idea is that if later the effective class is loaded its definition will override  this one. "
"DAPackageAnalyzerCycleDetectionWindow","UI merging SpecTreeModel package dependencies and browser"
"MorphicTreeNodeAdapter","I am the bridget between a TreeNodePresenter and a SpecTreeNodeModel"
"MorphicTreeAdapterTest","SUnit tests for MorphicTreeAdapter"
"RBRenameMethodRefactoring","I am a refactoring operation for renaming methods.The new method name has to have the same number of arguments, but the order of arguments can be changed.My preconditions verify that the number of arguments is the same and that the new method name isn't already used.All references in senders of the old method are changed, either the method name only or the order of the supplied arguments."
"EpEnabledIntegrationTest","I test EpMonitor integration (with change recording actually enabled)."
"FastDraggingFrameMorph","I represents the windows frame for window dragging or resizing when fast dragging or fast resizing is wanted (when  UITheme currentSettings fastDragging is set to true).For window resizing, I'm created by a corner or an edge grip when the mouse is clicked on it (see SystemWindow>>doFastWindowReframe:). For window dragging, I'm created when the top window bar is clicked (see SystemWindow>>doFastFrameDrag:).  I'm always created with the same bounds as the target window bounds. The mouse focus is given to me and my bounds are changed while the hand is moving. On mouse up, the window bounds is set to my own bounds and then I'm deleted.Instance Variables	location:		<Symbol>	startGap:		<Point>	target:		<SystemWindow>location	- The symbol representing the corner or the edge (#topLeft, #top, #topRight .... or #left). I'm set to nil for window draggingstartGap	- For window dragging, keep track of the distance between the window top bar first click location and the window positiontarget	- The window to be resized or dragged"
"TestClassForTestingDebugger",""
"EpPluggableFilter","My instances decide if an OmEntry is accepted applying a pluggable block closure."
"ProcessSpecificTest","A ProcessSpecificTest is a test case for process local and dynamic variables."
"Array2D","I represent a mathematical matrix or a two-dimensional array. I provide methods for creating matrices, operating on them arithmetically and algebraically. Structure: - numberOfRows : a non-negative integer saying how many rows there are. - numberOfColumns : a non-negative integer saying how many columns there are. - contents : an Array holding the elements in row-major order.  That is, for a 2x3 array the contents are (11 12 13 21 22 23).  Element-wise matrix arithmetic works; you can freely mix matrices and numbers butdon't try to mix matrices and arrays (yet).Matrix multiplication, using the symbol +* (derived from APL's +.x), works between(Matrix or Array) +* (Matrix or Array).  Don't try to use a number as an argument of +*.Matrix * Number and Number * Matrix work fine, so you don't need +* with numbers."
"RBMoveTemporaryVariableDefinitionTransformation","Moves the definition of a temporary variable to the block/scope where it is used.For a temporary variable defined in a method but only initialized and used within a block, the transformation moves the definition to the block which uses this variable.The transformation automatically searches for the block(s) where the definition could be moved to.Usage:| transformation |transformation := (RBMoveTemporaryVariableDefinitionTransformation				variable: #temp				inMethod: #moveDefinition				inClass: #RBDummyRefactoryTestDataApp)				transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- there is a block where the variable definition can be moved to."
"AthensCairoPathBuilder","i implement cairo-specific path builder. see my superclass for more details."
"IceHttpsProtocol",""
"DailyNonInteractiveTranscript","I am DailyNonInteractiveTranscript, a NonInteractiveTranscript that writes to a dated file, switching to a new file each day.	(DailyNonInteractiveTranscript onFileNamed: 'server-{1}.log') install."
"AthensWrapWorldMorph","An AthensWrapWorldMorph is a AthensWrapMorph holding a specialized Athens WorldMorph. This Athens WorldMorph draws the submorphs with an AthensCanvas.Instance Variables	worldmorph:		the Athens WorldMorph	wrappedWorldDisplay:		a display wrapper"
"CompositeTransform","A composite transform provides the effect of several levels of coordinate transformations."
"RBToDoRule","Checks for use of to:do: when a do:, with:do: or timesRepeat: when should be used."
"RBPullUpMethodRefactoring","I am a refactoring for moving a method up to the superclass. My precondition verify that this method does not refere to instance variables not accessible in the superclass. And this method does not sends a super message that is defined in the superclass.If the method already exists and the superclass is abstract or not referenced anywhere, replace that implementation and push down the old method to all other existing subclasses."
"UIManagerSessionHandler","I am a session handler that will initialize the UIManager during startup.This session handler makes the assumption that the current UIManager is a startup UI manager when its #startup: method gets called. Then, during startup he will install a Morphic UI manager.During shutdown we put back a startup ui manager, so we can handle startup actions during next startup without depending in the UI. (However, we shouldnt need a UI manager during the first startup actions)."
"GLMMorphicExpanderRenderer",""
"AthensCairoText","do not use this class. this is subject of change or removal"
"MCMergeResolutionRequest","Notify to resolve conflicts by merging"
"ObjectTest","SUnit tests for objects"
"ManifestIcebergLibgitFiletree","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"MCClassInstanceVariableDefinition","A MCClassInstanceVariableDefinition represents a class instance variable."
"GLMPrintPopper","I am a popper that displays a notification message: I can display a given object or evaluate the selection of the attached text editor. I also offer a button for inspecting the object that is displayed.GLMPrintPopper simpleObjectPopper	GLMPrintPopper selectionEvaluationPopper"
"PackageTreeExample","PackageTreeExample new open"
"FFIExternalStructurePlatformTests","Tests for external structures on platform"
"EpEventIntegrationTest",""
"GLMTreeMorphSelectionChanged",""
"MetacelloLoaderPolicy",""
"SDL2TouchGestureExample","You can move the circle by scrolling and change his size by pinching"
"ClyMonticelloEnvironmentPlugin","I mark dirty packages with special tag"
"AthensCanvasWrapper","I am a wrapper for a (Form-)Canvas that implements the Canvas API on top of an AthensCanvas."
"DoubleLink","I am DoubleLink, the elementary part of a DoubleLinkedList.I hold a value, as well as a link to my successor (nextLink) and to my predecessor (previousLink) - both can be nil."
"PragmaUpdated","A PragmaUpdated is announced by a PragamColllector when a method defined with an acceptable pragma according to the PragmaCollector filter is updated (recompiled).Instance Variables"
"ClySwitchToFlatClassesCommand","I am a command to switch the full browser to flat class mode"
"AbstractWidgetModel","This is deprecated class because the original class AbstractWidgetModel was renamed to AbstractWidgetPresenter. You should stop to use this class and modify your code to use AbstractWidgetPresenter."
"BagTest","SUnit tests for bags"
"GLMBrickScrollpaneStyle","I'm a style module related to a scrollpane and its component. "
"GTSpotterRevealHints",""
"ClySubclassWithInheritedScripts","I am example class which inherits scripts from superclass"
"GLMWestDirection",""
"BasicIndexedEyeElement","I am an eye element for indexable fields. (basicAt:)"
"MetacelloMCVersionValidator","Performs configuration validation.For programmatically decoding reason codes use:  MetacellMCVersionValidator fullDescriptionForReasonCode: <reasonCode>Warning reason codes:	#notDevelopmentVersion			- the symbolic version #development refers to a non-development literal version.	#loadWarning 						- Warning signalled during load [load validation].	#onlyBaselineVersion 				- one or more baseline versions have been defined, but no non-baseline versions are defined.	#stableDevelopmentVersion		- a version whose blessing is #development has been declared as a #stable versionCritical Warning reason codes:	#duplicateVersionDefinitions 		         - there are multiple pragma methods specifying the same version	#loadDeprecation					         - deprecation warning signalled while loading configuration [load validation]	#missingRecommendedProjectSpecField - missing recommended fields in project reference (versionString). The versionString should be specified so that #bleedingEdge loads will be predictable and repeatable	#noLoadableVersions 				         - no non #baseline versions defined in configuration	#noTests 							         - no test cases defined in loaded configuration [load validation]	#noVersionSpecified 				         - no version defined for the project reference or package. The version specified in the baseline or the latest version of the project or package in the repository will be used.	#packageNameMismatch 			         - the name in the packageSpec does not match the name of the mcz file	#projectClassNameFileMismatch 	         - the class name of the configuration does not match the mcz file containing the configuration	#testDeprecation 					         - deprecation warning signalled while running configuration tests [load validation]Error reason codes:	#cannotResolveVersion 			- the version (project reference or symbolic version) was not found in the specified configuration	#duplicateNames 					- multiple independent definitions for an entity with same name (project, package, or group)	#incompleteProjectSpec 			- missing required fields in project reference (className and/or repository)	#incorrectVersionString 			- the version declared in pragma doesn't match version in versionSpec	#invalidDoItSelector 				- doit select must be a Symbol	#invalidVersionString 				- versionString must be a String	#loadError 							- error occured while loading configuration [load validation]	#missingVersionImport 			- version specified in import pragma not defined in configuration	#noVersionsDefined 				- no usable baseline or version defined in configuration ... configuration cannot be loaded	#projectCreationError 				- error occured while resolving project reference	#shadowedNames 					- name duplication between packages and projects	#testFailures						- test failures while running tests [load validation]	#versionCompositionError 			- error while creating versionSpec from pragmas"
"RBDefineEntityComplianceCheckRule","The rule checks if the class rule in question specifies which entities it can check"
"MailMessage","I represent an Internet mail or news message.	text - the raw text of my message	body - the body of my message, as a MIMEDocument	fields - a dictionary mapping lowercased field names into collections of MIMEHeaderValue's	parts - if I am a multipart message, then this is a cache of my parts"
"GTEventInitializationError","I represent an error because of unitialized object.Collaborators: GTEventUnpacking"
"GTSpotterExtensionsOnClassTest",""
"ClyTextLineNumbersSwitchMorph","I am a clickable label to toggle text morph decoration with line numbers. Internal Representation and Key Implementation Points.    Instance Variables	label:		<StringMorph>"
"STCommandLineHandlerTest",""
"ShiftAnonymousClassInstaller","I can generate classes without registering in the environment.I should not be accessed directly, but by the accessor in Smalltalk or in  the classes.I have exactly the same interface than the main class installer."
"ClyMessageImplementorsQueryTest",""
"OSSDL2FormRenderer","My instances implement OSWindowFormRenderer interface using SDL2 library"
"KMSingleKeyCombination","I represent a single key press, the simplest key combination.I match with a keyboard event when that event key is the same as me and the key event is not modified.To create a single key combination use the #asShortcut message. Like for example:$a asShortcut"
"InstructionClientTest","This is the unit test for the class InstructionClient. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"AbstractAdapter","I am an abstract class.I'm the superclass of all the adapters used to link a Spec widget presenter to a framework specific widget (by example ButtonPresenter <-> PluggableButtonMorph).The current implementation installs my instances as dependent of the presenter and my changed: method propagates updates to the widget I create (via my buildWidget method). This implementation is not optimal. In the future my instances should just be responsible to create a widget and install all the communication between the presenter and the widget. I should not be a middle man. "
"RBAddAccessorsForClassTransformationTest",""
"ClyGroupedVariablesTestCase",""
"Beeper","Beeper provides simple audio (or in some other way) feedback to the user.The recommended use is ""Beeper beep"" to give the user the equivalence of a beep. If you want to force the beep to use the primitive in the VM for beeping, then use ""Beeper beepPrimitive"". In either case, if sounds are disabled there will be no beep.The actual beeping, when you use ""Beeper beep"", is done by sending a #play message to a registered playable object. You can register your own playable object by invoking the class side method #setDefault: passing in an object that responds to the #play message.The default playable object is an instance of Beeper itself which implements #play on the instance side. That implementation delegates the playing of the beep to the default SoundService.Note that #play is introduced as a common interface between AbstractSound and Beeper.This way we can register instances of AbstractSound as playable entities, for example:	Beeper setDefault: (SampledSound new						setSamples: self coffeeCupClink						samplingRate: 12000).Then ""Beeper beep"" will play the coffeeCup sound."
"SimpleGridNodeExample","Example for a simple grid node"
"MCMockAPoolDictionary","Mocking a pool"
"OSTouchThreeFingersSwipeAbortEvent","Three fingers aborted to swipe"
"ClyGlobalVariable","I represent a glopbal variable.I am like GlobalVariable.You can create my instance using:	ClyGlobalVariable on: aGlobalVariable "
"IceTipAddSshCredentialCommand","I add a new IceSshCredentials to the store"
"BalloonState","This class is a repository for data which needs to be preserved during certain operations of BalloonCanvas."
"LGitDiffLineTypeEnum",""
"FixedLayout","I am the default layout for objects.I contain a fixed number of Slots.Instances of classes using this kind of layout have always the same size."
"MorphicFastTableAdapter","I am the adapter used to bridge an FastTablePresenter and a FTPluggableIconListMorphAdaptor"
"TextAnchor","TextAnchors support anchoring of images in text.  A TextAnchor exists as an attribute of a special text placeholder - ""(Character value: 1) asText"".  Depending on whether its anchoredMorph is a Morph or a Form, it repositions the morph, or displays the form respectively.  The coordination between composition, display and selection can best be understood by browsing the various implementations of placeEmbeddedObject:.In the morphic world, simply embed any form or morph in text.	| textWithForm |	textWithForm := (Text withAll: 'Text with -->'), (Text string: (String value: 1) attribute: (TextAnchor new anchoredMorph: ThemeIcons current homeIcon)), (Text withAll: '<-- embedded Form').	textWithForm asMorph openInHand.	| textWithMorph |	textWithMorph := (Text withAll: 'Text with -->'), (Text string: (String value: 1) attribute: (TextAnchor new anchoredMorph: EllipseMorph new)), (Text withAll: '<-- embedded Morph').	textWithMorph asMorph openInHand."
"SDL2ConstantsHint","I contain configure HINTS.All HINTS can be seen here: https://wiki.libsdl.org/CategoryHints"
"MemoryHandleTest","SUnit tests for memory handles, the tests may be found in superclass"
"GLMMorphicDynamicRenderer",""
"ZnConnectionTimeout","I am ZnConnectionTimeout.I am a DynamicVariable and a ProcessSpecificVariable.I can be used to modify the global default socket IO timeout on a per process basis, for example:ZnConnectionTimeout 	value: 5 	during: [ ^ ZnClient new get: 'http://zn.stfx.eu/zn/small.html' ]"
"ToggleMenuItemShortcutWithText","I show a menu as a text. I'm the simplest mechanism and then, the default."
"FadingMorph","FadingMorph is a morph that fades out of existence after a certain time. The implementation uses a stepping event which reduces the visibility of the morph and its submorphs until they are no longer visible, when this happens the morph will delete itself.Variables:<alpha> holds the current alpha value. [ Float ]<fadingFactor> a value of how much the alpha shall be reduced per step message send. [ Float ]<resetable> boolean value used by #handleMouseMove: to descide whether or not to reset the alpha on mouse over.The morph has a default layout, color, and borderstyle which can be changed after instance creation the same way other morphs can.The morph itself updates its translucency per 100ms. One can change the variable fadingFactor to reduce or increase the time a FadingMorph is present in the world.If the mouse is moved over a FadingMorph present in the world, it will reset the alpha, which means that the fading will start from the begining again, this can be turned off by sending #beUnResetable. "
"ClassFactoryWithOrganization","I'm a class to create classes with a category. I'm only used by Tests.I am similar to ClassFactoryForTestCase (i.e., I can be used in place of a ClassFactoryForTestCase), expect that classes may be created on a specific class category."
"SycRemoveVariableCommand","I am a command to remove given variables"
"RPackageCategorySynchronisationTest","SUnit tests for RPackage category synchronization"
"RegisterableTranslatorMock","I'm a mock object to mock a translator"
"MalCircuitSpanningEdges",""
"ShouldSendSuperSetUpAsFirstMessage","In a test case the setUp method should call super setUp as first message"
"STONTestDomainObject","STONTestDomainObject is used to support unit tests.Instance Variables	boolean:		<Boolean>	bytes:			<ByteArray>	color:			<Symbol>	created:		<DateAndTime>	description:	<String>	float:			<Float>	integer:		<Integer>	modified:	<DateAndTime>	tags:			<Array of: Symbol>"
"STONTestMap","STONTestMap is used to support unit tests.I  am a Dictionary but I  don't print my elements during #printOn: to allow safe inspection of structures containing cycles that would otherwise lead to infinite loops."
"ClyBrowserItemCursorTest",""
"RFLinkReification","I reify the link itself. "
"ClyMethodWatchpointsQueryTest",""
"PackageAbstractNodeExample","Example for abstract package nodes"
"RGPackageTest","SUnit tests for packages"
"MCPackageModified","An MCPackageModified is raised when a MCPackage is modified"
"ManifestFileSystemTestsMemory","This package contains the memory tests of Pharo's FileSystem manager. A documentation of this library is available in the Deep Into Pharo book, «Chapter 3: Files with FileSystem»."
"LayoutEmptyScope","I am the last layout scope in a scope chain."
"ZnEasy","I am ZnEasy, a simplified HTTP client for occasional use.My class side implements a number of convenience methods to do common HTTP client operations.	ZnEasy get: 'http://zn.stfx.eu/zn/small.html'.For most requests, I return a response object. For a couple of message, I return an image Form.	ZnEasy getPng: 'http://pharo.org/files/pharo.png'.For my implementation I use ZnClient, a full featured HTTP client.Part of Zinc HTTP Components."
"GlobalIdentifierMergerTest","A GlobalIdentifierMergerTest is a test class for testing the behavior of GlobalIdentifierMerger"
"LGitRemoteCreateCallback",""
"SimulationExceptionWrapper","Notify about an exception while simulating an execution"
"FileServices","Registered file services for specific file types.To use me you can register a class by adding a method as: MyClass class>>fileReaderServicesForFile: fullName suffix: suffix	<fileService>		^ (FileStream isSourceFileSuffix: suffix)		ifTrue: [ { self mySimpleServiceEntry1 . self mySimpleServiceEntry2 }]		ifFalse: [#()]"
"GTGoAndInspectBytecodeDebugAction","I am a debugging action that inspect the currently selected bytecode."
"StdioStreamTest","Automated tests for StdioStreamPublic API and Key Messages- StdioStreamTest is a subclass of TestCase and has the same public api Internal Representation and Key Implementation Points.StdioStreamTest relies on a test stream constructed by StdioStreamTestResource."
"RBBinarySelectorToken","RBBinarySelectorToken is the first-class representation of a binary selector (e.g. +)"
"SliderPresenterTest",""
"ClySwitchClassViewModeCommand","I am a base class for the commands which switch the full browser mode of the class view.It can be flat list or class hierarchy for example"
"IceTipAddPackagesDialog","I'm a dialog to add packages to a repository."
"WindowModel","This is deprecated class because the original class WindowModel was renamed to WindowPresenter. You should stop to use this class and modify your code to use WindowPresenter."
"ClyFailedTestGroupProvider","I provide ""failed tests"" method group when there are failed tests in given test cases"
"MCSystemCategoryParser","A MCSystemCategoryParser extracts or set a category/protocol to the corresponding MCOrganizationDefinition."
"FLMethodChanged","I represent an error produced during materialization when is detected a change in the bytecodes of a method serialized as global. This error was born when testing the materialization of a BlockClosure defined in a method that changed. The test produced a VM crash."
"Key","This class is deprecated. Use the class KeyboardKey instead of me.I represent a keyboard Key. I am mapped from the platform specific keycodes into a common keycode base, by using my class side methods."
"GTSUnitDebuggerSmokeTest",""
"CharacterBlockScanner","A CharacterScanner does scan text to compute the CharacterBlock for a character specified by its index in the text or its proximity to the cursor location. The CharacterBlock stores information both about character layout and character index in the text.This class is essential for selecting text with the mouse or with arrow keys.Instance Variables	characterIndex:		<Integer | nil>	characterPoint:		<Point>	lastCharacterWidth:		<Number | nil>	nextLeftMargin:		<Number>	specialWidth:		<Number | nil>characterIndex	- the index of character for which the layout information is searched, or nil when the layout is searched by cursor locationcharacterPoint	- the cursor location for which nearest character index and layout are searched.lastCharacterWidth	- a number indicating the width of last character being processed.	Note that this variable is left to nil during the inner scan loop, and only set on stopConditions.nextLeftMargin	- a number specifying the distance between left of composition zone and left of first character for the next line.specialWidth	- a number holding the width of an embedded object if any, or nil if none."
"MetacelloMCBaselineOfProjectSpec",""
"RubFindReplaceDialogWindow","I am the window to find and replace text in a text area"
"IceTipInteractiveCredentialsProvider","I am a credential provider that requires the missing plaintext credential to the user."
"ZnByteEncoder","I am ZnByteEncoder, a concrete subclass of ZnCharacterEncoder.I handle single byte encodings where byte values 0 to 127 map to ASCII and 128 to 255 are a permutation to Unicode characters.I derive my mappings by parsing official unicode.org specifications.The list of encodings and their names/aliases was taken from http://encoding.spec.whatwg.org/#legacy-single-byte-encodingsI basically support ISO/IEC 8859 1, 2, 3, 4, 5, 6, 7, 8, 10, 13, 14, 15 and 16, Windows Codepages 866, 874, 1250, 1251, 1252, 1253, 1253, 1254, 1255, 1256, 1257, 1258, KOI8 R & U as well as Mac Roman & Cyrillic - each of these with a number of aliases like latin1, latin2, latin3, latin4, latin5, latin6, cyrillic, arabic, greek and hebrew. See #mappingToIdentifiersNote that most/all of these encodings should be considered legacy, with UTF-8 being the preferred encoding going forward.  Part of Zinc HTTP Components."
"MD5Test","SUnit tests for MD5"
"IceGitHubRemoveBranchesCommand","I'm a command to remove branches from remotes."
"TBehavior","Kernel trait for Behavior"
"ClyAbstractlyNamedTest",""
"IceTipExistingBranchPanel","I'm a panel (that will be part of a dialog) to perform actions on existing panels. Actions themselves needs to be defined by my children."
"FreeTypeCache","Cache for freetype fonts"
"ReReturnMethodRule","Somewhere in the override hierarchy there is a pragma that tells that this method should explicitly return a value"
"ReflectiveMethodTest",""
"MCDependencySorterTest",""
"ClassParentRenamed","This announcement will be emitted when a class or a traits superclass is renamed.The class definition and structure may be unaffected if just the name of the superclass changes. But toolsshowing the class definition or package organizer depending on the changed class definition string/command and may need to be updated or track the changes."
"PropertySlot","I am a Slot that does not allocate one field for each slot. Instead, all PropertySlots of the whole hierarchy are allocated in a dictionary that is stored in an invisible slot (see PropertyBaseSlot)Keep in mind:- I am slower than instance variables- there is the overhead of the Dictionary. Only if there are multiple ones of me in the class hierarchy you will save memory"
"IceHistory","I provide optimized access to the history of a commitish. I access the history of a commit in a batch, caching them in an internal collection to provide fast access.Moreover, I implement fast access to history information such as knowing if a commit is merged in head or not.Future optimizations:  - implement pagination"
"ClyShowOverridingMethodsCommand","I am a command to show all methods which override all my selected methods"
"ZnRespond","I am ZnRespond, a Notification to signal the end of #handleRequest: processing with a specific ZnResponse, earlier than normal stack unwinding.  ZnRespond signalWith: ZnResponse unauthorizedNormal #handleRequest: processing in a ZnServer delegate takes a ZnRequest object as input argument and needs to produce a ZnResponse as output, returning it as a regular result. Sometimes you do not want to keep managing this single result with many levels of condition on a complex or deep stack, but instead directly want to return a response: that is when you can use the ZnRespond notification."
"FTSizeRec","I map the FT_SizeRec type."
"RPackageMethodsSynchronisationTest","SUnit tests for RPackage method synchronization"
"SugsRemoveMethod","I know how to remove a mehod"
"FFI_x86_64_SystemV","I represent the X86_64 architecture, using the SystemV ABI.Parameters passed in integer registers: RDI RSI RDX RCX R8 R9Parameters passed in floating point registers: XMM0 to XXM7, inclusiveSome small structures are split and passed in registers, according to an algorithm described in the ABI.These ABI details are very important to keep in mind for receiving callbacks."
"RussianEnvironment","EncodedCharSet initialize.LanguageEnvironment resetKnownEnvironments.Locale switchToID: (LocaleID isoLanguage: 'ru')."
"RBAddMethodChange","I am a refactory change for a method change. I know a bout the source selector and protocol of the new or modified method. The controller instance variable is not directly use by me but needed for executing the change by compiling thismethod, the controller is what we pass to the compiler, as the object to get notified by the compiler about the compilation result."
"LessonView","A LessonView displays a Lesson instance.LessonView new open"
"IceGitHubTreeViewRemoveBranchesCommand","I'm a command to remove branches from remotes."
"OSWindowGenericRendererExample","Example showing how to use the joystick."
"MatrixTransform2x3","This class represents a transformation for points, that is a combination of scale, offset, and rotation. It is implemented as a 2x3 matrix containing the transformation from the local coordinate system in the global coordinate system. Thus, transforming points from local to global coordinates is fast and cheap whereas transformations from global to local coordinate systems are relatively expensive.Implementation Note: It is assumed that the transformation deals with Integer points. All transformations will return Integer coordinates (even though float points may be passed in here)."
"SpecAdapterBindings","I am an abstract classI am used to link a spec-oriented adapter name to a framework specific adapter class name"
"PackageManifest","I store meta-data for a package. I'm the common superclass of all package Manifest."
"IcePlugin","I'm a base for all kind of plugins. I can define - repositoryActions (actions that will be added to IceRepositoriesBrowser, repositories section)- ... (TBD)"
"RBParseTreeLintRule","A RBParseTreeLintRule is a rule that is expressed using a parse tree matcher on a method AST."
"ZnLimitedReadStream","I am ZnLimitedReadStream, wrapping another read stream delegating to it but limiting reading to a fixed number of elements.I can be atEnd while my wrapped stream is not.My contentSpecies can be forced to be ByteArray (binary) or ByteString (ascii).I do byte/char conversions on the fly (support bivalent access).This implementation is really a kludge.Part of Zinc HTTP Components."
"GTSpotterScrollPageDown",""
"EllipseMorph","A round BorderedMorph. Supports borderWidth and borderColor. Only simple borderStyle is implemented.EllipseMorph new borderWidth:10; borderColor: Color green; openInWorld.EllipseMorph new borderStyle:(SimpleBorder width: 5 color: Color blue); openInWorld."
"ZnTooManyDictionaryEntries","ZnTooManyDictionaryEntries is signalled when too many entries are added to a limited ZnMultiValueDictionary.This is a resumable exceptionPart of Zinc HTTP Components. "
"MetacelloVersionMethodSpec",""
"NoUnusedTemporaryVariablesLeftTest","Test to check if there are methods who have unused temporary variables in the image"
"IceTipStatusBar","I'm a status bar to be added at the bottom of a window. I have items inside, but the items itself can be anything you want (text, icons, buttons, etc)."
"FreeTypeSettings","Settings for FreeType"
"ClyGroupedCritiquesTest",""
"VariableLayout","I am the default layout for variable sized objects such as Array.I contain a fixed number of Slots plus.Instances of classes using this kind of layout have only a minimum given size. Instances have a custom number of additional fields which can be accessed with an index."
"LGitLibrary",""
"LGitPackbuilderForeachCallback",""
"ReCodeBasedTestCase","I provide a testing class and method which are destroyed later"
"SpecStubIconListView","Only stub object, no real view is displayed."
"IRPushFullClosure","I represent the creation and the push on stack of a FullBlockClosure."
"RGPackage","RGPackage is the representation for packages.A package manages classes, methods and children packages as elements.A package can also know in which package is defined"
"RFValueReification","valueAssignment:  the orginal value for before, new value for after. Variables: current value (same for before and after)Message: result of the message, only availabe for *after* links.Return: what will be returned"
"MorphTreeChangeRequest","Used to announce a change request on the tree"
"EpBehaviorChange","I represent a change in a class or a trait."
"ClyExtendedMethodGroupProvider","I provide 'extensions' method group"
"BalloonBezierSimulation","This class is a simulation of the code that's run by the Balloon engine. For debugging purposes only."
"IceTipHistoryBrowser","I'm a browser and panel to show the history of a commitish (usually a branch or a tag). I'm usually used as part of an IceTipRepositoryBrowser.(self onBranch: IceRepository registry anyOne branch) openWithSpec."
"FFIExternalPackedStructureTests","Tests for FFIExternalPackedStructure"
"ZnEasyTests",""
"RBMoveInstanceVariableToClassTransformationTest",""
"DebuggerModelTest","SUnit tests for the debugger model"
"FFIFloat128","I'm a 128bits (cuadruple precision) float. It is usually not used, but some compiler modes support it (__float128 in gcc)THIS IS NOT YET SUPPORTED"
"ExpanderMorphExpanded",""
"EpFileLogNode","I am a node in a tree of Epicea logs that represents a log file. Read more in my superclass comment."
"ShortIntegerArray","ShortIntegerArray is an array for efficiently representing integers in the 16bit range."
"IceMetadatalessFileTreeWriter","I can write metadataless filetree versions from an ice formed version."
"GTSpotterCandidatesListTest",""
"SelectionValueHolder","I am especially designed to contain a list selection (an index + an object)"
"SourceSansProRegular","http://sourceforge.net/projects/sourcesans.adobe/Copyright 2010, 2012 Adobe Systems Incorporated (http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe Systems Incorporated in the United States and/or other countries.This Font Software is licensed under the SIL Open Font License, Version 1.1.This license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL-----------------------------------------------------------SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007-----------------------------------------------------------PREAMBLEThe goals of the Open Font License (OFL) are to stimulate worldwidedevelopment of collaborative font projects, to support the font creationefforts of academic and linguistic communities, and to provide a free andopen framework in which fonts may be shared and improved in partnershipwith others.The OFL allows the licensed fonts to be used, studied, modified andredistributed freely as long as they are not sold by themselves. Thefonts, including any derivative works, can be bundled, embedded, redistributed and/or sold with any software provided that any reservednames are not used by derivative works. The fonts and derivatives,however, cannot be released under any other type of license. Therequirement for fonts to remain under this license does not applyto any document created using the fonts or their derivatives.DEFINITIONS""Font Software"" refers to the set of files released by the CopyrightHolder(s) under this license and clearly marked as such. This mayinclude source files, build scripts and documentation.""Reserved Font Name"" refers to any names specified as such after thecopyright statement(s).""Original Version"" refers to the collection of Font Software components asdistributed by the Copyright Holder(s).""Modified Version"" refers to any derivative made by adding to, deleting,or substituting -- in part or in whole -- any of the components of theOriginal Version, by changing formats or by porting the Font Software to anew environment.""Author"" refers to any designer, engineer, programmer, technicalwriter or other person who contributed to the Font Software.PERMISSION & CONDITIONSPermission is hereby granted, free of charge, to any person obtaininga copy of the Font Software, to use, study, copy, merge, embed, modify,redistribute, and sell modified and unmodified copies of the FontSoftware, subject to the following conditions:1) Neither the Font Software nor any of its individual components,in Original or Modified Versions, may be sold by itself.2) Original or Modified Versions of the Font Software may be bundled,redistributed and/or sold with any software, provided that each copycontains the above copyright notice and this license. These can beincluded either as stand-alone text files, human-readable headers orin the appropriate machine-readable metadata fields within text orbinary files as long as those fields can be easily viewed by the user.3) No Modified Version of the Font Software may use the Reserved FontName(s) unless explicit written permission is granted by the correspondingCopyright Holder. This restriction only applies to the primary font name aspresented to the users.4) The name(s) of the Copyright Holder(s) or the Author(s) of the FontSoftware shall not be used to promote, endorse or advertise anyModified Version, except to acknowledge the contribution(s) of theCopyright Holder(s) and the Author(s) or with their explicit writtenpermission.5) The Font Software, modified or unmodified, in part or in whole,must be distributed entirely under this license, and must not bedistributed under any other license. The requirement for fonts toremain under this license does not apply to any document createdusing the Font Software.TERMINATIONThis license becomes null and void if any of the above conditions arenot met.DISCLAIMERTHE FONT SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENTOF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THECOPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIALDAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISINGFROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROMOTHER DEALINGS IN THE FONT SOFTWARE."
"ReNoPrintStringInPrintOnRule","#printString is implemented by manipulating a stream.Using it inside a #printOn: will imply a useless creation of stream and its pass to #printOn: one, instead of using directely the stream parameter to #printOn:"
"CheckboxMorph","Checkbox with box button and label with enablement support."
"IdentityTransform","Identity transformation"
"HEExportedLiteral","I represent all the literals that a method and a trait composition can have.My subclasses implements all the behavior for the different types of literals. All my subclasses has a #tag number. Each tag number should be unique. This number is written in the stream before of the content of the literal. In this way, the literal can be properly deserialized. By sure, playing with the tag numbers requires incrementing the version of the hermes files, as they do not keep compatibility if the numbers change.For deserializing a literal I have a class side message called#readFrom: aHermesStreamThis message returns the correct instance representing the literal value.Also I implement helping classSide methods to check the sanity of the tags, #checkAllTags and #missingTagsBy default I have a value, but my subclasses can have more instance variables.My subclasses implements the method #asLiteralIn: envThis method creates the proper literal in the given environment. Some of the literals are environment dependent,for example the classes."
"ClyMoveMethodsToGroupCommand","I am a command to move methods to the method group.By default I am activated by dragging selected method into the method tag (protocol). Internal Representation and Key Implementation Points.    Instance Variables	methodGroup:		<ClyMethodGroup>"
"ClyRemoveBreakpointCommand","I am a command to remove all breakpoints from given method or source node"
"ZdcAbstractSocketStreamTests","ZdcAbstractSocketStreamTests holds units tests for socket streams.This is an abstract class, subclasses should implement #socketStreamClass "
"ZnRequestReadEvent","ZnRequestReadEvent is signalled when an HTTP server reads a request in duration milliseconds.Note that the duration can be misleading: when servicing multiple requests over a kept alive connection (the default for HTTP 1.1), the read time includes any wait time (as long as it is below the timeout). The first request read should not contain wait time."
"RBMoveMethodToClassRefactoring","A RBMoveMethodToClassRefactoring is a class that represents functionality of ""Move method to class"" refactoring.User chooses method, and than any of existiong classes.Refactoring moves chosen method to class.Instance Variables	method:		<RBMethod>method	- chosen method"
"NECDetailMorph","I display some detail information for a selected ECEntry in the ECMenuMorph.The content I show, is provided by an ECDetailContentProvider subclass. "
"SpecStubTabView","Only stub object, no real view is displayed."
"SliderInput","I am an elementary Spec Widget managing a slider and an input.Self exampleBetween the bounds min and max of the slider, I ensure that the value of the input on the accept and the value of the slider are the same.Note====- min and max must be set before use me.- if autoAccept is true, the character '-' could create problems"
"OSTouchDoubleTapEvent","I am the abstract class for all double tap gestures"
"PackageAPIHelpBuilder","A builder for the API of the various packages"
"FontTest","I am mainly a test for fallback font.FontTest buildSuite run"
"FLBasicSerializationTest","SUnit tests for basic fuel serialization"
"MCSnapshotResource","A test resource mocking a snapshot"
"ClyAllClassGroupsQuery","I am a query of all class groups from given scope.Scope should support #classGroupsDo:. Currently it is only ClyPackageScope.The scope delegates class group building to the environment plugins.It asks each plugin to collect class group providers using: 	plugin collectClassGroupProviders And then each provider creates set of class groups using method: 	groupProvider classGroupsIn: aPackageScope do: aBlockWithGroup	Look at ClyClassGroupProvider for details"
"RGPoolVariableDefinition","A pool variable definition"
"OverridesDeprecatedMethodRuleTest",""
"LGitWriteBackValueInt",""
"MyResumableTestError","A resumable error for tests"
"HETraitLiteral","I represent a Trait.I am stored as a symbol.When serialized I get the name of the trait.When deserialized I find the trait in the target environment"
"SpecStubImageAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"PreDebugAction","A PreDebugAction is a debugging actions sending a unary message to the pre debug window."
"GTSpotterPreviewBrick",""
"SDL_Window","I represent a handle of SDL2 window, coming from SDL2 library"
"NECEmptyModel","I am an empty completion Model. I am used if no completion is expected.For example, typing a message send and using constants (Strings/Numbers) for the arguments,we don't want to complete the constant arguments with any exisiting symbol containing that constant:3 + 12 should not show completion menu with entries like CP1250TextConverter, ExampleForTest12, ..."
"LGitPushOptions","/** * Controls the behavior of a git_push object. */"
"FLLargeIdentityHashedCollection","I share behavior for special HashedCollections that are optimized for including a large number of elements."
"EpSessionEvent","When an image is launched, a session starts. When quits, the session ends. In the middle, it could be snapshoted multiple times. My subclasses represent such events."
"IceTipGitUsernameAndEmailDialog","I'm a dialog for asking ""user.name"" and ""user.email"" ."
"GLMGenericAction","This is an action that is supposed to work in any context (e.g., Morphic or Seaside)"
"TaRemoveMethod","I can remove a method from a trait.I implement the #- operator."
"GLMBrickPopupThemer","I'm a style module related to popup"
"ZdcSecurePOP3Client","I am ZdcSecurePOP3Client.I open a ZdcSecureSocketStream to the POP3 server and connect it at the SSL level.ZdcSecurePOP3Client	retrieveMessagesFromGMailAccount: '<your-name>@gmail.com'	password: '<your-password>'	limit: 5."
"SugsPushDownMethod","I know how to push down the method to my subclass"
"T2SubclassingTraitedClassTest",""
"ClyApplyClassDeprecationCommand","I am a command to apply class deprecation in system.I ask class itself to get target refactorings and then execute them"
"DAPackageDependenciesWelcome","Welcome user interface to browse dependencies packages. Availaible via tools menu."
"RBBasicLintRule","I am a rule that has a result. It is not clear why it is not merged with its superclass but this is ok too."
"ClyAddExecutionCounterCommand","I am a command to install execution counter into given method or source node"
"ShortcutReminder","ShortcutReminder is an object used to bring up a notification whenever a menu entry that has a keyboard shortcut is clicked on instead of using the keyboard.It is configurable from the settings browser, where one can choose the location and size of the notification Morph. The notification also holds a count of how many times a specific menu entry has been reminded for, and will only notify up to that limit. It is possible to set this limit to -1 such that it will always notify."
"RBAddPragmaTransformationTest",""
"SimplestClassListWithPagerExample","SimplestClassListWithPagerExample new openOn: Object"
"RBCustomTransformation","Performs a custom transformation. With this class, the developer can manipulate the model (a RBNamespace) directly, i.e., adding classes, transforming them etc.Usage: transformation := (RBCustomTransformation with: [ :model |	model defineClass: ('Object subclass: #Bla		instanceVariableNames: ''''		classVariableNames: ''''		poolDictionaries: ''''		category: ',  'Refactoring2-Transformations' surroundedBySingleQuotes ).	(model classNamed: #Bla)		comment: 'Deprecated!!! Use super class' ])	transform.(ChangesBrowser changes: transformation model changes changes) open"
"IllegalResumeAttempt","This class is private to the EHS implementation.  An instance of it is signaled whenever an attempt is made to resume from an exception which answers false to #isResumable."
"OSSDL2ExternalForm","An ExternalForm is a specialized Form whose pixel-data is stored in memory that the user provides a pointer to.  This can simply be memory on the C heap, or (the motivating use-case...) it can be a pointer that is temporarily ""mapped"" from GPU memory by an API such as OpenCL.IMPORTANT: Moved form FFI to SDL2 because is not needed there anymore but OSWindow-SDL2 package uses it.The user is responsible for both releasing the image-memory, as well as destroying the surface handle (perhaps the latter should be handled by automatic finalization).Example usage:| extent form ptr |extent := 400@300.form := ExternalForm extent: extent depth: 32.ptr := ExternalAddress gcallocate: (extent x * extent y * 4).form setManualSurfacePointer: ptr.Display displayScaledOn: form.form displayAt: 0@0.form destroySurface."
"MCSubDirectoryRepositoryTest","I am not a subclass of MCRepositoryTest because my purpose was to show that a bug had been fixed and my author didn't feel like implementing all the reuirements of MCRepositoryTests"
"CollectVisitorTest","SUnit tests for class CollectVisitor"
"MCDataStream","This is the save-to-disk facility. A DataStream can store one or more objects in a persistent form.To handle objects with sharing and cycles, you must use aReferenceStream instead of a DataStream.  (Or SmartRefStream.)  ReferenceStream is typicallyfaster and produces smaller files because it doesn't repeatedly write the same Symbols.Here is the way to use DataStream and ReferenceStream:	rr := ReferenceStream fileNamed: 'test.obj'.	rr nextPut: <your object>.	rr close.To get it back:	rr := ReferenceStream fileNamed: 'test.obj'.	<your object> := rr next.	rr close.Each object to be stored has two opportunities to control what gets stored.  On the high level, objectToStoreOnDataStream allows you to substitute another object on the way out.  The low level hook is storeDataOn:. The read-in counterparts to these messages are comeFullyUpOnReload and (class) readDataFrom:size:. See these methods for more information about externalizing and internalizing.NOTE: A DataStream should be treated as a write-stream for writing.  It is a read-stream for reading.  It is not a ReadWriteStream."
"RecursionStopper","The RecursionStopper provides an easy way to check if we are in a recursion and execute code just once in a recursion.RecursionStopper during:  aBlock.executes a block just once in a recursion.A RecursionStopper object contains a collection of active methods which are currently called from within RecrusionStopper>>#during: this means that Recursion stopper can be used multiple places without one blocking the other, but multiple stoppers cannot be nested in the same method."
"AbstractTutorialTest","SUnit tests for AbstractTutorial"
"GLMFastListPresentation","I'm a fast list presentation who introduces FTTableMorph into Glamour. Description -------------------I just know how to render myself and I manage some options that the user can use for the FastTable.The user can use almost all the functionalities of my superclass and some more. I work with a GLMMorphicFastListRenderer to render the list.  Public API and Key Messages-------------------You can use the public API of my super class. You also use the public API of TGLMFastTableFunctionsPresentation (See his class comment) and you can finally use:- #withSeparators 		I the input I receive is a collection of collection I will dispaly a list with separators between the collections.Example-------------------GLMWrapper new 	show: [ :a | 		a fastList			display: [ :x | 1 to: x ]];	openOn: 1000.	orGLMWrapper new 	show: [ :a | 		a fastList				title: 'Example with an Outline List';				display: [ :x | (x allSubclasses sort: [ :a :b | a asString < b asString  ]) collect: #allSubclasses  ];				enableSearch;				withSeparators			];	openOn: ProtoObject. Internal Representation and Key Implementation Points.-------------------    Instance Variables	parameters:		This is a Dictionary use to store some parameters of the presentation."
"RBLintRule","I represent an executable check applied on an environment (groups of classes, methods... )"
"ExceptionSet","An ExceptionSet is a grouping of exception handlers which acts as a single handler.  Within the group, the most recently added handler will be the last handler found during a handler search (in the case where more than one handler in the group is capable of handling a given exception). "
"MethodBrowserTest",""
"BaselineOfSpec",""
"NNavDirectionPreviousSelection","I know how to go to the previous selection in the text"
"Fraction","Fraction provides methods for dealing with fractions like 1/3 as fractions (not as 0.33333...).  All public arithmetic operations answer reduced fractions (see examples).instance variables: 'numerator denominator 'Examples: (note the parentheses required to get the right answers in Smalltalk and Pharo):(2/3) + (2/3)(2/3) + (1/2)		 ""answers shows the reduced fraction"" (2/3) raisedToInteger: 5		 ""fractions also can have exponents"""
"SpaceTallyItem","I'm represent an entry in the spaceTally."
"RBAddTraitChange","I am a refactoring change for a trait addition. Executing this change will create a new trait, just like the ordinaryTrait named: ... call.At the moment there is no support for the traitcomposition attribute."
"MetacelloSymbolicVersionNotDefinedError",""
"RBVariableNodeTest","SUnit tests for RBVariableNode"
"DeleteVisitorTest","SUnit tests for class DeleteVisitor"
"ClyBrowserToolbarItemMorph","My subclasses are different kind of UI elements which represent particular command in the browser toolbar. Instances should be created with command activator: 	ClyBrowserButton activatingBy: aCommandActivator  When browser buids the toolbar it collect all commands annotated with ClyToolbarCommandActivation and asks all of them to build toolbar item.So command decides what UI element (my subclass) should be used to represent it in the toolbar.   Subclasses should implement method #build which should create actual widged which will perform the command using #executeCommand method.Also I provide the #title method which is based on menu item name of the command.Internal Representation and Key Implementation Points.    Instance Variables	activator:		<CmdCommandActivator>"
"GLMCheckboxBrick","A GLMCheckboxBrick is very simple checkbox with label support. If label text is set it becomes clickable too.Instance Variables	checkBrick:		<GLMInteractableBrick>	labelBrick:		<GLMLabelBrick>checkBrick	- checkbox itselflabelBrick	- label position to the right from checkbox"
"IntegerArrayTest","SUnit tests for integer arrays"
"EpAndFilter","A TrAndFilter is a chain of AND filters."
"ClyDeprecatedClassExample","I am example of deprecated class.I just implement #isDeprecated as true"
"OSWindowDriver","I am a basic (abstract) class, which represents an OS window driver.The driver connects an OSWindow instances with underlaying operating system window(s) through managing OSWindowHandle(s). Driver provides an implemenation of all OSWindow functionality, starting from its creation, setting/retrieving its attributes, and finishing with event handling and/or rendering window's contents on screen.The driver connects OSWindow(s) with operating system windows by providing the handle (see OSWindowHandle). The way how various OSWindow features and API are implemented is up to the concrete driver and thus considered private.The driver(s) responsible for initial window creation , proper setup and and managing external resources. Again, most of driver's functionality is considered private and application-level code should not rely on any of its features. Driver selection mechanism: - on session change, i scan all of my subclasses to pick a most suitable driver which will be used on current platform (see #current on my class side)"
"RePackageManifestShouldBePackagedInManifestTag",""
"GoferUnload","Unload"
"CannotDeleteFileException","Notfify when not able to delete"
"IceGitHubViewPullRequestAction","I'm an action to view the open pull Requests."
"RBSourceRegexRefactoring","I am a regex refactoring replacing method sources."
"ClyTaggedMethodGroup","I am group of methods marked by concrete tag"
"ClyTraitFirstSortFunctionTest",""
"RBLiteralValueNode","RBLiteralNode is an AST node that represents literal values (e.g., #foo, true, 1, etc.), but not literal arrays.The sourceText field is needed for the formatter for the correct printing of strings vs. symbols. If we just callvalue asString, both a string and a symbol print itself as a string.Instance Variables	value	<Numeric | Symbol | String  | Character>	the literal value I represent	sourceText <String> the original source text of this literal"
"ClyClosedBrowserCursor","I represent closed query cursor.I am used by data source to represent closed state.My singleton instance is supposed to be used:	ClyClosedBrowserCursor instance"
"SimpleTestResourceA","I'm a simple test ressource for test purposes"
"ClassAPIHelpBuilderTest","SUnit tests for ClassAPIHelpBuilder"
"TClyGenerateTestClass","Description--------------------I am a trait containing the behavior or retrieving the test class of a class.If the test class does not exists I am able to generate it."
"WeakActionSequence","Weak action sequences for events"
"ManifestCompression","Package for compression utilities like ZIP and other"
"GLMFastTreeDataSource","I'm a model datasource to handle glamour fast tree presentations.Description --------------------My basics functionnalities works as in my superclass but I do not get my data at my creation. Instead I ask to my Glamour presentation to get them.I work with a GLMFastTreePresentation and a GLMMorphicFastTreeRenderer. Internal Representation and Key Implementation Points.--------------------    Instance Variables	announcer:		This is an announcer use to work with Glamour workflow. 	glamourPresentation:		This is a glamour presentation use to get some informations as the data manage by myself.	tagsToFilterBy:		This is a list of filtering tags for the dasaSource."
"MemoryHandle","I provide ""primitives"" for doing IO on files in a MemoryFileSystem. I delegate most of my actions to the MemoryFile. This way there is only one place needed where the data is stored."
"SymbolicBytecode","I model a single bytecode. I know my value and my offset in the compiledMethod and know the compiledMethod I come fromI am a relatively heavyweight object, I am created on demand for inspecting bytecodes.See #symbolicBytecode."
"IceTipGitHubOpenPullRequestBrowserCommand","Description--------------------I am a simple command to open the PR review tool."
"AthensAbstractPaint","I am an abstract paint, which should be converted before it can be used by Athens.I am backend agnostic, as opposed to concrete paint(s).Also, any other object can play the role of paint, as long as it implements the conversion method, #asAthensPaintOn:See other implementors of #asAthensPaintOn:, such as Color and Form."
"AthensSimplePathBuilder","i building path containing from AthensPathSegment. the resulting path is backend neutral (while different backend may implement own builder which is more efficient)"
"LGitDiffStatsFormatTypeEnum",""
"PreDebugSubclassResponsabilityAction","A PreDebugSubclassResponsabilityAction adds the SubclassResponsabilityDebugAction debugging actions to the pre debug window. When executed, it will further close the pre debug window and open the full debugger. Instance Variables	preDebugWindow:		<Object>preDebugWindow	- xxxxx"
"DynamicMessageImplementorTest","SUnit tests for class DynamicMessageImplementor"
"MessageTally","My instances observe and report the amount of time spent in methods.NOTE: a higher-level user interface (combining the MessageTally result tree with a method browser) is available from TimeProfileBrowser. Note that TimeProfileBrowser was not fancy with the different setting possibilities.	TimeProfileBrowser spyOn:  [20 timesRepeat: 			[Transcript show: 100 factorial printString]]	Strategies-----------MessageTally provides two different strategies available for profiling:* spyOn: and friends use a high-priority Process to interrupt the block or process being spied on at periodic intervals. The interrupted call stack is then examined for caller information. See below for an example showing different settings* tallySends: and friends use the interpreter simulator to run the block, recording every method call.The two give you different results:	* spyOn: gives you a view of where the time is being spent in your program, at least on a rough statistical level (assuming you've run the 	block for long enough and have a high enough poll rate). If you're trying to optimize your code, start here and optimize the methods where 	most of the time is being spent first.	* tallySends: gives you accurate counts of how many times methods get called, and by exactly which route. If you're debugging, or trying to 	figure out if a given method is getting called too many times, this is your tool.Q: How do you interpret MessageTally>>tallySendsA: The methods #tallySends and #spyOn: measure two very different quantities, but broken down in the same who-called-who format.  #spyOn: is approximate, but more indicative of real time spent, whereas #tallySends is exact and a precise record of how many times each method got executed.Examples----------Here you can see all the processes computation time			[1000 timesRepeat: [3.14159 printString. Processor yield]] fork.		[1000 timesRepeat: [30 factorial. Processor yield]] fork.		[1000 timesRepeat: [30 factorial. Processor yield]] fork.		MessageTally spyAllOn: [ (Delay forMilliseconds: 100) wait] Settings---------You can change the printing format (that is, the whitespace and string compression) by using these instance methods: 	maxClassNameSize:	maxClassPlusSelectorSize:	maxTabs:You can change the default polling period (initially set to 1) by calling	MessageTally defaultPollPeriod: numberOfMillisecondsTo understand the difference----------------------------------Here we see all the processes	[1000 timesRepeat: [		100 timesRepeat: [120 factorial].		(Delay forMilliseconds: 10) wait		]] forkAt: 45 named: '45'.	MessageTally spyAllOn: [10000 timesRepeat: [1.23 printString]]		Here we only see the execution of the expression [10000 timesRepeat: [1.23 printString]	[1000 timesRepeat: [		100 timesRepeat: [120 factorial].		(Delay forMilliseconds: 10) wait		]] forkAt: 45 named: '45'.	MessageTally spyOn: [10000 timesRepeat: [1.23 printString]]	Here we only check the exact message sends: this is not a pc-sampling approach	[1000 timesRepeat: [		100 timesRepeat: [120 factorial].		(Delay forMilliseconds: 10) wait		]] forkAt: 45 named: '45'.	MessageTally tallySends: [10000 timesRepeat: [1.23 printString]]	"
"LocaleAnnouncementTests","Unit test locale announcements"
"TestCaseStarted","This event is announced when testing a test case starts."
"MetacelloBaseConfiguration","You should be using ConfigurationOf instead of MetacelloBaseConfiguration. The class is being kept around because many extant Metacello configurations use MetacelloBaseConfiguration as a sentinel class to indicate whether or not Metacello is loaded..Once the Metacello scripting API becomes prevalent (the api has it's own ensureMetacello logic) this class can be removed."
"BaselineOfTraits","I am the baseline for loading Traits in a bootstraped image.Usually  my core is loaded during the bootstrap process by Hermes. The other parts are loaded after using Metacello.However  I have the following groups to describe the dependencies:- core : is the minimal core implementation of Traits. Loaded by Hermes- traits-in-kernel : I include all the traits that are part of the bootstraped kernel. Also loaded by Hermes.- compatibility: I include a compatibility package with the old traits and classes to be used only to accept the extension methods. This will be removed with the time.- core-traits: Minimum required to use in an image.- default: I include the tests and all the previous.- traits-tests: adding the tests for TraitsV2."
"MarginBorder","Border with customisable inner margin."
"GTFilterBlock",""
"ZnResourceMetaUtils","I am ZnResourceMetaUtils.I contain some class side utility methods.Part of Zinc HTTP Components."
"CriticsCache","I am a cache for the critics and false positives criticsInstance Variables	browser:		<Object>	checker:		<Object>	critics:		<Object>	falsePositiveClasses:		<Object>	falsePositiveRules:		<Object>	falsePositives:		<Object>	packages:		<Object>	toDos:		<Object>browser	- xxxxxchecker	- xxxxxcritics	- xxxxxfalsePositiveClasses	- xxxxxfalsePositiveRules	- xxxxxfalsePositives	- xxxxxpackages	- xxxxxtoDos	- xxxxx"
"ClySubstringPattern","I represent string pattern using substring which tested strings are supposed to include.I can be case sensitive or not depending on my variable.To create my instances you can use following messages:	ClySubstringPattern with: 'expected substring' caseSensitive: trueBy default my instances are not case sensitive.		Internal Representation and Key Implementation Points.    Instance Variables	isCaseSensitive:		<Boolean>"
"ZnServerSocketReleasedEvent","ZnServerSocketReleasedEvent signals a new server socket on address:port is released (closed)."
"ReRewriteBlockWrapper","A concrete wrapper implementation that uses a block to create new nodes"
"GTSpotterSmokeTest",""
"IceRootDefinition","I am an IceDefinition representing the repository root. I contain all packages, directories and files of the repository. I'm not meant to be shown.See my superclasses for more information."
"FLGlobalCluster","I am a cluster for objects that are reachables from Smalltalk global dictionary."
"RubAnnotationDisplayer","I represent a bar with annotations for the text area, like editing mode, line numbers etc"
"FFIConst",""
"MetacelloPharoPlatform","Class used to abstract specific code for the Pharo platform."
"HEExtendedInstaller","The HEInstaller is really basic. It is designed that way to keep simple the bootstraped image. A bigger or complex bootstraped image requires more bootstrap time.So, I am loaded later (with Hermes itself) and I extend the behavior in HEInstaller I add:  	- 	Having a duplication Strategy	-	Having a configuration to fail on new undeclared variables."
"ReCritiqueBanned","Announced when a critic gets banned."
"RBAddReturnStatementTransformationTest",""
"OmTimeStampSuffixStrategy","I attach a timestamp as a suffix to the name (after last _)."
"SugsRemoveParameter","I know how to remove a parameter from a method"
"LGitNoReturnCodeHandlerDefined",""
"GLMPhlowTableColumn",""
"SpecDemoFormPresenter","This demo shows, how to create a simple form with basic elements and how to connect this form to a model. In this case, the model is represented by instances of the class SpecDemoFormModel created in the #initialize. It is a simple structure-like class with some default values. The model is not held directly but using a value holder named announcingObject (see ComposablePresenterWithModel>>#model:). The encapsulating value holder would not be needed if our model would be a subclass of ""Model"" (instances of Model provide an announcer by default).This component has two main subcomponents. The form and a table that shows the current state of the model.The form is a standalone Spec presenter, an instance of SpecDemoStandaloneFormPresenter. It works with two instances of the model, ""workingModel"" which holds a working copy of the model and a model shared with its parent. When the form is restored, the working copy of the model is thrown away and replaced with a new copy of the model. When the form is submitted, the new model is stored (into the value holder and its change is propagated so the table showing the state of the model is refreshed).The data exchange between the model and form elements is done in these methods:SpecDemoStandaloneFormPresenter>>#fillFormWithWorkingModelSpecDemoStandaloneFormPresenter>>#fillModelWithFormContentThe two parts of this window (form and table) should be rendered in boxes with an outline. Spec in Morphic does not have such functionality now. SpecDemoLabeledContainer is used now.Text input for number 1 is limited directly on the level of user input. See SpecDemoStandaloneFormPresenter>>#initializePresenter. For displaying of the model state, the FastTable Morph is used. Currently, Spec does not provide a presenter for such tables. The class SpecDemoFormTableDataSource is used for interaction between the table and model. "
"TabBarMorph","I am a bar gathering tabs. I am the one managing the selected tab and related bahavior (unselecting the last one, updating the layout to make the selected tab on top of the other)"
"YearTest","SUnit tests for year handling"
"ClyGroupedInstanceVariablesTest",""
"MCMerger","A MCMerger is an abstract responsible for performing merge operations and detecting conflicts."
"CustomHelpTest","SUnit tests for class CustomHelp"
"ZnDigestAuthenticator","I am ZnDigestAuthenticator.I help servers handle HTTP Digest Authentication.I have a nonces dictionary with nonce->opaque associations. I generate a new nonce value for every 401 response I trigger.Part of Zinc HTTP Components."
"LGitProxyTypeEnum","/** * The type of proxy to use. */"
"ClyClassWithTraits",""
"BooleanSlotTest",""
"RxsPiece","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A piece is an atom, possibly optional or repeated a number of times.Instance variables:	atom	<RxsCharacter|RxsCharSet|RxsPredicate|RxsRegex|RxsSpecial>	min		<Integer>	max		<Integer|nil> nil means infinity"
"MustBeBooleanTests",""
"IceTipRepairDiscardAndLoad","I will discard image changes and I will restore source from current repository HEAD.I'm active when: 	- working copy is detached 	- repository HEAD is NOT detached"
"AlignmentMorph","Used for layout.Since all morphs now support layoutPolicy the main use of this class is no longer needed.Kept around for compability. Supports a few methods not found elsewhere that can be convenient, eg. newRow"
"ClyTypedQuery","My subclasses represent queries which retrieve particular kind of objects.Subclasses should return class of items from class side method #resultItemsType.I implement many required methods of superclass. The rest is responsibility of subclasses:- buildResult: aQueryResult It is the method where query retrieves items from the scope and fill given result with them. Look at implementors.- checkEmptyResultSubclasses should be able detect that result will be empty without execution.-isResult: aQueryResult affectedBy: aSystemAnnouncementAny query can be affected by system changes. Subclasses should implement what change affects their results.- retrivesItem: anObjectSubclasses should check that given item can be retrieved independently on scope.-collectMetadataOf: aQueryResult by: anEnvironmentPluginSubclasses should dispatch metadata collection to the given environment plugin.I provide many instance creation methods. For example you can execute any typed query with sorted result:	ClyAllClasses sortedFrom: ClyNavigationEnvironment currentImageScope.And I provide union query support. Typed queries can be concatinated using command message:	aClassQuery, aMethodQueryLook at class side for more options"
"FT2Handle","handle holds a (typically 32-bit) pointer to an externally managed object."
"RBRemoveClassVariableChange","I am a refactoring for removing a class variable. My changes are executed on the instance side."
"ZnHtmlOutputStreamTests",""
"EpCodeChange","I represent a change in a code entity."
"RBEqualsTrueRule","Check for a =, ==, ~=, or ~~ message being sent to true/false or with true/false as the argument. Many times these can be eliminated since their receivers are already booleans. For example, ""anObject isFoo == false"" could be replaced with ""anObject isFoo not"" if isFoo always returns a boolean. Sometimes variables might refer to true, false, and something else, but this is considered bad style since the variable has multiple types."
"OmAbstractReference","I am the abstract superclass for references to entries."
"IceBranchAlreadyExists",""
"GLMRubricExample",""
"ClyItemChildrenTag","I am special tag to mark objects that they have particilar kind of children. Kind of children is represented by children type which is class of children objects by default.For example you can mark class with methods:	classItem markWithChildrenOf: ClyMethod.To create my instance manually use:	ClyItemChildrenTag childrenType: ClyMethodI cache all my instances. I use class variable ""Types"" to ensure single property instance for each scope class.	You can ask browser item to check that object has particular children:	classItem hasChildrenOf: ClyMethodInternal Representation and Key Implementation Points.    Instance Variables	childrenType:		<Class>"
"RenrakuRuleCreationHelp","Each rule has a few fundamental features to implement in this book with will walk through all the steps of rule creation"
"GTSpotterWidgetThemer","This is a themer for all spotter morphs.To customize it, it has to be subclassed and pointed to from:ACustomTheme>>spotterWidgetThemer"
"TIterateTest","I'm testing that high-order iterators are working.Note however that I do not pay attention to the order of the elements.Hence, my doTest is designed to not checking that. TIterateSequenceableTest is about this distinction and as such will not be applicable to testSet, Bag, Dictionary. "
"ClyOverridingMethodGroupProviderTest",""
"RegexMatchingError","This class represents matching errors in regular expressions."
"FLSignatureTest","SUnit tests for fuel serializations, here signatures"
"TCopySequenceableSameContents","A trait for test purposes"
"MetacelloEnsureFetchingMCSpecLoader",""
"PrimitiveFailed","I am PrimitiveFailed, an exception signaled when a primitive fails."
"ClyInheritedScopeProvider","I am special annotation which marks classes that they can provide inherited scope.Users do not need to lookup my instances. They can simple use following method which will find appropriate class and create the scope using it:	ClyInheritedScopeProvider createScopeFrom: aClassScopeOr simply convert given class scope using: 	aClassScope asInheritedScope	I am used to be able redefine meaning of inherited scope in the system. By default it is ClySuperclassScope. But with traits it is composite scope which also includes inherited traits.During annotations lookup I just use first registered annotation with lagest priority. For example ClyInheritedTraitScope is annotated by me with high priority value 100.I expect that annotated classes will implement following class side method - createInheritedScopeFrom: aClassScopeLook at ClyInheritedScopeProvider references for examples"
"FLByteObjectCluster","I am the generic cluster for storing and loading variable byte objects."
"TabWithNoContents","Error raised when a tab is asked its contents but have no morph and no retrieving block, or the retrieving block is returning nil."
"FLMigrationTest","SUnit tests for migrations"
"TextPrintIt","A ""Print It"" action on a text. When the text is clicked the text is seen as source code and evaluated. After that the result is printed"
"IceTipPushBrowser","I perform a push of outgoing commits."
"ListSelectionModel","This is deprecated class because the original class ListSelectionModel was renamed to ListSelectionPresenter. You should stop to use this class and modify your code to use ListSelectionPresenter."
"MCAncestry","Abstract superclass of records of ancestry."
"ProcessAlreadyTerminating","I notify the sender of #terminate that the receiving process has already received a #terminate before.Use Process>>isTerminating to check for this."
"MalSccEdgeDecomposition",""
"HEMethodLiteral","I represent a Method stored as a literal.I am stored as a className and a selector.Both elements are stored as HEExportedLiterals."
"ReExceptionStrategyBaseTest","A super test case that (re)stores  the setting value"
"DAMessageSendAnalyzerTest",""
"DAPackageAnalyzerReverseTreeModel","A PDPackageAnalyzerReverseTreeModel shows all users from a set of packages. Also you can see all type of the dependency, and browse them.The window is initialized with a relation graph of package dependencies, with all the dependencies already compute."
"ClyAllVariablesQuery","I return all type of variables from given scope.Scope should support #variablesDo:.Now only class scopes support it."
"LGitTreewalkCallback",""
"TaskbarTask","Holds the state of a taskbar/tasklist entry."
"TAssertable","I think it is not used yet. I think it is a Trait so that we can make things assertable and not need to subclass from TestCase for example. I may expect that TestCase uses such Trait instead of implementing all those methods,  but it is not the case. Even more, TAssertable users size -> 0. So...seems a work half done. Adrian Kuhn introduce it. Checkhttp://forum.world.st/template/NamlServlet.jtp?macro=search_page&node=1294837&query=TAssertable"
"RubShoutStylerDecorator","I am the shout styler decorator for a text area, I highlight the text "
"RBDummyEmptyClass","MRDummyEmptyClass is a test class to exercise class transformations"
"GTObjectPrinter","This is a utility class for printing objects to Text or String."
"ManifestFileSystemDisk","This package contains the disk management of Pharo's FileSystem manager. Its responsibility is to provid a common API for the different OS's disks. A documentation of this library is available in the Deep Into Pharo book, «Chapter 3: Files with FileSystem»."
"ClyRenameClassTagCommand","I am a command to rename class tag of the package Internal Representation and Key Implementation Points.    Instance Variables	classGroup:		<ClyClassGroup>	newName:		<String>	package:		<RPackage>"
"MalGraphEdge","I represent an edge in a graph.  I'm part of the edges of a MalGraphAlgorithm and I link two MalNode together.Public API and Key Messages- from- to - model  Instance Variables	from: <MalNode>	to: <MalNode>	model: <Object>"
"AthensParagraph","this class is subject of changes/removal. do not use it."
"ClyExternalPackageMethodGroup","I am group of class extension methods from concrete package. I represent subgroups of ""extensions"" method group.Internal Representation and Key Implementation Points.    Instance Variables	package:		<RPackage>"
"EpIconVisitor","I answer an icon for each EpEvent."
"MetacelloToolBox","MetacelloToolbox implements a toolbox API for Metacello.The toolbox methods on the class-side implement scripts for a number of commonly performed Metacello development tasks. The methods should be used in development scripts or GUI tools so that a common implementation is preserved across the toolset."
"IceMCSnapshotPatchVisitor",""
"FLPerson","FLPerson is a class just to be able to change the hash of an object and try to test problems with hash."
"ManifestJobsTests","This package contains the code related to the tests of Jobs.See the comment of Jobs package for more informations."
"ZdcAbstractSocketStream","I am ZdcAbstractSocketStream, a binary read/write stream for socket communication.Interally, IO is done through a read and a write ZdcIOBuffer.I am abstract, my subclasses should implement actual IO through a delegate."
"DynamicLeftToRightColumnsLayout","I am the layout for which you define the number of columns to store you presenters and set them from left to right in these rows."
"LazyTabPageAnnouncement",""
"AbstractCompiler","I define the public API of compilers that can be used as system compilers (e.g. overriding #compiler on the class side)."
"EpClassRemoval","I represent the removal of a class."
"ClyClassHierarchyScopeTestCase",""
"OSTouchTwoFingersScrollEndEvent","Two fingers stopped to scroll"
"BaselineOfClassAnnotation",""
"ClassRenameFixTest",""
"IceSystemEventListener","I am a class that listens to system events and dispatch them to the right iceberg object.I'm mainly used to mark as dirty packages whose methods and classes are modified.I'm implemented as class side methods to avoid memory leaks and problems when unsubscribing to events."
"RBMethodProtocolChange",""
"MorphicDiffAdapter","I am an adpater to bridge a DiffPresenter and a DiffMorph"
"GLMFinder","A GLMFinder models a browsers that behaves like the Mac Finder: whenever the selection port is set on one pane, a new one is created to the right with the selection as entity. The Finder opens the first pane on the entity.The Finder communicates with the Renderer Input ports:- entity: this is passed to the first paneOutput ports:- selection: this port is populated with the value from the last selection port from one of the panes"
"PickListPresenterTest",""
"ClySortByNameFunction","I just sort given objects by name.So I am supposed that sorted objects will respond to #name"
"NOCDatedEntry","I keep a symbol entry, along with the last time it was used in the system. I am used to sort the possible answers."
"ClyItemCellMorph","I represent simple label based cell in QueryView table.You can decorate this lable using special color or font styles: 	cellMorph label emphasis: TextEmphasis italic emphasisCode. Internal Representation and Key Implementation Points.    Instance Variables	label:		<Morph>"
"ClyBrowserQueryUpdate","I represent information update from query result instance. I include updated metadata, total result size and item cache starting from particular position.I was introduced to update cursor cache and metadata together by single message. It is important for remote scenario where query rsult is remote proxy and any interaction with it leads to network communication. I return all updated information in one request by single remote message.Create my instances using following message:	ClyBrowserQueryUpdate of: aBrowserQueryResult withItems: aBrowserQueryCacheInternal Representation and Key Implementation Points.    Instance Variables	itemCache:		<ClyBrowserQueryCache>	metadata:		<ClyQueryResultMetadata>	totalItemCount: <Integer>"
"SharedRandom","I represent a Random number generator that can be shaded between different code.I wrap the access to my parent's functionality (#next, #nextInt: and #next:into:)  through a mutex making me safe for multi threaded use.To access the default shared random number generator, do:	SharedRandom globalGenerator.	In principle it is better to use a shared generator since multiple users will create a more random pattern."
"ZnMultiValueDictionary","I am ZnMultiValueDictionary. I am a Dictionary.I offer an #at:add: method to transparently create Array valued multi entries when needed.My #keysAndValuesDo: is overwritten to transparently deal with multi entries.To merge two instance preserving multiple values you can use #addAllMulti:I normally limit the number of entries to protect me from resource abuse.Note that most other methods will show the actual value.Part of Zinc HTTP Components."
"ClyInheritedTraitsHierarchyTest",""
"RBApplyClassDeprecationRefactoringTest",""
"ClySortMethodByPackageFunctionTest",""
"SpecTreeColumn","I am a Tree column made especially to be used by the Spec framework"
"CmdMenu","I represent abstract tree structure for concrete menu implementation like context menu, toolbar, halo menu and etc..I am created for commands which have given #commandActivatorClass:	menu := CmdMenu activatedBy: aCommandActivatorClassThen I can build items for given context:	menu buildInContext: aToolContext.This method can be called multiple times for different contexts. It allows to build single menu for multiple parts of application. For example toolbar menu can include commands for all visible widgets.   When menu is built you can inspect #rootGroup to analyze structure.Concrete activator packages extend me to build concrete type of end user menu. For example context menu activator ask me to #buildContextMenu. Then I ask all my items to build context menu. And at the end commands receive context menu message where they build menu item morphs.  Internal Representation and Key Implementation Points.    Instance Variables	commandActivatorClass:		<CmdMenuCommandActivator class>	rootCommandClass:		<CmdCommand class>	rootGroup:		<CmdMenuGroup class>"
"ReDeadMethodTest",""
"DoubleByteLayout","I am a raw data layout that holds double bytes (16 bits)."
"NoChangesLog","I am NoChangesLog.I am a ChangesLog that does nothing. I.e. I do not log any changes.I am used to set up an image to run an image without changes.To install me, execute  NoChangesLog install.To get back to the normal situation, execute  ChangesLog reset."
"ClassFactoryForTestCaseTest","SUnit tests for ClassFactoryForTestCase "
"ClyBreakpointMethodGroupProvider","I provide ""breakpoints"" method group when classes include methods with breakpoints or halts"
"SystemReporter","SystemReporter offers a window where information about the system is gathered. This can be easily copied to the clipboard and be attached to a bug report for better identification of the context the bug occured in.To extend the SystemReporter:	- add a method		reportXYZ: aStream	  to the reporting category	- insert a line		add: #XYZ method: #reportXYZ	  to the initialize method"
"GLMTBlockTags","I provide an api for computing tags."
"SycNewClassCreationCommand","I am a base class for commands which create new class.They all needs new class nameInternal Representation and Key Implementation Points.    Instance Variables	newClassName:		<String>"
"TSubCollectionAccess","A trait for test purposes"
"LimitingLineStreamWrapper","I'm a wrapper for a stream optimized for line-by-line access using #nextLine. My instances can be nested.I read one line ahead. Reading terminates when the stream ends, or if the limitingBlock evaluated with the line answers true. To skip the delimiting line for further reading use #skipThisLine.Character-based reading (#next) is permitted, too. Send #updatePosition when switching from line-based reading.See examples at the class side.--bf 2/19/1999 12:52"
"GLMReplacePresentationsStrategy","This strategy replaces the presentations from the pane of the destination port."
"IceTipRemoveRepositoryDialog",""
"TestExecutionEnvironment","I am special environment to manage test execution. I address three problems:1) Tests should never hang. They should be executed with time limit. I give them 500 milliseconds by default. It could be overriden by TestCase method #defaultTimeLimit.Or it could be specified directly in test method by 	self timeLimit: 10 secondsIt could be changed at any time of test execution.To implement this logic I maintain special watch dog process which control execution time of tests. It is single for all test suite.2) When test completes I terminate all running processes which were forked during execution. 3) I manage all failures from forked processes by preventing spawning debuggers. I mark such tests as failed by signalling TestForkedFailedProcess error.When failure is signelled from forked process I suspend it and collect them together inside failedProcesses dictionary.TestForkedFailedProcess signal is resumable to allow debug suspended failures. When you debug test and saw this problem you can press Proceed to debug actual failures.I am installed when test is running (or test suite) by	CurrentExecutionEnvironment runTestCase: aTestCase	Internal Representation and Key Implementation Points.    Instance Variables	failedProcesses:		<Dictionary of<Process->Error>>	forkedProcesses:		<OrderedCollection of<Process>>	maxTimeForTest:		<Duration>	testCase:		<TestCase>	watchDogProcess:		<Process>	watchDogSemaphore:		<Semaphore>"
"ManifestSpecLayout","Layouts and layout actions for Spec UI framework"
"MetacelloSemanticVersionNumber","MetacelloSemanticVersionNumber conforms to version 2.0.0-rc.1 of  [Semantic Versioning 2.0.0-rc.1](http://semver.org/)The most important thing that you need to know is that: **A normal version number MUST take the form X.Y.Z where X, Y, and Z are non-negative integers.****Semantic Versioning Specification** extracted from [Semantic versioning 2.0.0-rc.1](https://github.com/mojombo/semver/blob/3c7f2e8df747ea0ca15208fdfc90e3275240184f/semver.md):Semantic Versioning Specification (SemVer)------------------------------------------The key words ""MUST"", ""MUST NOT"", ""REQUIRED"", ""SHALL"", ""SHALL NOT"", ""SHOULD"",""SHOULD NOT"", ""RECOMMENDED"", ""MAY"", and ""OPTIONAL"" in this document are to beinterpreted as described in RFC 2119.1. Software using Semantic Versioning MUST declare a public API. This APIcould be declared in the code itself or exist strictly in documentation.However it is done, it should be precise and comprehensive.1. A normal version number MUST take the form X.Y.Z where X, Y, and Z arenon-negative integers. X is the major version, Y is the minor version, and Zis the patch version. Each element MUST increase numerically by increments ofone. For instance: 1.9.0 -> 1.10.0 -> 1.11.0.1. Once a versioned package has been released, the contents of that versionMUST NOT be modified. Any modifications must be released as a new version.1. Major version zero (0.y.z) is for initial development. Anything may changeat any time. The public API should not be considered stable.1. Version 1.0.0 defines the public API. The way in which the version numberis incremented after this release is dependent on this public API and how itchanges.1. Patch version Z (x.y.Z | x > 0) MUST be incremented if only backwardscompatible bug fixes are introduced. A bug fix is defined as an internalchange that fixes incorrect behavior.1. Minor version Y (x.Y.z | x > 0) MUST be incremented if new, backwardscompatible functionality is introduced to the public API. It MUST beincremented if any public API functionality is marked as deprecated. It MAY beincremented if substantial new functionality or improvements are introducedwithin the private code. It MAY include patch level changes. Patch versionMUST be reset to 0 when minor version is incremented.1. Major version X (X.y.z | X > 0) MUST be incremented if any backwardsincompatible changes are introduced to the public API. It MAY include minorand patch level changes. Patch and minor version MUST be reset to 0 when majorversion is incremented.1. A pre-release version MAY be denoted by appending a hyphen and a series ofdot separated identifiers immediately following the patch version. IdentifiersMUST be comprised of only ASCII alphanumerics and dash [0-9A-Za-z-].Pre-release versions satisfy but have a lower precedence than the associatednormal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7,1.0.0-x.7.z.92.1. A build version MAY be denoted by appending a plus sign and a series of dotseparated identifiers immediately following the patch version or pre-releaseversion. Identifiers MUST be comprised of only ASCII alphanumerics and dash[0-9A-Za-z-]. Build versions satisfy and have a higher precedence than theassociated normal version. Examples: 1.0.0+build.1, 1.3.7+build.11.e0f985a.1. Precedence MUST be calculated by separating the version into major, minor,patch, pre-release, and build identifiers in that order. Major, minor, andpatch versions are always compared numerically. Pre-release and build versionprecedence MUST be determined by comparing each dot separated identifier asfollows: identifiers consisting of only digits are compared numerically andidentifiers with letters or dashes are compared lexically in ASCII sort order.Numeric identifiers always have lower precedence than non-numeric identifiers.Example: 1.0.0-alpha < 1.0.0-alpha.1 < 1.0.0-beta.2 < 1.0.0-beta.11 <1.0.0-rc.1 < 1.0.0-rc.1+build.1 < 1.0.0 < 1.0.0+0.3.7 < 1.3.7+build <1.3.7+build.2.b8f12d7 < 1.3.7+build.11.e0f985a.About-----The Semantic Versioning specification is authored by [TomPreston-Werner](http://tom.preston-werner.com), inventor of Gravatars andcofounder of GitHub.If you'd like to leave feedback, please [open an issue onGitHub](https://github.com/mojombo/semver/issues).License-------Creative Commons - CC BY 3.0http://creativecommons.org/licenses/by/3.0/"
"FLVariablesMapping","I am used to materialize instance variables in an object, tolerating ""class shape changing"".Cases tolerated are:- instance variable added- instance variable order change- instance variable removed"
"ClyUnknownScope","I am kind of null object for environment scope.I am default scope of any query. I provide #instance singleton for this.Also I prevent real execution of query by returning ClyUnknownResult instance from #query method. So environment is not requested to evaluate given query when query is bound to me."
"ASTTransformExamplePluginActive","This class changes the default compiler used to compile itself to include the AST transforming plugin ASTPluginMeaningOfLife.#example42 does not mean what you think it means (see bytecode)"
"EmptyLayout","Empty top-level layout used to delimit the layout chains."
"ManifestGrowl","Growl is a small Morph extension to display notifications on the screen.Freely inspired from the MIT Snarl developed by Tony Garnock-Jones."
"OCAbstractMethodScope","I am an abstract superclass for Block and Method scopes"
"ClyRequiredMethodGroupProvider","I provide ""should be implemented"" method group which includes all abstract methods from inherited classes which are still not implemented by given classes"
"IceTipCheckoutPreviewBrowser","I preview the changes that will be introduced in the image when a checkout occurs.(self onBranch: IceRepository registry anyOne branch) openWithSpec."
"ClyTestCaseRan","I represent event about test run. I am passed to environment instead of native SUnit events. Internal Representation and Key Implementation Points.    Instance Variables	testCase:		<TestCase>"
"HEWideString","I represent a WideString.I store myself as a byte array.To store myself I encode the content in utf8."
"MorphicAdapterBindings","I am used to link the spec-adapter names to the morphic adapters"
"RBUnnecessaryAssignmentRule","Checks for assignements to temporaries that are not used afterwards."
"SpecStubMultiColumnListAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"ManifestReflectivityTests",""
"AdditionalMethodStateTest","SUnit tests for AdditionalMethodState"
"RadioButtonModel","This is deprecated class because the original class RadioButtonModel was renamed to RadioButtonPresenter. You should stop to use this class and modify your code to use RadioButtonPresenter."
"FLNotSerializable","I represent an error which may happen while tracing in the graph an object that is forbidden of being serialized."
"ReInvocationSequenceRuleSequence","I simply hold the method names that have to be called before/after each other"
"CP1250TextConverter","Text converter for CP1250.  Windows code page used in Eastern Europe."
"CmdClickActivation","I represent activation of commands using mouse click event"
"SpecStubMultiColumnListView","Only stub object, no real view is displayed."
"ZnServer","I am ZnServer, an abstract superclass of HTTP Servers.I am a facade for controlling a default server implementation.I delegate my public class protocol methods to #defaultServerClass.  ZnServer startDefaultOn: 1701.  ZnClient new get: 'http://localhost:1701'.Subclasses can register with me to have start/stop sent to them on System startUp/shutDown.The default server instance will be registered automatically when it is started.Part of Zinc HTTP Components."
"IceGitHubPullRequestDefinition","I am a pull request. I can be sent using ==#sendWithCredentials:== protocol."
"RGBSliders","I am an elementary Spec widget allowing a user to choose a Color by its RGB values.self exampleI manage three SliderInput.I set their min at 0 and their max at 255.I provide the methods color that calculate the Color obtains with the current value of the sliders."
"GTSpotterItemBrick","I am a visual element that represents a single search result item within a category and is located in the list of all result items in Spotter.I consist of icon, label and action bar with item related actions. Generally, I look like:[ .... == Icon ==  .........    ==Label==   ........................ == Action bar == ..... ] >I can be hovered with the mouse and selected by navigating with the help of keyboard arrows or click-selected with mouse.Once hovered or selected my action buttons become visible. Internal Representation and Key Implementation Points.    Instance Variables	actionbarBrick:		<GLMBrick> - is a container of action buttons	iconBrick:		<GLMBrick> - represents a search result icon. May be empty / invisible, still occupies space	labelBrick:		<GLMBrick> - shows a textual representation of a search result item	candidateLink:		<GTSpotterCandidateLink> - a link to the search result candidate. Link know its successor and predecessor within a result list	stepModel:		<GTSpotterStep> - reference to the spotter step context that produced a candidate item I visually represent    Implementation Points"
"FLSerializationError","I represent an error happened during serialization."
"TokenTreeFilter","I am a filter for a token.If a node item contains my token I accept it"
"RBCondition","I am a refactoring condition for doing a precondition check for refactoring operations.A precondition check returns true or false and is used by refactoring operations to check whether the operation is applicable to the target entity (class or method refactoring).You can set the block code used for testing the condition (#withBlock:).And I define some factory methods on my class side for creating instances of me, for some typically usage. For example: This creates a condition checking if the class named #Morph implements a selector named #drawOn:(RBCondition definesSelector:#drawOn: in: (RBClass existingNamed:#Morph)).Most users of me are refactoring operations and use my methods on the class side for creating instances."
"ClyAllClassVariablesQueryTest",""
"FTSubstringFilter","I filter given strings by checking substrings inclusion"
"RBAbstractBlockVisitor","Abstract visitor providing generic block visiting capabilities.Subclasses provide specific node type capabilties"
"RFCondition","I can be used to reify the condition of a link.I have myself a condition *and* I store the condtition of the link.on #value, I evaluate my condition and after that the orginal link condition.With this feature, we can thus reflectively controll links while not actually changing the condition of the link itself. "
"NetworkSystemSettings","I am NetworkSystemSettings, a class side API to manage various system network settings, mostly related to HTTP proxying."
"IceTipEditSSHCredentialsModel","I implement the dialog to edit SSH credentials."
"ShTestSharedPool","I am a test class."
"ClyUnclassifiedMethodGroupProviderTest",""
"GLMPagerException",""
"RBAsOrderedCollectionNotNeededRule","A prior conversion to an Array or OrderedCollection is not necessary when adding all elements to a collection."
"HiRenderer","I know how to render a Hiedra ruler element in an Athens canvas.I have an Athens canvas and my concrete subclasses know how to #render."
"ClyAsyncBrowserQueryCursorTest",""
"ISO885915TextConverter","Text converter for ISO 8859-15.  An international encoding used in Western Europe, similar to ISO 8859-1 but adds the Euro symbol and drops others like one quarter."
"TextMorphForEditorView","Used by PluggableTextEditorMorph to specify a plain TextEditor for the editor"
"RBTempsReadBeforeWrittenRule","Checks that all temporaries are assigned before they are used. This can help find possible paths through the code where a variable might be unassigned when it is used."
"FFITestStructure2Int64Structure",""
"MetacelloVersionSpecTestCase",""
"WeakSetTest","A trait for test purposes"
"ClyCompositeTestResultProperty","I compose test result information from all classes which inherit tests from decorated method or class.My counts variables provide summary on all of them. And the map testCaseResults include information for each of them.I am used to correctly run inherited tests when they are visible in the browser from subclasses.And I allow to run all tests of abstract class including all subclasses.   Internal Representation and Key Implementation Points.    Instance Variables	testCaseResults:		<Dictionary of<TestCase class, ClyTestResultProperty>>"
"ClyGroupedClassVariablesTest",""
"ShouldNotImplement","I am ShouldNotImplement, an exception signaled when a method was implemented but should not have been.This can happen when an implementation is inherited."
"EpHasImpactVisitor","I answer a boolean that indicates if a EpCodeChange would actually produce a change in current image if applied with EpApplyVisitor."
"GLMFormattedPresentationTest",""
"SyntaxErrorNotification",""
"FFITypeArray","I represent somekind of constant type arrays . My main purpose is being used into structures.For example, a structure like this: struct {	int field[4];}can be modeled like this: TheStruct class>>initialize	Int4 := FFITypeArray ofType: #int size: 4 TheStruct class>>fieldsDesc 	^ #(	Int4 field;	)Of course this is not the best way to do it (parser needs to be adapted to do this automatically), but is a good and fast way to provide the functionality. "
"ExtendedDatePrinter","I extend the behavior of BasicDatePrinter with the whole format supported in Pharo"
"DateAndTimeLeapTest","I represent one of several Sunit test Cases intentended to provide complete coverage for the Chronology set of classes. My fixtures are:aDateAndTime = February 29, 2004 1:33 PM with offset: 2 hoursaDuration = 15 days, 14 hours, 13 minutes, 12 seconds and 11 nano seconds.aTimeZone = Grenwhich Meridian (local offset = 0 hours) "
"PotentialOutDatedDependencyWarning","Warning signaled when a dependency manually declared has no match in potential dependencies."
"OCASTClosureAnalyzerTest",""
"ClyItemDefinitionProperty","I am a root of hierarchy of system object definitions.System objects are supposed to have defining package and defining class.And idea to decorate items with these information.When system objects are converted to browser items they add system definition property: 		Array asCalypsoBrowserItem And you can access definition from any item: 	Array asCalypsoBrowserItem systemDefinition.Definitions were introduced to cover remote scenario of browser where package and class should be loaded together with methods.Query browser shows package and class for every item. So it is important to not request them from remote side for every item.Maybe this approach will be replaced by better idea in future.I provide suitavle instantiation method for my subclasses: - package: aPackage class: aClass Internally I convert given package and class to browser items. So my variables include wrapper.To access actual class or package use: 		itemDefinition definingClass		itemDefinition definingPackage.Notice that my defining class is always instance side of class. And I have extra flag isInstanceSide to indicate that object is actually defined on instance side or on class side. It can be also avoided in future because defining class can be metaclass when object is defined on class side.But for now it was more suitable to use definitions in this form from the UI and in case of remote scenario.   Internal Representation and Key Implementation Points.    Instance Variables	definingClassItem:		<ClyBrowserItem>	definingPackageItem:		<ClyBrowserItem>	isInstanceSide:		<Boolean>"
"CompiledMethodTrailer","I am responsible for encoding and decoding various kinds of compiled method trailer data.I should not expose any binary data outside of myself, so all tools which working with compiled methodsshould ask me to encode the meta-data, they want to be added to the compiled method trailer, as well as retrieve it.To add a new kind of trailer, you should give it a proper name and define it in the #trailerKinds method at my class side.Then you need to implement a corresponding #encode<your name> and #decode<your name> methods at instance side. Then add any public accessor methods, which will use a newly introduced trailer kind for communicating with outer layer(s).An encodeXXX methods should store result (byte array) into encodedData instance variable.A decodeXXX methods should read the data from compiled method instance, held by 'method' ivar,and always set 'size' ivar (denoting a total length of trailer in compiled method) and optionally 'data' ivar which should keep a decoded data, ready to be used by outer layer(s) using accessor method(s) you providing.The kind of compiled method trailer is determined by the last byte of compiled method.The byte format used is following: 	""2rkkkkkkdd""where 'k' bits stands for 'kind' , allowing totally 64 different kinds of method trailerand 'd' bits is data.Following is the list of currently defined trailer kinds:NoTrailer , k = 000000, dd unusedmethod has no trailer, and total trailer size bytes is always 1ClearedTrailer, k = 000001, method has cleared trailer (it was set to something else, but then cleared) dd+1  determines the number of bytes for size field, and size is a total length of trailer bytesSo a total length of trailer is: 1 + (dd + 1) + sizeTempsNamesQCompress, k = 000010the trailer contains a list of method temp names,  compressed using qCompress: method. dd+1  determines the number of bytes for size field, and size is a number of bytes of compressed buffer.So a total length of trailer is:  1 + (dd + 1) + sizeTempsNamesZip, k = 000011the trailer contains a list of method temp names,  compressed using GZIP compression method. dd+1  determines the number of bytes for size field, and size is a number of bytes of compressed bufferSo a total length of trailer is: 1 + (dd + 1) + sizeSourceBySelector, k = 000100the trailer indicates , that method source is determined by a class + selector where it is installed to. Trailer size = 1.SourceByStringIdentifier, k = 000101the trailer indicates , that method source is determined by a class + some ByteString identifier. dd+1  determines the number of bytes for size of ByteString identifier, and size is number of bytes of string.A total length of trailer is:  1 + (dd + 1) + sizeEmbeddedSourceQCompress, k = 000110the trailer contains an utf-8 encoded method source code, compressed using qCompress methoddd+1  determines the number of bytes for size field, and size is a number of bytes of compressed source codeA total length of trailer is:  1 + (dd + 1) + sizeEmbeddedSourceZip, k = 000111the trailer contains an utf-8 encoded method source code, comressed using GZIP dd+1  determines the number of bytes for size field, and size is a number of bytes of compressed bufferA total length of trailer is:  1 + (dd + 1) + sizeVarLengthSourcePointer, k = 001000the trailer is variable-length encoded source pointer. dd bits is unused.ExtendedKind, k = 001001the next byte of trailer (one that prepends the last byte of compiled method)denotes an extended kind of trailer, allowing to use additional 256 kinds of encoding method's trailer in future. SourcePointer, k = 111111 the trailer is encoded source pointer. Total trailer size is 4-bytes (this kind of encoding is backwards compatible with most of existing compiled methods)"
"StringMorphAttributeScanner","A StringMorphAttributeScanner provides the interface of a CharacterScanner so that text attributes may be collected from a Text and used elsewhere, like in setting the attributes of a StringMorph."
"BMPReadWriter","I am BMPReadWriter.I am a concrete ImageReadWriter.I read and write the BMP image file format.	https://en.wikipedia.org/wiki/BMP_file_formatExample to save and load a screenshot of the world in a .bmp file:BMPReadWriter    putForm: (Form fromDisplay: (0@0 corner: 400@400))   onFileNamed: '/tmp/screenshot.bmp'.(ImageMorph withForm: (BMPReadWriter formFromFileNamed: '/tmp/screenshot.bmp')) openInWindow."
"GLMWizardMorphicTest",""
"RBLintRuleTest",""
"ZnBufferedStreamByteTests","Tests for bufferer read/write streams that are assumed to contain bytes.Right now, integer encoding/decodingReferenceshttps://en.wikipedia.org/wiki/Endiannesshttps://en.wikipedia.org/wiki/Two%27s_complement"
"DropListItem","A DropListItem is an item (wrapper) designed to fit into a DropList"
"BreadthFirstGuideTest","SUnit tests for class BreadthFirstGuide"
"SpecLayoutAdd","A SpecLayoutAdd represents the action to add a subwidget into a spec layout"
"RBRefersToClassRule","This smell arises when a class has its class name directly in the source instead of ""self class"" (or just ""self"" when on the class side). The self class / self variant allows you to create subclasses without needing to redefine that method.However we cannot systematically replace Class reference by self class or self because a Class reference is static and a self expression is dynamic. So the programmer may want to send messages to root of an hierarchy and not to the leaf classes. Therefore this rule generates false positives, please double check when fixing!"
"SlotNotFound","I am an exception to indicate that a slot is found in a layout."
"LinearGradientPaint","I represent a linear gradient paint.My start and stop points defining the position and direction of gradient fill in user space coordinates,so that the ramp color at 0 maps to starting pointand ramp color at 1 maps to stop point of linear gradient.Also check the comment of my superclass to know better how and when you can use me."
"ManifestMultilingualLanguages","Support for different language environments (Latin1, Latin2, Latin9)"
"AllProtocol","An AllProtocol is a special protocol to hanlde the ""all"" case"
"IceTipMetacelloInstallBaselineDefaultCommand","I'm a command to install a baseline (default group)"
"Slider",""
"ExceptionTests","SUnit tests for exceptions"
"FLReplacementClassMock",""
"AthensCairoPDFSurface","i am a concrete implementation of Athens surface which using cairo graphics library for rendering for generating PDF filesas output.<currently it is not functional and need more testing and coding>"
"GLMExpanderMorphicTest",""
"HashTableSizesTest","SUnit test for HashTableSizes"
"MCRepositoryAuthorizationTest",""
"MetacelloGofer",""
"GLMWatcherWindow","This morph is used as support for the watcher (quick preview) behavior.GLMWatcherWindow uniqueInstance openInWorld.GLMWatcherWindow reset."
"ZipFileMember","ZipNewFileMember instances are used to represent files that have been read from a ZipArchive.Their data stays in the file on disk, so the original Zip file cannot be directly overwritten."
"ExampleSetTest","SUnit tests for example set"
"MCVersionDependency","Dependencies"
"IceTipPushCommand","I'm a command to perform a push of outgoing commits. I open a push view window."
"IceNullCommitWalk",""
"ManifestToolBase","Basic tools and tool registry"
"ClyEnvironmentPlugin","I am a root of environment plugins hierarchy.My subclasses are responsible for three things:1) Extend browser items with arbitrary properties. Any plugin can compute specific properties for given item. For example plugin can mark class that it is abstract:		MyPluginClass>>decorateBrowserItem: anItem ofClass: aClass		aClass isAbstract ifTrue: [ anItem markWith: ClyAbstractItemTag  ]		Concrete decoration methods which plugin can implement are depends on the item types which plugin is going support. For another example to decorate methods plugin should implement: - decorateBrowserItem: anItem ofMethod: aMethodNormally when you develop navigation over concrete system you build some common superclass plugin which will provide stubs for all item types form your domain. In case of Smalltalk navigation there is ClySystemEnvironmentPlugin which implements empty methods to decorate packages, classes and methods (like in examples)2) Connect external systems to the navigation environment. Plugin package can provide new kind of queries and scopes which retrieves new kind of items. These items can be from systems which are external to the main navigation environment. Plugin should take care about external updates by subscribing to external system for the changes and by delegating them to the navigation environment.For example SUnit plugin extends Smalltalk environment with information about tests. It subscribes on SUnit events about test ran. And when it happens it delegates event to the environment which updates methods queries with new information about test result.To connect to external system plugin implements following method:- attatchToSystem Here plugin can subscribe on external events. For example SUnit plugin subscribes on ""TestCase historyAnnouncer"" to know when user run tests.And to disconnect from system should implement:- detatchFromSystemFor example SUnit plugin unsubscribes from ""TestCase historyAnnouncer"".3) Collect query result metadata. For example SUnit plugin can collect how many success tests are retrieved by method query.The exact methods which plugin should implement depends on the kind of queries it is supposed to support. In case of SUnit it implements:- collectMetadataOfMethods: aQueryResultBut decision what method to use is responsibility of queries. For example: 	ClyMethodQuery>>collectMetadataOf: aQueryResult by: anEnvironmentPlugin		anEnvironmentPlugin collectMetadataOfMethods: aQueryResultAs in case of items decoration the superclass of plugins can provide empty methods for metadata collection. So concrete plugin only chooses what it wants.That is all responsibility. To activate plugin it should be added to navigation environment: 	environment addPlugin: anEnvironmentPlugin Default global environment adds all plugins automatically. Only plugins marked as auto-activated are used (which is true by default):		ClyEnvironmentPlugin class>>isAutoActivated		^isAutoActivated ifNil [true]You can disable any plugin using: 		ClyConcretePlugin disableBut it do not affect default navigation environment. You will need recreate it. Internal Representation and Key Implementation Points.    Instance Variables	environment:		<ClyNavigationEnvironment>"
"GLMMorphicListingRenderer",""
"ShSmalltalkGlobalsEnvironment","I represent the Smalltalk globals environment. I am used to generate the classes by the ShiftClassBuilder when it is using directly the Smalltalk environment."
"KMBuilder","I am a keymap builder that is used when configuring keymappings by pragmas.Send me the #shortcut: message with a keymap name, so I give you a specific builder to build a keymap.You can also tell me to install a category as global."
"ManifestMathOperationsExtensions","Additional math operations"
"IceTipBrowser","I'm a base tool for iceberg Tip-UI. My children will implement real tools, but I provide certain common elements. Some remarks about design: 1. Each tool has to have ONE model as entry point for data, and JUST ONE. It will be contained    in #model accessor."
"EpProtocolRemoval","I represent the removal of a protocol of a class or a trait."
"GLMPresentationRefreshRequest","A GLMPresentationUpdateRequest is announced by the presentation to notify the presentation that it should update it's content in a fast and non disrutive way. It is usually used in automatic refresh. A presentation can implement this the same way as #update, however it doesn't have to recompute it's content. Depending on its state the presentation can also ignore this request (for example it it is not visible on screen). "
"ClyAllPackagesQueryTest",""
"IceTipCheckoutModel",""
"GLMBoundPort",""
"ExampleSlotWithDefaultValue","NOTE: this is an example of what can be done with Slots. It is *not* an example of what *should* be done with Slots.I am showing how a slot can initialize itself on object creation.#name => ExampleSlotWithDefaultValue default: 5"
"Abort","Notify to abort a task"
"GLMRubEditingAreaBrick","A GLMRubEditingAreaBrick is basic text editor brick used for multi line input fields. vShrinkWrap - height fits text size + vertical paddingshShrinkWrap - doesn't make any sense.vSpaceFill - fills parent vertically. Actual text editor height = parent height - vertical paddingshSpaceFill - doesn't really makes sense, since text area still shrinks to fit text"
"IRSequence","A sequence is corresponds to a block in the control flow graph."
"ClyUndeclaredEnvironmentPlugin","I am special plugin which decorate methods which use undeclared variablesAlso I provide ""undeclared"" method group to see all such methods together"
"AthensTigerShape","The tiger shape (see VGTigerDemo runDemo)"
"ClyBrowseCoveringTestCaseCommand","I am a command that opens a new browser on the test class corresponding to the selected class."
"LIFOQueue","This is a thread-safe LIFO (last-in-first-out) queue (also known as stack) implementation,based on atomic operations."
"HEByteString","I represent a byte string.Readers and writers knows how to handle byte strings.I just use them and I provide an entry point to my subclasses to convert the readed value."
"IceTipCredentialsSettings",""
"ShMetaclassChangeDetector","I am responsible of detecting when a class changes its metaclass."
"MCDependentsWrapper","Specialized list item wrapper for dependents"
"FTOutline","I am the FT_Outline mapping."
"FFITestStructureIntStructure",""
"RBSplitCascadeRefactoring","I am a refactoring splitting a cascade message send to multiple messages.You can select an interval containing a cascade expression. The refactoring will split this expression to two message sends to the receiver. My preconditions verify that the selector containing the cascaded message send is defined in this class, and a cascade message can be found.If the receiver of the cascade expression is a literal or the return value of another message send, I will add another temporary variable for the interim result."
"ByteTextConverterTest","SUnit tests for ByteTextConverter"
"SDL_JoyDeviceRemovedEvent","SDL2 library structure representing a joystick device removed event data."
"MD5NonPrimitive","This class implements the MD5 128-bit one-way hash function.  It relies onthe ThirtyTwoBitRegister class supplied as part of the ""Digital Signatures""functionality included in Squeak 2.7.  As of this date (1/20/2000), theU.S. Government has lifted many of the previous restrictions on the exportof encryption software, but you should check before exporting anythingincluding this code.  MD5 is commonly used for some secure Internetprotocols, including authentication in HTTP, which is why I wrote it.Submitted by Duane Maxwell"
"MorphEventSubscription","I represent a subscription to an event.  I'm kind of an announcement, that's why I will be replaced by them soon :)"
"OrderedDictionaryTest","This class tests the OrderedDictionary class. It is separate from DictionaryTest to test that accessing, enumerating, and printing methods preserve the order that keys were inserted in."
"OSWindowRenderThreadOperation","I am a render operation, used to send commands (which can be asynchronous or synchronous) to the render thread. "
"RegexHelp","This is a custom help book for the regular expression framework."
"ClyVariableQueryTestCase",""
"ClyRunTestsFromClassesCommand","I run all selected test cases"
"AthensCairoDefinitions","I hold a lot of different constants needed to work with cairo library"
"SpecInterpreterTest","A SpecInterpreterTest is a test class for testing the behavior of SpecInterpreter"
"IdentityBagTest","SUnit tests for identity bags"
"SDL_TextInputEvent","SDL2 library structure"
"ShInstanceShapeChanged","I signal when there is need to migrate the instances. Of course if I migrate the instances, this change is propagated to the subclasses.I propagate the changes adding a change like me in the subclasses."
"WhereIsDebugAction","A WhereIsDebugAction highlights in the code editor the current instruction."
"SelectRuleBrowser","To select rules."
"RBRenameTemporaryRefactoring","I am a refactoring for renaming temporary variables.This can be applied to method arguments as well.The variable declaration an all references in this method are renamed.My precondition verify that the new name is a valid variable name and not an existing instance or a class variable name"
"FFITypesTests","Tests for different FFI types"
"FreeTypeCacheLinkedList","A linked list for the FreeTypeCache"
"RBApplyClassDeprecationRefactoring","I am a refactoring operation for removing of usages of a deprecated class, that was renamed to another name. I'm doing following operations: - all subclasses of the deprecated class will use the new class as superclass (optional) - rename all references in the code - move extensions of the deprecated class owned by other packages to the new class (optional) - remove the extensions (optional)"
"GIFReadWriterTests","GIF Specific ReadWriter tests. All tests ensure that the images written are read back in correctly and visa-versa. Using different colors helps ensure that the resulting mapped pixel data for each is reasonably correct."
"MetacelloMonticelloResource",""
"TDictionaryIncludesTest","A trait for test purposes"
"GTEventPacking","I represent an abstract packing system that is able to receive objects and pack them into a binary data (ByteArray).Others can ask me for serializing an object by sending me #pack: or for materializing a ByteArray by sending me #unpack:. On the class side, you can find out #fuel and #ston methods, two available packing strategies. The method #version keeps current packing version and changelog. The main users are GTEventRecorder (for packing) and GTEventAnnouncement (for unpacking).Public API and Key Messages- pack:- unpack:- version"
"GTFilter","I am the root class of the hierarchy of filter objects  that can be used by Spotter. The main entry point is the #value method that performs and returns the list of filtered items.Subclasses should return the list of filtered elements in sorted order based on the filtering criteria."
"UTF8TextConverter","Text converter for UTF-8.  Since the BOM is used to distinguish the MacRoman code and UTF-8 code, BOM is written for UTF-8 by #writeBOMOn: which is called by client."
"ClyDebugBrokenCritiqueCommand","I am a command to debug broken critique.I expect that my critique is ReExceptionProperty instance representign the failure which was raisen during critique computation"
"TextEntryDialogWindow","Single-line text entry dialog."
"ReflectivityCodeMorph","I'm a morph that shows the source codes of a compiled method "
"STONCStyleCommentsSkipStreamTests",""
"IceTipBrowseRepositoryPackageVersionCommand","Command that opens a browser on the code of the repository.The current implementation relies on a monticello MCSnapshotBrowser"
"GTEventBundle","I associate a piece of data that should be delivered to a remote server with the url of that remote server.Instances of me should be sent to a GTEventDelivery."
"AbstractFont","AbstractFont defines the generic interface that all fonts need to implement."
"GLMActionsToolbarMorphicTest",""
"FontFamilyMemberAbstract","Abstract member for a font family"
"MetacelloToolBoxConstructor",""
"PeelToFirstDebugAction","A PeelToFirstDebugAction peels the stack back to the second occurance of the currently selected message."
"HSVColorSelectorMorph","Colour selector featuring a saturation/volume area and a hue selection strip."
"ToOneRelationSlot","I'm an relation slot  that  describes the one or zero side of an association."
"SubclassWithOnlyInheritedAnnotation",""
"GLMWizardGenericStep","A generic step in a wizardInstance Variables	numberOfDisplayBlock:		<Object>	size:		<Object>numberOfDisplayBlock	- xxxxxsize	- xxxxx"
"FFIFloat16","I'm a 16bits (half precision) float. It is usually not used, but ARM processors support them (__fp16 in gcc). THIS IS NOT YET SUPPORTED"
"GLMHighlighterTextStylerDecorator",""
"MCMcdWriter","Writing MCD format"
"SimpleGridExample","SimpleGridExample new open"
"MetaLink","Metalinks are used to annotate other AST nodes. An annotated AST is expanded, compiled and executed on the fly thanks to the ReflectiveMethod/CompiledMethod Twin. For a given node metalinks can be put at different positions:- before: The metalink is executed before the execution of the node.  - instead: The metalink is executed insted the node.- after: The metalink is executed after the execution of the node.(... later: onError,  Do we have an #around instead of #instead?)Not all the nodes provide all the position. For example, literals don't provide onError and onSuccess positions.metaObject: The target object to callselector: send this selectorargumentscondition:  turn link on/off level: Meta Level at which the link is active------ Examples -----MetaLink new 	metaObject: Halt;	selector: #now.	MetaObject new 	metaObject: [ self halt ];	selector: #value."
"OSTouchHoldEvent","Fingers are staying on the screen"
"RubParagraphDecorator","I am a decorator for the paragraph of a text area. I can be used to draw something on the paragraph "
"IceTipBranchPanel","I'm a generic panel to checkout panels. My children will define different strategies to checkout (select an existing branch -local or remote-, or enter a new branch name)"
"Pharo3DarkTheme","Use PharoDarkTheme now"
"RBUnderscoreAssignmentRule","Replace _ by :="
"UDPSocketEchoTest","UDPSocketEchoTest is both a unit test and an example.It implements and tests a UDP echo service.Each datagram sent to it is echoed back as is.You can also run the example manually,by inspecting each expression separately.  UDPSocketEchoTest new runServer.  UDPSocketEchoTest new clientSend: 'Hello @ ', Time now asString.  UDPSocketEchoTest new clientSend: #quit.The server runs until it receives quit as message. If necessary, use the Process Browser to terminate a running server."
"SugsDeprecateMethod","I know how to deprecate method."
"OSTouchRotationDetector","I am the abstract class for all the Rotation gesture detectors"
"RubAbstractTextAreaTest","A RubAbstractTextAreaTest is a test class for testing the behavior of RubAbstractTextArea"
"ClassTraitTest",""
"MetacelloLoadingMCSpecLoader",""
"WeakIdentityValueDictionary","This class represents an identity dictionary with weak values"
"SugsDiffModelContext","I know how to  extract the information needed for the suggestions from a DiffModel"
"LGitFetchOptions",""
"ArchiveMember","This is the abstract superclass for archive members, which are files or directories stored in archives."
"MethodFinderTest","Unit tests for MethodFinder"
"RBSearchRule","RBSearchRule is a parse tree rule that simply searches for matches to the rule. Every time a match is found, answerBlock is evaluated with the node that matches and the cureent answer. This two-argument approach allows a collection to be formed from all of the matches (Think inject:into:).Instance Variables:	answerBlock	<BlockClosure>	Block to evaluate with the matching node and the current answer."
"IceTipVersionHistoryContext",""
"SimpleTestResourceB1","I'm a simple test ressource for test purposes"
"ClassWithPrioritizedAnnotations",""
"ClyQueryBrowserState","I represent query browser state which includes active scope and active query and extra scopes list.  Internal Representation and Key Implementation Points.    Instance Variables	activeScope:		<Object>	methodQuery:		<Object>	queryScopes:		<Object>"
"IceTipCredentialContext","I am the context used when working on a credential. "
"ClyMultipleClassRelationScopeTest",""
"TutorialPlayerTestTutorialAccessor","SUnit tests for tutorial player"
"PluggableToggleButtonMorph","I'm a pluggable togglable button. I extend a pluggable button in a very simple way:  I keep two states, PRESSED, and UNPRESSED (in fact, is just a boolean).I override a couple of methods, like #getModelState because in my context it does not have sense. See PluggableToggleButtonMorphExample to have some usage hints. Example:========(This is very simple and probably you want to use as is shown in the examples)PluggableToggleButtonMorph new 	icon: Smalltalk ui icons smallOkIcon;	label: 'Test';	actionBlock: [ :pressed | self inform: 'Status: ', (pressed asString) ];	openInWindow	"
"AthensPolygon","i am special kind of shape which using only straight line segments, unlike from more generic paths."
"ReMultipleCritiquesEvent","A Renraku event with multiple critics."
"ClyItemGroup","I am a root of hierarchy of groups for different kind of objects.I provide name and priority for users: 		ClyConcreteItemGroup named: 'a group name'.	ClyConcreteItemGroup named: 'a group name' priority 100.Priority is used to sort groups when they are represented by sorted query result. By default bigger priority moves group to the end of result list.When groups are represented as browser items they are able to decorate them with specific properties: 	aGroup decorateOwnBrowserItem: aBrowserItemAnd when group is shown in the browser it can decorate table cells:	aGroup decorateTableCell: anItemCellMorph of: groupItemBy default I decorate cell with special color when it shows readonly groups.Any group is readonly by default. To mark editable group you should implement class side method #isEditableGroup by returning true"
"LGit_GIT_OK",""
"ManifestPharoBootstrapInitialization","Initializations done during image bootstrap process"
"StepThroughDebugAction","A StepThroughDebugAction through the execution until control returns to the current method."
"PragmaCollectorReset","A PragmaCollectorReset is an announce which is announced by a PragamColllector when it is reset.see PragmaCollector>>reset.Instance Variables	collector:		<PragmaCollector>collector	- the collector which is reset"
"GoferWorking","Common superclass for workin copies in Gofer"
"TestCaseTest","SUnit test for TestCase class"
"Morph","A Morph (from the Greek ""shape"" or ""form"") is an interactive graphical object. General information on the Morphic system can be found at http://minnow.cc.gatech.edu/squeak/30. Morphs exist in a tree, rooted at a World (generally a PasteUpMorph). The morphs owned by a morph are its submorphs. Morphs are drawn recursively; if a Morph has no owner it never gets drawn. To hide a Morph and its submorphs, set its #visible property to false using the #visible: method. The World (screen) coordinate system is used for most coordinates, but can be changed if there is a TransformMorph somewhere in the owner chain. My instance variables have accessor methods (e.g., #bounds, #bounds:). Most users should use the accessor methods instead of using the instance variables directly.Structure:instance var 	Type 			Description bounds 			Rectangle 		A Rectangle indicating my position and a size that will enclose 									me. owner 			Morph		 	My parent Morph, or nil for the top-level Morph, which is a 				or nil			world, typically a PasteUpMorph.submorphs 		Array 			My child Morphs. fullBounds 		Rectangle 		A Rectangle minimally enclosing me and my submorphs. color 			Color 			My primary color. Subclasses can use this in different ways. extension 		MorphExtension Allows extra properties to be stored without adding a				or nil  				storage burden to all morphs. By default, Morphs do not position their submorphs. Morphs may position their submorphs directly or use a LayoutPolicy to automatically control their submorph positioning.Although Morph has some support for BorderStyle, most users should use BorderedMorph if they want borders."
"PolymorphSystemSettings","I provide settings for Morphic appearance (theme, fonts, colors, ...) that can be found and changed in the Settings browser."
"ClyRemoveAndShowSendersMethodStrategy","I am a remove method strategy which removes methods but in addition it shows all senders."
"CopyVisitor","I create a copy of the directory tree that I visit. I use the PreorderGuide so that I can create directories before creating their contents. "
"FFILong","I'm a long. Longs are special, see FFIULong comment for details."
"MorphSlot","An Example how Slots can be useful for Morphic.A Slot for a morph Ivar where the use case is to hold a reference to some morph, and changing that Ivar follows the pattern of:setIvar: aMorph	 ivar ifNotNil: [ ivar delete ].	 ivar := aMorph"
"RBAssignmentToken","RBAssignmentToken is the first-class representation of the assignment token ':='"
"FLPharo7Platform",""
"HaltOnceIconStyler","I'm in charge to style  the editor for  a ""haltOnce"". Clicking on it re-enables the haltOnce."
"OCEnvironmentScopeTest","tests related to environment"
"TestSessionHandler","I'm a session handler used for tests purposes.You can provide me blocks to be executed at startup or shutdown."
"EyePointerExplorer","A variant on the TreeInspector that works ""backwards"".By default it shows both weak and strong references (#openOn:) but I can be configured to omit weak refs with #openStrongOn:Like the TreeInspector, it shows a tree of objects, but expanding a node won't show the objects which that node references, but rather the objects that reference that node.  Its main use is to track down memory leaks: if you want to know why a particular object is still alive, open a PointerExplorer on it and drill down until you find the root object that's referencing it.  For example, find all the references to the symbol #zot with:EyePointerExplorer openOn: #zotFor the ""name"" of the object, the PointerExplorer shows each object's identityHash, to allow the user to identify when two similar objects are identical and notice cycles."
"TraitComposition","It is kept for compatibility with extension methodsCheck the class TaAbstractComposition for the new implementation."
"EyeCharacterInspector","I am  EyeCharacterInspector.I am a EyeInspector.I offer a specialized inspector to look at Character instances. I show the Unicode code point in standard notation, like U+0041 for $A."
"GLMHighlightAndEvaluate","I am event indicating to the renderer to execute the  highlighted text and perform an action with the result."
"NonInteractiveTranscript","I am NonInteractiveTranscript, a replacement for Transcript, writing everything to a file or stdout. I implement TTranscript.This is useful when running headless.	NonInteractiveTranscript file install.	To connect to the output stream of the virtual machine process choose stdout.	NonInteractiveTranscript stdout install.or 	NonInteractiveTranscript stderr install"
"WaitfreeQueue","This is a thread-safe implementation of a queue with wait-free operations. It is guaranteed that any message sent to my instance (like adding new item, or fetching item) will not block sender,nor enter a waiting loop.The implementation is based on atomicity of simple assignment operations, which can't be interrupted in a middle,i.e. two assignment statements in a row, like:x := y.y := z.can't be interrupted by interpreter and can be seen as a single atomic operation.This implementation fits best for case, when multiple threads populating queue, but only single thread fetching items from it.In given implementation, inserting new items into queue can't block the sender and insertion operation always takes constant time (if we ignore the possible GC interference here).For reading/polling operations queue using a lock mechanism, which indicating that queue currently in the middle of extraction, and therefore, if some thread obtained a lock upon the queue, other threads must wait till one that obtained the lock will finish its operation(s) and release the lock.All operations which may block the sender will answer the default value(s) instead. "
"RBPackageEnvironment","I am a RBBrowserEnvironment on a set of packages or package names.I containt all entities are defined in this packages.(classes and class that have extensions from this packages)Example:(RBBrowserEnvironment new) forPackageNames:{ 'Morphic-Base'}."
"ClyMethodEditorCommand","I a base class for commands which manages the method editor.Subclasses can be executed in context of ClyMetodEditor.Internal Representation and Key Implementation Points.    Instance Variables	methodEditor:		<ClyMethodEditor>"
"IceLocalBranch","I am a local branch. My main difference with remote branches is that I may have a remote tracked branch. This remote tracked branch allows me to calculate my incoming and outgoing commits.  branch incomingCommits.  branch hasIncomingCommits.  branch outgoingCommits.  branch hasOutgoingCommits.I can moreover calculate incoming and outgoing commits to/from a given remote.  branch incomingCommitsFrom: aRemote.  branch hasIncomingCommitsFrom: aRemote.  branch outgoingCommitsTo: aRemote.  branch hasOutgoingCommitsTo: aRemote.Notice that none of these operations fetches the remote, thus the information may not be up to date. You may explicitly fetch before doing these questions.A local branch can also pull from its tracked branch or pull from a given remote.  branch pull.  branch pullFrom: aRemote."
"FFITestStructure","A structure for test purposes"
"SycRenameTempCommand","I am a command to rename temp variable in given method. Internal Representation and Key Implementation Points.    Instance Variables	newName:		<String>"
"AlphaInfiniteForm","Alpha aware InfiniteForm."
"SlotExampleMovieAndPersonTest",""
"ManifestFileSystemTestsCore","This package contains the core tests of Pharo's FileSystem manager. A documentation of this library is available in the Deep Into Pharo book, «Chapter 3: Files with FileSystem»."
"ClySwitchToClassSideCommand","I am a command to switch full browser to the class side mode"
"GLMItemChanged",""
"OSWindowTest","An OSWindowTest is a test class for testing the behavior of OSWindow"
"KMBuffer","I am a buffer of keyboard events. I am checked against key combinations to see if there is a match.I am cleared when the current morph loses focus or when a full match announcement is given."
"EditingState","I store the current state of an editing session. An instance of mine is shared by all TextEditor instances that are created during an editing session managed by a TextMorph (see below for more explanations about editing session). The state data are basically made of an undo/redo manager and of all data needed in order to manage text editing undo and redo (mainly all informations for the current and previous selection intervals).I'm created by a TextEditor at the beginning of an editing session (see TextEditor>>editingStateClass and TextEditor>>editingState). Specializations can be introduced to fit a particular TextEditor subclass need.Editing session:An  editing session starts when a TextMorph is created (precisely, when a TextEditor instance is first assigned to a TextMorph editor instance variable). An editing session ends when a TextMorph is deleted. During an editing session, a TextMorph can make use of a lot of TextEditor instances, one at a time. As an example, each time a TextMorph is resized, its editor is released and a new one that fit the TextMorph physical properties  is created. Another example, when a TextMorph loses the keyboard focus, then its editor could be fully released; it is created again when the TextMorph retrieves the focus.When an editor is created by a TextMorph, the state of the previous TextEditor, stored in its associated EditingState instance, is got and passed to the newly created editor. Thus the editing session remains stable (see TextEditor >> #stateArray and TextMorph >> #installEditorToReplace:). So TextEditor instances are extremely volatile whereas its associated EditingState instance remains during the whole editing session.Instance Variables:   emphasisHere <Array of TextAttribute>   pointBlock <CharacterBlock>   markBlock <CharacterBlock>   startOfTyping <Integer>   previousInterval <Interval>   previousSelection <Text>   undoManager <HistoryIterator>   lastParenLocation <Integer>   mouseDownInterval <Interval>- emphasisHere:   The TextAttributes that are used for the newly entered text- pointBlock:   The CharacterBlock where a selection begins (where the mouse has first pointed)- markBlock:   The CharacterBlock where a selection ends- startOfTyping:   The index of the first character which has been entered during the currently undoable/redoable portion of text (see TextEditor>>#openTypeIn and TextEditor>>#doneTyping)- previousInterval:   Previous interval used for undo/redo actions- previousSelection:   The previously selected text for undo/redo actions- undoManager:   The undo/redo manager- lastParenLocation:   Keep the position of the open parenthesis which corresponds to the last entered close parenthesis- mouseDownInterval:   The position of the first mouse down in the editor"
"YearMonthWeekTest","I am one of several Sunit test Cases intentended to provide complete coverage for the Chronology set of classes as part of the external testing. See DateAndEpochTestCase for a complete list.  tlk.I have no fixtures but do make sure to restore anything I change."
"ListSelectionPresenterTest",""
"GTBytecodeDebuggerHelp","A utility class containing the help for GT BytecodeDebugger."
"SubclassResponsabilityDebugAction","A SubclassResponsabilityDebugAction is a debugging action that can create a method if the debugger was opened as a result of a #subclassResponsibility mesage send."
"GLMBrickLayoutChildrenState",""
"StickynessBugsTest","A StickynessBugz is for mantis #5500 rectangles and ellipses don't act sticky when rotated even when they are..Instance Variables"
"FTVector","I represent a 2D vector of type FT_Vector. I am used to do transformations."
"SDL_MouseButtonDownEvent","SDL2 library structure"
"CmdMenuCommandActivationStrategy","I am a root of command activation hierarchy which supposed to represent commands in kind of menu.I provide information about name, group and position of command inside menu:- menuItemName. If it is not specified I ask command for #defaultMenuItemName.- menuItemOrder- menuGroupMy subclasses provide meaning of concrete menu type. It could be context menu, toolbar menu, halo menu and etc..To build any kind of end user menu my subclasses first build abstract CmdMenu. It represents tree structure of concrete menu implemetation.Concrete menu activations extend abstract menu to delegate item building to underlying commands and groups.Menu groups are represented by subclasses of CmdMenuGroup. They are used as classes to declare activation strategy. Instances are only created during menu building.Groups are containers of command items and other groups.Each group defines #parentGroup on class side. By default it is CmdRootMenuGroup. Subclasses can override it to define deep tree structure.I provide suitable methods to declare activators:	ConcreteMenuCommandActivation byRootGroupItemFor: YourAppContext 	ConcreteMenuCommandActivation byRootGroupItemOrder: aNumber for: YourAppContext	ConcreteMenuCommandActivation byItemOf: menuGroupClass for: YourAppContext	ConcreteMenuCommandActivation byItemOf: menuGroupClass order: aNumber for: YourAppContextLarger order pushes command to the end of menu. Groups are also define order by instance side method #order.Internal Representation and Key Implementation Points.    Instance Variables	menuGroup:		<CmdMenuGroup class>	menuItemName:		<String>	menuItemOrder:		<Number>"
"PharoTutorialTestGo","SUnit tests for tutorial navigation"
"RBBasicLintRuleTest",""
"TonelRepository","I'm a tonel monticello repository"
"RubHoverHighlightSegmentMorph","I am a text segment morph used for highlighting a text segment on mouse over. My default color are the text secondary (light) color.And my default behavior is to delete myself when the mouse focus leaves me."
"SpecTableLayout","A SpecTableLayout is a variant of spec layout that uses TableLayout layout policy."
"SugsCreateClassVarAccessors","I know how to create accessors for a class var"
"ClyUnknownScopeTest",""
"EpRefactoring","I represent a refactoring performed in the system. "
"MetacelloMemberListSpec",""
"MirrorModificationForbidden","This exception is raised when mutating a read-only object using mirror primitives.I am signaled from MirrorPrimitive methods."
"ArgumentNamesTest","SUnit tests for generating argument names"
"GLMPortTest",""
"TestingComposablePresenter","A TestingComposablePresenter is a stupid composable model used to test SpecInterpreter."
"FFILibrary","I'm an util to answer module libraries that can have different names in different platforms. I just implement a double dispatch with platform."
"GTBrowseDebugAction","I am debugging action for sending a unary message to the debugger."
"OSTouchTwoFingersRotationEndEvent","Two fingers had stopped to rotate"
"SugsMenuBuilderTest","SUnit tests for the Smart suggestions menu builder"
"RBRemoveTemporaryVariableTransformationTest",""
"MorphicWindowAdapter","I am the adapter used to bridge a WindowPresenter and a SystemWindow"
"MalBreadthFirstSearchPath","Breadth-first search (BFS) is an algorithm for traversing or searching tree or graph data structures. It starts at the tree root (or some arbitrary node of a graph, sometimes referred to as a `search key') and explores the neighbor nodes first, before moving to the next level neighbours. (source: Wikipedia)"
"FLGlobalSendSerializationTest","SUnit tests for fuel serialization of global sends"
"MCReader","Common superclass for Monticello readers"
"FTMultipleSelection","I define the multiple selection strategy. I allow tables using me to manage multiple selection rows."
"FLGlobalValueCluster","I am a cluster for known objects that belong to Smalltalk global dictionary.For example, Transcript could be serialized and materialized by me."
"FLMultiByteStreamStrategy","I am a strategy for MultiByteBinaryOrTextStream.."
"EpRevertTest",""
"GLMPresentationBoundPort","This is a fancy port that enables us to access the value of a port from outside of a browser. It is bound to a presentation in the sense that it asks the presentation dynamically for the pane. In this way, when a presentation is placed (or copied) in another pane, the value will be dynamically looked up.Instance Variables:	presentation	<GLMPresentation>"
"ClyUnionQuery","I am a union of subqueries.I execute all subqueries and merge result items into single result instance.My subqueries must be a kind of ClyTypedQuery. And I implement union logic to ensure this invariant.During instance creation I try unify all subqueries. And in some cases the result query can be single type query instead of my instance.For example:	ClyUnionQuery with: { 		ClyMessageSenders of: #(do:) from: (ClyClassScope of: Object in: environment). 		ClyMessageSenders of: #(do:) from: (ClyClassScope of: String in: environment). 	} It will return single senders query: 	ClyMessageSenders of: #(do:) from: (ClyClassScope ofAll: {Object. String} in: environment).But in general case the result union query will be return with subset of given queries with merged scope.General query concatination using comma message produced my instances. Previous example can be rewritten as: 	(ClyMessageSenders of: #(do:) from: (ClyClassScope of: Object in: environment))		, (ClyMessageSenders of: #(do:) from: (ClyClassScope of: String in: environment))"
"RubScrolledTextMorphThemerForGLMWhitespaceTheme",""
"SparseLargeTable","Derivated from Stephan Pair's LargeArray, but to hold a sparse table, in which most of the entries are the same default value, it uses some tricks."
"FLHookPrimitiveCluster","I am a cluster for simple objects who define serialization and materialization via hooks on their classes."
"RenrakuSpecialRulesHelp","There are certain special rules with predefined functionality that allows to easily perform complex checks. The subsections of this Book contain references to the rules"
"ClyPackageExtensionScope","I am a scope of packages which shows only objects which packages extend.I see all extended classes and extension methods"
"ClyClassEditorToolMorph","I am a base class for various class editors based on text.My subclasses retrieve particular textual property from the class and initialize text editor with it.My subclasses are activated in context of selected class which I keep in my editingClass variable.Internal Representation and Key Implementation Points.    Instance Variables	editingClass:		<Class>"
"ClyBrowserContext","My subclasses represent the navigation context of the browser, the browser state. They describe the concrete type of selected items together with items itself.My tool is always the browser. And I provide the #browser method to use this fact explicitly.I provide default implementations of how to work with selected items in the Calypso browser model:- selectedItems, returns the actually selected items.- selectedObjects , returns the actual object of selected items.- lastSelectedItem- lastSelectedObject- lastSelectedObjectIn: items, encapsulates the knowledge of what is the last item in the selection.- firstSelectedObjectIn: items- hasSelecteditemsUsers can retrieve actual system which browser navigate:	context systemThere are several operation with browser which can be performed using me:- updateBrowser, it will force the browser to perform full update of navigation data sources- restoreBrowserState, it should be implemented by subclasses whey they should recover browser state which is described by context instance"
"PackageAndClassChooser","I am a widget to select classes and packages from a tree."
"OSTouchThreeFingersSwipeBeginEvent","Three fingers started to swipe"
"GLMBrickBounds",""
"RubPositionChanged","I am raised when the left bounds of the text area are changed"
"ClySubclassScope","I represent scope of all subclasses of my basis classes.  I show all subclasses, their methods and variables"
"RBRefactoringChangeTests",""
"RBArgumentNode","I am a specific variable node for method and block arguments.Parsing a method or block code will just use RBVariableNodes for block/method arguments, until we call doSemanticAnalysis on the method node."
"GLMMorphicFastTreeRenderer","I am a Morphic renderer for a GLMFastTreePresentation.Description--------------------I use a GLMFastTreeDataSource to manage the data of the tree."
"SupplyAnswerTests","A test for supplying answer "
"ExpanderTitleMorph","The titlebar area for and ExpanderMorph. Includes title label and expand/collapse button."
"TextContainer","A TextContainer models the shape of an ownerMorph, possibly occluded by one or more occludingMorphs, and scans this shape to provide a list of rectangles suitable for layout of text.  It does this by displaying the shadow of the ownerMorph in black, and any occludingMorphs in white, on its shadowForm.  It then scans horizontal strips of appropriate height to find unbroken intervals of black, greater than minWidth in extent.  Conputation of the rectangles is done on demand, and results are cached so that text can be redisplayed without having to recompute the rectangles."
"DebugSession","A DebugSession models a debugging session. It contains the interrupted context and process. Its main goal is to handle debugger actions such as restart or stepInto, as well as recompilation of methods. It is the model used as an input to a ui.As it is just a model it does not contain any information related to the ui. For example, it does not know what a selection in the ui is. It is the job of the ui to maintain the selection and call this session with the proper context.To create sessions use the method 'process: aProcess context: aContext'. aContext must be a context belonging to aProcess, and aProcess must be an interrupted process.Instance Variables	name:	interruptedContext: Context	interruptedProcess: Process	errorWasInUIProcess: Boolean	interruptedContextis the context which sent the signal message that eventually raised the exception that invoked the debugger. It can be different from the suspendedContext of the interruptedProcess, which is the top (“hot”) context the interruptedProcess’s context chain.Why interruptedContext is different from the suspendedContext of the interruptedProcess:Because the exception system is implemented in Pharo, the handling of the initial signal (eg in Object>>#halt), all the way to opening a debugger, is itself Pharo code, and exists as activations from suspendedContext to interruptedContext.  The debugger, with help from the exception system, carefully hides this processing from the programmer.  If it did not we would have to wade through many activations before we found where the exception occurred. When a process is interrupted by control period things are different.  Here, another process handles opening the debugger and suspendedContext and interruptedContext are the same."
"ClyTableColumn","I represent fast table column which responsible for cell creation: 	column createCellFor: aDataSourceItem in: itemsViewI use block to set up column specific cell properties. Block expects two arguments: cell and item. It can modify cell morph in any possible way. But usually users wants only label for cell. I provide few methods to simplify such cases:- column displayItemName. It will put string label into cell with given item name.- displayItemPropertyBy: blockWithItem. It will use given block to retrieve string from item (or any morph) as cell label.  Internal Representation and Key Implementation Points.    Instance Variables	displayBlock:		<BlockClosure>	two argument block"
"IceLocalRepositoryMissing","The repository code directory does not exist, maybe because the image was moved. Default action is to clone the repository again, but signal an error and allow for other components to react accordingly."
"MetacelloRepositoriesSpecTestCase",""
"ClyUpdateBrowserCommand","I am a command to force full update of all browser views"
"WindowDeActivated","This announcement is emitted when the top window switches from ""this"" window to another. The new window will announce WindowActivated, while the old will announce this annoucnement."
"AnnouncementSetWithExclusions","I am an AnnouncementSet that explicitely does not handle a number of exclusion Announcements.You could define me by #- message:	announcer when: Announcement - ValueChanged do: [...].	announcer when: Announcement - ValueChanged - ValueAdded do: [...].	announcer when: ValueAdded, ValueRemoved - ValueAdded Internal Representation and Key Implementation Points.    Instance Variables	exclusions:		<OrderedCollection>"
"ZnEndianessReadWriteStream","I am a stream decorator that knows how to read and write little endian numbers from my underlying stream."
"ManifestFlashbackDecompiler","Flashback is a Decompiler for Pharo code.My job is to decompile a compiledMethod to get valid Abstract Syntax Tree (AST)."
"OSTextInputEvent","i am delivered when user enters some text"
"PluggableCanvas","An abstract canvas which modifies the behavior of an underlying canvas in some way.  Subclasses should implement apply:, which takes a one argument block and an actual canvas to draw on.  See apply: for the specific definition."
"FileAlreadyExistsException","I am an exception that notifies that a file already exists."
"False","False defines the behavior of its single instance, false -- logical negation. Notice how the truth-value checks become direct message sends, without the need for explicit testing.Be aware however that most of these methods are not sent as real messages in normal use. Most are inline coded by the compiler as test and jump bytecodes - avoiding the overhead of the full message sends. So simply redefining these methods here will have no effect."
"RBRefactoryDefinitionChange","I am the baseclass for a ""class definition change"", a change that will create a class or modify the definition of an existing class.I hold the class definition string and a controller used by the compiler when compiling the class definition for notifying about thecompilation result. My subclass define the kind of class definition I can add, a class, a metaclass a trait or a class trait.My instance variable ""definedClass"" is the new class object."
"OmTimeStampSuffixStrategyTest","An OmTimeStampSuffixStrategyTest is a test class for testing the behavior of OmTimeStampSuffixStrategy"
"IceTipErrorDialog","I'm an error dialog that is used to show generic errors to users.This is to enhance the user experience of using iceberg, since exceptions can be sometimes intrusive or aggresive.My model is an exception that I'll freeze for further debugging.(IceTipErrorDialog on: anError) openDialogWithSpec"
"RubTextSelectionColor",""
"OSSDL2GenericRenderer","My instances implement OSWindowGenericRenderer interface by wrapping a SDL2 renderer."
"ClyScopeExampleTest",""
"AsciiCharset","This class defines the attributes of the ASCII character set.  It's here to be used while boostrapping the image; eventually, it will be replaced by theUnicode character set.Character objects delegate behaviour to one of the  character sets AsciiCharSet, Latin1, or Unicode. "
"ClyInvertMethodVisibilityHierarchyCommand","I am a command to invert hierarhcy in the method visibility class list.(it is shown when user expands first item in the method groups pane)"
"SpecStubTextView","Only stub object, no real view is displayed."
"IceTipTreeOutlineDataSource","Description--------------------I'm a tree datasource to generate an Outline component.My roots are displayed as section and not as part of the tree."
"SpecStubMenuItemView","Only stub object, no real view is displayed."
"MetacelloMCVersionSpecLoader",""
"RBMethodProtocolTransformation","I am responsible for changing the protocol (or category) of a method. If the protocol does not exist in the class protocols list, the transformation will create it automatically.Usage: | transformation |transformation := (RBMethodProtocolTransformation				protocol: 'transforming'				inMethod: #someMethod				inClass: #RBDummyEmptyClass)				transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- the method exists."
"IceGithubRepositoryType","I resolve Github repositories"
"FLObsolete","I am an error produced during serialization, signaled when trying to serialize an obsolete class as global. It is a prevention, because such class is lekely to be absent during materialization."
"RBVariableTypeTest",""
"GTRawObjectVariablesBrowser","This is a helper browser for the Raw view in the GTInspector. It provides an overview of the slots and it offers an evaluator."
"GTInspectorSlotNode","I am a variable node for representing the slots of an object. I used the name of a slot as a key. I extract the value from the host object every time #rawValue is called."
"ClyRawItemCursorTest",""
"MorphTreeTransformMorph","A custom transform morph for a morphic based tree"
"CmdShortcutActivation","I describe how access and execute command using given shortcut.Add me to commands using:	YourCommand>>yourApplicationShortcutActivation		<classAnnotation>		^CmdShortcutCommandActivation by: $y meta for: YourAppContextI also define standard shortcuts on class side for rename and remove commands:- renamingFor: aToolContext- removalFor: aToolContextIn addition I add to the settings browser the root group ""Shortcuts"" with all my registered instances.So user can redefine default values in settings browser. I use class annotation redefinition mehanizm to support it. To reset all redefined values evaluate following expression:	CmdShortcutCommandActivation revertRedefinedInstances. Internal Representation and Key Implementation Points.    Instance Variables	keyCombination:		<KKKeyCombination>"
"STONWriterError","STONWriterError is the error/exception signalled by STONWriter when illegal/incorrect input is seen. "
"ClySortBrowserItemFunction","I implement sorting of ClyBrowserItem instances by their actual objects.And to sort actual objects I include another sort function in the variable actualObjectSortFunction.To create my instances use following script:	ClySortBrowserItemFunction with: actualObjectSortFunction	Or simply convert any sort function using: 	aSortFuntion forBrowserItems			 Internal Representation and Key Implementation Points.    Instance Variables	actualObjectSortFunction:		<SortFunction>"
"OSWindowGestureEventHandler","I am the handler for the gestures.As you can see instead of using #visitTouchPointerUpEvent: anEvent you have to use #visitTouchActionPointerUpEvent: anEvent"
"ClyExtendingPackagesQueryTest",""
"RFSelectorReification","I am the selector of a message send or method"
"TonelMock","Description--------------------I am a simple Mock for Tonel export test"
"KMPartialMatch","A KMPartialMatch is an announcement raised when a partial match is completed"
"KeyedTree","Provides path based access to elements contained in the receiver and any subtrees.Example:(KeyedTree new	at: 1 put: 'One';	at: 2 put: 'Two';	at: 'Tree' put: (KeyedTree new					at: $a put: 'Tree-A';					at: $b put: 'Tree-B';					yourself);	yourself) atPath: #('Tree' $b)"
"ClyShowOverriddenMethodsCommand","I am a command to show all methods which are overridden by my selected methods"
"RBNullFormatter","A simple null formatter that just delegates  to source code and is not good when nodes are reflectively built.Will be replaced by RBSimpleFormatter"
"SycSilentlyRemoveMethodStrategy","I am simple perform method remove operation without any extra logic"
"TestCaseEnded","This event is announced when testing a test case ends."
"GTSpotterIterator",""
"GLMRubricTextPresentation","A presentation that displays text using Rubric."
"ExampleForTest111","An example class at level 3 (indirectly below Object) used for testing class hierarchy"
"GLMSelectCurrentLine","I am event indicating to the renderer to select the entire line containing the cursor."
"OCOptimizedBlockScope","In Smalltalk, methods like ifTrue: are inlined an there is no Block for the arguments of these message sends.To be consistent, these blocks need nevertheless a scope."
"NNavDirectionSibling","I'm the one who knows how to navigate in an horizontal way visiting node in the same level statin from left to right "
"IceTipRepairAction","I'm a repair option.Repositories can be broken in several ways. My children will describe them and take the actions needed to perform the re-alignment of an image with its repository."
"BoundedGradientFillStyle","Gradient fillstyle that draws with optional extent."
"GLMPanelMorph","We subclass panel morph to improve performance of pane color adaptation and reduce amount of layouts by checking if panel is in the world or not"
"DAPackageItemDiffNode","A PDPackageNode is used to display a package diff in a tree."
"FLPointCluster","FLPointCluster is an optional class that optimizes Point instances, since there are a lot of instances in the system, it makes sense to optimize them. We take advantage of bytecode optimizations done by Pharo for messages like #@, #x and #y. In addition, we avoid the overhead of class reshape, etc. "
"JISX0208","This class represents the domestic character encoding called JIS X 0208 used for Japanese."
"EpGenericRefactoring","I represent a generic refactoring, which can be reconstructed via it's #storeString."
"GLMTreeMorphNodeModel",""
"MalHalNode",""
"GTStepToBytecodeDebugAction","I am a debugging action for stepping to a selected bytecode."
"ClyExpectedFailureMethodGroupProviderTest",""
"TarArchive","This is a kind of archive that uses the TAR format (popular in Unix). It is here as a placeholder."
"ButtonModel","This is deprecated class because the original class ButtonModel was renamed to ButtonPresenter. You should stop to use this class and modify your code to use ButtonPresenter."
"RxsRange","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--I represent a range of characters as appear in character classes such as	[a-ZA-Z0-9].I appear in a syntax tree only as an element of RxsCharSet.Instance Variables:	first	<Character>	last	<Character>"
"CmdDeepChildMenuGroupStub",""
"RubCancelEditRequested","I am raised when edits are cancelled in the text area"
"ClyUndeclaredMethodsQuery","I return all methods which use undeclared variables"
"HistoryIterator","A HistoryIterator holds an UndoRedoGroup in order to store an history of commands with the possibility of undoing and redoing. The iterator cursor is represented by the index inst var. Index always contains the position of the command that can be currently undone. So, undo decrease index and redo increase index. When a new record is stored, then, index contains the newly added record position.See HistoryIteratorTest for examples.Instance Variables	index:		<Integer>	maxSize:		<Integer>	plugged:		<Boolean>	recorder:		<UndoRedoGroup>index	- the iterator cursormaxSize	- the maximum number of records that can be added in the root group.plugged	- if false, then adding of command is not allowed. Useful to prevent bad history recording recurssions (record while undoing or redoing).recorder	- The root of the history tree which records undo/redo commands"
"GLMTransmissionTest",""
"MOPTraitTest",""
"FTFilterFunctionWithAction","I am a Filter widget that also have an action button.Description-------------------------------------------------I am use as a FilterFunction but I also have a Button. I am use by FTTableMorph.Public API and Key Messages-------------------------------------------------- #table: aTableMorph action: aBlock named: aString	is my constructor. The block is the action to be executed by the button and the string is the name of the button.	Internal Representation and Key Implementation Points.-------------------------------------------------    Instance Variables	actionBlock:		I am a block that need to be executed when the user press the button	actionButton:		I am the button of the widgetThe action block can takes 3 parameters:- The filtered data source- The pattern on the filter field - The selected element on the table"
"PreorderGuide","I traverse the filesystem in depth-first pre order. Given this hierarchy:alpha	beta	gammadelta	epsilonI would visit the nodes in the following order: alpha, beta, gamma, delta, epsilon.I use my work instance variable as a stack. I push nodes to be visited and visit them in reverse order."
"AbsolutePathStoredSetting","I am responsible for storing information about AbsolutePath objects."
"HelpOnHelp","Welcome to Pharo Smalltalk Help System"
"GTSpotterStepBreadcrumbItem",""
"LGitExternalEnumerationInt32",""
"ValueRemoved","A ValueRemoved  is an announcement raised when an item (or a collection of items) was removed from CollectionValueHolder."
"FLWeakClassMock","Test mock for a weak class"
"IceTipTreeSearchStrategy","I handle the case that all the items in the trees used in icebergare wrapped in FTBasicItem. "
"RFVariableRead","I model the read variables. I have all the information needed to do the read when send #value"
"DynamicMessageImplementor","Called in the debugger to generate methods when you click on the create button"
"CursorWithAlpha","A 32-bit ARGB Cursor of arbitrary extent (some platforms may limit the size). Compositing assumes alpha is pre-multiplied."
"IceTipPackageFilter","I'm a filter for packages, to be used in a package list.currently I'm used to add filters in IceTipWorkingCopyBrowser."
"GLMFinderMorphicTest",""
"CatalogProvider","I'm a provider for projects in the pharo catalog. Pharo projects are represented as CatalogProject instances. Usually  I fetch projects from http://catalog.pharo.org/catalog/json and create CatalogProject from such description. Use my default instance, I will cache the catalog data for 24 hours.	CatalogProvider default projects."
"IRStoreInstVar","store inst var"
"ReflectivitySourceCodeAgroupation","I'm an agroupation of ReflectivityCodeMorph"
"ChangesLog","I represent the changes file and give access to him.  If you want to log a change, look at my #logChange: method.I have a default instance that is hearing SystemAnnouncements and logging the change logs in there.But you can have your own instance and log whatever you want."
"OmSessionStoreUpdated","I am announced when a OmSessionStore updated its current #store."
"TIndexAccess","A trait for test purposes"
"OSNullWindowHandle","i am a handle for null window , created using OSNullWindowDriver."
"OCNewCompilerWithChangesFunctionalTests",""
"AthensTextRenderer","This is a text renderer, which pipelining a text command(s) , produced by AthensTextComposerinto a concrete calls to canvas.Its using a glyph renderer instance(s) to draw separate font glyphs on a surface in a most suitable/efficientmanner for given Athens surface."
"MorphicContainerAdapter","I am the adapter providing the correct container class: PanelMorph"
"SelectVisitorTest","SUnit tests for class SelectVistor"
"AthensQuartzSurface","The Quartz surface is used to render cairo graphics targeting the Apple OS X Quartz rendering system."
"RBASTClassesHelp","Book from RBProgramNode and subclasses."
"MCPermissionDenied","I am signalled when a repositroy cannot save or access a version."
"GLMSystemWindow","This is the window in which the Glamour browsers are rendered in Morphic."
"ClyExpectedFailedTestMethodsQueryTest",""
"RBNamespace2",""
"CategoryAdded","This announcement will be emited when adding a category using:=> SystemOrganizer >> addCategory:"
"MenuMorph","Instance variables:	defaultTarget 	<Object>				The default target for creating menu items	selectedItem		<MenuItemMorph> 	The currently selected item in the receiver	stayUp 			<Boolean>			True if the receiver should stay up after clicks	popUpOwner 	<MenuItemMorph>	The menu item that automatically invoked the receiver, if any.	activeSubMenu 	<MenuMorph>		The currently active submenu."
"LGitPackBuilder",""
"ClyRawQueryResultTest",""
"OutOfMemory","OutOfMemory is signaled when an allocation fails due to not having enough memory. Its default action signals the low-space semaphore.Originally suggested by A. Raab."
"FTPluggableIconListMorphAdaptor","I'm an adaptor to adapt a PluggableIconListMorph into a FastTable. I implement all required methods, but transform them to serve a table through a FTDataSource."
"ManifestBaselineOfAthens","I manage the loading of Athens project for the Pharo bootstrap."
"Object","Object is the root class for almost all of the other classes in the class hierarchy. The exceptions are ProtoObject (the superclass of Object) and its subclasses.Class Object provides default behavior common to all normal objects, such as access, copying, comparison, error handling, message sending, and reflection. Also utility messages that all objects should respond to are defined here.Object has no instance variables, nor should any be added. This is due to several classes of objects that inherit from Object that have special implementations (SmallInteger and UndefinedObject for example) or the VM knows about and depends on the structure and layout of certain standard classes.Class Variables:	DependentsFields		an IdentityDictionary		Provides a virtual 'dependents' field so that any object may have one		or more dependent views, synchronized by the changed:/update: protocol.		Note that class Model has a real slot for its dependents, and overrides		the associated protocol with more efficient implementations.Because Object is the root of the inheritance tree, methods are often defined in Object to give all objects special behaviors needed by certain subsystems or applications, or to respond to certain general test messages such as isMorph.Miscellanous Discussions.About at: index accepting float and not only integers This behavior is also free in the sense that the failure code is only invoked when theprimitive fails and so adds nothing to the cost of successful accesses,which are the high dynamic frequency operation.  It will also show up underprofiling if one is concerned about efficiency, and so isn't a hidden cost.It is also in keeping with Smalltalk's mixed mode/arbitrary precisionimplicit coercion number system that one *can* use fractions or floats asindices.  Stripping out coercions like this will make the system more brittle.  So please do *not* remove this ""hack"".  I think it's a feature and a useful  one.Can you give me an example that demonstrates the usefulness of thisfeature?| a r |a := Array new: 10 withAll: 0.r := Random new.100 timesRepeat: [| v | v := r next * 10 + 1. a at: v put: (a at: v) + 1].ai.e. I didn't have to provide an explicit rounding step.  That's useful.  But in general anywhere where an index is derived by some calculation not having to provide the rounding step could be useful/helpful/more concise.  e.g. (n roundTo: 0.1) * 10 vs ((n roundTo: 0.1) * 10) asInteger.Some thought went into the original choice.  It is not a hack but there by intent.  The integers are simply a subset of the reals and forcing the programmer to use them is favouring the machine above the programmer.But I think you should justify getting rid of it rather than my having to justify keeping it.  Getting rid of it risks breaking code.  If it is there but does not harm then why get rid of it?best Eliot Miranda "
"CairoPNGPaint","I am a surface paint with lazy initialization scheme, that i loading image from .png filethe first time i will be used.<Do not use me, because i am really Cairo specific>"
"STONJSONTests","STONJSONTests contains unit tests for the JSON functionality available in STON."
"IceTipSelectRemotePresenter",""
"SugsFormatCode","I know how to format the code"
"SettingsStonReaderTest","A SettingsStonReaderTest is a test class for testing the behavior of SettingsStonReader"
"SycRefactoringPreview","I am refactoring preview which is created on the instance of CmdCommand which provide refactorings.Such commands should implemetn method: - asRefactoringsIt should return collection of refactorings to complete the command.I was copied from the ChangesBrowser.But I add extra widget to the view to allow scope refactorings. Scope instances should understand two messages: - description to be represented in drop down list.- asRBEnvironment to restrict refactoring instances using RBBrowserEnvironment logic.Currently only Calypso provide such scopes. Also in contrast to ChangesBrowser I do not allow show arbitrary changes. I should always be created on the command:	SycRefactoringPreview for: aCommand scopes: scopes.Internal Representation and Key Implementation Points.    Instance Variables	changes:		<Object>	changesTree:		<Object>	command:		<CmdCommand>	scopeDropList:		<Object>	scopes:		<Collection>	textArea:		<Object>    Implementation Points"
"DAExtensionDependency","A PDExtensionDependency is an extension dependency between two packages.Instance Variables	selector:		the selector 	method : 		the CompiledMethod		"
"ClyFFIMethodQuery","I return all FFI methods from my scope"
"ProperMethodCategorizationTest","Tests to enforce proper categorization "
"OCCompilerDynamicASTPluginTest",""
"ClyAllVariablesQueryTest",""
"EUCTextConverter","Text converter for Extended Unix Character.  This is an abstract class.  The CJK variations are implemented as subclasses."
"IRPushTemp","push temp"
"ManifestCollectionsAtomic","Package for thread-safe collections with atomic operations"
"ProtocolClientError","Abstract super class for protocol clients	protocolInstance		reference to the protocol client throughing the exception. Exception handlers can access the client in order close, respond or whatever may be appropriate"
"SpecStubTransferAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"RootEyeElement","RootEyeElement is used in the tree/explorer view for the initial, top root element. It shows a different label."
"ResumableTestFailure","A ResumableTestFailure triggers a TestFailure, but lets execution of the TestCase continue. this is useful when iterating through collections, and #assert: ing on each element. in combination with methods like testcase>>#assert:description:, this lets you run through a whole collection and note which tests pass.here''s an example:		(1 to: 30) do: [ :each |		self assert: each odd description: each printString, ' is even' resumable: true]for each element where #odd returns <false>, the element will be printed to the Transcript. "
"RBBlockLintRule","I am a special kind of rule where the verification is specified using a block. The methods checkClass: and checkMethods are the hooks to specify such verifications."
"SycInsertSuperclassCommand","I am a command to insert new superclass into my target class.I create new class using supeclass of my target class. And I replace superclass of target class with new created class"
"ManifestSpecTests","Package for SUnit tests related to Spec UI framework"
"RBAddAccessorsForClassTransformation","Adds accessors (getters and setters) for all the variables in a class, if each of them do not exist.Usage:transformation := (RBAddAccessorsForClassTransformation	className: #RBVariableTransformation)	transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:overridden from RBAddVariableAccessorRefactoring"
"IceTipEditRepositoryCommand","Command that opens a dialog to edit a repository meta-data"
"GTTemporaryPreDebugChangeDebuggerAction","This action adds the possibility of opening a GTDebugger from the PreDebugWindow."
"RBComment","A RBComment represents a text comment associated to an AST node.A RBComment is not an AST-Node (not subclass of program node). But its instance are just wrapping the comment text and (start-) position.Due to the way the parser handles comments, the RBComment is assigned to its preceding (real) AST node, although we often write the comment prior to a statement.For example:foo""method comment""self firstStatement.""comment about the return""^ selfThe ""method comment"" is assigned to the method node, the ""comment about the return"" is assignedto the ""self firstStatement"" node!instance variables	contents 	<String> the comment text	start	<Number> (start-) position within the method source"
"GLMWrapper","The GLMWrapper is a browser that has only one pane and that is typically used as a placeholder.The pane takes only entity as input."
"GLMPresentationTest",""
"SycRealizeClassCommand","I am a command to generate all unimplemented methods of the given classes"
"DashedBorder","Border style supporting dashed lines of configurable patterns and colours."
"RBRemoveAssignmentTransformationTest",""
"FLBadSignature","I represent an error produced during materialization when the serialized signature doesn't match the materializer's signature (accessible via FLMaterializer>>signature). A signature is a byte prefix that should prefix a well-serialized stream."
"GTSUnitExampleWithProblematicSetUpTest","I am not a test! I provide usage examples for the SUnit debugger."
"TShowInTaskbar","TShowInTaskbar is a trait to enable any morph to be shown in the taskbar. It implements the required parts so that the taskbar can build a button showing the given morph. A morph implementing this trait must implement the methods located under ""taskbar-required"".Adding a menu when the taskbarbutton is right clicked can be done by implemenenting  #taskbarButtonMenu: to return a custom menu.For mouseOver action, #taskbarCanShowThumbnail must be implemented to return true, and the behaviour when the mouse enters and leaves the taskbar button in their respective methods."
"DynamicTopToBottomColumnsLayout","I am the layout for which you define the number of columns to store you presenters and set them from top to bottom in these rows."
"PSMCPatchMorph","I'm a Monticello tool based on polymorph used to browse diffs.Activate me with the setting named 'Use Polymorph difference tools'."
"ChangeRecord","A ChangeRecord represents a change recorded on a file in fileOut format.It includes a type (more needs to be done here), and additional informationfor certain types such as method defs which need class and category."
"BaseStreamTest",""
"ClyClass","I represent the type of any kind of classes or traits.I am introduced to abstract actual class implementation where in live system it would be Behavior or TraitBehavior.So when Calypso build browser items for classes or traits their type is supposed to be me.Look at class references to discover all compatible class definitions"
"IceSortingStrategy","I am a sorting strategy taking as parameter a collection and returning the collection sorted. The user can customize the sorting to get, for example, the modified entities first or last. Example	IceSortingStrategy new first: #modified; last: #notLoaded; sort: aCollection Internal Representation and Key Implementation Points.    Instance Variables	first:		<aSymbol>		Represent the entities to display first.	last:		<aSymbol>		Represent the entities to display last."
"ClyAsyncQueryTest",""
"NullPharoIssue","I am an instance of the Null Object Pattern [1] so that users of PharoIssue do not have to put nil checks everywhere.1. http://en.wikipedia.org/wiki/Null_Object_pattern"
"ClassRecategorized","This announcement will be raised when:- we set a category to a class (see 'Class >>category:')- we set a category to a Trait (see Trait>>category:)It corresponds to the RecategorizedEvent"
"SemaphoreTest","A SemaphoreTest is sunit test for simple and multiEx semaphoresInstance Variables none; does not have common test fixture accross all tests (because its testing differenct sorts of semaphores (could refactor into muliple testcases if there were more test conditions."
"IndentingListItemMorph","An IndentingListItemMorph is a StringMorph that draws itself with an optional toggle at its left, as part of the display of the SimpleHierarchicalListMorph.It will also display lines around the toggle depending on UITheme settingsInstance variables:indentLevel <SmallInteger> 	the indent level, from 0 at the root and increasing by 1 at each level of the hierarchy.isExpanded <Boolean>		true if this item is expanded (showing its children)complexContents <ListItemWrapper>	an adapter wrapping my represented item that can answer its children, etc.	firstChild <IndentingListItemMorph|nil>	my first child, or nil if none	container <SimpleHierarchicalListMorph>	my container	nextSibling <IndentingListItemMorph|nil>	the next item in the linked list of siblings, or nil if none.Contributed by Bob Arning as part of the ObjectExplorer package.Don't blame him if it's not perfect.  We wanted to get it out for people to play with."
"OCReadOnlyVMWarning","I get signalled when the compiler attempts to set a literal as read-only while the VM does not support read-only objects."
"DisplayMedium","I am a display object which can both paint myself on a medium (displayOn: messages), and can act as a medium myself. My chief subclass is Form."
"PointTest","SUnit tests for class Point"
"ZnImageExampleDelegateTests",""
"LGitExternalStructureFieldParser",""
"ChainedSortFunction","I add to my parent the idea of a ""next"" function to use when two objects are equal by my primary sort function.UsageSortFunctions can be chained together in primary, secondary, tertiary, etc order using the comma method. Consider a sequence of customer objects, where each customer object responds to the messages firstName, lastName, and age. If we want to sort them lastName first, then firstName, and finally oldest first, we would use an expression like:customers sort: #lastName ascending, #firstName ascending, #age descendingAs noted in my super's comment, unary symbols or single arg blocks can be used. One can omit the the ascending methods on arguments (not the receiver), it will default blocks or symbols to be ascending if none is specified. In other words, the above expression could be simplified slightly ascustomers sort: #lastName ascending, #firstName, #age descending(note the missing ascending on the #firstName argument)Instance Variables	baseSortFunction	<SortFunction> the primary SortFunction to collate given objects	next	Function	<SortFunction>	the next SortFunction to evaluate in the event primary collation results are equal values"
"TSequencedConcatenationTest","A trait for test purposes"
"ClyFullVisibilityLevel","I represent visibility of all inherited methods.I limit inheritance up to Object to avoid less interesting methods. So Object and ProtoObject methods are not shown when you activate me.I create extra scope using #asInheritedScope message."
"ClyRemoveMethodGroupCommand","I am a command to remove method group with containing methods"
"ManifestCollectionsUnordered","I contain collections that do not care about the order of the elements they contain.Main classes: Bag, Dictionary, Matrix, Set"
"FFIExternalObject","I representing an external object of one kind, provided by some external library/function.My instance holds a handle, which is used to identify the external object when i am passed as an argument, or when i'm used as a return type in function signature.A typical usage of me is to create a subclass, and then use that subclass name directly in function signatures:FFIExternalObject subclass: #MyExternalObjectnewObj := MyExternalObject new.MyExternalObject class>>newObject ^ self ffiCall: #(MyExternalObject someExternalFunction() )here, assume that someExternalFunction() returns some handle (or pointer) to some opaque external structure. By putting ==FFIExternalObject== subclass (==MyExternalObject==) as a return type into the function signature, we are telling the code generator to automatically convert the return value into an instance of a given class and initialize its handle to the value returned by the function.When used as argument type, the value, which is used to pass to the external function is value held in my handle instance variable:MyExternalObject>>compareWith: anotherExternalObject   ^ self ffiCall: #( void compare ( self , MyExternalObject anotherExternalObject))The main advantage of using ==FFIExternalObject== subclass as a type name for arguments is that it provides type safety by checking the incoming argument, that it is an instance of your class, and nothing else. If not, the primitive will fail without calling the external function.IMPORTANT: My instances represent a pointer in the C heap. If you need to represent an opaque type (https://en.wikipedia.org/wiki/Opaque_data_type), check ==FFIOpaqueObject==."
"ClyFFIMethodsTest",""
"SmallDictionary","Description--------------------------SmallDictionary is a special dictionary optimized for small collections. In addition to the normal dictionary protocol, it also supports an #empty message which ""empties"" the collection but may hang on to the original elements (so it could collect garbage). Without #empty we would either need to create a new dictionary or explicitly remove everything from the dictionary. Both of these take more time and #empty.Be careful, I cannot have *nil* as key. Public API and Key Messages--------------------------- #at: aKey put: aValue / #at: aKey ifAbsentPut: aValue 		allow to add an element.  - #at: aKey / #at: aKey ifAbsent: aBlock / #at: aKey ifPresent: aBlock ifAbsent: aBlock 		allow to access my values.- #keysDo: aBlock / #valuesDo: aBlock / #associationsDo: 		allow to iterate on me effectivelyExamples --------------------------To create a dictiony with indexes as key: 	SmallDictionary withAll: #(7 3 1 3)   		""returns:  a SmallDictionaryDictionary(1->7 2->3 3->1 4->3 ""To use Objects as key (here symbols): 	colors := SmallDictionary new 				at: #yellow put: Color yellow; 				at: #blue put: Color blue;				at: #red put: Color red;				yourself.					colors at: #yellow. 	""returns:  Color yellow""	colors keys          		""returns: a Set(#blue #yellow #red)""	colors values     		""returns:  {Color blue. Color yellow. Color red}""	colors empty 	""a SmallDictionary()""Internal Representation and Key Implementation Points.--------------------------    Instance Variables	keys:		<Array>		Array of keys (we don't use Associations for our key value pairs)	size:			<Integer>	Size of the dictionary	values:		<Array>		Array of our values    Implementation Points"
"MalTarjanNode","Node type used by the MalTarjan algorithm.Edges are not representated as full objects. We just keep a list of next nodes (following described directed edges)."
"ClySortSystemItemFunctionTest",""
"PrimitiveError","A PrimitiveError is used to answer a primitive failure code that has an associated operating system/library error.Instance Variables	errorName:		<Symbol>	errorCode:		<Integer>errorName	- typically #'operating system error'errorCode	- the value of the error, a signed 64-bit value, a representation imposed by the VM; specific clients must map this error value into an unsigned value as appropriate if requiredTypical usage is shown in the ficticious method below:primitiveOperation	<primitive: 'primitiveOperation' module: 'APlugin' error: error>	^(error isPrimitiveError)		ifTrue: [ self processErrorCode: error errorCode ]		ifFalse: [ self primitiveFailed ]."
"IceInvalidProject","I represent a project that cannot be read from the history.I fetch most of my properties from the current project that may be a project or an unborn project."
"ZnInvalidUTF8","I am ZnInvalidUTF8.I am a ZnCharacterEncodingError.I am an Error.I signal when something goes wrong while encoding or decoding UTF8.I can be used to ignore wrongly encoded input by resuming me. By default a question mark will be inserted for each problem and decoding will continue. This is not recommended, as faulty input should not be accepted.Part of Zinc HTTP Components"
"IceTipWorkingCopyDiffModel","I'm a diff model that represents a diff between the HEAD commit and the image working copy."
"OSEvent","I am a basic class of OSEvent hierarchy.The specific events are coming from operating system and converted to corresponding OSEvent subinstance(s) in order to handle them.Events can implement a default action, which will be performed after dispatch on event handling,unless they are suppressed using #suppressDefaultAction message."
"MetacelloVersionDiffReport",""
"GTSpotterRecorderSearchFinishedEvent","A GTSpotterRecorderSearchFinishedEvent is triggered when spotter finished a search and displayed all the results. This event stores the size of the query."
"TCopyPartOfSequenceable","A trait for test purposes"
"HEAbstractExported","Hermes Files contains one or more exported elements in it.Each exported element is a subclass of myself.I basically implements the logic to compare two elementsThe comparison and the hash code is implemented using the instance variables in the objects.In my class side I have the method #readFrom: aHermesStreamthat is used to read any of my subclasses.Each of my subclasses knows how to read itself from the stream."
"FLAnalyzer","I am responsible of traversing the graph of references starting from a root object. I will produce a clusterization which the serializer will store on a stream.An example of use is:	(FLAnalyzer newDefault 		clusterizationOf: (Array with: 1@2 with: 3@4))		clusters."
"GLMPortEvent","A GLMPortEvent is passed to the parent pane every time a Port changes.Instance Variables	oldValue:		<Object>	port:		Port	transmission:		Transmission	transmissionContext:	TransmissionContext"
"IceTipDeleteBranchCommand","Command that deletes the selected branch"
"GoferVersionReference","A GoferVersionReference refers to a specific version of a Monticello package."
"MutexTest","SUnit tests for class  Mutex"
"UUID","I am UUID.I am a ByteArray.An RFC4122 Universally Unique Identifier (UUID) is an opaque 128-bit number that can be used for identification purposes. Concretely, a UUID is a 16 element byte array.The intent of UUIDs is to enable distributed systems to uniquely identify information without significant central coordination. In this context the word unique should be taken to mean ""practically unique"" rather than ""guaranteed unique"".Usage:	UUID new.	Whenever you create a new UUID, the shared, default UUIDGenerator will be used to generate a new, unique UUID.See UUIDGenerator for extensive documentation on how UUIDs are actually generated.UUIDs have a standard string representation, like this:	3ccb64f1-aa04-0d00-bbbc-259a0f871399	The representation consists of 32 lowercase hexadecimal digits, displayed in five groups separated by hyphens, in the form 8-4-4-4-12 for a total of 36 characters (32 alphanumeric characters and four hyphens).My #printOn: #printString and #asString methods produce this representation.  My class' #fromString: or instance #readFrom: parse it.Alternatively, my base 36 number representation is  the shortest representation still being able to work as filenames etc since it does not depend on case nor characters that might cause problems, and it is reasonably short.See #asString36 and my class' #fromString36:UUIDs are basically opaque (contain no interesting content) and should be treated as indivisable values. Do not use parts of them, since these will most probably no longer be unique.See also:  http://en.wikipedia.org/wiki/UUID  https://tools.ietf.org/html/rfc4122"
"SequenceableCollection","I am an abstract superclass for collections that have a well-defined order associated with their elements. Thus each element is externally-named by integers referred to as indices."
"MetacelloProjectRegistrationVersionInfo",""
"GLMMorphicDiffRenderer",""
"LGitDirectionEnum",""
"IceGitHubAPI","I represent an access point to the GitHub API. I provide different high level abstractions to interact with GitHub, following the speciphications you can find here: https://developer.github.com/v3/"
"OkToolbar","An OkCancelToolbar is a model for a basic Ok toolbar"
"TaskbarMorph","Themed synchronous taskbar (not using #step to poll windows). The buttons provide visual feedback as to whether a window is active or minimised (collapsed) plus a popup menu with options to restore, minimise, maximise and close the associated window. Optional (via settings) preview of the window while mouse is over a taskbar button."
"StepMessage","I'm a MorphicAlarm to be queued in WorldState list of stepping actions. I hold the stepTime (refresh period) of my receiver / Morph (if nil, the #stepTime value of my receiver is used).See - WordState>>runLocalStepMethodsIn:   (where the stepping actions are sent).- WorldState>>startStepping:at:selector:arguments:stepTime:  (to queue a new StepMessage)Example:MorphicUIManager currentWorld        startStepping: (Morph new openInWorld)        at: Time millisecondClockValue        selector: #toggleVisible        arguments: nil        stepTime: 500."
"RBRemoveMessageSendTransformationTest",""
"EpFilter","My instances decide if an OmEntry is accepted."
"GLMExpanderTest",""
"MalDijkstraEdge",""
"OmStoreFactoryTest","An OmNullStoreTest is a test class for testing the behavior of OmNullStore"
"GLMPopupBrickLayout","I am a popup layout.My main responsibility is to position popup's elements and align them.Popup layout can be:- downward (trigger brick is on top following by content below, default)- upward (trigger brick is beneath the content)Additionally, popup can be aligned differently- left-to-right (trigger and content are aligned to the right within bounding box, default)- right-to-left (trigger and content are aligned to the left within bounding box)"
"MCGitlabRepositoryTest",""
"LGitBlameOptions",""
"MCChangeSelector","Monticello selector for changes."
"GlobalIdentifierTest","A GlobalIdentifierTest is a test class for testing the behavior of GlobalIdentifier"
"MCDataStreamTest",""
"TDictionaryPrintingTest","A trait for test purposes"
"ClyAllClassesQueryTest",""
"ClyCriticDecorator","I am a browser too decorator which adds extra panel with table of critiques related to the model of tool.I show critiques of methods, classes and packages.During tool decoration I create query view (criticView) on ClyAllBasisCritiques query in async mode.While query is executed the criticView is hidden and special animation indicates analysis process in the status bar of the tool.When query is complete and include any critique I show criticView panel to the user.  Internal Representation and Key Implementation Points.    Instance Variables	analysisScope:		<ClyScope>	criticView:		<ClyQueryView>	originalToolPanel:		<Morph>	progressMorph:		<ClyActivityAnimationIconMorph>"
"GLMSimplePort","GLMSimplePort simply offers a hardcoded value. It is typically used in tests, but it can be useful in special cases when we need to simulate a Port.Instance Variables:	value	<ProtoObject | PseudoContext>"
"ClassAnnotationExample3",""
"IceProviderRepositoryType","I 'm a base class to resolve provider-based repositories.A provider repositoy is composed of: provider://username/repository[:commitish][/subdir]provider  	- The provider identifier (e.g. github, bitbucket, etc.)username 	- The provider userrepository	- The provider repositorycommitish	- an optional commitish (a branch, a tag, a commit id)subdir		- an optional subdirectory where the packages exist.		Example: ------------A script to install voyage using this would like more or less like this:Metacello new	repository: 'github//pharo-nosql/voyage:master/mc';	baseline: 'Voyage';	load: 'mongo tests'."
"ClyStatusBarMorph","I represent browser tab status bar.I provide two panels where items can be added: - commandBar- contextBar It should be redone because it is completely strange names and separation of these panels.Internal Representation and Key Implementation Points.    Instance Variables	commandBar:		<Morph>	contextBar:		<Morph>"
"FTBasicTreeListItem","FTBasicTreeListItem holds the state of a element in FTBasicTreeListDataSource.Instance variables: |< expanded >|< Private  >|< aBoolean >[ 	remembers if this it is currently expanded or not.}.|< depth >|< Private  >|< aNumber >[	The depth of this item from the root. ].< item > [  anyObject. 	The raw item which is wrapped by this class.	].< children > [ aCollection.	cache for holding currently expaned children ].< dataSource > [ aFBasicTreeListDataSource	reference to the datasource ]."
"RBRemoveReturnStatementTransformationTest",""
"SpecStubTabManagerAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"DAPackageCycleTest",""
"TextAndTextStreamTest","SUnit tests for Text and TextStreams"
"ClyGroupedExtendingPackagesTest",""
"GTOrderedFilter",""
"LGit_GIT_EINVALID",""
"KMAltModifier","I represent the Alt key modifier. Look at my superclass for a more detailed explanaition."
"FloatReferencesRule","The rule detects if any Float system classes are refferenced by an AST"
"RubExtraSelectionDecorator",""
"ClassListNodeExample","Example for a class list node"
"RBDummyRefactoryTestDataApp",""
"GLMEmptyPopupBrick","I am a general popup widget that also visually preserves a context of a trigger element.I can opened based on opening strategy (hover, shift + hover, or double click + shift).Subclasses should implement #onCreated method to customize popup content"
"RBVariableNotDefinedRule","This check is similar to the ""References an undeclared variable"" check, but it looks for variables that are not defined in the class or in the undeclared dictionary. You probably had to work hard to get your code in this state."
"TConcatenationEqualElementsRemovedTest","A trait for test purposes"
"TEnumeratingTest","Test of basic functions in Collections that are in the protocol enumerating"
"RBExpandReferencedPoolsRefactoring","I am a refactoring operations for finding direct pool variables  references.I am used by other refactorings, for example to push down/ pull up a method.Moving a method from class A to class B, that referes to some pool variables of class A, this refactoring will add the pool definition to class B."
"MIMEDocument","a MIME object, along with its type and the URL it was found at (if any)"
"LRUCache","I am LRUCache.I am a Cache.I am a limited cache that evicts the least recently used entries. My implementation is properly O(1).Implementation NotesThe key/value pairs in the cache are held as Associations in a DoubleLinkedList, lruList, ordered from least to most recently used.The keyIndex Dictionary maps from each key to the actual DoubleLink inside lruList holding the matching key/value pair.New pairs are added at the end of the list.In case of a hit, a pair gets promoted to the end of the list (most recently used).In case of a full cache, the first pair of the list gets evicted (least recently used).See #validateInvariantWith: where the relationship between the 2 datastructures is checked."
"OCASTTranslatorForEffect","I override some methods in my super to generate instructions for effect only."
"HEByteArray","I represent a byteArray. The Hermes streams knows how to store byte arrays. I only use them."
"FLHeaderSerializationTest","SUnit tests for header serialization in fuel"
"SHRBTextStyler","I'm the one who visits node to coloring the code"
"MetacelloValueHolderSpecTestCase",""
"IceGitHubJSONDataSource","I'm a generic datasource to show in a table results of a JSON. I'm intended to be used to show information from GitHub API, but I'm generic enough to be used which any kind of JSON structure."
"FLMigration","I represent migration information about a class.See 'configuring-migration' protocol in FLMaterializer."
"LGit_GIT_EAMBIGUOUS",""
"ClassVariableTest",""
"BaselineOfShift",""
"ZnCurrentServer","I am ZnCurrentServer.I am a DynamicVariable and a ProcessSpecificVariable.I hold a reference to the current ZnServer instance during HTTP processing, during the dynamic scope of #handleRequest:"
"FLSubstitutionCluster","I am a cluster for objects that have to be replaced in the object graph by another one (at serialization time).Examples of use:1) Suppose you want to substitute instances of WriteStream by nil. In such case, WriteStream has to implement this method:fuelAccept: aVisitor	^aVisitor visitSubstitution: self by: nil2) Suppose you want to substitute every integer in the graph by its string representation. In such case you should configure the analyzer through:anAnalyzer when: [:x | x isInteger] substituteBy: [:x | x printString].In this way, when you serialize #(1 2), you will then materialize #('1' '2')"
"IceTipMergeType","I'm a base class for merge types. My children define strategies of how to merge two commitish.	"
"EyeIntegerInspector","Specialized version of inspector showing hex, octal and binary representations.If within Unicode range, show a Character having using the Integer value as code point."
"RBPushDownInstanceVariableRefactoring","I am a refactoring for moving a instance variable down to my subclasses.My precondition verifies that the moved variable is not referenced in the methods of the original class."
"NoNetworkError","Signals that no network was found. This could happen, e.g., on dial-up connection when no connection was established when Squeak tried to access it."
"IRStoreLiteralVariable","store literal variable"
"ClyMethodDefinitionProperty","I represent definition of method which includes defining package and defining class.You can create me by: 	ClyClassDefinitionProperty of: aMethod 	Also I provide extra flag #isExtension to mark that method is extension.			 Internal Representation and Key Implementation Points.    Instance Variables	isExtension:		<Boolean>"
"ClyBrowserModeSwitchMorph","I represent the command which switches the browser to particular mode.Therefore I use radio button widget to reflect that target browser mode is already active.I ask the activator #isCommandAppliedToBrowser to detect this state.I implement this logic in the method #isModeActive.When user click on radio button I just execute the command.Internal Representation and Key Implementation Points.    Instance Variables	radioButton:		<Morph>"
"MetaLinkInstaller","#TODO and notes- Should we replace method operations (copying, removing) by ast manipulation ?- Peer reviews... ?- For now, only method nodes can be affected by object specific links.#document inst vars and their usageanonSubclassesRegistry <Dictionary: (Class -> WeakSet of: AnonymousClass)> This table contains for a given class all its anonymous subclasses for which there are instance specific links. Each anonymous class has exactly one instance.nodesForObjects <WeakKeyDictionary (Object -> WeakSet of: RBMethodNode)>links <WeakKeyDictionary (MetaLink -> WeakSet of: Object)> For each instance specific link, stores all objects it does affect. Used only for counting the number of objects affected by a given link. Maybe could be removed and replaced by a computation.#document basic usage of the link installer#InstallingWhen a link is put on a specific object, an anonymous subclass of the object's class is generated and the object is migrated to this subclass. There is a 1-1 mapping between objects an their anonymous class. That means that if we put two instance specific links on two objects of class A, these objects will migrate to two different anonymous subclasses of A. However, putting a new instance specific link to one of these objects will preserve its anonymous class and will not migrate the object to another subclass.	If aNode is in the original class of anObject and if there are class scoped links on this node,  they are installed in the new node of the anonymous subclass. It is necessary to preserve the original instrumentation of a node which are meant to be applied for all instances of the class.#UninstallingWe know we can remove a node in an anonymous subclass when there are no more instance specific links on this node. There may be ""class scoped"" links remaining, but the node can be removed because all these links are present on the superclass node that was copied down in the subclass.When there are no more nodes specific to a given object, the object is migrated back to its superclass. As there is only one anonymous subclass per object, it is expected that the anonymous subclass is garbaged and the object is now an instance of its original class.#Linking and unlinking subtletiesAs already said, when putting a link on a node for a specific object an anonymous subclass is generated  and the node is copied down from the origin class to its anonymous subclass. When adding or removing a new link to the node in the original class, we ensure that this link is also added/removed from all nodes copies in the corresponding anonymous subclasses.#Listening for code changesThe link installer listens for method source code changes and  must update its anonymous classes nodes with those changes. Not done yet. See LinkInstaller >> #methodChanged:Also there is the problem of renaming a method in a class for which an anonymous subclass with a copy of this method has been made."
"STONJSON","I am STONJSON, a class side facade to use STON as a simple JSON parser/writer.STON is more or less a superset of JSON and is backwards compatible with JSON while parsing, and can be compatible with it while writing. The important differences (and the whole reason why STON exists in the first place) are   - class information (except for lists (Array) and maps (Dictionary))  - proper handling of shared and circular references  - more Smalltalk like syntax (Symbols with #, single qouted Strings, nil instead of null)  - more defined special types (Date, Time, DataAndTime, ByteArray, Point)Parsing JSON is done using  #fromString:  #fromStream: with the results being composed of Arrays and Dictionaries.Writing objects as JSON is done using  #toString[Pretty]:  #put:onStream[Pretty]:Note that you can only write Arrays and Dictionaries ! Shared and circular references will be noted and signalled using an exception.E x a m p l e s  STONJSON toString: { 1. -1. Float pi. true. 'JSON' }.  STONJSON fromString: '[1,-1,3.141592653589793,true,""JSON""]'.  STONJSON toStringPretty: { #foo->1. #bar->2 } asDictionary.  STONJSON fromString: '{""foo"":1,""bar"":2,""sub"":{""a"":true,""b"":false},""flags"":[1,8,32]}'. For a much more sophisticated JSON parser/writer implementation, have a look at NeoJSON."
"ClyRequiredMethodGroupProviderTest",""
"Protocol","A Protocol is a simple value holder representing a protocol.It's composed of a name and a set of method selectors"
"GTEventRecorderTest",""
"RBEqualNilRule","Replaces = nil and == nil by isNil, ~= nil and ~~ nil by notNil to make the code more readable.  "
"ClyStringPatternTestCase",""
"ClyExtendedClassTag","I am used to mark classes which are only extended in given scope.In the full browser all extended classes (in grey color) are tagged with me"
"LGitReadStream",""
"AtomicQueueItem","I am a queue item, used by atomic queues.All my new instances are circular i.e. next = self"
"AthensBalloonLinearGradient","i represent a linear gradient paint in balloon backend."
"AssertionFailure","AsssertionFailure is the exception signaled from Object>>assert: when the assertion block evaluates to false."
"GLMMorphicSpecRenderer",""
"IceNoRemote",""
"FLSimpleStackTest",""
"STONWriteReadTests","STONWriteReadTests test serialization followed by materialization."
"MetacelloCachingGoferResolvedReference",""
"SugsGlamourCodeContext","I know how to use a Glamour  code model to  and extract the information needed for the suggestions"
"VMCallbackContext32","A VMCallbackContext32 is an Alien for the 32-bit version of VMCallbackContext (defined in the VMMaker package), a struct that maintains all the necessary context for a callback.typedef struct {    void *thunkp;    char *stackptr;    long *intRegArgs;    double *floatRegArgs;    void *savedCStackPointer;    void *savedCFramePointer;    union {                            long vallong;                            struct { int low, high; } valleint64;                            struct { int high, low; } valbeint64;                            double valflt64;                            struct { void *addr; long size; } valstruct;                        }   rvs;    jmp_buf trampoline; } VMCallbackContext;Instance Variables"
"ZnTooManyRedirects","ZnTooManyRedirects is signalled when an HTTP client has been following more redirects than allowed.Part of Zinc HTTP Components. "
"NestedDictionaryTest","SUnit test class for nested dictionaries"
"ReRewriteWrapper","A wrapper that provides a single interface to produce a new node from the matched node and a maping of wildcard variables."
"ClyMergedSuperclassesAndInheritedTraitsHierarchyTest",""
"ClyCriticMethodGroupProvider","I provide ""critiques"" method group which include all problem methods"
"SimpleTestResourceB","I'm a simple test ressource for test purposes"
"ClyBrowserButtonMorph","I am a toolbar button which executes particular command"
"ZdcSecureSMTPClient","I am ZdcSecureSMTPClient.I open a ZdcSecureSocketStream to the SMTP server and connect it at the SSL level.| mailMessage |mailMessage := MailMessage empty.mailMessage setField: 'subject' toString: 'ZdcSecureSMTPClient Test'.mailMessage body: (MIMEDocument contentType: 'text/plain' content: 'This is test from Pharo Smalltalk').ZdcSecureSMTPClient	sendUsingGMailAccount: '<your-name>@gmail.com' 	password: '<your-password>'	to: '<email-address>' 	message: mailMessage"
"MetacelloStackCacheTestCase",""
"ClyCloseBrowserCommand","I am a command to close browser window. There are already system shortcuts like ""$w command"" to close current window. But some morphs like tab manager are implementing it differently.In a browser the desired behaviour is to close the full window instead of single tab. I override it by shortcut activator for source code context. When you edit code and press ""$w command"" I will close browser window. Also it fixes the case for method browser managed by tabs group window. Before ""$w command"", it keeps an empty tab without closing it."
"GLMTransmission","A GLMTransmission models the connection between multiple origin ports and one destination port. Whenever an origin port changes the value, the corresponding transmissions are triggered by the browser.The result of triggering a transmission is the setting of the value in the destination port. The transmissionStrategy can add further different semantics to this behavior.A transmission takes place in a context. The context is started every time a new value is set from outside. Afterwards, the context is preserved internally. This is important for braking possible loops of transmission propagation.There are two kind of origins for a transmission, active and passive ones. A change of value in an active origin will trigger the transmissions originating from it. A change of value in a passive origin will not trigger the transmission. However, a value in a passive origin is still part of the transmission value."
"FTFilter","I am root of filter classes which are used by FTFilterFunctionMy subclasses shoud implement method #matches: to filter given strings.Public API and Key Messages- matches: aString    Internal Representation and Key Implementation Points.    Instance Variables	pattern:		<String>"
"NECUntypedModelTest",""
"PharoTutorialHelpTutorialBuilderTest","SUnit tests for PharoTutorialHelpTutorialBuilder"
"ClyDeprecatedMethodGroupProviderTest",""
"EnvironmentChooser","I am widget for selecting environments."
"ClyContextSelectionStrategy","I describe the way the context of browser selection should be active"
"ReSmokeExceptionStrategyTest",""
"CmdDragAndDropCommandActivator","I represent activation of command through drag and drop operation.In that case context variable from my superclass keeps context where drag was initiated.And my variable dropContext holds context where command should be executed by drop operation.I redefine execution logic with two separate steps:- prepare command in context of drag operation:	context prepareDragActivationOf: command- prepare command in context of drop operation:	dropContext prepareDropExecutionOf:  commandActual preparation logic is implemented by command. Contexts delegate processing to it. Drag and drop logic of concrete UI application should execute command using:	activator executeDropInContext: aToolContextForDropOperationMy instances are created by CmdDragAndDropCommandActivation:	dragAndDropActivation newActivatorFor: aContextForDragOperation.		Internal Representation and Key Implementation Points.    Instance Variables	dropContext:		<CmdToolContext>"
"EyeStringInspector","EyeStringInspector is is the EyeInspector for Strings.Right now, the only difference is that the list of elements for the tree is overridden to be empty."
"TestSuite","This is a Composite of Tests, either TestCases or other TestSuites. The top-level protocol is #run.  This creates aTestResult and sends	self run: aTestResult.then ensures that any TestResources made available during the run are reset.  These, and the dependencies protocol, are common between this and TestCase."
"GLMCompositePresentationMorphicTest",""
"EyeBagInspector","Specialized version of inspector showing occurrences of items of the bag"
"IceTipAbstractCredentialStoreCommand","I am the abstract class of all the general commands in the credentials list."
"GTEventUnpackingError","I represent an error that appears when a data cannot be unpacked (materialized).Collaborators: GTEventUnpacking"
"RBRemoveAssignmentWithoutEffectRule","See my #longDescription ."
"RBRenameAndDeprecateClassTransformationTest",""
"GLMBrickLayouter","A GLMBrickLayouter is Brick's brand new layout system.It builds a graph where each Brick corresponds two nodes: WidthNode and HeightNode.  Each node can have 4 states:1 - depends on parent2 - depends on children3 - depends on itself4 - depends on opposite node.Layouter traverses graph from root WidthNode. Depending on state it behaves differently:1) If layouter meets node with state 1 it checks if its parent already positioned and its height or width calculated. Otherwise it returns to such node later as soon as it finished with parent. If node with state 1 has parent with state 2 a LayoutCycleException must be reaised.2) If layouter meets node with state 2 it must skip it and continues traversing all children until all of them are not positioned. As soon as it happens it returns back to skipped node. In case any of children of node with state 2 has state 1 a LayoutCycleException must be reaised.3) If layouter meets node with state 3 it immidiately calculates corresponding value and applies it. Then it checks if there is an unvisited child node. If yes moves to it, otherwise returns to parent node.4) If layouter meets node with state 4 it swaps its working node to opposite and continues traversing. For WidthNode opposing node is HeightNode and for HeightNode it is WidthNode.  If both nodes have state 4 a LayoutCycleException must be raised.Instance Variables	rootHeightNode:		<Object>	rootWidthNode:		<Object>rootHeightNode	- xxxxxrootWidthNode	- xxxxx"
"OmSequentialSuffixStrategyTest","An OmSecuentialSuffixStrategyTest is a test class for testing the behavior of OmSecuentialSuffixStrategy"
"RFSenderReification","I reify the sender for message sends and methods"
"RuntimeTyperTests","A small demo how to record type information at runtime with reflectivity.We create this link:	link := MetaLink new		metaObject: #node;		selector: #tagType:;		arguments: #(value);		control: #after.		this will add a message send to the AST node itself where you install it. It will call tagType: and as an argument hand over the result of the right hand side of the assignment. tagType: looks like this:	tagType: anObject 		variable propertyAt: #types ifAbsentPut: Set new.		(variable propertyAt: #types) add: anObject class.it uses the feature that we can annotate all the AST nodes easily with properties.We can now use this on a simple example:	examplePlus: arg		| result |		result := arg + 1.		^result.With this, we can run a test, see #testPlus.What is not nice here yet is that, as we tag the AST variable node, we just tag the local node in	result := arg + 1.So in addition, one would need some AST visitor to gather all these infos (and maybe those of static assignments,e.g. “a := 1” we know the type of a) and add these annotations to al the vars that are actually the same variable."
"ImagePreviewMorph","Displays an image scaled to a fixed size along with a label describing the original dimensions."
"ClyUnionQueryTest",""
"IceGitHubPullRequestDataSource","I'm a datasource for pull request status, to be used when showing pull requests details. See IceGitHubPullRequestDetailModel"
"ManifestSUnitCore","Core package for the SUnit unit testing framework"
"ColorChanged","I'm a Announcement used to indicate a color has changed. Example:(ColorSelectorDialogWindow new                        title: 'Choose a color';                        open;                        announcer) on: ColorChanged  do: [:ann|                                                                        UIManager inform: 'Selected color: ', ann newColor asString]."
"SDL2Constants","Pool of various SDL2 library constants"
"EpMorphVisitor","I answer a morph for each EpEvent."
"IRInstruction","I am an instruction in the IR (intermediate representation) language.  The IR serves as the intermediary between the Smalltalk language and the bytecode language.  It is easier to optimize and translate to/from this language than it is to optimize/translate directly from Smalltalk to bytecodes.  The IR is generic and simple consisting of just twelve instructions.  They are:	goto: labelNum	if: boolean goto: labelNum1 otherwise: labelNum2	label: labelNum	popTop	pushDup	pushLiteral: object	pushTemp: name	blockReturn	returnTop	send: selector	send: selector toSuperOf: behavior	storeTemp: nameEach instruction is reified as an instance of one of my subclasses and grouped by basic block (IRSequence) into an IRMethod.  IRInterpreter visits each instruction in a IRMethod responding to the above instruction messages sent to it."
"StubFixedFont","I am font that provides no real glyphs nor displaying possibilities. I server only as a stub font that provides measurements on texts."
"Metaclass","My instances add instance-specific behavior to various class-describing objects in the system. This typically includes messages for initializing class variables and instance creation messages particular to a class. There is only one instance of a particular Metaclass, namely the class which is being described. A Metaclass shares the class variables of its instance.	[Subtle] In general, the superclass hierarchy for metaclasses parallels that for classes. Thus,	Integer superclass == Number, and	Integer class superclass == Number class.However there is a singularity at Object. Here the class hierarchy terminates, but the metaclass hierarchy must wrap around to Class, since ALL metaclasses are subclasses of Class. Thus,	Object superclass == nil, and	Object class superclass == Class."
"GTSpotterTriangleRenderer",""
"EpBehaviorCopy","I represent a copy of a class or a trait ."
"CmdUnusedToolContextStub",""
"InteractiveResolver","I resolve origins by consulting the user. I maintain a cache of the user's responses."
"RBCommentNodeVisitorTest","SUnit tests for RBCommentNodeVisitor"
"GTSpotterRecorderDiveOutEvent","A GTSpotterRecorderDiveOutEvent  models the action of  diving out a step."
"MouseClickState","MouseClickState is a simple class managing the distinction between clicks, double clicks, and drag operations. It has been factored out of HandMorph due to the many instVars.Instance variables:	clickClient 	<Morph>		The client wishing to receive #click:, #dblClick:, or #drag messages	clickState 	<Symbol>	The internal state of handling the last event (#firstClickDown, #firstClickUp, #firstClickTimedOut)	firstClickDown 	<MorphicEvent>	The #mouseDown event after which the client wished to receive #click: or similar messages	firstClickUp 	<MorphicEvent>	The first mouse up event which came in before the double click time out was exceeded (it is sent if there is a timout after the first mouse up event occured)	firstClickTime 	<Integer>	The millisecond clock value of the first event	clickSelector 	<Symbol>	The selector to use for sending #click: messages	dblClickSelector 	<Symbol>	The selector to use for sending #doubleClick: messages	dblClickTime 	<Integer>	Timout in milliseconds for a double click operation	dragSelector 	<Symbol>	The selector to use for sending #drag: messages	dragThreshold 	<Integer>	Threshold used for determining if a #drag: message is sent (pixels!)"
"MetacelloExplicitLoadDirective",""
"BaselineOfUI","This baseline is used to generate Pharo images from the local clone of pharo-project/pharo repository. Depends on:- ConfigurationOfMorphicLoad type: - atomicInstalls:- Spec- Keymappings- Rubric- basic tools (old debugger, workspace)- some other packages"
"EpAnnouncementsTest",""
"ByteArrayTest","SUnit tests for ByteArray"
"ClyJumpToTestMethodCommand","Description--------------------I am a command available in the method context menu of Calypso. When activated I'll jump on the test method corresponding to the method. If the method does not exists I will create it in the corresponding class.Internal Representation and Key Implementation Points.--------------------    Instance Variables	selectedMethods:			<aCollection>	Methods selected by the user that should have their tests generated.	testMethodToBrowse:		<aMethod>			The method to browse at the end of the execution of the command."
"ReflectivityControlTest","Tests for Reflective method"
"CornerGripMorph","I am the superclass of a hierarchy of morph specialized in allowing the user to resize windows."
"PopupChoiceDialogWindow","Presents a list of options in a popup format. If the list is long it will split into multiple columns. If very long, the columns will be scrollable. Maximum extent of the content area is half the display extent."
"PluggableMultiColumnListMorph","This morph can be used to show a list having multiple columns,  The columns are self width sized to make the largest entry in each list fit.  In some cases the pane may then be too narrow.Use it like a regular PluggableListMorph except pass in an array of lists instead of a single list.There are base assumptions made here that each list in the array of lists is the same size.Also, the highlight color for the selection is easy to modify in the #highlightSelection method.  I used bluewhen testing just to see it work."
"RBRenameAndDeprecateClassTransformation","Rename a class but making sure that existing clients not in the system can be migrated later on:The idea is that 	the class A is renamed into Anew	it gets a subclass A that is deprecated. 	This way client code using A will be able to load and get all the behavior of Anew. Usage:transformation := (RBRenameAndDeprecateClassTransformation 				rename: #DANode				to: #DANodePresenter)				transform. (ChangesBrowser changes: transformation model changes changes) open"
"EditableList","This widget allows you to edit a list of items :- add / remove an item to/from the list - order the list by moving elements up/down/top/bottom.The default behavior is to do a copy of the list. The widget works with its internal copy. It allows the user to accept / reject changes (for example by opening the widget in a DialogWindow) before affecting the original list. It is your responsability to copy EditableList items back to the original list.The addItemBlock is used to provide a way to give the item to add (e.g. a UIManager default chooseFrom: values:).Example:self example"
"GLMMorphicFastTableRenderer","I am a Morphic renderer for a GLMFastTablePresentation.Description--------------------I use a GLMFastTableDataSource to manage the data of the table."
"MetalinkIconStyler","I'm in charge to style an ast when there are metalinks"
"IceImageChange","I represent a change coming from the image (in contrast to a change coming from git). I know the changed file and I can be visited to define the create a more detailed diff."
"GTInspectorWrapperNode","I am a node that wraps in the host object another node and delegates all API methods to the wrapped node. I can further provide a different label for the wrapped node."
"HiNodeRenderer","I know how to render a ruler node in an Athens canvas.Note: an instance of me cannot be used to render in more than one canvas."
"LGit_GIT_ECERTIFICATE",""
"SycRecompilePackageCommand",""
"SpecHelpTopics","A SpecHelpTopics is the main class which holds the documentation of Spec. This documentation can be accessed from the Help Browser.See class side for selectors."
"DAExtensionDependencyNode","A PDCycleNode is used to display a extension dependency in a tree."
"ClyExtendedClassGroupProviderTest",""
"RBAddClassVariableTest",""
"ExternalData","Instances of ExternalData explicitly describe objects with associated type. They can be used for describing atomic C types like arrays of atomic types (e.g., 'int[]') or pointer to atomic types (e.g., 'int *').Instance variables:	type	<Integer | Behavior>	The basic type of the receiver.The encoding of type is equivalent to that of the basic type in class ExternalType. The interpretation of whether the receiver describes an array of data or a pointer to data depends on the contents of the instance variable 'handle'. If handle contains an ExternalAddress the receiver is treated as pointer to type. If the handle contains a ByteArray the receiver is interpreted as describing an array of type. Note that both interpretations are treated equivalent in external calls, e.g., if one describes an argument to an external call as taking 'int*' then, depending on the type of handle either the actual contents (if ExternalAddress) or a pointer to the contents (if ByteArray) is passed."
"GLMTreeBrick",""
"ZipWriteStream","A ZIP write stream"
"IceNothingToCommit","I indicate when there is nothing to commit (and you tried to do it)"
"DropListPresenter","A DropListPresenter is a Spec presenter for drop lists.I am assume there is a little problem on an empty list, but frankly, who creates an empty drop list ?See DropListExample for an example"
"ReflectivityExamples2Subclass",""
"FFIUInt32","I'm an unsigned int type (32 bits)"
"FileModifyingSimpleServiceEntry","I represent a service that may change the contents of a directory.Such changes include: - file creation - file deletion - file modification"
"MetacelloProject",""
"SortFunction","I am intended to be used in place of two arg sort blocks.UsageIn the following example, an ascending SortFunction is created based on the result of the #first message send to each object.#(#(1 2) #(2 3) #(0 0)) sorted: #first ascending.To sort by the #last element, but descending, the following would be used:#(#(1 2) #(2 3) #(0 0)) sorted: #last descending.One can use blocks as well. The following sorts in descending order, the sub elements based on the sum of their values.| sumBlock |sumBlock := [:sequence | sequence inject: 0 into: [:sum :each | sum + each]].#(#(1 2) #(2 3) #(0 0)) sorted: sumBlock descending.One can even use 2 arg blocks, for those cases where the function isn't expressible with objects that respond to < and =. The only catch, is that such a function has to return not true and false, but instead a collation order, values of -1 (for before), 0 (the same) or 1 (to follow). For example:| oddBlock |oddBlock :=		[:a :b |		a odd = b odd ifTrue: [0] ifFalse: [a odd ifTrue: [-1] ifFalse: [1]]].#(1 5 1 3 2 7 9 4 6) asSortedCollection: oddBlock descendingUsing #undefinedFirst and #undefinedLast it is possible to deal with nil values, moving them first or last. For Example:#(a nil z b) sorted: #value ascending undefinedFirst.#(a nil z b) sorted: #value ascending undefinedLast.Different scenarios are implemented by my different subclasses:- SortByPropertyFunction implement property comparison by selector or block- CollatorBlockFunction represent two args collator block- and ChainedSortFunction implements composition of collators created by comma messageApplications can implement their own domain sort functions defining the method:	collate: anObject1 with: anObject2"
"FLCompiledMethodCluster","I am a cluster for CompiledMethod instances.How CompiledMethod trailers are serialized can be established using methods in 'configurating' class-side protocol."
"ClyAsyncRawQueryCursorTest",""
"RBRemoveClassTransformation","Removes a class from the image.Usage:| transformation |transformation := (RBRemoveClassTransformation	className: #RBRemoveClassTransformationTest)	transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- class must exist- class to be removed should not be referenced- class to be removed must not have subclasses- if it is a trait, it should not be used"
"ClassAnnotationExampleWithFailedForbiddenCheck",""
"CompositeBorder","Border supporting multiple ""sub-borders""."
"FTRowLayout","I'm a layout specifphic for rows in a fast table.I simplify my parent (in an attept to achieve speed), but most important, Itake into account cells width."
"MonitorTest","SUnit tests for monitors"
"PluggableDictionary","Class PluggableDictionary allows the redefinition of hashing and equality by clients. This is in particular useful if the clients know about specific properties of the objects stored in the dictionary. See the class comment of PluggableSet for an example.Instance variables:	hashBlock	<BlockClosure>	A one-argument block used for hashing the keys.	equalBlock	<BlockClosure>	A two-argument block used for comparing the keys."
"WideStringTest","This is the unit test for the class String. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"ClySwitchScopeMenuGroup","I am a context menu group which holds all generated ClySwitchQueryScopeCommand items"
"OSWindowJoystickExampleEventHandler","I am the event handler linked to OSWindowJoystickExample."
"JPEGReadStream","Encapsulates huffman encoded access to JPEG data.The following layout is fixed for the JPEG primitives to work:	collection	<ByteArray | String>	position		<SmallInteger>	readLimit	<SmallInteger>	bitBuffer	<SmallInteger>	bitsInBuffer	<SmallInteger>"
"TCopyPreservingIdentityTest","A trait for test purposes"
"RBAddSubtreeTransformation","Adds a subtree inside a method. It is required an interval indicating where the subtree shall be added. If the interval is invalid, the new subtree will be added at the end of the mehtod body (or before the return node, if it exists).Usage:| transformation |transformation := (RBAddSubtreeTransformation		interval: (0 to: 1)		with: '^ selector'		from: #selector:from:		in: #RBRemoveMethodTransformation)		transform. (ChangesBrowser changes: transformation model changes changes) openPreconditions:- the class and method exist- the code from which the subtree will be extracted is parseable"
"ClySortByDefiningClassFunctionTest",""
"MalHal",""
"IRPopIntoLiteralVariable","pop into literal variable"
"IRTranslatorV2","I visit IRMethod instructions, sending the appropriate bytecode messages to my BytecodeGenerator (gen). "
"DummyUIManager","I'm an alternative UIManager used to run an the image without GUI.  I redefine methods which requires user input as these requests are irrelevant in a headless environment. "
"LargeNegativeInteger","Just like LargePositiveInteger, but represents a negative number."
"IceTipCommitAction","I perform a commit"
"ClyConstantMethodQueryTest",""
"TestDelayBasicSchedulerMicrosecondTicker","I specify the tests for the delay scheduler system. My subclasses inherit these tests to run against various combinations of scheduler and ticker.   The scheduler is specified by #classForScheduler.The ticker is specified by #classForTicker.I specifically test...  scheduler DelayBasicScheduler together with its default   ticker DelayMicrosecondTicker.My #setUp method starts a new scheduler process running at a priority slightly higher than the tests, so that it will preempt the tests similar to how the system's current delay schedulerrunning at timingPriority will normally preempt all other processes.  This is providedto tests in the /scheduler/ variable."
"FLIndexStream","I am an optimized stream for writing and reading *indexes*, i.e. positive integers with a known upper bound. "
"IceGitHubPlugin","I'm a pluging to handle GitHub issues integration. It just add options to easily handle the creation of branchs with the ""convention"" issue naming format (number-plus-normalised-title): 123-a-sample-of-issue-branch"
"MethodModified","This announcement is emited when we RE-compile a method in a class or a trait, with: ClassDescription >> compile: or TraitDescription >> compile:. If the method is not yet registered in the class or the trait, the announcement will not be emitted.The action of renaming a method will be handled by SystemMethodRemovedAnnouncement and SystemMethodAddedAnnouncement, since this refactoring is concretely composed by removing the old method and add a new with the new name  "
"SugsInline","I know how to inline the method from a message"
"Trait2",""
"GLMBrickPopupHelpThemer",""
"GTPlayPageCachePersistence",""
"TreeColumnModel","This is deprecated class because the original class TreeColumnModel was renamed to TreeColumnPresenter. You should stop to use this class and modify your code to use TreeColumnPresenter."
"FilePathEncoder","This class absorb the difference of internal and external representation of the file path.  The idea is to keep the internal one as much as possible, and only when it goes to a primitive, the encoded file path, i.e. the native platform representation is passsed to the primitive.	The converter used is obtained by ""LanguageEnvironment defaultFileNameConverter""."
"GTSpotterStepFilteringTest",""
"FileListGridNode","A node in the file list grid"
"GoferRepositoryError","A GoferRepositoryError is the error thrown when a repository cannot be accessed."
"RealEstateAgent","Responsible for real-estate management on the screen, which is to say, controlling where new windows appear, with what sizes, etc.  5/20/96 sw"
"MethodClassifierTest","SUnit tests for MethodClassifier"
"ClyMessageSendersQuery","I return all senders of any of given selectors"
"FLWeakObjectsTest","SUnit tests for fuel serialization of weak objects"
"FFIAbstract64BitsArgumentReader","I implement the common behavior of the processing of arguments for 64 bits platforms.The 64 bits platforms uses the registers to pass parameters.The integer parameters are passed in the general purpose parameters (the address of the copy of them is in #integerRegisterPointer) and the float parameters are passed in the set of registers XMM0-XMM8. This float point registers are accessible through the #floatRegisterPointer.As the different calling conventions uses the registers in different ways and also they use different number of registers I only have limited reused code."
"FLHookedSubstitutionTest","SUnit tests for hooked serialization using fuel"
"TonelRepositoryTest",""
"UTF16TextConverterTest","SUnit tests for UTF16TextConverter "
"HiLink","I am a link used to render a Hiedra ruler."
"SDL_ControllerDeviceEvent","SDL2 library structure representing a controller device event data."
"RangeSettingDeclaration","A RangeSettingValue is a setting for which the value domain is an interval.  See SettingManager comment for more explanations.Instance Variables	range:		<Interval>range	- The interval which define the value domain"
"ClyEmptyClassSelectionContext",""
"ClyQueryViewMorph","I represent query result using fast table.I should be created for browser:	ClyQueryView for: aBrowseror using helper browser method:	aBrowser newNavigationView.By default I initialize table with single column, the instance of ClyMainTableColumn. You can ask it to set up specific column properties	aQueryView mainColumn 		width: 100;		displayItemPropertyBy: [:rowItem | rowItem name, 'special name suffix for test' ].Or you can set up display block using:	aQueryView displayMainColumnBy: [ :cell :item | 		cell nameMorph contents: item name.		cell nameMorph color: Color green].To create more columns use #addColumn: method:	(aQueryView addColumn: #package) 		width: 50;		displayItemPropertyBy: [:methodItem | self packageNameOf: methodItem]To show items user should pass query instance into me:	aQueryView showQuery: aQueryWhen user selects any item in table I trigger navigation request which ask browser for desired action. To set up navigation selector use:	aQueryView requestNavigationBy: #showMethodsForSelectedClassesI maintain several selection objects to always show correct table selection after any tree expansion, items addition of removal.Main selection is what user selects on table. I manage it in #selection variable, instance of ClyDataSourceSeleciton.Next is desiredSelection, instance of ClyDesiredSelection. Every time user passes me new query I am trying to restore desired selection on new items. Idea is to show previously selected items on new data source. I try to find same items and if they not exists I lookup similar items by name.I set new desiredSelection instance only when user manually modifies table selection.And last type of selection is highlighting, instance of ClyHighlightingSelection. User can set it by:	aQueryView highlightItemsWhich: predicateBlock.All type of selections maintain correct state to be in sync with actual table seletion indexes after any data source changes. This logic implemented in method #updateSelectedItemsOf:.By default user can type characters on table to search required items. But also explicit filter with extra field can be added: - enableFilterIt adds simple ClyItemNameFilter.- enableFilter: anItemStringFilterClassI use Commander library to implement:- context menu using CmdContextMenuCommandActivator:	- menuColumn: column row: rowIndex- shortcuts using CmdShortcutCommandActivator 	- kmDispatcher-  drag and drop using CmdDragAndDropCommandActivator 	- createDragPassengerFor: aSelectionTo use Commander I ask browser for command context of given selection.The context is also used to decorate table cells with appropriate decorators:	- decorateMainTableCell: anItemCellMorph of: aDataSourceItem	- decorateTableCell: anItemCellMorph of: aDataSourceItemThere is special decorator which also based on Commander: ClyTableIconCommandActivation. It adds iconic button to table cells for all interested commands.It brings behaviour of Nautilus method widget where table icons are extended by AbstractMethodIconAction. Here commands should be marked with ClyTableIconCommandActivation.I provide extra suitable events which in future should be also based on commands:- whenDoubleClickDo: - whenEnterKeyPressedDo: - whenEscapeKeyPressedDo: ClyBrowserSearchDialog uses them to provide user friendly behaviour.Other suitable methods:- ignoreNavigationDuring: aBlock. It allows to modify my selection without triggering navigation  request to browser.- findItemsSameAsFilter. It allows to use full filter string to search my data source for item with exacly same name. It is used by ClyBrowserSearchDialog.- allowsDeselection: aBoolean.Internal Representation and Key Implementation Points.    Instance Variables	table:		<FTTableMorph>	browser:		<ClyBrowser>	navigationSelector:		<aSymbol>	selection:		<ClyDataSourceSelection>	desiredSelection:		<ClyDesiredSelection>	highlighting:		<ClyHighlightingSelection>		changesWasInitiatedByUser:		<Boolean>	shouldRestoreSelection: <Boolean>	treeStructure: <Array of<Association>>"
"FFIUInt64","I'm an unsigned int type (64bits)I map to a ulonglong type. "
"OSWindowBench","Benchmark for window processing"
"GTBytecodeDebuggerSmokeTest",""
"WeakValueAssociation","I am a lookup key (acting like an association but) holding only weakly on my value."
"BaselineOfLibGit",""
"SDL2TouchExample","Example for multi-touch devices."
"MalGraphReducer","The reduced graph of G is the graph G where each strongly connected components was merged into one vertice / node.circuitsNodes instance variable will collect all nodes created by merging nodes in a circuit."
"ClyCompositeQueryTestCase",""
"ProcessSpecificVariable","My subclasses (not instances of them) keep state specific to the current process.There are two kinds of process-specific variables: process-local (state availablefor read and write in all methods inside the process), and dynamic variables(implementing dynamic scope).My subclasses could supply inheritable values which will be installed on forked (child) processes. To enable this classes should return true from  #isInheritable method (on class side).Also subclasses could provide specific logic for installing variables into new processes which allows interesting hooks to control forked processes"
"DropListButtonTest",""
"SystemHelp","This class defines Help for the system in front of you.It defines the default contents when you open a help browser.So ""HelpBrowser open"" is the same as ""HelpBrowser openOn: SystemHelp""."
"GLMBrickLayoutTraverser",""
"RBBrowserVariableRefactoringHelp","This is the chapter of the refactoring help book about the class / instance variable refactoring available in the System Browser."
"MenuTitleMorph","This is a TitleMorph used by MenuMorph.""	Example usage:	| menu |		menu := MenuMorph new.	menu buildTitle: [ :titleMorph | titleMorph		title: 'aCoolTitle';		icon: self theme icons alertIcon;		withCloseBox;		withPinBox;		color: Color purple			].	... "" add items"" ...		menu popUpInWorld"
"SettingTreeBuilder","A builder for the settings tree"
"IceTipLocalRepositoryPanel","I will define a repository that already exists. "
"StyleChunk","I'm the declaration of a style stuff into a file.  I'm not really used, but I'm here to make parsing an homogeneous process and backwards compatibility.Sending me the #import message does nothing :)."
"MCDictionaryRepository","A dictionary repository (in nemory)"
"GTUrlProvider","This class was inspired from the Zinc SharedWorkspace project.Its job is to work with a UrlProvider that can provide (via get) and store (via post) strings."
"SycMessageOriginHack","I represent class of message implementor for method refactorings.Implementing class is required for current method refactorings but it should be removed in future because it should be always message refactoring. For example RBRenameMethodRefactoring renames any selectors in image which is not restrited by any existing method. Probably reason of such restriction was how browser implements rename of methods when user activated it on selected methods.Same is valid for add/remove method parameter.So now these  refactorings check that given class defines given selector which is not needed actually because we modify message.I used in place of class for all such refactorings to allow them work on messages"
"LGit_GIT_ECONFLICT",""
"PanelMorphWithSplitters","A PanelMorphWithSplitters is which add splitters the way SystemWindow do it"
"ManifestShiftClassInstaller","ShiftClassInstaller (responsible of installing a class in the system) and related classes"
"IceTipWeakValueHolder","I'm a weak value holder. I keep a weak reference to the instance in contents."
"OmStore","I am a repository of entries."
"EpLatestCodeChangeFilter","This filter only accepts code changes that are latest, i.e. that aren't overridden by other changes in the log more recently."
"DebugContext","A DebugContext is a helper that complements DebugSession. It is meant to be created dynamically on a context when the session wants to access the provided services.To create instances first call forContext: to set the current context, and then ifthe interrupted is different use topContext:Not sure if it is still a good idea to have this class. Instance Variables	context:		<Object>	method:		<Object>	methodNode:		<Object>	ranges:		<Object>	topContext:		<Object>context	- xxxxxmethod	- xxxxxmethodNode	- xxxxxranges	- xxxxxtopContext	- xxxxx"
"ClyClassQueryTestCase",""
"MCWorkingCopy","MCWorkingCopy represents one version of a package in memory. It provides support for ancestry access, required packages and the repositories in which the package is managed.Instance Variables:	versionInfo	<MCAncestry>	ancestry	<MCWorkingAncestry>	counter	<Number>	repositoryGroup	<MCRepositoryGroup>	requiredPackages	<Collection>"
"BuilderManifestTest","A ManifestBuilderTest is a class to test the behavior of ManifestBuilder"
"MockTutorial","Mocking a tutorial for test purposes"
"TGLMFastTableTag","I am a Trait class use to manage some basic functionnalities needed to manage tags in a Gl̂amour data source.My user need to define the #tagToFilterBy which should return a collection of tag, then I manage some basics needs."
"QuotedPrintableMimeConverter","I am QuotedPrintableMimeConverter.I am a MimeConverter.Quoted-Printable, or QP encoding, is an encoding using printable ASCII characters (alphanumeric and the equals sign ""="") to transmit 8-bit data over a 7-bit data path or, generally, over a medium which is not 8-bit clean. It is defined as a MIME content transfer encoding for use in e-mail.QP works by using the equals sign ""="" as an escape character. It also limits line length to 76, as some software has limits on line length.See also   http://en.wikipedia.org/wiki/Quoted-printable  http://tools.ietf.org/html/rfc2045I do quoted printable MIME decoding as specified in RFC 2045 ""MIME Part One: Format of Internet Message Bodies"".Short version of RFC2045, Sect. 6.7:	(1) Any octet, except a CR or LF that is part of a CRLF line break of the canonical (standard) form of the data being encoded, may be represented by an ""="" followed by a two digit hexadecimal representation of the octet's value. [...]	(2) Octets with decimal values of 33 through 60 inclusive, and 62 through 126, inclusive, MAY be represented as the US-ASCII characters which correspond to those octets [...].	(3) Octets with values of 9 and 32 MAY be represented as US-ASCII TAB (HT) and SPACE characters, respectively, but MUST NOT be so represented at the end of an encoded line.  [...]	(4) A line break in a text body, represented as a CRLF sequence in the text canonical form, must be represented by a (RFC 822) line break, which is also a CRLF sequence, in the Quoted-Printable encoding.  [...]	(5) The Quoted-Printable encoding REQUIRES that encoded lines be no more than 76 characters long.  If longer lines are to be encoded with the Quoted-Printable encoding, ""soft"" line breaks must be used.  An equal sign as the last character on a encoded line indicates such a non-significant (""soft"") line break in the encoded text."
"OSWindowShownEvent","I am delivered when a window is shown."
"Latin1TextConverter","Text converter for ISO 8859-1.  An international encoding used in Western Europe."
"RBPrettyPrintCodeRefactoring","I am a refactoring for reformat the source code of all methods in this environment.I have no precondition."
"ClyAbstractMethodTableDecorator","I decorate table with special italic font and icon for abstract classes (with #subclassResponsibility inside).I am activated only in browser with installed ClyInheritanceAnalysisBrowserPlugin"
"IRPushDup","Instruction ""pushDup"""
"ClyScopeExample2",""
"RubScrolledTextMorph","I am the common morph to represent a text area. I should be created by my model, a RubScrolledTextModel. The tool should talk to my model and not me directly "
"WikiStyleHelpBuilder","I'm an HelpSystem builder which create an HelpSystem book from a wiki-like formatted string. ! Usage- Create a class-side method on the class you want to put documentation.- Add the pragma <wikiStyleHelp:> with the title of the book as parameter- The method should answer the documentation as a String (using Pier syntax. See http://www.piercms.com/doc/syntax ). ! ExampleMyClass class>>aMethod        <wikiStyleHelp: #'The name of the book I want to write'>        ^ ' ! Section 1 Some text for this section !! Subsection 1.1 !!! Subsection 1.1.1 !! Subsection 1.2 ! Section 2'"
"GTSpotterExtensionSettings","This is a helper class that provides dynamically setting entries for all processors defined in the image. The user can use the settings browser to turn each processor on/off.To achieve this, the class side keeps track of disabledExtensions.As each setting requires selectors for setting/getting values, the class side implements a doesNotUnderstand: and maintains the disabledExtensions list."
"EmbeddedFreeTypeFontInstaller","An EmbeddedFreeTypeFontInstaller installs embedded free type fonts in a provider.It registers itself as a font installer to FreeTypeFontProvider. And when someone asks to update fonts from system, EmbeddedFreeTypeFontInstaller installs corresponding fonts.Instance Variables	embeddedFileInfoCache:		<Dictionary>	provider:		<FreeTypeFontProvider>embeddedFileInfoCache	- internal cacheprovider	- a provider which asks for installing the embedded fonts."
"BaselineOfSUnit","This baseline is used to generate Pharo images from the local clone of pharo-project/pharo repository. Depends on:- minimal Pharo imageLoad type: - linearInstalls:- SUnit without GUI"
"IceTipWorkingCopyBrowser","I'm a tool to show the internals of a repository from the point of view of an image. I show the packages managed by this repository and a series of actions to properly handle them in the context of an iceberg repository.(IceTipPackagesBrowser forRepository: IceRepository registry anyOne) openWithSpec"
"GLMBrowserTest",""
"SimplestClassListExample","SimplestClassListExample new openOn: Object"
"OSTouchDirectionnalGestureDetector","I detect gestures which needs all fingers to go on a certain direction (creating a delta distance)"
"ClySwitchToScopedViewCommand",""
"BenchmarkResultTest","Unit test for BenchmarkResult"
"EpApplyVisitor","I implement how to redo EpCodeChange instances."
"TSortable","I represent a set of methods related to element sorting. My public api is composed of the messages:        #sort, #isSorted, #isSortedBy:, and #sort: To get the behavior I define, my users should implement:	#isEmpty, #size, #first, and #at: "
"ClyMethodCreationToolMorph","I am a tool to create methods using source code editor.I am opened in browser when class is selected. But in addition I disappear when there is selected method (it can be changed in the future).Internal Representation and Key Implementation Points.    Instance Variables	methodClass:		<CompiledMethod>"
"EphemeronRegistry","I'm a registry of Ephemerons. My main responsibility is to hold Ephemeron instances to avoid that they are collected, and thus, guarantee their finalization.As soon as an Ephemeron receives the #mourn message, it will tell me to remove himself from me using the #removeEphemeron: message.!! Example of usage An ephemeron registry can be simply used by instantiating it and putting objects inside it:registry := EphemeronRegistry new.registry at: objectThatMayBeCollected put: somePropertyThatWouldBeHoldWeaklyDependingOnTheKey.Notice that the key is the object that is important from the finalization point of view. As soon as the key is only rechable by the ephemeron registry, two things will happen:- The key will be sent #finalize, giving the user the opportunity to override the hook and provide an application specific finalization- They registry will forget the ephemeron. If the value of the ephemeron is only referenced by this ephemeron it will then be collected.Ephemerons are created by the registry itself, and retrieved by the ephemeron registry in case the user needs to manipulate the ephemeron manually:ephemeron := registry at: key put: value.!! Implementation DetailsThis Ephemeron registry is implemented using an IdentitySet to hold the remembered Ephemeron instances. This avoid to scan for keys, and allows the usage of several ephemerons for the same object."
"FFIFunctionSpec","I am used to hold a parsed function signature, describing a C function.Since all C functions having return type, arguments and name (unless it anonymous one), same structure can be used to hold an information about it in my instances.However, what objects used to represent types and arguments is up to code generator."
"RenderBugsTest","A RenderBugz is an infinite recursion bug test for TransformationMorphs.In 3.9 (7067) and before, when TransformationMorph has no rendee there are several methods that will infinitely recurse until manually stopped or the image runs out of memory.So far the ones I've caught are the getters and setters for heading and forwardDirection.So there  are tests for them here.Ideally there would be a way to run a test against a stopwatch to catch endless recursion.Found it. Now incorperated. And the tests should be both save to run and cleanup after themselves even when they fail. So far we have not tested the normal cases of rendering working. I will leave that as a separate task for another time. So this is an automatic test when the bugs are fixed and interactive (crash) tests when the bugs are present.Instance VariablesRevision notes. wiz 5/15/2008 22:58When running tests from the TestRunner browser the test would sporadically fail.When they failed a transfomation morph would be left on the screen and not removed by the ensureBlock. So I changed things to fall under MorphicUIBugTests because that had a cleanup mechansizm for left over morphs.I also added one routine to test for time and one parameter to determine the time limit.To my surprise doubling or tripling the time limit still produced sporadic errors when the test is run repeatedly enough ( I am using a 400mz iMac. )  So now the parameter is set to 4. Things will probably fail there if tried long enough. At that point try 5 etc. I am reluctant to make the number larger than necessary. The tighter the test the more you know what is working.I also added a dummy test to check specifically for the timing bug. It fails on the same sporadic basis as the other test went the time parameter is short enough. This lends confidence to the theory that the timing difficulty is coming from outside the test. The sunit runner puts up a progress morph for each test. So the morphic display stuff is busy and probably also the GC."
"LGitDeltaTypeEnum","/** * What type of change is described by a git_diff_delta? * * `GIT_DELTA_RENAMED` and `GIT_DELTA_COPIED` will only show up if you run * `git_diff_find_similar()` on the diff object. * * `GIT_DELTA_TYPECHANGE` only shows up given `GIT_DIFF_INCLUDE_TYPECHANGE` * in the option flags (otherwise type changes will be split into ADDED / * DELETED pairs). */"
"STONListWriter","STONArrayWriter helps in writing array based STON representations."
"ExceptionTester","Utility class to test exceptions"
"ClyUndeclaredMethodsQueryTest",""
"ClyAccrossWindowNavigationStateTest",""
"IceTipDiffRefreshed","I announce when a diff has been refreshed."
"ComposableModel","This is deprecated class because the original class ComposableModel was renamed to ComposablePresenter. You should stop to use this class and modify your code to use ComposablePresenter."
"InflateStream","This class implements the Inflate decompression algorithm as defined by RFC1951 and used in PKZip, GZip and ZLib (and many, many more). It is a variant of the LZ77 compression algorithm described in[LZ77] Ziv J., Lempel A., ""A Universal Algorithm for Sequential Data Compression"", IEEE Transactions on Information Theory"", Vol. 23, No. 3, pp. 337-343.[RFC1951] Deutsch. P, ""DEFLATE Compressed Data Format Specification version 1.3""For more information see the above mentioned RFC 1951 which can for instance be found at	http://www.leo.org/pub/comp/doc/standards/rfc/index.htmlHuffman Tree Implementation Notes:===========================================The huffman tree used for decoding literal, distance and length codes in the inflate algorithm has been encoded in a single Array. The tree is made up of subsequent tables storing all entries at the current bit depth. Each entry in the table (e.g., a 32bit Integer value) is either a leaf or a non-leaf node. Leaf nodes store the immediate value in its low 16 bits whereas non-leaf nodes store the offset of the subtable in its low 16bits. The high 8 bits of non-leaf nodes contain the number of additional bits needed for the sub table (the high 8 bits of leaf-nodes are always zero). The first entry in each table is always a non-leaf node indicating how many bits we need to fetch initially. We can thus travel down the tree as follows (written in sort-of-pseudocode the actual implementation can be seen in InflateStream>>decodeValueFrom:):	table := initialTable.	bitsNeeded := high 8 bits of (table at: 1).		""Determine initial bits""	table := initialTable + (low 16 bits of (table at: 1)). ""Determine start of first real table""	[bits := fetch next bitsNeeded bits.			""Grab the bits""	value := table at: bits.						""Lookup the value""	value has high 8 bit set] whileTrue:[		""Check if it's leaf""		table := initialTable + (low 16 bits of value).	""No - compute new sub table start""		bitsNeeded := high 8 bit of value].		""Compute additional number of bits needed""	^value"
"ClyOverridingMethodsQueryTest",""
"SimulationMock","I am used to test the behavior of Context>>jump in MethodContextTest. My example methods includes instance variable stores. When my instance is read-only or writeable, the example method uses or not the write barrier call-back. The copy of the context answered can be used to ensure the stack state is correct."
"ClyShowMethodInheritanceCommand","I am a command to show all method implementors in full hierarchy of selected method classes.I select current method in spawned browser by default."
"IceAbstractCommitWalk","Base class for shared code between different commit walk implementations."
"GLMHelperTest",""
"SmalltalkEditingState","See EditingState comments.SmalltalkEditingState is made to manage data for Smalltalk code editing sessions (such as a selector chooser).Instance Variables:   selectorChooser <SelectorChooserMorph>- selectorChooserThe basic selector chooser which is popup to fetch available selectors or class names begining with a prefix. The prefix is token from the current caret location (see SelectorChooserMorph comments)."
"ClyShowVariableRefCommand","I am a command to show all variable references.To show references I ask the browser to spawn new query browser.Internal Representation and Key Implementation Points.    Instance Variables	browser:		<ClyBrowser>"
"HowToMakeYourOwnTutorial","I'm a Pharo tutorial which teach to create a Pharo tutorial. Open me withProfStef goOn: HowToMakeYourOwnTutorial."
"RubEditsStateChangedInModel","I am raised when the user starts to edit a text area in the model side"
"RBRemoveParameterTest",""
"SpecInterpreter","A SpecInterpreter is a interpreter for spec presenters"
"NECTestClass","I'm only for SUnit TestCases."
"IceTag","Representation of a tag"
"EyeInspectorToolBar","Toolbar to explore previous or next inpected elements"
"NECVarTypeGuesser","I'm an InstructionClient that tries to guess the type of a given instance variable name of a class. "
"SharedQueueTest","SUnit tests for shared queues"
"SDL_Version","A structure that contains information about the version of SDL in use. "
"DAPackageCycle","A PDPackageCycle is used to represent a cycle among packages. 	All the packages in the cycle are stored in a Collection, in the their name alphabetical order.As soon as possible, they will be stored in the order they have been found."
"ChunkImportTestCase","SUnit test case for import of chunk format"
"HistoryCollection","/!\ THIS CLASS IS DEPRECATED /!\This class is unused in Pharo and does not bring much value for Pharo users. It will be removed in Pharo 8.==========================================================I'm a data structure used to store an history.My behavior is	- I store Associations (anElement -> anInteger), where anElement is the element to store and anInteger the number of times it has been added. (as a Dictionary)	- I only store once each element (as a Set).	- I have a max size. If I add an element and have reached the max size, I remove the less seen element.	- I store element in the chronological order (as an OrderedCollection)"
"FLContextSerializationTest","SUnit tests for fuel serialization of methods contexts"
"RBRenameMethodTest",""
"RadioButtonGroupPresenterTest",""
"SDL_SysWMinfo_DirectFBInfo","A structure that contains DirectFB specific information about a window. "
"FLByteArrayStreamStrategy","I am a strategy that emulate what we offer with FLSerializer class >> #serializeInMemory:  and  FLMaterializer class >> #materializeFromByteArray: "
"DirectoryExists","I am raised on an attempt to create a directory that already exists."
"QuestionDialogWindow","A yes/no/cancel message dialog. Cancel (escape & return) is the default."
"IceBackendWriterAdapter","Adapter for having MCFileTreeWriters being able to write into Iceberg backend repositories without introducing unpleasant modifications in them."
"MCPatcher","I can add or remove or modify definitions. My main purpose is to generate monticello snapshot out of multiple snapshots or definitions by using my most used method #apply:to:."
"CodeExporter","An utility class for exporting code to changesets (*.cs) or Smalltalk source (*.st) files"
"MCGitBasedNetworkRepository",""
"IceGitCheckoutProgress",""
"TIceCopyCommitId","Description--------------------I am a simple Trait allowing to copy a commit ID to the clipboard without duplicating the code in Iceberg."
"LGitCallError",""
"ZnMimeTypeTests",""
"RBSpecialCharacterToken","RBSpecialCharacterToken is the first class representation of special characters."
"AthensGenericTransform","I am an extended version of my supeclass,and I represent generic 3x3 matrix.<Currently I have no use>"
"IceEmptyWorkingCopy","I am an empty working copy, with no loaded packages."
"RubAbstractSmalltalkMode","I am an abstract class to set a mode of editing for smalltalk"
"RadioButtonPresenterTest",""
"RBCompositeTransformationTest",""
"ExampleForTest1","An example class at level 1 (directly below Object) used for testing class hierarchy"
"FFICalloutTests","Tests for FFICallout"
"PragmaType","This models the type of pragma instances.It essentially knows the keyword that defines the Pragma, and can obtain all occurences of that Pragma.!!Example[[[	PragmaType all]]]"
"IceTipRemoteActionModel",""
"ClyDeprecationEnvironmentPlugin","I am special plugin which analyzes deprecated methods/classes and mark them with deprecation tag.Also I provide deprecated method group to see all deprecated methods together"
"GTSpotterRecorderEvent","GTSpotterRecorderEvent is the root class for representing usage data generated by Spotter. All events have a timestamp."
"RxsCharacter","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A character is a literal character that appears either in the expression itself or in a character set within an expression.Instance variables:	character		<Character>"
"ZdcSocketStream","I am ZdcSocketStream.I am a ZdcOptimizedSocketStream.I further optimize my superclass' methods dealing with bulk input and outputto transparently bypass the internal buffers when this makes sense."
"SycMethodRepackagingCommand","I am a base class for commands which repackage given methods.I provide suitable methods for subclasses to move methods to package: - moveMethod: aMethod toPackage: aPackageSubclasses should just deside what package it should be. "
"IceNoRemoteBranch","The operation you tried (for example push) requires that your branch has a configured upstream (something like origin/branchName), but is has none."
"ReSourceAnchor","A source anchor has a refference to the actual class, method, or other entity that is criticized. An anchor also has a #providesInterval method that returns a boolean indicating if the anchor provides a selection interval to the actual source of the critique. The interval can be accessed through the #interval method"
"RxCharSetParser","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--I am a parser created to parse the insides of a character set ([...]) construct. I create and answer a collection of ""elements"", each being an instance of one of: RxsCharacter, RxsRange, or RxsPredicate.Instance Variables:	source <Stream>	open on whatever is inside the square brackets we have to parse.	lookahead	<Character>	The current lookahead character	elements	<Collection of: <RxsCharacter|RxsRange|RxsPredicate>> Parsing result"
"EpLogNode","I am a node in a tree of Epicea logs, in a particular refresh of the browser. The nodes of such tree are Epicea files and an edge between a node A and another B exist when A contains an entry whose prior node is in B."
"RBAddRemoveDependentsRule","Check that the number of addDependent: message sends in a class is less than or equal to the number of removeDependent: messages. If there are more addDependent: messages that may signify that some dependents are not being released, which may lead to memory leaks."
"BracketSliderMorph","Abstract superclass for morphs that are used to select a component (R, G, B or A) of a colour."
"MalTEdgeNode",""
"ClyMainTableColumn","I am special main table column which represent cells by ClyMainItemCellMorph.My cells are responsible to show expansion icon and any other decoration tools: definition morph, extra tool morps.I ask given queryView to decorate cell which will pass cell morph through all related table decorators."
"ClassAnnotationTests",""
"BalloonEdgeData","BalloonEdgeData defines an entry in the internal edge table of the Balloon engine.Instance Variables:	index	<Integer>	The index into the external objects array of the associated graphics engine	xValue	<Integer>	The computed x-value of the requested operation	yValue	<Integer>	The y-value for the requested operation	height	<Integer>	The (remaining) height of the edge	source	<Object>		The object from the external objects array"
"CmdRootMenuGroup","I represent root of menu"
"MetacelloDictionaryRepositoryTest",""
"ClassAnnotationUnusedExample",""
"MCNoChangesException","Notify that no changes have to be merged"
"RBMoveClassTransformation","Moves a class to a new category or packageUsage:| transformation |transformation := (RBMoveClassTransformation				move: #RBMoveClassTransformation				to: #'Refactoring2-Refactorings-Tests')				transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- the class must exist- the category or package must exist"
"GLMWrapperTest",""
"CairoFontFaceExecutor","A CairoFontFaceExecutor is reponsible of releasing the external 'cairo_font_face_t *' data structure when a corresponding CairoFontFace instance in Smalltalk object memory has been garbage collected.The external data structure may still be referenced from other cairo objects in the external heap as explained in cairo online documentation https://www.cairographics.org/manual/cairo-FreeType-Fonts.html .It is thus vital that we do not release the underlying FreeType face until the number of references drops to 1, meaning that we are the last reference, and that we can safely really finalize the external resource.In order to prevent the free type face to be garbage collected (and its associated FT_face resource to be released), we use an instance variable just for retaining a string reference to it.More details on the object graph can be found on Pharo issue tracker athttps://pharo.fogbugz.com/f/cases/20776/Potential-dangling-ref-to-freed-FT_Face"
"MimeConverter","I'm the base class for converting some data from a MIME type to another. Subclasses should implement #mimeDecode and #mimeEncode."
"SmallIntegerTest","I provide a test suite for SmallInteger values. Examine my tests to see how SmallIntegers should behave, and see how to use them."
"SugsCounterSuggestion","I am creating Counters on AST nodes"
"IceNode","I am a tree implementation used for diffing and merging.I work by composition and not inheritance. My users should use the values of the node (kept in the #value instance variable) and not subclass myself.Each node stores its child nodes in a dictionary, indexed by a key.Tree API: - #/ access to children - #path get the path of the current node in the tree - #parent get the parent node of the current node - #rootNode get the root node of the current tree - #children get the children of the current node - #keys, #keysDo:, #includesKey: enumerate the keys of the node - #at:put, #childAt:ifAbsentPut:, #childAt:ifPresent: - #resolve:, #resolve:ifAbsent: resolve a path in the current node - #replaceBy: replaces the current node by another node - #replace:with: replaces the given child node by another nodeEnumerating API: - #allSatisfy: - #anySatisfy: - #collect: - #detect: - #select: - #count: - #do:Visiting API: - visit:"
"InputTextDropListTest",""
"MCMock","Common superclass for mocks"
"ClyPackageTableDecorator","I am a base class for package table decorators.I am annotated by decoration strategy in context of selected package.So my subclasses should just implement decoration logic"
"RBChangeMethodNameRefactoring","I am an abstract base class for refactorings changing a method name.Doing a method rename involves:rename implementorsrename message sends andremove renamed implementors.I implement the above precedures and provide helper functions for finding and renaming references.Every concrete subclass has to add its own precondition (see #myPrecondition)."
"GLMNumberOfVisiblePagesChanged",""
"ClyInterestingSuperclassScopeTest",""
"FilteredMorphTreeModel","I'm a MorphTreeModel enriched with a filter text field. When a pattern is entered in the textfield, then only appropriate root items are drawn in the tree. Very useful to filter a list of items. This model should be used everywhere a filter is added on top of a list as in NautilusExamples:	""An example with auto-accept for the filter 	(accepted as you type is the default)""	| model morph |	model := FilteredMorphTreeModel new.	model rootItems: Morph allSubclasses.	morph :=  model defaultMorphIn: World.	morph extent: 300@500.	morph openInWorld		""Another example with a ghost string, and the user 	has to accept the filter contents explicitly 	with a return  or CMD-S in the text field""	| model morph |	model := FilteredMorphTreeModel new 		ghostString: 'Enter a pattern'; 		autoAccept: false; 		yourself.	model rootItems: Morph allSubclasses.	morph :=  model defaultMorphIn: World.	morph extent: 300@500.	morph openInWorld		""A dialog window with a filtered list""	| window m |	window := StandardWindow new model: self.	window title: 'Test runner'.	m := FilteredMorphTreeModel new		wrapBlockOrSelector: #selector;		rootItems: Morph methods.	window addMorph: (m defaultMorphIn: window) fullFrame: LayoutFrame identity.	window openInWorldInternal Representation and Key Implementation Points.The initial root item list is kept locally.See #rootItems:Instance Variables	ghostString:		<String>	autoAccept:		<Boolean>	initialItems:		<Collection>	patternModel:		<RubScrolledTextModel>"
"BlockFilter","A filter for blocks"
"BlockClosureTest","SUnit tests for BlockClosure"
"FFITestStructureDoubleStructure",""
"LGitFileHandle",""
"SmallIdentityDictionary","I'm a SmallDictionary (this means faster than default one when dealing with limited number of items)but I check my key based on identity."
"IceWarning","I'm a general warning in the context of iceberg UI."
"RubSmalltalkScriptingMode","I represent the mode to use for editing smalltalk script (class creation script for example)"
"FFIConstantHandleTests","Tests for FFIConstantHandle"
"KMNamedCharKeyCombination","Similar to KMUntypeableSingleKeyCombination I am used for special keys that don't only rely on their key character.The difference to KMUntypeableSingleKeyCombination is that I amtypeable but in shortcut descriptions I use a special name for my character. For example, a key combnation for the space key is a KMNamedCharKeyCombination and will be printed as""Shift + SPACE""rather than""Shift +  "" "
"GLMRubTextFieldMorph","A GLMRubTextFieldMorph is xxxxxxxxx.Instance Variables	customHeight:		<Object>customHeight	- xxxxxRaw functions to center textarea:	""for 16: 20,29 - 4""	""newTop := ((self height - self textArea height) / 2.0).	newTop := newTop truncated abs.""		""for 15: 20,28 - 3""	""newTop := ((self height - self textArea height) / 2.0) + 1.	newTop := newTop truncated abs.""		""for 14: 20,26 - 2""	""newTop := ((self height - self textArea height) / 2.0) + 1.	newTop := newTop truncated abs.""		""for 13: 20,24 - 1""	""newTop := ((self height - self textArea height) / 2.0) + 1.	newTop := newTop truncated abs.""		""for 12: 20,23 - 1""	""newTop := ((self height - self textArea height) / 2.0).	newTop := newTop truncated abs.""		""for 11:  20,21 - 0""	""newTop := ((self height - self textArea height) / 2.0).	newTop := newTop truncated abs.""		""for 10:  20,19 - 0""	""newTop := ((self height - self textArea height) / 2.0).	newTop := newTop truncated.""		""for 9: 20, 18 - 0""	""newTop := ((self height - self textArea height) / 2.0) - 1.	newTop := newTop truncated.""		""for 8: 20, 16 - 1""	""newTop := ((self height - self textArea height) / 2.0) - 1.	newTop := newTop truncated.""		""for 7: 20, 14 - 2""	""newTop := ((self height - self textArea height) / 2.0) - 1.	newTop := newTop truncated abs."""
"RBSmalllintChecker","I apply a lint rule to all classes and methods in a given environment.My main API is - ==run== which resets and runs the rules."
"AbstractEnumerationVisitorTest","SUnit tests for AbstractEnumerationVisitor"
"LIFOQueueTests","SUnit tests for LIFO queues"
"CmdDoubleClickActivation","I represent activation of commands using mouse double click event"
"ClyClass7WithTag1FromP5",""
"MethodDictionary","I'm a special dictionary holding methods. I am just like a normal Dictionary, except that I am implemented differently.  Each Class has an instance of MethodDictionary to hold the correspondence between selectors (names of methods) and methods themselves.In a normal Dictionary, the instance variable 'array' holds an array of Associations.  Since there are thousands of methods in the system, these Associations waste space.  Each MethodDictionary is a variable object, with the list of keys (selector Symbols) in the variable part of the instance.  The variable 'array' holds the values, which are CompiledMethods.About flushCache methods and usage.The VM caches method lookups in a lookup cache from class,selector pairs to method,primitive pairs, where primitive may be null.  This is called the first-level method lookup cache.  The JIT VM caches message lookups in machine code, so that a particular piece of machine code exists in a state that invokes a method for a specific class very fast by embedding the class reference in a register load and the target method in a call instruction, and having the target method verify this ""cache probe"" (this is an ""in-line cache).  The JIT also caches the translation of a byte coded method to machine code, by hiding a reference to a machine code method in a byte coded method.These caches can be invalidated in several circumstances:1a. if one adds or removes a method from a class's method dictionary it may change the correct results of a lookup not merely of the class whose dictionary was updated but also subclasses of the class.1b. if one replaces a method in a method dictionary this changes the target method for a lookup of the selector for the class and subclasses2. if one wants to rewrite the byte code or literals of a method, for example because a Slot definition has changed, then if the method has been compiled to machine code, the machine code must be discarded before the new code may be executed1a & 1b are done via Symbol>>flushCache.  In response the normal VM flushes its first-level method lookup cache, and the JIT also scans all of machine code looking for inline caches with that selector, and voiding them, reverting each send site for that selector to the ""unlinked"" state.There used to be confusion in Squeak, which Pharo inherited, that using CompiledMethod>>flushCache was somehow the right way to void caches when updating method dictionaries, flushing the old method in the dictionary, if any, and the new method.  It isn't, precisely because adding or removing methods affects the visibility of inherited methods with the same selector.  So MethodDictionary code should use Symbol>>flushCache, and only once, on each update of a method dictionary.  As a result, the VM will ensure that the necessary send caches are flushed for that selector.2. is done via CompiledMethod>>flushCache.  In response the VM searches the first-level method lookup cache and removes all entries whose target is the method.  In addition the JIT discards the machine code for the method, and searches for all send sites with that method's machine code as the target and voids them, reverting them to the unlinked state.The VM must be told to flush the cached state for a compiled method via CompiledMethod>>flushCache and will /try/ and void the state for that method.  But it can't always deal with existing activations of that method, because if there are activations running the machine code, that machine code can't merely be thrown away, and can't be replaced because its length may change, depending on literals or byte codes.  So this kind of byte coded method manipulation needs to be done with case and some understanding of the total system state."
"RBNumberLiteralToken","I am a number literal token. Special handling is needed for converting a negative literal token if it is part of a binary message send. In an expression likea - 1the scanner produces the tokens 'a' and '-1'. This will be converted to the token'a', the binary selector token '-' and the number literal token '1'."
"IceTipUnloadPackageCommand","Command to unload a package from the system, keeping it in the repository"
"BaselineOfIceberg",""
"ZnServerTransactionEvent","ZnServerTransactionEvent is a ZnServerLogEvent that notes the completion of a server side HTTP transaction (request/response).Instance Variables	request: a ZnRequest	response:	a ZnResponse	timing: a ZnServerTransactionTimingNote that this can be quite large since it includes the entities transferred. See ZnSimplifiedServerTransactionEvent for a more compact representation."
"LazyClassListExample","LazyClassListExample new openOn: Object"
"ClyFullBrowserContext","I represent a context of the full browser, i.e., a selected class, package, method, group of methods,...I extend superclass interface with class and method groups information. And I keep meta level scope of the browser. Internal Representation and Key Implementation Points.Instance Variables	metaLevelScope:		<ClyMetaLevelClassScope>"
"SHStyleElement","A Shout style element"
"ReturnValueDebugAction","A ReturnValueDebugAction forces a return of a given value to the previous context"
"PharoSyntaxTutorial","The default Pharo tutorial to learn the Pharo syntax"
"IceGitLocalRepositoryType","I resolve git local repositories (repositories already existing on your disk).A gitlocal repositoy is composed of: gitlocal://full/path/to/repositorygitlocal  		- The git local identifierfull/path/...	- This is a path to the place where the sources are. 	For example, if you have a  repository in '/dev/voyage', which also has sources in subdirectory 'mc', your full path will be: '/dev/voyage/mc'. A part of my responsibilities is to find the git root  in the path provided.Example: ------------A script to install voyage using this would like more or less like this:Metacello new	repository: 'gitlocal://Users/esteban/Dev/Repository/voyage/mc';	baseline: 'Voyage';	load: 'mongo tests'."
"SettingsStonReader","I am a reader of system settings from a file (stream). I know how to load the settings and I return those stored settings.Collaborators: SystemSettingsPersistencePublic API and Key Messages- stream:   - secureLoad - loadInternal Representation and Key Implementation Points.    Instance Variables	storedSettings:		<Array>	stream:				<ReadStream>"
"IceGitCommit",""
"RBBrowserClassRefactoringHelp","This is the chapter of the refactoring help book about the class refactoring available in the System Browser."
"AnnouncementSetTest","SUnit tests for announcement sets"
"IceTipMergeMorph","I redefine PSMCMergeMorph to be able to use an IceMergePatchMorph as patch morph"
"LazyTabGroupTest",""
"BlockClosure","I contain a sequence of operations. I am defined by Smalltalk expressions inside square brackets. I permit to defer the enclosed operations until I execute a variant of #value. I can have my own arguments and temporaries as a regular method, but I am also able to use external variables: my enclosing method or block temporaries, arguments and receiver.examples :[ 1 + 2 ] value[ :arg | 	| temp | 	temp := arg. 	temp ] value: 5[ ^ 5 ] valueMy return value corresponds to my final expression. A non local return (^) has the same effect as if I did not exist: it returns from my enclosing method, even if I'm nested in other blocks. Implementation:Instance variables:	outerContext <Context|nil> context that defined me	startpc: <SmallInteger> (pc = program counter) offset of my first bytecode instruction in the compiledMethod bytecode  	numArgs: <SmallInteger> my number of argumentsI am created at runtime through a special bytecode:closureNumCopied: x numArgs: y bytes z1 to z2On creation, the currently executed context is set to my outerContext, z1 is set as my startpc and y is set as my numArgs. After my creation, the current execution flow jumps to my last bytecode, z2, to skip the execution of my bytecode which is deferred until I execute a variant of #value.I am executed when I receive a variant of the message value. This message creates a new context, a block context <MethodContext>, which reference me in its variable closureOrNil. This new context executes my bytecode, which correspond to a subset of the bytecode of my enclosing method, starting at startpc and ending in blockReturn/return bytecode.Accessing variables of the my enclosing context is different depending on variables because of various optimizations:- self: I access the receiver of my enclosing method by accessing my context's receiver, which is always set to the enclosing method receiver.- copied variables: If I read a variable from an outerContext but I don't write into it and the variable is not modified after the BlockClosure creation, then the variable is copied in the blockClosure to be more efficient. - full variable: If I access and edit a variable from an outerContext, then the variable is stored in an external heap allocated array (named tempVector). The tempVector is known by the method and the block so they can both read and write these variables.Optimized block closures: Common blocks (2/3 of the blocks) are optimized directly in the compiler and have special behaviors. These blocks are the arguments/receiver of control structures: #ifNil:, #ifNotNil:, #ifTrue:, #ifFalse:, #whileTrue:, #whileFalse:, #to:do:, #to:by:do: ."
"UnixPlatform","I am a an object representing a Unix platform. Use myself to access platform specific features.Please keep me polymorphic to the the other platform objects.To get the current platform, you can evaluate:OSPlatform current."
"ClyClassDefinitionProperty","I represent definition of class which includes package and class itself as defining objects.You can create me by: 	ClyClassDefinitionProperty of: aClass"
"ZnNewLineWriterStreamTests",""
"OSWindowMouseEnterEvent","I am delivered when mouse enters the area , covered by a window"
"LGitDiffStats",""
"GTSpotterCandidateSelected",""
"UUIDGenerator","I am UUIDGenerator, I generate UUIDs.An RFC4122 Universally Unique Identifier (UUID) is an opaque 128-bit number that can be used for identification purposes. Concretely, a UUID is a 16 element byte array.The intent of UUIDs is to enable distributed systems to uniquely identify information without significant central coordination. In this context the word unique should be taken to mean ""practically unique"" rather than ""guaranteed unique"". I generate UUIDs similar, in spirit, to those defined in RFC4122, though I use version 0 to indicate that I follow none of the defined versions. This does not matter much, if at all, in practice.I try to conform to the following aspects: - each 'node' (machine, image, instance) should generate unique UUIDs - even when generating UUIDs at a very fast rate, they should remain unique - be fast and efficientTo achieve this goal, I- take several aspects into account to generate a unique node ID- combine a clock, a counter and some random bits- hold a state, protected for multi user accessI can generate about 500K UUIDs per second.Implementation:Although a UUID should be seen as totally opaque, here is the concrete way I generate one:- the first 8 bytes are the microsecond clock value with the smallest quantity first; this means that the later of these 8 bytes will be identical when generated with small(er) timespans; within the same clock resolution interval, the full first 8 bytes will be identical- the next 2 bytes represent a counter with safe overflow, held as protected state inside me; after 2*16 this value will repeat; the counter initalizes with a random value- the next 2 bytes are simply random, based on the system PRNG, Random- the final 4 bytes represent the node ID; the node ID is unique per instance of me, across OS environments where the image might run; the node ID is the MD5 hash of a string that is the concatenation of several elements (see #computeNodeIdentifier) Some bits are set to some predefined value, to indicate the variant and version (see #setVariantAndVersion:)Usage:  UUIDGenerator next.  UUIDGenerator current next.  UUIDGenerator new next.Sharing an instance is more efficient and correct.Instances should be reset whenever the image comes up.See also:  http://en.wikipedia.org/wiki/UUID  https://tools.ietf.org/html/rfc4122"
"StepOverDebugAction","A StepOverDebugAction the current context."
"Array","Array is a fixed-sized collection of elements accessed by integer indices. Contrary to the C convention, the first element of a Smalltalk array is at position 1 and not 0. The main protocol to access array elements is the method at: and at:put:. - at: anInteger returns the element at index anInteger. - at: anInteger put: anObject puts anObject at index anInteger. Arrays are fixed-size collections therefore we cannot add or remove elements at the end of an array. The following code creates an array of size 5, puts values in the first 3 locations and returns the first element.[[[ | anArray |anArray := Array new: 5. anArray at: 1 put: 4. anArray at: 2 put: 3/2. anArray at: 3 put: 'ssss'. anArray at: 1			> 4]]]#() creates literal arrays with static (or “literal”) elements that have to be known when the expression is compiled, and not when it is executed. The following code creates an array of size 2 where the first element is the (literal) number 1 and the second the (literal) string 'here'.[[[  #(1 'here') size > 2]]]{ } is a way to create arrays in a more dynamic manner.[[[ | array |array := (Array new: 2). array	at: 1 put: (Point x: 10 y: 20);	at: 2 put: (Point x: 10 y: 20). 	array			]]]is equivalent to [[[{(10@20) . (10@20)}{Point x: 10 y: 20 . Point x: 10 y: 20}]]]"
"NewValueHolder","I am a class holding any object inside its unique instance variable. Each time the instance variable value changes, an announcement is emitted. The instance variable is accessed through `value` and `value:` while the registration is done by `whenChangedDo: aBlock`. In addition, infinite loops of propagation are prevented. Use case: you have two lists A, and B, and you want to keep their selection synchronised. So when A selection changes, you set B selection. But since B selection changes, you set A selection, and so on… This case is prevented by the use of a `lock` variable."
"LGitBlob",""
"ClyMethod","I represent the type of any kind of methods.I am introduced to abstract actual method implementation where in live system it would be CompiledMethod.So when Calypso build browser items for methods their type is supposed to be me.Look at class references to discover all compatible method definitions."
"MCModification","A MCModification represents the operation to modify an entity to a snapshot. "
"ClyVariableContextOfFullBrowser","I am a context of selected variables in full browser"
"ClyFindClassCommand","I am a command to find class and show it in the browser.By default I am executed by cmd+f shortcut"
"ClyTestedEnvironmentPlugin","I mark covered methods with information about test which cover them.I decorate covered methods with ClyTestedMethodProperty which includes information about test result (ClyTestResultProperty). To find covering test I use simple hueristics: - Test or Tests suffix - test prefix for method name with various combinations.Look at ""tests lookup"" methods for details."
"DAPackageRelationGraphDiffTest",""
"EndianDetector","I am EndianDetector, a class responsible of detecting the endianess in the current machine.I do so in my #calcEndianess method, which works as follows: - it creates a float object, whose endianess is managed automatically by the VM. - copy the raw data of that float object into a bytes object (instance of my class) - then, we can check in the raw copy if the data of the float is in the least or more significant word of the object.Internally, I do the raw data copy by changing the class of the float into me. To do that I have the following properties:- I'm a compact class (required to change the class)- I'm in the startup list to check this on every startup"
"LGitRemoteCompletionTypeEnum",""
"ThemeIconsStoredSetting","I am responsible for storing information about ThemeIcons objects."
"IceTipDeleteRemoteCommand","Command that deletes the selected remote"
"StandardFileStream","Provides a simple, platform-independent, interface to a file system. The instance variable rwmode, inherited from class PositionableStream, here is used to hold a Boolean -- true means opened for read-write, false means opened for read-only.  2/12/96 swI implement a simple read buffering scheme with the variables defined in PositionableStream (which are unused in me otherwise) in the following way:	collection	<ByteString> or <ByteArray>	This is the buffer.	position	<Integer>	The relative position in the buffer. Greater or equal to zero.	readLimit	<Integer>	The number of bytes buffered. Greater or equal to zero.Read buffering is enabled with #enableReadBuffering, disabled with #disableReadBuffering and it is enabled by default. The buffer is filled when a read attempt of an unbuffered absolute position is requested, or when a negative repositioning is made (with #position: with an argument < than the current absolute position) to an absolute position which is not buffered. In the first case, the buffer is positioned to the given absolute position. In the latter case the repositioning is made to the requested absolute position minus fourth of the buffer size. This means that further small negative repositionings won't result in buffer flushing. This is really useful when filing in code.The read buffer is flushed (#flushReadBuffer) whenever a write attempt is made.The buffer state is valid if and only if collection is not nil and position < readLimit."
"MailComposition","a message being composed.  When finished, it will be submitted via a Celeste."
"TextDiffBuilder","I implement the diff algorithm. I can show the differences between two texts. See my method comments for further information.Instance Variables	xLines:		<Array>	yLines:		<Array>xLines	- an Array of DiffElement which is created from the first input textyLines	- an Array of DiffElement which is created from the second input text"
"EpTriggeringIntegrationTest",""
"OCSlotVariable","I am a slot in a class. Actual code generation is forwarded to the Slot class.e.g. an InstanceVariableSlot will generate bytecode for reading and writing an ivar, while other Slots either just call the reflective operations of the Slot (#read: and #write:to) or do their own code generation."
"GTInspectorHelp",""
"Timespan","I represent a duration starting on a specific DateAndTime."
"BreadthFirstGuide","I traverse the filesystem in breadth-first order. Given this hierarchy:alpha	beta	gammadelta	epsilonI would visit the nodes in the following order:  alpha, delta, beta, gamma, epsilon.I use my work instance variable as a queue, adding nodes to be visited to the end and retrieving them from the beginning."
"GLMDirection",""
"TDictionaryIncludesWithIdentityCheckTest","A trait for test purposes"
"ClassModificationApplied","This announcement will be emitted when a class or a trait definition changes and completally installed.It is different than ClassModifiedClassDefinition because it signalled only after new version of class/trait object is installed to system by become operation.  And that's why only modifiedClass variable is available (after #becomeForward: operation old version of class/trait disappear)"
"GTSpotterRecorderOpenEvent","A GTSpotterRecorderOpenEvent  models the action of  opening Spotter.Instance Variables	timestamp:		<Object>timestamp	- xxxxx"
"LGitCloneOptions",""
"OmEntryReader","I implement how to read entries from a stream."
"ZnEntity","I am ZnEntity, an abstract HTTP Entity.An entity has a content type (mime-type), a content length (byte length) and a contents.Entities can encode and decode themselves to and from binary streams.Part of Zinc HTTP Components."
"ClyInheritedMethodGroup","I am group of inherited methods. Depending on my query I include methods from on or all traits and superclasses which are inherited by given classes.I can be expanded by subgroups of each inherited class. It will be also my instances but they will be configured by single class scope method query.In the browser I provide few checkboxes to switch method visibility. It is based on my visibilityLevels, collection of ClyMethodVisibilityLevel instances.They are extended by plugins. For example Traits plugin adds local trait visibility level. Internal Representation and Key Implementation Points.    Instance Variables	visibilityLevels:		<Collection of<ClyMethodVisibilityLevel>>"
"NECTestSuperClass","I'm only for SUnit TestCases."
"RGMetatraitDefinitionTest","SUnit tests for Ring classtrait definitions"
"TestReviver","I am a UI for test failures which have been serialized as fuel files. You can:- materialize the failed test process to debug- browse the test method.self open"
"ClyFullEnvironmentUpdateStrategy","I am special strategy to perform full update of environment after multiple changes when all cached query results were correctly updated. I collect all changes and publish them all together when environment finish overall processing. Internal Representation and Key Implementation Points.    Instance Variables	changes:		<IdentityDictionary of<ClyQueryResult, Announcement>>"
"OSJoyButtonUpEvent","This event is delivered when user releases a previously pressed joystick button."
"MorphWithSubmorphsWrapper","Display a morph in a SimpleHierarchicalListMorph, and arrange to recursively display the morph's submorphs.  The ""item"" that is wrapped is the morph to display."
"PluggableSetTest","SUnit tests for pluggable sets"
"RGBWidgetTest",""
"CheckBoxExample","A CheckBoxExample is a simple example of how to use CheckBoxes.self example"
"FTVisibleItemsStrategy","I am a Strategy that will use the function on the visible items of the tree.Description-----------------------I will search in the vsible items of the tree.As said in my superclass I am use by a FTTreeDataSource to help with a FTFunction.Public API and Key Messages------------------------ #realSearch 	is the method that will launch the search.Example-----------------------	| ds |	ds := FTTreeDataSource		roots:			((ProtoObject allSubclasses sort: [ :a :b | a asString < b asString ])				reject: [ :e | e asString endsWith: 'class' ])		children: [ :item | item subclasses sort: [ :a :b | a asString < b asString ] ].	ds searchStrategy: #default. ""This will say to the FTTreeDataSource to use me, but since this is the default, this is optional.""	FTTableMorph new		extent: 200 @ 400;		dataSource: ds;		explicitFunction;		openInWindow "
"FLMaterializationError","I represent an error happened during materialization."
"ClyStandardBrowserPlugin","I represent kind of standard browser plugin.All table decorators are belongs to me by default."
"LGitCheckoutNotifyCallback",""
"SpecStubListAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"ClyClassCommentsQueryTest","I am a test case which describes the ClyClassCommentQuery.It should find all classes which comments includes the given string.In tests I use following substring:	it should be in the comment of this class to test class comment querywhich should be found"
"MetacelloConfigTemplateExample","Copy me to create a new configuration or edit and evaluate the following doits.        ""Create configuration class and initial baseline method""        MetacelloToolBox                 createBaseline: '1.0-baseline'                for: 'MyProject'                repository: 'http://www.example.com/MyProjectRepository'                requiredProjects: #('Gofer')                packages: #('MyProject-Core' 'MyProject-Tests')                dependencies:                        {('MyProject-Core' -> #('Gofer')).                         ('MyProject-Tests' -> #('MyProject-Core'))}                groups:                        {('default' -> #('Core')).                        ('Core' -> #('MyProject-Core')).                        ('Tests' -> #('MyProject-Tests'))}.	   ""create initial development method from the baseline""         MetacelloToolBox               createDevelopment: '1.0'               for: 'MyProject'                importFromBaseline: '1.0-baseline'                description: 'initial version'."
"GLMBrickDataChanged","A GLMBrickDataChanged is fired when GLMBrick>>data is changed"
"Magnitude","I'm the abstract class Magnitude that provides common protocol for objects that havethe ability to be compared along a linear dimension, such as dates or times.Subclasses of Magnitude include Date, ArithmeticValue, and Time, as well asCharacter and LookupKey.  My subclasses should implement  < aMagnitude   = aMagnitude   hashHere are some example of my protocol:     3 > 4     5 = 6     100 max: 9	7 between: 5 and: 10 "
"FinderPragmaMethodNode","A FinderPragmaMethodNode is a method node for a selector name found by the pragma collector. Unlike a FinderMethod node, this node is not bound to unique compiled method, it is just the selector."
"IceTipMergeBranchDialog","I'm a dialog to perform a merge of a branch.(self onRepository: IceRepository registry anyOne) openDialogWithSpec"
"WindowEvent","I'm an event related to the host window, only dispatched to the World. "
"ClyInspectSelectionCommand","I am a command to inspect current selected items in the browser.If there is multiple selection I open inspector on selected list.And when there single selection I open inspector directly on single item.Internal Representation and Key Implementation Points.    Instance Variables	selectedItems:		<Collection of<Object>>"
"EyeAbstractInspector","I am the abstract superclass for all kind of inspectors"
"RegexCompilationError","This class represents compilation errors in regular expressions."
"GTPlaygroundHelp","A utility class containing the help for the GT Playground."
"ClyBrowserCommand","I am the root of the command hierarchy which affects state of the browser.Instance Variables	browser:		<ClyBrowser>"
"FLAbstractCollectionCluster","A FLAbstractCollectionCluster is the common behavior for all cluster collections. "
"MockSocketStream","A test mock for socket streams"
"CmdMenuTests",""
"IceTipActionPanel","I'm a simple action bar to be used as footer of certain panels (see IceTipCommentPanel as example)"
"AthensCairoTransform","i implement AthensTransform protocol using cairo-specific functions."
"RBDetectIfNoneRule","Replaces detect:ifNone: and contains: when used with the semantics of anySatisfy: by anySatisfy:.For example, [[[ collection detect: [:each | .... ] ifNone: [nil]) notNil	]]]is transformed into [[[ collection anySatisfy: [ :each | .... ])]]]"
"SourceCodeProRegular","http://sourceforge.net/projects/sourcecodepro.adobe/Copyright 2010, 2012 Adobe Systems Incorporated (http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe Systems Incorporated in the United States and/or other countries.This Font Software is licensed under the SIL Open Font License, Version 1.1.This license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL-----------------------------------------------------------SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007-----------------------------------------------------------PREAMBLEThe goals of the Open Font License (OFL) are to stimulate worldwidedevelopment of collaborative font projects, to support the font creationefforts of academic and linguistic communities, and to provide a free andopen framework in which fonts may be shared and improved in partnershipwith others.The OFL allows the licensed fonts to be used, studied, modified andredistributed freely as long as they are not sold by themselves. Thefonts, including any derivative works, can be bundled, embedded, redistributed and/or sold with any software provided that any reservednames are not used by derivative works. The fonts and derivatives,however, cannot be released under any other type of license. Therequirement for fonts to remain under this license does not applyto any document created using the fonts or their derivatives.DEFINITIONS""Font Software"" refers to the set of files released by the CopyrightHolder(s) under this license and clearly marked as such. This mayinclude source files, build scripts and documentation.""Reserved Font Name"" refers to any names specified as such after thecopyright statement(s).""Original Version"" refers to the collection of Font Software components asdistributed by the Copyright Holder(s).""Modified Version"" refers to any derivative made by adding to, deleting,or substituting -- in part or in whole -- any of the components of theOriginal Version, by changing formats or by porting the Font Software to anew environment.""Author"" refers to any designer, engineer, programmer, technicalwriter or other person who contributed to the Font Software.PERMISSION & CONDITIONSPermission is hereby granted, free of charge, to any person obtaininga copy of the Font Software, to use, study, copy, merge, embed, modify,redistribute, and sell modified and unmodified copies of the FontSoftware, subject to the following conditions:1) Neither the Font Software nor any of its individual components,in Original or Modified Versions, may be sold by itself.2) Original or Modified Versions of the Font Software may be bundled,redistributed and/or sold with any software, provided that each copycontains the above copyright notice and this license. These can beincluded either as stand-alone text files, human-readable headers orin the appropriate machine-readable metadata fields within text orbinary files as long as those fields can be easily viewed by the user.3) No Modified Version of the Font Software may use the Reserved FontName(s) unless explicit written permission is granted by the correspondingCopyright Holder. This restriction only applies to the primary font name aspresented to the users.4) The name(s) of the Copyright Holder(s) or the Author(s) of the FontSoftware shall not be used to promote, endorse or advertise anyModified Version, except to acknowledge the contribution(s) of theCopyright Holder(s) and the Author(s) or with their explicit writtenpermission.5) The Font Software, modified or unmodified, in part or in whole,must be distributed entirely under this license, and must not bedistributed under any other license. The requirement for fonts toremain under this license does not apply to any document createdusing the Font Software.TERMINATIONThis license becomes null and void if any of the above conditions arenot met.DISCLAIMERTHE FONT SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENTOF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THECOPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIALDAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISINGFROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROMOTHER DEALINGS IN THE FONT SOFTWARE."
"ClassMethodBrowserTest",""
"GLMSelectedPageChanged",""
"AbstractSessionHandler","API  to manage startup and shutdown of a session.On startup, isImageStarting indicates wheter the image is starting or just resuming from a save.On shutdown, isQuitting indicates if we save and quit the image  or if we just save  the image.  "
"RBRemoveDirectAccessToVariableTransformationTest",""
"ZnClientIgnoringExceptionOnConnectionReuseEvent","ZnClientIgnoringExceptionOnConnectionReuseEvent signals that a client connection was reused and that an exception occurred. Normally, there is one retry after that, trying to reconnect."
"RubPlainTextMode","I represent the mode to use to edit plain text (in menus, help browser etc)"
"GlobalIdentifierStonPersistenceTest","SUnit tests for GlobalIdentifierStonPersistence"
"MethodFinderBottomClass","Test sample for MethodFinderTest"
"Exception","This is the main class used to implement the exception handling system (EHS).  It plays two distinct roles:  that of the exception, and that of the exception handler.  More specifically, it implements the bulk of the protocols laid out in the ANSI specification - those protocol names are reflected in the message categories.Exception is an abstract class.  Instances should neither be created nor trapped.  In most cases, subclasses should inherit from Error or Notification rather than directly from Exception.Exceptions have an optional #messageText that can be set when they are signaled.Exceptions also have the concept of #signaler, the object that is the subject of the exception.This will be set automatically (to the #receiver), but can be set when the exception is signaled. In implementing this EHS, The Fourth Estate Inc. incorporated some ideas and code from Craig Latta's EHS.  His insights were crucial in allowing us to implement Context>>valueUninterruptably (and by extension, #ensure: and #ifCurtailed:), and we imported the following methods with little or no modification:Context>>terminateTo:Context>>terminateContext>>receiver:Context>>answer:Thanks, Craig!"
"IceTipRepositoryBrowser","I'm a browser to show the internals of a repository. I will show remotes, branches, tags and all possible operations in low level repository (pull, push,  branch. But all edit remotes, etc.)"
"SettingDeclaration","A SettingDeclaration is an handler for a writtable setting value. Its main responsibility is allow real value changing and to hold descriptive data about the setting. When the real value is changed, all declared listeners are notified. The standard event mechanism is used for that purpose. See #value: method which is call in order to change a setting value. Whatever object can declare its interest in the real value changes by sending #whenChangedSend:to: to a setting. See notification protocol.For convenience, my olds values are registered in a list. This list is used by the SystemSettingBrowser in order to easily retrieve previous values.The type instance variable is a Symbol. It is used by the SystemSettingBrowser in order to build the input widget of a setting.It can be the name of the class or the name of a superclass of the value. In that case, the input widget is built by #settingInputWidgetForNode: implemented by the class which name is the value of the type instance variable. As an example, the input widget for a Boolean is built by Boolean class>>settingInputWidgetForNode:.Type value is not limited to be a class name. It can also be whatever symbol. In that case, the selector corresponding to the message to send to the setting in order to build the inputWidget is built by SettingDeclaration>>localInputWidgetSelector. If the type instance variable is not set, then it is dynamically set to the class name of the value. See SettingManager comment for more explanations.Instance Variables	default:		<Object>	getSelector:		<Object>	ghostHelp:		<Object>	setSelector:		<Object>	type:		<Object>default	- xxxxxgetSelector	- xxxxxghostHelp	- xxxxxsetSelector	- xxxxxtype	- xxxxx"
"SimpleBorder","see BorderedMorph"
"IceTipCredentialsStoreContext","I am the context when working on a credentials store."
"ZnUserAgentSession","I represent a session store for an HTTP client instance of ZnUserAgent. I hold the cookie jar for the session and any authentication credentials used by the client.Part of Zinc HTTP Components."
"ClyAllCritiqueQuery","I am abstract critique query which subclasses are supposed to return all critiques abailable from scope.It is possible to retrieve critiques differently from objects which are visible from scope.My subclasses define concrete way but all of them return all critiques without any extra condition.They should implement method: - analyzedObjectsDo: aBlock"
"MetacelloMCPackagesSpecTestCase",""
"GLMFocusedPageChanged",""
"IceTipCachedModel","I'm a cached model. I take all unary messages sent to my realObject and I cache their values. I keep a cache with rules for reset it, which can be accessedon the #resetOn: family of messages."
"Class","I add a number of facilities to those in ClassDescription:	A set of all my subclasses (defined in ClassDescription, but only used here and below)	A name by which I can be found in a SystemDictionary	A classPool for class variables shared between this class and its metaclass	A list of sharedPools which probably should be supplanted by some better mechanism.My instances describe the representation and behavior of objects. I add more comprehensive programming support facilities to the basic attributes of Behavior and the descriptive facilities of ClassDescription.The slot 'subclasses' is a redundant structure.  It is never used during execution, but is used by the development system to simplify or speed certain operations.  "
"ReInvocationSequenceRule","I am checking for the violation in message sequences.Subclass me and rewrite initialization method to all super initialize and then all the sequences with the methods for adding protocol.Check the class side examples for examples.You have to callReRuleManager resetto make changes take place!!!!!!!!!!!!!!!!"
"ZnCurrentServerSession","I am ZnCurrentServerSession.I am a ProcessLocalVariable and a ProcessSpecificVariable.I hold a reference to the current ZnServerSession instance during HTTP processing, during the dynamic scope of #handleRequest:ZnServerSessions are created lazily."
"RubTextComposer","I represent the composer of a text, I am used to represent a paragraph"
"FLPointerObjectCluster","I have the common behavior for storing and loading pointer objects."
"RBMoveClassTransformationTest",""
"CheckBoxModel","This is deprecated class because the original class CheckBoxModel was renamed to CheckBoxPresenter. You should stop to use this class and modify your code to use CheckBoxPresenter."
"AthensStrokePaint","I representing a stroke paint object used by Athens.My subclasses provide backend-specific implementation.I am more serving to define the common protocols andrequirements for all backends (such as defaults).IMPORTANT NOTE: a stroke paint object provides a protocol only for setting stroke properties, but not retrieving them back.This is intentionally, because the way how these properties ismanaged are highly backend-specific. The stroke paint has following properties: - fill paint. A paint to use for filling strokes.	Can be any athens basic paint, except from stroke one. - stroke width. Can be set using #width:	Default: if width is not set explicitly for stroke paint,		it is assumed to be equal to 1.0.		 - join style. 		Currently there are 3 kinds of joins supported:			bevel			miter			round		To set join style for paint, use 			#joinBevel, #joinMiter or #joinRound methods.	Default: if join style is not explicitly set for stroke paint,		it will use bevel join style. - cap style		supported: butt, round and square.		To set cap style, use			#capButt, #capRound or #capSquare methods.	Default: if cap style is not explicitly set for stroke paint,		it will use butt cap style. - miter limit, set with #miterLimit: accessor.	(default and meaning of limit is not yet determined)Dashes: 	stroke can use dashing. 	Dash is special kind of stroke which won't draw a continuous	stroke connecting path segments, but instead stroke with	alternating fill-gap style , defined by provided input.		Protocol:		paint 		dashes: dashPattern 		offset: anOffset.			The dash pattern is a simple 	collection of alternating lengths, like: 	#(""fill"" 50 ""gap"" 50) 		in this example , first 50 length units of path	will be filled with stroke, and next 50 will be skipped,	forming a gap, then again filled and again skipped,	and so on until path ends.	The dash pattern can contain as many length elements	as needed. Just remember that each odd element represents	length to fill with stroke, and each even element, length to skip,	while traversing along the path.		The offset controls the shift in length units, 	relative to path start.		Default: if dash is not explicitly set for stroke paint,		it will fill the path using continuous stroke (no gaps). "
"ContributingToTheCatalogHelp","Help file on how to contribute to catalog"
"GoferTest","Abstract superclass for Gofer tests"
"ImageCleaner","Used for cleaning the image.You can use one of my 2 methods: - CleanUpForRelease	reinitialize the fonts	reset metacello registry	remove Empty Categories	remove Empty Packages	sort Categories	remove undeclared globals	remove obsolete references	Launch the smalltalk cleanup		run clean up on all the instances of the classes that implement cleanUp- CleanUpForProduction	All the previous actions +	remove the background logo	remove the tests	remove the tools	remove the versionner"
"FLVariableObjectCluster","I am a generic cluster for objects with indexable variables."
"MCDiffyVersion","A diffy version"
"ClyAbstractMethodsQueryTest",""
"ClyBrowserDialogContext","I represent a context of specific dialog which can be opened from the specific browser.For example there is ClyBrowserSearchDialog. It opens from the browser to allow user choose specific item from the given environment query.I allow to bind special context implementation to this kind of dialog which can be different depending on the browser.For example system browser require special ClySystemSearchDialogContext which implement system related context interface.Following example shows how to use me to annotate specific kind of browser dialog context:	ClySystemSearchDialogContext class>>selectionStrategy		<classAnnotation>		^ClyContextSelectionStrategy for: (ClyBrowserDialogContext of: ClyBrowserSearchDialog in: ClyFullBrowser)Internal Representation and Key Implementation Points.    Instance Variables	browserClass:		<ClyBrowser class>	dialogClass:		<Class>"
"SycRenameVariableCommand","I am a command to remove given variable.My #variable should be compatible variable object like ClassVariable or Slot. Or Calypso provide ClyVariable subclasses.Internal Representation and Key Implementation Points.    Instance Variables	newName:		<String>	variable:		<Variable>"
"LGitBlameHunk",""
"GLMAnnouncementPropagationTest",""
"FTStaticBasicItem","I am an Item of a tree that keep a data and I keep staticly my children. I cannot regenerate them. Description-------------------------------------------------I am created by a FTTreeFunctionStrategy for some filter. For example it is hard to be able to update a Tree when you filter all his elements. In that case the FTAllItemsStrategy create me during a filter.Public API and Key Messages-------------------------------------------------- #children: 	allow to set my childrens    Example-------------------------------------------------FTStaticBasicItem new		data: 5;		depth: 2;		children: aCollectionOfItems;		yourself. "
"GLMFinderTest",""
"ClassStoredSetting","I am responsible for keeping class name."
"GLMTreeMorphStrongSelectionChanged",""
"SpecLayoutProperties","Used to describe properties for layouts in Spec"
"RGVariableDefinitionTest","SUnit tests for variable definitions"
"VTermTestRunner","I am command line test runner. I run a TestSuite and outpout the progress in a terminal friendly way with XTerm characters."
"GTClearEditorDebugAction","This action is responsible for canceling/clearing the changes in a code editor from a debugger."
"T2TraitWithComplexSlots","Unit test for traits with complex slots"
"GroupboxMorph","Groupbox with title with a vertical layout. Appears in a lighter colour than the owner's pane colour."
"ClyGroupedInstanceVariables","I special variable query result which filters instance variables and represents them as ClyVariableMethodGroup instances in hierarchical order.In addition I add extra method group for class variables if they exist. It shows all class variables when it is expanded.And I add default ClyAllMethodGroup as first item. "
"LGitTag","A LGitTag represents a git tag and the associate information.Instance Variables	handle:		NBExternalObjecthandle	- the handle to the external data object"
"ReleaseTest","I contain tests that validate the integrity of the system."
"GLMSmalltalkCodeModel",""
"ManifestSystemPlatforms","Support for different OS platforms"
"FTTableRowMorph","I'm a row for a table.All my work is to keep cells."
"ClyInheritanceAnalysisMethodQuery","I am abstract method query to group together other queries which analyzes methods inheritance.I provide implementation to react on system changes and some helper methods for subclasses"
"EpLogTest",""
"HiRulerRenderer","I know how to render a ruler in an Athens canvas.Note: an instance of me cannot be used to render in more than one canvas."
"FTExampleMethodModel","I'm a model for exposing method information.I'm an example to be used in FTExampleMethodListDataSource and FTExampleMethodTableDataSource."
"BalloonEngine","BalloonEngine is the representative for the Balloon engine inside Squeak. For most purposes it should not be used directly but via BalloonCanvas since this ensures proper initialization and is polymorphic with other canvas uses."
"FBDDecompiler","I am the main class of FBD package.My job is to decompile a compiledMethod to get valid Abstract Syntax Tree (AST).The first step of decompilation is to give the byte code to the FBDLoopScanner, to annotate it. This will be important to detect all the loops in the method and handle it correctly in the Decompiler.The second step of decompilation is to interpret the byte code to create corresponding AST nodes. The decompiler will call the right ASTBuilder method and create a full AST. Then the AST is returned. The Flashback Decompiler's job stops there, because there are already some frameworks to generate Smalltalk code from an AST.The returned AST does not take optimized messages into account. Use FBDOptimizedMessagesRewriter to recover the optimized messages.Instance Variables	simulatedStack <OrderedCollection> Simulates the bytecode stack, pushing AST nodes instead of concrete values	builder <FBDASTBuilder> change to another builder to build another AST than RB. By default, use a builder building RB nodes 	instructionStream <InstructionStream> used to decode the bytecode.	currentSequence <RBSequence> current AST sequence being decompiled	argCount <SmallInteger> counter to create args into the current sequence with a valid name	tempCount <SmallInteger> counter to create temps into the current sequence with a valid name	jumpSize <SmallInteger> used to remember a jump size during a dual branch message decompilation	loopsArray <Array> is the array containing informations about loops that the loop scanner gave me"
"FuzzyLabelMorph","A label that underdraws to the top-left, top-right, bottom-right and bottom left by a specifed offset in a contrasting colour to the receiver's with a specified alpha value."
"TestLocalVariable","TestLocalVariable is a test class using in ProcessSpecificTest."
"Schedule","I represent a powerful class for implementing recurring schedules."
"SycMoveMethodsToClassCommand","I am a command to move methods to given class Internal Representation and Key Implementation Points.    Instance Variables	targetClass:		<Class>"
"GTSpotterDebuggingExceptionHandlerMock",""
"RBTemporaryNode","I am a specialized variable node for temporary variables.Parsing a method or block code will just use RBVariableNodes for block/method arguments, until we call doSemanticAnalysis on the method node."
"ProportionalSplitterMorph","I am the morph the user grabs to adjust pane splitters."
"FileSystemPermission","I'm a set of permissions for a Directory Entry"
"GLMRubTextAreaBrick",""
"TGrowableTest","A trait for test purposes"
"MetacelloGroupSpec",""
"OpalCompilerTests",""
"EUCKRTextConverter","Text converter for Korean variation of EUC."
"ClyAbstractMethodsQuery","I return all abstract method from given scope. I select such methods using #isAbstract message. So it can be #subclassResponsibility methods or other trait related requirements."
"IceTipCheckoutBranchCommand","Command that opens a dialog to checkout a (new or already existing) branch."
"ZnBufferedWriteStreamTests",""
"FLAnalysis","I am responsible of traversing the graph of references starting from a root object. I will produce a clusterization which the serializer will store on a stream.An example of use is:	(FLAnalyzer newDefault 		clusterizationOf: (Array with: 1@2 with: 3@4))		clusters."
"MorphicModel","MorphicModels are used to represent structures with state and behavior as well as graphical structure.  A morphicModel is usually the root of a morphic tree depicting its appearance.  The tree is constructed concretely by adding its consituent morphs to a world.When a part is named in a world, it is given a new slot in the model.  When a part is sensitized, it is named, and a set of mouse-driven methods is also generated in the model.  These may be edited to induce particular behavior.  When a variable is added through the morphic world, it is given a slot in the model, along with a set of access methods.In addition for public variables (and this is the default for now), methods are generated and called in any outer model in which this model gets embedded, thus propagating variable changes outward."
"RenrakuTest",""
"ZdcSimpleSocketStream","I am ZdcSimpleSocketStream.I am a ZdcAbstractSocketStream.I do a minimal implementation of the requirements defined by my superclass.I rely on the rather inefficient implementation of my superclass' methods, funneling all access through #next and #nextPut."
"DictionaryTest","SUnit tests for dictionaries"
"GLMTextualPresentation","This is the abstract class for a presentation that is supposed to show text. The #selectionText port and not the #selection port is populated by the renderer when the user selects a piece of text.Instance Variables	cursorPosition:		<Object>	doItContext:		<Object>	doItReceiver:		<Object>	selectedText:		<Object>	selectedTextBlock:		<Object>	text:		<Object>	textBlock:		<Object>"
"RBPushDownClassVariableRefactoring","I am a refactoring for moving a class variable down to my subclasses.My precondition verifies that the moved variable is not referenced in the methods of the original class."
"RBMethod","I represent a method for the refactoring framework.I am used by RBClass / RBMetaclass resp. RBAbstractClass for methods created or changed during a refactoring operation.I represent the method with a selector, source and if I am created from an existing method, its CompiledMethod. I know my method class (a RBClass or RBMetaclass). You should not directly create instances of me but query or create a method from a RBClass.I only implement a small part of  CompiledMethod interface, that is used for refactoring operations, likequerying symbols, literals or the whole method source."
"ClyExtensionLastSortedClassesTest",""
"RubTextAcceptRequest","I am raised when the text is accepted in the view"
"TextMorphTest",""
"ClyTraitMethodDecorator","I decorate table with special icon for methods which are defined in traits.Notice that I only apply decoration when selected class is different than method defining trait"
"RBSmalllintTestObject","This class is used to test method critics."
"GLMLipsumWithSegmentsExample","self new open"
"ZnBivalentWriteStream","I am ZnBivalentWriteStream, wrapping another write stream.I allow both Characters and Strings as well as Integers (0 to: 255) and ByteArrays to be writtten to me.The write stream that I wrap can be both binary as well as character based.Part of Zinc HTTP Components."
"ClyGroupWindowMorph","I fix bad behaviour of my superclass in context of Calypso requirement.For example I update group window title to be same as selected tab title."
"LGitTreewalkModeEnum",""
"ClassAnnotationExampleWithPriority",""
"ClyGroupedVariables","I am abstract variable query result which represents variables as ClyVariableMethodGroup instances.My subclases are used in full browser to show variables in third pane.For subclasses I provide dictionary kind of variable type -> defining class -> variables where - variable type is class of given variable. For example there are ClyInstanceVariable and ClyClassVariable.- defining class is a class which defines given variables - and variables is the sorted by name list  So subclasses should implement method - fillWithGroupedVariables: varsPerTypeAndDefiningClass which will build required variable groups from given variable structure.General logic to convert concrete type of variables to groups is common for all subclasses. So they just call my methods: - fillWithVariables: varsPerClass type: varTypeClasswhich really creates variable group items.I order variables according to their class hierarchy. The concrete kind of hierarchy is specified in my variable #hierarchy.So you can get variable list in the order from superclass to subclass or otherwise.To create my instances use following method: 	ClyGroupedInstanceVariables withHierarchy: ClySubclassHierarhy new.Or ask for default hierarchy: 	ClyGroupedInstanceVariables withDefaultHierarchy.	The default hierarchy for variables are managed by ClySubclassHierarchy class: 		ClySubclassHierarchy hierarchyForVariables.	 Internal Representation and Key Implementation Points.    Instance Variables	hierarchy:		<ClyClassHierarchy>"
"RBAddVariableAccessorTransformation","Adds accessors (getter and setter) for a variable in a class, if they do not exist.Usage:| transformation |transformation := (RBAddVariableAccessorTransformation	variable: 'variableName'	class: #RBVariableTransformation	classVariable: false)	transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- the variable with which the accessors will be created shall exist. The parameter isClassVariable indicates whether to look in the instance or class variables."
"MCSqueaksourceRepository","I am a specialized MCHttpRepository for http://squeaksource.com.I optimize checks for existing files by doing a head request instead of reloading the whole file list first."
"FileStreamTest",""
"NetworkError","Abstract super class for all network related exceptions."
"LGitExternalArray","I provide general implementations for my subclasses that represent dedicated arrays of a certain type."
"OSNullFormRenderer","i just a stub for rendering nothing , so that all update requests (like from Morhpic), are simply ignored"
"DynamicTopToBottomRowsLayoutTest","I hold tests for DynamicTopToBottomRowsLayout."
"MorphicListAdapter","I am the adapter used to bridge a ListPresenter and a PluggableListMorph"
"IceTipCheckoutSelectedBranchCommand","Command that checks out the selected branch"
"HiBuilder","I know how to build Hiedra ruler elements."
"SugsProcessBrowserContext","I know how to use a ProcessBrowser to extract the information needed for the suggestions"
"SpecStubIconListAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"OSTouchOneFingerHoldEvent","One finger is down and has not moved on the screen"
"MouseEvent","Superclass for mouse events"
"RBMethodSourceContainsLinefeedsRule","Pharo code should not contain linefeed characters."
"FileList","A FileList is a tool to deal with files.FileList open				""open FileList"""
"ClyNoTagClassGroupProvider","I provide ""Uncategorized"" class group when there are class tags in the package but in same time there are classes without tags.When package has no tags at all I do not provide any group."
"RBExcessiveMethodsRule","This smell arises when a large class is found (with 40 or more methods). Large classes are indications that it has too much responsibility. Try to break it down, and reduce the size to something manageable. The defined number of methods can be edit in RBExcessiveMethodsRule>>methodsCount.A good design assigns one responsibility to a class. Ask yourself, ""what is the key responsibility of this class?"" Using the strategy design pattern may be a solution to structure and delegate some behavior. An indication that a class may have too many responsibilities is when different groups of methods access a subpart of the instance variables. In a large system, having some large classes is often inevitable; but when there are more than a couple of large classes, you should really reconsider your design. 	The defined number of methods can be edited in #methodsCount."
"TPrintTest","A trait for test purposes"
"SugsContextTest","SUnit tests for the Smart suggestions context"
"IceCommited","Announces when a repository has commited."
"LGitSafeFFICalloutMethodBuilder","I'm a variant of FFICalloutMethodBuilder  that adds a call to  #signalIfNotReady  before the actual ffi call."
"ZipFileSystemDirectory","I represent a zip file system entry for a directory. Together with ZipFileSystemFile I take care of lazily accessing archive members."
"RBAddMethodCommentTransformationTest",""
"GLMMorphicSmalltalkCodeRenderer",""
"ClySingleTraitVisibilityLevel","I represent visibility of methods of concrete trait.I am same as ClySuperclassVisibilityLevel. But I was introduced to allow decorate visibility item with special trait icon"
"GLMMorphicPharoMethodRenderer",""
"Paragraph","A Paragraph represents text that has been laid out, or composed, in some container.I also display the different kinds of text selection (secondary, find-replace and selection bar).Class collaborations   SelectionBlock instances are built by myself and stored in the extraSelectionBlocks instance variable in order to display supplementary selectionsClass main API   no particular main API.Instance Variables   extraSelectionBlocks: <Collection of SelectionBlock>   findReplaceSelectionRegex: <RxMatcher>   presentationLines: <Object>   presentationText: <Object>   refreshExtraSelection: <Boolean>   secondarySelection: <String>extraSelectionBlocks   - a collection of SelectionBlock for the drowing of the differents kind of text selectionfindReplaceSelectionRegex   - the find/replace matcher that is set from the editor of by the FindReplaceServicepresentationLines   - created for debugging purpose, should be removed ?presentationText   - created for debugging purpose, should be removed ?refreshExtraSelection   - a boolean that is set to tru when there is a need to refresh selectionssecondarySelection   - the string of the secondary selection that is set from the editor when a portion of text is selected	text 		A Text with encoded per-character emphasis.	textStyle	A TextStyle with font set, line height and horizontal alignment.	firstCharacterIndex    The starting index in text for this paragraph, allowing				composition of a long text into a number of containers.	container	A Rectangle or TextContainer that determines where text can go.	lines		An Array of TextLines comprising the final layout of the text				after it has been composed within its container.	positionWhenComposed   As its name implies.  Allows display at new locations				without the need to recompose the text.Lines are ordered vertically.  However, for a given y, there may be several lines in left to right order.  Lines must never be empty, even if text is empty.Notes on yet another hack - 5 Feb 2001We really need to clean up #composeLinesFrom:to:delta:into:priorLines:atY:!!!I added one more habdful of code to correct:This is an annoying bug that's been around for a couple of years, but I finally figured out how to duplicate the problem, so I figured I'd just report it now.  (It doesn't necessarily have to be fixed for 3.0 if it looks messy, but if it's a simple fix, it would be worth it.)In Morphic, if you have the following text in a workspace:This is line 1This is line 2**and** you have a return character after line 2, you will normally be able to click the mouse two times below line 2 in order to select all the text.  If you edit line 2 (e.g. so that it reads ""line number 2""), you can still select all the text by clicking below the second line.  However, if you edit line 1, you will not be able to select all the text from the bottom in the same way.  Things get messed up such that the last return character seems to be gone.  In this state, if you position the cursor immediately after the 2, and press the right arrow, the cursor jumps to the beginning of line 2... oof. (report by Doug Way)While I don't have a very deep understanding of the above mentioned method, I was able to determine that text ending in a CR worked better in the editor when the last entry in <lines> had a start of text size + 1 and a stop of text size. I have accordingly added code near the end to ensure this. It seems to have fixed the problem, but we do need to clean this baby up some day. - Bob"
"TickSelectionCheckboxMorph","A TickSelectionCheckboxMorph is a checkbox which propagate a bit more the events"
"ListPresenterTest","testing ListComposablePresenter"
"LabelledInputTextDropList","I am a LabelledContainer specialized to manage a InputTextDropList.See LabelledContainerself exampleI provide the accessors inputTextDropList to be more intuitive than subwidget, and the shortcuts input and dropList.I provide shortcuts for the most common methods to avoid the use of the DoesNotUnderstand or the writing of long chain of accessors."
"IceTipRefreshPullRequestsCommand","Description--------------------I am a simple command to refresh the content of the github pull requests browser"
"MorphicDialogWindowAdapter","I am the adapter used to bridge a DialogWindowPresenter and a DialogWindow"
"EpMonitorStateUpdated","The execution of either EpMonitor>>#enable or #disable will result in the announcement of one of my instances."
"BalloonEngineConstants","Constants for the baloon engine"
"WindowLabelled","I am emitted when a window title changed. You can ask me for the windowand the changed label (no old/new label data is provided, just the actual one).This is usefull for window manager or window grouper that provide an overviewfor the active windows. Or like the window grouper, that creates tab panes and labelsthe tabs with the current window title."
"GLMMorphicWidgetRenderer","This is a helper class that is supposed to be subclassed for each rendering logic of a specific morph. For example, there will be a TreeRenderer, a TextRenderer etc"
"MetacelloPharo30Platform","I'm here for backward compatibility. "
"GLMSomeNotNilCondition","Used to test if at least a defined  arguments of a condition is not nil."
"STONWriterTests","STONWriterTests test serialization."
"SpecDropListMorph","I am a special DropList with icons"
"FontChooserMorph","I'm the UI of a font chooser. FontChooser 	openWithWindowTitle: 'Choose the Menu Font' 	for: StandardFonts 	setSelector: #menuFont: 	getSelector: #menuFont	"
"IRStoreTemp","store temp"
"ClassWithBadAnnotatingMethod",""
"MalSndNode",""
"ArithmeticError","I am ArithmeticError, the superclass of all exceptions related to arithmetic."
"RunArrayTest","SUnit tests for class RunArray"
"RBRenameClassTransformationTest",""
"UTF16TextConverter","Text converter for UTF-16.  It supports the endianness and byte order mark.The default is to not use a BOM, make sure to set this if using the converter to write to a location where encoding metadata is not present / specified by the protocol.This usually means you want to write one when storing strings to files on disk, but not when transmitting encoded string to a web client, nor when sending data to a database."
"UnixStore","I'm a specific store for Unix file systems"
"RFStorePopIntoTempNode","I define a temp that I can store into"
"Watchpoint","A wathchpoint save the change of values of expressions. I save them as an oredered collection of  key val association where the key is the timestamp an val is the actual value of the expression.To install a watchpoint in a node: Watchpoint in: aNode"
"RBRefactoringWarning","The receiver is a warning that usually requires the user to validate. This is used in situations where either the behavior of the program will not be strictly preserved or the change may have a wider impact than the user may think."
"IceTipOptionDialog","I'm a dialog that has different options. I'm a abstract class, I need to be used  through my children.I'm kind of a ""tabbed"" dialog, but my options are ""mac style"": lateral and not top.This is useful to keep a variable number of options."
"GlobalIdentifierFuelPersistenceTest","A GlobalIdentifierFuelPersistenceTest is a test class for testing the behavior of GlobalIdentifierFuelPersistence"
"ClySystemSearchDialogContext",""
"BitmapFillStyle","A BitmapFillStyle fills using any kind of form.Instance variables:	form	<Form>	The form to be used as fill.	tileFlag	<Boolean>	If true, then the form is repeatedly drawn to fill the area."
"ManifestGraphicsDisplayObjects","Package hosting graphics related display objects like Form and other"
"NullStreamTest","SUnit tests for null streams"
"RBReplaceSubtreeTransformation","Replaces a piece of code by another in a method. Internally, this transformation replaces the corresponding subtrees, so they have to be syntactically correct.Usage:| transformation |transformation := (RBReplaceSubtreeTransformation		replace: 'selector := aSelector'		to: '^ selector'		inMethod: #selector:from:		inClass: #RBRemoveMethodTransformation)		transform.(ChangesBrowser changes: transformation model changes changes) open"
"CmdSpecDragPassenger",""
"ClyClassWithoutBreakpoints","I am example class which methods have no halts or breakpoints"
"GoferReferenceTest","SUnit tests for GoferReference and subclasses"
"GLMPopupBrickDownwardLayout","I am a special downward popup layout.I make sure that content is below the trigger brick"
"MultiByteFileStream","The central class to access the external file.  The interface of this object is similar to good old StandardFileStream, but internally it asks the converter, which is a sub-instance of TextConverter, and do the text conversion.  It also combined the good old CrLfFileStream.  CrLfFileStream class>>new now returns an instance of MultiByteFileStream.  There are several pitfalls:  * You always have to be careful about the binary/text distinction.  In #text mode, it usually interpret the bytes.  * A few file pointer operations treat the file as uninterpreted byte no matter what.  This means that if you use 'fileStream skip: -1', 'fileStream position: x', etc. in #text mode, the file position can be in the middle of multi byte character.  If you want to implement some function similar to #peek for example, call the saveStateOf: and restoreStateOf: methods to be able to get back to the original state.  * #lineEndConvention: and #wantsLineEndConversion: (and #binary) can cause some puzzling situation because the inst var lineEndConvention and wantsLineEndConversion are mutated.  If you have any suggestions to clean up the protocol, please let me know."
"DAReferenceDependencyNode","A PDCycleNode is used to display a reference dependency in a tree."
"DynamicVariable","My subclasses are dynamic variables: each subclass represents a variablewhose value persists inside the block passed to #value:during:. There isno way to change the value inside such a block, but it is possible totemporarirly rebind it in a nested manner."
"CriticToolbar","I am the toolbar for a selected SmallLint Critic in the critic browser.Instance Variables	browseModel:		<Object>	criticHolder:		<Object>	falsepositiveModel:		<Object>	ruleHolder:		<Object>	transformModel:		<Object>browseModel	- xxxxxcriticHolder	- xxxxxfalsepositiveModel	- xxxxxruleHolder	- xxxxxtransformModel	- xxxxx"
"MetacelloAtomicLoadDirective",""
"RPackageClassesSynchronisationTest","SUnit tests for RPackage classes synchronisation"
"IceTipRemoteActionBrowser",""
"ShLayoutDefinition","I am an internal object used by the ShiftClassBuilder to represent the layout of a class."
"ClyFFIMethodTag","I mark method that it is FFI call"
"WriteBarrierTest","My tests ensure the ReadOnly property of objects work properly.#testMutateIVObject is a good start to understand what is going on.The VM needs to be compiled with -DIMMUTABILTY= true for those tests to work."
"InitializePackagesCommandLineHandler","Usage: initializePackages [ --protocols=<protocols> ] [ --packages=<packages> ]  [ --save ]	protocols	A name of a file with method protocols specification	packages	a name of a file with packages list	Documentation:Initializes packages structure from information provided in text files. This is used to initialize packages structure for bootstrapped images. Do not use it on full Pharo images.Protocols are provided in file where every method has one line and provides following data separated by  tabs:- class name- method is on the class side (true/false)- method selector- protocol nameThe <cr> line ending is expected for protocols and packages file.Protocols file exxample:RBReplaceRule	false	searchForTree:replaceWith:	matchingRBPatternPragmaNode	true	selector:keywordsPositions:arguments:	instance creation			Packages file contains list of packages where every package is on own line.Examples:	pharo Pharo.image initializePackages --protocols=protocols.txt --packages=packages.txt --save"
"SystemVersionTest","SUnit tests for SystemVersion."
"SpecLayoutSend","A SpecLayoutSend is a spec layout action used when a selector is sent to the layout"
"GLMHighlighterTextRubEditingMode","This is a framework class that can be used by clients that create custom browsers containing text presentations with custom highlighters.Usage example:GLMRubricHighlightedTextPresentation new	editingMode: [ 		GLMHighlighterTextRubEditingMode withStylerDecorator: 			GLMHighlighterTextStylerDecorator new ]."
"RBCollectionCopyEmptyRule","Checks that all subclasses of the Collection classes that add an instance variable also redefine the copyEmpty method. This method is used when the collection grows. It copies over the necessary instance variables to the new larger collection."
"GTSpotterContentsBrick",""
"MetacelloValidationCriticalWarning","MetacelloValidationCriticalWarning indicates that there is a logical inconsistency that may not be intentional and that could cause incorrect loads"
"GTSUnitDebuggerHelp","A utility class containing the help for GT SUnitDebugger."
"EpLogBrowserOperationFactoryTest","My subclasses test EpLogBrowserModel operations."
"RBPatternScanner","RBPatternScanner is a subclass of RBScanner that allows the extended syntax of pattern matching trees."
"AbstractFontSelectorDialogWindow","Dialog based font chooser with preview."
"SycPushUpVariableCommand","I am a command to push up given variables"
"Author","I am responsible for the full name used to identify the current code author."
"OpenToolTest","SUnit tests for opening of tools"
"Path","I'm a private and abstract filesystem path, independent of the string representation used to describe paths on a specific filesystem. I provide methods for navigating the filesystem hierarchy and working with absolute and relative paths. I only refer to a concrete file or directory with regard to a specific filesystem. Normally users should not use me directly. API instance creation:- #from: parses the supplied string using the default delimeter- #from:delimiter: parses the supplied string using the supplied delimiter.- #/ creates an absolute path from the supplied string- #* creates a relative path from the supplied stringAPI path manipulation:- #/ adds the supplied string to the receiver"
"IceGitHubNewPullRequestAction","I'm an action to create a new pull request."
"LGitDiffPerfData",""
"LGitFreeSignatureCallback",""
"ReInvocationOrderCritique","A critic which represents that there is an issue with the order of messages being sent"
"LessonTestInstanciation","SUnit tests for lessons"
"TransformMorph","A TransformMorph introduces a 2-D transformation between its (global) coordinates and the (local) coordinates of its submorphs, while also clipping all display to its bounds.  Specifically, with no offset, angle or scaling, a submorph with coordinates (0@0) will appear exactly at the topLeft of the windowMorph (its position).  Rotation and scaling are relative to the local origin, (0@0).instance var	type				description transform		MorphicTransform	The coordinate transform between my coordinates and the									local coordinates of my submorphs. smoothing		anInteger in 1..3	Perform smoothing of my contents during drawing										1 No smoothing (#smoothingOff)										2 Smoothing w/ edge adjacent pixels (#smoothingOn)										3 Smoothing w/ edge and corner adj pixels			 localBounds	Rectangle or nil		caches the value of #localSubmorphBounds for performanceTransformMorphs operate with two different display strategies, depending on whether the transformation is a pure translation or not.  If so, then they simply use a clipping canvas and display their submorphs with the appropriate offset.  If the transformation includes scaling or rotation, then a caching canvas is used, whose active area covers the fullBounds of the submorphs intersected with the source quadrilateral corresponding to the window bounds."
"ZnStaticFileServerDelegateTests",""
"Archive","This is the abstract superclass for file archives. Archives can be read from or written to files, and contain members that represent files and directories."
"Workspace","I'm workspace: a great place to execute top-level expressions to compute something useful, and it is a great place to develop bits of a program before those bits get put into class methods.To open a new workspace, execute one of the following expression:[[[	self open	self openContents: '''Pharo is cool'''	self openLabel: 'A cleaner workspace'		self open label: 'Tutu']]]"
"MalCyclesCoverage",""
"GLMCondition","GLMCondition is the abstract class for defininf a boolean condition applied on some input arguments. It is meant to be subclassed."
"MockForCompilation",""
"SpecStubTickingWindowAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"BreakpointIconStyler","I'm in charge to style an ast when there are breakpoints"
"PointArray","This class stores 32bit Integer points in place. It is used to pass data efficiently to the primitive level during high-bandwidth 2D graphics operations."
"RBAddClassCommentTransformationTest",""
"FLObjectCluster","I implement a generic way of serializing and materializing an object, for those that do not need more special way of doing it."
"IceTipReadOnlyTextMorphWithIcon",""
"GLMBrickAreaRenderer","I am a special renderer of non-rectangular but polygon bricks"
"DebugActionExecuted","A DebugActionExecuted is an event send to the debugger after a debugging action is executed.Instance Variables	actionId:		<Object>actionId	- xxxxx"
"ClySystemEnvironment","I represent environment of Pharo system. I incapsulate globals (Smalltalk globals), packageOrganizer (RPackageOrganizer  default) and changesAnnouncer (SystemAnnouncer uniqueInstance). I have class side #currentImage instance created with all corresponding globals of current image.I am used to navigate over system by ClyNavigationEnvironment.Public API and Key Messages- packages- createPackageNamed: aString- removePackage: aPackage- includesClassNamed: aString - defaultClassCompiler- subscribe: aNavigationEnvironment- unsubscribe: aNavigationEnvironmentInternal Representation and Key Implementation Points.    Instance Variables	changesAnnouncer:		<SystemAnnouncer>	globals:		<SmalltalkDictionary> ""Smalltalk globals class""	name:		<String>	packageOrganizer:		<RPackageOrganizer>	projectManager:		<ClyProjectManager>"
"GLMScrollbarBrick","A GLMScrollbarBrick is vertical scollbar for a scrollpane. User can't interact with itInstance Variables	bar:		<Object>	scrollPane:		<Object>bar	- xxxxxscrollPane	- xxxxx"
"SubclassWithOverridenAnnotation",""
"RubSelectorChooserMorph",""
"MorphTreeMorphTests","A MorphTreeMorphTests tests aspects of a MorphTreeMorph"
"GLMFastTreeTableDataSource","I'm a model datasource to add columns support to a tree presentation.Description --------------------My superclass models a tree. I override  #cellColumn:row: to return a row that contains multiple columns.I work with a GLMFastTreeTablePresentation and a GLMMorphicFastTreeWithColumnsRenderer.  I rely on TGLMFastTableColumnsRenderer for the logic that actually builds the row morphs. Internal Representation and Key Implementation Points.--------------------- #rowMorphElementsForFirstColumn:item:in:    I configure the first column with the propper indentation and buttons for expanding collapsing the node.- #dataFromPresentationItem:                                     I return the data from the given item    Instance Variables	columnToSortBy		This is the column to use for sorting the displayed elements"
"HelpHowToHelpTopicsFromCode","How to create help topics from code"
"STONTests","STONTests tests the API offered by STON."
"ReTestBasedTestCase",""
"DelaySchedulerBackgroundWorkerMorph","I provide the support to test Pharo Case 13755. Not quite sure how to plug this into the testing framewok.  Currently just run this test manually like this...    DelaySchedulerBackgroundWorkerMorph new openInWorldwhich will FREEZE THE UI when using the following...  * DelayMillisecondScheduler  * DelayMicrosecondSchedulerbut won't freeze when using  the following...  * DelayExperimentalSemaphoreScheduler  * DelayExperimentalSpinScheduler  * DelayExperimentalCourageousSchedulerClose my instance morphs via halos, or evaluate the following...    DelaySchedulerBackgroundWorkerMorph allInstances do: #delete."
"GTSpotterCurrentStepChanged",""
"IceGitHubNewPullRequestCommand","I'm a command to create a Pull Request"
"NullTaskList","I stand in when the task list is not open in the world."
"TonelSourceScanner","I'm a scanner to get correct sources from method definitions in Tonel format.Implementation details:Method body is delineated by square brackets in Tonel format, thus I just have to detect enclosing square brackets [].Since a method body can include nested blocks and ByteArray literals, I have to maintain a count of opened and closed brackets in order to correctly detect the end of method body.But method body can also contain isolated brackets (which are not necessarily paired) in following patterns:		- comments like ""[""		- strings like ']'		- array literals like #( [ )		- literal characters like $] Therefore, I need to be aware of syntax for the four cases above, in order to correctly skip those potentially isolated brackets."
"CollectionIsEmpty","I am CollectionIsEmpty, an exception indicating that an operation was attempted on an empty collection where that does not make sense.I am an Error and thus an Exception.The collection that is empty is in my inherited signaler instance variable."
"Time","This represents a particular point in time during any given day.  For example, '5:19:45 pm'.If you need a point in time on a particular day, use DateAndTime.  If you need a duration of time, use Duration."
"SystemReference","This class defines the full reference help for the system.(contents for the full API Help).Just run ""HelpBrowser openOn: SystemReference""."
"TaSequence","I represent a sequence of traits in a trait composition.When two traits are operated with + I appear.The methods and slots are the union of my inner members.I solve when there are conflicts."
"FT2FFILibrary","I am the entry point to the FFILibrary.I have definitions about the errors and the name of the modules in the different architectures."
"MetacelloIssue108Resource",""
"MetacelloGroupSpecTestCase",""
"DAAbstractItemDiff","A PDAbstractItemDiff is a object which represent an item who added/modified/removed from an old analysis."
"AthensPluggableTextMorph","this class is subject of changes/removal. do not use it."
"GLMMorphic",""
"MetacelloMethodSpec",""
"ReNodeRewriteRule","The base rule for smalltalk code match & rewrite rules. The rule operates on AST nodes.Use the following methods in the initialization to setup your subclass:- replace:with:- addMatchingExpression:rewriteTo:	add a ""from->to"" pair of strings that represent a rewrite expression string to match and a rewrite expression to replace the matched node.- addMatchingMethod:rewriteTo: 	same as the previous, but the rewrite expression are parsed as method definitions- replace:by:- addMatchingExpression:rewriteWith:	add 	a ""from->to"" pair, first element of which is a rewrite expression in a form of a string that is used to match nodes. The second parameter is a block that has to return a node which should replace the matched one. The block may accept 2 atguments: the matched node, and a dictionary of wildcard variables mapping. 	"
"OSTouchTwoFingersPinchEvent","I am the abstract class for all two fingers pinch events"
"RFASTTranslator","subclass of Opal that takes links into account"
"LGitTransferProgress",""
"EyeCollectionInspector","Specialized version of inspector showing the size of the inspected collection in title."
"GLMPresentIfNoneStrategy","This strategy sets presentations only if none exits in the pane of the destination port."
"RPackageRenameTest","SUnit tests on renaming packages"
"CounterIconStyler","I am rendering ExecutionCounters in the editor."
"IceTraitDefinition","I represent a trait read from an Iceberg repository, either from a commit or from the working directory in disk.My contents is the trait definition.See my superclasses for more information."
"IceNoCommit","I am a null object representing the absence of a commit. I'm used generally in the case of unborn branches, or when a package was loaded but no iceberg information is available."
"GLMTestPane",""
"OSWindowAthensExampleEventHandler","I am the event handler linked to the SDL2AthensExample"
"SimulateMouseTest","SUnit tests to simulate and test mouse behavior"
"FFIConstantHandle","I represent a constant HANDLE, as described in  *Windows MSDN>https://msdn.microsoft.com/en-us/library/windows/desktop/ms724457(v=vs.85).aspx*A ==HANDLE== is a special kind of external object who is accessed through numbers, therefore and ==ExternalAddress== is not appropriate to describe it (since they are constants and external addresses represents disposable spaces from memory).Is not clear this is necessary outside Windows, but according to documentation they are somekind analogous to unix's File Descriptors (but with some remarkable diferences, as documented *here>http://lackingrhoticity.blogspot.fr/2015/05/passing-fds-handles-between-processes.html*.Example: [[[User32 class>>initialize 	HWND := #FFIConstantHandle.User32 class>>getActiveWindow	^ self ffiCall: #(HWND GetActiveWindow()) module: 'User32.dll']]]"
"RFVariableWrite","I model the write to variables. I have all the information needed to do the write when send #value"
"GLMPaneScroller",""
"ReProperMethodProtocolNameRule","This is an abstract rule class to check for an appropriate methodprotol name.Subclasses should override #protocolIdiom to return an association of a good protocol name and the bad protocol names it should replace."
"DoOnlyOnceIconStyler","I render an icon to control the state of #doOnlyOnce: "
"NECEntryTest",""
"GLMPhlowTextBrick",""
"OCInstanceScope","I include all variable enries for slots, self, super."
"KMDispatcher","I'm an object that saves a buffer of keyevents for the morph I'm attached.I am the one that dispatches the single and multiple shortcuts.If the morph has a keymap that matches the keyboard event, I tell the keymap event to execute with the morph I'm attached."
"ReTestClassNameShouldEndWithTestTest",""
"GLMHighlighterTextParserStyler",""
"SDL2Types","Various types used by SDL2"
"LimitedWriteStreamTest","SUnit test clss for LimitedWriteStream"
"IceGitHubTipPullRequestBrowser","Description--------------------I a browser centered on a Pull Request. I display the list of commits of the PR for review, allow the user to merge the PR and to accept/reject it of the user has the rights on the repository."
"MergeDiffMorph","A morph to display merge differences and allow to merge themwith clickable icons on the spitter"
"GLMBrickRenderer","A GLMBrickRenderer is most simple separate renderer of Bricks. It support only borders"
"DelayNullScheduler","I represent the simplest delay scheduler.  I'm so simple I actually don't schedule delays,but signal them to continue immediately so there is no delay. My purpose is provide the minimum interface required to avoid DNU errors in the rest of the system.My responsibilities are: 1. Facilitate image shutdown/startup   2. Facilitate the start/stop in transitioning between delay schedulers 3. Immediately signal delays to continue to avoid user code blocking forever on unscheduled delays My main collaborators are:Delay - has a class variable ""Scheduler"" storing the current delay scheduler      - changes Scheduler by stopping old timer event loop and starting new timer event loop      - invokes #schedule: and #unschedule: on current Scheduler      - forwards system #startUp and #shutDown to current SchedulerUSER-API #schedule: aDelay	Immediately signals the delaySemaphore to continue.	Required by Delay>>schedule & Delay>>wait. #unschedule: aDelay	Empty method body  	Required by Delay>>unschedule.SYSTEM-API	#startTimerEventLoop	Empty method body 	Required by Delay-class>>#delaySchedulerClass: 	#stopTimerEventLoop	Empty method body  	Required by Delay-class>>#delaySchedulerClass: 		#startUp	Empty method body 	Required by Delay-class>>#startup 					#shutDown	Empty method body 	Required by Delay-class>>#shutdown"
"GTSpotterExceptionMock4Filter",""
"CP1252TextConverter","Text converter for CP1252.  Windows code page used in Western Europe."
"MCPackageCache","I'm a kind of cache for versions and filenames of packages."
"SDL2EventHandler","I am an interface (abstract) used for visiting the raw SDL2 events. "
"FLWeakVariableObjectCluster","I am a cluster for objects with weak indexable variables."
"WideString","This class represents the array of 32 bit wide characters."
"GLMMorphicTest",""
"ZdcIOBufferTests","ZdcIOBufferTests holds unit tests for ZdcIOBuffer."
"TabAction","I am a data object representing an action associated to a tab.I contains	- an action to be performed when clicked	- an icon to be rendered	- a label to add indication about what I am supposed to do"
"GreekEnvironment","This class provides the support for Greek.  It is here, but most of the methods are not implemented yet."
"ClyMessageSendersQueryTest",""
"AthensCairoPatternSurfacePaint","i represent texture/image/form/surface paints in cairo backend."
"IceTipAskSSHCredentialsModel",""
"GTSpotterStep","It models one step in the spotter search.A step knows:- the origin object - the active processors that handle the query, and the candidates- the selected candidate, and- the list of all filtered candidatesIt also knows the stream through which the list of candidates is affected.The key method is process:"
"DateTest","SUnit tests for class Date"
"IceLibgitTreeBuilder","Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, ""I represent a paragraph of text"".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	builder:		<Object>	changes:		<Object>	children:		<Object>	entryName:		<Object>	originalTree:		<LGitTree> Contains the original contents on which this builder bases. Warning: this will not reflect the actual contents of the builder. Use #buildTree instead.	parent:		<Object>    Implementation Points"
"ZnServerErrorEvent","ZnServerErrorEvent is a ZnServerLogEvent related to an exception that occurred."
"GeneralScrollPane","A scroll pane that handles its contents accurately."
"Array2DTest","SUnit tests for matrix"
"GTEventTool","I simplify the process of downloading and extracting of recorded data.You likely want to use #ensureLocalDirectory that downloads and extracts server data or #unpackAll if you want to load all data into memory."
"EntryCompletion","An EntryCompletion is a handler for the driving of the completion menu in a PluggableTextFieldMorph. The completion menu is an IdentifierChooserMorph which is typically built and popup when a character is entered in a PluggableTextFieldMorph. Instance Variables	chooseBlock:		<Block>	chooser:		<IdentifierChooserMorph>	dataSourceBlock:		<Block>	filterBlock:		<Block>	previousToken:		<String>chooseBlock	- One argument block which is evaluated when a token is chosen, the token is passed as argumentchooser	- The IdentifierChooserMorph which is currently openeddataSourceBlock	- The block that is evaluated in order to get the list of itemsfilterBlock	- The block used to filter the dataSource list, it takes 2 args, the first is an item from the current dataSource list element, the second is the token fetched from the requestor (the PluggableTextFieldMorph). It returns true if the current dataSource list element is to be keptpreviousToken	- Used to be able to not open the list if the current text in the PluggableTextFieldMorph was the previous chosen one"
"ZnServerGenericLogEvent","I am ZnServerGenericLogEvent, a ZnServerLogEvent and ZnLogEvent that holds a generic subject, possibly not limited to a String.Here are two examples:(ZnServerGenericLogEvent subject: 'You can''t do that, Dave') emit.(ZnServerGenericLogEvent subject: { #id->123. #reason->#timeout } asDictionary) emit."
"MetacelloProjectReferenceSpec",""
"IceTipTreeGroup","I'm a model to be used when building groups for outline dataSources.I keep groups with elements.I can provide also a contexts for menu operations and other kind of options to be associated with group."
"FLBinaryFileStreamSerializationTest",""
"FLFixedObjectCluster","I am a generic cluster for objects without indexable variables."
"FBDExamples","The method of this class in the protocols named examples are supposed to represent all the possible smalltalk semantics in the point of view of the Decompiler"
"OmSTONEntryWriter","I implement how to write entries to a stream using Ston serializer."
"PragmaSetting","A PragmaSetting is a holder for a setting. A setting is declared in a class method which contains a pragma (as examples, <menu> or <setting>). Settings can be collected on the fly by a PragmaCollector and browsed by a SettingBrowser. Settings are organized in trees.Instance Variables	allowedInStyle:		<Object>	description:		<Object>	dialog:		<Object>	icon:		<Object>	label:		<Object>	name:		<Object>	order:		<Object>	ordering:		<Object>	precondition:		<Object>	target:		<Object>	targetSelector:		<Object>allowedInStyle	- xxxxxdescription	- xxxxxdialog	- xxxxxicon	- xxxxxlabel	- xxxxxname	- xxxxxorder	- xxxxxordering	- xxxxxprecondition	- xxxxxtarget	- xxxxxtargetSelector	- xxxxx"
"ClyQueryExampleReturningScopeBasis",""
"ClyQueryTestCase",""
"RBTransformationTest",""
"IceTipRemoteModel","I'm a model for IceRemote entries."
"EpLogNodeGraphPresenter","I am a browser for Epicea logs in a directory.Usage:self open."
"IceTipAddPlainTextCredentialCommand","I create a new plaintext credential on the credential store."
"ZipArchiveMember","Subinstances of me are members in a ZipArchive.They represent different data sources:	* ZipDirectoryMember -- a directory to be added to a zip file	* ZipFileMember -- a file or directory that is already in a zip file	* ZipNewFilemember -- a file that is to be added to a zip file	* ZipStringMember -- a string that is to be added to a zip fileThey can write their data to another stream either copying, compressing,or decompressing as desired."
"FLSmallIntegerCluster","I don't have so much sense as a class."
"RBAbstractClass2","I'm an adaptation of RBAbstractClass to Refactoring2. "
"ClyAbstractMethodGroupProviderTest",""
"ClyRemoveWatchpointCommand","I am a command to remove all watchpoints from given method or source node"
"RubTextInsertionStrategy","I insert the notification directly in the text at the given position. (I alter the content of the text editor)"
"SplitJoinTest","""Evaluate me to view the SplitJoin documentation:""self showDocumentation""CHANGES LOG:- merged implementations by Keith Hodges (Join) and Damiena Pollet  and Oscar Nierstrasz (RubyShards) into SplitJoin package- moved all extension methods to *splitjoin method category- merged all tests into SplitJoinTest- fixed protocol in SequenceableCollection to splitOn: and joinUsing:  and split: join: for splitters and joiners- added Object>>joinTo: aStream and SequenceableCollection>>joinTo: aStream  to support joining of either sequences or sequences of sequences- prepared some documentation- added systematic tests for all split/join cases- added Object>>join:- prepared split/join tests for all 16 cases- prepares split+join tests for 4 standard cases- reviewed/merged old tests- changed splitjoin tests to use different joiner- added separate test for split+join=id cases- adapted documentation -- join result type is type of joiner or array or string- fix split tests to check result asOrderedCollection- added split tests for OrderedCollection and SortedCollection- new join: method for OrderedCollection and SortedCollection  (uses appendTo: in Object and SequenceableCollection)- reviewed all split: implementations -- removed unnecessary helper methods- check boundary conditions -- split on empty sequence ..."""
"ShCreateClassTest",""
"FLClassSerializationTest","I have the common behavior for testing class serialization."
"GLMPharoScriptPresentation","I provide support for displaying snippets of Smalltalk code  (e.g. dealing with variable binding)"
"ManifestMorphicWidgetsMenubar","This package contains a Menubar for Pharo. This Menubar can be displayed at the top of the Pharo window. It uses the worldMenu pragma to build the menu.For more informations check the comment of MenubarMorph."
"ManifestNetworkUUID","A package providing Universally Unique Identifiers (UUID) following RFC4122."
"ThreePhaseButtonMorph","A button morph with separate images for on, off, and pressed with the mouse. When the event actWhen occurs, send actionSelector with 'arguments' to target.  For other events, default to my eventHandler.  The current event is not supplied in the arguments to the actionSelector.  image (a.k.a. onImage) may not be nil.  offImage and pressedImage may be nil.  nil there means be transparent and show the underlying object.  Tools for debugging:Display the images momentarily under program control (for positioning) (self is an instance).	self state: #on.  self state: #off.	self state: #pressed.  self state: #off.Display a rectangle where the button is.	Display fillWithColor: bounds + (self world viewBox origin).	self invalidRect: bounds."
"GLMPhlowTableRowBrick",""
"BISettingsChanged","I am raised when a setting of BlueInk is changed"
"BaselineOfMenuRegistration","Baseline managing the MenuRegistration project for the Pharo bootstrap.Load type: - linear"
"SpecWrapperTableLayout","A SpecWrapperTableLayout is a variant of SpecTableLayout that is a  wrapper around a single element.It is used to set hResizing, vResizing, and/or some other properties affecting layout."
"DAPackageCycleDetector","I'm able to detect all the cycles in a package dependency graph.Analysis is done in three steps: build the dependency graph, isolating the strongly connected components (SCC), and for each SCC detect all the elementary cycles.Use the message runAlgorithm to run the algorithm to retrieve the elementary cycles in the package dependency graph. At the end, all the cycles are in the collection ""cycles""."
"ResumeDebugAction","A ResumeDebugAction resumes the execution of the interrupted process and closes the debugger."
"ClyCollapsedDataSource","I am table data source which items are all initially collapsed.I maintain list of expanded items and compute items position according to it (row indexes in full table). Internal Representation and Key Implementation Points.    Instance Variables	expandedItems:		<SortedCollection of: ClyDataSourceItem>	sorted by item position"
"ClyAllClassVariablesQuery","I return all class variables from given scope.Scope should support #classVariablesDo:.Now only class scopes support it."
"FT2GlyphSlot","Do not rearrange these fields!face -- the FT2Face that owns this FT2GlyphSlot.Note that even when the glyph image is transformed, the metrics are not.linearHoriAdvance -- For scalable formats only, this field holds thelinearly scaled horizontal advance width for the glyph (i.e. the scaledand unhinted value of the hori advance).  This can be important toperform correct WYSIWYG layout.Note that this value is expressed by default in 16.16 pixels. However,when the glyph is loaded with the FT_LOAD_LINEAR_DESIGN flag, this fieldcontains simply the value of the advance in original font units.linearVertAdvance -- For scalable formats only, this field holds thelinearly scaled vertical advance height for the glyph.  SeelinearHoriAdvance for comments.advance -- This is the transformed advance width for the glyph.format -- This field indicates the format of the image contained in theglyph slot.  Typically FT_GLYPH_FORMAT_BITMAP, FT_GLYPH_FORMAT_OUTLINE,and FT_GLYPH_FORMAT_COMPOSITE, but others are possible.bitmap -- This field is used as a bitmap descriptor when the slot formatis FT_GLYPH_FORMAT_BITMAP.  Note that the address and content of thebitmap buffer can change between calls of @FT_Load_Glyph and a few otherfunctions.bitmap_left -- This is the bitmap's left bearing expressed in integerpixels.  Of course, this is only valid if the format isFT_GLYPH_FORMAT_BITMAP.bitmap_top -- This is the bitmap's top bearing expressed in integerpixels.  Remember that this is the distance from the baseline to thetop-most glyph scanline, upwards y-coordinates being *positive*.outline -- The outline descriptor for the current glyph image if itsformat is FT_GLYPH_FORMAT_OUTLINE.num_subglyphs -- The number of subglyphs in a composite glyph.  Thisfield is only valid for the composite glyph format that should normallyonly be loaded with the @FT_LOAD_NO_RECURSE flag.  For now this isinternal to FreeType.subglyphs -- An array of subglyph descriptors for composite glyphs.There are `num_subglyphs' elements in there.  Currently internal toFreeType.control_data -- Certain font drivers can also return the control datafor a given glyph image (e.g.  TrueType bytecode, Type 1 charstrings,etc.).  This field is a pointer to such data.control_len -- This is the length in bytes of the control data.other -- Really wicked formats can use this pointer to present their ownglyph image to client apps.  Note that the app will need to know aboutthe image format.width, height, hBearingX, hBearingY, hAdvance, vBearingX, vBearingY, vAdvance -- The metrics of the last loaded glyph in the slot.  Thereturned values depend on the last load flags (see the @FT_Load_GlyphAPI function) and can be expressed either in 26.6 fractional pixels orfont units."
"JobProgressBarMorph","A JobProgressBarMorph is a progress bar with a title and a icon to stop update.		JobProgressBarMorph new openInWorld.I am often used by the Job class in Pharo and not directly.It is possible to disable the icon to prevent the user from stopping the task via the #isInterruptable setting.		JobProgressBarMorph isInterruptable: false"
"ZnSimplifiedClientTransactionEvent","ZnSimplifiedClientTransactionEvent is a ZnClientLogEvent that notes the completion of a client side HTTP transaction (request/response). Only a limited number of simpler data is held. ZnClientTransactionEvent contains much more detailed data.Instance Variables	method: HTTP verb	url: ZnUrl requested	response:	numeric response code	size: number of bytes in response	duration: millisecondsZnSimplifiedClientTransactionEvent is ideal for classic HTTP logging with little overhead through its default string representation."
"EpCommentTest",""
"ClyAbstractClassScope","I am a root of class scope hierarchy.From any class scope you are able access classes, methods and variables. And my subclasses define what exact objects are accessible.For example ClyInstanceSideScope can only access instance side methods. While ClyClassSideScope see only class side methods.Or ClySuperclassScope can access methods of all superclasses of basis classes. Class scope instances should be created on set of classes:	ClyClassScope of: String .	ClyClassScope ofAll: { String. Array }.I define accessing interface with following set of methods: - classesDo: aBlock Each scope should implement visible classes enumeration- methodsDo: aBlockEach scope should implement visible methodes enumeration- instanceVariablesDo: aBlockIt enumerates all instance variables available from visible classes. It is not abstract method. It is based of class enumeration.- classVariablesDo: aBlockIt enumerates all class variables available from visible classes. It is not abstract method. It is based of class enumeration.- variablesDo: aBlockIt enumerates all available variables from visible classes. It is not abstract.- methodGroupsDo: aBlock It is special method which collects and enumerates all methods groups available for given class scope using environment plugins. The actual logic of groups colletion is explained in ClyAllMethodGroups comment.- collectAllClasses- includesClass: aClassThe methods enumeration is abstract because I do not apply any restriction on the visible meta level of classes.  So for given class I do not know what methods I can access: instance side or class side, or both. It is responsibility of my subclasses to define concrete meta level logic and implement #methodsDo: according to it. So to define meta level logic subclasses should implement following methods:- metaLevelsOf: aClass do: aBlockIt should evaluate given aBlock with all meta levels of given class which are accessible from receiver. For example ClyInstanceSideScope will evaluate aBlock with instance side of aClass. And ClyBothMetaLevelClassScope will evaluate aBlock twice with instance side and class side separately.- localScopeClass It should return one of ClyLocalClassScope subclasses depending on what local scope the receiver represents.- asLocalClassScope It should convert the receiver to it local scope.- withMetaLevel: aMetaLevelScopeClassIt should convert the receiver to the similar scope but which will represent given meta level. Local scopes are converted completaly to new scope class with this method.- adoptLocalScopeClassTo: aLocalScopeClassIt should adopt receiver to the given local scope. As opposite to the previous method it supposed to modify receiver.It is internal method to support #asScope: convertion propertly. Idea that converted class scope should keep receiver local scope if possible. And local scope itself implement this method with empty body.And I provide several convertion methods whichare used by tools to increase or decrease class and methods visibility:- asInheritedScopeIt return the scope based on receiver basis which provide view on all inherited classes by any definition of inheritance availably in the system. It uses class annotation ClyInheritedScopeProvider to find actual scope class which is responsible to build inheritance scope from receiver. By default it is ClySuperclassScope which includes all superclasses of basis. But with Traits plugin it will be composed scope which includes superclasses and inherited traits. - increasedByClassesFrom: aClassScope It returned similar scope to receiver but with basis increased by all classes visible from given aClassScope.  - reducedByClassesFrom: aClassScopeIt returned similar scope to receiver but with basis reduced by all classes visible from given aClassScope.- asInterestingClassScopeThis methods was introduced specifically to be able restrict ClySuperclassScope by excluding too common superclasses like Object and ProtoObject. For this purpose the ClyInterestingSuperclassScope was implemented. This method is also implemented in ClyCompositeScope. So in case when you have full class hierarchy composition scope you are also able restrict it by excluding uninteresting parts like Object.It is used by browser to enable visibility of all inherited methods accept methods from most common classes like Object and ProtoObject.Also I implement methods which are used in system changes processing. Queries ask me about various kind of affect which particular event could produce ob objects which are visible from me. Look at methods under tag ""system changes"".And to support scoped refactoring my instances can be converted to the refactoring environment:- asRBEnvironment "
"TIncludesWithIdentityCheckTest","A trait for test purposes"
"PSMCChangeWrapper","Abstract superclass for changes wrapper (for patch tree)"
"ImageFillStyle","Simple fillstyle that draws a (potentially translucent) form at the specified origin. Direction and normal are unused."
"IceTipPullBrowser","I perform a pull of incoming commits."
"TEasilyThemed","Trait providing useful theme-related methods."
"ZnSecureServer","I am ZnSecureServer, an implementation of an HTTPS server.I am a ZnMultiThreadedServer(ZnSecureServer on: 1443)	certificate: '/home/sven/ssl/key-cert.pem';	logToTranscript;	start;	yourself.	Disclaimer: this is an experimental proof of concept."
"TestDelayBasicSchedulerMillisecondTicker","I inherit delay scheduler system tests and run them for the specific combination of...  scheduler DelayBasicScheduler  ticker DelayMillisecondTicker."
"RBDeprecateWithFirstCharacterDownshifted","Use uncapitalized instead of withFirstCharacterDownshifted since withFirstCharacterDownshifted is ugly and is deprecated now."
"ClyClassScript","I am abstract class which represents kind of script which can be extracted and executed from class methods.My subclasses define what methods are representing them. They should implement class side method #isImplementedByMethod:.For example methods with pragma <sampleInstance> are represented by ClySampeInstanceScript	ClySampeInstanceScript class >> isImplementedByMethod: aMethod		^ aMethod hasPragmaNamed: #sampleInstanceIn addition I define what kind of methods are able to provide scripts in general. By default it is always class side methods without arguments:	ClyClassScript class >> canBeProvidedByMethod: aMethod		^ aMethod origin isClassSide and: [ aMethod numArgs = 0 ]If subclass define logic for instance side methods or for method arguments it should override method #canBeProvidedByMethod: in addition.	To create my instances use following method: 	ClyClassScript createFrom: aMethod To run the script send execute message: 	aScript executeBy: aClass 	The argument can be different then the class which defines the method. Because the script can be run by subclasses.I provide description methods for the UI. Some subclasses override them: - description - iconName Internal Representation and Key Implementation Points.    Instance Variables	implementorMethod:		<CompiledMethod>"
"FLStreamStrategy","I am a strategy that help tests for writing (and then reading) on streams."
"IceWorkingCopyDesyncronized","I indicate when a working copy is desyncronized. It means the version I have in the image is different to the version I have in the working copy."
"GLMPagerPanePreviewMorph","I am a morph showing a preview image of another morph.  I should be used like a singleton: my class provides an unique instance of me. That instance can be hiden, shown or updated."
"GLMBrowserClosed","Browser is closed"
"SDL_Texture","I represent a handle of GL texture, coming from SDL2 library"
"MorphicLabelAdapterTest","SUnit tests for MorphicLabelAdapter"
"MorphTreeAnnounce","Announcements for morphic based trees"
"TraitPureBehaviorTest",""
"CommandLineTestRunner","I am command line test runner. I run a TestSuite and outpout the progress in a terminal friendly way."
"ZnMimePart","I am ZnMimePart.I hold headers and an optional entity.I am used in MultiPartMimeEncoding.Acknowledgement: some code borrowed from AJP.Part of Zinc HTTP Components."
"CmdNullToolContext","I allow to use CmdCommandActivator in cases when command is created manually without any tool.In that case activation has no context and command is prepared by user manually."
"IceGitChangeImporter",""
"GLMMorphicTextRenderer",""
"SingleTreeTest","SUnit tests for a single file system tree (depth one)"
"ClySourceNodeCritiqueIntervalProperty","I represent problem part of source code using interval.  Internal Representation and Key Implementation Points.    Instance Variables	start:		<Integer>	stop:		<Integer>"
"IceTipMergeCommand","Command that opens a dialog to select a branch to merge in the current merge"
"IceTipContext","I'm a generic context for iceberg tools."
"ZnRequestWrittenEvent","ZnRequestWrittenEvent signals that a request was written in duration milliseconds."
"OmStoreTest","I am an abstract test case for Ombu stores. My subclasses implement a hook to answer new concrete stores."
"ManifestCollectionsAbstract","Package manifest for package metadata"
"FFIExternalReferenceType","I'm a abstract type for ""referenced"" types. See ==FFIExternalReference== for details."
"HelpTopicListItemWrapper","This class implements a list item wrapper for help topics.Instance Variables"
"MetacelloGoferPackage",""
"AthensCairoMatrixTest","A test for AthensCairoMatrix"
"RBSubclassOfClassToRename",""
"FLGlobalSendMock","A mock for a global send"
"RBRegexRefactoring","I am a abstract base class for a refactoring replacing strings by a regular expression.My concrete subclasses define on what kind of string the replace regulare expression should be applied to.They have to implement the RBRefactoring method #transform.I have no special precondition."
"GLMHorizontalScrollPaneBrick","A GLMHorizontalScrollPaneBrick is a very simple scrollpane with support of light scrollbar.Acceleration mechanism is used for scrolling, as longer user scrolls faster it becomes."
"SycInlineTempCommand","I am a command to inline selected temp variable (represented by source node)"
"RBCollectSelectNotUsedRule","Checks for senders of typical collection enumeration methods that return an unused result.For example, check that the result of a select: or detect: is used."
"CRC","Parameterized implementation of the cyclic redundancy check (CRC) algorithm.INTRODUCTION=================This implementation is based on the (awesome) paper ""A Painless Guide to CRC Error Detection Algorithms"" by Ross Williams. You should find a copy of the paper here: http://www.ross.net/crc/. In this paper Ross describes a parameterized implementation that enables the different variations of the CRC algorithm to be used in a consistent way, simply by adjusting the parameters. If you don't have a clue about CRC (like me) then I strongly suggest reading the paper. It will also help you to understand how to make the best use of this implementation.The ""CRC RevEng"" project on sourceforge implements Williams's ""RockSoft"" parameterized CRC program (as does this class) and comes with a handy list of parameters for various CRC algorithm: http://reveng.sourceforge.net/crc-catalogue/.For ease of use and better performance, the two defacto standard variations ""CRC16"" and ""CRC32"" have been predefined. The lookup tables for these implementations are included on the class side. For all other variations the lookup table will be generated at runtime before the first run.If you want to define your own algorithm you can do so by using the methods in the ""accessing-parameters"" protocol. Note that there are no default values. Here's a short overview:	#width: 			defines the width of the register (usually 16 or 32)	#polynome: 		defines the polynome to use for polynome division / lookup table creation	#registerFill: 		defines the start content of the working register (usually all ones or all zeros)	#reflectInput: 		if true every byte will be reflected before processing (e.g. 100101 -> 101001)	#reflectOutpu: 		if true the entire register will be reflected before the final XOR stage	#finallyXorWith: 	defines the final XOR for the entire register	#lookupTable: 		the only OPTIONAL parameter. The lookup table will be generated at runtime if none has been supplied	#message: 			the message to calculate the CRC on 		EXAMPLES=================The simplest possible snippet uses the class side methods for ""CRC16"" and ""CRC32"":	CRC crc16FromCollection: 'some message'. --> 55709	CRC crc32FromCollection: 'some message'. --> 191312361Let's assume, you wanted to use ""CRC16 reversed"" (neither input nor output reflected). Then you would have to change the parameters like so (the reversed form uses a different polynome and a different start register content):	crc := CRC new		beCrc16;		polynome: 16r1021;		registerFill: 16rFFFF;		reflectInput: false;		reflectOutput: false;		message: 'some message';		yourself.	crc run. --> 46785	Using a single instance as in the code above will of course be faster than using the class side methods when performing multiple runs. But if you are really concerned about performance (see PERFORMANCE) you should use the ""raw"" methods (no checks! If you forget to set parameters there will be errors....):	crc := CRC new		beCrc16;		message: 'some message';		yourself.	crc runRefInRefOut. --> 55709		crc := CRC new		beCrc16;		polynome: 16r1021;		registerFill: 16rFFFF;		message: 'some message';		yourself.	crc runNonRefInNonRefOut. --> 46785	PERFORMANCE=================The performance of this implementation (tested for crc16) is equal to the performance of String>>crc16 if executed ""raw"" (see EXAMPLES). For the users sake however, the implementation does a few extra checks to improve ease of use. The cost is a loss of performance of about factor 1.15 (single instance) and 1.42 (one instance per run) (note that although I took an average of 10, the results will vary quite a bit each time you run the code):	crc := CRC new 		beCrc16; 		message: 'this is a test message'; 		yourself.		""String>>crc16""		times := OrderedCollection new.	10 timesRepeat: [ times add: [ 1000000 timesRepeat: [ 'this is a test message' crc16 ] ] timeToRun ].	times average floor. --> 530		""raw""	times := OrderedCollection new.	10 timesRepeat: [ times add: [ 1000000 timesRepeat: [ crc runRefInRefOut ] ] timeToRun ].	times average floor. --> 535		""user friendly, one instance""		times := OrderedCollection new.	10 timesRepeat: [ times add: [ 1000000 timesRepeat: [ crc run ] ] timeToRun ].	times average floor. --> 616		""user friendly, one instance per run""	times := OrderedCollection new.	10 timesRepeat: [ times add: [ 1000000 timesRepeat: [ CRC crc16FromCollection: 'this is a test message' ] ] timeToRun ].	times average floor. --> 759"
"WeakIdentityKeyDictionary","This class represents an identity dictionary with weak keys."
"LGitTransport",""
"IRBytecodeDecompiler","I interpret bytecode instructions, sending the appropriate instruction messages to my IRBuilder, resulting in an IRMethod."
"IceRepositoryForgotten","I announce when a repository has been forgotten (removed from iceberg)."
"CmdMenuGroup","I am a root of hierarchy of first class menu groups.My subclasses are used to declare command position in menu. They are declared in menu command activation strategies.My own menu position is defined statically by instance side method #order and class side method #parentGroup. By default #parentGroup is CmdRootMenuGroup which represents root menu items. If some group wants to be in deep tree structure it overrides #parentGroup method to return another group class. My instances contain other menu items (commands and groups). I provide accessing methods for them:- addItem: aMenuItem- removeItem: aMenuItem- includes: aMenuItem- sizeDifferent kinds of menu activation strategies extend me to build different kind of menu (context menu, toobar, halo menu, etc.)Internal Representation and Key Implementation Points.    Instance Variables	contents:		<OrderedCollection of<CmdMenuItem>>"
"ZnCharacterStreamTests",""
"CannotIdentifyVersionForCommit","This error is signaled when looking for a version in a commit (and its ancestry) has found two versions and can not decide which of them is the desired one. This should not happen if the repository is consistent."
"FFIFunctionParserTests","Tests for FFIFunctionParser"
"RBBetweenAndRule","Replaces ""a >= b and: [a <= c]"" by ""a between: b and: c."
"SmallFloat64","My instances represent 64-bit Floats whose exponent fits in 8 bits as immediate objects.  This representation is only available on 64-bit systems, not 32-bit systems."
"TRBProgramNodeVisitor","A TRBProgramNodeVisitor is a simple  that define visitor methods. "
"FFITestPointerStructure","A pointer structure for test purposes"
"CopyVisitorTest","SUnit tests for CopyVisitor"
"IceTipHistoryDiffToHead","I keep a diff from WorkingCopy to HEAD."
"ZnCrPortableWriteStream","I am a write stream wrapping a second stream. Whenever they ask me to write a cr, a lf, or a crlf I'll instead print a portable new line depending on the platform I'm on.stream := '' writeStream.converter := ZnCrPortableWriteStream on: stream.converter cr; cr; lf; nextPut: $a.stream contents"
"RGClassDefinition","RGClassDefinition is the concrete representation of a class (no trait)"
"SDL_JoyDeviceEvent","SDL2 library structure representing a joystick device event data."
"PharoBootstrapAnalyzerStubWithNewDependency","Stub class to do not compute dependencies of the given package butrather give pre-established responses back."
"SycMessageCommand","I am a base class for commands which perform operations on collection of messages.Messages are instances of SycMessageDescription which is a pair of selector and arguments. Internal Representation and Key Implementation Points.    Instance Variables	messages:		<Collection of<SycMessageDescription>>"
"ComposablePresenterWithModelTest",""
"GLMBrickLayoutMyselfState",""
"POP3Client","This class implements POP3 (Post Office Protocol 3) as specified in RFC 1939.  (see http://www.ietf.org/rfc.html)You can use it to download email from the mail server to your personal mail program.To see an example of it's use, see POPSocket class>>example."
"TestingAbstractTwoButtons","A TestingAbstractTwoButtons is a stupid AbstractTwoButtons used to test it."
"IceTipMergePreviewBrowser","I preview the changes that will be introduced in the image when a merge occurs.(self onBranch: IceRepository registry anyOne branch) openWithSpec."
"TPutTest","A trait for test purposes"
"IceTipRepairCommand","Command that opens the repair window on a repository"
"LGit_GIT_ENONFASTFORWARD",""
"ProtocolAnnouncement","I'm an abstract announcement for protocols"
"ClyClassCreationToolMorph","I am a tool to create a class using textual class definition.I retrieve a package and class tag from given context and use them in class definition. Internal Representation and Key Implementation Points.    Instance Variables	classTag:		<Symbol>	package:		<RPackage>"
"ZnClientFollowingRedirectEvent","ZnClientFollowingRedirectEvent signals that a redirect to target is being followed. How many redirects to follow, if any is configurable."
"FTMatrix","I implement the FT_Matrix type, I am a matrix of 2x2 for transformations."
"OSMouseEvent","i am the root of various mouse events.Note, that my subclasses care to represent only the most basic events, not the synthethic ones, like click or double-click, which are result of interpreting the sequence of raw events."
"ScrollSyncExampleTest",""
"RBUsesAddRule","Check for possible uses of the result returned by an add: or addAll: messages. These messages return their arguments not the receiver. As a result, may uses of the results are wrong."
"EpEntryAdded","I announce that an entry has been added to a log."
"UTF8TextConverterTest","SUnit tests for UTF8TextConverter"
"FreeTypeFontHelp",""
"RBSequenceNode","RBSequenceNode is an AST node that represents a sequence of statements. Both RBBlockNodes and RBMethodNodes contain these.Instance Variables:	leftBar	<Integer | nil>	the position of the left | in the temporaries definition	rightBar	<Integer | nil>	the position of the right | in the temporaries definition	statements	<SequenceableCollection of: RBStatementNode>	the statement nodes	periods	<SequenceableCollection of: Integer>	the positions of all the periods that separate the statements	temporaries	<SequenceableCollection of: RBVariableNode>	the temporaries defined"
"RBUnoptimizedAndOrRule","Checks for inefficient nesting of logical conditions."
"ZnCredential","I am ZnCredential, an abstract class representing credentials in a domain and realm.Part of Zinc HTTP Components."
"FTGlyphSlotRec","I Implement the FT_GlyphSlot_Rec, I am the structure where the glyphs are stored when reading from a font."
"AthensCairoCanvas","my instances representing a low-level cairo context and mapped to cairo_t * C type"
"MCClassDefinitionTest",""
"KMKeymapBuilder","I am a specific builder to configure one shortcut."
"BytecodeEncoder","I am an abstract superclass for different bytecode set encoders.  Subclasses inherit the literal management of Encoder and encapsulate the mapping of opcodes to specific bytecodes."
"SDL_JoyButtonEvent","SDL2 library structure representing a joystick button event data."
"MetacelloScriptRegistryExecutor",""
"TextDiffBuilderTest","Tests for the new algorithm that is diffing changes.Tests from L. Uzonyi (from squeak trunk System.ul207and 208)"
"TReplacementSequencedTest","A trait for test purposes"
"ZnServerSocketBoundEvent","ZnServerSocketBoundEvent signals a new server socket on address:port is bound (opened)."
"ZnPortNotANumber","ZnPortNotANumber is signalled when an URL is parsed containing an illegal port specification.Part of Zinc HTTP Components."
"WikiStyleHelp","This help type extends the system with a wiki like help descriptions"
"DADependentPackageWrapper","Other wrapper for dependent package (use in TreePresenter). Useful in reverse analysis."
"ProcessLocalVariable","My subclasses have values specific to the active process. They can be read with #value and set with #value:"
"AthensPaint","I am a base class, which defines a paint.My subclasses represent a concreate paint by implementing my protocol,  that actually draws a specific shapes with me. My subclasses usually backend-specific, but as long as you implement my protocol, any object can be treated as paint: - athensFillPath: aPath on: aCanvas - athensFillRectangle: aRectangle on: aCanvas - asStrokePaint"
"GLMSimpleRubricExample","self new open"
"LabelModel","This is deprecated class because the original class LabelModel was renamed to LabelPresenter. You should stop to use this class and modify your code to use LabelPresenter."
"OmFuelEntryReader","I implement how to read entries from a stream using Fuel serializer."
"ClyMethodQueryTestCase",""
"LGitPackbuilderProgressCallback",""
"IceMetacelloDuplicatedNotification",""
"IRRemoteArray","I model the TempVector for the decompiler"
"GoferReference","A GoferReference is an abstract superclass for various kinds of references to Monticello packages and versions."
"MIMEHeaderValue","I contain the value portion of a MIME-compatible header.I must be only initialized with the value and not the field name.  E.g. in processing	Subject: This is the subjectthe MIMEHeaderValue should be given only 'This is the subject'For traditional non-MIME headers, the complete value returned for mainValue and paramaters returns an empty collection.For MIME headers, both mainValue and parameters are used."
"IceSSHProtocol",""
"IceUrlProtocol",""
"MetacelloSpecLoader",""
"FBDLoopScanner","I scan compiled method to detect loops. I answer an array or the size of the compiled method I scanned, which holds a FBDLoop at the pc where a loop starts and nil for any other pc. The FBDLoop describes the loop.instructionStream <InstructionStream> allows me to decode the method's bytecodebranchTargets <Array of (Smi | nil)> at any pc where a conditional jump goes, I put an annotation in this array. This is used to know if a loop is conditional or unconditional.loops <Array of (FBDLoop | nil)> array answered by the scanner. it holds a FBDLoop at the pc where a loop starts and nil for any other pc.currentPC <Smi> by opposition to self pc which holds the pc just *after* the instruction being decoded, currentPC holds the pc of the instruction being decoded. This is useful as you can't read the bytecode backward due to multiple bytecodes instructions."
"GLMBrickScrollPositionChanged",""
"ZnServerTests",""
"TraitExclusion","It is kept for compatibility with extension methodsCheck the class TaAbstractComposition for the new implementation."
"SystemWindow","SystemWindow is the Morphic equivalent of StandardSystemView -- a labelled container for rectangular views, with iconic facilities for close, collapse/expand, and resizing.The attribute onlyActiveOnTop, if set to true (and any call to activate will set this), determines that only the top member of a collection of such windows on the screen shall be active.  To be not active means that a mouse click in any region will only result in bringing the window to the top and then making it active."
"RBCollectionMessagesToExternalObjectRule","Checks for methods that appear to be modifying a collection that is owned by another object. Such modifications can cause problems especially if other variables are modified when the collection is modified. For example, CompositePart must set the containers of all its parts when adding a new component."
"MCMockClassE",""
"SeparatorMorph","Simple themed separator morph."
"SUnitAPIDocumentation","SUnit API documentation for help system"
"MCVersionLoader","A MCVersionLoader is responsible for loading a given version. "
"AnnouncementMockC","This is a simple test mock"
"SmalltalkImageTest","Tests for SmalltalkImage"
"PSMCChangesGrouper","I am a visitor on MCDefinition objects. I will group a collection of definitions into a tree that will be shown in the PSMCPatchMorph."
"RubWorkspaceBar","A bottom bar to change the editing mode, switch with/without line numbers and switch wrapping mode"
"GLMBrickGeometryTrait","I declare api and logic to work with geometry of a Brick"
"SDL_SysWMinfo_CocoaInfo","A structure that contains Cocoa specific information about a window. "
"GTFuelPackingTest",""
"EpOmbuExporterTest",""
"ConnectionRefused","Signals that a connection to the specified host and port was refused.	host		host which refused the connection	port		prot to which the connection was refused"
"OCShadowVariableWarning","I get signalled when a variable in a block or method scope shadows a variable of the same name in an outer scope.  The default action is to allow it."
"AthensDisplayScanner","An AthensDisplayScanner displays the paragraphs text on an AthensCanvas."
"ZnCharacterWriteStream","I am ZnCharacterWriteStream.I wrap another binary WriteStream and use a ZnCharacerEncoder to allow Characters to be written.Part of Zinc HTTP Components."
"Halt","Halt is a special exception provided to support breakpoints as defined in  Object>>halt.!! Basic usageTo manually set a breakpoint you can use message halt as follows: [[[			anObject halt. ]]]You can also use [[[Halt now]]][[[Halt now: 'With a nice explanation']]]!! Advanced usageThe class Halt supports different halting mechanisms such as conditionals, based on iteration or simply stopping the first time. !!! Conditionals[[[foo	...	Halt if: #invokedFromThisSelector]]]This expression will only stop the execution  of method foo if this method is in the call chain (is invoked from ) message invokedFromThisSelector.[[[foo      ...      Halt if: aBlock		]]]The execution of foo will stop if aBlock returns true. !!! CountingSometimes we need to stop after a given number of iteration.[[[Halt count: 5]]]!!! OnceIt is really useful sometimes to stop only and only one time[[[foo	...	Halt once. ]]]It will be stopped the first time. Then if you need to rearm it to stop another time you should use[[[Halt resetOnce			]]]"
"IceTipOutlineMorph","I'm a morph to display outlines (with outline datasources).- roots are not collapsable (and then, they are expanded by default).- I prepare a certain look and feel (they are transparent)."
"KMKeyCombination","I'm an abstract class representing a key combination. I'm can represent several cases of key presses:- simple key presses: pressing a single key, as a letter or number, or others like tab or space- modified key presses: a simple key + a modifier like shift or alt- option key presses: a list of key presses where only one of them should be valid- chained shortcuts: a sequence of shortcutsMy more important protocols are:- matching: contains methods to control if a key combination is equals to other or matches a sequence of keyboard events- combining: defines simple ways to combine shorcut objects, like chaining them or modifying themFor more information, look at my subclasses."
"RubTextAccepted","I am raised when the text has been accepted"
"MCAncestryTest",""
"IceClassDefinition","I represent a class read from an Iceberg repository, either from a commit or from the working directory in disk.My contents is the class definition code.See my superclasses for more information."
"OSKeyboardEvent","i am the root of keyboard events hierarchy.The scan code represents an unique number identifying a key and comes directly from OS.Some keys can be directly translated to corresponding character(s) by OS and thus such events will carry character ~= nil.  Character translation is not reliable with this event because many characters are introduced by using multiples key strokes. For a reliable way for getting text input, it is better to listen for the OSTextInputEvent.character - An character representation of the key.modifiers - Extra flags telling if special keys such as ctrl, alt, cmd, etc are being held.position - The position of the mouse cursor when the key was pressed.scanCode - Raw keyboard scan scode.repeat - This value is non-zero if this event was originated by a repeated key stroke.symbol - A virtual platform independent identifier for a keyboard key. Valid values are defined in the OSKeySymbols pool dictionary."
"DAAddPackageModel","A simple CompasableModel to add new packages to the current package dependencies analysis.It implies to be open from a PDPackageAnalyzerWindowPackageDependencies instance. "
"TEmptySequenceableTest","A trait for test purposes"
"TraitCompositionChangedDetector","I can detect if there is a change in the Trait composition."
"ClySubclassN2OfClass1FromP1",""
"ReSettings","i have settings for QA recording functions"
"AthensCairoPath","i used to hold shapes built by path builder in cairo backend"
"SpecFocusOrder","A SpecFocusOrder manage the path of focus between widgets.I use a collection (presenters) to keep widgets I managed. When I reach the end of the collection, I try to give the focus at the parent in the hierarchy, if it is nil I loop.I provide the following methods- add: and addLast: to add a widget in my collection- giveFocusToNextFrom:for: and giveFocusToPreviousFrom:for: to make me change the focus, the first argument is presenter who leave the focus and the second is the current model in the hierarchy.- ifEmpty:ifNotEmpty: and ifNotEmpty: are send in my collection.- presenters is the getter of my collection.- removeAll to remove all my widgets.My super class is not OrderedCollection because it could be a problem for the devellopement of another behaviour."
"ShiftClassInstaller","I am the responsible of installing a class in the system.I interact with the ShiftClassBuilder to generate the classes.You can use me as in:Smalltalk classInstaller make: [ :aBuilder |		aBuilder			superclass: Object;			name: #MyClass;			slots: #(varA varB);			category: 'My-Category' ].		See that I should never be referenced directly, only through the accesor in Smalltalk or in any class in the system. The block passed is used to configure the builder. Check ShiftClassBuilder to see the available messages.I have a subclass to anonymous generate classes, without registering in the environment. "
"LGitCheckoutPerfData",""
"IdentitySetTest","SUnit tests for identity sets"
"IceTipDataSource","I'm a generic datasource for tables on Tip tools. I use IceTipTableColumn to determine value to show. I use a menuSelectionContext to be able to show contextual menus."
"GLMCustomColumn",""
"AndreasSystemProfilerTest","SUnit tests for AndreasSystemProfiler"
"DatePresenterTest",""
"LGitIndexMatchedPathCallback","I define a git_index_matched_path_cb.https://libgit2.github.com/libgit2/#HEAD/group/callback/git_index_matched_path_cb"
"ZnServerWriteErrorEvent","ZnServerWriteErrorEvent signals an error during the writing of a response. These errors are considered mostly benign and the connection gets closed."
"JPEGHuffmanTable","I represent the table of values used to decode Huffman entropy-encoded bitstreams.  From the JFIF file header entropy values, I build a derived table of codes and values for faster decoding."
"AthensCairoGradientPaint","i used to represent gradient paints (both radial and linear)  in cairo backend"
"StartupAction","I am an atomic item used to execute a portion of code at image startup."
"TabManagerPresenter","I am a spec presenter representing a tab manager. My role is to gather multiple tabs, and make them work togetherYou can also have a look at TabsExample for another example."
"BaselineOfMonticello","This baseline is used to store information about Monticello packages. It is not directly used for the packages loading during bootstrap."
"MetacelloPackagesSpec",""
"HaltOnCountIconStyler","I'm in charge to style  the editor for  a ""haltOnCount:"". Clicking on it resets the counter."
"ClyQueryBrowserStateTest",""
"SycGenerateEqualAndHashCommand",""
"ClyCritiqueMenuItemMorph","I simulate the functionality of MenuItemMorph while providing more sophisticated visualization for rubric annotations "
"FFIFunctionArgument","I'm an abstract class to implement the pushing strategy for method arguments. My children define different pushing strategies for the valid types or argument (usually an atomic type object, and external object or a ""self"" instruction)"
"RBConjunctiveCondition","I am a refactoring condition combining two other conditions by a boolean AND.I am created by sending the binary message #& to another condition (left) with another condition (right) as its argument.Checking this conditions holds true, if my left and my right condition is true. "
"FFISelfArgument","I represent a ""self"" argument. This means a call on the form: #(void function ( self ) )To be able to pass an object as ""self "" it need to accomplish one of this conditions: - it has to be an object mappable to an atomic type (that means: a number, a char, a string, ...)- it class needs to have an instance variable 'handle', who will be taken as the real value to transmit (usually, this will be a en ExternalAddress)"
"SessionCategory","A session category allows to define many categories for a session (eg. System, Network, UI and user categories).It allows session handlers (e.g. classes or packages handlers) to be registered into a category.By default, the same default priority is assigned to handlers but a specific priority could be specified so that an handler will be activated before/after others."
"GLMTextPresentation","A presentation displaying text.Instance Variables:	selectedTextBlock	<ProtoObject>	highlightSmalltalk	<Boolean>	highlightSmalltalkContext	<Object>	textBlock	<ProtoObject | PseudoContext>"
"FFICalloutAPITests","Tests for FFICalloutAPI"
"SDL_KeyUpEvent","SDL2 library structure"
"OSTouchActionEvent","Super class of all action"
"WeakSet","I'm a Set with weak elements. Implementation.	flag is a special object that indicates that at a given slot the set has a free entry."
"GTSpotterMethodListProcessorFilter","I implement a filtering strategy for processors based on method signatures (method selector and class).I only allow processors created by a method currently added to the filter.I can attach to each processor a configuration block.For examples view my class side methods in teh category 'example'"
"ClyNavigateBrowserBackCommand","I am a command to go back in the browser.I move browser to previous navigation state.By default I can be executed by alt+left shortcut"
"RadioButtonPresenter","A RadioButtonPresenter is a spec presenter for RadioButton.See AbstractFormButtonPresenterself example! The method privateSetState: is really private and should only be used by RadioButtonGroup or RadioButtonGroupPresenter !You can also have a look at RadioButtonGroupExample for a full example of how to use them with a group.I provide more accessors on my super class ValueHolder- actionWhenActivatedHolder- actionWhenDeactivatedHolder- enabledHolder- stateHolderI provide the variable canDeselectByClick and its accessors, it is a boolean representing if the radio can be deselect directly by the user using a click on it.I specialize state: to use the variable canDeselectByClick."
"HermesCommandLineHandler","This is the command line handler to load Hermes files in the image.The format is intented to export any of the objects. However, the command line expects to have a package as its root element.It loads the hermes files passed as parameter.They are loaded in the order of the parameters.Usage: loadHermes [--save] [extendedOptions] [<hermesFiles> ...]	--save                		save after loading the packages if there is no error	 <hermesFiles>      	a list of .hermes files to load in the image.	extendedOptions 	read the extension section.	Examples:	#Load the package Test-Package	pharo Pharo.image loadHermes Test-Package.hermes		#Load the package Test-Package and saving	pharo Pharo.image loadHermes --save Test-Package.hermes		Extensions =========When Hermes-Extensions is loaded additional options are present: 	no-fail-on-undeclared		It does not fail the loading if there are new undeclared variables. By default it fails.	on-duplication=action	When there is a duplication in the loading package what is the action to take:								fail		(default) Fail on a duplication								ignore	Ignore the error and do not do nothing. Keeping the image version								replace	Replace the image version with the one in the Hermes Package.									Examples									#Load the package Test-Package without failing on new undeclared variables.	pharo Pharo.image loadHermes --save --no-fail-on-undeclared Test-Package.hermes	#Load the package Test-Package replacing the image version with the ones in the hermes file.	pharo Pharo.image loadHermes --save --on-duplication=replace Test-Package.hermes"
"WindowsStore","I'm a specific store for Windows file systems"
"MorphicMultiColumnListAdapter","I am the adapter used to bridge a MultiColumnListPresenter and a PluggableMultiColumnListMorph"
"IconicButton","A ""Simple Button"" in which the appearance is provided by a Form."
"LGit_GIT_EUNBORNBRANCH",""
"ZnNullEncoder","I am ZnNullEncoder, a concrete subclass of ZnCharacterEncoder.I perform no encoding or decoding at all for all characters with a code value below 256.Note that in principle I could handle Latin1 (ISO-8859-1) or ASCII, although that is not completely correct. To get maximum efficiency, it remains an option.	Part of Zinc HTTP Components."
"RBAssignmentInIfTrueRule","Moving assignments outside blocks leads to shorter and more efficient code.For example:test 	ifTrue: [var := 1]	ifFalse: [var:= 2]is equivalent to:var :=  test 	ifTrue: [1]	ifFalse: [2]"
"RFSlotRead","I model the read from a slot"
"ClyTraitUserTag","I am used to mark classes which inherit traits"
"OCASTClosureAnalyzer","I visit the AST of method a second time (after OCASTSemanticAnalyzer) to analyze temps related to closures."
"SycCopyMethodNameToClypboardCommand",""
"SycRemoveClassCommand","I am a command to remove all given classes"
"RubNotificationStrategy","I encapsulate the logic that gets executed when, during compilation, a RubSmalltalkEditor receives a notification from the compiler. I am an abstract class. My subclasses define the actual behaviour."
"PharoTutorialHelpTutorialBuilder","I build HelpSystem topics to browse PharoTutorial tutorials"
"Locale","Main comment stating the purpose of this class and relevant relationship to other classes.	http://www.w3.org/WAI/ER/IG/ert/iso639.htm	http://www.oasis-open.org/cover/iso639a.html	See also	http://oss.software.ibm.com/cvs/icu/~checkout~/icuhtml/design/language_code_issues.html	http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.10	ISO 3166http://mitglied.lycos.de/buran/knowhow/codes/locales/"
"AthensQuadSegment","i represent a quadric Bezier path segment.Any quadratic spline can be expressed as a cubic (where the cubic term is zero). The end points of the cubic will be the same as the quadratic's.    CP0 = QP0    CP3 = QP2 The two control points for the cubic are:    CP1 = QP0 + 2/3 *(QP1-QP0)    CP2 = QP2 + 2/3 *(QP1-QP2) "
"ClyUnknownBrowserContext","I represent undefined browser context. I usually used as a stub in cases when context is not found or is not implemented for required places in the browser.Many browser extensions are defined for the specific context. And I allow to ignore all of them when given part of browser do not reifies real context"
"Association","I represent a pair of associated objects--a key and a value. My instances can serve as entries in a dictionary.Implementation notes: Note that hash is not redefined even if the = was redefined because Association>>hash may cause extreme slowdowns in compiling Unicode methods. Association>>hash does not need to hash the value; it's slow and useless."
"LGitCheckoutPerfDataCallback",""
"RowLayout","A simple row layout."
"NumberParserTest","Provide tests for new clas aimed at parsing numbers.It duplicates NumberParsingTest, with few more tests."
"ConfigurationOf","You must use a *configuration* when your project is stored in arepository using `.mcz` files.If you are using a source code manager (SCM) like [git][1] and havecreated a *baseline* (see the [**BaselineOf** class comment][3] for more info)you may use a *configuration* to associate a specificgit commit (SHA, branch name, tag name) with a [Metacello version][2].To create a new Metacello configuration:1. Create a subclass of the **ConfigurationOf** class. The configuration   class for your project should be names by appending the name of   your project to the string `ConfigurationOf`. The name of the   category and package should be the same as the name of the class:    ```Smalltalk    ConfigurationOf subclass: #ConfigurationOfExample      instanceVariableNames: ''      classVariableNames: ''      poolDictionaries: ''      category: 'ConfigurationOfExample'    ```2. Create a **baselineXXXX:** method where you specify the structure of your project:    ```Smalltalk    baseline0100: spec      <baseline: '1.0-baseline'>      spec for: #common do: [        spec repository: 'http://ss3.gemstone.com/ss/Example'.        spec          package: 'Example-Core';          package: 'Example-Tests' with: [            spec requires: 'Example-Core' ]].    ```3. Create a **versionXXXX:** method where you specify the specific   versions of the packages to be loaded for this version:    ```Smalltalk    version01000: spec      <version: '1.0' imports: #('1.0-baseline')>      spec for: #common do: [        spec blessing: #release.        spec          package: 'Example-Core' with: 'Example-Core';          package: 'Example-Tests' with: 'Example-Tests' ].    ```4. Create a Monticello package for your **ConfigurationOf** class and save it in the repository where your packages are stored. [1]: http://git-scm.com/[2]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md#metacello-version-numbers[3]: https://github.com/dalehenrich/metacello-work/blob/master/repository/Metacello-Base.package/BaselineOf.class/README.md"
"FFIFunctionResolutionStrategy","I define a strategy of function resolution for doing callouts. By default, functions are obtained in first execution of it, in VM side (it just do a lookup of the symbol, and installs it in the ExternalLibraryFunction literal (no point in doing it every time). Sometimes we need to obtain this function pointers in different ways (for example when doing indirect calls: accessing functions installed in a global symbol, instead the real name of it). My children will implement different strategies to obtain this function pointers. They need to provide two methods: isApplicableFor:  ""answers true if function should be resolved using this strategy""resolveFunctionAddress: ""answers the solved function address (an ExternalAddress)"""
"LGitReferenceTypeEnum",""
"OmStoreFactory","I provide a facade to create and reuse OmStore hierarchy instances."
"RxmTerminator","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--Instances of this class are used to terminate matcher's chains. When a match reaches this (an instance receives #matchAgainst: message), the match is considered to succeed. Instances also support building protocol of RxmLinks, with some restrictions."
"TTLCache","I am TTLCache. I am an LRUCache.I record a timestamp when I store a value for a key.Upon a cache hit, I check if the timestamp of the stored value does not exceed the allowed time to live duration - if so, the value has become stale and I will retrieve the value again.The default timeToLive is 1 hour.Note that eviction, making room in a full cache, still happens according to the LRU algorithm from my superclass - stale entries to not get evicted automatically.I can remove all my stale values in O(n), see #removeStaleValues.Implementation NotesI extend my superclass by storing TTLAssociations (which also hold a timestamp) instead of Associations in the DoubleLinkedList, lruList, ordered from least to most recently used.In case of a hit, there is now an additional check to see if the value has become stale (exceeded its time to live). If so, the value is computed again.Timestamps are implemented using Integer seconds (Time totalSeconds) for performance reasons."
"GLMMultipleUpdateAction","This class simply specifies that the updating announcement could come from any of the objects in the announcer objects collection."
"IceTipCache","I'm a cache that can be reseted when some announcements arrive. I'm used to cache values to be used on the UI.I can be reseted (sending #reset), but responsibility of reset caches belongs to presenters who use them."
"ManifestFuel","The core package of Fuel - the Smalltalk object serializer"
"IceNonInteractiveCredentialsProvider","A credentials provider that retrieves defaults or throws exceptions (but do not interacts with the user)"
"MalDominance",""
"UserOfFooSharedPool","I am an sunit test for SystemNavigation."
"GLMTabLabelBrick","A GLMTabLabelTurboBrick is  single resizable Tab Label used in LazyTabGroupMorph.Instance Variables	normalLabel:		<Object>	selectedLabel:		<Object>	tabSelector:		<Object>normalLabel	- xxxxxselectedLabel	- xxxxxtabSelector	- xxxxx"
"GLMLabelBrick","A GLMLabelBrick is standard label Brick, that can shrink text if it's size becomes smaller then actual text size.Text shrinking works out of box, you don't need to do anythingInstance Variables	dotsBrick		<GLMStringBrick>	isDotsAdded:		<boolean>	stringBrick:		<GLMStringBrick>dotsBrick	- represents a Brick that is added at the end of the text when Brick's size becomes smaller than actual text sizeisDotsAdded	- true if dotsBrick is currently added visible, false otherwisestringBrick	- represents actual label text Brick"
"DAPackageDependencyWrapperTest",""
"EpSettings","My class-side protocol initializes System Settings' stuff."
"CmdToolContext","I am a root of application context hierarchy. I am bound to concrete tool (widget. element) of application.My subclasses provide specific information about tool/application state.They are used to declare command activation strategies. Every activation is created for concrete context class.@TODO: Instances of my subclasses are used for command lookup. Each activation strategy checks that given context instance is activation of declared context class:	aToolContext isActivationOf: toolContextClass By default I am activation of any of my superclasses. If command activation is defined for most base context class like me (CmdToolContext) then such command will be available for any kind of command tools: any shotcuts lookup, any menu, etc..Subclasses can override this method to extend set of commands which should be available for them but which declared for other context classes.I also responsible for command activation:- allowsExecutionOf: aCommand- prepareNewCommand: aCommand- prepareFullExecutionOf: aCommand- applyResultOf: aCommandI delegate these messages to command with idea that my default implementation is kind of standard context. For example: 	CmdToolContext>prepareFullExecutionOf: aCommand		aCommand prepareFullExecutionInContext: selfMy subclasses can override these method to ask commands for specific set of activation messages.I provide comparison method #isSimilarTo: to compare two context instances. It can be usefull to detect that some visible tool/widget is not relevant anymore to current context of application.  It can be used when kind of tools should be rebuilt when some selections are changed.Use following method to create instances:	CmdToolContext for: aTool	Internal Representation and Key Implementation Points.    Instance Variables	tool:		<Object>"
"RBAddMethodTransformation","Adds a method in a class. The source code of the method, as well as the protocol in which the method will be categorized, can be specified.Usage:| transformation |transformation := (RBAddMethodTransformation		sourceCode: 'printString1 ^super printString'		in: RBTransformationTest		withProtocol: #accessing)		transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:The source code of the method must be syntactically valid."
"FFISizeT","I'm a size_t type. I can change in different architectures (32/64bits)"
"Win64Platform","I am a an object representing a Windows platform (64bits). Use myself to access platform specific features.Please keep me polymorphic to the the other platform objects.To get the current platform, you can evaluate:OSPlatform current."
"SpecFocusOrderTest","SUnit tests for SpecFocusOrder"
"DAPackageRelationGraph","I'm a package dependency graph. To build the dependency graph among packages, you have just to give a set of PDPackage on entry. Then :	- use the message computeStaticDependencies messages to retrieve all the dependency among the packages.	- use the message removeInternalDependencies if you want to remove all the internal dependency.	- finally use combineDependencies to combine each dependency which have the same source and the target into 	composite dependency.		"
"ClyOverriddenMethodTag","I mark overridden methods which are overridden by any of subclasses"
"EyeTreeInspector","I am a tree inspector that takes the EyeElements from the default inspectors and displays them in a tree."
"ZipExtensionTests","Test extension methods for Zip support"
"TTwo","I am a trait used for testing."
"KMShortcutHandler","I am a shortcut handler that installs keymappings in the system."
"ClyAddWatchpointCommand","I am a command to install watchpoint into the given method or source node"
"Continuation","I permit to save the execution flow and to restart it later. I was originally used in seaside.Example :You have an object with the instance variable executionFlow.You save the current execution flow with :Continuation currentDo: [ :cc | executionFlow := cc]You restart the execution flow with :executionFlow value: true"
"ClassRepackaged","Notify about repackaging of a class"
"ASTEvaluationTest","I am testing AST evaluation "
"EpFilterTest",""
"GTStringFilter","I provide the functionality for filtering items based on a query.I return the list of all items that match the filter but my subclasses should only send to the processor the first  #itemsLimit items ."
"PharoKernelAssembly","I store metadata for this package assembly."
"RBClassesHelp","I am the base class for a HelpTopic/Builder for a set of classes.I am used to create a list of pages for a class and all of its subclasses.Unlike the ClassApiHelpBilder, I only put the class comments as page content andignore any method / method comments."
"KMKeymapBuilderTest","SUnit tests for key map builder"
"IceTipCommitDiffModel","I'm a ""static"" diff. I represent a diff between two concrete commits."
"GRGuradGuardClauseRule","Transforms single branch conditionals with multi-statement bodies into a sequence of statements guarded by a conditional return.For example[[[ foo 	statements. 	condition ifTrue: [ statement1. statement2 ]]]]is transformed into [[[  foo	statements.	condition ifFalse: [^self].	statement1.	statement2.]]]"
"GLMMorphicPaneRenderer",""
"IceTipCalculateDirtyPackagesCommand",""
"MetacelloMCProjectSpecTestCase",""
"KMNoKeymap","I am a Null object representing the absence of a Keymap."
"ManifestSystemHashing","Contains different hashing algorithms"
"ReflectivityReificationTest",""
"ClyInvertVariableOrderCommand","I am a command to invert hierarhcy of variable list in full browser.By default variables are ordered from superclass to subclass. And I allow to toggle this order"
"T2TraitWithSlots","Unit test for traits with slots"
"RBAddVariableTransformationTest",""
"FT2GlyphRenderer","i am used to render freetype glyphs using balloon primitives."
"FillStyleBorder","BorderStyle supporting general (potentially composite) fillstyles. "
"TEnableOnHaloMenu","Trait providing an ""enabled"" option on the halo menu."
"MetacelloRepositorySpecTestCase",""
"Bitmap","My instances provide contiguous storage of bits, primarily to hold the graphical data of Forms. Forms and their subclasses provide the additional structural information as to how the bits should be interpreted in two dimensions."
"OCSourceCode2BytecodeTest","I provide at least one test which corresponds to a message sent by InstructionStream>>#interpretNextInstructionFor: to its client."
"GLMMorphicRubricHighlightedTextRenderer",""
"OCSelfVariable","I model self variables "
"SocketStream","SocketStream is a wrapper for class Socket making it easy to write networking code by giving the programmer a stream-like protocol. A Socket is a two way communication link with two logically separate channels - input and output. The Socket class is the lowest level in Pharo for network communication and using it directly can be difficult and bug prone.A SocketStream can be in binary or ascii mode, ascii is the default which means you are transmitting and receiving Strings. Most Internet protocols are in clear text ascii, like for example HTTP. Another setting is what timeout you want to use - default is the standardTimeout from Socket. More settings can be found in the method category 'configuration'.Simplest example of connecting, sending/receiving and closing:| stream result |stream := SocketStream openConnectionToHostNamed: 'www.pharo-project.org' port: 80.[[stream nextPutAll: 'GET / HTTP/1.0'; crlf; crlf; flush.result := stream upToEnd. ""Give us all data until the socket is closed.""Transcript show: result; cr.]	ensure: [stream close]]		on: ConnectionTimedOut		do: [:ex | Transcript show: ex asString;cr. ex resume]There are two important things to note above:	- The methods in category ""stream in"" can signal two exceptions (unless turned off with #shouldSignal:):		ConnectionClosed and ConnectionTimedOut	- We close the stream using #ensure:, that is to make sure it isn't left opened.	- We use #on:do: to catch any signal. In this case we do not need to catch ConnectionClosed since #upToEnd does that for us intrinsically.----------------SocketStream (below called SS) is a reimplementation of 'Old'-SocketStream (below called OSS) - the class that originates from the original Comanche implementation but now is included in standard Squeak. SS has the same protocol as OSS and is meant to replace it. SS is faster, more flexible, is better documented and adds a few features:1. #shouldSignal:, which decides if SS should signal low level Socket exceptions (true) or if it should swallow them like original OSS did. Default is true. The only reason I added this is for backwards compatibility - not signalling causes problems - see bug 4 below.2. #nextAllInBuffer, #nextInBuffer:, #skip:, #receiveData:, #nextPutAllFlush: and #recentlyRead are new additions to the public protocol.It also fixes various bugs:1. #isDataAvailable could theoretically answer false, when there actually is some in the buffer in OSS. If #receiveDataIfAvailable reads the last byte then the following ""socket dataAvailable"" would answer false. So the last byte would be sitting in the inStream missed.2. #upToAll: in OSS has several problems, for example - #positionOfSubCollection:ifAbsent: which was introduced answers one position too low. This was compensated in upToAll:, but only in the pushBack: call, not the actual result being returned which was cut short 1 byte. Amusingly this makes KomHttpServer not use ""Keep-Alive"" since the last $e in 'Alive' was cut short. :)3. SS doesn't inherit from PositionableStream since that just breaks various inherited messages, like for example #skip:. OSS should IMHO be changed to inherit from Object - or of course, replaced in full with SS. :)4. Since SocketStream by default signals closes and timeouts the SocketStreamTest now passes. The reason for SocketStream to fail is that while it does timeout on a low level (#SocketStream>>receiveData doesn't hang forever) - the callers of #receiveData sometimes loop - like in #next:, and thus eliminates the timeout. SS warns about some methods (in their method comments) not honouring timeouts if shouldSignal is false, I really don't know what they should do in that case:	#next:, #upTo:, #upToAll: and #upToEnd (and #receiveData:)The primary reason for the SS implementation is optimal performance. The main differences in implementation with the old OSS are:1. SS uses two buffers directly (inBuffer and outBuffer) with pointers marking start and stop within the buffer. OSS instead uses two regular streams, a ReadStream and a WriteStream. Using internal buffers makes it possible to avoid copying and reallocation in various ways, it also makes SS be able to have specialized growing/buffer moving behaviour.2. #upTo:, #upToAll: and #peekForAll: uses selectged String messages that in turn uses fast primitives for searching. OSS used other messages that fell back on byte per byte reading.3. #receiveData in OSS creates a temporary buffer stream for each call! During a long read operation, like say #upToAll: (which for example is used when uploading files using HTTP POST forms), this is devastating - especially since the default size is only 2000 bytes - and leads to a very high number of low level read operations on the Socket, typically 100 times more calls than with OSS. The buffer in OSS is held in an instvar (not recreated for each call), is larger from the start and above all - grows dynamically by doubling. OSS can also avoid a grow/reallocation by doing a ""move down"" if data has been read from the SS as it comes in and through that making room in the lower part of the inBuffer. The net result is that upToAll: for large files is about 10 times faster.4. The implementation of upTo: and upToAll: tries to avoid doing unnecessary find operations in the buffer and is greedy by default, which means it favors reading more data - if available - before searching for the stop sequence. If we had #findString:startingAt:stoppingAt: this wouldn't have to be greedy and we wouldn't be needlessly scanning dead buffer area. VM hackers? Also, while you are at it - make it work for ByteArrays too. :)SS can not be run unbuffered, since that seems unneeded. The option to autoFlush is still available, with it set to true SocketStream (just like OSS) will flush on its own on each nextPut:/nextPutAll:, otherwise flushing it will have to be done manually but is done on close.The first performance tests shows that, as noted above, receiving large amounts of data using #upToAll: is greatly improved - factor of 10. Serving HTTP with small payloads seemed at first not be faster at all - but this is due to the high overhead of Socket connect/close and other things. Increasing payloads show a difference and especially with keep alive on - where the new SS roughly doubles the throughput!"
"MCFileInTest",""
"CircleMorph","I am a specialization of EllipseMorph that knows enough to remain circular."
"FLNegative8SmallIntegerCluster","A cluster of unsigned int 8bit"
"GLMMockSimpleTransmission",""
"ClyGroupedClassVariables","I special variable query result which filter only class variables and represent them as ClyVariableMethodGroup instances in hierarchical order"
"IceCredentialsProvider","I am in charge of remembering credentials information, configuration and providing it as required by the different backend implementations.I have a counter to avoid for trying for ever with the same credentials."
"GTFilterSubstrings",""
"ShortIntegerArrayTest","SUnit Test for ShortIntegerArray"
"MCSmalltalkhubRepository","I am specialized version of an MCHttpRepository for http://smalltalkhub.com.I support a faster mcz listing that does not rely on parsing an html size."
"ZnHeadersTests",""
"LGitRepository","A LGitRepository represents a git repository.Instance Variables	handle:		NBExternalObjecthandle	- reference to the external object"
"SHTextStyler","I am an Abstract class.Subclasses of me can create formatted, coloured, and styled copies of Text that is given to them.They may perform their styling asynchronously, in a background process which I create and manage.My public interface is...	view: aViewOrMorph - set the view that will receive notifications when styling has completed.		format: aText - modifies aText's string	style: aText - modifies the TextAttributes of aText, but does not change the string, then sends #stylerStyled: to the view.	styleInBackgroundProcess: aText - performs style: in a background process, then sends #stylerStylednBackground: to the view.	styledTextFor: aText - answers a formatted and styled copy of aText	unstyledTextFrom: aText - answers a copy of aText with all TextAttributes removedSubclasses of me should re-implement...	privateFormat: aText - answer a formatted version of aText; the String may be changed	privateStyle: aText - modify the TextAttributes of aText; but do not change the String			"
"ClyTraitRoot2",""
"AthensPaintMode","A paint mode controls how the incoming color (source) will be transferred to surface (destination).To set a paint mode for canvas, send a message with corresponding mode name to my instance.My instance(s) is available via canvas protocol, i.e. 'canvas paintMode'.For example, to set an 'over' paint mode, use following:	canvas paintMode over.If you want to restore original paint mode after performing drawing operations, which may change it, use #restoreAfter: method , i.e. 	canvas paintMode restoreAfter: [		.. perform any drawing operations here..		].Since different backends may support different set of paint modes, the default implementation in AthensPaintMode for all mode setters is to signal an error.To query a set of available paint modes, supported by backend, use #availableModes message."
"GTSpotter","I am  the main model class.I handle the list of current search steps and provide the main functionality for spawning new search steps or removing old ones.I maintain search steps as a stack. I  trigger a search when the user enters a query (#setText:from:) and maintain the search text.To avoid crashes due to exceptions in search processors I can install an exception handler that prints exceptions to the transcript instead of opening a debugger (#beDeployment). Afternatively I can install an exception handler that  propagates exceptions (#beDeployment)"
"NOCCompletionTable","I keep track of symbols to be retrieved in ocompletion algorithm. Unlike ecompletion, I learn something and try to retrieve users last occurences of typing sequences first, then the system symbols which match. "
"GTHelpDebugAction","I open a HelpBrowser for the currently active debugger.To specify a help topic a debugger has to override the class side method #helpClass."
"PerformMessageCommandLineHandler","Usage: perform <global> <messageSelector>  [ <arguments> ] [ --save ]	global	A class name or a global name. Receiver of the message (e.g. Smalltalk)	messageSelector   The message selector to be perfomed	Documentation:Performs a message on a given class or global object. This command-line handler can be used to execute some code if a compiler is not loaded in the image. All message arguments are strings.Examples:	pharo Pharo.image perform Smalltalk garbageCollect --save	pharo Pharo.image perform PerformMessageCommandLineHandler printReversed:times:  olleH 10"
"ClyMethodVisibilityMorph","I represent simple checkbox which toggle method visibility of the full browser.I am created on visibility level which gives me new class scope which I pass to the browser.Internal Representation and Key Implementation Points.    Instance Variables	browser:		<ClyBrowser>	visibilityLevel:		<ClyMethodVisibilityLevel>"
"MetacelloLookupBaselineSpecForEnsureLoad",""
"SDL_TouchFingerEvent","SDL2 library structure"
"ZnBufferedReadStreamTests","I am ZnBufferedReadStreamTests."
"MCMultiPackageLoader","A PackageLoader doing some additional cross-package checks"
"ZnLimitedReadStreamTests",""
"SearchableTreeTest",""
"EpSorterLog","I'm a log whose entries can have an arbitrary order and origin."
"IceTipCommitInfoPresenter","Description--------------------I'm a panel to show the history of a commitish (usually a branch or a tag). I display infos on it and diffs.I'm usually used as part of an IceTipHistoryBrowser."
"MCSnapshot","MCSnapshot represents a list of entities compared to a given base entities. It holds a list of definitions (instances of MCDefinition subclasses). It can install these entities or update a package."
"MCDependencySorter","A MCDependencySorter computes the dependencies to a set of entities."
"SpecStubTreeView","Only stub object, no real view is displayed."
"SpaceTally","I'm responsible to help getting information about system space usage. The information I compute is represented by a spaceTallyItemtry something like: ((SpaceTally new spaceTally: (Array with: TextMorph with: Point)) 	asSortedCollection: [:a :b | a spaceForInstances > b spaceForInstances]) SpaceTally new systemWideSpaceTallyThis class has been created from a part of SystemDictionary. It still deserves a niceclean, such as using object instead of array having 4 slots.sd-20 June 2003"
"FT2BitmapSize","Do not rearrange these fields!This structure models the size of a bitmap strike (i.e., a bitmapinstance of the font for a given resolution) in a fixed-size fontface.  It is used for the `availableSizes' field of theFT2Face structure.<Fields>height :: The (vertical) baseline-to-baseline distance in pixels.It makes most sense to define the height of a bitmapfont in this way.width  :: The average width of the font (in pixels).  Since thealgorithms to compute this value are different for thevarious bitmap formats, it can only give an additionalhint if the `height' value isn't sufficient to selectthe proper font.  For monospaced fonts the average widthis the same as the maximum width.size   :: The point size in 26.6 fractional format this font shallrepresent (for a given vertical resolution).x_ppem :: The horizontal ppem value (in 26.6 fractional format).y_ppem :: The vertical ppem value (in 26.6 fractional format).Usually, this is the `nominal' pixel height of the font.<Note>The values in this structure are taken from the bitmap font.  Ifthe font doesn't provide a parameter it is set to zero to indicatethat the information is not available.The following formula converts from dpi to ppem:ppem = size * dpi / 72where `size' is in points.Windows FNT:The `size' parameter is not reliable: There exist fonts (e.g.,app850.fon) which have a wrong size for some subfonts; x_ppemand y_ppem are thus set equal to pixel width and height given inin the Windows FNT header.TrueType embedded bitmaps:`size', `width', and `height' values are not contained in thebitmap strike itself.  They are computed from the global fontparameters."
"GlobalIdentifierFuelPersistence","I serialize or materialize objects using FUEL framework. Create instance of me calling GlobalIdentifierPersistence fuel."
"SpecTableLayoutProperties","Used to describe properties for table layouts in Spec"
"RxmMarker","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A marker is used to remember positions of match of certain points of a regular expression. The marker receives an identifying key from the Matcher and uses that key to report positions of successful matches to the Matcher.Instance variables:	index	<Object> Something that makes sense for the Matcher. Received from the latter during initalization and later passed to it to identify the receiver."
"FailingTestResourceTestCase","SUnit tests for failing test resources"
"UndefinedObjectTest","This is the unit test for the class UndefinedObject. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"ComposablePresenterWithModel","I am a composable presenter that  keeps reference to its domain model (announcingObject) optionally wrapped in a value holder and subscribes yourself to it.As the model (announcingObject) we can set a subclass of Model or a value holder (NewValueHolder). In that case such models are stored directly into announcingObject.You should implement the method #modelChanged in my subclasses"
"OmCurrentGlobalName","I am a DynamicVariable that holds the globalName of a OmFileStore. I'm used during read and write operations. See references to my class name."
"MethodClassifier","I am a method classifier that sets the protocl of methods using some simple rules.Example Usage:	MethodClassifier classify: MyClass >> #mySelector"
"ClyPackageExtensionMethodsQuery","I return all methods from the scope which are extended by particular package.To instantiate my instances use following expressions: 	ClyPackageExtensionMethods of: aPackage.	ClyPackageExtensionMethods of: aPackage from: aScope Internal Representation and Key Implementation Points.    Instance Variables	package:		<RPackage>"
"MorphicTabManagerAdapter","I am the adpater used to bridge a TabManagerPresenter and a TabManager"
"BaselineOfSlot",""
"GLMPagerSynchronizeScrollAnnouncement",""
"OCLiteralList","Holds a unique ordered collection of literals"
"MetacelloScriptProjectSpecNotification",""
"GLMBandBrick","A GLMBandBrick is a simple Brick with height that shrinks to wrap subbricks.Usually used within scroll panes"
"TestingPointModel","A testing model for testing of the class ComposablePresenterWithModel"
"RBAddInstanceVariableTest",""
"EphemeronTests",""
"ShSlotChangeDetector","I know how to detect a change in the collection of slots."
"IceTipItemBar","I'm a general bar to keep items inside. I can be extended to implement toolbars and statusbars."
"HEExtendedEnvironment","I wrap the target environment.I provide access to all the elements in the environment and also to:- The class being deserialized- The method being deserialized- The selector of the method being deserialized."
"EyeMorphViewer","A simple inspector view that displays a morph"
"GTOpalScopeBrowser","This is a simple browser that displays the scopes that the Opal Semantic Analysis add to te rb tree and previews each node on the source code.Example:self openOn: (self>>#compose) ast "
"ClyClassGroupProviderTestCase",""
"ClyMethodViewToolbarGroup","I am a toolbar menu group to show method group view modes of the browser together"
"ClyAllInstanceVariablesQuery","I return all instance variables from given scope.Scope should support #instanceVariablesDo:.Now only class scopes support it."
"ManifestIssueTracking","Utilities for issue tracking on Pharo development"
"GLMTabulatorMorphicTest",""
"RBPatternParser","RBPatternParser is a subclass of RBParser that allows the extended syntax that creates matching trees. These trees can be used by the ParseTreeMatcher to search and transform source code."
"ZnNewLineWriterStream","I am a write stream wrapping a second stream. Whenever they ask me to write a cr, a lf, or a crlf I'll instead print a new line depending on a configured convention. By default I use the current platform convention. | stream converter |stream := '' writeStream.converter := ZnNewLineWriterStream on: stream.converter cr; cr; lf; nextPut: $a.stream contentsA ZnNewLineWriterStream can be configured with the desired line ending convention using the methods converter forCr.converter forLf.converter forCrLf.converter forPlatformLineEnding."
"KMPerInstanceTests","SUnit tests for key mapping per instance"
"BehaviorTest","SUnit tests for Behavior"
"DebugSystemSettings","Settings for debugging"
"RBSentNotImplementedRule","This smell arises when a message is sent by a method,  but no class in the system implements such a message. This method sent will certainly cause a doesNotUnderstand: message when they are executed."
"DADependencyFromClass","A PDDependencyFromClass is a dependency from the class. The source class is stored in the inst var."
"RubPrimarySelectionMorph","I represent the morph which shows the current selection "
"RBBlockReplaceRule","RBBlockReplaceRule replaces the matching node by the result of evaluating replaceBlock. This allows arbitrary computation to come up with a replacement.Instance Variables:	replaceBlock	<BlockClosure>	The block that returns the node to replace to matching node with."
"CommandLineHandlerTest",""
"OSJoyDeviceRemovedEvent","I am a joystick device added event.This event is generated when a joystick is disconnected from the computer."
"EpMonitorIntegrationTest","I test EpMonitor integration (either enabled or disabled)."
"LzwGifDecoder","I implement the modified Lempel-Ziv-Welch (LZW) algorithm for lossless GIF decompression. My primary purpose is to decode streams of bytes that have been encoded with this modified version of LZW as used in the GIF standard.My instances require, at minimum, a maximum code size (via #maxCode:), a minimum code size (via #minimumCodeSize:), and of course a stream of bytes to decode (via #codeStream:). Once these are set, implementors can simply send the #decode message, which will respond with a decoded ByteArray.Optionally, implementors can make use of the #onDecodedBit: message, which takes a Block with a single argument corresponding to a decoded bit. This Block is called each time a complete byte/bit-level value for the bitmap has been decoded.For an example of use, see GIFReadWriter >> #readBitDataOnFrame:.I am separated out from GIFReadWriter for clarity and better debugging.See:https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welchhttps://www.w3.org/Graphics/GIF/spec-gif89a.txt"
"FLProxyThatBecomesItsContent","Used at #testObjectByProxyThatBecomesItsContent"
"FixedFaceFont","I am a font for special purpose like password or fallback.I can show same form whenever someone requests any character.Variable displaySelector is future use to show a form dynamically.(Although it would be unnecessary...)"
"IceChangeSetChanged","I announce when a IceChangeSet has changed."
"OrderedCollection","I am one of the most common collection. I can grow, and elements can be added sequentially by the user.  Description -------------------I am more general than Array; my size grows on demand. I store data inside an Array and remember the first and last index. If I need, I can replace this Array by a larger one.I am usually used to store an unknown amount of objects. When my contents size will not move, one can send me the #asArray message to get better performances, but I cannot grow anymore (add: and remove: are not supported on Array).Public API and Key Messages-------------------	- #new / #withAll: aCollection / #with: anObject 	are common constructors- #add: anObject / #at: anIndex put: anObject / #at: anIndex ifAbsentPut: anObject 	allow to add new elements to myself.- #remove: anObject / #removeIndex: anIndex 	allow to remove an element.	- #do: aBlock / #collect: aBlock / #select: aBlock / #reject: aBlock 	are common iterators.Examples-------------------			""There is many ways to create an OrderedCollection, here are some:""	ordCol := OrderedCollection new.	ordCol		add: 'one';		add: 'two';		addFirst: 'zero';		addLast: 'three'.	ordCol.		""returns: an OrderedCollection('zero' 'one' 'two' 'three')""	""or""	ordCol := OrderedCollection with: 'one' with: 'two' with: 'three'.	ordCol.		""returns: an OrderedCollection('one' 'two' 'three')""	""or from an other collection""	ordCol := OrderedCollection withAll: #('one' 'two' 'three').	ordCol.		""returns: an OrderedCollection('one' 'two' 'three')""	""or""	#('one' 'two' 'three') asOrderedCollection.	""Some manipulations""	ordCol := OrderedCollection ofSize: 2.	ordCol		at: 1 put: 'one';		at: 2 put: 'two';		at: 2 ifAbsentPut: 'three'.	ordCol.		""returns: an OrderedCollection('one' 'two')""	ordCol		remove: 'two';		removeIndex: 1.	ordCol.		""returns:  an OrderedCollection()""	""A last one""	ordCol := OrderedCollection with: $b with: $c with: $a.	ordCol sort: [ :first :second | first < second ].		""returns: an OrderedCollection($a $b $c)""	ordCol collect: [ :element | element asUppercase ].		""returns:  an OrderedCollection($A $B $C)""	ordCol select: [ :element | element >= $b ].		""returns:  an OrderedCollection($b $c)""	ordCol do: [ :element | element inspect ].	ordCol asArray		""returns: #($a $b $c)""			 Internal Representation and Key Implementation Points.-------------------	    Instance Variables	array:			<Array> 		An Array where I store my elements. If I need a bigger one I can remove this one and create a new one.	firstIndex:		<Integer> 	The index of my first element.	lastIndex:		<Integer> 	The index of my last element.I store my elements inside an array. This array is AT LEAST of the size of my elements. If someone adds an element and my array is not large enough, I remove it and I create a new one larger with the same elements (usually, the size double)."
"ManifestUnicodeInitialization","Class extensions on other Pharo packages in order to give them access to mappings of Unicode values "
"CollectionsAssembly","I contain all basic collections."
"RBFormatterTest","SUnit tests for BISimpleFormatter"
"PropertySlotTest",""
"RelationSlotTest",""
"ImageReadWriterTests","Functional tests for image IO to binary streams and files for the major formats (JPEG,PNG,GIF,BMP)"
"GLMLogger","This is the abstract class for the Glamour loggers. These classes are typically used for debugging hte highly dynamic Glamour model."
"EyeInspector","To do a specific inspector subclass this and override 	EyeInspector>>addSpecialFieldsThen on your object override	Object>>inspectorClassso it returns your new inspector"
"ValueHolder","A value holder holding a value "
"MethodAnnouncement","An abstract class for method announcements."
"FFIOpaqueObjectTests","Tests for FFIOpaqueObjectType"
"HETrait","I implement the custom behavior for exporting a trait.My header only includes the name of the trait.Mostly of my behavior is from HEMethodContainer."
"MorphDropListMorph","Drop list supporting morphs in list."
"OSTouchThreeFingersSwipeEvent","I am the abstract class for all three fingers swipe events"
"TSequencedElementAccessTest","A trait for test purposes"
"ReCritiqueTest",""
"SDL_ControllerDeviceRemovedEvent","SDL2 library structure representing a controller device removed data."
"FLSimpleStack","FLSimpleStack is a simple stack used in Fuel to avoid a recursion while traversing the graph to serialize. While analizing the content of an object (inst vars) we can encounter simple objects (direct string representation) or complex objects (composite). In the latter case we start analizing those instVars.So... Imagine object X with two instVars Y and Z. Imagine the method of the traverse is called #analye:.  So you do #analize: X.  Then, in such method you check whether X has regular pointers to regular objects, and if true, you analize them. So in this case you would send #analyze: Y and #analize: Z, generating the recursion. Right ?  Notice that the time between analyse: Y and analyse: Z is dependent on the graph that is attached to Y. Y can have objects that have further objects etc. So leaving X aside, Y can be the first object to serialize and Z the last.With this FLSimpleStack, instead of sending #analyze: Y and #analize: Z  what Fuel does is just to do a push on a stack:   #push: Y  and #push: Z. And then we are done with X, so we pop from the stack and we continue with the next object (at some point in the future we will pop Y and Z) When there are no more objects in the stack it means we are done. "
"CmdToolContextStub",""
"AnnouncementsAPIDocumentation","This is a custom help book providing the API documentation for the announcements framework."
"EpAbstractLog","I am an abstract log of system events (EpEvent), stored into entries (OmEntry)."
"ClyNavigationHistory","I implement navigation history.I maintain two lists: - redoList - undoList They include collection of ClyBrowserState instances.To record new state send following message: 	navigationHistory recordState: aBrowserState And to undo changes call: 	navigationHistory undoNavigationOf: aBrowser 	To redo them call: 	navigationHistory redoNavigationOf: aBrowser	When you undo last browser state it adds new item to the redo list. And otherwise: when you perform redo it adds new item to the undo list.This logic is implemented using undoExecuting and redoExecuting flags.I allow to ignore navigation during given block: 	navigationHistory ignoreNavigationDuring: aBlock	During given block execution the #recordState: method do nothing. It resets flag #waitingNewState to achive this.You can always check that history is empty: 	navigationHistory isEmptyImportant detail:I am implemented in the way to not keep reference to the browser and any of query results.So long history do not prevent query results in environment cache to be garbage collected. 	Internal Representation and Key Implementation Points.    Instance Variables	redoExecuting:		<Boolean>	redoList:		<OrderedCollection of<ClyBrowserState>>	undoExecuting:		<Boolean>	undoList:		<OrderedCollection of<ClyBrowserState>>	waitingNewState:		<Boolean>"
"BalloonCanvas","BalloonCanvas is a canvas using the BalloonEngine for drawing wherever possible. It has various methods which other canvases do not support due to the extra features of the balloon engine."
"GLMExamples","I am an abstract class used to group a series of examples.My subclasses should define each example within a method and annotated the method with the pragma #glmBrowser:input: "
"ShadowDrawingCanvas","see ColorMappingCanvas comment."
"ZnCharacterReadStream","I am ZnCharacterReadStream.I wrap another binary ReadStream and use a ZnCharacerEncoder to allow Characters to be read.I am not positionable, but I do allow a one character peek using a one character internal buffer.Part of Zinc HTTP Components."
"ClyShowVariableWriterCommand","I am a command to show all variable writers (the methods which assigns new value to the variables).To show writers I ask the browser to spawn new query browser.Internal Representation and Key Implementation Points.    Instance Variables	browser:		<ClyBrowser>"
"IconicListItem","I am a wrapper used to display a morph with ahead an icon.Here is the way to use meIconicListItem new	icon: ThemeIcons current smallOkIcon asMorph;	morph: 'Accept' asMorph;	yourself;	openInWorld"
"CodeImporter","I'm an object in charge of import source files.  I know a format object that knows how to parse the files, and I import the parsed results into the image.I handle doIts normally, but some special cases like class organization, class comment or methods are handled via a double dispatch (See my method extensions for that).=-=-=- How to use me -=-=-=If you want to fileIn the code -aka compile/evaluate it:CodeImporter evaluateReadStream: '2+2!' readStream.orCodeImporter evaluateString: '2+2!'orCodeImporter evaluateFileNamed: 'something.st'orCodeImporter evaluateFileStream: (FileStream readOnlyFileNamed: 'something.st')Now, you can also generate a model of code declarations inside a file by just creating an instance:CodeImporter fileStream: (FileStream readOnlyFileNamed: 'something.st').And then query me sending the message#codeDeclarationsInstances of me can be created through #fromString:#readStream:#fileNamed:#fileStream:"
"FLSerializer","I am a binary object serializer.An example of use:| sourceArray loadedArray |sourceArray := 	Array 		with: 'a string' 		with: Transcript		with: [ Transcript show: 'a string' ].""Store to the file""FLSerializer serialize: sourceArray toFileNamed: 'example.FL'. ""Load from the file""loadedArray := FLMaterializer materializeFromFileNamed: 'example.FL'. ""The arrays are not the same""[ sourceArray ~~ loadedArray ] assert.""The strings are not the same""[ sourceArray first ~~ loadedArray first ] assert.[ sourceArray first = loadedArray first ] assert.""The global instance Transcript is the same""[ sourceArray second == loadedArray second ] assert.""Appreciate in Transcript that the loaded block prints a string""loadedArray third value."
"RandomTest","SUnit tests for random generator"
"OverridesDeprecatedMethodRule","The method overrided a deprecated method. This is a sign that an API has changed in an upstream project and most likely the method should override another one"
"GLMNullLogger","This class simply implements the Null pattern."
"ClyInvalidClassForTestClassGeneration","Description--------------------I am an exception raised when we want to generate a test class from an invalid class. (For example if the class is a metaclass)"
"RFGlobalWrite","I model the write to a global variable"
"ExampleForTest112","An example class at level 3 (indirectly below Object) used for testing class hierarchy"
"RBEqualNotUsedRule","Checks for senders of comparator messages that do not use the result of the comparison."
"GLMAccumulator","An GLMAccumulator is an implicit type of browser that has the following behavior:- each input entity has associated a pane without any relationship with the other panes- based on the input entity if there already exists a pane associated, it is selected via GLMPaneSelected- if there isnt a pane, a new pane is created- based on entityToSelect, the associated pane is searched and potentially selected- when a pane is selected in the user interface, the activeEntity is populated with the entity behind the selected paneInput ports:- entity- entityToSelectOutput ports:- activeEntity"
"FTSimpleSelection","I define the simple selection strategy. I allow tables using me to manage single selection rows."
"ShGlobalsEnvironment","I wrap an environment used by the ShiftClassBuilder. In this way the environment can be anything in the system. "
"MetacelloPackageSpec",""
"TRemoveByIndexTest","A trait for test purposes"
"AthensPolygonTester","I implementing a simple and efficient algorithm to test whether given pointlies withing a polygon or not.A polygon is a collection of points 1...size."
"BIConfigurableFormatter","BIConfigurableFormatter formats the Refactoring Browser's parse trees. It has many more formatting options than the default formatter used by the RB. To change the RB to use this formatter, execute ""RBProgramNode formatterClass: BIConfigurableFormatter"". For some refactorings the RB must reformat the code after the change, so it is good to have a formatter configured to your tastes.Instance Variables:	codeStream	<PositionableStream>	the stream we are writing our output to	indent	<Integer>	how many times are we indenting a new line -- indents are normally tabs but could be any whitespace string	lineStart	<Integer>	the position of the character that started the current line. This is used for calculating the line length.	lookaheadCode	<Dictionary key: RBProgramNode value: String>	sometimes we need to lookahead while formatting, this dictionary contains the nodes that have already been formatted by lookahead	originalSource	<String>	the original source before we started formatting. This is used to extract the comments from the original source.BIConfigurableFormatter new"
"GLMDashboard",""
"ToggleMenuItemMorph","A menu item that supports on/off state (using standard icons), enablement and display of ""accelerator"" key text."
"GLMDynamicPresentationTest",""
"LGitId","I'm an unique identity of any object (commit, tree, blob, tag).https://libgit2.github.com/libgit2/#HEAD/type/git_oidNOTE: This might be replaces by an FFITypeArray in the future."
"ManifestRingCoreTestsKernel","Manifest for DEPRECATED package of Ring tests"
"RBExcessiveInheritanceRule","This smell arises when a deep inheritance is found (depth of ten or more), which is usually a sign of a design flaw. It should be broken down and reduced to something manageable. The defined inheritance depth can be edited in RBExcessiveInheritanceRule>>inheritanceDepth.Several possibilities can occur. Here are some hints:- check whether some classes in the hierarchy just do not add enough behavior to require a class in itself- check whether all the classes are the root of a kind of little inheritance hierarchy. Note that often a framework may already define a certain level of inheritance, with  other layers added by user code. This rule does not take these frameworks into account. 		The defined inheritance depth can be edited in #inheritanceDepth."
"LGitOpeningRepositoryError",""
"IRBuilder","I provide a simple interface for constructing an IRMethod.  For example, to create an ir method that compares first instVar to first arg and returns 'yes' or 'no' (same example as in BytecodeGenerator), do:	IRBuilder new		numArgs: 1;		addTemps: #(a z);		pushReceiver;		pushInstVar: 1;		pushTemp: #a;		send: #>;		jumpAheadTo: #else if: false;		pushLiteral: 'yes';		returnTop;		jumpAheadTarget: #else;		pushLiteral: 'no';		returnTop;		irSending #compiledMethod to an ir method will generate its compiledMethod.  Sending #methodNode to it will decompile to its parse tree."
"TextInputFieldPresenter","I handle one line of text.See TextPresenterself exampleYou can also have a look at DynamicalPopup for another example.I handle non source code text, that's why editing shortcuts are not supported (cmd+p just print a p by example).I provide the following variables and their accessors- acceptOnCR is a boolean representing if the key cr trigger an accept action,  it is true by default and must be set before built the widget. (if false it will print a cr).- encrypted is a boolean representing if the text appear like stars (it is only an appearance), beDecrypted and beEncrypted are shortcut to set it.- entryCompletion is the object used to suggest text while typing, removeEntryCompletion is a shortcut to set it nil.- ghostText is the ghost text to display in the text zone.I provide getters of ValueHolder of my super class actionToPerformHolder and textHolder .todo- specializing accept:- specializing eventKeyStrokesForNextFocus , eventKeyStrokesForPreviousFocus- globalsEntryCompletion- specializing isCodeCompletionAllowed"
"PluggableListMorph","...When a PluggableListMorph is in focus, type in a letter (or severalletters quickly) to go to the next item that begins with that letter.Special keys (up, down, home, etc.) are also supported."
"GLMMorphicVerticallyStackedRenderer",""
"WeakRegistry","This kind of WeakRegistry using a new VM feature,which allows a more robust finalization support.In contrast to old implementation, it doesn't spending linear time , checking what elements became garbage."
"RBChangesBrowser","Deprecated!!! Use superclass"
"TraitChange","I implement the logic to propagate the changes when a trait is modified.I am used as: - A new selector has been added or updated:     TraitChange addSelector: #aSelector on: aTrait.- A selector has been removed from a trait     TraitChange removeSelector: #aSelector on: aTrait.I handle the removal or the addition. I propagate to the users of the trait.If the removal was shadowing a method from the trait composition, the method from the trait composition is installed and the change propagated accordly. "
"MCFileTreeStReader","A reader for Smalltalk code"
"RBMessageNode","RBMessageNode is an AST node that represents a message send.Instance Variables:	arguments	<SequenceableCollection of: RBValueNode>	 our argument nodes	receiver	<RBValueNode>	the receiver's node	selector	<Symbol>	the selector we're sending	keywordsPositions	<IntegerArray | nil>	the positions of the selector keywords"
"SpecDemoButtonsPresenter","This demo shows differenty styles of button elements."
"IceTipMergeHistoryCommand","Command that opens a window showing the history of the selected merged branch."
"HEDuplicationModeStrategy","I am the abstract strategy to use when a duplication is produced loading a package.My subclasses gives different options that can be set by a command line parameter.Each subclass has a classSide message #keyword that identifies it self.I look up the corresponding subclass to use."
"OmRandomSuffixStrategyTest","An OmRandomSuffixStrategyTest is a test class for testing the behavior of OmRandomSuffixStrategy"
"IceTipMergeModel",""
"OSWindowEventGestureVisitor","I am a abstract visitor for handling events.. serving just to cover the complete gesture protocol."
"ClyClass6UntaggedFromP5",""
"ClyNoCommentTag","I am used to mark classes which has no comment"
"RefactoringAborted","I am raised when the user cancels a refactoring."
"RubVerticalScrolled","I am raised when a vertical scroll is done"
"OSTouchTwoFingersScrollBeginEvent","Two fingers started to scroll"
"KMComposedModifier","I represent a composed key modifier. I contain a collection of modifiers that should match with a keyboard event.Look at my superclass for a more detailed explanaition."
"ReTestClassNotInPackageWithTestEndingNameTest",""
"GLMMorphicPagerRenderer","A GLMMorphicPagerRenderer is xxxxxxxxx."
"ClyTabActivationStrategy","I annotate browser tools that they should be opened as a tab in particular browser context.I am not active for abstract classes. By default tool is abstract if it has subclasses. So for the cases when it is not true the tool class should override class side method #isAbstract"
"ClyTestedClass","I am example of class which is covered by tests using Tests sufix Internal Representation and Key Implementation Points.    Instance Variables	one:		<Object>	two:		<Object>"
"RFVariableAccess","Abstract superclass for all variable accesss. "
"IceMetacelloLoadChoice","I'm a recorded choice when installing a metacello baseline/configuration.A choice is created whenever there is a conflict between two project versions (loaded and incomming). Due the nature of Matacello, this choice can be asked several times... A choice keeps track of what user selected to avoid asking him every time."
"TonelParseError","I'm a parsing error. I happen whenever the parsing of a tonel file is broken in someway."
"ISOLanguageDefinitionTest","Unit tests on ISO language definitions"
"RBShortAssignmentToken","I was used for the left arrow assignment (the ASCII underscore character) operator.In the current scanner/parser, this assignment operator is not used or allowed anymore."
"ClyButtonToolbarGroup","I group commands in the browser toolbar which should be represented as general button.I allow to place all button based commands at the end of toolbar."
"FinderExampleMethodNode","A FinderExampleMethodNode is a node used by the FinderUI's tree representing a Method deducedfrom an examples (by MethodFinder)"
"RBEndTrueFalseRule","Checks for ifTrue:ifFalse: blocks that have the same code at the beginning or end. While you might not originally write such code, as it is modified, it is easier to create such code. Instead of having the same code in two places, you should move it outside the blocks.For example, test 	ifTrue: [self foo. self bar ] 	ifFalse: [ self foo. self baz ] is equivalent to: self foo.  test 	ifTrue: [ self bar ] 	ifFalse: [ self baz ]"
"SessionManager","I am the object responsible of managing how sessions work in Pharo.A session defines the boundaries of work in the image.A new session starts when the image starts.A session stops when the image quits.There is only one active session at a single point of time.The current active session is held by myself, the singleton session manager. It can be accessed by doing:  SessionManager default currentSession.The most important responsibility of the session manager is to manage how resources and services in the image are started up and shut down at the beginning and end of a session respectively. For example, when the image starts, several initialization routines should be executed to make sure that the image has access to the graphic drivers, the standard input/output file descriptors and so on.Such initialization happens in the #snapshot:andQuit: method. #snapshot:andQuit: will: - stop current session - save current image if requested - quit if requested - start a new session When a session is started, all elements registered in the startup list are started up.When a session is stopped, all elements registered in the shutdown list are shut down.# Managing Startup and Shutdown listsThe startup and shutdown lists can be accessed through the messages:    SessionManager default startupList.    SessionManager default shutdownList.In general terms, the shutdown list is the startup list reversed.Upon a startup [shutdown], all elements in the startup list are sent the message #startup: [#shutdown:] with a boolean as argument that indicates wether the image is being saved [closed].Internally, startup and shutdown lists are prioritised. Priorities are managed by startup categories. By default the session manager includes the following categories in decreasing priority order:- System- Network- Graphical User Interface- Tools- UserCategories can be accessed as follows:    SessionManager default categoryNamed: aName.New categories can be registered in the system using the messages:    SessionManager default createCategory: aCategoryName.    SessionManager default createCategory: aCategoryName after: anotherCategoryName.Finally, to subscribe some resource handler to the startup shutdown lists, we need to subscribe a handler, subclass of AbstractSessionHandler.The most common handler implementation so far is the ClassSessionHandler, that allows to subscribe a class for startup and shutdown, keeping backwards compatibility to the old startup mechanism.    ClassSessionHandler forClassNamed: aClassNameWe can register a session handler as follows    SessionManager default        register: (ClassSessionHandler forClassNamed: self name)        inCategory: SessionManager default systemCategory.        Or alternatively, by talking to the corresponding category:    SessionManager default systemCategory register: (ClassSessionHandler forClassNamed: self name)# System Category PrioritiesA system category internally prioritizes its elements to provide a fine grained control on the startup and shutdown order.All methods above have variants that allow developers to specify the priority inside the category:      SessionManager default        register: (ClassSessionHandler forClassNamed: self name)        inCategory: SessionManager default systemCategory        atPriority: 100.    SessionManager default systemCategory        register: (ClassSessionHandler forClassNamed: self name)        atPriority: 100        By default, if no priority is specified, a default priority is used. Every category answers to the message #defaultPriority.# How does an image restart from the point it was beforeAn important point in the image startup is how does it manage to restart from the point where it was executing when it was saved.When the image is saved, using the snapshot primitive, the entire image is freezed at the point of the snapshot.More particularly, the process that invoked the snapshot primitive is freezed at the point of the primitive call.This works as a process fork: the running image will return from the snapshot primitive and the saved file will also start from the freezed point.To differentiate whether we are executing in the running image or in the freshly-saved image, the snapshot primitive returns a boolean indicating it.Read the comment of #snapshotPrimitive for more details."
"IceRepositoryCreator","I create repositories. I do this (trying in this order):- with a location and url defined, I check if it can be a repository and in positive case, I answer the repository, or I can do a clone+checkout (into location) and answer the resulting repository.- with a remote defined , I can take url and location and perform the correct actions.You can also define  branchName to checkout a specific branch."
"ManifestOpalCompilerTests",""
"RBImplementedNotSentRule","This smell arises when a method is implemented but never sent. If a method is not sent, it can be removed. This rule pays attention not to identify as unsent methods, methods with pragmas and test methods since they are likely to be sent through reflection.	Now if your code is used and extended by others better use a deprecation mechanism. To define a deprecate method follow the pattern: 		foo		self deprecated: ''Use bar instead ''. 		^ self bar		 "
"TextConstants","A pool for Text constants for space, tab, espace, ..."
"PasteUpMorph","A morph whose submorphs comprise a paste-up of rectangular subparts which ""show through"".  Anything called a 'Playfield' is a PasteUpMorph.Facilities commonly needed on pages of graphical presentations and on simulation playfields, such as the painting of new objects, turtle trails, gradient fills, background paintings, parts-bin behavior, collision-detection, etc., are (or will be) provided."
"RBUnaryAccessingMethodWithoutReturnRule","Checks for any unary ""accessing"" methods without explicit return statements."
"GLMMemoryLogger","This class stores the announcements raised by the Glamour model in an ordered collection.The collection can later be used for debugging."
"ManifestSystemVMEvents","Support package for VM events"
"ClyMethodWithHaltTag","I mark the method that it has halt (sends any of halt message)"
"FastTablePresenter","An FastTablePresenter is a spec presenter for a FastTable"
"RBPatternWrapperBlockNode","RBPatternWrapperBlockNode allows further matching using a block after a node has been matched by a pattern node.Instance Variables:	wrappedNode	<RBProgramNode>	The original pattern node to match"
"CurrentSpecDefaultBindings","Dynamic variable for Spec on which of the bindings (Morphic or other) should be used as default"
"GLMVector",""
"PanelMorph","A container morph that tracks the owner's pane colour unless an explicit fillStyle is specified. Additionally allows hooking of mouseOver events (no button down)."
"RBDeprecateClassTransformation","Marks a class as deprecated and suggests the use of the superclass.Usage:transformation := (RBDeprecateClassTransformation 		class: #RBRemoveClassTransformation)		transform. (ChangesBrowser changes: transformation model changes changes) open"
"SpecLayoutFrame","I am a wrapper for the layout of widget.Each framework can then adapt me as it wants in its adapters"
"ClyAllBasisCritiquesTest",""
"ClyAllExtensionMethodsQueryTest",""
"CompiledCode","My instances (and subinstances) are objects suitable for execution by the virtual machine. My subclasses and I have a specific layout so the instances intermix both indexable pointer fields and indexable integer fields.	The current format of a CompiledCode is as follows:	header (4 bytes)	literals (4 bytes each)	bytecodes  (variable)	trailer (variable)The header describes the compiled code. It's a small integer with the following format: sign bit 	1 bit: 	if set, the method is encoded in the SecondaryBytecodeSet, else in the PrimaryBytecodeSet (See class variables) (index 0)	15 bits:	number of literals(index 16)	1 bit:	requires counters (in the sista JIT, methods marked this way cannot trip)(index 17)	1 bit:	whether a large frame size is needed(index 18)	6 bits:	number of temporary variables(index 24)	4 bits:	number of arguments to the method(index 28)	1 bit:	has primitive(index 29)	1 bit:	flag bit, ignored by the VMThe trailer encodes how to fetch the method's sources. See CompiledMethodTrailer."
"ManifestReflectivity","Extensions to the standard reflection features of Smalltalk like MetaLinks and other"
"GLMMorphicWizardRenderer",""
"DateError","A generic error raised when try to instantiate dates."
"IceTipSettingsCommand","Command that opens the settings on a repository"
"MalGraphNode","Default representation of a graph vertice (node)."
"ClyItemObserverExample",""
"TOccurrencesForMultiplinessTest","A trait for test purposes"
"GTEventCollectors","I represent a collection of GTEventCollector objects. GTEventRecorder uses me and I am responsible for adding and removing the collectors.Public API and Key Messages- add:  - remove: Internal Representation and Key Implementation Points.    Instance Variables	collectors:		<OrderedCollection>	mutex:		<Mutex>"
"GLMPaginatedMorphTreeMorph",""
"FinderNode","A FinderNode is an abstract class used by the tree of FinderUI"
"SugsAccessesToInstVar","I know how to find accesses to an instance var"
"RbScriptingSetBeforeModel","You have to call scripting methods after #model: or it will not work"
"MalNodeWithPreviousAndNext","A basic node able to host the model and to represent edges with no additional class.Edges are navigable in both way through the nextNodes and prevousNodes instances variables."
"RBBrowserEnvironmentTest","Unit test for RBBrowserEnvironment"
"SearchFacade","SearchFacade is a facade for creating searching dialog window"
"ClyBrowserPlugin","I am a root of the hierarchy of browser plugins.My subclasses have two responsibilities:- they can decorate browser tabs- they can restrict table decorationsTo decorate browser tab my subclasses should implement- decorateTool: aBrowserTool Argument is normal morph. So subclasses can do with it whatever they want: - add new widgets - style some properties - force some selectionsPlugins can be used to restrict table decoration of the browser.Concrete plugin package can provide special kinds of table decorators. And it can be improtant to activate them only when particular browser plugin is actually installed into the browser.So plugin itself do not need to implement anything special for this. Other objects can check that browser includes it.By default new browser instances collect all auto activated plugins. It is based on method class side #isAutoActived which is true by default.So as soon as you create new plugin class it will be present in new browser instances.You can enable/disable plugin manually:	ClyBrowserPlugin disable. 	ClyBrowserPlugin enable.	I have class side variable #isAutoActivated which keeps this state.	Internal Representation and Key Implementation Points.    Instance Variables	browser:		<ClyBrowser>"
"IceTipManageRepositoryCommand","I'm a command to show the repository manager for a repository model. "
"ClyActiveBreakpointsQuery","I return all methods which have installed breakpoints or send the halt message (and friends like haltIf:)"
"ManifestRPackageCore","Manifest for RPackage-Core"
"IceTipDiffModel","I'm a base model to present diffs."
"ClyMethodVisibilityGroups","I am a class query result whch represent classes as ClyInheritedMethodGroup instances wrapped as browser items.I am used to represent classes when you expand first item in the third pane of full browser.ClyInheritedMethodGroup instances provide tools to control method visibility in the browser by showing/hidding methods of corresponding inherited classes.I sort classes hierarchically according to specified hierarchy. You can create my instances with: 	ClyMethodVisibilityGroups withHierarchy: ClySubclassHierarchy inverse.	Tools create me with default hierarchy using: 		ClyMethodVisibilityGroups withDefaultHierarchy.Calypso provides settings to invert default hierarchy and to extend it with plugins. It is based on class annotation ClyMethodVisibilityProvider. Look at it for details.Internal Representation and Key Implementation Points.    Instance Variables	hierarchy:		<ClyClassHierarchy>"
"MouseOverHandler","Mouse over handler in a hand morph"
"HiNodesAndLinksIteratorWithTwoLinkModelsTest",""
"RBJustSendsSuperRule","This smell arises when a method just forwards the message to its superclass. This often happens due to code changes or when you simply forget that you wanted to extend the behavior of a superclass method. These methods can be removed."
"OCBytecodeGeneratorTest",""
"RBAddSubtreeTransformationTest",""
"RFArgumentsReification","reify args"
"GTEventRecorderSettings","I represents Privacy settings. You can open Settings Browser and see Privacy group.Execute: SettingBrowser open"
"ATraitedClass","Simple class to be traited in the tests"
"FractionTest","SUnit tests for fractions"
"GLMPagerButtonAnnouncement",""
"LGitTime",""
"DangerousClassNotifier","Some classes have special importance to the core system.  DangerousClassNotifier notifies users which class defiitions should not be modified. This class is refactored from the following Pharo2 methods:* Behaviour>>shouldNotBeRedefined* ClassBuilder>>tooDangerousClasses* ClassBuilder>>name:  inEnvironment:  subclassOf:  type:  instanceVariableNames:  classVariableNames:  poolDictionaries:  category:  unsafe: Instance Variables	enabled:		<Boolean>	restoreState:		<Boolean>enabled	- Specifies whether this checking is performed. Some system tests that check ""dangerous"" behaviour need this turned off. restoreState	- After disabling for testing, need to restore the previous state. "
"RadioButtonGroupExampleTest",""
"FFIInt16","I'm an signed short type."
"BehaviorOwnedChunk","I'm an abstract class grouping the behavior of the code declarations that will be instaled in a behavior, such as methods, class comments, organizations..."
"ClyTabManager","I manage tabs in the browser.Any tab in browser is represented by ClyBrowserTool subclasses.And my responsibility is to show all appropriate tools which are relevant to the current browser context (state). #updateTools method is doing that. The logic is simple: When selection (browser context) is changed then browser collects new tools which should be opened in that new browser state. Then it removes all old tools and open all new tools. But there is special case when new collected tool is already opened. In that case such new tool will be not used. And existing tool will be not removed. So it will stay opened.I use #isSimilarTo: tab method to detect that new collected tool is already opened (the browser already shows similar tool).By default #isSimilarTo: simply checks the class of given tool. My subclases should redefine it when they include extra state because otherwise new tool instance will never replace old one (browser will think that it is already opened).There are cases when existing tools are not closed when selection is changed. For example when method editor is dirty and you select another method.In that case dirty method will indicate that it is now do not belongs to the context of browser.Tools implement method #belongsToCurrentBrowserContext to support this logic.For example method editor checks that browser still selects editing method.There is one complex part of my behaviour: the way how I choose what tab should be selected.In simple cases I just select the tab with lagest value of #activationPriority. But it is not enough.Problem that user want to keep current selected tab (the kind of tab) when he selects another item in the table.For example in full browser user can select class. It will automatically selects the tab with class definition because it has the most activation priority.But then user can select class comment tab and switch to another class. The desired behaviour is to keep comment tab selected for this newly selected class.And for this logic I maintain desired set of selected tool in the variable desiredSelection.It adds and removes items when user manually selects tabs.But in addition browser fills it with tools which are relevant for manually selected table.Every time user selects new item in the table the browser collects tools which are relevant for this new selection and it passes them to me as new desired selection. So at the end I always select tab with most activation priority which exists in desiredSelection list.By default activationPriority is equal to #tabOrder which defines general order between tabs.My instances are created on the browser: 	ClyTabManager of: aBrowser	Internal Representation and Key Implementation Points.    Instance Variables	browser:		<ClyBrowser>	selectionPriorities:		<Dictionary<ClyBrowserTool class, Number>>	tabMorph:		<TabManagerMorph>	tools:		<Collection of<ClyBrowserTool>>	updatingStarted:		<Boolean>	desiredSelection: <Set of<ClyBrowserTool class>>"
"ClyFullBrowser","I am a classic four panes Smalltalk browser.The instance side and class side mode is based on #metaLevelScope class. It affects the query scope which is used to show methods and method groups.The method groups and variables mode is based on #methodGroupQuery: - when user switches to variables the groups query is replaced by ClyAllVariables query based on same scope.- when user switches to groups the variables query is replaced by ClyAllMethodGroups query based on same scope.Also methodGroupQuery is used to keep current method visibility level:- when user enables some superclass visibility it just adds to the current query scope.In addition I implement special logic for extending classes and default visibility of traits:- when extending class is selected (which is gray in class view) I switches to its one meta level.- when extending class is selected I add at the top of list the extending package method groupInternal Representation and Key Implementation Points.    Instance Variables	packageView:		<ClyQueryView>	classView:		<ClyQueryView>	methodGroupView:		<ClyQueryView>	methodView:		<ClyQueryView>	metaLevelScope:		<ClyMetaLevelClassScope>	methodGroupQuery:		<ClyQuery>"
"ClyQueryExampleTest",""
"LGitDiffProgressCallback","Diff progress callback.https://libgit2.github.com/libgit2/#HEAD/group/callback/git_diff_progress_cbCalled before each file comparison."
"SDL_Event","This is a raw SDL2 event"
"OrderedCollectionTest","These test cases demonstrate addition of items into an OrderedCollection as well as item removal.Some of the assertions are quite complicated and use a lot of collection protocol. Such methods do not test one single method, but protocol in general."
"EpUnifiedBrowserModel","I am deprecated. please use my superclass"
"GLMPager",""
"GLMHorizontalLinearLayout",""
"DAPackageItemDiff","A PDAbstractItemDiff is a object which represent a package who added/modified/removed from an old analysis."
"EmbeddedMenuMorph","Menu designed to be embedded in another morph rather than popped up directly."
"TextDoIt","A doIt action on a text. When the text is clicked the text is seen as source code and evaluated"
"AnnouncementSet","If you want to register the same action for multiple events, simply create an AnnouncementSet using a comma: 	Parent>>initialize 	    super initialize. 	    self session announcer on: AddChild, RemoveChild do: [:it | self changeChild: it child]	Motivation example: Often the UI is built after/independently from the model. You want to have the model raise fine-grained announcements to enable the layers on top, but sometimes it is easier in the UI to refresh everything whenever something happens."
"MCSnapshotReader","I am an abstract class defining the interface for reading sources containing class and method definitions.I should define loadDefinitions as a subclassResponsibility, but don't.MCVersionReader could be a subclass of me for reading sources containing additional metadata, but isn't. I'm useless and can be safely removed. I'm only referenced in MCMczReader>>extractDefinitionsFrom: and it can be replaced by MCReader."
"RBGenerateEqualHashRefactoring","I am a refactoring for generating #hash and #= comparing methods.For example, a Class with three instance methods inst1-inst3RBGenerateEqualHashRefactoring model:RBNamespace new className: ClassS variables: { #inst1 . #inst2 . #inst3 }.will create:a #hash method hash	""Answer an integer value that is related to the identity of the receiver.""	^ inst1 hash bitXor: (inst2 hash bitXor: inst3 hash)	and a #= method= anObject	""Answer whether the receiver and anObject represent the same object.""	self == anObject		ifTrue: [ ^ true ].	self class = anObject class		ifFalse: [ ^ false ].	^ inst1 = anObject inst1		and: [ inst2 = anObject inst2 and: [ inst3 = anObject inst3 ] ]and any instvar accessor for the  instance variables used by method #=."
"ZnBufferedReadWriteStream","I am ZnBufferedReadWriteStream.I wrap a buffered read stream and a buffered write stream on the same file.I discard my read buffer on writes, and flush my write buffer on reads.Make sure to always send me #flush or #close when you're done,otherwise the last buffer might not yet have been written.My class side's #on:do: helps to ensure this.I can wrap both binary or character streams and act accordingly.Part of Zinc HTTP Components."
"RBSmalllintTestDefinesEqualNotHashGoodObject","This class shouldn't trigger the RBDefinesEqualNotHashRule critic."
"ClySwitchTraitHierarchyModeCommand","I am abstract command which subclasses should switch browser to particular trait hierarchy mode.They should implement two methods: - requiredQueryResult- traitScopeClassNote that while scope and result in that cases are use same type of trait relation between classes they still provide different concerns and can be merged in single entity:- required result is responsible to build trait hierarhcy from given set of classes - trat scope is responsible to retrieve trait related classes from given scope"
"TestTookTooMuchTime","I am special error to signal that test exceed time limit.TestCase subclass can reimplement defaultTimeLimit in its class side to specify another duration."
"RBRemoveInstanceVariableRefactoring","I am a refactoring for removing instance variables.My precondition verifies that there is no reference to this instance  variable."
"MCChangeSelectionRequest","Notify about a change selection request"
"ClyVariableWritersQueryTest",""
"SocketPrimitiveFailed","Notify that a socket primitive failed"
"IceRepositoryProperties","I'm a class to keep the filetree properties file (present in all repository). I can answer concrete things about repositories, e.g. : - which is my file format (#cypress, #tonel, etc.)- what are my reader/write filetree files- ..."
"GLMMatchingPresentationsChanged","A GLMMatchingPresentationsChanged is announced by the pane when the presentations that should be displayed change due to changes in the values of the ports of the pane."
"FLLightGeneralMapper","I know how to map an object to its default cluster. I can map every object."
"ClyEvaluationScriptWithArgument","I represent any methods with parametric pragma <script:>.Pragma parameter is an actual expression which should be evaluated.So for execution I extract the argument from pragma and evaluate it using compiler. I do not use method itself."
"SystemDictionaryTest","SUnit tests for SystemDictionary"
"GLMSmalltalkCodePresentation","A GLMSmalltalkCodePresentation can display Smalltalk code. It offers support for syntax highlighting and can also deal with undeclared bindings, if used as an workspace.Instance Variables	highlightSmalltalkContext:		<Object>	isForScripting:		<Object>	variableBindingsBlock:		<Object>highlightSmalltalkContext	- xxxxxisForScripting	- xxxxxvariableBindingsBlock	- xxxxx"
"EpLogBrowserOperationFactory","I implement behavior to apply and revert code changes. Important Note: My #entries are expected to be ordered as ""the oldest first"" (as in EpLog>>entries)."
"ByteLayout","I am a raw data layout that holds bytes (8 bits)."
"WeakArray","WeakArray is an array which holds only weakly on its elements. This means whenever an object is only referenced by instances of WeakArray it will be garbage collected."
"KMUntypeableSingleKeyCombination","I am an abstract class for all single key combinations that correspond to characters that cannot be typed directly."
"SystemSettingsPersistence","I am a singleton responsible for storing and loading settings on a disk. I can handle a collection of settings or one setting in particular. I know where settings are stored.External Collaborators (those that use me): SettingNode, SettingBrowser.Internal Collaborators (those I use): SettingsStonReader, SettingsStonWriter, StoredSettingsFactory, StoredSettingsMergerPublic API and Key Messages- updateSettingNodes:- storeSettingNodes:- storedValueForSettingNode:- accessing instance: SystemSettingsPersistence defaultInternal Representation and Key Implementation Points.    Instance Variables	fileReference:		<FileReference>	settingTree:		<SettingTree>"
"IceAnnouncement","I'm a generic announcement in the iceberg context."
"ClyFlagsEnvironmentPlugin","I am special plugin which mark methods which have any flag.Also I provide flags method group to see all such methods together"
"GTProfileSelectionDebugAction","This action is responsible for profiling  a selected piece of code from the code pane of the debugger."
"MCRemovalPostscriptDefinition","A postscript evaluated after unloading/removing"
"SugsSuggestion","I'm the representation from a suggestion that can be executed.How to add to the AST Menu:1) make a subclass of SugsSuggestion2) on the class side, #nodes returns the AST nodes you are interested in3) instance side:execute	the action to be performedlabel	the string used in the menuoptional	icon			position	"
"ClyUnimplementedMethodsQuery","I return all abstract methods inherited by classes in my scope which are still not implemented by them"
"CmdToolContextStub1",""
"GLMListMorphicTest",""
"FFIInstVarArgument","I implement the push strategy for method arguments who are  instance variables."
"EyeMethodEditor","A simple editor for complied methods."
"FLExtensionWrapper",""
"FBDASTBuilder","I am used to create AST nodes. This class is reserved for the RBAST. methodClass <Behavior> behavior where the compiled method is installed."
"GLMMorphicPharoCodeRendererTest",""
"MetacelloConfigurationTutorialPart2",""
"GTEventCollectorsTest","A GTEventCollectorsTest is a test class for testing the behavior of GTEventCollectors"
"ReExceptionStrategyTest",""
"ClassVariable","I model Class Variables and therefore Pool Variables, too. I am stored as a binding in the classPool of the class defining me.The compiler forwards bytecode generation to me for accessing the variable.You can subclass me and implement #read and #write: for creating special kinds of globals that can be used as special class Variables (similar to special Slots)."
"WeakIdentityValueDictionaryTests","SUnit tests for WeakIdentityValueDictionaty"
"GLMPhlowTableBrick",""
"CmdCommandMenuItem","I represent command in menu.I am created with command activator and delegate all messages to it to support menu protocol. To create my instances use:	CmdCommandMenuItem activatingBy: aCommandActivator	Internal Representation and Key Implementation Points.    Instance Variables	activator:		<CmdCommandActivator>"
"ClyInstanceSideScopeTest",""
"RubSegmentIconMenuMorph",""
"ZnServerSession","I am ZnServerSession.I represent an HTTP session in the context of a ZnServer.To get a reference to the current session, send #session to a ZnMessage (request or response).Part of Zinc HTTP Components."
"SpecDemoCheckboxesPresenter","This demo shows differenty styles of check boxes."
"NECTypeInfo","I'm used in ECInstVarTypeGuesser to store found type informations."
"MetacelloStackCacheNotification",""
"DAClassToDependencyNode",""
"FilterTest","SUnit test for debugger filters"
"RBInlineTemporaryTest",""
"SystemAnnouncerTest",""
"AccessorInstanceVariableSlot","NOTE: this is an example of what can be done with Slots. It is *not* an example of what *should* be done with Slots.I am a slot that compiles accessor methods in the Class that it is installes in.  When the slot is removed, the accessors are removed, too.This example shows how Slots can change the class that they are part of."
"DAMessageSendDependencyNode","I'm a tree node representing a specific message send in the package under analysis."
"IceLibgitFiletreeLog","I'm a tool to ask the full history of a method (based on filetree file format)."
"GLMBrickTests",""
"LGitFunctionReturn",""
"MetacelloScriptExecutor","MetacelloScriptExecutor decodes script args and launches MetacelloScriptEngine to run for each projectSpec encounters...i,e., primarily here to handl array and block args to configuration:, baseline: or project:."
"PickListPresenter","A PickList is a tick list done using spec.self example"
"GLMLoggedObject","A GLMLoggedObject is a custom announcer that logs all events that it announces.Instance Variables	logger:		<Object>logger	- xxxxx"
"FileDialogWindow","Dialog based file chooser for selecting or saving files. Supports various types of answer (file stream, file name, directory path etc) with optional extension filters and image or text file preview."
"AlphaImageMorph","Displays an image with the specified alpha value (translucency) and optional scale and layout (scaled, top-right etc.)."
"ZnServerStoppedEvent","ZnServerStoppedEvent notes the shutdown of an HTTP server is complete."
"HiNodesAndLinksIteratorWithOneLinkModelTest",""
"AthensSurfaceExamples","See examples on the class side and on class side of subclasses"
"ClassAnnotation","I am the root of class annotation hierarchy.My subclasses should annotate classes using class side methods with the pragma #classAnnotation. For example:	MyClass class>>specialAnnotationExample		<classAnnotation>		^MySpecialAnnotation newThe annotating method should return an instance of the annotation.I provide a query API to retrieve all registered instances of a concrete annotation class:	MySpecialAnnotation registeredInstances.	MySpecialAnnotation registeredInstancesFor: MyClass.	MySpecialAnnotation registeredInstancesDo: [:each | each logCr].Each annotation includes the annotated class and the selector of declaration method.All annotations are cached in default ClassAnnotationRegistry instance. It is cheap to query them.Classes itself can be queried for all attached annotations:	MyClass classAnnotations.	MyClass classAnnotationsDo: [:each | each logCr].I provide extra hook to forbid annotating of particular classes. For example my subclasses can define that abstract classses should not be annotated by them.The rule should be  implemented in the method:	MySpecialAnnotation >>isForbidden		^annotatedClass isAbstract By default method returns true which means that annotation can annotate any class.Because annotations are declared in the methods it provides interesting feature to extend meta information from external packages.Just define declaration method as class extension. And when your package will be loaded the new annotation will be added into existing class. There is no special way how instantiate annotation instances. It is up to your domain.The internal state is initialized during Registry creation.  Users should not think about it. You can add any domain specific variables to your annotations and add constructors to initialize them in declaration methods. Annotations are just normal objects without any restrictions. You can also attatch annotations to annotations like in other languages.-----------Advanced features. Priority------------Annotations in the registry are sorted by priority. It provides out of the box mechanizm for ordering annotated classes for the user domain purposes. Just pass priority number into the annotation when you create it in declaration method. And define suitable constructor for this.-----------Advanced features. Context------------Any annotation can be contextual. You can specify instance of context where annotation can be used:	MySpecialAnnotation for: anAnotationContextContext describes annotation users where they should be active.For simplicity you can specify any class instead of context instance. It will represent all users of annotation of particular class hierarchy:	MySpecialAnnotation for: MyUserClass.Internallly argument is always converted to the context:	MyUserClass asAnnotationContext.I provide query interface to retriev registered annotations which are active in given context:	MySpecialAnnotation activeInstancesInContext: anAnnotationUser.	MySpecialAnnotation activeInstancesInContext: anAnnotationUser do: [:ann | ].	MySpecialAnnotation activeInstancesFor: MyClass inContext: anAnnotationUser do: [:ann | ].By default the annotation is active if given user is described by declared context:	ClassAnnotation>>isActiveInContext: anAnnotationUser		^activeContext describes: anAnnotationUserSubclasses can provide extra conditions for active annotations. In that case they override this method:	MySpecialAnnotation>>isActiveInContext: anAnnotationUser		^(super isActiveInContext: anAnnotationUser)			and: [annotatingClass canBeUsedInContext: anAnnotationUser]So the logic can depends on annotating class itself and actual annotation user.For some scenarios you may need to query annotations according to original ""active"" definition despite of extra conditions.For such cases I introduced the ""visibility"" of annotations: the annotation is visible if it is declared for given user:	ClassAnnotation>>isVisibleInContext: anAnnotationUser		^activeContext describes: anAnnotationUserSo the visible annotation is not necessary active. But active annotation is always visible for given user:	ClassAnnotation>>isActiveInContext: anAnnotationUser		^self isVisibleInContext: anAnnotationUser(I showed another version above to simplify description).There are extra query methods to retrieve visible annotations:	MySpecialAnnotation visibleInstancesInContext: anAnnotationUser.	MySpecialAnnotation visibleInstancesInContext: anAnnotationUser do: [:ann | ].	MySpecialAnnotation visibleInstancesFor: MyClass inContext: anAnnotationUser do: [:ann | ].-----------Advanced features. Annotation dependency methods------------It is possible to call other methods inside annotation declaring methods (with pragma <classAnnotation>).Such methods are dependency methods and their modification requires updating annotation cache (registry).You can do it manually using	ClassAnnotation resetAll	Or you can mark such methods with special pragma <classAnnotationDependency> and systen will track these methods for automatically.	For example in Commander package there is CmdShortcutCommandActivation annotation. It provides reusable methods for rename and remove shorcuts: cmd+r and cmd+x. So you can annotate commands using: 	MyRenameCommand class>>shortcutActivation		<classAnnotation>		^CmdShortcutCommandActivation renamingFor: MyApp.This annotation will keep cmd+r in instance variable. If you will modify #renamingFor: method with new shorctut the annotations should be updated. And special pragma ensures this logic:	CmdShortcutCommandActivation class>>renamingFor: anAnnotationUser		<classAnnotationDependency>		^self by: $r meta for: anAnnotationUser -----------Advanced features. Redefining registered instances------------All annotations are collected from methods and cached in default ClassAnnotationRegistry instance. I provide special mechanizm to redefine collected instances. When cache is updated I use and keep all redefined annotations.To redefine particular annotation use #redefineBy: message with block which sets custom properties to original instance.For example following code allows to redefine shortcut of #browse command in Calypso: 	(ClySpawnFullBrowserCommand classAnnotationsAt: #browserShortcutActivation)		redefineBy: [:shortcut | shortcut keyCombination: $o meta ].	Try evaluate it and press cmd+o on selected item in browser. If will open new browser window.You can notice that old shortcut cmd+b is not working anymore.Now you can manualy reset annotation cache to check that it will not affect redefined shortcut: 	ClassAnnotation resetCache.	To inspect redefined annotations ask their class for: 	CmdShortcutCommandActivation redefinedInstances	Redefined instances are stored in class side variable #redefinedInstances. It is a dictionary which keys are new redefining annotations and values are original annotations collected from methods.Notice that key and value are equal objects because annotations define equality using annotated class and declaration selector.So dictionary items can be accessed using both objects.To check that annotation is redefined use following example: 	 (ClySpawnFullBrowserCommand classAnnotationsAt: #browserShortcutActivation)			isRedefinedAnd you can ask actual redefined annotaion: 	 (ClySpawnFullBrowserCommand classAnnotationsAt: #browserShortcutActivation)			redefinedInstance		Using annotation instance you can also retrieve redefining instance: 	anAnnotation redefiningInstance.	It should be identical to cached one.	To revert redefined annotation use #revertRedefinedInstance message: 	(ClySpawnFullBrowserCommand classAnnotationsAt: #browserShortcutActivation)			revertRedefinedInstanceCheck that now browse command is again activated by cmd+b shortcut (which is defined in annotation declaration method).To revert all annotations use following script: 	CmdShortcutCommandActivation revertRedefinedInstancesRedefining logic is very suitable mehanizm to override system behavior which depends on annotations without changing the code.It can be used to manage particular kind of annotation in settings browser. For example shortcut annotations based on Commander are available in setting browser. Users can explore and edit all shortcuts in the system. And these settings are persistable.-----------Internal Representation and Key Implementation Points------------     Instance Variables	annotatedClass:		<Class>	declarationSelector:		<Symbol>	priority:		<Number>	activeContext:		<AnnotationContext>"
"ZnParseError","ZnParseError is the superclass of all Zinc HTTP parsing related errors.Part of Zinc HTTP Components."
"EpCategoryAddition","I represent the creation of a category in a package."
"ManifestRandomCore","Package providing Random Number generation"
"SliderInputTest",""
"OCSemanticWarning","If a variable is not found or some other problem occurs during checking (ASTChecker) than a particular subclass instance of me is signal, usually causing a notification to the user. If not handled, the default handling is done, and compiling continues."
"PluggableSliderMorph","A pluggable slider (rather than one that auto-generates access selectors). Needs to be themed..."
"IceVersionDoesNotExist","Version does not exist, probably the package was created in a later commit or it was deleted."
"MorphicDropListAdapter","I am the adapter used to bridget a DropListPresenter and a DropListMorph"
"RBRemoveInstanceVariableTest",""
"NullSoundTheme","A silent sound theme"
"DADependencyReport","I'm reporting dependencies of packages previously analysed byt the dependnecy checker."
"FullscreenMorph","Provides for another morph to occupy the full screen area (less docking bars)."
"ClyQueryResultTestCase",""
"AbstractBinaryFileStream","Provides a simple, platform-independent, file stream. I am    - binary   - not buffered   - provide no encoding/conversions!Examples of usage""Creating a file""stream := (File named: 'asd.txt' asFileReference fullName) readStream.""Accessing the stream properties""stream position.stream atEnd.""Writing""stream nextPut: 17.stream nextPutAll: 'sdd'.""Reading""stream next.stream next: 2.""Skipping""stream skip: 2. ""reading up to something""stream upTo: 23.stream upToAnyOf: #[ 13 30 ].""peeking""stream peek."
"RBToDoWithIncrementRule","Checks for users of to:do: that also increment or decrement a counter.In Pharo you do not increment or decrement counter but should use the message to:do:by:.1 to: 100 by: 3 do: [ :each | ... ]"
"EpCodeChangeIntegrationTest",""
"FFIVoid","I'm a void type. I'm used always as pointer type, otherwise it does not have any sense. "
"ClyQueryResult","I represent collection of items retrieved by query from environment. My subclasses implement specific format or transformation of items. They should implement method:- fillWith: items Any query has special parameter #requiredResult which specifies what kind of result should represent retrieved items. It is an instance of result which is used as prototype to create actual result instances. When query is executed at first time the navigation environment prepares new instance of required result:		actualResult := aQuery prepareNewResult.where query asks #requiredResult for: 	actualResult := requiredResult prepareNewFor: aQuery in: environmentThen actualResult is cached using query as a key. And subsequent query execution just returns existing value.Thus my instances describe required result and they can be implemented using composition of other objects. So different instances of same result class can lead to different result of query.For example there is ClySortedQueryResult with #sortFunction variable. It allows to sort retrieved items using different criteria and different direction (ascending or descending).Since requiredResult is part of query it is used in query comparison and hashing logic. And therefore my subclasses should correctly implement equality and hash operations when they introduce new parameters.Also instances which are used as required result should be immutable because instead modification of result can corrupt cache of queries. To ensure this property #requiredResult is marked as readOnlyObject when it is assigned to the query.Actual query execution is initiated by me using method #rebuildIfNeeded. Navigation environment calls it before returning result to the user.I maintain special flag #needsRebuild to detect that existing items are dirty or are not built yet. So at first time #rebuildIfNeeded will lead to actual query execution (result building). But then it will do nothing until update will be not requested again.So #rebuildIfNeeded will call #rebuild which will ask #buildingQuery to build result: 	aQuery buildResult: self At the end aQuery fills result instance with items retrieved from the scope of environment.Notice that #rebuild itself is private method. Users should use #rebuildIfNeeded. In fact users do not need it too because it is lazely evaluated when my items are accessed. But in case when query is executed it is evaluated explicitly by navigation environment. So callers always receive fresh result.In the case when you want force items update there are two methods: - forceRebuild It set flag #needsRebuild to true and notify observers about changes (observers will be explained below).- forceLazyRebuild It silently set flag #needsRebuild to true without any notification to observers.In first case observers can handle notification by requesting new items from the result instance.For example if UI widget observes result items and shows them to the user the #forceRebuild message will update shown items immediately. But #forceLazyRebuild will not update items until user request it manually.In addition both methods reset items to nil.There is extra helper method #cancelRebuild which reset rebuild flag and reset items to the empty collection.My instances are safe to be used from multiple processes. Building and updating of items are protected by my #accessGuard mutex.I provide several methods to access built items: - itemsStartingAt: startIndex count: size- itemsStartingWhere: conditionBlock count: sizeIt finds first item where condition is true and then it returns ""size"" items starting from the found position- itemsWhere: conditionBlockIt collects all items where conditionBlock is true- allItems- size- isEmptyThese methods are safe to be used at any time: when user calls them I first ensure that items are ready and if not I rebuild them. Also I protect these methods by #accessGuard mutex. So it is safe to access items from multiple processes.To ensure this logic I use helper method #protectItemsWhile:.So I am cached by navigation environment. And this cache requires updates when underlying system is changed.For this purpose navigation environment subscribes on system changes. And when any change happens the environment asks every result in cache to handle given event object:	aQueryResult handleSystemChange: aSystemAnnouncement To handle system change I ask my #buildingQuery if it is affected by given event. And if it is affected I force rebuild using #itemsChanged method where I announce that I was changed.I allow my users to be notified when my items are changed. Users should subscribe to me using #subscribe: method:		aQueryResult subscribe: anObserver 	Underhood I subscribe anObserver for ClyEnvironmentChanged to my #announcer. And it will be notified using #itemsChanged message. So observers should implement this method.Also observers must #unsubscribe: when they are not interested anymore. For the UI support I provide special stream kind access in the form of ClyBrowserQueryCursor instance which returns items as ClyBrowserItem instances.ClyBrowserItem is a wrapper over actual result item which provides UI specific information like position in the result, depth in the hierarchy and extendable set of properties related to the underlying object.To get cursor instance you should open it for concrete observer:	cursor := aQueryResult openBrowserCursorFor: anObserveranObserver will be subscribed on my changes and new cursor instance will be returned to the caller.When cursor is not needed anymore it should be closed. It will unsubscribe observer in addition:	cursor closeWith cursor you are able access items as ClyBrowserItem instances. For example: 	cursor currentItem.	cursor moveToNext.	cursor findItemsWhere: conditionBlock 	The important responsibility of cursor is to organize cache of retrieved browser items. It is especially important for remote scenario where cache represents loaded remote items. But also it caches all extended properties collected for items by environment plugins.  So cursor expects instances of ClyBrowserItem from inderlying query result. Some my subclasses build them directly from retrieved raw items. They are subclasses of ClyBrowseQueryResult. They provide extra query methods to lookup browser items.When cursor is requested for such result it is just created over receiver instance.But other result classes can't be used directly in cursor because they have no knowledge about browser items. For example ClyRawQueryResult just returns raw objects which were retrieved by query.For such cases I provide special adapter ClyQueryResultBrowserAdapter: by default cursor instance is always created over adapter which wraps actual result instance.Adapter converts actual items to the ClyBrowserItem instances and implements same query methods as ClyBrowserQueryResult.This logic is implemented in method #adoptForBrowser which is overridden by ClyBrowserQueryResult with self return.For more details about cursor look at ClyBrowserQueryCursor comments. And read comments of ClyBrowserItem.The last feature which I provide for my subclasses is metadata. I compute it lazily on demand and keed it in the #metadata variable. Metadata is updated together with items. So when items are changed the metadata is reset and subsequent call for it will recompute it again.The metadata is an instance of ClyQueryResultMetadata which represents extended properties of result in general. For example the result of class query can include the count of success tests as metadata property.Properties are represented by first class objects, a kind of ClyProperty.The metadata is collected using environment plugins. So it is extended by them. Plugins collect information of concrete type of result items. For example: 			plugin collectMetadataOfClasses: aQueryResult		plugin collectMetadataOfMethods: aQueryResult		The decision what method to use is responsibility of #buildingQuery which knows what kind of items it retrieves:	metadata := ClyQueryResultMetadata new.	environment pluginsDo: [:each | 		buildingQuery collectMetadataOf: self by: each	]So every query class should implement the method #collectMetadataOf:by:.To access metadata there are several methods:- addMetaProperty: aProperty- getMetaProperty: aPropertyClass- hasMetaProperty: aPropertyClass	- metadataSame protocol is also implemented in ClyBrowserQueryCursor. So with cursor instance you are also able to access metadata of query result.Internal Representation and Key Implementation Points.    Instance Variables	announcer:		<Announcer>	buildingQuery:		<ClyQuery>	environment:		<ClyNavigationEnvironment>	items:		<SequenceableCollection of<ClyBrowserItem>>	metadata:	<ClyQueryResultMetadata>	accessGuard:	<Mutex>	needsRebuild:	Boolean"
"IcePluginSeparatorItem","I am a menu item that renders only a line to separate plugins from normal actions."
"IndexedSlot","By default each Slot corresponds to an instance variable and vice versa. Hence there is a Slot for each instance variable."
"RBShouldntRaiseErrorRule","#shouldnt:raise: is a rather tricky method, it is mostly used to make atest ""read"" nicer, however it some severe drawbacks. Hence, it should onlybe used in certain cases. Consider the following examples.Example 1:----------	self		shouldnt: [ 1 somethingNotUnderstood ]		raise: MessageNotUnderstood.In this particular case the expectations meet the result, the test fails withan assertion failure since a MNU is raised.Example 2:----------	self shouldnt: [ 1/0 ] raise: MessageNotUnderstood.In this case the test will fail with a ZeroDivide. So in the negative case#shouldnt:raise: is not very helpful. As a result, #shouldnt:raise: does not change much on the test outcome, thestatement itself produces the same failures. However there is the third andmost common use case.Example 3:----------	self shouldnt: [ 1/0 ] raise: Error.In this case the test fails, as expected, however not on a ZeroDivide but aninternal error message that shadows the real error. Using Error as argument for#shouldnt:raise: shadows any possible error that might happen and thus shouldbe avoided."
"NetNameResolver","This class implements TCP/IP style network name lookup and translation facilities.Attempt to keep track of whether there is a network available.HaveNetwork	true if last attempt to contact the network was successful.LastContact		Time of that contact (totalSeconds).haveNetwork	returns true, false, or #expired.  True means there was contact in the last 30 minutes.  False means contact failed or was false last time we asked.  Get out of false state by making contact with a server in some way (FileList or updates)."
"VirtualMachine","I am exposing a various attributes of smalltalk virtual machine.The direct use of this class is not recommended. All attributes are normally should be accessed viaSmalltalk vm someAttributeinstead of VirtualMachine someAttribute"
"ZnCodePointWriteStream","I am ZnCodePointWriteStream.I wrap another binary WriteStream and use a ZnCharacerEncoder to allow Integer code points to be written.Part of Zinc HTTP Components."
"SpecLayouts","A SpecExamples is the third sub-book of SpecHelpTopics. Here you will find more complex ways of laying out Spec.See class side for selectors."
"FTTreeItem","I am an abstract class to define an Item use by a tree data source of Fast table.Description-------------------------------------------------I define the basics methods needed by a FTTreeDataSource. I use FTTreeItem to manage my elements and I am use by a FTFastTable.Public API and Key Messages-------------------------------------------------- #data. anObject from: aFTTreeDataSource	This is my constructor that is use by FTTreeDataSource and myself	Example-------------------------------------------------Should not be instanciate. Internal Representation and Key Implementation Points.-------------------------------------------------    Instance Variables	dataSource:		I am the dataSource that holds this Item. 	children:		I am a collection of Items calculate by the item. I contains the chldren of the Item."
"AthensBackgroundChange","Text display command for changing the background color"
"RBFooDummyLintRuleTest1",""
"ASTPluginMeaningOfLife","A simple example for a AST transforming compiler plugin.I replace 42 with a  'meaning of life'."
"RPackageTest","SUnit tests for RPackage "
"ClyPackageQueryTestCase",""
"ObjectMockForTest","I am a simple mock for tests"
"RegexAPIDocumentation","This is a custom help book providing the API documentation for the regular expression framework."
"ClyDataSourceSelection","I represent collection of selected data source items.You can create my instances by: 	ClyDataSourceSelection fromRoot: aDataSource items: itemsArrayI can give you interesting information:- size- actualObjects of my items - itemsScope, the class of environment scope which my items arrange.- lastSelectedItem, an item which user selects last time which means main selected item when multiple selection is not interesting.- uniformActualObjects, filtered actual objects which belongs to scope of last selected item.I can be modified using following methods which update visible table selection: - selectItems: dataSourceItems. It just changes selection to given items.- selectItemsWhich: aBlock. It queries data source for items satisfying given block criteria.- selectItemsWith: actualObjectsArray. It queries data source to find items in underlying query result which belongs to given objects array.Also there are filter methods which return new selection instances:- asSelectedRoots. It return new selection which includes only root parents of my own items.- asSelectedItemsOf: anItemTypeClass. It returns new selection which only includes items which belongs to given item type. I can be converted to the scope of my items: - asItemsScope: aTypedScopeI can create desired selection instance which responsible to restore selection on different data sources: - asDesiredSelectionWhen data source is changed I am responsible to update visible selection of the table:	aSelection updateItemsWhichBelongsTo: aDataSourceFor example when user expands tree node selected indexes should be shifted when expansion happens before selection. Same should be done when items of data source are removed or added.Internal Representation and Key Implementation Points.    Instance Variables	items:		<SequenceableCollection of<ClyDataSourceItem>>	rootDataSource:		<ClyDataSource>"
"Ephemeron","I represent ephemeric key-value objects. Ephemerons are key-value objects (subclasses of Association) with special semantics during garbage collection.  My special behavior can resumed as follows:- The garbage collection will iterate my instances only if the key is not referenced strongly by another object.- Then, if no strong references to the key are found, then the values of this ephemeron are hold weakly.- Otherwise, the values are hold strongly.In this implementation, an Ephemeron can hold more than one value, which are all treated in the same manner. This ephemeron instance knows its container, which allows the ephemeron to remove itself from a container (such as a Dictionary) upon finalization.!! Example usagesIn general terms, do not use myself directly. Use instead an Ephemeric container like EphemeronRegistry. An Ephemeron registry will guarantee the collection of keys and values of the object inside the Ephemeron.Otherwise, if you want to use it, you can create an Ephemeron as any association:ephemeron := Ephemeron key: aKey value: aValue.ephemeron container: aContainer.!! Ephemeron FinalizationWhen an ephemeron's key is hold strongly just by the ephemeron itself, the Ephemeron will be mourned (finalized). That means that the VM will:- put the Ephemeron in the mourning queue waiting for the image to take care of mourning- make the Ephemeron non ephemeric. That is, the ephemeron instance cannot be reused.On the image side, the finalization process will send the message #mourn to an Ephemeron.  #mourn will #finalize the Ephemeron's key, and remove the Ephemeron from it's container to allow its collection during a subsequent garbage collection.!! More DocumentationYou can read the associated paper to understand better the semantics of ephemerons:Ephemerons: A New Finalization Mechanism. Barry Hayes. OOPSLA '97"
"FloatArray","FloatArrays store 32bit IEEE floating point numbers."
"ColorChooserMorph","ColorPresenter that opens a colour selector when clicked."
"CairoFreetypeFontRenderer","I am used to render freetype font(s) with cairo library.Before start rendering, you must set: - canvas - font"
"FLDictionaryCollectionCluster","A FLDictionaryCollectionCluster is a special optional cluster that rather than using the default (variable object) serialization, uses #keysAndValuesDo: to iterate objects and #add: during materialization. This way we avoid analyzing/serializing lots of nil. Also, the rehash is not needed. So far we use it for Dictionary, IdentityDictionary and MethodDictionary."
"FFITestNestingStructure","A nesting structure for test purposes"
"RBArrayNode","A RBArrayNode is an AST node for runtime arrays.Instance Variables	left:	 <Integer | nil> position of {	periods: <SequenceableCollection of: Integer> the positions of all the periods that separate the statements	right: <Integer | nil> position of }	statements: <SequenceableCollection of: RBStatementNode> the statement nodes"
"ClyExplicitAbstractClassExample","I am example of a class which is explicitly definined as abstract by overrideing class side method #isAbstract"
"KMCombinationTests","SUnit tests for key combinations"
"SDL_SysWMinfo_AndroidInfo","A structure that contains Android specific information about a window. "
"RBAssignmentNode","RBAssignmentNode is an AST node for assignment statementsInstance Variables:	assignment	<Integer>	position of the :=	value	<RBValueNode>	the value that we're assigning	variable	<RBVariableNode>	the variable being assigned"
"ZnLineReaderTests",""
"WeakKeyDictionaryTest","SUnit tests for weak key dictionaries"
"SVColorSelectorMorph","A colour selector that displays an area with saturation on the x axis and volume on the y axis. Provides interactive selection of colour by mouse. For the moment it is event rather than model based.Setting the color will specify the hue and setting the selectedColor will specify the saturation and volume (may have a different hue to that displayed if not in sync)."
"TabEnabled","I am the state of a tab enabled but not yet selected"
"SpecStubRadioButtonAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"Point","I represent an x-y pair of numbers usually designating a location on the screen.My instances are created either using the message @ or x:y: or r:degrees: as follows:[[[| pt |pt := 10@20.pt x > 10pt y> 20 			 ]]][[[| pt |pt := Point x: 10 y: 20.pt x > 10pt y> 20 			 ]]]I define many nice messages that deal with point such as: - arithmetic such as +, *, reciprocal, min, abs,- comparison <, <=, =, >, >=, closeTo: - geometry such as sideOf:, to:intersects:to:, - polar coordinates,- extent such as scaleTo:- transformation such as negated, translatedBy:, scaleBy:- rounding with roundTo:, roundUpTo:, truncateTo:, truncated"
"WeakSlot","A WeakSlot is a slot that references weakly an object.Internally it is implemented with a weak array of size one. Writing into the slot writes the only field in the array. weakArray at: 1 put: aValue.Reading into the Slot reads the only field in the array.weakArray at: 1 .This slot inherits from IndexedSlot to guarantee that this slot has a real field inside an object."
"RGMethodDefinitionTest","SUnit tests for method definitions"
"FLPositive24SmallIntegerCluster","unsigned, 24-bit integer"
"GLMPopupAction",""
"AthensTextScanner","I responsible for scanning the Text and transforming it into a list of AthensTextLine, where each line is a list of AthensTextDisplayCommand (sub)instances"
"PharoTutorialTestGoOnMockTutorial","SUnit tests for tutorial navigation"
"IRTransformTest",""
"FLProcessSerializationTest",""
"GLMTextMorphForEditView","GLMTextMorphForEditView is meant to work with GLMPluggableTextMorph."
"SugsPullUpMethod","I know how to pull up the method to my superclass"
"LGitTreeEntry",""
"GoferLoad","Loading for specific packages using Gofer"
"MetacelloProjectSpecTestCase",""
"EpLog","I am a log of system events.A user of my instances is EpMonitor, who adds instances of EpEvent into me when certain system announcements happen.My #entries contain the events ordered as ""the oldest first"". Examples:EpLog freshFromFile: 'path/to/ombu/file.ombu' asFileReference."
"SelectorException","I am SelectorException, an abstract superclass for exceptions related to a selector."
"GTEventCollector","I represent a collection of data that should be sent to a specific URL. I am responsible for collecting data (#add: method) and for giving collected data to GTEventPacking object (#bundle method).You should consider to set #category. This value is used for separating data on the server to directories. That way you will then easier receive your collected data. If you creates a subclass of me, you can override #defaultCategory method.You should also consider set #occupant:. This could be an object that uses me and feeds me with data. I keep this occupant weakly. So, if the object is removed from the memory, GTEventRecorder knows that I can be removed too. I collaborate with GTEventPacking object that receives collected data and URL, serilize the collected data, and creates GTEventBundle object. My subclasses can handle differently what data to send together to server by rewritting #bundle method.Public API and Key Messages- bundle   - url- category- occupant:- registerExample for playing with me:	GTEventCollector new		category: #testingForFun;		occupant: nil ""object that represents your application"";		add: 42;		add: 'Hallo Pharo user';		yourself.Example for serious use:	GTEventCollector new		category: #testingForReal;		occupant: nil ""object that represents your application, if nil, the collector will be removed from GTEventRecorder object once collected data are sent"";		register; ""please do not register just for fun, because we collects those data""		yourself Internal Representation and Key Implementation Points.    Instance Variables	recordedEvents:		<WaitfreeQueue>	url:		<ZnUrl>"
"MetacelloCommandLineHandler","Command line handler for dealing with Metacello from the command line.Usage:metacello --helpmetacello install <repository url> (<baseline>|<configuration>) [--version=<version>] [--groups=<group name>,...] [--no-quit] [--no-save]	<repository url>    A Monticello repository name 	<baseline>          A valid Metacello Baseline name	<configuration>     A valid Metacello Configuration name	<version>           A valid version for the given Configuration (incompatible with Baseline)	<group name>        A valid Metacello group name(s)	--help              Show this help message	--no-quit           Keep the image running after Baseline/Configuration install	--no-save           Don't save the image after Baseline/Configuration install	Examples:	# Display this help message	pharo Pharo.image metacello OR pharo Pharo.image metacello --help		# Install group 'Core' and 'Tests' of latest version	pharo Pharo.image metacello install $REPOS_URL BaselineOfFoo --groups=Core,Tests		# Install a specific version '1.5' and only a specific group 'Tests'	pharo Pharo.image metacello install $REPOS_URL ConfigurationOfFoo --version=1.5 --groups=Tests		"
"InterpolatedGradientFillStyle","Gradient fill style that uses proper alpha-aware interpolation."
"MCVersionLoaderStarted","Announcement sent when a Version is starting to load"
"HEPackage","Even though the format is intented to store any kind of objects as a root element.This is the root element expected by the command line tool and the installer.I represent an exported package.I store in myself the version of Hermes used to export me. I also include: 	- the package name as an exported symbol	- the classes ordered by dependency	- the traits ordered by dependency	- the extension methods	I first load all the traits. Then the classesThen the methods for all the classes and traits.And then the extension methods."
"ClyRawQueryResult","I represent items as is. I do not apply any formatting or transformation.I am default #requiredResult of any query."
"MCMergeRecord","A record for merging"
"WarpBlt","WarpBlt is a little warp-drive added on to BitBlt.  It takes a quadrilateral as its source specification, while its destination is traversed and combined just like any other call to copyBits.The source quadrilateral is specified as an array of points starting with the corner that wants to end up in the topLeft, and proceding to the successive points that want to follow CCW around the destination rectangle.  Note that in specifying a plain old rectangle source, its non topLeft points must be actual pixels, not outside by 1, as with rectangle bottmRight, eg.  See the method Rectangle asQuad.WarpBlt does a fast job of rotation, reflection and scaling, and it can even produce a semblance of perspective.  Depth parameters are included for future improvements in this direction. but the primitve does not support this yet."
"ClyOverridingMethodGroupProvider","I provide ""overrides"" method group which includes all methods which are overridden by given classes"
"ClyCriticBrowserPlugin","I am browser plugin.I decorate browser tools with critiques information about their subjects.This information is shown in bottom pane of the tool as a table of related critiques"
"TreeColumnPresenter","I represent a tree column. I am used to specify how to render nodes, as well as the header title, icon , action on click and properties (resizable, initial width)"
"SycInlineMethodCommand","I am a command to inline ""self send"" method directly into sender method"
"RBMethodProtocolTransformationTest",""
"JoinSection","A join section"
"EmbeddedFreeTypeFontFontDescription","Common superclass handling fonts that are not found on the disc but embedded in the image.Subclasses should redefine fontContents and originalFileName class methods. To do in the future:	- a proper way to load font file and install them to avoid bloating the image with text that represent binary font data in addition to font themselves!!"
"OmSessionStoreNamingStrategy","My subclasses define a way to find a name for a new Ombu log.  Names should not collide with an existing file in the same directory."
"ReInspectorPresentationsNonBlockSetup","When setting up a glamorous presentation it is recommended to pass blocks (or literals) into the setup methods (#title:, #display:,  #when: ɩ instead of performing an evaluation right away.This affects the performance of inspector."
"GTSpotterCategoryBrick",""
"ManifestToolDependencyAnalyser","Dependency analyzer tool and related classes"
"AthensPathSegment","The path segment is path building block.Path is formed from list of connected path segments. At building stage, there is no container nor separately defined ""path"" object, just a linked list of segments.Later the segments are accumulated in backend-specific path object, and the way how it is organized may vary.My (sub)instances usually are not created directly by user, but instead by instanceof AthensPathBuilder.Therefore, all my subclasses are considered private and implementation detail."
"UIThemeRegistry","Registry for UI themes"
"EpLogNodeGraphModel","I am deprecated. Please use my superclass."
"StackLayout","A stack based layout"
"BooleanTest","This is the unit test for the class Boolean. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"MorphTreeMorphMultipleSelection","Multiple selections in a morphic based tree"
"RBExtraBlockRule","Check for blocks that are immediately evaluated. Since the block is immediately evaluated, there is no need for the statements to be in a block.For example, [:x | 1 + x] value: 4 is equivalent to 1 + 4"
"FileDirectoryWrapper",""
"OSTouchActionPointerMoveEvent","aFinger just move."
"RBGeneratePrintStringRefactoring","I am a refactoring for generating a printString (printOn: aStream) method. You can specify which of my instance variables should be used for generating the printString.For example: RBGeneratePrintStringRefactoring model:RBNamespace new className: ClassS variables: { #inst1 . #inst2 . #inst3 }."
"MetacelloLookupProjectSpecForLoad","**MetacelloLookupProjectSpecForLoad** ends up returning an instance of **MetacelloProjectSpecForLoad**"
"RBExtractMethodTransformationTest",""
"MCServerCredentials","I store a username and password."
"FFICompilerPlugin","I am a FFICompilerPlugin - a compiler plugin for the OpalCompiler that makes the compiled method store the arguments names to be used for FFI when the sources are not loaded or unloaded.I can be activated with the command   FFICompilerPlugin installI am pragma-based to detect the methods where the arguments names should be remembered.The pragma should be added in the FFI API methods, i.e., the methods that are called by the FFI methods where the arguments have to be remembered.Example:This FFI method should remember the name of the argument named config:repository_config: config	^ self		call: #(#LGitReturnCodeEnum #git_repository_config #(#LGitConfig #* #config #, #self))		options: #()So, the FFI function should wear the pragma <ffiCalloutTranslator>:call: fnSpec options: options	<ffiCalloutTranslator>	^ (self safeFFICalloutIn: thisContext sender)		cdecl;		options: options;		function: fnSpec module: self ffiLibraryNameTo remove to be able to remove the sources (.changes and .sources), you only have to activate the plugin, no recompilation is necessary. You can even import new FFI methods or change the FFI API.N.B: Users that redefine the FFI API (like TLGitCalloutTrait >> call:options:) also have to wear the pragma. See also FFIAdditionalFFIMethodState and FDBDecompiler>>createNArgs:"
"CharacterSetComplement","CharacterSetComplement is a space efficient implementation of (CharacterSet complement) taking care of WideCharacter (code > 255)However, it will maintain a byteArrayMap for character <= 255 in a cache keeping instance variables:	absent <CharacterSet> contains character that are not in the set (i.e. my complement)	byteArrayMapCache <ByteArray | nil> cache this information because it has to be used in tight loops where efficiency matters"
"RBGenericNodeVisitor","Visit any RBProgrmNode in the syntax tree and evaluate a generic block"
"FLGlobalClassCluster","I am a cluster for classes that should be present when materializing. In other words, it only serializes a reference to the class, using its name."
"OCScannerTest",""
"OSTouchActionPointerDownEvent","A non-primary pointer has gone down."
"WindowScrolling","I am emitted when a window content pane is scrolled.I provide the scroll step value."
"GTDebugSelectionDebugAction","This action encapsulates the logic of debugging a selected piece of code from the code pane of the debugger."
"IceTipItemPositionRight","I place item buttons at right."
"ClyUnknownQueryResult","I implement null pattern for query result.Users should use my singleton #instance on class side: 	ClyUnknownQueryResult instance"
"NECClassVarEntry","I represent a class Variable"
"ManifestLibGitCore","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"CmdRootOfCommandExamples",""
"RePatternCodeRule","An abstract class containing common tools for match and rewrite rules"
"RBAssignmentInBlockRule","Checks ensure:, ifCurtailed:, and showWhile: blocks for assignments or returns that are the last statement in the block. These assignments or returns can be moved outside the block since these messages return the value of the block."
"WordArray","WordArrays store 32-bit unsigned Integer values."
"OSTouchThreeFingersSwipeDetector","I am detecting the scrolls made with two fingers.I send these event back to my handler: 	- OSTouchThreeFingersSwipeBeginEvent 	- OSTouchThreeFingersSwipeMoveEvent 	- OSTouchThreeFingersSwipeEndEvent 	- OSTouchThreeFingersSwipeAbortEvent "
"ComplexBorder","see BorderedMorph.poly := polygon250 baseColor := Color blue twiceLighter.border := (ComplexBorder framed: 10) baseColor: poly color.border frameRectangle: ((100@100 extent: 200@200) insetBy: -5) on: Display getCanvas.baseColor := Color red twiceLighter.border := (ComplexBorder framed: 10) baseColor: baseColor.border drawPolygon: {100@100. 300@100. 300@300. 100@300} on: Display getCanvas.border drawPolyPatchFrom: 100@200 via: 100@100 via: 200@100 to: 200@200 on: Display getCanvas.border drawPolyPatchFrom: 100@100 via: 200@100 via: 200@200 to: 100@200 on: Display getCanvas.border drawPolyPatchFrom: 200@100 via: 200@200 via: 100@200 to: 100@100 on: Display getCanvas.border drawPolyPatchFrom: 200@200 via: 100@200 via: 100@100 to: 200@100 on: Display getCanvas.border := (ComplexBorder raised: 10) baseColor: poly color.border drawPolygon: poly getVertices on: Display getCanvas360 / 16.0 22.5points := (0 to: 15) collect:[:i| (Point r: 100 degrees: i*22.5) + 200].Display getCanvas fillOval: (100@100 extent: 200@200) color: baseColor.border drawPolygon: points on: Display getCanvas.-1 to: points size + 1 do:[:i|	border drawPolyPatchFrom: (points atWrap: i) via: (points atWrap: i+1) via: (points atWrap: i+2) to: (points atWrap: i+3) on: Display getCanvas.].Display getCanvas fillOval: (100@100 extent: 200@200) color: baseColor.0 to: 36 do:[:i|	border drawLineFrom: (Point r: 100 degrees: i*10) + 200 to: (Point r: 100 degrees: i+1*10) + 200		on: Display getCanvas.].drawPolygon:Point r: 1.0 degrees: 10MessageTally spyOn:[Display deferUpdates: true.t1 := [1 to: 1000 do:[:i|	border drawLineFrom: (100@100) to: (300@100) on: Display getCanvas.	border drawLineFrom: (300@100) to: (300@300) on: Display getCanvas.	border drawLineFrom: (300@300) to: (100@300) on: Display getCanvas.	border drawLineFrom: (100@300) to: (100@100) on: Display getCanvas]] timeToRun.Display deferUpdates: false.].MessageTally spyOn:[Display deferUpdates: true.t2 := [1 to: 1000 do:[:i|	border drawLine2From: (100@100) to: (300@100) on: Display getCanvas.	border drawLine2From: (300@100) to: (300@300) on: Display getCanvas.	border drawLine2From: (300@300) to: (100@300) on: Display getCanvas.	border drawLine2From: (100@300) to: (100@100) on: Display getCanvas]] timeToRun.Display deferUpdates: false.]."
"RBAssignmentWithoutEffectRule","This smell arises when a statement such as x := x is found. This statement has not effect, it can be removed."
"IceRemoteWithOnlyHostname","I represent a replacement for the remotes. I am used when there is only an String as URL.This is to not intended to be polymorphic with all the uses of remotes in iceberg. It is only used in the credential"
"SendsDeprecatedMethodToGlobalRuleTest",""
"GTCodeDebugAction","A GTCodeDebugAction encapsulates the logic for accessing the codePresentation from a debugger."
"SharedQueue","An implementation of a shared queue based on class Monitor.  Clients may may place items on the queue using nextPut: or remove them using methods like next or nextOrNil.  Items are removed in first-in first-out (FIFO) order.  It is safe for multiple threads to access the same shared queue, which is why this is a ""shared"" queue.[monitor] is used to synchronize access from multiple threads.[items] is an ordered collection holding the items that are in the queue.  New items are added  at the end, and old items are removed from the beginning.All methods must hold the monitor while they run."
"ClassTrait","This class used to represent the class side of a trait. It is only kept for compatibility.The Class Traits now are instances of MetaclassForTraits."
"IntegerArray","IntegerArrays store 32bit signed Integer values.Negative values are stored as 2's complement."
"KMKeymap","I am the real keymap.  I have an action to evaluate when my keymap sequence is pressed."
"MetacelloScriptingTestCase","##MetacelloScriptingTestCase**MetacelloScriptingTestCase** implements the test suite that validates the **Metacello** scripting API."
"RBCompositeTransformation",""
"RBPullUpMethodTest",""
"GradientPaint","I am paint which using color gradient for fills.The gradient is defined using color ramp in range between 0 and 1where colors can be set at certain point. The color are interpolated between defined points.The color ramp is a collection of associations with keys - floating point values between 0 and 1and values with Colors, for example:{  0 -> Color white. 1 -> Color black }.My subclasses used to define a concrete kind of gradient,while me is an abstract class which has common properties for all gradients: color ramp.Also, note that my subclasses representing backend-neutral gradients,encapsulating all necessary data, which is then passed to corresponding surface factory method, likeAthensSurface>>#createLinearGradient:start:stop: , which answers backend-specific gradient paint.I am userful in cases when user wants to define a paint without needto have any Athens surface at hand.Sure thing, using backend-specific gradients is preferable, if possible,because conversion to backend-specific paint can be costly. Especially if gradient is statically defined (ramp values and other parameters never changing) and used many times during the life time of surface."
"RBRenameTemporaryTest",""
"FileSystemTest","I am an abstract file system test. I directly test - the public interface of a FileSystem using these methods directly- the FileSystem in general through the operation methods of the FileReference"
"JobAnnouncement","I'm an abstract superclass for Job announcements. My subclasses are announced in Job jobAnnouncer."
"AthensCairoStrokePaint","i represent stroke paint in cairo backend"
"TIncludesTest","A trait for test purposes"
"StoredSettingsMerger","I merge several stored settings together. If you ask me twice to store same stored settings, the last one wins. Collaborators: SystemSettingsPersistencePublic API and Key Messages- addStoredSetting:- addStoredSettings:- storedSettings   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	storedSettings:		<Collection of StoredSetting>"
"LGitMergeOptions",""
"FFICalloutMethodBuilderTestRecuestor","I'm a callout for testing the method builder. Basically, I do not introspect any variable :P"
"ZipArchiveTest","SUnit tests for ZIP archives"
"GLMMorphicBrowserRenderer",""
"GTPlaygroundEditableTabLabel",""
"ValueNotFound","I am ValueNotFound, an exception indicating that a value was not found in a Dictionary."
"HEFailOnDuplication","I implement the default behavior.Producing an error if there is a duplication."
"IceBranchNotFound",""
"ClyNoTagClassGroup","I represent group of classes which does not marked by any tag.I provide simple method to tag all my classes:	aGroup renameClassTagTo: aSymbol	It is polymorphic to ClyTaggedClassGroup which performs actual tag renaming.My class query is ClyRestUntaggedClasses "
"TabDisabled","I am the state corresponding to a tab being disabled."
"LGitExternalUInt8Array","My elements are 8 bit unsigned integers."
"EpRenameMethodRefactoring","I represent the execution of a ""rename method"" (RBRenameMethodRefactoring) refactoring."
"MCFileTreeStCypressWriter","Writer for Cypress format see https://github.com/CampSmalltalk/Cypress"
"SycMoveMethodsToPackageCommand","I am a command to move method to another package.I am used to convert method to extension. Internal Representation and Key Implementation Points.    Instance Variables	package:		<RPackage>"
"GLMBrickMorphWrapper",""
"Week","I represent a week."
"BaselineOfPharo",""
"RBExcessiveArgumentsRule","This smell arises when a method contains a long number of argument (five or more), which can indicate that a new object should be created to wrap the numerous parameters. The defined number of arguments can be edited in RBExcessiveArgumentsRule>>argumentsCount.If the arguments are used in multiple methods this is a clear indication for the creation of an object representing the context in which the computation should occur. 	The defined number of arguments can be edited in #argumentsCount."
"SourceFile","asdasd"
"RBRefactoring","I am the abstract base class for refactoring operations. I define the common workflow for a refactoring:check precondition, primitive execute - a dry run collecting the changes without applying them,and execute - run and apply changes.I provide many utility methods used by my subclasses. Every  concrete subclass implements a single refactoring. They have to implement the methodspreconditions and transform.Instance Variablesoptions:Some refactorings may need user interactions or some extra data for performingthe operation, the code for requesting this data is stored in a block associated with a ""refacotring option""(see RBRefactoring>>#setOption:toUse:  and RBRefactoring class>>#initializeRefactoringOptions).model:My model - a RBNamespace - defines the environment in which my refactoring is applied and collects all changes (RBRefactoryChange).A RBRefactoringManager  is used to collect the executed refactorings and provides an undo and redo facility."
"GLMTransmissionContext","This class models the context in which a set of transmissions take place. In essence, it records all ports that were reached after an outside event.  That is necessary for ensuring that transmissions do not get propagated forever. When the first transmission is triggered, a context is created and this context will then store all ports that any subsequent transmission touches. This info is used to break possible cyclesInstance Variables	ports:		Collection of Ports"
"MetacelloCypressBaselineProject","The **MetacelloCypressBaselineProject**  is a wrapper for the **BaselineOf** version specification for file-based repositories specific to metadataless export format. (Filetree/Tonel)It should be used by metadataless repositories (FileTree/Tonel). To use it the **BaselineOf** needs to redefine this method:```Smalltalk	projectClass	    ^ MetacelloMCBaselineProject```Metacello has an internal rule to not load Monticello packages of the same version, since they are already loaded. However, when using metadataless repositories the filetree/tonel Monticello package readers typically generate a package name using the author/version `-cypress.1`, which make Metacello think that the versions are the same and the package is not loaded. By including the above method in your baselineof, Metacello will know to ignore the Monticello author/version of the package and always load it."
"KMPlatformSpecificKeyCombination","I represent a platform specific key combination, one that should only be launched for a particular platform such as windows, unix or mac.I'm a sort of decorator of a key combination."
"FontFamilyAbstract","Abstract font family"
"IceCloneError",""
"FFIExternalPackedStructure","I'm an extension of FFIExternalStructure.I am packing tightly all of my fields."
"EpMethodModification","I represent a modification of a method in a class or a trait."
"VTermOutputBackground","I'm the background style of a VTermOutputDriverI'm characterized by the color of the background that will be printed."
"ClyClassQuery","I am abstract query of all classes from given scope.Subclasses should define concrete condition which all retrieved classes should satisfy: - selectsClass: aClass Scope should support #classesDo: which I use to collect and filter all available classes.I provide several convenient methods to instantiate queries with hierarchical result:	ClyAllClasses hierarchical	ClyAllClasses hierarchicalFrom: aScope	In that cases instances will be created with ClyHierarchicallySortedClasses required result"
"RubFindReplaceWindowRequired","I am an announcement to signal there is a need of find and replace window"
"MockLessonView","A LessonView mock for testing purposes"
"NullCanvas","A canvas which ignores all drawing commands."
"OSTouchScrollEvent","Superclass of all scrolls events"
"FileHandle","I provide an interface for doing IO on an open file. I keep an id, which as an opaque identifier used by the FilePlugin primitives. I translate positions from the 1-based indexes used in Smalltalk to the 0-based offsets used by the primitives.I implement the primitives on my class side."
"OCClosureCompilerTest",""
"GlyphRenderer","Renderer for font glyphs"
"IconListModel","This is deprecated class because the original class IconListModel was renamed to IconListPresenter. You should stop to use this class and modify your code to use IconListPresenter."
"FreeTypeFileInfoAbstract","Abstract superclass for file infos for a FreeType font"
"RBYourselfNotUsedRule","Check for methods sending the yourself message when it is not necessary."
"FreeTypeFontFamilyMember","FreeType FontFamily member  "
"GoferReinitialize","I'm a private and internal class to Gofer. I'm a command used to call the class side initializers on all package code."
"GLMAccumulatorMorphicTest",""
"T2TraitWithPackages","Unit test for trait packaging"
"ZnFastLineReaderTests",""
"RBClassRefactoring","I am an abstract base class for class refactorings.All that I provide is the class name, my subclass refactorings are operating on, and a instance creation methodfor setting the class name and an initial namespace model.RBClassRefactoring model:className: "
"TraitsResource","I define objects to be used for testing traits.Browsr references to myself."
"IceTipPullRequestsListContext","Description--------------------I am a simple context for the github pull requests browser."
"MetacelloBaselineSpecGenerator",""
"TextIndent","create a hanging indent. "
"KMNoShortcut","I do not match with any keyboard event.I respond to the Null object pattern, since I represent the inexistance of a key combination."
"RBKeywordToken","RBKeywordToken is the first-class representation of a keyword token (e.g. add:)"
"IceFileSystemDefinition","I am an abstract class representing a non-code element read from an Iceberg repository, either from a commit or from the working directory in disk.My concrete subclasses represent directories and files.See my superclasses for more information."
"IRPrinterV2","I interpret IRMethod instructions and write them out to a print stream."
"IRTempVector","I model the tempVector.The tempvector is an array that stores all escaping variables of a block that are written to from outside."
"DelayMillisecondTicker","I interface to the millisecond based VM primitives."
"MockSettings","I contains some system settings that are used for testing."
"GLMRubricSmalltalkCodePresentation","I extend the simple Rubric text presentation with basic support for dealing with Smalltalk code."
"LGitWritepackAppendCallout",""
"PluggableTreeItemNode","Tree item for PluggableTreeMorph."
"MCAnnouncementTest",""
"OmNullReference","I represent the no-reference. I implement the null object design pattern."
"MenuGroupPresenter","I am a group of menu items.I am part of a menu (MenuPresenter), and groups items (MenuItemPresenter) by meaning.You can also have a look at ApplicationWithToolbar for a full example of how to use them.I provide the following methods- addItem: use the block in parameter to initialize a new item, then add it in my collection.- addMenuItem: add the item in parameter in my collection.- isEmpty return a boolean representing if my collection is empty.- menuItems getter of my collection.todo- autoRefresh- buildWithSpecLayout:- fromSpec:"
"ComposedSortFunction","A ComposedSortFunction is an abstract class wrapping over another SortFunction for the sake of composition.Subclasses have to define the composition behavior via collate:with: message.Instances variables:	baseSortFunction		<SortFunction>	the wrapped sort function"
"ByteTextConverter","A ByteTextConverter is the abstract class for text converters on single byte encodings."
"SelfEyeElement","I am an eye element for self"
"ZnMultiThreadedServer","I am ZnMultiThreadedServer.I inherit most features from ZnSingleThreadedServer.  ZnMultiThreadedServer startDefaultOn: 1701.  ZnMultiThreadedServer default authenticator: (ZnBasicAuthenticator username: 'foo' password: 'secret').  ZnClient new username: 'foo' password: 'secret'; get: 'http://localhost:1701'.I am multi threaded, I fork a new process for each incoming request.I try to keep connections alive in each process.Part of Zinc HTTP Components."
"FFITestUnion","A union for test purposes"
"OSWindowGenericRendererDrawingExample","I am a basic example to show how we can draw something.To launch the example:self new open"
"OCASTTranslatorForValue","I override some methods in my super to generate instructions for effect and value only."
"ClySourceCodeContext","I am context of source code editor tool.I am based on the ast of editing code.I provide following interface to query code editor state. It is polymorphic to system browser context:- selectedClasses - lastSeletedClass - isClassSelected - selectedMethods- lastSelectedMethod - isMethodSelected - selectedMessages- lastSelectedMessage - isMessageSelected - selectedVariables- lastSelectedVariable- isVariableSelected- isTempVariableSelected Internal Representation and Key Implementation Points.    Instance Variables	selectedSourceNode:		<RBProgramNode>"
"ClyTableDecorator","I am a root of hierarchy of table decorators.My subclasses are responsible to decorate table rows/cells.Currently my subclasses are not supposed to be instantiated. All behaviour are on class side.To activate decorator it should be annotated with ClyTableDecorationStrategy with context of items where table should be decorated:	ClyAbstractClassTableDecorator class>>classDecorationStrategy		<classAnnotation>		^ClyTableDecorationStrategy for: ClyClass asCalypsoItemContextAlso decorators can decide what exact items they want decorate. They should override the method:	 wantsDecorateTableCellOf: aDataSourceItemBy default it returns true.Actual decoration logic should be implemented in following two methods:- decorateMainTableCell: anItemCellMorph of: aDataSourceItem- decorateTableCell: anItemCellMorph of: aDataSourceItemIdea is to decorate all columns in the table. But the main column is special. It can be decorated with extra tools like icons and buttons.Other columns are simple label and they can be decorated only by special label style.So if you only need special label for your items then implement only last method.But for complex logic you should define first one. Notice that in multi column case last method will accept cell morphs which do not support any icons decoration.These methods simplify decoration in simple cases which depends only on current item state.But there are other methods which allow decoration which depends on complex context of the full browser.For example style of method can be different depending on the method and the class selected in the browser.Following methods should be overridden in such cases: - decorateMainTableCell: anItemCellMorph inContext: itemContext - decorateTableCell: anItemCellMorph inContext: itemContextBy default they just call first pair of methods with selected item in context.When table is building multiple decorators can override same cell properties. To manage these overrides I introduce priority which specifies what decoration is more important. More important decoration is evaluated at last time which overrides equal properties from other decorations.Enumeration order is implemented on annotation level. ClyTableDecorationStrategy defines special sorted registry for this.Important notice. The actual priority is defined by my subclasses. But annotation extracts it and use it as own priority value in registry. Also the annotation is forbidden for abstract classes. By default I define abstract decorators as a classes which has subclasses. But it can be redefined in method #isAbstract. To be able control set of decorators per browser instance subclasses can be attached to concrete browser plugins.Browser instance is created with specific set of plugins which restrict number of decorators which affect browser tables.To specify plugin following class side method should be overridden:- browserPluginClassBy default any decorators is bound to ClyStandardBrowserPlugin"
"GLMPluggableTextMorph","We subclass the default PluggableTextMorph just to raise the proper announcements when the text or when the selection changes."
"SourceFileArray","This is a variation on StandardSourceFileArray that provides a larger maximum changes file size.The available address space for source pointers in a traditional CompiledMethod is 16r1000000 through 16r4FFFFFF. StandardSourceFileArray maps positions in the sources file to address range 16r1000000 through 16r1FFFFFF and 16r3000000 through 16r3FFFFFF, and positions in the changes file to address range 16r2000000 through 16r2FFFFFF and 16r4000000 through 16r4FFFFFF. This permits a maximum file size of 16r2000000 (32MB) for both the sources file and the changes file. This implementation extends the source pointer address space using bit 25 of the source pointer to identify the external sources and changes files, with the remaining high order bits treated as address extension. This limits the number of external file references to two (the traditional sources and changes files). If additional external file references are needed in the future, some higher order bits in the source pointer address space should be allocated for that purpose.The use of bit 25 of the source pointer for file references permits backward compatibility with StandardSourceFileArray, with essentially unlimited address space expansion for the sources and changes files."
"OSTouchHoldDetector","I am the abstract class for all the Hold gesture detectors"
"RBMoveVariableDefinitionTest",""
"ClyMergedHierarchy","I am a special kind of hierarchy which merges multiple different hierarchies.Each of my #mergedParts adds own relationship to the building hiearchy map: 	ClyMergedHierarchy>>buildParentMap: aHierarchyMap for: aClass		mergedParts do: [ :each | 			aHierarchyMap hierarchy: each.			each buildParentMap: aHierarchyMap for: aClass ].		aHierarchyMap hierarchy: self.To create my instances use following methods:		ClyMergedHierarchy merge: {ClySuperclassHierarchy new. ClyTraitUserHierarchy new}.Or simply use comma to concatenate hierarchies	:		ClySubclassHierarchy new, ClyTraitUserHierarchy new.In this example the parent of each class can be either superclass or inherited trait.Such hierarchy can include duplicated nodes.To provide consisten merging I override sort function of all my parts to ensure that all of them are sorted in same way.Internal Representation and Key Implementation Points.    Instance Variables	mergedParts:		<Collection of<ClyClassHierarchy>>"
"DigitalSignatureAlgorithm","This class implements the Digital Signature Algorithm (DSA) of the U.S. government's ""Digital Signature Standard"" (DSS). The DSA algorithm was proposed in 1991 and became a standard in May 1994. The official description is available as a Federal Information Processing Standards Publication (FIPS PUB 186, May 19, 1994). A companion standard, the Secure Hash Standard, or SHS (FIPS PUB 180-1, April 17, 1995), describes a 160-bit message digest algorithm known as the Secure Hash Algorithm (SHA). This message digest is used to compute the document signature.Here's how to use it:  1. The ""signer"" creates a pair of keys. One of these must be kept private. The other may be freely distributed. For example, it could be built into the signature checking code of an application.  2. When the signer wishes to sign a packet of data (a ""message"") , he uses the secure hash algorithm to create a 160-bit message digest (hash) which is used as the input to DSA. The result of this is a pair of large numbers called a ""signature"" that is attached to the original message.  3. When someone receives a signed message purported to have come from the signer, they compute the 160-bit hash of the message and pass that, along with the message signature and the signer's public key, to the signature verification algorithm. If the signature checks, then it is virtually guaranteed that the message originated from someone who had the signer's private key. That is, the message is not a forgery and has not been modified since it was signed. For example, if the message contains a program, and the recipient trusts the signer, then the recipient can run the program with the assurance that it won't do anything harmful. (At least, not intentionally. A digital signature is no guarantee against bugs! :->)The signer must keep the private key secure, since anyone who has the private key can forge the signer's signature on any message they like. As long as the secret key is not stolen, cryptographers believe it to be virtually impossible either to forge a signature, to find a message that matches an existing sigature, or to discover the signer's private key by analyzing message signatures. Knowing the public key (which, for example, could be recovered from an application that had it built in), does not weaken the security at all.An excellent reference work on digital signatures and cryptography in general is:  Schneier, Bruce  ""Applied Cryptography: Protocols, Algorithms, and Source Code in C""  John Wiley and Sons, 1996.I used this book as a guide to implementing many of the numerical algorithms required by DSA.Patents and Export Restrictions:Many digital signature technologies are patented. DSA is also patented, but the patent is owned by the U.S. government which has made DSA available royalty-free. There is a claim that the government patent infringes on an earlier patent by Schnorr, but the government is requiring the use of DSA, so they apparently believe this claim is not strong enough to be a serious threat to their own patent.Most cryptography technology, including digital signature technology, requires an export license for it to be distributed outside the U.S. Recent legislation may have relaxed the export license requirements, but it would be prudent to check the current regulations before exporting this code."
"TaskbarItemMorph","Description--------------------A TaskbarItemMorph is a Morph representing a unique item of the taskbar. It can be customized via the current theme for its border and fill style.Examples--------------------	(TaskbarItemMorph on: aWindow getState: #isActive action: #taskbarButtonClicked)		initializeFor: aTaskbar;		yourself"
"MCSortingTest",""
"BracketMorph","Morph displaying opposing arrows."
"MenuPresenterTest",""
"TCopySequenceableWithOrWithoutSpecificElements","A trait for test purposes"
"SimpleTestResource","I'm a simple test ressource for test purposes"
"AbstractTwoButtonsTest",""
"ClyBrowserTabCommandActivation","I am command activation strategy to access commands as tab manager icons. TabManagerMorph provides special place in tab panel (top right) for extended iconic buttons"
"RxmSpecial","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A special node that matches a specific matcher state rather than any input character.The state is either at-beginning-of-line or at-end-of-line."
"TaskListMorph","Themed task list/switcher to select the topmost window. Use cmd + left or right arrows (not ideal but the os typically handles cmd + tab/shift-tab).On Linux, release of the command key is not detected (vm issue), so press and release cmd again or move the mouse!"
"CharacterSetTest","CharacterSetTest holds tests for CharacterSet"
"DummySystemProgressItem","A dummy for a system progress item"
"ShClassSlotChangeDetector","I know how to detect a change in the collection of slots of the metaclass."
"DomainError","I am DomainError, an ArithmeticException indicating that some argument falls outside an expected domain, [from, to]When my valid interval is left- or right-open, use signal: creation protocol to provide a custom messageText rather than the default [from, to] notation."
"ManyTestResourceTestCase","SUnit tests for handling of many test resources"
"MarginTest","SUnit tests for class Margin"
"ZnConnectionEstablishedEvent","ZnConnectionEstablishedEvent signals that a client HTTP connection to hostname:port (address:port) was established in duration milliseconds. This time includes DNS resolving."
"ClyTraitChild2",""
"MorphicButtonAdapter","SpecInterpreter	interpretASpec: MorphicButtonAdapter  defaultSpec	model: (MorphicButtonAdapter model: ButtonPresenter new)"
"IRPushArray","I model the pushArray bytecode.Used for setting up the temp vectors and for the brace array construct: { }."
"CmdCompositeToolContext","I represent composition of existing context of given tool.I always delegate command operations to context which is active for given operation.  Internal Representation and Key Implementation Points.    Instance Variables	existingContexts:		<Collection of<CmdToolContext>>"
"IdentityBag","Like a Bag, except that items are compared with #== instead of #= .See the comment of IdentitySet for more information."
"ClyAllMethodGroupsQueryTest",""
"RPackageTag","I'm a class tag for an RPackage. Class tags can be any kind of metadata the user needs, but they are for now equivalent to class categories. "
"MCWorkingCopyForExtensionsTest",""
"MalGraphStructure",""
"ClyInheritanceAnalysisBrowserPlugin","I am special browser plugin to restrict table decorators in this package to appear only in browsers where I am installed"
"ClySystemEnvironmentPlugin","I am a root of ClySystemEnvironment navigation plugins hierarchy.My subclasses extend system objects and their properties.For example there is ClySUnitEnvironmentPlugin. It adds test related properties to methods, classes and packages. Also it provides new kind of method group to represent broken tests.To extend objects subclasses should implement methods: 	- resolvePropertiesOfClass: classItem	- resolvePropertiesOfMethod: methodItem	- look at ""items resolving"" protocol for morePlugins can provide new kind of package, class and method groups. They return own group providers in following methods:	- collectMethodGroupProviders	- collectClassGroupProvidersNotice that current image environment adds all plugins automatically. Look at superclass ClyEnvironmentPlugin for responsibility details.For subclasses I provide notion of slow plugins and methods to enable/disable them:- disableSlowPlugins- enableSlowPluginsAny system plugin can implement #isSlow as true. It is important for slow machines (like Raspberry) to be able easily disable all heavy logic in the browser."
"MetacelloVersionSpec",""
"EpSessionEnd","When an image is launched, a session starts. When it is quit, the session ends. I represent the end of a session."
"IceTipHistoryDiffFromHead","I keep a diff from HEAD to WorkingCopy."
"ClyAbstractMethodGroupProvider","I provide ""abstract"" method group which includes all abstract methods of given classes"
"RBPatternBlockToken","RBPatternBlockToken is the first-class representation of the pattern block token."
"MalHitsNode",""
"KMCatcherMorph","I am a morph that captures keymappings, so they can be used for configuration/customization, or debugging."
"AthensBalloonImagePaint","i representing an image (form) paint  "
"CmdCommandActivator","I responsible to execute the command instance in concrete application context according to given activation strategy. I define three steps to execute command:1) #prepareCommandForExecution. Command should retrieve all state required for execution from activation context. By default ths logic is delegated to the command though context instance:	CmdCommandActivator>>prepareCommandForExecution		actualActivationContext prepareExecutionOf: command  During preparation commands can break execution by signalling CmdCommandAborted. For example It should happen if user cancel some confirmation dialog during command preparation.2) Command execution. All logic is implemented by command itself (#execute method).	command execute.	3) Applying execution result to activation context. It is also delegated to the command itself though context instance:	CmdCommandActivator>>applyCommandResult		actualActivationContext applyResultOf: command  Idea is to be able interact with application when command completes. For example if user creates new package from browser then at the end the browser should open created package. For more details look at CmdCommand comments.I am able to check if comand can be executed in my context:	activator canExecuteCommandDifferent packages extends me to represent commands according to concrete activation strategy. For example context menu will ask me to create menu items. In such cases I just delegate actual logic to the command itself.Complex activation strategy can provide my subclasses. For example Drag&Drop command activation requires two steps to prepare and execute command. And there is CmdDragAndDropCommandActivator which incapsulates two active contexts where command should be executed. Look at it for details.  My instances are created by activation strategy:	activationStratagy newActivatorFor: aToolContextInternal Representation and Key Implementation Points.    Instance Variables	command:		<CmdCommand> an activating command	context:		<CmdToolContext>	an active context where command is activated	activationStrategy:		<CmdCommandActivationStrategy>	strategy which defines how command should be accessed and executed in given context"
"CannotDecompileNativeBoostCalls","Notify that a method can not be decompiled because of a native boost call"
"SugsUseAccessorsForClassVar","I know how to replace the call of a class variable for the use of an accessor and create accessors if it's necessary."
"SpecWindow","I am a window used by WindowSpec.I have been introduced since it's currently the best solution to prevent to add dozen of respondsTo: in StandardWindow or add dirty extensions to Object (because all models are not subclasses of Model)"
"ClyStatusBarItemMorph","I am a base class for status bar items related to particular browser tab (tool).My subclasses should implement method #build where they should create required widgets and subscribe of required events.My instance should be create for concrete browser tool: 	ClyStatusBarItem for: aBrowserTool	Internal Representation and Key Implementation Points.    Instance Variables	ownerTool:		<ClyBrowserTool>"
"Privacy","I represent basic privacy question about collecting user activities and other data that helps to improve Pharo and related tools.Responsibility: I keep information about sending diagnostic and usage data. Collaborators:I only keep the privacy information. All services that collects diagnostic and usage data should do it only if #sendDiagnosticsAndUsageData is true. If you want to add more specific settings related to privacy, you can put it to the privacy group.Public API and Key Messages- sendDiagnosticsAndUsageData   "
"ClassAnnotationExample1",""
"EmbossedStringMorph","A label that underdraws to the top-left and/or bottom-right with a lighter and/or darker colour to the receiver."
"UndeclaredVariable","I model undeclared variable bindings. I am stored as a literal inside methods which reference me.The compiler forwards bytecode generation to me for accessing the variable. In future I can profice logging and user warning when evaluated code accesses undeclared variables"
"GLMMorphicFTTest",""
"ClyOverriddenSuperclassesChanged","I represent event when some class (overridingSubclass) is changed. In that case all superclasses are changed too because all their methods should update the ""overridden status"".Read more details in superclass comment. Internal Representation and Key Implementation Points.    Instance Variables	overridingSubclass:		<Class>"
"ClyTestedClass2Test",""
"SpecStubTextInputFieldAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"ZnResponseReadEvent","ZnResponseReadEvent signals that a response was read in duration milliseconds. This time includes all waiting, server processing and networking."
"GTDebuggerSmokeTest",""
"MultiColumnListModel","This is deprecated class because the original class MultiColumnListModel was renamed to MultiColumnListPresenter. You should stop to use this class and modify your code to use MultiColumnListPresenter."
"GTSpotterDropDownMorph",""
"TravisIntegrationHelp","Help for getting Travis running with Pharo."
"RGClassDefinitionTest","SUnit tests for class definitions"
"MethodToolbarTest",""
"ManifestFileSystemZip","This package contains the zip implementation of Pharo's FileSystem manager. It make it possible to look over zip archives.A documentation of this library is available in the Deep Into Pharo book, «Chapter 3: Files with FileSystem»."
"IceMetacelloProjectRegistration","I represent a project registration in iceberg. I adapt the behavior of metacello project registrations, containing a version.For the moment I'm only used for compatibility reasons."
"Metacello","# Metacello User GuideIn this guide we'll take a walk through a couple of common developmentscenarios and highlight some of the features of the *Metacello ScriptingAPI*.*For installatation and more detailed documentation on the MetacelloScripting API, see the [Metcello Scripting API Documentation][1].*## IntroductionThe number one job of the *Metacello Scripting API* is to simplify thejob of loading projects into your image. As you are probably alltoo aware, today it's a two step process where you first load theconfiguration into your image using [Gofer][2] and then load yourproject using Metacello:```SmalltalkGofer new  package: 'ConfigurationOfSeaside30';  squeaksource: 'MetacelloRepository';  load.((Smalltalk at: #ConfigurationOfSeaside30) version: #stable) load.```In the early days of Metacello (and Gofer) this was a great improvementover the alternatives, but today, 3 years after the introduction ofMetacello, there should be a better way...and there is.Using the *Metacello Scripting API* the above expression reduces to thefollowing:```SmalltalkMetacello new  configuration: 'Seaside30';  load.```## LoadingIn this example of the [`load` command][5] we are leveraging a couple ofdefault values, namely the `version` of the project and the `repository` where the**ConfigurationOfSeaside** package can be found:```SmalltalkMetacello new  configuration: 'Seaside30';  load.```Here is a variantof the same expression with the (current) default values explicitly specified:```SmalltalkMetacello new  configuration: 'Seaside30';  version: #stable;  squeaksource: 'MetacelloRepository';  load.```The `version` attribute can be any legal [version number][10].`squeaksource` is a [repository shortcut][4]. You can also specify thefull [repository description][3] as follows:```SmalltalkMetacello new  configuration: 'Seaside30';  version: #stable;  repository: 'http://www.squeaksource.com/MetacelloRepository';  load.```##ListingOnce you've loaded one or more projects into your image, you may want tolist them. The following is an example of the [`list` command][6]:```SmalltalkMetacello image  configuration: [:spec | true ];  list.```The `image` message tells Metacello that you'd like to lookat only loaded configurations. The *block* argument to the`configuration:` message is used to *select* against the list of loaded[MetacelloProjectSpec][7] instances in the [registry][8].The `list` command itself returns a list of [MetacelloProjectSpec][7] instances that can be printed, inspected or otherwise manipulated.In addition to a *select block*, you can specify a *select collection*specifying the names of the projects you'd like to select:```SmalltalkMetacello registry  configuration: #('Seaside30' 'MetacelloPreview');  list.```The `registry` message tells Metacello that you'd like tolook at all projects in the [registry][8] whether or not they are loaded.The *collection* argument to the `configuration:` message is used to*select* against the list of project names in the [registry][8].The `list` command can also be used to look at configurations inMonticello repositories. For example:```SmalltalkMetacello new  configuration: [:spec | spec name beginsWith: 'Seaside'];  squeaksource: 'MetacelloRepository';  list.```lists the configurations whose names (sans the `ConfigurationOf`) beginwith `Seaside` in the `MetacelloRepositry` in the[Squeaksource](http://www.squeaksource.com) repostory.## GettingOnce you've loaded a project into your image the next logical step isupgrading your project to a new version. Let's say that a new `#stable` version of Seaside30 has been releasedand that you want to upgrade. This is a two step process: * [get a new version of the configuration][11]* [load the new version][12]### Get a new version of the configurationThe following expression gets the latest version of theconfiguration:```SmalltalkMetacello image  configuration: 'Seaside30';  get.```By using the `image` message, you can leverage the fact that the [registry][8] remembersfrom which repository you loaded the original version of the configuration.The `get` command simply downloads the latest version of theconfiguration package from the repository.You may download the configuration from a different repository:```SmalltalkMetacello image  configuration: 'Seaside30';  squeaksource: 'Seaside30;  get.```The `get` command will update the [registry][8] with the newrepository location information.You may also use the `get` command to load a configuration for a projectinto your image without actually loading the project itself:```SmalltalkMetacello image  configuration: 'SeasideRest';  squeaksource: 'Seaside30';  get.```The 'SeasideRest' project information will be registered in the [registry][8] and markedas *unloaded*.### Load the new versionOnce you've got a new copy of the Seaside30 configuration loaded into your image, you mayupgrade your image with the following expression:```SmalltalkMetacello image  configuration: 'Seaside30';  version: #stable;  load.```By using the `image` message, you are asking Metacello to look theproject up in the [registry][8] before performing theoperation, so it isn't necessary to supply all of the project details for everycommand operation.Of course, the `load` command updates the [registry][8].If you want to load a project for which you've already done a `get`(like the SeasideRest project earlier), you can do the following:```SmalltalkMetacello registry  configuration: 'SeasideRest';  version: #stable;  load.```In this case you use the `registry` message to indicate that you areinterested in both *loaded* and *unloaded* projects.##LockingLet's say that you are using an older version of Seaside30 (say 3.0.5)instead of the #stable version (3.0.7) and that your application doesn'twork with newer versions of Seaside30 (you've tried and it's more workto get you application to work with the newer version of Seaside30 thanit's worth).Let's also say that you want to try out something in theSeasideRest project, but when you try loading SeasideRest, you end uphaving Seaside 3.0.7 loaded as well. This is an unfortunate side effect of Metacello trying to *do the rightthing*, only in your case it is the wrong thing.Fortunately, the [`lock` command][9] can give you control. First youneed to `lock` the Seaside30 project:```SmalltalkMetacello image  configuration: 'Seaside30';  lock.```The `image` message tells Metacello to do a lookup in the list of loadedprojects and then to put a lock on the loaded version of the project.If you want you can specify which version of the project you wantlocked:```SmalltalkMetacello image  configuration: 'Seaside30';  version: '3.0.5';  lock.```After a project is locked an error (**MetacelloLockedProjectError**) is thrown when you attempt to load a project that has a dependency upon a different version of Seaside30. The error is thrown before any packages are actually loaded.### Bypassing locksLet's say that you want to load the SeasideRest project even though it mayrequire a version of Seaside30 that is later than the version that you havelocked. To do that you need to suppress the upgrade of the Seaside30project during the load of the SeasideRest project and you can do thatwith the use of the `onUpgrade:` message:```SmalltalkMetacello new  configuration: 'SeasideRest';  version: #stable;  onUpgrade: [:ex :existing :new |     existing baseName = 'Seaside30'      ifTrue: [ ex disallow ].    ex pass ];  load.```The `onUpgrade:` block tells Metacello to disallow the upgrade of anyproject whose `baseName` is `Seaside30` and to continue with the load.Of course if there are any explicit dependencies between SeasideRest andthe later version of Seaside30 (missing classes, etc.) then you may verywell get load errors or errors while using the SeasideRest, but that'sthe price you pay for not upgrading.### Upgrading a locked projectIf you want to explicitly upgrade a locked project, you can use the`load` command. The following command will upgrade Seaside30 to version3.0.6 even if it is locked: ```SmalltalkMetacello image  configuration: 'Seaside30';  version: '3.0.6';  lock.```The newly loaded of the project will continue to be locked.[1]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md[2]: http://www.lukas-renggli.ch/blog/gofer[3]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md#repository-descriptions[4]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md#repository-shortcuts[5]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md#loading[6]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md#listing[7]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md#metacelloprojectspec[8]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md#metacello-project-registry[9]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md#locking[10]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloScriptingAPI.md#metacello-version-numbers[11]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloUserGuide.md#get-a-new-version-of-the-configuration[12]: https://github.com/dalehenrich/metacello-work/blob/master/docs/MetacelloUserGuide.md#load-the-new-version"
"RubLineNumberDisplayer","I am the displayer of line numbers in the text area"
"Heap","Heap implements a special data structure commonly referred to as 'heap' [ http://en.wikipedia.org/wiki/Heap_%28data_structure%29 ]Heaps are good at handling priority queues because:	1) greatest priority element according to the sort block will be stored in first position and thus accessed in O(1) operations	2) worse time for inserting or removing an element is in O(log n) operations, where n is the size of the Heap	Insertion/Removal times are more efficient than above upper bound, provided that:		a) Elements are only removed at the beginning		b) Elements are added with arbitrary sort order.	3) there is no need to fully sort the Heap, which makes it more efficient than a SortedCollectionThe heap can be fully sorted by sending the message #fullySort.Worse time for fully sorting the Heap is in O(n log n) operations, but this is rarely used a feature.Remind that the Heap does not fully sort the collection if you don't ask.Thus don't expect #do: and other iterators to enumerate elements according to the sortBlock order.Instance variables:       array           <Array>         The data repository       tally           <Integer>       The number of elements in the heap       sortBlock       <Block|nil>     A two-argument block defining the sort order,                                                       or nil in which case the default sort order is                                                               [:element1 :element2| element1 <= element2]       indexUpdateBlock        <Block|nil>                                                       A two-argument block of the form [:data :index | ... ]                                                       which allows an application object to keep track of its                                                       index within the heap.  Useful for quick heap update                                                       when object's sort value changes (for example, when an                                                       object in a priority queue has its priority increased                                                       by an external event, you don't want to have to search                                                       through the whole heap to find the index before fixing                                                      the heap).  No update occurs if nil.The Heap can be viewed as a binary tree (every node in the tree has at most two children).The root is stored in first slot of internal array.The children are stored in next two slots.The children of children in next four slots.etc...For a node A of index i (1 based), the two children B1 and B2 are thus stored in indices (2*i) and (2*i+1).Of course, the children indices must be less than the tally otherwise they are considered inexistent.The Heap does arrange to preserve the following invariant:For any children B of a node A, A is sorted before B, in other words, (self sort: A before: B) = trueThis implies that the root is always the first element according to sort order."
"PointArrayTest","SUnit Test for PointArray"
"FTFunction","I am an abstract class. My subclasses are some functions for a FastTable as search or filter.Description-------------------------------------------------I can be use in two way.  Implicitely I will not appear on the FastTable. Explicitely I can display a Widget on the FastTable.I work with  a FTTableMorph. I cannot be use alone.Public API and Key Messages-------------------------------------------------- #table: aTableMorph	is my constructor	- #keyStroke: anEvent	This is the method that will allow to use me implicitely. With this I will receive an event from the FastTable.	- #beExplicite	This method will make my functionnality explicit. For example the FTFilterFunction will display a filter field.	Example (Should only be create by a FTTableMorph)-------------------------------------------------FTFunction table: (FTTableMorph with: (1 to: 200))Internal Representation and Key Implementation Points.-------------------------------------------------    Instance Variables	table 	I am a FTTableMorph that use this function."
"NOCModel","I keep the state of the ocompletion algorithm. See comments of my parents for details. "
"CmdMenuItem","I represent abstract menu item.I have two main subclasses: ClyComandMenuItem and CmdMenuGroup. Last subclass is a root of menu group hierarchy.To support menu my subclasses implement following methods:- name- order. It defines position in menu. Larger value pushes item to the end of menu.- isActive. It defines if item can be activated. - isEmpty. It defines if item has children. - isSimilarTo: anotherMenuItem. It defines if two items are similar.Also different kinds of menu activation strategy extend me and my subclasses by methods to support concrete menu"
"GLMStackedVerticallyArrangement",""
"FalseTest","SUnit tests for false/False class"
"ClassTest","SUnit tests for classes"
"HEClassVariable","I represent a ClassVariable.I am stored as a symbol.When serialized I get the name of the class variableWhen deserialized I look up the class variable binding in the class that is being deserialized."
"RBExtractMethodTransformation","Creates a method from a code fragment. Temporary variables and arguments are automatically calculated by the transformation.If the name of the new method is not provided (i.e., nil), it prompts a dialog window so the developer provides a valid method name. In this new implementation, it is possible to add or remove arguments in the new extracted message.Similarly, if the number of arguments in the new method provided by the developer is higher than the number of arguments as calculated by the transformation, it prompts a dialog window so the developer selects which values must be passed as arguments.Usage:transformation := (RBExtractMethodTransformation	extract: '(RecursiveSelfRule executeTree: rewriteRule tree initialAnswer: false)		ifFalse: [builder					compile: rewriteRule tree printString					in: class					classified: aSmalllintContext protocols]'	from: #checkMethod:	to: #foo:	in: #RBTransformationRuleTest)	transform.(ChangesBrowser changes: transformation model changes changes) open"
"ZnIncomplete","I am ZnIncomplete.I am a ZnCharacterEncodingError.I am an Error.I signal when the binary stream from which a character is read does not contain enough data to form a full character. This typically occurs when the stream is #atEnd, a file is EOF or a network connection is closed - when the end of a stream is reached when more data is expected/needed.I can be used to ignore wrongly encoded input by resuming me. By default a question mark will be inserted for each problem and decoding will continue. This is not recommended, as faulty input should not be accepted.Part of Zinc HTTP Components"
"IceTipRepositoriesBrowser","I'm a tool to show all repositories registered on this image. I define basic actions and an entry point to manage each repository individually.IceTipRepositoriesBrowser new openWithSpec."
"GLMMorphicPopupActionRenderer",""
"RBRefactoryChange","I am the superclass of all refactoring change objects. All I have is a name for the refactoring, but I can perform one or more refactoring operations with the message #execute. I am a composite object. To know about my components, ask me with #changes and #changesSize. "
"MorphTreeColumn","A column in a morphic based tree"
"MCSliceInfo","A slice info"
"KeyPrinterMorph","I am a morph that prints the keys in the keyboard events.Open the utility using:    KeyPrinterMorph openthen click into it to activate the window and press keys onyour keyboard to display the key code."
"IceTipBitbucketRepositoryPanel",""
"ClySingleClassRelationScope","My subclasses represents simple class hierarchy scope which is built using single relationship between classes.For example ClySubclassScope shows only subclasses of scope basis where relationship superclass-subclass is only used. I delegate #classesRelatedTo:do: to the class side. So it can be used by classes themselves and not only instances.Subclasses should implement this method on class side."
"RBStringReplacement","RBStringReplacement represents replacing source in the original method with a different string. These are used when reformatting code after a parse tree change has been made. Depending on the change, it may be possible to minimally change the parse tree without needing to format it.Instance Variables:	startPosition	<Integer>	the start position in the original source	stopPosition	<Integer>	the end position in the original source	string	<String>	replaces everything from the startPosition to the endPosition with this string"
"MCWorkingCopyBrowser","Browser for working copies"
"MCStReader","I read Category/Classes/Methodes/.... definitions from Monticello source.st file format.See also MCStWriter.Example:|source|source := String streamContents: [:aStream| |writer|    writer := MCStWriter on: aStream.    writer writeDefinitions: {True asClassDefinition. False asClassDefinition}.].(MCStReader on: source readStream) definitions explore."
"IcePharoNewBranchFromIssuePanel","I'm a dialog to ask for issue number to create correct branchs for Pharo Development."
"PharoTutorialHelp","HelpSystem book documenting PharoTutorial"
"GLMPagerScrollSlidingBrick",""
"SDL_TouchFingerUpEvent","SDL2 library structure"
"OpenOnIntExampleTest",""
"RxExtensionsTest","Unit tests for extensions done by Regex package"
"Stdio","I am a facade class to access standard output streams:- standard input- standard output- standard errorI initialize standard streams in a lazy fashion, asking to the VM for the #stdioHandles. I cache those standard streams and release them on shutdown.The possible scenarios, i.e. for each of stdin, stderr and stdout:    the stream is attached to a terminal (default on posix platforms, PharoConsole.exe on Windows (see below for Pharo.exe))    the stream is redirected to a normal file, e.g. pharo pharo.image > output.txt    the stream is redirected to a pipe, e.g. pharo pharo.image | tee output.txtTo know exactly which kind of stream you are using, you can use File >> #fileDescriptorType: (args are 0 1 2 for the stdios).Windows Subtleties=====================If launched as a desktop app (not from the console), Pharo.exe will not be linked to external streams because none is created. To overcome that, the default behavior of this class is to create a normal file for the three stdio. This can be modified to:	not create a file (execute #useNullStreams)	use a memory stream (execute #useMemoryStreams)."
"RPackageMCSynchronisationTest","I had some problems using the 'ensure:' method. There was some conflicts with the organizer used for the test when trying to clean the classes, categories and packages generated for the test. There is something I don't get with this method. Therefore I choosed to clean by default all possible generated classes, categories and packages after each test using the tearDown method.For now, all that was in the 'ensure:' methods has been commented.Look for example at:    testAddMethodInClassicCategoryAddMethodToTheParentPackageOfItsClassand try to uncomment it"
"SycPushDownVariableCommand","I am a command to push down given variables"
"LGitCallReturnHandler",""
"SpecTreeModel","I am tree model used by the Spec infrastructure to provide a ""pluggable"" api since we do not have multiple inheritance in Pharo"
"RubCharacterBlockScanner",""
"SycAddSubclassCommand","I am a command to create new subclass og given class (my targetClass)"
"HTTPEncodingTest","SUnit tests for HTTPEncoding"
"DynamicLoader","I'm a class to load libraries and symbols from system.I provide dlopen in linux and mac and LoadLibrary in windows."
"HistoryLeaf","This class represents the abstract leaf structure of items stored in History tree. Composite nodes of such trees are made of HistoryNode instances. For a particular use, this class need to be subclassed. See for example UndoRedoRecord"
"AthensBalloonSurface","I am concrete implementation of Athens surface which using balloon engine for rendering. "
"IceDuplicatedRepository","When trying to create a repository I found another one with a conflicting location (i.e. the same director on disk)."
"TConcatenationTest","A trait for test purposes"
"IceLibgitFiletreeWriter","I'm a filetree writer to ensure the output will be libgit2 compatible.I'm not surre I cannot unify myself class with my parent."
"ClyScopeTestCase",""
"OSJoyDeviceEvent","I am a joystick device event.The which parameter gives the joystick index.The  mapped  parameters tells if this device is axis and buttons are going to be mapped into a standard layout.The hasMapping parameters tells if this joystick is generating a mapped version of the event."
"RubEditingState","I represent datas of the current text area to manage undo operations etc"
"GLMBrickBorder",""
"Behavior","My instances describe the behavior of other objects. I provide the minimum state necessary for compiling methods, and creating and running instances. Most objects are created as instances of the more fully supported subclass, Class, but I am a good starting point for providing instance-specific behavior (as in Metaclass)."
"PositionableStream","I represent an accessor for a sequence of objects (a collection) that are externally named by indices so that the point of access can be repositioned. I am abstract in that I do not implement the messages next and nextPut: which are inherited from my superclass Stream."
"PharoBootstrapInitialization","I hold the code needed to initialize correctly a fresh generated bootstrap image.I am invoked from the only process in the bootstraped image. This process sends the messageinitializeImageOfType: typeName majorVersion: major minor: minor suffix: suffix buid: build commitHash: hash- The typeName is 'Pharo'- Major and Minor are the versions of Pharo- Suffix is the suffix of the version.- Build is the build number from the CI server.- hash is the commitish that produced this image.I initialize the version object of the Image and perform the initial initialization.Check #initializeCommandLineHandlerAndErrorHandling to see the steps performed."
"ClyBrowserMorph","I am a base class for various browser implementations.My main subcasses are ClyFullBrowser (for an advanced 4 panes browser) and ClyQueryBrowser (to display results of senders/implementors/...).I provide UI layout structure for my subclasses:- all navigation views occupy the top half of the browser.- the tabs panel is placed at the bottom half of the browser.- and the toolbar is placed at the middle.Navigation is represented by ClyQueryView(Morph) instances placed from left to right. This reflects the flow of navigation: selection in the left panel leads to the new content at the right panel.!! Example of Queries I create query instances using current state like selections, metalevel scope (class/inst side) and current queries themselves. In some cases it is quite complex logic and it requires interaction between different objects. For exampe the construction logic of methodGroupQuery is very complex:	- the different query class for variable mode (vars in protocols pane)	- in variable mode the scope is different (vars are shown from all superclasses)	- extra query composition when query is build from scope of extended classes (grey classes are selected)	- extra logic to allow default traits visibility	- some other details.(it could be extracted to new kind of queries and scopes)!! Browser Logic Another part of browser logic is defined in methods like #selectMethod:, #selectClass:, selectPackage:. A browser knows that to select method it should first select its class. To select class it should first select its package. In some cases it is also not trivial logic. Look at selectClass: method. Ideally browser should be a model itself independently from UI.  But this point deserves another iteration. The main concern of the current version was to introduce queries to manage browser state. It simplifies a lot of behaviour but it still not enough to get really clean solution. !! Browser contexts Browser contexts are not for maintaining the state. They only represent possible state of components. They are approach to have pluggability points for commands, tabs, toolbars and table decorators. Remember that commands are annotated with activators for particular context where they should be used. Exactly the same logic is used for other parts of browser. Everything you read in Commander chapter is applicable for tabs, table decorators and toolbar items. Tabs are annotated with ClyTabActivationStrategy. Table decorators are annotated with ClyTableDecorationStrategy.So a browser collects contexts from children because otherwise children will need to know about toolbar and tabs. Now they only know the browser. Also all contexts are used to build spotter command menu (cmd+/). Query views has no information about it.  !! Browser changes I implement logic how and when rebuild tabs and toolbar. Any browser change should be wrapped by method #changeStateBy:	browser changeStateBy: [ packageView selection selectItemsWith: { 'Kernel' asPackage } ]	Any selection change can lead to the changes in all related navigation views which follow navigation flow. I ensure in this method that tabs and toolbar will be rebuilt only when navigation will be completely finished. However this is only when all views will set new content and selection that I will update tabs and toolbar.Also I manage navigation history by allowing go back and forward in the browser. And this method also ensures that intermediate navigation states will not be considered as navigation. Many selection changes can be triggered from single #changeStateBy: call. But I will add only one item to the history.I provide two methods to force go back and forward navigation: 	browser navigateBack.	browser navigateForward.For more details on history implementation look at ClyNavigationHistory.!! How to create new browsersSubclasses should implement #initializeNavigationViews to configure the number of navigation panes and their properties.They should create navigation views using #newNavigationView message: 	packageView := self newNavigationView.	The content of view should be set in another methods (see bellow). During initialization you should only configure structure of the view.For example by default created view will show single column with the name of item.But you can configure different label using following method: 	packageView mainColumn 		displayItemPropertyBy: [:packageItem | packageItem name, packageItem actualObject classes size asString].(the argument of the block is instance of ClyDataSourceItem which wrap actual object retrieved by query).Also to describe navigation flow you should setup selector which should called when user will select any item: 		packageView requestNavigationBy: #packageSelectionChanged.	 Look at ClyQueryView(Morph) to find more possible settings and browser senders of #newNavigationView (for example you can add more columns to the view).To setup the content of the navigation views you should implement method #prepareInitialState. For the package view example it can be: 	packages := ClyAllPackages sortedFrom: self systemScope.	packageView showQuery: packages You do not need to set up the content of all navigation views. They have kind of empty data source by default.During navigation you will configure them in the navigation request methods. You will create appropriate queries for them based on new selected objects.The last responsibility of subclasses is to implement #newWindowTitle. It is used to setup the title of window which contains the browser. And it is updated when state of browser is changed.Internal Representation and Key Implementation Points.    Instance Variables	navigationEnvironment:		<ClyNavigationEnvironment>	navigationHistory:		<ClyNavigationHistory>	navigationPanel:		<Morph>	navigationStarted:		<Boolean>	navigationViews:		<OrderedCollection of<ClyQueryView>>	plugins:		<Collection of<ClyBrowserPlugin>>	systemScope:		<ClySystemScope>	tabManager:		<ClyTabManager>	toolPanel:		<Morph>	toolbar:		<ClyToolbar>"
"TConvertTest","A trait for test purposes"
"IRRemoteTempAccess","I model the pushRemoteTemporary Bytecode"
"SmalllintManifestChecker","SmalllintManifestChecker is responsible for running a set of rules on a given subsystem.| rules checker | rules := RBCompositeLintRule allGoodRules resetResult.""the resetResult is necessary because it will build a knid of cache of the resultand this cannot be done automatically (for example you may want to run several rules without invalidating the results). ""checker := SmalllintManifestChecker new	runRules: rules onPackage: (RPackageOrganizer default packageNamed: #'Manifest-Core')."
"ClyMethodGroupProvider","I am a root of hierarchy of method group providers.My subclasses build method groups for given class scope. They should implement: - buildGroupsFrom: aClassScopeImplementors should not think about it emptiness of created groups. Groups query filters reduntant groups by itself.But subclasses can specify that group should be always present using method #isStatic. By default any provider defines static groups. Static groups are not depends the count of methods which they provide"
"RBMultiKeywordLiteralToken","I am used for a multikeyword literal, found in a literal array.Scanning a message send with a multikeyword selector produces not this token.Instead, that token stream would contain multiple RBKeywordTokens. But if a multikeyword selector is within a literal array#(printOn:indent: )this single selector printOn:indent: is scanned as one RBMultiKeywordLiteralToken(#printOn:indent:)."
"WeakMessageSend","Instances of WeakMessageSend encapsulate message sends to objects, like MessageSend. Unlike MessageSend it is not necessarily a valid mesage.  A request to value only results in a send if infact it is valid. See MessageSendComments also. WeakMessageSend is used primarily for event regristration. Unlike MessageSend WeakMessageSend stoes receiver (object receiving the message send) as a the first and only element of its array as opposed to a named ivar.But like MessageSend, it does have selector		Symbol -- message selector arguments		Array -- bound argumentsand it also has shouldBeNil		Boolean --  used to ensure array of arguments is not all nils"
"IceTipCheckoutCommitCommand","I checkout a specific commit from history.I will let your repository in detach mode!"
"ClySortMethodByPackageFunction","See comment of my collate:with: method"
"ClyClass8WithTag2FromP5",""
"MOPTestClassD",""
"ZnChunkedStreamTests",""
"IceMetadatalessStCypressWriter","I can write filetree metadataless versions of a snapshot."
"VileFinalizer","I am test object used for a WeakRegistry test.I add myself to a given WeakRegistry and on finalization I modify the very same registry by removing myself from it."
"RBDumpNodeTest","SUnit tests for the #dump and #dumpOn: methods on RBProgramNodes"
"ReTestClassNotInPackageWithTestEndingName","A subclass of TestCase should be in package which name is ending with '-Tests'"
"ClyFlagMethodTableDecorator","I decorate methods with flag in the table with special icon"
"IceMethodContainerDefinition","I am an abstract class representing an IceDefinition that is a container of methods. I.e., a class, a trait or an extension.I have a name which is the name of the container I represent. If I'm meta-side, I add to my name a suffix class. For example: Integer class.I also contain the monticello definition that corresponds to me.See my super/subclasses for more information."
"TAddTest","A trait for test purposes"
"FloatArrayTest","These tests are used to assert that FloatArrayPlugin has same results as Float asIEEE32BitWord"
"TextPresenter","I handle basic multi-line text.See AbstractWidgetPresenterself exampleYou can also have a look at ListSelectionPresenter and ScrollSyncExample for more examples.My main purpose is to handle source code (I have editing shortcuts support).I provide the following variables and their accessors- autoAccept is a boolean representing if the text is accepted on each keystroke.- text is the text of the text zone.I provide the following methods- beForCode and beForText are shortcut for configuring me.- getSelection return the interval currently selected.- getText is a getter of the texttodo- aboutToStyleBlock  is the block used to know if the text must be styled, it returns a boolean. aboutToStyle: is a shortcut to set directly the boolean.- accept , accept:notifying:- acceptBlock should convert the text in a boolean representing if it is to be accepted.- askBeforeDiscardingEdits- behavior- clearSelection- codePaneMenu:shifted:- doItContext- doItReceiver- specializing eventKeyStrokesForNextFocus , eventKeyStrokesForPreviousFocus- getMenu- hasEditingConflicts- hasUnacceptedEdits- isAboutToStyle- isCodeCompletionAllowed- isForSmalltalkCode- menuHolder- notify:at:in:- readSelection , readSelectionBlock- registerEvents , registerEventsForShout- scrollValue- selectedBehavior- selectedClassOrMetaClass-  setSelection: select the text in the interval in argument, selectAll is a shorcut that set the larger interval.- setSelectionInterval:- textArea"
"NotYetImplemented","I am NotYetImplement, an exception signaled when a method is a stub for code that will be implemented in the future.This is used in incremental development, for example when doing Test First development.It is similar to ShouldBeImplemented, with a slightly different meaning."
"IceTipSwitchAndMergeType","I'm a switch and merge merging type. I will switch first to the new branch, and then I will perform a merge with current reference commit.	1. Switch to merging branch.	2. Merging branch <- reference commit	This strategy is used to re-attach image when it is detached from current development branch."
"ProtoObject","ProtoObject establishes minimal behavior required of any object in Pharo, even objects that should balk at normal object behavior. Generally these are proxy objects designed to read themselves in from the disk, or to perform some wrapper behavior, before responding to a message. ProtoObject has no instance variables, nor should any be added."
"SpecFTColumn","A column for Fast table"
"MockFinalizerAction","I am test object used for the WeakRegisty tests.Upon finalization I trigger a custom finalizationAction (usually a Block)"
"FFICalloutObjectForTest","A callout object for testing purposes"
"RBRefactoryProtocolChange","RBRefactoryProtocolChange is responsible for adding or removing protocols in classes in a RB model"
"OSTouchTwoFingersRotationMoveEvent","Two fingers are rotating"
"RBRenameVariableChange","I am the baseclass for a variable-name refactoring change. I know about theclass(name) for this variable renaming, whether it is on the instance or class side and the old andnew variable name. See my subclasses for the concrete implementation of renaming a class or an instance variable.Executing this refactory change will change the variable name of the (global) class."
"RBRemoveMethodRefactoring","I am a refactoring for removing a method.My preconditions verify that this method is not referenced anywhere."
"GLMBrickLayoutStacked",""
"LGitTransportCertificateCheckCallback",""
"GLMMockPagerModel",""
"RBSwapMethodRefactoring","Move a method from the class to the instance side, or vice versa. Normally this is not considered to be a refactoring.Only instance methods with no instance variable access or class methods with no class instance variable access can be moved."
"LGitBranchTypeEnum",""
"ClyVariableReferencesQueryTest",""
"FTTreeDataSource","I am a data source to diplay tree in a FastTable.Description-------------------------------------------------I receive  a collection of objects and a block. The collection of objects will be the base of the tree.An  alternative is to pass a FTRootItem to myself.The block is use to calculate the children of the nodes. (More detail at the bottom)Since the search in Tree is can be complex you can customize it via the #searchStrateagy:. (See Public APIʦor more info.) I use FTTreeItem to manage my elements and I am use by a FTFastTable.Public API and Key Messages-------------------------------------------------- #roots: aCollection children: aBlock         A constructor to build the FTTreeDataSource  	- #maxDepth         Set the maxDepth to diplay on the Tree.  Roots items are at depth 0.- #searchStrategy:          Can take in parameter #default, #rootsOnly, #allItems.                #default is selected by default, it will search/filter the tree for all visible rows.                      #rootsOnly will search/filter only the first level of the tree               #allItems will search/filter all the Tree and open the needed items. BEʃAREFUL ! YOUʓHOULDʎOTʕSEʔHISʉFʊYOURʔREEʃANʈAVEʁNʉNFINITYʏFʃHILDREN! Example-------------------------------------------------	| ds |		ds := FTTreeDataSource roots: (ProtoObject allSubclasses sort: [ :a :b | a asString < b asString ]) children: [ :item | item subclasses sort: [ :a :b | a asString < b asString ] ].		ds maxDepth: 4;	searchStrategy: #allItems.		FTTableMorph new		extent: 200 @ 400;		dataSource: ds;		explicitFunction;		openInWindow		Internal Representation and Key Implementation Points.-------------------------------------------------    Instance Variables	childrenBlock:		I am a block use to generate the children of the Items. I can have 3 arguments: the current Item,   the collection of roots items and the depth of the item.	items:		I am a collection of FTTreeItem that old the items of the first level of the tree.	maxDepth:		I am an Integer that represent the max depth to dispaly.  If I am nil I display everything	searchStrategy: 	 	I am a symbole to know what kind of search/filter strategy I need to apply.			    Class Variables	SearchStrategies 		I am a Dictionary that map a Symbole (see searchStrategy) with a class that can search through a dataSource.  "
"GLMPagerBrick",""
"TestFailure","The test framework distinguishes between failures and errors.  A failure is an event whose possibiity is explicitly anticipated and checked for in an assertion, whereas an error is an unanticipated problem like a division by 0 or an index out of bounds.  TestFailure is raised when the boolean parameter of an assert: ... or deny: ... call is the opposite of what the assertion claims."
"HaloSpec","Sets spec's for how handles are layed out in a halo."
"ClyOverridingMethodsQuery","I return all method from given scope which override methods from inherited classes.To detect overriding method I use inheritanceAnalyzer which caches this information"
"IceGitChange","I represent a change coming from git (in contrast to a change coming from the image). I know the changed file and I can be visited to define the create a more detailed diff."
"GLMFastTablePresentation","I'm a fast table presentation who introduces FTTableMorph into Glamour. Description--------------------I know how to render myself and I store some options for the Table.  I keep some options specific to the FastTable inside a Dictionary. I work with GLMMorphicFastTableRenderer to render the FastTable. I use TGLMFastTableFunctionsPresentation in order to manage some options.Public API and Key Messages--------------------You can use the public API of my super class. You also use the public API of TGLMFastTableFunctionsPresentation (See his class comment).For now I do not add any other api methods.Example--------------------GLMWrapper new 	show: [ :a | 		a fastTable			display: [ :x | 1 to: x ]; 			column: [:x | 'Numbers from 1 to ', x asString] evaluated: #asString;			column: 'Even' evaluated: [ :each | each even asString ];			column: 'Odd' evaluated: [ :each | each odd asString ]  ];	openOn: 1000.Internal Representation and Key Implementation Points.--------------------    Instance Variables	parameters:		This is a Dictionary use to store some options related to the FastTable."
"IceTipFilePresenter","I'm a model to choose files."
"RFReification","Often one needs information from the base level at the meta level.My classes model reifications of concept at the base level."
"GLMPopupBrickEscPredicate","I am activated when user presses `Escape` key"
"IRPushInstVar","push inst var"
"LabelClicked","I am an announcement raised when someone click on the label of a CheckboxMorph"
"FontProviderAbstract","Abstract superClass for fontProviders	examples of possible fontProviders are 		StrikeFontProvider		FreeTypeFontProvider		Win32NativeFontProvider		"
"GLMFastTreeTablePresentation","I'm a fast table presentation who introduces FTTableMorph into Glamour  as a Tree that can have columns. Description--------------------I know how to render myself and I store some options for the building a tree and for displaying multiple columns .  I work with GLMMorphicFastTreeWithColumnsRenderer to render the FastTable. I use TGLMScriptingAPITablePresentation in order to adding the API for configuring columns. Public API and Key Messages--------------------You can use the public API of my super class. You also use the public API of TGLMScriptingAPITablePresentation (See his class comment).Example--------------------		| browser |	browser := GLMTabulator new.	browser row: #Example.	browser transmit		to: #Example;		andShow: [ :a | a fastTreeTable 			children: [ :x | 1 to: x-1 ];			column: [:x | 'Numbers from 1 to ', x asString] evaluated: #asString;			column: 'Even' evaluated: [ :each | each even asString ];			column: 'Odd' evaluated: [ :each | each odd asString ];			icon: [ :each | 				each asInteger odd					ifTrue: [ GLMUIThemeExtraIcons glamorousRedCircle ]					ifFalse: [ GLMUIThemeExtraIcons glamorousGreenCircle ] ] ].	browser openOn: (1 to: 10)Internal Representation and Key Implementation Points.--------------------    Instance Variables	columns:		This is an OrderedCollection storing the columns that will be rendered by this presentation."
"IceTipCheckoutBranchDialog","I'm a dialog to perform a checkout of a branch.(self onRepository: IceRepository registry anyOne) openDialogWithSpec"
"TConvertAsSetForMultiplinessTest","A trait for test purposes"
"AnnouncerTest","An AnnouncerTest is a test class used to test Announcer.Instance Variables	announcer:		<Announcer>  the announcer to testannouncer	- the announcer that is tested"
"SizeMismatch","I am SizeMismatch, an exception indicating that an operation was attemptedon two or more collections that don't match in size. "
"HiRulerController","I'm the core of Hiedra. See my users to understand me."
"NECPreferences","I control the preferences for completion framework. It is the same for NECompletion and NOCompletion (and other potential completion algorithms should be configured here too)"
"KMRepository","I have a singleton instance which can be accessed by executing the following:""self default""I am currently a god object to be refactored =D."
"CmdDragPassenger","I represent passenger of drag and drop operation. I am created at start of drag operation  in current context of application with set of appropriate commands annotated by drag&drop activation strategies.Then at drop target I detect most suitable command for given target context and execute it.Look at CmdDragAndDropCommandActivation comment for detailsInternal Representation and Key Implementation Points.    Instance Variables	dragContext:		<ToolContext>	dropActivators:		<Collection of<CmdDragAndDropCommandActivator>>"
"RBBrowserEnvironment","I am the base class for environments of the refactoring framework.I define the common interface for all environments.And I act as a factory for various specialized environments. See my 'environment' protocol.I am used by different tools to create a 'views' of subsets of the whole system environment to browse or act on (searching/validations/refactoring)create instances:RBBrowserEnvironment new forClasses:  Number withAllSubclasses.RBBrowserEnvironment new forPackageNames: { #Kernel }.query:|env|env := RBBrowserEnvironment new forPackageNames: { #Kernel }.env referencesTo:#asArray.-> RBSelectorEnvironment.browse:|env|env := RBBrowserEnvironment new forPackageNames: { #Kernel }.(Smalltalk tools browser browsedEnvironment: env) open."
"BlockClosuresTestCase","This test case collects examples for block uses that require full block closures."
"IRPrinterTest",""
"ClyClassReferencesQuery","I return methods which reference given classes.So I expect that my variableQuery will be in fact class query.But because class itself is not a variable I convert given query to class bindings which can play role of variables in the method filtering logic:	ClyClassReferences>>variableQuery: aClassQuery		super variableQuery: (aClassQuery withResult: ClyClassBindings new)And in addition I provide more readable methods to instantiate my instances from classes:	ClyClassReferences to: aClass.	ClyClassReferences to: aClass from: aScope.	ClyClassReferences toAny: {Array. String}.	ClyClassReferences toAny: {Array. String} from: aScope."
"RBMoveMethodRefactoring","I am a refactoring for moving a method from the class to one of its instance variable objects.Moving a method moves it implementation to one or more classes and replaces the implementation in the original method by a delegation to one of the classes instance variable. I expect an option for selecting the type (classes) to which this method should be added.A role typer RBRefactoryTyper is used to guess the possible classes used for this instance variables.And an option for requesting the new method selector.For all selected classes a method implementing the original method is created, and if the original code uses some references to self, a parameter needs to be added to provided the former implementor.For example, moving the method #isBlack from class Color to its instvar #rgb for the type ""Integer"" creates a method Integer>>#isBlack ^ self = 0and changes Colors implementation from: Color>>#isBlack   ^ rgb = 0to: Color>>#isBlack   ^ rgb isBlack"
"RBMethodArgumentsSelector","I am an editor to select values in a method that should be passed as arguments.Usage:RBMethodArgumentsSelector	openOn: { 'argumentList' }	and: { '#argumentList' }	in: (RBParser parseMethod: 'update: argumentList		self changed: #argumentList;			changed: #argumentIndex.		self changed: #isUpEnabled;			changed: #isDownEnabled;			changed: #isOkEnabled.		labelMorph contents: self methodName printString')"
"GTBrowseMethodDebuggerAction","I am a debugging action for browsing the currently selected class."
"MetacelloGenericProjectSpec",""
"ClyStringPattern","My subclasses represent specific kind of pattern to filter given strings.Subclases should implement single method #matches: to check if string in argument is satisfied pattern.If my subclasses define extra state the should implement comparison method according to my logic.I keep actual pattern string in the value variable. Instances can be created using #with: message:	ClySubstringPattern with: 'expected substring'Internal Representation and Key Implementation Points.    Instance Variables	value:		<String>"
"ASTCacheReset","Announcement signaled to tell that the default AST Cache has been reset.Tools that want persistant AST annotations can subscribe to this announcement to reinstall annotations."
"GTInspectSelectionDebugAction","This action is responsible for inspecting a selected piece of code from the code pane of the debugger."
"OSTouchActionPointerUpEvent","A non-primary pointer has gone up."
"ZnServerLogEvent","I am ZnServerLogEvent, a ZnLogEvent generated by ZnServer and its subclasses.I hold a processId attribute.I hold an optional serverId attribute."
"MacOSResolver","I am an expert on Mac OS X filesystem conventions. I resolve origins according to these conventions."
"GLMPharoScriptMorphicTest",""
"ReLogExceptionStrategy","Report exception as a property (critique) which can be debuged afterwards"
"IceFiletreeToTonelCommand","I'm a command to enable the filetree to tonel conversion.I will be active in repository list browser, when repository is in filetree format."
"FFIExternalResourceExecutor","I am responsible for finalizing an external resource, registered using external resource manager.When object, registered as external resource being garbage collected,I tell an object's class to finalize it's associated data (by passing an object,received from #resourceData message sent to an object at registration time).I automatically keep tracking for session change (image save/boot), and ignore finalization of resources of old sessions (since they are not longer valid,and cannot be freed since session changed).Like that, a users of NBExternalResourceManager don't need to implement a session checking logic, and need only to:a) register object as external resource:     FFIExternalResourceManager addResource: anObject.an object should understand the #resourceData message, which is remembered at registration point (it can be any external resource like, id, handle or memory pointer).Then, when object is garbage collected, its class will receive a message to finalize the resource data in #finalizeResourceData:The passed data is exactly same as previously returned by #resourceData method.An example:Imagine that you want to represent an external resource by keeping its handle.Object subclass: #MyExternalObject 	instanceVariableNames: 'handle'	classVariableNames: ''	poolDictionaries: ''	category: 'XYZ'	To let your object(s) to be managed by external resource manager, you need to register it.Usually you do it after successfully claiming an external resource:MyExternalObject>>initialize	handle := self createNewExternalResource.  ""claim resource""	self assert: self handleIsValid. ""etc...""		""Now, register receiver as external resource"" 	FFIExternalResourceManager addResource: self ""Another form of use is: 	FFIExternalResourceManager addResource: self data: handle.""----  If you used #addResource: method for registration, you should provide an implementation of #resourceData method:MyExternalObject>>resourceData	^ handle ""since we need only handle to identify external resource""----	Now, for properly finalizing the external resource we should implement:MyExternalObject class>> finalizeResourceData: aHandle	^ self destroyHandle: aHandle. ""do whatever is needed to destroy the handle""Note that in #finalizeResourceData: you cannot access any other properties of your instance, since it is already garbage collected. You also don't need to do a session checking, since it is done automatically by resource manager. "
"LGitReference","A LGitReference represents the reference to a git object. References can be symbolic as for instance HEAD or a branch etc.Instance Variables	handle:			NBExternalObject	repoHandle:	NBExternalObjecthandle	- the reference to the external object representing the referencerepoHandle	- the reference to the repository in which the reference is contained"
"SystemAnnouncement","The root announcement for the events coming from the Pharo system.Currently, it wraps the event that comes from the SystemChangeNotifier."
"SycMoveMethodsToClassPackageCommand","I am a command to move method to the package of defining class.I am used to convert extension method to normal one"
"CairoFontFace","I am a private class, used to represent a 'cairo_font_face_t *' data structure of Cairo library.I am not useful for direct use nor providing any functionality. My only purpose is to keep a strong reference to original FT2Face object(so it won't be freed before a corresponding instance of mine will release it)."
"ZnEndianSensitiveUTFEncoder","I am ZnEndianSensitiveUTFEncoder.I am a ZnCharacterEncoder.I add support for UTF encodings that are sensitive to endianness.The default is big endian."
"ManifestSystemAnnouncements","Package to provide system wide announcements for Pharo image"
"RBExtractMethodRefactoring","I am a refactoring for creating a method from a code fragment.You can select an interval of some code in a method and call this refactoring to create a new method implementing that code and replace the code by calling this method instead. The new method needs to have as many arguments as the number of (temp)variables, the code refers to.The preconditions are quite complex. The code needs to be parseable valid code. "
"Shape","I am an abstract class that knows my bounds and if a point is contained in me."
"ReCriticsCache","Same as CriticsCache but with tweaks for Renraku model "
"FFITestPackedStructure","A packaged structure for test purposes"
"RFClassReification","request reification of the class"
"TabGroupMorph","Organises a set of pages sharing the same space and selected through the use of tabs along the top."
"MalLongestPath","A MalLongestPath is the implementation of the longest path algo.This is working only on graph not weighted and without circuitsSee tests for more informations"
"GTSpotterStepsBreadcrumb",""
"GLMBrickRubricStyle","I'm a style module related to a rubric text fields and its componenets"
"OCUndeclaredVariable","I am a Variable that is not declared.I am like a global an association, but instead of Smalltalk globals, I live in the Undeclared global dictionary."
"MethodFinderTopClass","Test sample for MethodFinderTest"
"Stack","I implement a simple Stack. #push: adds a new object of any kind on top of the stack. #pop returns the first element and remove it from the stack. #top answer the first element of the stack without removing it."
"MCSnapshotBrowserTest",""
"SetElement","I am a helper class for handling the contents of Set.My main purpose is to allow a Set to contain nil.Since nil represents an empty slot in a Set, it cannot be stored directly in the array of values. Instead, an instance of SetElement is used as a wrapper. See implementors and senders of #asElement for wrapping, and #enclosedSetElement for unwrapping."
"LGitStringArray",""
"IceTipRepositoriesModel","I'm a model to provide access to all repositories registered."
"IceLibgitErrorVisitor","I transform libgit errors into Iceberg errors using a double dispatch.In case there is no case implemented for an exception a generic error will be raised instead.Each case in the double dispatch implements transformations for a specific kind of libgit error such as ENOTFOUND, ECONFLICT and so on. However, each libgit error can be mapped to several high-level Iceberg exceptions. It is the responsibility of this error visitor to do the matching of the different information provided by a libgit error (error code, description, message text) and decide which exception to use.I also have a context, which points to the object that is requesting the exception transformation.This context is used to obtain more information about the operation that failed, usually not provided by Libgit, such as urls, locations, etc."
"SpecStubDropListView","Only stub object, no real view is displayed."
"ZdcSocketStreamTests","ZdcSocketStreamTests tests ZdcSocketStream"
"ImageReadWriter","I am ImageReadWriter. I read an encoded image from a binary stream and return its as a Form. I write and encode an image as Form to a binary stream.I am an abstract class, my subclasses implement concrete formats.I can autodetect the format of some encoded images, so you can use me directly.Usage	ImageReadWriter formFromFileNamed: 'test.png'	ImageReadWriter formFromStream: 'test.png' asFileReference binaryReadStreamImplementation Instance Variables:	stream		<ReadStream|WriteStream>	binary stream that I read from or write toSubclasses must implement the following messages:	accessing		nextImage		nextPutImage:	testing		canUnderstand         (or my class side's #understandsImageFormat:)			(original) copyright (c) Kazuki Yasumatsu, 1995. All rights reserved."
"ReIgnoreExceptionStrategy","Ignore the exception silently and continue the execution"
"RBAddParameterRefactoring","I am a refactoring operations for adding method arguments.You can modify the method name and add an additional keyword argument and the default value used by senders of the original method. Only one new argument can be added. But you can change the whole method name, as long as the number of argument matches.For example, for #r:g:b:  add another parameter ""a"" the new method is#r:g:b:a: or change the whole method to #setRed:green:blue:alpha:This refactoring will add a new method with the new argument, remove the old method (for all implementors) and replace every sender of the prior method with the new one, using the specified default argument."
"FinderUI","A FinderUI is a UI used to render a Finder instance.This tool is used to look for selectors, class, source code or patterns through the system, or through a specified environment"
"SystemDependenciesTest","This test checks dependencies in the image and proves that there are no new unknown dependencies between packages.It is not a standard unit test because to compute dependencies takes a lot of time. It uses cached version of the dependenices report."
"OCCompilerTest","CompilerTest is a holder for SUnit test of Compiler"
"MetacelloAddMemberSpec",""
"RBSmalllintTestAddRemoveDependentsGoodObject","This class shouldn't trigger the RBAddRemoveDependentsRule critic."
"GLMFormBrick","A GLMFormBrick is scriptable html-like form with possibility to submit it."
"ClyClassVariableTest",""
"GoferPush","Push a version"
"SocketAddress","I represent an IPv4 socket or network address .I am a ByteArray.A standard IPv4 address consists of 4 bytes and is usually shown in its human readeable dotted format (four decimal integers between 0 and 255 separated by dots).Examples:	SocketAddress fromDottedString: '192.168.1.10'.		#[ 192 168 1 10 ] asSocketAddress.		NetNameResolver localHostAddress.	NetNameResolver addressForName: NetNameResolver localHostName.	Reference	https://en.wikipedia.org/wiki/IP_address"
"TestObjectsAsMethods",""
"SugsSwapMethod","I know how to move a method from instance side to class side and the oposit, depending the method."
"IceTipFetchCommand","I'm a command to perform a fetch operation on selected project."
"BaselineOfMorphic","This baseline is used to generate Pharo images from the local clone of pharo-project/pharo repository. Depends on:- BaselineOfMorphicCoreLoad type: - atomicInstalls:- Fuel- Text and fonts support- Morphic widgets- Polymorph- settings- some other packages"
"FreeTypeCacheEntry","An entry for the FreeTypeCache"
"DATarjanAlgorithmTest",""
"GTSpotterDeploymentExceptionHandler",""
"DiffModel","This is deprecated class because the original class DiffModel was renamed to DiffPresenter. You should stop to use this class and modify your code to use DiffPresenter."
"GlamourousBenchmark",""
"IceExtensionDefinition","I represent a container of method extensions read from an Iceberg repository, either from a commit or from the working directory in disk.The package containing this definition will have as many instances of myself as different classes are extended.My contents is just an empty string as the extended class/trait is not defined in the package.See my superclasses for more information."
"GTExecuteSelectionDebugAction","This action is responsible for executing a selected piece of code from the code pane of the debugger."
"SelectionMorph","A selectionMorph supports the selection of multiple objects in a morphic world or pasteUp. Using command+shift you get a squared lazzo and you can grab morphs. After you can grab the selection as a morph.Structure:	selectedItems	an OrderedCollection of Morphs					These are the morphs that have been selected	slippage		a Point					Keeps track of actual movement between the 					steps of gridded movement	dupLoc		a Point					Notes the position when first duplicate request occurs from halo	dupDelta	a Point					Holds the final delta of the first duplicate plus subsequent moves."
"ClyClassSideLinkTableDecorator","I decorate tables in the full browser with special icon for methods and protocol which are named like ""see class side"".The icon switches the browser to the class side"
"RFNodeReification","I am the node that the link is installed on"
"MyTestError","An error for tests"
"IceTipRepositoryFilter","I'm a filter for repositories, to be used in a repository list.currently I'm used to add filters in IceTipRepositoriesBrowser."
"BorderStyle","See BorderedMorphBorderedMorh new borderStyle: (BorderStyle inset width: 2); openInWorld."
"ExpressionEvaluated","This announcement correspond to code evaluation.  For example, a DoIt or PrintIt evaluated in a workspace raises one of this announcements."
"GLMBrickWrapper",""
"OSWindowExposeEvent","I am delivered when part (or whole) window are exposed on the desktop and needs refreshing."
"GLMTextChanged",""
"KernelClassesFilter","A filter for kernel classes"
"MetacelloErrorInProjectConstructionNotification",""
"TEmptyTest","I group a set of tests testing whether a collection is empty.I do not do any assymption on the elements being added since it wouldbind me to know how to access it. "
"ArrayedCollection","I am an abstract collection of elements with a fixed range of integers (from 1 to n>=0) as external keys."
"RBTransformation","I represent an elementary code transformation.My subinstances can be composed into composite transformations. I'm not a refactoring since a transformation I do not pay attention to behavior preservation. However as a transformation, I will be used by refactorings. My main API is 	- transform which is actually executing the transformation	- asRefactoring to optionally (false by default) check preconditions, if some apply"
"IceTipCredentialsStoreBrowser","I am the browser used to show a credentials store."
"EpUndo","I represent a Undo operation performed in a EpLogBrowser."
"TonelSTONWriter","I'm a modified STON writer to make tonel metadata look as we want.- it accept aliasses for classes, so I can say OrderedDictionary -> nil (then I do not have an extra information I do not want). Btw, tonel needs to use ordered dictionaries instead plain dictionaries because output needs to be deterministic, and we want to control the order of attributes we publish.- if dictionary has just one element, it prints it in just one line, to have a more compact view."
"RBRemoveProtocolTransformation","I am responsible for removing a protocol in a classUsage:| transformation |transformation := (RBRemoveProtocolTransformation			protocol: 'empty protocol'			inClass: #RBDummyEmptyClass)			transform.(ChangesBrowser changes: transformation model changes changes) open	Preconditions:- The class exists;- A protocol with this name exists;- No methods are categorized with this protocol."
"MetacelloToolBoxTutorial",""
"GoferResource","SUnit test resource for Gofer testing"
"HEBoolean","I represent a boolean.I am stored in the file as a byte with values 0 (false) and 1 (true)."
"LineMorph","This is really only a shell for creating single-segment straight-line Shapes."
"OSVMFormRenderer","My instances implement OSWindowFormRenderer interface for OSVMWindowHandle."
"MorphTreePager","A tree pager"
"ClyAllMethodsQuery","I return all methods which are visible from the scope."
"GoferChanges","Handling changes"
"SycAddNewClassTagCommand","I am a command to add new class tag into the package. Internal Representation and Key Implementation Points.    Instance Variables	package:		<RPackage>	tagName:		<String>"
"GTFilterAlike",""
"FLTGlobalClassOrTraitSerializationTest","I test the serialization of classes and traits as *external* objects, i.e. the classes or traits have to be present in the image at materialization time."
"OmEntry","I am a container for recording objects into a store. I also have tags for custom meta-information."
"RGTraitDefinition","RGTraitDefinition is the concrete representation of a trait (no class)"
"PolygonMorph","This class implements a morph which can behave as four different objects depending on the the following two facts:- is it OPEN or CLOSED?- is it SEGMENTED or SMOOTHED.1. The OPEN and SEGMENTED variant looks like polyline.2. The OPEN and SMOOTHED variant looks like spline (kind of curve)3. The CLOSED and SEGMENTED variant looks like polygon. This is actually what you get when you do	PolygonMorph new openInWorldYou get a triangle. See below how to manipulate these objects...4. The CLOSED and SMOOTHED variant looks like blob (???)Prototypes of this morph can also be found in ""Object Catalog"". Several (different variants) of this object are among ""Basic"" morphs.Explore the assiciated morph-menu. It enables you- to toggle showing of ""handles"". They make it possible to	- reposition already existing vertices (by moving yellow handles)	- create new vertices (by moving green handles)	- delete already existing vertices (by dragging and dropping one yellow handle closely	  nearby the adjacent yellow handle  Handles can be made visible/hidden by shift+leftclicking the morph. This way it is possible  to quickly show handles, adjust vertices and then again hide handles.- making closed polygon open, i.e. converting it to a curve (and vice versa)- toggle smoothed/segmented line/outline- set up custom dashing (for line, curves or borders of closed polygons- set up custom arrow-heads (for lines resp. curves)------------------------------------------------------------------------------------------Implementation notes:This class combines the old Polygon and Curve classes.The 1-bit fillForm to make display and containment tests reasonably fast.  However, this functionality is in the process of being supplanted by balloon capabilities, which should eventually provide anti-aliasing as well.wiz 7/18/2004 21:26s have made some changes to this class to1) correct some bugs associated with one vertex polygons.2) prepare for some enhancements with new curves.3) add shaping items to menu."
"ClyConstantQuery","I am special kind of typed query which always return constant collection of items independently of scope.Items are supposed to be homogeneous collection (a kind of same class).To create my instance use following methods: 	ClyConstantQuery returning: { Object. String }.	ClyConstantQuery returning: { Object. String } as: (ClySortedQueryResult using: ClySortByNameFunction ascending).	ClyConstantQuery returning: { Object. String } from: aScope 	 Internal Representation and Key Implementation Points.    Instance Variables	resultItems:		<Collection>"
"MCMockASubclass",""
"HeapTest","SUnit tests for heap collections"
"RGOrganization","An organization with categories"
"WideSymbol","This class represents the symbols containing 32bit characters."
"GLMDynamicPresentation","A GLMDynamicPresentation is a presentation that takes the actual presentation from the display value. Like this, we can have the block of display return a presentation depending on the input.A usage for this behavior is the Glamorous Editor, which takes the text as input and based on this it displays the browser."
"ClyUntestedClass","I am example of untested class which is not covered by any test"
"BIFormatSettingsExample","Some examples of the action of a pretty printing option "
"HiRenderingElement","My hierarchy is used to render a Hiedra ruler."
"CharacterKeyCombinationTest",""
"SugsWorkspaceContext","I am a context that know how to work with a basic  Workspace."
"SetTest","This is the unit test for the class Set. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"EyeByteArrayInspector","Specialized version of inspector showing the hex and string representation of the byte array in some variations."
"MetacelloMCPartiallyLoadedStatus",""
"NNavDirection","I'm the one who knows generalization to navigate an ast treeI have two concret classes: NavigateInto and NavigateOver"
"ZnMagicCookieJarTests",""
"OSJoyDeviceAddedEvent","I am a joystick device added event.This event is generated when a joystick is connected to the computer."
"IceCheckoutAllPackages","I'm the simplest possible checkout strategy: I will load into image all packages defined in repository regardless their previous status. This strategy is very dangerous since it can introduce in image package versions that were not there before. Or it may cause the packages/classes became incorrectly initialised. But some project can find this strategy very apeleable nevertheless."
"ClyExtendedMethodGroupProviderTest",""
"RFOperationReification","I reify operations like message send, variable read, assignment...."
"CallbackForWin64X64","A CallbackForWin64X64 is a callback for platforms with x64/x86_64 processors using the Win64 ABI."
"RBRefactoryClassChange","I am the abstract baseclass for a ""class change"" refactoring change. I know about theclass(name) whether it is a change for for the meta or the instance side.I keep track of the undo and redo operation, but the concrete class change operation is implement by my subclasses."
"TCopyPartOfSequenceableForMultipliness","A trait for test purposes"
"SpecStubTabManagerView","Only stub object, no real view is displayed."
"RBAddMethodRefactoring","I am a refactoring for adding methods to a class.My operation will compile a new method to a class in the specified protocol.You can create an instance with: RBAddMethodRefactoring model:RBNamespace new addMethod:'foo ^ self' toClass:Morph inProtocols:{'test'}.The method to compile is the full method source (selector, arguments and code).My precondition verifies that the methods source can be parsed and that the class does not already understands this methods selectors. That means, you can not use this refactoring to add methods for overwriting superclass methods."
"SlotExampleTest",""
"GLMValidator",""
"AlienWeakTable","This class supports simple post-mortem finalization of values associated with gc'ed objects.  An object to be finalized is registered in the table together with another object called 'the tag'. The finalizable object is held onto by the table weakly, the tag object--strongly. A table is initialized with the owner object, which is the object that performs the actual finalization. Some time after a finalizable object is garbage-collected, the owner is sent the #finalize: message with the object's tag as the argument.Instance Variables:	accessProtect <Semaphore>  - A mutex protecting state	firstUnusedIndex <Integer> - The lowest index in strongArray that is empty (an invariant)	lastUsedIndex <Integer> - The highest index in strongArray that is not empty (an invariant)	weakArray <WeakArray> - The array of objects whose death we're interested in.	strongArray <Array> - The array of corresponding objects that wll be passed to the owner when their corresponding element in weakArray is garbage collected.	owner <Object> - The object that is sent finalize: with the tag of an object that has been garbage-collected."
"GLMEditorPopupBrick","I am a popup with a text editor allowing users to ""in-place"" edit values"
"GLMMorphicFastListRenderer","I am a Morphic renderer for a GLMFastListPresentation.Description--------------------I use a GLMFastListDataSource to manage the data of the table."
"SocketStreamTest","SUnit tests for socket streams"
"RubSmalltalkEditor","I am the editor for smalltalk code, I allow to browse, execute etc"
"RBRenameTemporaryVariableTransformation","RBRenameTemporaryVariableTransformation is responsible for renaming temporary variables, including arguments, inside a method.Example: | transformation |transformation := (RBRenameTemporaryVariableTransformation 				rename: #rules to: #asdf				in: #RBLintRuleTest				selector: #openEditor)				transform.(ChangesBrowser changes: transformation model changes changes) open	Preconditions:- Check whether this method has a temporary variable with the given name.- Check whether the class does not have instance or class variables with the given name."
"CodeSimulationTests","SUnit tests for code simulation"
"MetaLinkRegistry","I register specific kind of links that are instance specific and/or ""permanent"".I do not install links, i only know informations necessary to find helpful information for link installation (target instances, link count, nodes...).### Instance specific linksThese links are installed for a given object. links <WeakKeyDictionary> I reference target objects (values) for which a link has been installed on (key)Note that instance specific links can be put on other nodes for other objects and/or classes. An instance specific link can also be a regular link active for all instances of an other classes, or even be put on an other node in the class of the object.### PermaLinksThese links are installed on slots, temporary variables or class variables. I hold explicit specifications of all the kind of nodes the link should permanently be installed on.Specifications can be of kind for a given var: - #read install on all read nodes of var- #write install on all assignment nodes of var - #all both read and write nodes of varUsecases:- A link is put on all reads of slot s of class C. If a new method reading s is added in C, i must hold necessary informations to find the new read nodes of s in the new method. I neither find the nodes nor install links on them myself.- A link is put on all assignments of slot s of class C. If a method with an assignement of s is modified in C, in must hold necessary informations to check if there is still any assignements nodes of s in this method, and update the link accordingly (i.e. reinstall it on these new nodes if they do exist)In both these usecases, i provide fast and convenient access to the needed informations."
"FLSerialization","I implement the algorithm for serializing an object graph on a stream. FLSerializer known how to build instances of me."
"OSTouchPinchEvent","Superclass of all pinches events"
"RBExtractMethodToComponentRefactoring","I am a refactoring for extracting code fragments to a new method. Similar to RBExtractMethodRefactoring, but you can choose to which component (instance or agument variable) the new method is added. As such, the new method arguments will include an additional argument for the sender.Based on the instance variable you chosed for this method I will guess the class where to add this method, but you can change this class or add more classes."
"EpBrowseVisitor","I implement how to browse EpCodeChange instances."
"SpecStubLabelAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"MetacelloProjectRefTutorialConfig",""
"GTSpotterPaneBrick",""
"TestDelayMutexSchedulerMillisecondTicker","I inherit delay scheduler system tests and run them for the specific combination of...  scheduler DelayMutexScheduler  ticker DelayMillisecondTicker."
"ClyClassCommentEditorToolMorph","I am an editor of class comment"
"GLMBrickLayoutEvent",""
"GlobalIdentifierPersistenceMockChecker","I am a MOCK equivalent for GlobalIdentifierPersistenceChecker, userful for testing behavior."
"LGitCommitStore",""
"GLMMorphicWindowRenderer","This renders the top most browser or composite presentation in a window."
"TransferPresenter","I am a model representing a transfer during a drag and drop operation. I keep a pointer the source of the drag, and a pointer to what is dragged"
"GTUnprintableObjectTest","GTUnprintableObjectTest is a test that checks that print string does not trigger an error in the inspector."
"FileSystemTreeTest","SUnit tests for a file system tree"
"FLObjectNotFound","I represent an error which may happen during serialization, when trying to encode on the stream a reference to an object that should be encoded before, but it is not.This usually happens when the graph changes during serialization. Another possible cause is a bug in the analysis step of serialization."
"IceTagNotFound",""
"LGitDatabase",""
"OSSDL2WindowHandle","I am the OSWindowHandle interface implemented using SDL2 librarymy handle is an SDL_Window"
"ClyConvertMethodGroupToTagCommand","I am a command to convert given method groups to method tag.I perform kind of ""Move to protocol"" operation for all contained methods Internal Representation and Key Implementation Points.    Instance Variables	tagName:		<Symbol>"
"IceLibgitFiletreeLogReader","I read exclusively the definition of the method defined in fileName.I'm using to speed the creation of a version list on IceLibgitFiletreeLog."
"FileSystemHandle","I am an abstract superclass for file handle implementations. I provide a uniform interface that streams can use for read and write operations on a file regardless of the filesystem. I encapsulate the actual IO primitives."
"ManifestSpecMorphicAdapters","Morphic specific spec adapters"
"TonelWriterTest",""
"RBToDoCollectRule","Checks for users of to:do: when the shorter collect: would work."
"TaRemoveSlot","I remove a Slot from a trait.I implement the #--  operator."
"ClyShowDependencyCritiqueCommand","I a command which opens dependency browser of given package which is my analyzed object"
"GTSpotterBrickDarkThemer",""
"KMDispatcherTestCase","SUnit tests for the key mapping dispatcher"
"RBDummyCompositeLintRuleTest",""
"IceTipCheckoutBranchPanel","I'm a panel to peform the checkout of an existing branch."
"ChangesBrowserTest","A ChangesBrowserTest is a test class for testing the behavior of ChangesBrowser"
"ClySwitchQueryResultCommand","I am a base class for the commands which switch the required result in query browser.It can be flat list or hierarchically sorted items.My subclasses should implement class side method:- requiredQueryResult"
"DirectoryDoesNotExist","I am raised when I an operation is attempted inside a directory that does not exist. "
"FLSortedCollectionSerializationTest","SUnit tests for fuel serialization of sorted collections"
"SoundSystem","This is the base class for a sound system. A sound system offers a small protocol for playing sounds and making beeps. While SoundSystem is an abstract class, it acts as a facade to the actual SoundSystem.When the SoundPackage is not loaded, SoundSystem current refers to DummySoundSystem. SoundSystem current gives access to the currently installed SoundSystem.When no SoundSystem is available, a dummy one is installed as current.      SoundSystem soundEnabled: true.SoundSystem current beepSoundSystem current: BaseSoundSystem new"
"IcePackage","Can give information about a package that is saved in a repository, for example: - isLoaded if the package has been loaded into the image.- isModified if the package has local changes to be commited- incomingCommits information about commits in the repository that are newer than the version loaded into the image."
"GLMTreeMorphicTest",""
"WorkingSession","I am the unique object for the current smalltalk session (I.e. between a startup and a shutdown).On each image startup the current session is invalidated and a new session is created.I define how errors should be handled.ps: I replace the old Session class that was only used as a session identifier  "
"RenrakuMigrationHelp","Lately Pharo tools moved to Renraku framework which requires a slightly different implementation from rules.		While you can achieve much more features by reading the whole documentation and using the complete set of Renraku possibilities, this book contains a few simple steps to help you converting existing rules to work with Renraku model."
"IceTipPullRequestsContext","Description--------------------I am a simple context for the pull request review browser."
"RBMoveInstanceVariableToClassTransformation","Moves an instance variable from a class to another. It does not check whether this variable is being referenced in the former class.Usage:| transformation |transformation := (RBMoveInstanceVariableToClassTransformation				variable: 'methodBlock'				fromClass: #RBBasicLintRuleTest				toClass: #RBFooLintRuleTest)				transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:overrides the preconditions from both RBAddVariableRefactoring and RBRemoveVariableRefactoring"
"SettingBrowserTest","A SettingBrowserTest is a test class for testing the behavior of SettingBrowser"
"RBAddParameterTest",""
"Encoder","I encode names and literals into tree nodes with byte codes for the compiler. Byte codes for literals are not assigned until the tree-sizing pass of the compiler, because only then is it known which literals are actually needed. I also keep track of sourceCode ranges during parsing and code generation so I can provide an inverse map for the debugger."
"LGit_GIT_EINVALIDSPEC",""
"Callback","Callbacks encapsulate callbacks from the outside world.  They allow Smalltalk blocks to be evaluated and answer their results to external (e.g. C) callees.  Callbacks are created with signature:block:, e.g.	cb := Callback			signature:  #(int (*)(const void *, const void *))			block: [ :arg1 :arg2 | ((arg1 doubleAt: 1) - (arg2 doubleAt: 1)) sign].and passed through the FFI by passing their pointer, e.g.	self qui: data ck: data size so: 8 rt: cb pointerWhen the callback is made, the system arranges that the block is invoked with the arguments as defined by the signature, and the result of the block passed back, again as defined by the signature.  See methods in the signatures protocol in subclasses of Callback for signature methods that decode the C stack and registers to invoke a callback with parsed arguments.  See Callback>>valueInContext: and subclass implementations for the evaluation of the signature method that invokes the callback block with correctly parsed arguments.  See Alien class>>invokeCallbackContext: for the entry-point for callbacks into the system from the VM.Instance Variables:block <BlockClosure> - The Smalltalk code to be run in response to external code invoking the callback.thunk <FFICallbackThunk> - the wrapper around the machine-code thunk that initiates the callback and whose address should be passed to Cevaluator <Symbol> - the selector of the marshalling method to use; see methods in the signatures protocol in subclasses of Callback.numEvaluatorArgs <Integer> - the arity of evaluatorargsProxyClass <Alien subclass> - legacy; unused; the wrapper around the thunk's incoming stack pointer, used to extract arguments from the stack.Class Variables:ThunkToCallbackMap <Dictionary of: thunkAddress <Integer> -> callback <Callback>> - used to lookup the Callback associated with a specific thunk address on callback.  See FFICallbackThunk.ABI <String> - the name of the current ABIClass Instance VariablesconcreteClass <Callback subclass> - the concrete class for callbacks on the current platform, or nil if one doesn't yet exist.Implementation:The way that it works is in two parts- on callback the VM passes up a pointer to a structure from which all arguments, stacked and in registers (because the VM has copied any register args into the struct) can be accessed, and through which the result can be returned.- the image level provides marshalling methods that match the signature in the callback.  Marshalling methods belong in concrete subclasses, one subclass for each ABI.So e.g. with a callback of		Callback			signature:  #(int (*)(const void *, const void *))			block: [ :arg1 :arg2 | ((arg1 doubleAt: 1) - (arg2 doubleAt: 1)) sign]the marshalling methods are in one of Callback's concrete subclasses signatures protocol, for exampleCallbackForIA32>>voidstarvoidstarRetint: callbackContext sp: spAlien	<signature: #(int (*)(const void *, const void *))>	^callbackContext wordResult:		(block			value: (Alien forPointer: (spAlien unsignedLongAt: 1))			value: (Alien forPointer: (spAlien unsignedLongAt: 5)))where spAlien is an Alien pointing to a VMCallbackContext32.For ARM support, where there the first four integer arguments are passed in registers, we can useCallbackForARM32>>voidstarvoidstarRetint: callbackContext regs: regsAlien	<signature: #(int (*)(const void *, const void *))>	^callbackContext wordResult:		(block			value: (Alien forPointer: (regsAlien unsignedLongAt: 1))			value: (Alien forPointer: (regsAlien unsignedLongAt: 5)))The selector of the method doesn't matter, providing it doesn't conflict with any other, except for the number of arguments.  What's important is the pragma which defines the signature and the ABI for which this is a valid marshalling method.  Support for callee pop callbacks (Pascal calling convention such as the Win32 stdcall: convention) are supported using the <calleepops: N> pragma which specifies how many bytes to pop.When a callback is instantiated, Callback introspects to find the marshalling method that matches the signature for the current ABI.  If one doesn't already exist you can write one.  Hopefully we'll write an ABI compiler that will automatically generate these marshalling methods according to the platform's ABI, but for now its a manual process.; at least it's open and flexible.  When the callback is invoked the evaluator is performed with the current callbackContext and pointer(s) to the arguments.  There is a 32-bit and a 64-bit callback context, and it can have a stack pointer, integer register args and floating point register args, so it's general enough for any callback.To pass back the result, a value is assigned into the struct via the accessor in the marshalling method and control returns to teh point where teh callback comes in, and this uses a primitive to return.  Inside the callbackContext is a jmpbuf from a setjmp.  The primitive longjmp's back to the entry point in the VM which extracts the result and the code for the kind of result and returns.  See Callback class>>invokeCallbackContext:"
"FreeTypeSubPixelAntiAliasedGlyphRenderer","A SubPixel-AntiAliased GlyphRenderer for FreeType"
"BrowseDebugAction","A BrowseDebugAction is a debugging actions sending a unary message to the stack widget."
"SDL2TouchStateMachine","my role is to record the movements of a finger and associate a color to this movement"
"HelpAPIDocumentation","This class represents the browsable package API help for the help system.Instance Variables"
"FLBlockClosureSerializationTest","SUnit tests for fuel serialization of block closures"
"LayoutCell","I am used in table layouts to hold temporary values while the layout is being computed.Instance variables:	target 		<Morph>		The morph contained in this cell	cellSize 		<Point>		The size of the cell	extraSpace 	<nil | Point>	Additional space to add after this cell	nextCell 	<nil | LayoutCell>	The next cell in the arrangement.Implementation note:Both, cellSize and extraSpace contains points where	x - represents the primary table direction	y - represents the secondary table direction"
"RxmSubstring","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--Instance holds onto a string and matches exactly this string, and exactly once.Instance variables:	string 	<String>"
"ColorPresenterMorph","Displays a colour with alpha against a white, hatched and black background."
"GLMWindowRequest","I indicate to the renderer to execute a message on the window that rendered this presentation. It will only execute if the presentation is directly rendered in a window (i.e., if this is the presentation to which #openWith: was sent)"
"EpNewStateVisitor","I answer a String that represents the new state of an EpEvent."
"SugsRenameTemporaryVar","I know how to rename a local variable."
"ExternalObject","External objects represent entities that are not part of the Smalltalk universe. They are accessed using a unique handle which is interpreted depending on the actual entity that is represented. Instance variables:	handle	<ByteArray | ExternalAddress>"
"GLMPagerButtonClicked",""
"AthensCWArcSegment","i represent a circular arc, connecting  previous segment endpoint and my endpoingof given angle, passing in clockwise direction."
"OSWindowGLAttributes","I holding a set of OpenGL attributes, used to initialize an opengl rendering context for a window."
"SlotIntegrationTest","I'm a test case of SlotClassBuilder integration in the system. Tipically, my tests assert over Class API."
"ReTrivialCritique","I am a trivial tritic that does not provide any more information other than my target and rule"
"MockExceptionWithPassAction","I am Exception used in the Weak collection tests which has a custom pass action.Instead of using the Exception's default pass mechanism I will call a customized block."
"ZnMissingHost","ZnMissingHost is signalled when a host should be specified but was not.Part of Zinc HTTP Components. "
"RBAbstractInstanceVariableRefactoring","I am a refactoring for replacing every direct access to  instance  variables with accessor methods.My precondition verifies that the variable is directly defined in that class.I create new accessor methods for the variables and replace every read and write to this variable with the new accessors."
"PharoSourcesCondenser","I create a more compact version of the .sources file.I move the source code from all methods to a new .sources file where I keep only one version.Additionally I will empty the current .changes file."
"FBDDecompilerTest","SUnit tests for FBSDecompiler"
"RBRenameClassChange","I am a refactory change for a class-rename refactoring. I hold the old and new name.Executing this change will rename the (global) defined ""oldName"" class to ""newName""."
"MCVersionMerger","Merge versions"
"LGitProxyOptions","/** * Options for connecting through a proxy * * Note that not all types may be supported, depending on the platform * and compilation options. */"
"BalloonBuffer","BalloonBuffer is a repository for primitive data used by the BalloonEngine."
"RBProtocolRegexRefactoring","I am a regex refactoring renaming protocol names."
"MalWeightedHitsNode",""
"SDL_Palette","SDL2 library structure"
"OSTouchTwoFingersPinchEndEvent","Two fingers finished to pinch"
"ClyMethodGroupContextOfFullBrowser","I am a context of selected method groups in full browser"
"GLMSegmentWithHelpAndMouseUpActionExample","self new open"
"ClyTableDecorationStrategy","I annotate table decorators (ClyTableDecorator subclasses) to define where decorator should be used, in what context of selected items.For example following method will declare that classes in any browsers should be decorated with abstract class decorator:ClyAbstractClassTableDecorator class>>classDecorationStrategy	<classAnnotation>	^ClyTableDecorationStrategy for: ClyClass asCalypsoItemContext	It only declares where to use decorator but decorator itself can define extra conditions to check that given item is actually should be decorated	annotatedClass wantsDecorateTableCellInContext: aBrowserItemContext	I sort my registered instances according to ascending priority. It is opposite to default order of annotation registry. Idea that most prioritized decorator should be able override visual effects from less prioritized decorators. And to achieve it I just enumerate instances in described order: asceding priority, which evaluates most prioritized decorator at last order.Important notice. The actual priority is defined by decorator classes in class side method #priority. I retrieve them when annotation is created"
"RBOnlyReadOrWrittenVariableRule","This smell arises when an instance variable is not both read and written. If an instance variable is only read, the reads can be replaced by nil, since it could not have been assigned a value. If the variable is only written, then it does not need to store the result since it is never used. This check does not work for the data model classes since they use the #instVarAt:put: messages to set instance variables."
"KMKeyCombinationChoice","I representing a choice between key combinations.A keyboard event will match with me when any of my key combinations matches with it."
"PharoSyntaxTutorialTest","SUnit tests for PharoSyntaxTutorial"
"NavigationHistory","I act as a web browser history"
"HiNodeBuilder","I know how to build ruler nodes."
"RBMultiEnvironment",""
"RBNotEliminationRule","Eliminate unnecessary not''s in relation of conditionals.For example test not ifTrue:[] is equivalent to test ifFalse:[]' [[[anObject not ifFalse: block']]]is transformed into[[[  anObject ifTrue: block']]][[[aCollection select: [ :each | ... anObject not ] ]]]	is transformed into 	[[[aCollection reject: [ :each | ... anObject ] ]]]"
"ClyMetalinkMenuGroup","I am menu group to arrange together all metalink related commands (breakpoints, counters, watchpoints)"
"ClyShowLocalImplementorsCommand","I am a root of commands hierarchy which are supposed to show implementors of selected methods in local class scope of these methods.My subclasses should define what exact local scope they allow to browse. They should implement following method:- createInheritanceScopeFrom: classes It should return parcicular class scope instance.Also my subclasses can define default selection in spawned query browser. They should override method:- selectMethodsIn: aQueryBrowserMy instance should be created on method selection and browser. Internal Representation and Key Implementation Points.    Instance Variables	browser:		<ClyBrowser>"
"GTSpotterPreviewArrowBrick",""
"OSWindowAthensDrawingExampleEventHandler","i a m the event handler linked to SDL2AthensDrawingExample"
"JoinSide","The join side"
"GLMPaneRemoved","A new pane was removed"
"LayoutClassScope","I am layout scope for classes."
"MalSccExtractor","A utility class to easily get circuits, i.e. SCC with more than one node."
"MetacelloMCProject",""
"ZnUnknownScheme","ZnUnknownScheme is signalled when an unknown/unsupported URL scheme is found.Part of Zinc HTTP Components. "
"Set","I represent a set of objects without duplicates.  I can hold anything that responds to#hash and #=, except for nil.  My instances will automatically grow, if necessary,Note that I rely on #=, not #==.  If you want a set using #==, use IdentitySet.Instance structure:  array	An array whose non-nil elements are the elements of the set,		and whose nil elements are empty slots.  There is always at least one nil.		In fact I try to keep my ""load"" at 75% or less so that hashing will work well.  tally	The number of elements in the set.  The array size is always greater than this.The core operation is #findElementOrNil:, which either finds the position where anobject is stored in array, if it is present, or finds a suitable position holding nil, ifits argument is not present in array,"
"PragmaTest","SUnit tests for Pragma class"
"GLMNestedBrowserTest",""
"GLMMorphicTabbedRenderer",""
"ClyMethodEditorToolMorph","I am a base class for method edito tools.I implement correctly the styling of typed source code. Also I add multiple text editing tools to the status bar: - wrap mode switch - line number=s switch- format as you read - method tags and package editor.In addition to the superclass abstract methods subclasses should implement following methods: - methodClass Subclasses should decide what class will accept editing method- modifiesExtension Subclasses should detect that editing method is going to be extension.Internal Representation and Key Implementation Points.    Instance Variables	extendingPackage:		<RPackage>	methodTags:		<Array of<Symbol>>"
"UnixResolver","I am an expert on Unix filesystem conventions. I resolve origins according to these conventions."
"SimpleAnnotationContextTests",""
"AtomicCollection","I am just a base abstract class, containing common behavior for various queue types"
"NativeArrayTest","SUnit tests for ByteArray, DoubleByteArray, WordArray and DoubleWordArray."
"FLGlobalClassSideCluster","I am a cluster for those Metaclasses and ClassTrait who are not stored in detail."
"MCMockClassH",""
"IceTipVersionHistoryModel","I'm a model to provide the history of a method."
"GTInspectorProtoObjectTest",""
"PathTest","SUnit tests for file system paths"
"MCCodeTool","MCCodeTool is an abstract superclass for those Monticello browsers that display code.It contains copies of the various CodeHolder methods that perform the various menu operations in the method list."
"NoPharoFilesOpener","I am NoPharoFilesOpener.I am a PharoFilesOpener that does nothing. I.e. neither the sources nor the changes file are opened and nil is returned.I am used to set up an image to run an image without sources or changes.To install me, execute  NoPharoFilesOpener install.To get back to the normal situation, execute  PharoFilesOpener reset."
"VisibleClassAnnotationsTests",""
"ClyAllExtensionMethodsQuery","I return only extension methods."
"NECSuperEntry","I represent super."
"RBCoreClassesHelp","A book chapter describing  important core classes from the class comments."
"IceGitHubRejectPullRequestModel","I'm a dialog to collect data about a pull request rejection."
"IceRepositoryAnnouncement","Groupes different announcements that can happen in a repository."
"ShCBClassWithInstanceVariables","I am a test class."
"ClySortedQueryResultTest",""
"IceLibgitFiletreeSnapshotWriter","I'm a filetree snapshot writer to ensure the output will be libgit2 compatible.I'm not surre I cannot unify myself class with my parent."
"GTDummyEvent","I represent an object that is kept by a GTEventCollector. I serve only for the testing purpose."
"GLMPopupBrickUnhoverPredicate","I am activated as soon as mouse is moved outside of a popup"
"IceTipTableColumn","I'm a column for Tip tables. I can read a value on an object using an action block or symbol."
"ZnFileSystemUtils","I am ZnFileSystemUtils.I help is abstracting over API differences pre and post the introduction of FileSystem in Pharo 2.0Part of Zinc HTTP Components."
"SDL_JoyButtonDownEvent","SDL2 library structure representing a joystick button down event data."
"EpCategoryChange","I represent a change in the categories of a package."
"MCWorkingAncestry","The interim record of ancestry for a working copy, gets merged version added to the ancestry, and is used to create the VersionInfo when the working copy becomes a version. "
"GTSpotterRecorderDiveInCategoryEvent","A GTSpotterRecorderDiveInCategoryEvent  models the action of  diving in a category (list of results)."
"ProcessLocalSlot","A ProcessLocal is a slot that references different objects in different processes.Internally it is implemented with a ProcessLocalVariable. Writing into the slot writes a field in the current process. myProcessLocalVariable value: anObjectReading into the Slot reads the only field in the array.myProcessLocalVariable value.This slot inherits from IndexedSlot to guarantee that this slot has a real field inside an object.This slot should be used wisely:1) The value is stored weakly, an example of this would be:obj := MyClass new.obj local: Object new.obj local. “anObject” <—— Now we see the objectSmalltalk garbageCollect.obj local. “nil” <—— Now we don’t2) This variable are stored in a WeakArray in the Process, so massive use of them will make the array in the processes start growing a lot and often."
"POP3LoginError","Exception for signaling POP3 login failures."
"LGit_GIT_EMODIFIED",""
"TextAnchorTest",""
"LockableTabMorph","I am a tab which can be locked/unlocked with according action and icon"
"UnwindError",""
"RBSmalllintTestAddRemoveDependentsObject","This class should trigger the RBAddRemoveDependentsRule critic."
"FinderMethodNode","A FinderMethodNode is a node used by the FinderUI's tree representing a Method"
"CmdCommandActivationExample",""
"MethodDictionaryTest","SUnit tests for MethodDictionary"
"BooleanSlot","**Unfinished, see #todo**I am a Slot that does not allocate one field for each slot. Instead, all Booleanlots of the whole hierarchy are allocated in an integrer that is stored in an invisible slot ."
"ClyRestUntaggedClassesQuery","I am a query of unclassified classes.I a bit complex class query which returns classes without any tag.The complexity is related to the logic that I will return nothing from the package which has no tags at all.You can see class group #extensions which is based on me. It appears only when tagged and untagged classes exist together in the package"
"MetacelloCypressBaselineProjectSpec","I am a project spec specific to metadataless projects (filetree/tonel)."
"ShSuperclassChanged","I model the change in a superclass that should be propagated to the subclasses."
"IceGitHubBranchSelectCommand","This command represent the commands with submenus to select remotes"
"LabelledDropListButtonTest",""
"MCStReaderTest",""
"IceTipEntityModel","I'm a generic model for Iceberg entities (tipically, repositories, commits, packages, etc., etc., etc.) "
"ClyClassScopeTestCase",""
"AthensTextBackground","Athens text background "
"RBInlineTemporaryRefactoring","I am a refactoring to replace a temporary variable by code.All references to the temporary variable in this method are replaced by the value used to initialize the temporary variable. The initialization and declaration of this variable will be removed. You need to select the variable and its initial assignment code to apply this refactoring."
"PluggableIconListMorph","A type of PluggableListMorph that supports a single icon (Form) for items. Useful for lists with icons."
"GTSUnitExampleWithSetUpAndNoTearDownTest","I am not a test! I provide usage examples for the SUnit debugger."
"LGitExternalCommitArray","I represent an external array of commits."
"LucidaGrandeRegular","I'm a stub to load Lucida Grande font in system. As is, it works just for macs, but the idea is to use it for showing shortcut symbols... which has sense just un mac :)"
"ClyCursorPositionLabelMorph","I print position of cursor in the text editor.Look at #printCursorPosition method for details.  Internal Representation and Key Implementation Points.    Instance Variables	labelMorph:		<StringMorph>"
"RBPragmaNode","RBPragmaNode is an AST node that represents a method pragma.We have a fixed set of allowed ""primitive"" pragma keywords. Every method implemented as a primitive call uses one of this pragmas.And as we need some special treatment for methods implemented as primitive, the RBPragmaNode adds the #isPrimitive testing method.Instance Variables:	arguments <SequenceableCollection of: RBLiteralNode> our argument nodes	left <Integer | nil> position of <	right <Integer | nil> position of >	selector	<Symbol>	the selector we're sending	keywordsPositions	<IntegerArray | nil>	the positions of the selector keywords"
"ClyClassWithUndeclares","I am example class with methods which use undeclated variables"
"MenuItemModel","This is deprecated class because the original class MenuItemModel was renamed to MenuItemPresenter. You should stop to use this class and modify your code to use MenuItemPresenter."
"TutorialPlayer","I can navigate through an AbstractTutorial subclass. With #next and #previous you can go forward and backward through the tutorial. "
"LGitCheckoutStrategyEnum","/** * Checkout behavior flags * * In libgit2, checkout is used to update the working directory and index * to match a target tree.  Unlike git checkout, it does not move the HEAD * commit for you - use `git_repository_set_head` or the like to do that. * * Checkout looks at (up to) four things: the ""target"" tree you want to * check out, the ""baseline"" tree of what was checked out previously, the * working directory for actual files, and the index for staged changes. * * You give checkout one of three strategies for update: * * - `GIT_CHECKOUT_NONE` is a dry-run strategy that checks for conflicts, *   etc., but doesn't make any actual changes. * * - `GIT_CHECKOUT_FORCE` is at the opposite extreme, taking any action to *   make the working directory match the target (including potentially *   discarding modified files). * * - `GIT_CHECKOUT_SAFE` is between these two options, it will only make *   modifications that will not lose changes. * *                         |  target == baseline   |  target != baseline  | *    ---------------------|-----------------------|----------------------| *     workdir == baseline |       no action       |  create, update, or  | *                         |                       |     delete file      | *    ---------------------|-----------------------|----------------------| *     workdir exists and  |       no action       |   conflict (notify   | *       is != baseline    | notify dirty MODIFIED | and cancel checkout) | *    ---------------------|-----------------------|----------------------| *      workdir missing,   | notify dirty DELETED  |     create file      | *      baseline present   |                       |                      | *    ---------------------|-----------------------|----------------------| * * To emulate `git checkout`, use `GIT_CHECKOUT_SAFE` with a checkout * notification callback (see below) that displays information about dirty * files.  The default behavior will cancel checkout on conflicts. * * To emulate `git checkout-index`, use `GIT_CHECKOUT_SAFE` with a * notification callback that cancels the operation if a dirty-but-existing * file is found in the working directory.  This core git command isn't * quite ""force"" but is sensitive about some types of changes. * * To emulate `git checkout -f`, use `GIT_CHECKOUT_FORCE`. * * * There are some additional flags to modified the behavior of checkout: * * - GIT_CHECKOUT_ALLOW_CONFLICTS makes SAFE mode apply safe file updates *   even if there are conflicts (instead of cancelling the checkout). * * - GIT_CHECKOUT_REMOVE_UNTRACKED means remove untracked files (i.e. not *   in target, baseline, or index, and not ignored) from the working dir. * * - GIT_CHECKOUT_REMOVE_IGNORED means remove ignored files (that are also *   untracked) from the working directory as well. * * - GIT_CHECKOUT_UPDATE_ONLY means to only update the content of files that *   already exist.  Files will not be created nor deleted.  This just skips *   applying adds, deletes, and typechanges. * * - GIT_CHECKOUT_DONT_UPDATE_INDEX prevents checkout from writing the *   updated files' information to the index. * * - Normally, checkout will reload the index and git attributes from disk *   before any operations.  GIT_CHECKOUT_NO_REFRESH prevents this reload. * * - Unmerged index entries are conflicts.  GIT_CHECKOUT_SKIP_UNMERGED skips *   files with unmerged index entries instead.  GIT_CHECKOUT_USE_OURS and *   GIT_CHECKOUT_USE_THEIRS to proceed with the checkout using either the *   stage 2 (""ours"") or stage 3 (""theirs"") version of files in the index. * * - GIT_CHECKOUT_DONT_OVERWRITE_IGNORED prevents ignored files from being *   overwritten.  Normally, files that are ignored in the working directory *   are not considered ""precious"" and may be overwritten if the checkout *   target contains that file. * * - GIT_CHECKOUT_DONT_REMOVE_EXISTING prevents checkout from removing *   files or folders that fold to the same name on case insensitive *   filesystems.  This can cause files to retain their existing names *   and write through existing symbolic links. */"
"TextLineTest",""
"FFIExternalStructureFieldSpec","I'm a field spec for fields in FFIExternalStructure"
"EpTraitChange","I represent a change in the definition of a trait."
"FinderPragmaNode","A FinderPragmaNode is a Node used to render a pragma in the Finder Tree"
"RPackageExtensionMethodsSynchronisationTest","SUnit tests for RPackage extension methods"
"IceFileDefinition","I represent a file inside the iceberg repository. My contents are the contents of the file, utf8 decoded.See my superclasses for more information."
"TAddForUniquenessTest","A trait for test purposes"
"GoferRevert","Revert work"
"SpecStubTreeColumnAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"FFIUnknownLibrary","I'm used when there is no defined library as a module. In case FFI users want to declare modules as simple strings, I'm used to model the access to that library.I'm never used directly! Instead, users will utilize Strings that will be converted to me thru #asFFILibrary method. That way, is completely the same to do a call this way: self ffiCall: #( void fn () ) module: 'libc'. and self ffiCall: #( void fn () ) module: LibC. (but of course recomended way is to use a module, in case you need a strategy to find libraries in different platforms. "
"EventManager","An EventManager is used to registers a 'observer' object's interest in in changes to an 'observed' object.  Then when the observered object is changed,  EventManager broadcasts the an update message to all objects with a registered interest.  Finally, the Event manager can be used to remove an object from the list of observer object.An interested object is said to be a dependant on the target object.  Registering an interest in an event is called adding a dependant. Deregistering is called removing  a dependant.  The EventManager's action map is a WeakIdentityDictionary that maps events (selectors) to dependants (objects & selectors) in a way that ensures the mapping is to specific objects (hence identity) and in a way that allows the object to be garbage collected if not other used (hence weak.)  EventManager class has ActionMaps which has one actionMap for each object.Classic uses of an EventManager are to implement the Observer Pattern, see ChangeNotification or the MorphicModle as examples."
"ProcessList","I am a VM Special class! Do not break me!I am a linked list that contains processes as Nodes. My implementation is tied to the VM: - every node I contain should have as first instance variable the next node in the list.My main user is ProcessScheduler, which contains an array with instances of myself. Each entry in that array a priority for processes. Processes are queues in each process list by the VM automatically."
"PlatformResolverTest","SUnit tests for PlatformResolver"
"RBInconsistentMethodClassificationRule","This smell arises when a method protocol is not equivalent to the one defined in the superclass of such method class. All methods should be put into a protocol (method category) that is equivalent to the one of the superclass, which is a standard style in Pharo. Furthermore, methods which are extended in the superclass are ignored, since they may have different protocol name. Pay attention when you apply automatic recategorisation because it may move method in antoher package if the method is defined in the superclass as an extension."
"DebuggerMethodMapOpal","I provide helper methods deadling with-> pc to text mapping-> temporary variables for contexts-> reading and setting tempary variablesAll methods here should be moved to MethodContext."
"FTAnnouncement","I'm a base announcement for FastTable announces."
"ManifestManifestCore","Support for package Manifest creation"
"GTSpotterShowPreview",""
"PluggableMenuSpec","I'm a spec for a menu. The World menu pragma based registration uses it for now. I'm moved in this package so that later we can decide what to do with it. We could probably avoid MenuSpec and just use MenuMorph instead. "
"TimeTest","This is the unit test for the class Time."
"WindowsDynamicLoader","I'm a windows platform dynamic library loader."
"TCreationWithTest","A trait for test purposes"
"MetacelloTestsGoferUnload",""
"ArchitecturalCritique","A TrivialCritique with and extended actions to open a dependency browser for ArchitecturalRule"
"HowToMakeYourOwnTutorialTest","Tests for HowToMakeYourOwnTutorial"
"SHA256","I am SHA256, a HashFunction.I implement the SHA-2 cryptographic hash function with digest size 256.See alsohttp://en.wikipedia.org/wiki/Sha256http://csrc.nist.gov/publications/fips/fips180-2/fips180-2withchangenotice.pdfUsageSHA256 hashMessage: 'foo'.From the older class comments:Copied from CFSHA256 (Cloudfront)Please direct questions or comments about this implementation to Ron Teitelbaum: Ron@USMedRec.comThis code was extensively coppied from SHA1 by Luciano Notarfrancesco lnotarfrancesco@yahoo.com"
"GLMPortIdentifier","This class is a simple data structure to be used for identifying a port by name."
"DAMethodImplementationNode","I'm a tree node representing a method implementation"
"TCopyTest","Tests whether a copied object contains the same elements than its source.Note that the order is not garanteed -- see TEqualityTest for that. "
"BitBlt","I represent a block transfer (BLT) of pixels into a rectangle (destX, destY, width, height) of the destinationForm.  The source of pixels may be a similar rectangle (at sourceX, sourceY) in the sourceForm, or a constant color, currently called halftoneForm.  If both are specified, their pixel values are combined with a logical AND function prior to transfer.  In any case, the pixels from the source are combined with those of the destination by as specified by the combinationRule.The combination rule whose value is 0 through 15 programs the transfer to produce 1 or 0 according to its 4-bit representation as follows:	8:	if source is 0 and destination is 0	4:	if source is 0 and destination is 1	2:	if source is 1 and destination is 0	1:	if source is 1 and destination is 1.At each pixel the corresponding bits of the source and destination pixel values determine one of these conditions;  if the combination rule has a 1 in the corresponding bit position, then the new destination value will be 1, otherwise it will be zero.  Forms may be of different depths, see the comment in class Form.In addition to the original 16 combination rules, this BitBlt supports	16	fails (to simulate paint bits)	17	fails (to simulate erase bits)	18	sourceWord + destinationWord	19	sourceWord - destinationWord	20	rgbAdd: sourceWord with: destinationWord.  Sum of color components	21	rgbSub: sourceWord with: destinationWord.  Difference of color components	22	OLDrgbDiff: sourceWord with: destinationWord.  Sum of abs of differences in components	23	OLDtallyIntoMap: destinationWord.  Tallies pixValues into a colorMap			these old versions don't do bitwise dest clipping.  Use 32 and 33 now.	24	alphaBlend: sourceWord with: destinationWord.  32-bit source and dest only	25	pixPaint: sourceWord with: destinationWord.  Wherever the sourceForm is non-zero, it replaces the destination.  Can be used with a 1-bit source color mapped to (0, FFFFFFFF), and a fillColor to fill the dest with that color wherever the source is 1.	26	pixMask: sourceWord with: destinationWord.  Like pixPaint, but fills with 0.	27	rgbMax: sourceWord with: destinationWord.  Max of each color component.	28	rgbMin: sourceWord with: destinationWord.  Min of each color component.	29	rgbMin: sourceWord bitInvert32 with: destinationWord.  Min with (max-source)	30	alphaBlendConst: sourceWord with: destinationWord.  alpha is an arg. works in 16 bits.	31	alphaPaintConst: sourceWord with: destinationWord.  alpha is an arg. works in 16 bits.	32	rgbDiff: sourceWord with: destinationWord.  Sum of abs of differences in components	33	tallyIntoMap: destinationWord.  Tallies pixValues into a colorMap	34	alphaBlendScaled: srcWord with: dstWord. Alpha blend of scaled srcWord and destWord.The color specified by halftoneForm may be either a Color or a Pattern.   A Color is converted to a pixelValue for the depth of the destinationForm.  If a Pattern, BitBlt will simply interpret its bitmap as an array of Color pixelValues.  BitBlt aligns the first element of this array with the top scanline of the destinationForm, the second with the second, and so on, cycling through the color array as necessary.  Within each scan line the 32-bit value is repeated from left to right across the form.  If the value repeats on pixels boudaries, the effect will be a constant color;  if not, it will produce a halftone that repeats on 32-bit boundaries.Any transfer specified is further clipped by the specified rectangle (clipX, clipY, clipWidth, clipHeight), and also by the bounds of the source and destination forms.	To make a small Form repeat and fill a big form, use an InfiniteForm as the source.	To write on a form and leave with both transparent and opapue areas, use a MaskedForm as the source.Pixels from a source to a destination whose pixels have a different depth are converted based on the optional colorMap.  If colorMap is nil, then conversion to more bits is done by filling the new high-order bits with zero, and conversion to fewer bits is done by truncating the lost high-order bits.  The colorMap, if specified, must be a either word array (ie Bitmap) with 2^n elements, where n is the pixel depth of the source, or a fully specified ColorMap which may contain a lookup table (ie Bitmap) and/or four separate masks and shifts which are applied to the pixels. For every source pixel, BitBlt will first perform masking and shifting and then index the lookup table, and select the corresponding pixelValue and mask it to the destination pixel size before storing.	When blitting from a 32 or 16 bit deep Form to one 8 bits or less, the default is truncation.  This will produce very strange colors, since truncation of the high bits does not produce the nearest encoded color.  Supply a 512 long colorMap, and red, green, and blue will be shifted down to 3 bits each, and mapped.  The message copybits...stdColors will use the best map to the standard colors for destinations of depths 8, 4, 2 and 1.  Two other sized of colorMaps are allowed, 4096 (4 bits per color) and 32786 (five bits per color).	Normal blits between 16 and 32 bit forms truncates or pads the colors automatically to provide the best preservation of colors.	Colors can be remapped at the same depth.  Sometimes a Form is in terms of colors that are not the standard colors for this depth, for example in a GIF file.  Convert the Form to a MaskedForm and send colorMap: the list of colors that the picture is in terms of.  MaskedForm will use the colorMap when copying to the display or another Form. (Note also that a Form can be copied to itself, and transformed in the process, if a non-nil colorMap is supplied.)"
"ManifestCodeImportCommandLineHandlers",""
"TCairoLibrary","a simple trait used for NB callouts to cairo library functions"
"RFC2047MimeConverter","I do quoted printable MIME decoding as specified in RFC 2047 """"MIME Part Three: Message Header Extensions for Non-ASCII Text"". See String>>decodeMimeHeader"
"GTInspectorIndexedNode","I am a variable node for representing the indexed variables of an object. I used the index of a variable as a key. I extract the value from the host object every time #rawValue is called."
"IceBranch","I am an abstract class representing a branch. My history and accessing operations delegate in my current commit. The only exception is checkout operation that checkouts and sets myself as HEAD.Check my superclass and subclasses for more information."
"IceTipAbstractAskCredentialsModel","I implement the basic behavior of all the dialogs to ask / add / edit credentials.There are subclasses to each of the actions and the types of keys."
"ProtocolClient","ProtocolClient is the abstract super class for a variety of network protocol clients.It uses a stream rather than the direct network access so it could also work for streams on serial connections etc.Structure:	stream				stream representing the connection to and from the server	connectInfo			information required for opening a connection	lastResponse			remembers the last response from the server.	progressObservers 	any object understanding #show: can be registered as a progress observer (login, transfer, etc)"
"FillStyle","FillStyle is an abstract base class for fills in the BalloonEngine."
"LGitDiffLineCallback",""
"IceIndexUpdateVisitor",""
"AthensAffineTransform","I support the same protocol than AthensTransform,but in addition I store a plain 2x3 matrix with state accessible at any moment.This is different to AthensTransform because it does not expose its internal storage, because it can be backend specific."
"FTBasicItem","I am an Item of a tree that keep a data and know how to calculate the children of this data for a Fast Tree.Description-------------------------------------------------I am created by a FTTreeDataSource or a FTItem and I hold a data. I can use a childrenBlock from my dataSource to generate the children of my data.Myself I use some FTBasicItems to creale my children.I also know how to generate a button for a FTTreeDataSource if needed. This button can be use to extand or unextand me.Public API and Key Messages-------------------------------------------------- #expand/#unexpand        Allow to expand me or unexpand me and update the Tree..    - #depth        Return my depth in the tree.Create me as as my superclass with an object as data.Example-------------------------------------------------(FTBasicItem data: Object from: (FTTreeDataSource roots: {} children: [ :item | item subclasses ]))		depth: 2;		yourself Internal Representation and Key Implementation Points.-------------------------------------------------    Instance Variables	data:		I am an object hold by the item.	depth:		I am the depth of the Item on the tree.	isExpanded:		I am a Boolean that remember if I am expanded or not.	recentlyChanged: 		I am a boolean that return true fi the item was really recently collapsed/expanded. Don't play with me, I am use to update the selection when we collapse/expand an item.			I calculate my children with a block that is inside my dataSource. I execute this block with my data, the roots items of the dataSource and my level as arguments."
"MD5","This class implements the MD5 128-bit one-way hash function. It uses the MD5Plugin for better performance. Some methods are taken from the original version of MD5NonPrimitive."
"TDictionaryEnumeratingTest","A trait for test purposes"
"RBSmalllintTest",""
"DateAndTimeEpochTest","I represent one of several Sunit test Cases intentended to provide complete coverage  for the Chronology set of classes as part of the external testing. The other Chronology sunit test cases are: DateTestCase DateAndTimeLeapTestCase, DurationTestCase, ScheduleTestCase TimeStampTestCase TimespanDoTestCase,  TimespanDoSpanAYearTestCase,  TimespanTestCase,  YearMonthWeekTestCase.  These tests attempt to exercise all public and private methods.  Except, they do not explicitly depreciated methods. tlkMy fixtures are:aDateAndTime = January 01, 1901 midnight (the start of the Squeak epoch) with localTimeZone = Grenwhich Meridian (local offset = 0 hours)aDuration = 1 day, 2 hours, 3, minutes, 4 seconds and 5 nano seconds.aTimeZone =  'Epoch Test Time Zone', 'ETZ' , offset: 12 hours, 15 minutes. "
"AlphaBlendingCanvas","see ColorMappingCanvas comment."
"ManifestSystemFileRegistry","Provide service registration to handle specific file extension"
"ClyRunTestsFromPackagesCommand","I run all tests from selected packages"
"ZnBivalentWriteStreamTests",""
"VTermDefaultColor","I represent a default color for the terminal.I can return the default color of the background and the default color of the font for this terminal."
"AnnouncementMockB","This is a simple test mock"
"OSUnknownEvent","I am delivered , when driver don't knows how to interpret the event which comes from OS.Useful for debugging."
"Month","I represent a month."
"ConfigurationCommandLineHandlerTest","SUnit tests for class ConfigurationCommandLineHandler"
"ReSearchStringSourceAnchor","This class stores a searchString which will be searched for in the entities source code on demand to find an interval of substring"
"GTSpotterExamples","I provide examples for the class GTSpotter as class side methods."
"AbstractTutorial","Parent class of all Pharo tutorials.To create your own tutorial:- subclass AbstractTutorial- implement a few methods which returns a Lesson instance- implement tutorial which returns a Collection of selectors to the methods you've created.For example, see MockTutorial (minimalist) and PharoySntaxTutorial (default PharoTutorial one).See the PharoTutorial class comment to execute your own tutorial."
"ManifestDeprecated70","This package includes all the methods and classes to be deprecated in Pharo 7.0. This code will be removed in Pharo 8.0"
"ClySwitchToFullHierarchyCommand","I am a command to switch the full browser to full hierarchy mode of selected classes"
"ToggleMenuItemShortcut","I'm a generic shortcut text to be shown in amenu item. I'm generic because there are different strategies to be shown: 1) Macs want to show symbols (like those weird command and option symbols)2) Windows wants to show  them as ""Alt + Shift + Something""3) Linux can live with windows schemeSo, my subclasses implements text and symbol strategies. IMPORTANT:  I'm assuming the two current existing keyText ""disposition"" in system: - the ""old style"": just the letters, like 'o, t' or 'b'- the ""full style"" (which is in part my fault, from some years ago): something like 'cmd+shift+O+T'.I format those imputs into something similar (check #expand: method for better explanation)."
"ZnCookie","I represent an HTTP Cookie, a small piece of data sent by an HTTP web server to an HTTP user-agent client and by the client to the same server afterwards, to remember stateful information across indepedent request/responses.Referenceshttps://en.wikipedia.org/wiki/HTTP_cookiehttps://tools.ietf.org/html/rfc6265Part of Zinc HTTP Components."
"AnimationSettings","Animation settings"
"AnnotationContext","My subclasses describe users of annotations.They should implement single method #describes: with user as argument. User can be any object. It is provided applications during annotation lookup.By default annotations has NullAnnotationContext which do not describe any possible user. So when you query annotations for given user annotations without specified contexts will be skipped.For simplicity there is one simple context implementation the SimpleAnnotationContext which represents the hierarchy of user classes. It is hidden from users and created when class is specified for annotation context:	MyClassAnnotation for: MyUserLook at subclasses comments for details."
"TTutorialTest","Trait for testing tutorials"
"IceDefinition","I represent the definition of an element in an Iceberg repository. My subclasses represent more concretely classes, traits, extensions, methods and files.I am used to easily read and write from a repository working copy or commit. The Filetree or Tonel parser create IceDefinitions that are later on used to browse, generate diffs, or merges.My main API is used to show myself in a diff or merge browser: - contents: textual value of the definition (e.g., the code of a class or a method, the contents of a file) - icon: the preferred icon to show this entity - accept: visitor API - is* to test which of my subclasses you're working withI am also used for comparison to build diffs. See my definitions of equality along my subclasses."
"StreamBugsTest","SUnit test for stream bugs"
"ClySortedQueryResult","I represent sorted query result.I simply apply my #sortFunction for given result items.  To create my instance use #using: method:	ClySortedQueryResult using: ClySortByNameFunction ascending.	My #sortFunction can be a kind of SortFunction or ClySortFunction. First is valid to use in Pharo 7 because it was refactored to be safelly use in caches. SortFunction in old Pharo's do not define equality and hash. So Calypso uses its own ClySortFunction implementation in existing code.Notice, the query result is cached as part of query requiredResult. It adds strong requirement to the values of my sortFunction variable: it should be safe for caches. This condition forbids using blocks in parameters. Internal Representation and Key Implementation Points.    Instance Variables	sortFunction:		<ClySortFunction>"
"FTTableMorph","I'm an implementation of a table, in a not-naive way. I assume I can have many rows, then I do not try to show all of them at once. Instead, I keep a datasource and I demand rows when needed (datasource implements a flyweight to fill the visible rows).I should not be subclasse. An extension of FastTable should happen on a data source an not here. Extend me ONLY if it is impossible to do what you want on the data source.Examples: -------------FTTableMorph new	extent: 200@400;	dataSource: (FTSimpleDataSource elements: (1 to: 10000) );	openInWindow.	You can check better examples in FTExamplesA FastTable have the possibility to be searchable, this is activate by default. You can disable this with the method #disableSearch.But you also have the possibility to make your FastTable filterable with the method #enableFilter. But search and filter cannot be use in the same time."
"ClyMethodCallCountersQueryTest",""
"SystemSettingLauncher","Used to launch a setting"
"AbstractTimeZone","I am an abstract superclass for timezones.See my subclasses for specific implementations.Timezones are used to encapsulate the offset from the Coordinated Univeral Time (UTC) used for proper Date and Time display and manipulations."
"StrikeFontSet","I am something acts like a font out of collection of fonts. First font in me is used as representative font to answer many messages.Examples:- display a font: StrikeFontSet allInstances first fontDisplay - calculate pixels width of a string for a font: StrikeFontSet allInstances first widthOfString: 'Pharo'"
"RBAbstractInstanceVariableTest",""
"IconSetChanged","I'm announced when an IconSet has been changed. "
"ClyMethodWithBreakpointTag","I mark the method that it has breakpoint"
"GTInspectorTagFilter","GTInspectorTagFilter implements a filtering strategy for presentations based on tags.A tag is defined as the parameter of the prama <gtInspectorTag:>. A method can have one or more tags.The filter returns true for a method if that method contains at least a tag selected in the filter. To be taken into account during filtering a tag must be first added to the filter and the selected. Only tags that have been first added can be selected.  If a method does not define any tags the filter threats that method as having a single tag stored in the #defaultTag instance variable. The default defaultTag is #custom. The #basic tag  groups the Raw and Meta presentations. Inspect 'GTInspectorTagFilter new allPragmasWithTag' to view all pragmas creating the tags."
"RBCategoryEnvironment","I am a RBBrowserEnvironment on a set of category names.I containt all entities using this category name.I am more restricted to the exact category name comparedto a package environment.Example, all Morph subclasses in category Morphic-Base-Menus(RBBrowserEnvironment new forClasses: Morph withAllSubclasses) forCategories: {#'Morphic-Base-Menus'}"
"ClyBrowseBreakpointsCommand","I am a command to open browser with methods where halts or breakpoints are installed.I am registered in world toolbar using class side method #worldMenuOn:"
"AthensCCWArcSegment","i represent a circular arc, connecting  previous segment endpoint and my endpoingof given angle, passing in counter-clockwise direction."
"SugsBreakpointSuggestion","This class is an abstrat class for defining breakpoint commands"
"MetacelloMergeMemberSpec",""
"MczInstaller","An installer for Monticello files with the *.mcz extension.    MczInstaller installFileNamed: 'MyKillerApp-Core-Author.1.mcz'"
"GLMBrowserWithoutBlocksExample","self openOn: 42"
"CmdCommandExampleInheritedFromAbstract",""
"AuthorNameRequest","I am used to request a new author name."
"UIThemeDecorator","I decorate a UITheme allowing to override desired properties.See #example on class side."
"ZdcOptimizedSocketStream","I am ZnOptimizedSocketStream.I am a ZdcSimpleSocketStream.I re-implement the critical operations dealing with bulk input and output more efficiently to work with buffer sized chunks, bypassing #next and #nextPut:"
"SycShowMethodVersionCommand","I am a command to show local method version.Local version has not relation to actual source code system. Versions are retrieved form changes file.Internal Representation and Key Implementation Points.    Instance Variables	method:		<CompiledMethod>"
"ZnUserAgentSessionTests",""
"ZnBasicAuthenticator","I am ZnBasicAuthenticator.I help servers handle HTTP Basic Authentication.I implement the required #authenticateRequest:do:I have a credentials dictionary with username->password associations.Part of Zinc HTTP Components."
"MethodBrowser","A MethodBrowser is a simple browser using Spec to display a list of methods and their source codeself example"
"PaginatedMorphTreeMorphTests",""
"GLMTextEditorRequest","I indicate to the renderer to execute a message on the text editor morph that contains the actual text."
"GLMMorphicAccordionRenderer",""
"MenuRegistrationExample","I'm here to show you how to use the menu registration. See class side methods and try it with:----------------(PragmaMenuBuilder pragmaKeyword: 'worldMenuExample' model: nil) menu popUpInWorld----------------"
"IceHistoryCommit","I am a commit optimizing history access. I know a history and can determine if I'm merged asking to my history if HEAD history contains me.All other operations are simply forwarded to my wrapped ice commit."
"ColorMappingCanvas","I'm an abstract class which introduce a filter between a drawing request and the final output, handled by #mapColor:For each potential pixel operation like: source -> op -> outputit introducing a color mapping stage: source -> op -> mapping -> outputThen #mapColor: can be redefined in subclasses to implement more specific behavior. For example:- ShadowDrawingCanvas will replace the rendered color with the color of shadow (if not transparent).- AlphaBlendingCanvas will add or intensify alpha of rendered color.For an easy to understand example see  #drawPolygon:color:borderWidth:borderColor:"
"MetacelloBasicScriptingTestCase",""
"HESendMessage","I represent the sending of a message.I store the selector, the receiver and the arguments.I am used to serialize the Trait compositions. As a trait composition is a Smalltalk expression it is serialized as one or more message send.Each of my elements are HEExportedLiterals, so they can be any literal"
"OSTouchTwoFingersPinchMoveEvent","Two fingers are pinching"
"RBAccessorClassRefactoring","I am a refactoring operation for creating accessors for all variables.Example:Create accessors for all instance variables:RBAccessorClassRefactoring model: RBNamespace new className: 'Morph' .Create accessors for all class instance variables:RBAccessorClassRefactoring model: RBNamespace new className: 'Morph class' .If the class already contains that accessor, I will create another one with a numbered suffix."
"EpUnifiedBrowserPresenter","I'm a Spec model for the main tool to browse Epicea logs.Open with:self open"
"RBPushDownVariableTransformation","Removes this variable from the given class, then adds this variable in all the subclasses of this class.Usage:transformation := (RBPushDownVariableTransformation 		instanceVariable: 'foo1'		class: #RBLintRuleTest)		transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:overriden from RBAddVariableTransformation and RBRemoveVariableAccessorTransformation"
"ShSharedVariablesChangeDetector","I know how to detect a change in the collection of the shared variables (class variables)."
"PSMCPatchOperationWrapper","Wrapper for patch operations"
"GLMMultiValue","GLMMultiValue is helper class that is used in #glamourValue:."
"OSSDL2GLRenderer","My instances implement OSWindowGLRenderer interface using SDL2 library"
"PharoCommonTools","A PharoCommonTools is a ToolRegistry that knows about common tools that may be replaced by other packages. It manages a list of the recently registered tools and provides settings for reregistering to a former registered tool."
"MenuPresenter","I am a simple presenter describing a menu.See AbstractWidgetPresenterI only contains a list of menu groups (MenuGroupPresenter). Each group is separated by a splitter.I provide the following variables and their accessors- addGroup: use the block in parameter to initialize a new group, then add it in my collection.- addMenuGroup: add the group in parameter in my collection.- menuGroups getter of my collection.todo- addAllFromPragma:target:- applyTo: activate the shortcut of the items of my groups.- autoRefresh- buildWithSpecAsPopup- fromSpec:- icon- neglect:- openWithSpecAt:- printOn:- title , addTitle:"
"LGitPackbuilderForeachPayload",""
"LGitExternalEnumerationUInt32","See the comment in NBExternalEnumeration. I am a copy of NBExternalEnumeration with the exception that I inherit from Object, not from SharedPool."
"RubBoundsChanged","I am an abstract announcement relates to text area bounds changing"
"OSWindowGLRenderer","i am abstract OpenGL renderer facade. "
"IceTipRepairCheckoutBranch","I will perform the chechout of an existing branch, but I will remove all changes on image. I'm active when: 	- working copy is detached 	- repository HEAD is detached"
"GTPlayBindingThemer",""
"MCMczInstallerTest",""
"RFLiteralVariableNode","I am used to reference either the MetaObject or the MetaLink (if inlining is turned off).We are using a special kind of LiteralVariable instead of just plain literals so that we do not use non-standard literals. "
"OmSessionStoreNameStrategyTest","An OmSessionStoreNameStrategyTest is a test class for testing the behavior of OmSessionStoreNameStrategy"
"ASTCache","I am a simple cache for AST nodes corresponding to CompiledMethods in the image. The cache is emptied when the image is saved.The cached #ast is for one interesting for speed (that is, in situations where you ask for it often).The other use-case is if you want to annotate the AST and keep that annotation around (till the next image save, but you can subscribe to ASTCacheReset and re-install the AST in the cache after cleaning. (This is used by MetaLinks to make sure they survive image restart).The last thing that it provides is that we do have a quite powerful mapping between bytecode/text/context and the AST. Regardless how you navigate, you get the same object.e.g. even this one works:    [ 1+2 ] sourceNode == thisContext method ast blockNodes first**NOTE** due to the cached ast, Modification of the AST can be a problem.Code that wants to modify the AST without making sure the compiledMethod is in sync later should use #parseTree. "
"GRTemporaryVariableCapitalizationRule","Temporary and argument variable names should start with a lowercase letter."
"CmdAbstractCommandExample",""
"ClyClassHierarchy","My subclasses provide model of different kind of class hierarchies.They define concrete relationship between classes which are used to build hierarchies.The result of build is an instance of ClyClassHierarchyMap which provides dictionary between parent classes and their children.To build map instance use following message: 	map := ClySubclassHierarchy new buildFrom: { Object. Array }.or simply ask class for this:	map := ClySubclassHierarchy buildFrom: { Object. Array }.With hierarchy map you can iterate classes in hierarchical order: 	map doInOrder: [ :class | ].	map doInOrderWithDepth: [ :class :depth | ].And you can ask map for children of class: 	map childrenOf: Object.	Or you can also access the roots: 	map rootsDo: [ :class | ]The children are collected as sorted list which order is defined by #sortFunction.So you can build hierarchies where children are sorted by different criterias. By default they are sorted by class name in ascending order.To instantiate hierarchy with another sort function use following expression:		ClySubclassHierarchy sortedBy: aSortFunction 	And you can build sorted hierarchy using short class side method:	ClySubclassHierarchy buildFrom: Smalltalk allClasses sortedBy: ClySortByNameFunction descending.It will sort children by class name in reversed order.And you can convert any hierarchy to new sorted version: 	newHierarchy := aHierarchy sortedBy: aSortFunction.So subclasses define relationship between classes. They should implement following method:- buildParentMap: aHierarchyMap for: aClasswhere they add every pair parent and aClass to the map. They should do it using following method: 	aHierarchyMap addChild: aClass to: eachParentClassLook at implementors of #buildParentMap:for: for examples.The relationship which defined by each subclass arranges kind of natural order of hierarchy. But it can be inverted.For example natural order of ClySubclassHierarchy will put all common superclasses to the roots of hierarchy.And inverse version will put all leaf subclasses to the roots.I encode flag inverse logic in the variable #inverse. You can create inverse hierarchies with following expression: 	ClySubclassHierarchy inverse.Or you can build inverse hierarchy with short class side methods: 	ClySubclassHierarchy buildInverseFrom: {Object. String}.	ClySubclassHierarchy buildInverseFrom: {Object. String} sortedBy: aSortFunction.You can see in inspector that in first expression the root is String class.And you can convert any hierarchy to the inverted version: 	newHierarchy := aHierarchy inverted.Also I provide converting method to create query result which you can pass to the queries: 	ClyAllClasses as: ClySubclassHierarchy inverse asQueryResult Internal Representation and Key Implementation Points.    Instance Variables	inverse:		<Boolean>	sortFunction:		<SortFunction>"
"ManifestOmbu","Ombu is part of Epicea. It provides simple persistence. By default, Ombu uses STON to write the events when they are announced in the system."
"OldSendsDeprecatedMethodToGlobalRule","Checks for sends of deprecated messages that might be removed in upcoming releases of Pharo."
"WindowsStoreTest","SUnit tests for class WindowsStore"
"HandMorph","The cursor may be thought of as the HandMorph.  The hand's submorphs hold anything being carried by dragging.  There is some minimal support for multiple hands in the same world."
"IcePharoMenuGroup",""
"SDL_Joystick","I represent a handler for a joystick coming from SDL2."
"CmdDragAndDropActivation","I describe how access and execute command using drag and drop UI operation.Add me to commands using:	YourCommand>>yourApplicationDragAndDropActivation		<classAnnotation>		^CmdDragAndDropCommandActivation for: YourAppContextForDrag toDropIn: YourAppContextForDropFirst argument of activation strategy is a context where drap operation can be started. Last argument is a context where command can be executed by drop.Applications which support me should implement few drag and drop methods according to the UI library (Morphic). At drag start a CmdDragPassenger should be created in current application context: 	CmdDragAndDropCommandActivation createDragPassengerInContext:  aToolContext	Then at drop target widget (morph) the drop context should be created. It should be used to ask given passenger about possibility to execute the drop:- aPassenger canBeDroppedInContext: targetToolContext - aPassanger dropInContext: targetToolContex To support all these methods passenger asks the command activator which delegate processing to underlying commands. Commands should define three methods:- canBeExecutedInDropContext: aToolContext - prepareExecutionInDragContext: aToolContext- prepareExecutionInDropContext: aToolContextBy default commands can be executed by any drop context and for preparation they do nothing. For command activation I return new kind of activator CmdDragAndDropCommandActivator which implements logic to execute commands in addition drop context of application. Look at it comment for details.Internal Representation and Key Implementation Points.    Instance Variables	dropContextDefinition:		<CmdContextDefinition>"
"IntegerDigitLogicTest","SUnit test to test digit logic of integers"
"FreeTypeFileInfo","File infos for a FreeType font"
"IceTipCopyCommitishCommand","Command that copies the selected entity short commit ID to the clipboard"
"ClyProjectContentQuery","I return all contents of the project.The actual objects are depends on project implementation. Look at ClyManagedProject for details."
"ZnUnexpectedContentType","ZnUnexpectedContentType is signalled when a different content type (mime type) was expected.I hold the expected and actual content types.Part of Zinc HTTP Components. "
"OmRandomSuffixStrategy","I attach random characters as a suffix to the name (after last _)."
"IceTipGitHubPullRequestListBrowser","Description--------------------I am a spec presenter to show the list of PR available for a remote and informations on them. Internal Representation and Key Implementation Points.--------------------    Instance Variables	details:				<aPresenter>		A presenten showing the details for a PR.	pullRequests:		<anAdaptor>		An adaptor corresponding to a table containing the pull requests to view.	remote:				<aRemote>			The remote we should view the PR of."
"GRUndeclaredVariableRule","You are referencing a variable that is not declared anywhere. There is no temp, instance var, class var, or a global variable that can be bound to by this reference. Most likely you got into this state by writing an entirely correct code, but then the variable was removed."
"GTDebuggerVariablesBrowser","I am a special browser that is used in the first pane of the inspector that is embedded in the debugger. Its main intention is to provide a unified list of variables that come from:- the instance variables of the receiver- the local variables from the context"
"ChunkReadStream","I am a read stream that reads and returns chunks of code. That is, pieces of text separated by!!symbols"
"PreDebugResumeDebugAction","A PreDebugResumeDebugAction adds the ResumeDebugAction to the pre debug window.Instance Variables	preDebugWindow:		<Object>preDebugWindow	- xxxxx"
"SugsNautilusContext","The implementation who asumes that my model it's a nautilus object."
"ClyDeprecatedItemTableDecorator","I decorate deprecated methods in the table with struck out font"
"SystemOrganizer","My instances provide an organization for the classes in the system, just as a ClassOrganizer organizes the messages within a class. The only difference is the methods for fileIn/Out."
"AthensCairoSDLSurface","I'm a cairo surface who renders directly to a SDL2 surface."
"TraitDescription","This class is only kept for compatibility to load extension methods. Will be removed.Check Trait for the new implementation of traits"
"SessionCreationTest","SUnit tests for session creation with SessionManager"
"NaturalLanguageTranslator","A NaturalLanguageTranslator is a dummy translator.The localization framework is found in the gettext package usually overriding this class completely. As an alternative you can register a translator using     NaturalLanguageTranslator current: myTranslatorIf this is done the messages will be dispatched to it"
"CompiledMethodLayout","I am a special layout version for CompiledMethods. Unlike default Object layouts, CompiledMethods define a custom format integer since they mix bytes and pointer types.See CompiledMethod for more details."
"ManifestNewValueHolder","Implementation for a new value holder"
"RBRefactoryTyper","I am a type guesser used by refactoring operations.I try to determine the types used for variables in a class.Refactoring operations are using me to provide a possible list of classes that are affected by a refactoring. For example, for moving or delegating a method implementation to an instance variable, it might be necessary to add this implementation to multiple classes.I analyze message sends to the instance variables and try to guess the type by looking at implementors of that messages. (If a method sends ifTrue:ifFalse: to an instance variable I can guess that the instance variable may be a Boolean object).If I can guess the type to be a collection, I'll try to investigate the types of the possible contained elements as well.You can ask for the guessed type of the variable: typer guessTypeFor: 'variablename'and the contained elements: typer guessTypeFor: '-variablename-'Example usage: | typer |""create and initialize for a class to analyze""typer := (RBRefactoryTyper new runOn: RBMessageNode).""guess types for RBMessageNodes instane var 'arguments' ""typer  guessTypesFor:'arguments'.  ""a Set(SequenceableCollection)""""guess types for objects that may be put  into  'arguments' collection ""typer  guessTypesFor:'-arguments-' ""a Set(RBBlockNode RBMethodNode)""You can print a full report on all results with #printString.(RBRefactoryTyper new runOn: Point ) printString.""'Point	x	<Integer>	y	<Integer>'""There are two class side methods, one for creating an instance and setting the environment used to resolve names - a RBNamespace.And another one for guessing types in a parseTree:RBRefactoryTyper typesFor: 'var' in: (RBParser parseExpression: 'var squared') model: RBNamespace new ""a Set(Number Collection)""(Here, I can guess the types Number and Collections as these are the classes implementing the message #squared)"
"Link","An instance of me is a simple record of a pointer to another Link. I am an abstract class; my concrete subclasses, for example, Process, can be stored in a LinkedList structure."
"DiskFileAttributesTestsResources","DiskFileAttributesTestsResources provides a file with known attributes that can be used to test attribute retrieval in the File System.DiskFileAttributesTestsResources is currently used by FileReferenceAttributeTests.    Instance Variables	afterCreationTime:	The time just after file was created	<DateAndTime>	beforeCreationTime:	The time just before file was created	<DateAndTime>	file:					The name of the file (with known attributes)	<FileReference>    Implementation Points"
"IconListPresenter","An IconListPresenter is a spec presenter for icon list.See AbstractWidgetPresenterself exampleYou can also have a look at ExampleListPresenter >> exampleIconList for another example.I provide the following variables icons and its accessors, it is a block that convert an item in the icon to display near the item.todo- getIconFor:"
"MCMergeBrowser","Browser to merge changes"
"PragmaMenuBuilder","For the impatients, see MenuRegistrationExample class methods and try it with:---------------((PragmaMenuBuilder pragmaKeyword: MenuRegistrationExample pragmaKeyword model: nil) menuEntitled: 'World') popUpInWorld---------------PragmaMenuBuilder is for the dynamic building of menus based on pragmas. A PragmaMenuBuilder instance is the root of a tree of MenuRegistration instances.The basic principle is that each menu sub-tree is specified by a method which is tagged by a specific pragma. Such methods are dynamically retrieved and then evaluated with a MenuRegistration passed as argument (see #retrieveRegistrations). The result is a tree of MenuRegistration which roots are stored in my itemList inst. var.After the tree of MenuRegistration has been built, it is re-organized (re-organization is based on the parent declaration) and is re-ordered (based on the MenuRegistration order indications). Then the tree of MenuRegistration can serve as input for the building of a PluggableMenuSpec. The PluggableMenuSpec is itself used in order to build a MenuMorph with the help of the current ToolBuilder. (see MenuRegistration comment for more informations about how to specify menu entries).The tree of MenuRegistration is built by #buildTree in three steps (1) the  collecting of the MenuRegistration instances (2) the re-organization and (3) the sorting:1) The first step consists in evaluating all pragma methods by passing a builder (a PragmaMenuBuilder instance) as argument. Each pragma method invocation build a sub-tree which root is added to the builder itemList collection. (see #collectRegistrations).As an example, this first step could produce a tree as follow (stored in a PragmaMenuBuilder itemList inst var) :				#Tools						#'Other tool', parentName: #Tools				/	\										|	(#Worspace)	(#browser)						(#'Test runner' )2) The second step consists is re-organizing the tree. A MenuRegistration can be declared with a particular parent name (by sending #parent: to it with a symbol as argument). If the parentName of a MenuRegistration X is the name of another MenuRegistration Z, then it means that X must be placed as a child of Z. This is the goal of this re-arrangement step which moves badly placed nodes at their good place. (see #arrangeRegistrations).With previous example, the second step produces:						#Tools												/		|			\	(#Worspace)	(#browser)		#'Other tool' , parentName: #Tools											|									(#'Test runner')2) The third step consists in sorting the tree according to the order inst. var. value of each MenuRegistration. This is done in two passes: the first pass tries to assign as much order inst. var. as possible (If an item is given with a specific order, then, previous and following items order can be automatically computed - see #assignOrderWithBlock: and #orderAssignBlock). The second pass consists in a smple sort according to a sort block given by #itemSortBlock.Instance Variables	model:		<Object>	pragmaCollector:		<PragmaCollection>	pragmaKeywords:		<Collection of Symbol>	currentRoot: 			<MenuRegistration>model	- Serves as the default target for the menu. Note that a default target can also be declared at menu item levelpragmaKeywords	- The list of pragma keywords used for the declaring of my menu itemspragmaCollector	- The PragmaCollector associated with this builder. When a method declared with the same pragma as my pragmaKeyword is updated/added/removed my menu items are recomputed so that the resulting menu is always in sync with currently declared items.	currentRoot	- the current MenuRegistration in which new items are to be added"
"TDictionaryRemovingTest","A trait for test purposes"
"RubReturnEntered","I am raised when enter is pressed"
"ClySortMethodBySelectorFunction","I sort methods in the way that binary methods will be first in the ascending list."
"IceSshCredentials","I am a container for the credentials needed for connecting to a git repository via ssh/scp."
"ReflectivityExamples","Examples for RF"
"RPackageStringExtensionTest","SUnit tests on string extensions used for packages"
"PharoIssueTest","Unit tests for PharoIssue"
"TAddForIdentityCollectionsTest","A trait for test purposes"
"RubScrolledTextExtraSurface",""
"OCLiteralSet","Holds a unique set of literals.  Literal objects are equal if they are #= plus they are the same class.  This set uses this rule for finding elements.Example:	Set new add: 'anthony'; add: #anthony; size  ""= 1""	LiteralSet new add: 'anthony'; add: #anthony; size  ""= 2"""
"IcePackageLoaded","I announce when a package has been loaded."
"ManifestTextCore","Handling of Text and related text attributes"
"RFNewValueReification","reify newValue"
"IceTipPreviewBrowser","I'm a browser to show a preview of an operation that can be made right after.Tipically, I'm using through my chldren, to do a checkout or merge."
"TestSkip","I mark a test as being skipped."
"GTSpotterStepTest",""
"MCRemoval","A MCRemoval represents the removal of an entity of a given snapshot."
"MetacelloDevelopmentProcess",""
"IceTipDirectoryDataSource",""
"IceGitScpRemote","A remote repository created out of a SCP url, such as 'git@github.com:npasserini/iceberg.git'."
"IceTipRepairProject",""
"LocalRecursionStopper","The LocalRecursionStopper provides an easy way to check if we are in a recursion and execute code just once in a recursion.LocalRecursionStopper during:  aBlock.executes a block just once in a recursion in current process. If aBlock fork new process which call same code then LocalRecursionStopper wil not stop it. That's the difference to RecursionStopper which works globally.A LocalRecursionStopper value is a collection of active methods which are currently called from within LocalRecrusionStopper>>#during: this means that recursion stopper can be used multiple places without one blocking the other"
"SpecStubImageView","Only stub object, no real view is displayed."
"MCWorkingHistoryBrowser","Browser for working history"
"RBAddMethodTransformationTest",""
"PluggableTreeMorph","A pluggable tree morph."
"GLMSmalltalkEditor","GLMSmalltalkEditor is a helper class for Glamour. The only goal for this class is to provide the hook needed to let the morph know when the selection has changed."
"HelpBrowserTest","SUnit tests for the help browser"
"QueryAnnotationsFromClassTests",""
"GTSpotterRecorderSelectedCandidateChangedEvent","A GTSpotterRecorderSelectedCandidateChangedEvent models the action of  selecting an element in the search results."
"TextColor","A TextColor encodes a text color change applicable over a given range of text."
"RBPullUpClassVariableRefactoring","I am a refactoring for moving a class variable up to the superclass."
"ReReplaceNodeCritique","A critique which know which node should be replaced by another one. This critiques are used first of all in rewrite rules."
"ShAbstractInstanceSideClassChangeDetector","I am an special Class change detector, used when we have to include the change in the instance structure."
"OCStoreIntoReadOnlyVariableError","Error when trying to assign to a non writeble Variable.(method arguments). For backward compatibility this error does not signal if the compilation context is not  interactive."
"InputEventLog","Help to debug "
"IceNoModification","I am a no modification in a tree. I am useful to represent a container (that did not change) containing elements that did change. I contain the definition I represent to be able to show it. I delegate the icon to my definition and I know how to calculate a conflict with other operations."
"STONTestUser","STONTestUser is used to support unit tests.Instance Variables	enabled:		<Boolean>	password:	<String>	username:	<String>"
"DAReverseDependentPackageNode","A PDReverseDependentPackageNode is used to display a dependent package in a reverse tree."
"MCPackageManagerTest",""
"ClyAbstractSubclassExample","I am example of abstact class which is subclass of another abstract class.I define new extra abstract methods"
"ClySwitchQueryScopeCommand","I am a command to switch the current scope of the query in the query browser.Currently I support only context menu and toolbar activation where I retrieve available navigation scopes from the browser to allow user select one of them.Internal Representation and Key Implementation Points.    Instance Variables	queryScope:		<ClyScope>"
"IVsAndClassVarNamesConflictTest","SUnit tests to tests conflicts for instance variables and class variable names"
"FLContextCluster","I am a cluster for MethodContexts."
"PersonDataExample","Data object for a grid example"
"ClyFileOutCommand","I am a command to file out given objects.I simply call #fileOut for each of them. Internal Representation and Key Implementation Points.    Instance Variables	codeObjects:		<Colletion of<Object>>"
"MCPatchTest",""
"MetacelloProjectSpecForLoad",""
"MalDisjointSets",""
"IceRepository","I represent an iceberg repository. I am an abstract class, my subclasses will represent concrete repositories such as monticello or git repositories. I define the main API and I have some common methods defined as template methods.! InstantiationCheck my subclasses to know how to instantiate them.! Basic  repository propertiesAll repositories have two main properties: a name and a working copy.  - name is used to identify a repository - the working copy is used to manage the status of all code loaded from the repository. See #IceWorkingCopy! The repository HEADMoreover, every repository has to define a HEAD. The repository HEAD is a reference to our current working commit/branch in the repository.  repository head.The head can be either a branch or a commit. To access the current commit you can ask the head for its commit, or directly the repository for its headCommit (Yes, commits and branches are polymorphic, a commit returns self when asked for its commit).  repository head commit.  repository headCommit.HEAD is an important concept inside iceberg. It is used to calculate if our code is synchronized, if we have commits to fetch and load, and so on...Moreover, please notice that HEAD is a repository property, and it is completely separate from the image's state. The image can have code loaded from commits other than HEAD, and vice-versa. More of it is explained in IceWorkingCopy class comment.! BranchesAn iceberg repository natively  supports branches. To query the branches in the repository you can ask for:  repository localBranches.  repository remoteTrackedBranches.  repository allBranches.Other convenience methods also provide:  repository localBranchNames.  repository remoteBranchNames.Take into account that such methods will return only already fetched branches. If the branch exists in a remote repository, you should need to do a #fetch before being able to see it.Branches can also be queried by name, using the utility methods  repository branchNamed: aName.  repository branchNamed: aName ifAbsent: [ ... ].  repository branchNamed: aName ifPresent: [ ... ].  repository branchNamed: aName ifAbsent: [ ... ] ifPresent: [ ... ].and the variant for remote branches.  repository remoteBranchNamed: aName.  repository remoteBranchNamed: aName ifAbsent: [ ... ].  repository remoteBranchNamed: aName ifPresent: [ ... ].  repository remoteBranchNamed: aName ifAbsent: [ ... ] ifPresent: [ ... ].Branches can be created from a specific commit or, by default, from #headCommit.  repository createBranch: aBranchName.  repository createBranch: aBranchName inCommit: aCommit.Notice that creating a branch will switch to it automatically.The variant #ensureBranch: will create a branch only if a branch with the same name does not exist.  repository ensureBranch: aBranchName.Also, to create a branch tracking a remote branch (that is, that will start from the same commit and follow the evolution of a remote branch), you can use #createBranchTracking: aBranchName.Finally, to switch to an existing branch:  repository switchToBranchNamed: aBranchName.! RemotesRemotes are references to remote repositories. Remotes are used for pulling and pushing commits and branches.Remotes can be added using the #addRemote: message and removed using the remoteRemote: message . However, thou shall be careful, remotes should be created from the class corresponding to the repository. For example, git repositories should use git remotes, and so on. Check IceRemote and its concrete subclasses.  repository addRemote: aRemote.Once remotes are configured, we can configure them as pull remote and push remote. A pull remote is a remote used for pulling commits by default, while a push remote is a remote used for pushing new commits by default.  repository pullRemote: aRemote.  repository pushRemote: aRemote.  repository isPullRemote: aRemote.  repository isPushRemote: aRemote.If pull or push remotes are not configured, they will default to 'origin'. Origin is a well known remote, for which an accessor to the 'origin' remote  is provided through the #origin message.  repository origin.Remotes can be queried with:  repository remotes.  repository remoteNamed: aName.  repository remoteNamed: aName ifAbsent: [ ... ].Moreover, we can query if the current branch has commits to be uploaded using the #outgoingCommits and friends, or if the current branch has commits to be downloaded using the #ingoingCommits and friends.  repository hasIncomingCommits.  repository incomingCommits.  repository hasIncomingCommitsFrom: aRemote.  repository incomingCommitsFrom: aRemote.  repository hasOutgoingCommits.  repository outgoingCommits.  repository hasOutgoingCommitsTo: aRemote.  repository outgoingCommitsTo: aRemote.Finally, we can interact with remotes via the fetch, pull and push operations.Fetch downloads new commits and branches from the specified remote.Pull and push operations delegate to pull and push of the current branch. Check IceLocalBranch.  repository fetch.  repository pull.  repository push.! Committing codeOnce modifications are done, we can commit them to the repository using the commit* messages. The main API for it is #commitWithMessage: that will commit all changes with the given commit.  repository commitWithMessage: 'aMessage in a string'.A second commit message is also available to commit cherry picks:  repository commitCherryPick: aChangesList withMessage: ' a message in a string'.NOTICE that commits can only be done if the following is true: - HEAD is a branch - the working copy reference commit is the same commit as #headCommitIn any other case, commits are forbidden as they may break the repository consistency.! Loading code & Package queryingFrom the repository point of view, only some convenience methods are provided to checkout all code from the current branch, unload all loaded code, know what packages are loaded or modified. Please refer to IceWorkingCopy for a more complete API."
"ClyTraitEnvironmentPlugin","I plug environment with information about traits.I decorate classes that they are traits, or users of traits.I decorate methods that they are defined by trait.And I extend method visibility of inherited method group which provide extra checkbox in the browser to enable/disable visibility of trait methods of selected classes"
"RBSmalllintTestSuperclassObject","A superclass for classes used to test critics."
"TransformWithLayoutMorph","A transform morph that allows the use of a layout policy to arrange submorphs."
"AsciiCharsetTest","Tests for the AsciiCharSet class.  The invariant is that AsciiCharSet is  a subset of Unicode, and therefore all of the methods defined there shouldhave behaviour consisetent with Unicode."
"AthensTextRenderTest","Visual tests for correct rendering of text using Athens"
"TestDelaySemaphoreSchedulerMillisecondTicker","I inherit delay scheduler system tests and run them for the specific combination of...  scheduler DelaySemaphoreScheduler  ticker DelayMillisecondTicker."
"FinderSingleMethodNode","A FinderSingleMethodNode is a node used to display a selector implemented only once in the system"
"STCommandLineHandler","Usage: st [--help] [ --quit ] <FILE>	--help    list this help message	--quit    if specified, the image exits without saving after evaluating FILE	--save    if specified, save the image after evaluating FILE	--no-source if specified, do not write to the .changes file	<FILE>    a file containing valid Pharo expressionsDocumentation:The ST command line handler runs Pharo code stored in a file without quiting.Example:	pharo Pharo.image st code.st		# By default files ending in .st are recognized and evaluated	pharo Pharo.image code.st"
"SDL_RendererInfo","A structure that contains information on the capabilities of a render driver or the current render context.https://wiki.libsdl.org/SDL_RendererInfo"
"ClyCriticalTextSegmentMorph","I am a slight modification of the rubric text segment morph which creates custom menu items for displaying critiques"
"IconListPresenterTest",""
"ClyQueryViewState","I represent the state of particular query view.I keep data source and current selection of view.I am supposed to not keep reference to the result of data source query.So when I am initialized I ask data source for clean copy: 	aQueryView dataSource copyForBrowserStateSnapshot.And I convert current view selection to desired selection and clean it by detaching items from active data source.Look at method #initializeFrom: for details.My instances are created from query views: 	ClyQueryViewState of: aQueryViewOr simply ask 		aQueryView snapshotState	Internal Representation and Key Implementation Points.    Instance Variables	dataSource:		<ClyDataSource>	selection:		<ClyDesiredDataSource>"
"RBCategoryRegexRefactoring","I am a regex refactoring renaming class categories (package names)."
"EpCategoryRemoval","I represent the removal of a category in a package."
"SycExtractMethodCommand","I am a command to extract selected ast node into separate method "
"SpecStubWindowAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"GLMTablePresentation","A GLMTablePresentation shows the given elements within a table.  If the #children block is set then it support a tree-like table where elements can be expanded.Each column of the presetation can have its own tags and its own sorting block.Instance Variables	children:		<Object>	columns:		<Object>	rootsExpanded:		<Object>children	- xxxxxcolumns	- xxxxxrootsExpanded	- xxxxx"
"FreeTypeFontProvider","This is a font provider for true type fonts. You can use it to add TTF files to your image:FreeTypeFontProvider current 	updateFontsFromSystem;	updateAvailableFontFamilies. You can add TTF fonts from a spetial dirrectory:FreeTypeFontProvider current 	updateFromDirectory: './fonts/' asFileReference done: Set new.Then you can use font dialog:	FreeTypeFontSelectorDialogWindow new open.Or set for example set ballon or default font as following:	StandardFonts balloonFont: 	        (LogicalFont familyName: 'Arial'  pointSize: 10). 	StandardFonts defaultFont: 	        (LogicalFont familyName: 'Arial'  pointSize: 10)."
"ClyClassWithoutDeprecatedMethods","I am example class without deprecated methods"
"DAReversePackageNode","A PDReversePackageNode is a node to display a package in the tree during a reverse analysis."
"RubCancelEditRequestedInModel","I am raised when the edits are canceled in the model side"
"IceProjectChange","I represent the fact that the project changed. I'm using during the double-dispatch of diff calculation, so concrete projects can add themselves to the change calculation."
"BIPrettyPrinterContext","I represent a set of settings that the BlueInk prettyprinter uses. I'm useful to set a prettyPrinter. "
"ClyVariableQuery","I am abstract query of all variables from given scope.I only implement method related to the retrieved items type.So my subclasses still should implement main query methods.And I provide extra convertation method to get similar query but from different meta level class scope:		aVariableQuery withMetaLevelScope: ClyInstanceSideScope"
"RPackageRenamed","I am a public announcement sent when a new RPackage is renamed"
"ManifestUIManager","Package for the UI Manager and related classes"
"UnixEnvironment","I am a specialized OSEnvironment version for *nix systems (Linux, OSX).See my superclass to understand my common usage.# Encoding ManagementI provide a variant of the Dictionary-like API that receives an extra argument specifying an encoding.Valid encodings are those specified by the Zinc-Character-Encoding-* packages.The API accepts both encoding objects and symbols which are used to lookup encodings.For example, the following usages are valid:OSEnvironment current at: 'HOME' encoding: #utf8.OSEnvironment current at: 'HOME' encoding: #utf8 asZnCharacterEncoder.OSEnvironment current at: 'HOME' encoding: ZnCharacterEncoder utf8.# Implementation DetailsI try to use a primitive to get/set environment variables, and if it fails or it is not available, I use corresponding ffi calls using byteArrays with encoded strings as argument."
"OCRequestorScope","This class models a scope for the workspace (and the debugger and all other tools).The default scope of the compiler is initialized with a Requestor scope, if the requestor is not nil (see CompilationContext>>scope)The OCRequestorScope will ask the tool (the requestor) for bindings. This will be an association, and as such it will create a OCLiteralVariable.  It will compile the same bytecode as for a global, but it will use the associations hold on by the tool to do so."
"GLMTreeMorphModel","ClassTree new openOn: Collection"
"FLGlobalTraitSerializationTest","I test the serialization of traits as *external* objects, i.e. the traits has to be present in the image at materialization time."
"LGitDiffOptions",""
"ReRefactoringCritique","A critique which has a refactoring needed to solve the issue"
"Stream","I am an abstract class that represents an accessor for a sequence of objects. This sequence is referred to as my ""contents""."
"KMLog","I am a simple log utility that can be enabled by sending the #setDebug and disabled by using #removeDebug. I trace the keymapping events."
"ClyUntaggedClassesQuery","I return all classes without any tag"
"IceTipAddSSHCredentialsModel","I implement the dialog to add SSH credentials."
"ZLibReadStream","A ZLib read stream"
"CompilationContext","The compilationContext holds all information that is needed in the whole compiler chain.requestor <Object> usually a textEditor. This can be used to bind editor variables (typically variables local to a workspace/playground) and to properly write error messages inlined.failBlock <BlockClosure> block with non local return used to abort the compilation (like an exception).noPattern <Boolean> false if compiling a method which has selector and arguments at the beginning (the so-called pattern) and true if compiling something without selector and arguments (such as a DoIt).class <Behavior> the behavior in which the code is compiled into (used to know inst var names & methodClass for example)logged <Boolean> true if the sources will be logged in external logging system (change file, epicea, ...)interactive <Boolean> Interactive mode is typically used in the IDE (showing errors when compiling code inlined,  pop-ups for some errors/warnings, ...), non-interactive mode is used for headless & code loading to compile code by logging into stdout or Transcript but no interaction required by the user.options <Set of Symbols> See optionsDescription method comment class sideenvironment <SystemDictionary> place to look for literal variables (Globals for instance)"
"MenubarItemMorph","Description--------------------I am a specialization of the MenuItemMorph for the Menubar. I adapt the look of the Morph to fit the design of the menubar."
"ClyBanCritiqueRuleCommand","I am a command to ban given critique rule"
"GTNullFilter",""
"VMWindowDriver","This driver using a legacy VM functionality which will be removed in future versions,because it is limited only to a single OS Window, and furthermore, image don't have a direct control over window creation/destruction neither controlling its various attributes and event delivery and handling mechanisms.This driver is used by image, when it detects there's no other more suitable driver(s) available on currently running platform."
"RBMissingSuperSendsRule","Checks that methods that should always contain a super message send, actually contain a super message send. For example, the postCopy method should always contain a ""super postCopy"". The list of methods that should contain super message sends is in #superMessages."
"BalloonLineSimulation","This class is a simulation of the code that's run by the Balloon engine. For debugging purposes only."
"RBPushDownVariableTransformationTest",""
"DeepCopier","DeepCopier does a veryDeepCopy.  It is a complete tree copy using a dictionary.  Any object that is in the tree twice is only copied once.  All references to the object in the copy of the tree will point to the new copy.  See Object|veryDeepCopy which calls (self veryDeepCopyWith: aDeepCopier).When a tree of morphs points at a morph outside of itself, that morph should not be copied.  Use our own kind of weak pointers for the 'potentially outside' morphs.   Default is that any new class will have all of its fields deeply copied.  If a field needs to be weakly copied, define veryDeepInner: and veryDeepFixupWith:.     veryDeepInner: has the loop that actually copies the fields.  If a class defines its own copy of veryDeepInner: (to leave some fields out), then veryDeepFixupWith: will be called on that object at the end.  veryDeepInner: can compute an alternate object to put in a field.  (Object veryDeepCopyWith: discovers which superclasses did not define veryDeepInner:, and very deeply copies the variables defined in those classes).	To decide if a class needs veryDeepInner: and veryDeepFixupWith:, ask this about an instance:  If I duplicate this object, does that mean that I also want to make duplicates of the things it holds onto?  If yes, (i.e. a Paragraph does want a new copy of its Text) then do nothing.  If no, (i.e. an undo command does not want to copy the objects it acts upon), then define veryDeepInner: and veryDeepFixupWith:.	Here is an analysis for the specific case of a morph being held by another morph.  Does field X contain a morph (or a Player whose costume is a morph)?  If not, no action needed.Is the morph in field X already a submorph of the object?  Is it down lower in the submorph tree?	If so, no action needed.Could the morph in field X every appear on the screen (be a submorph of some other morph)?	If not, no action needed.	If it could, you must write the methods veryDeepFixupWith:   and   veryDeepInner:, and in them, refrain from sending veryDeepCopyWith: to the contents of field X.----- Things Ted is still considering -----Rule:  If a morph stores a uniClass class (Player 57) as an object in a field, the new uniClass will not be stored there.   Each uniClass instance does have a new class created for it.  (fix this by putting the old class in references and allow lookup?  Wrong if encounter it before seeing an instance?)Rule: If object A has object C in a field, and A says (^ C) for the copy, but object B has A in a normal field and it gets deepCopied, and A in encountered first, then there will be two copies of C.  (just be aware of it)Dependents are now fixed up.  Suppose a model has a dependent view.  In the DependentFields dictionary, model -> (view ...).  	If only the model is copied, no dependents are created (no one knows about the new model).  	If only the view is copied, it is inserted into DependentFields on the right side.  model -> (view  copiedView ...).  	If both are copied, the new model has the new view as its dependent.	If additional things depend on a model that is copied, the caller must add them to its dependents."
"RubTextSegmentIconBox",""
"ClyHierarchicalSystemItemsTest",""
"IceTipRepositoryTypePanel","I'm a generic repository type panel. I'm used as part of the creation dialog and to edit repository properties."
"LGitCheckoutProgressCallback",""
"GLMMorphPresentation","This presentation offers a means to embed a Morph. It makes sense only for the Morph Renderer."
"GLMExplicitBrowser","A GLMExplicitBrowser is a browser that allows the user to explicitly define the panes and the flow of transmissions between them."
"FFITestEnumeration","An enumeration for test purposes"
"AthensFontChange","A command to change the currently selected font"
"MCDefinitionIndex","I'm a simple container of MCDefinitions which can be added or removed."
"SycFormatSourceCodeCommand","I am a command to format source code in given code editor. Internal Representation and Key Implementation Points.    Instance Variables	sourceCodeEditor:		<Object>"
"HDReport","A Hudson report"
"MOPTestClassB",""
"T2TraitPropagatingSlotChangesTest","Unit test for correct propogation of slot changes for traits"
"NECLocalEntry","I represent a local variable: either a temporary variables, a block temporary or a method arguments. SHOUT ranges objects are used to identify tempvariables and others. In addition tools such as the workspace may turn their bindings into instance of me so that the completion algo can take them into account. "
"RBAddClassVariableRefactoring","I am a refactoring for adding new class variables.My precondition verifies that the variable name is valid, not yet used in the whole hierarchy and not a global name."
"Checksum","I represent the abstact superclass of all checksum algorithms."
"RBRemoveClassVariableTest",""
"RubColumnDisplayer",""
"MetacelloBaselineOfMethodSpec",""
"GLMLabelPresentation",""
"RBRemoveClassChange","I am a class refactoring change for removing a class. On execution, my class will be removed from the system (all globals)."
"MethodChunk","I represent the declaration of a method.  My contents are the source code to import, and the category reader is the object who knows the class, category and timestamp where to install the method.Sending me the message #import makes me install the method into the class."
"DuplicatedSlotName","I am signaled when trying to build a class with a duplicated slot."
"OCVariableSpecialisationTest",""
"MCServerRegistry","Registry for metacello servers"
"GLMCompositePresentation","A composite presentation offers means to control the composition of multiple presentations by providing the arrangement of these presentations."
"MCSnapshotTest",""
"WeakOrderedCollectionTest","A trait for test purposes"
"ZnClientTransactionEvent","ZnClientTransactionEvent is a ZnClientLogEvent that notes the completion of a client side HTTP transaction (request/response).Instance Variables	request: a ZnRequest	requestDuration:	 milliseconds	response:	a ZnResponse	responseDuration: milliseconds	Note that this can be quite large since it includes the entities transferred. See ZnSimplifiedClientTransactionEvent for a more compact representation."
"Slot","I'm a meta-object for accessing a slot in an Object. I define a protocol to read (#read:) and to write (#write:to:) values. For customizing a subclass can override the meta-object-protocol methods. See subclasses for examples. If your subclass holds state, the following must be overridden:- Printing: #definitionString must return the source code string to reconstruct an instance. This will be displayed in the class definition. By default, #definitionString is the printString, so you can also override #printOn: instead.- Equality: #= and #hash must be customized taking account of additional state.Vocabulary:- variable: named accessor for a Slot- Slot: class-side meta-object, mapping of names to values using a MOP to fields- field: space occupied in an object, used to hold values accessed via Slots"
"IceGitHubError","I'm an error that happens when something fails when performing a GitHub action."
"DefaultExecutionEnvironment","I am default execution environment which used when nothing special is installed on process.I am singleton:	DefaultExecutionEnvironment instance	Tools which define specific environments could add polymorphic behaviour to me"
"RubPrimarySelectionUpdatedInModel","I am raised when the selection changes in the model side"
"AbstractMethodConverter","An AbstractMessageConverter is a wrapper used to switch which information to retrieve from a method.This way, you can avoid switch case, you just have to use set the correct filter"
"GLMMorphicPresentationToolbarModel",""
"OCSuperVariable","I model super variables"
"ZipFileConstants","This class defines magic numbers taken from the PKWARE ZIP Application Note [1] approved by ISO/IEC JTC 1/SC 34 N 1621 in July 2011 [2] to be the international normative reference for the zip file format.  A class imports these bindings as 'class variables' by including the following in its class definition:     poolDictionaries: 'ZipFileConstants' There is a single method on the class side to initialise the values. [1] http://www.pkware.com/documents/casestudies/APPNOTE.TXT[2] http://www.itscj.ipsj.or.jp/sc34/open/1621.pdfFollowing are pertinent extracts from the PKWARE ZIP Application Note.... All values are stored in little-endian byte order unless otherwise specified. A. local file header signature     4 bytes  (0x04034b50) C. Data descriptor:            crc-32                          4 bytes            compressed size                 4 bytes            uncompressed size               4 bytes F. central file header signature   4 bytes  (0x02014b50) I. end of central dir signature    4 bytes  (0x06054b50) J.  Explanation of fields:      * version made by (2 bytes)             0 - MS-DOS and OS/2 (FAT / VFAT / FAT32 file systems)             3 - UNIX             1,2,4-20 not implemented      * compression method: (2 bytes)             0 - The file is stored (no compression)             6 - The file is Imploded             8 - The file is Deflated             1-7,9-19,97,98 not implemented       * For Methods 8 and 9 - Deflating             Bit 2  Bit 1               0      0    Normal (-en) compression option was used.              0      1    Maximum (-exx/-ex) compression option was used.               1      0    Fast (-ef) compression option was used.              1      1    Super Fast (-es) compression option was used.                                       * internal file attributes: (2 bytes)             Bits 1 and 2 are reserved for use by PKWARE. The lowest bit of this field indicates, if set, that the file is apparently an ASCII or text file.  If not set, that the file apparently contains binary data. Note the following do not appear in the PKWARE ZIP Application Note.   Should they be defined elsewhere? ""Unix permission bits"" DefaultDirectoryPermissions    := 8r040755. DefaultFilePermissions        := 8r0100666. DirectoryAttrib         := 8r040000. FileAttrib             := 8r0100000. "
"FFIExternalStructureFlatLayout","I represent a flattened layout of a structure. I am use to compute whether a structure is passed in registers or not, and which registers are used for passing the structure."
"OCCompileWithFailureTest","I have tests for the curious capability of Opal to compile code with syntax errors.Instead of raising syntax errors at runtime, they are raised at compile time."
"OSKeyUpEvent","This event is delivered when user releases previously pressed key"
"MetacelloBaselineConstructor","##MetacelloBaselineConstructor**MetacelloBaselineConstructor** extracts the #baseline pragma from a **BaselineOfConfiguration** and produces a **MetacelloVersion**:.```SmalltalkMetacelloBaselineConstructor on: BaselineOfExample```"
"IceMetacelloPharoPlatform","I'm a class to add support for iceberg to metacello."
"SpecLayoutAddColumn","A SpecLayoutAddColumn is an action representing the addition of a column to a layout"
"MetaclassForTraits","I am the metaclass used for traits.I implement all the behavior for the classSide traits."
"IRPushLiteral","Instruction ""pushLiteral: object"""
"RGBWidget","I am a Spec widget  allowing a user to choose a Color by its RGB values and providing a preview.self exampleI am composed of a RGBSliders and an ImagePresenter that display simply a form of the current color.I provide the following methods- color a shortcut color to access the current color of the RGBSliders.- makeNewForm return a fresh copy of the current displayed form.I provide extentForPreview, a point used to define the size of the preview."
"OCKeyedSet","Like Set except a key of every element is used for hashing and searching instead of the element itself.  keyBlock gets the key of an element."
"MethodRecategorized","This announcement will be emitted when:	=> a non-empty protocol is renamed in a class or a trait (using ClassOrganizer >> renameCategory:toBe:). If the protocol does not contain any method, the announcement will not be emitted. Therefore, if we rename a non-empty protocol, both SystemMethodRecategorizedAnnouncement and SystemClassReorganizedAnnouncement will be emitted	=> a method is removed from a category of a class or a trait (using ClassOrganizer >> removeElement:)	=> a method is RE-categorized in a protocol of a trait or a class, using Organizer>>classify:under:.  If the method is classify under its current protocol, the announcement will not be emitted"
"AbstractFontStoredSetting","I am an abstract class and my subclasses are responsible for storing information about a font object. "
"WatchpointWindow","I am a minimal user interface that shows the last entries in the watchpoint history."
"TextAlignmentTest","SUnit tests for class TextAlignment"
"AlertDialogWindow","Message dialog with a warning icon."
"RBNegationCondition","I am a refactoring condition representing a boolean NOT of another condition.I am created by sending the message #not to another condition.Checking this conditions holds true, if my condition is false. "
"DisplayTransform","This class represents a base for generic transformations of 2D points between different coordinate systems (including scaling and rotation). The transformations map objects between one coordinate system and another where it is assumed that a nested hierarchy of transformations can be defined.It is assumed that transformations deal with Integer points. All transformations should return Integer coordinates (even though float points may be passed in as argument).Compositions of transformations MUST work in the following order. A 'global' transformation (the argument in #composedWithGlobal:) is defined as a transformation that takes place between the receiver (the 'local') transformation and any 'global' point computations, whereas a 'local' transformation (e.g., the argument in #composedWithLocal:) takes place between the receiver ('global') and any 'local' points. For the transformation methods this means that combining a global and a local transformation will result in the following order:		globalPointToLocal: globalPoint			""globalPoint -> globalTransform -> localTransform -> locaPoint""			^localTransform globalPointToLocal:				(globalTransform globalPointToLocal: globalPoint)		localPointToGlobal: localPoint			""localPoint -> localTransform -> globalTransform -> globalPoint""			^globalTransform localPointToGlobal:				(localTransform localPointToGlobal: localPoint)"
"ClassAnnotationRegistry","I implement a registry of class annotations.I organize it in two dictionaries:1)  annotationsIt maps annotation class to all instances of this class. Instances are sorted by annotation priority in ascending order. Annotation class is responsible to provide such container: 	ClassAnnotation createContainerForRegistryFor details about annotation priorities look at ClassAnnotation comment.2) annotatedClassesIt maps annotated class to all its annotations. The annotations are managed as a Set.I provide default instance which keeps all class annotations in the system.	ClassAnnotationRegistry default	 It is used by ClassAnnotation query methods and you can access it from it:		ClassAnnotation registryI am subscribed on system changes and reset default instance when related methods or classes are changed.And when user access annotations I rebuild it lazily. Look for details in class side method #ensureSystemSubscription  Internal Representation and Key Implementation Points.    Instance Variables	annotations:		<IdentityDictionary<ClassAnnotation class, SortedCollection<ClassAnnotation>>>	annotatedClasses:		<IdentityDictionary<Class, Set<ClassAnnotation>>>"
"HashTableSizes","HashTableSizes is a helper class, used by hashedCollections to determine sizes for hash tables.Public protocol is all class-side:#goodSizeAtLeast: anInteger   answers a ""good"" integer greater than or equal to the given integer.An integer is not ""good"" as a hash table size if it is any of:* Not prime* Divides 256**k +- a, for small k and a* Close to a power of two* Close to dividing the hashMultiply constantSee Andres Valloud's hashing book, and Knuth TAOCP vol. 3.This class caches a primary table of selected good primes within the positive SmallInteger range. When this table must be rebuilt, it uses an instance to compute the table. Primes are selected to keep the table fairly small, with approximately five entries per power of two. It is ordered, and is binary searched to find the closest good size >= the requested size.This class caches a second table built from the first to support faster direct lookup of primes for requested sizes in the range of 0 to ""self maxSmallSize""."
"ErrorNonInteractive","This error thrown when image runs in non-interactive mode (no user intervention possible nor expected),but application trying to use tools which require user's intervention.For example, in headless image application trying to query a user name, or dialog to confirm with proceeding some action."
"GTSimpleRBTreeBrowser","This is a simple browser that displays the rb tree and previews each node on the source code.Example:self openOn: (self>>#compose) parseTree"
"ClyExpectedFailureMethodGroupProvider","I provide ""expected failures"" method group when test cases include tests marked with <expectedFailure> pragma"
"ListSelectionPresenter","A ListSelectionPresenter is a basic example to show multi selection on listsself example"
"SMTPClientTest","SUnit tests for SMTP client"
"IceTipToolbarDisplayModeLabel","I implement display mode ""just labels"""
"WeakValueDictionary","I am a dictionary holding only weakly on my values. Clients may expect to get a nil value for any object they request."
"MalTopologicalSorting","From wikipedia:A topological sort (sometimes abbreviated topsort or toposort) or topological ordering of a directed graph is a linear ordering of its vertices such that for every directed edge uv from vertex u to vertex v, u comes before v in the ordering. For instance, the vertices of the graph may represent tasks to be performed, and the edges may represent constraints that one task must be performed before another; in this application, a topological ordering is just a valid sequence for the tasks. A topological ordering is possible if and only if the graph has no directed cycles, that is, if it is a directed acyclic graph (DAG). Any DAG has at least one topological ordering, and algorithms are known for constructing a topological ordering of any DAG in linear time."
"OSWindowEventVisitor","i am a abstract visitor for handling events.. serving just to cover complete protocol, which user(s) will need to implement in order to act as an OSWindow event handler."
"FontSet","FontSet provides a mechanism for storing a set of fonts as a class that can be conveniently filedOut, filedIn, and installed as a TextStyle.The most common use is...	Find a font you like.	Use BitFont to convert a bunch of sizes to data files named, eg, LovelyNN.BF	Use FontSet convertFontsNamed: 'Lovely' to produce a FontSet named Lovely.	FileOut that FontSet for later use.	Use Lovely installAsTextStyle to make all sizes available in a TextStyle		named #Lovely in the TextConstants dictionary.	Use ctrl-k in any text pane to select the new Lovely style for that paragraph.	Then use cmd-1 through 5 or cmd-k to set the point-size for any selection."
"NECClassVarTypeGuesserTest",""
"ClyMergedSubclassesAndInheritedTraitsHierarchyTest",""
"RPackageMonticelloSynchronisationTest","SUnit tests for RPackage Monticello synchronization"
"ClyBrowserState","I am a root of subclasses which represent the state of particular kind of browser.I am used as navigation history items.While subclasses can provide additional state they all include following properties: - viewStates, the collection of state of all navigation views, instances of ClyQueryViewState.- selectedTabs, the colletion of selected browser tabs - systemScope, the system scope of the browser My instances are created with browser: 	ClyBrowserState of: aBrowserOr simply ask 		aBrowser snapshotStateDuring initialization I retrieve the browser state in method #retrieveStateFrom:.When history performs undo/redo operation it just applies particular browser state to the browser: 	aBrowserState applyTo: aBrowser byUndo: true	Which calls simple #applyTo:. Extra agrument is required to support properly across window navigation.Navigation history support accors window navigation to be able return back and forward between spawned windows.It requires browser state to be able create browser instances from scratch because when we are trying to move back to original browser it can be already closed and not exists anymore.So subclasses should implement #createBrowser method. It should just return new browser instance without any initialization logic. 	 Internal Representation and Key Implementation Points.    Instance Variables	viewStates:		<Collection of<ClyQueryViewState>>	selectedTabs:		<Collection of<ClyBrowserTool>>	systemScope:		<ClySystemScope>"
"PackageNodeExample","Example for a pakage node"
"ClyDynamicBallonTooltip","I am a hook to get dynamically updatable balloon tooltip.To install me into the morph use following expression:	ClyDynamicBallonTooltip from: ['test string'] installInto: aMorph"
"TextEditorDialogWindow","Multi-line text entry dialog."
"RBReplaceSubtreeTransformationTest",""
"RPackageUnregistered","I am a public announcement sent when a new RPackage is unregistred ( kind  of removed from the system )"
"TOne","I am a trait used for testing."
"ZnDefaultCharacterEncoder","I am ZnDefaultCharacterEncoder.I am a DynamicVariable and a ProcessSpecificVariable.I can be used to modify the default ZnCharacteEncoder on a per process basis, for example:ZnDefaultCharacterEncoder 	value: ZnUTF8Encoder latin1	during: [ ZnClient new get: 'http://zn.stfx.eu/zn/small.html' ]"
"RBBrowserEnvironmentWrapper","I am a wrapper around special browser environment subclasses andthe base RBBrowserEnvironment class. I define common methodsfor my subclasses to act as a full environment.no public use."
"GTEventConsolidate","I consolidate GTEventCollector objects into one or more collectors according to their URL and category. That way we can pack together data, that belongs to the same application (= URL and category) and we can save them together on the server side as one bundle.For the Collaborators Part: - GTEventCollector objects that I consolidate- GTEventRecorder that uses me before packing process.Public API and Key Messages- collectors: set a collection of collectors that should be consolidated- consolidated returns collection of GTEventCollector objects. Internal Representation and Key Implementation Points.    Instance Variables	collectors:		<OrderedCollection>"
"MCCacheRepository","I am a special monticello directory-based repository that is used for the global monticello cache.Most other repositories will first query the default cache repository for existing files before handling the request by themselves. For instance an http repository will first check if the file is in the caceh before doing a ""slow"" download."
"RBAddAssignmentTransformation","I am responsible for adding an assignment statement (variable := anExpression) inside a method. Both variable and expression are passed as arguments separately.Usage: | transformation |transformation := (RBAddAssignmentTransformation				variable: 'variable'				value: '1 asString'				inMethod: #methodBefore				inClass: #RBAddAssignmentTransformationTest)				transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- Checks whether there is a variable in this environment with the given name.Observations about the transformation:- If the variable is already assigned in this method, the transformation will add the new assignment just after it.- Otherwise, the assignment will be positioned as the first statement of the method"
"ClySlotClassDefinitionSwitchMorph","I am a status bar item for class tools to switch between old class definition and new one which is based on slots Internal Representation and Key Implementation Points.    Instance Variables	checkbox:		<CheckboxMorph>"
"GuideTest","Common superclass for tests of guidance through the filesystem"
"SearchMorph","I am a searchfield with a dropdown for the history. It is a minor extension to the EditableDropListMorph managing the search history directly in the morph. Typical use-case:	^ SearchMorph new		model: self;		setIndexSelector: #classSearchAccept:; ""sends the search result to the model""		searchList: self class classSearchList; ""sent on creation to get the initial search list""		yourself		"
"AnnouncementsTutorial","This is a custom help book providing a tutorial for the announcements framework."
"IceTipAddPlaintextCredentialsModel","I implement the dialog to add plaintext credentials."
"ProperlyImplementedClassesTest","A unit test to verify that the classes are properly implemented"
"GLMMorphicAccumulatorRenderer",""
"ClyAllMethodGroup","I includes all methods from concrete meta level of given class.I represented in the browser either with ""instance side"" or ""class side"" names depending on concrete meta level of my method query.I am expanded to inherited method groups for each of trait or class which are inherited by my class scope"
"MorphHandlingMiddleButton","I log when the middle mouse button has been clicked on me, which is useful for testing."
"CoverageDemoTest",""
"CmdCommand","I am a root of first class commands hierarchy. My subclasses should just implement #execute method with all required state which is needed for command execution. Then users can attach various activation strategies to them which provide specific way how to create command instances, how to represent them to user, how initialize their state.Activation strategies annotate command classes as class annotation. Look at ClassAnnotation for details.For example to make YourCommand executable by shortcut you need to add following method to class side of command:	YourCommand class>>yourAppShortcutActivation		<classAnnotation>		^CmdShortcutCommandActivation by: $e meta for: YourAppContext If you want execute command from context menu you need another activator:	YourCommand class>>yourAppMenuActivation		<classAnnotation>		^CmdContextMenuCommandActivation byRootGroupItemFor: YourAppContext Any activation should be created for concrete context of application tool, subclass of CmdToolContext. In examples above it is YourAppContext.To be able to use commands application/tool should provide instance of current context to perform command lookup:	CmdShortcutCommandActivation allAvailableInContext: aToolContext do: blockWithActivationIt enumerate all shortcut activation strategies which are declared for given aToolContext. Found activation can check if command can be executed in given context or not:	registeredActivation canExecuteCommandInContext: aToolContextwhich  delegates question to context and then to command:	aToolContext allowsExecutionOf: command	command canBeExecutedInContext: aToolContextBy default It returns true. But my subclasses can implement it using specific information of given context.It is important that this message is not taken into account in enumeration method. There are cases when users want all commands including the commands which could not be executed in current context. For example in context menu such commands can be disabled and it can be important to show them in special unclickable state. Currently all ""disabled"" commands are skipped during menu building. But it can be configurable in future versions.Next thing to do with found activation is to create new activator instance which is responsible for command execution in given context:	commandActivator := activationStrategy newActivatorFor: aToolContextCommand activator keeps information about activation context and it is able to execute command. It initializes command with the state relevant to the current context:	command readParametersFromContext:  aToolContext By default It is the empty method and usually commands not override it. There is another method to prepare full state of command just before execution (see below). And for simplicity commands usually implement only this.Some tools collect activators to represent commands to user. For example in context menu every item is based on activator. Using command instance it provides label and icon for the menu item. Commands provide default values for them which sometimes depend on internal command state. For such cases commands retrieve this state in advance from the given context instance in the method readParametersFromStandardContext:.Command activator can execute the command:	commandActivator executeCommandIt performs three steps:1) Prepare command for execution.  Command should retrieve all state required for execution from given context. By default activator asks command using:	command prepareFullExecutionInContext: aToolContextDuring preparation commands can ask user for extra data. I provide empty implementation for this method and my subclasses overrides it.Commands can signal CmdCommandAborted to break execution process. For example It happens when user cancel confirmation dialog during command preparation.2) Command execution. All logic is implemented by command in #execute method.3) Applying execution result to given context:	command applyResultInContext: aToolContext Idea is to be able interract with application when command completes. For example if user creates new package from the browser then at the end the browser should  open created package.Commands are supposed to be reusable for different contexts and activators. And these methods should be implemented with that in mind. They should not discover internal structure of contexts.t is possible to override activation methods for specific contexts and send own set of messages to command. For example: 	SpecialContextA>>allowsExecutionOf: aCommand		 ^aCommand canBeExecutedInSpecialContextA: self		SpecialContextA>>prepareFullExecutionOf: aCommand		 aCommand prepareFullExecutionInSpecialContextA: self	SpecialContextA>>applyResultOf: aCommand		 aCommand applyResultInSpecialContextA: selfBy default I can implement these extensions with standard context methods. And only particular subclasses will override them specifically:	CmdCommand>>prepareFullExecutionInSpecialContextA: aSpecialContextA		 self prepareFullExecutionInContext: aSpecialContextA	SomeCommand>>prepareFullExecutionInSpecialContextA: aSpecialContextA 		 ""special logic to prepare command for execution""Besides, specific command activation strategies can require own set of activation methods. For example CmdDragAndDropCommandActivator needs two contexts to prepare command. First context describes the place where drag was started. Last context describes drop target tool.  And for execution command should be prepared in both context. They bring different information and together they are supposed to provide all required data for command execution without extra user requests. Different activation strategies extends me with UI related messages. For example look at context menu activation. It asks me to build menu items:	command fillContextMenu: aMenu using: anActivatorBy default I just create standart item morph and allow subclasses to define default label and icon:	- defaultMenuItemName- setUpIconForMenuItem: aMenuItemMorphBut subclasses can override build method and represent themselves more specifically. For example they can provide menu item with check box. You can see such cases in morph menu.The way how concrete type of activation strategy hook into application is responsibility of application. For example to support shortcuts based on commands application should define specific kmDispatcher for target morphs:	YourAppMorph>>kmDispatcher		^ CmdKMDispatcher attachedTo: selfwith supporting method:	YourAppMorph>>createCommandContext		^YourAppContext for: self		If application wants context menu based on commands then it needs to hook into context menu part of application and ask context menu activation to build menu:	menu := CmdContextMenuCommandActivator buildMenuFor: anAppMorph inContext: aToolContext	In future Commander will be deeply integrated in UI. So many things will work automatically"
"FLSingletonTest","SUnit tests for fuel serialization of singletons"
"IceOperation","I represent a merge operation. I know how to install myself in the system, how to inverse myself and how to show the definitions I'm being applied to. Check my subclasses for more information."
"RBSplitClassTransformationTest",""
"GLMBrickWindowStyle","I'm a style module related to a brik windows and its componenets"
"True","True defines the behavior of its single instance, true -- logical assertion. Notice how the truth-value checks become direct message sends, without the need for explicit testing.Be aware however that most of these methods are not sent as real messages in normal use. Most are inline coded by the compiler as test and jump bytecodes - avoiding the overhead of the full message sends. So simply redefining these methods here will have no effect."
"CommandLinePasswordManager","I provide password management to execute commands through the command line handler. Use public API to define a new password a remove the current one.The password is not be saved in clear. It is hashed using pepper and iterations.The pepper of a hash is a fixed string appended to a password to increase the difficulty of finding the password. Also, we hash multiple times (iterations) to increase the strength of the protection.If you wish to define ""application"" command lines who does not need a password protection, implement the method #requireDeploymentPassword on the class side to return false.Examples of password protection----------------""Enable password protection""CommandLinePasswordManager protectCommandLinesByPasswordWith: 'PharoPassword'""You can also customize the pepper and number of iterations for the hashing of the password.""CommandLinePasswordManager protectCommandLinesByPasswordWith: 'PharoPassword' pepper: 'SomePepper' numberOfHashIterations: 10""Remove password protection""CommandLinePasswordManager removePasswordProtection"
"ClassTagAnnouncement","My classes represent class tags modifications on package"
"RGGlobalDefinition","An RGGlobalDefinition is an abstract superclass for representing classes, global variables and shared pools"
"RBPullUpVariableTransformation","Removes this variable from all the subclasses of a class, then adds this variable in this class. If none of the subclasses define a variable with the given name, this transformation works as a RBAddVariableTransformation.Usage:transformation := (RBPullUpVariableTransformation		instanceVariable: 'result'		class: #RBLintRuleTest)		transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:overriden from RBRemoveVariableTransformation and RBAddVariableAccessorTransformation"
"KoreanEnvironment","This class provides the Korean support.  Unfortunately, we haven't tested this yet.  We did have a working version in previous implementations, but not this new implementation. But as soon as we find somebody who understand the language, probably we can make it work in two days or so, as we have done for Czech support."
"RFSemanticAnalyzer","I add Reflectivity link analysis to the Semantic analyzer.I add #beforeHooks and #afterHooks anotation and make sure to visit them for semantic analysis."
"ManifestFlashbackDecompilerTests","Includes unit tests for Flashback - a Decomplier for Pharo code"
"EpMonitorLogNode","I am a node in a tree of Epicea logs that represent the EpMonitor current log. Read more in my superclass comment."
"IceGitHubPullRequestDetailModel","I'm a spec model to present a detailed view of a Pull Request."
"TGLMScriptingAPITablePresentation","I provide an API for adding table columns having various  properties. I should be used by glamour presentations representing tables. I also provide the hook methods called be the Glamour renderer (see the *callbacks* protocol).Public API and Key Messages--------------------Main methods:- #column: evaluated:		        to add a configured column; there are many other methods that adds columns and configure different properties		- #addColumn: 		                  to directly add a column object		- #hideHeader                                  to hide the header of all columns"
"AnnouncementSubscription","The subscription is a single entry in a SubscriptionRegistry.Several subscriptions by the same object is possible.I know how to make myself weak or strong, only use this capability if it can't be determined at subscribe time though, as it uses become: (for thread-safety), which is quite slow."
"NOCContext","I keep the context of the ocompletion. I do the same as my parent but for this specific algorithm"
"TreeModel","This is deprecated class because the original class TreeModel was renamed to TreePresenter. You should stop to use this class and modify your code to use TreePresenter."
"AnnouncementLogger","Use me to debug and log to the transcript annoncements.AnnouncementLogger new subscribeTo: SystemAnnouncer announcerTo unsubscribeAnnouncementLogger  allInstancesDo: [:each | SystemAnnouncer announcer unsubscribe: each ]"
"MCFileTreeStSnapshotReader","Snapshot reader"
"ClyFFIMethodGroupProviderTest",""
"TextLink","A link in text referring to class and methods. "
"GTDebuggerInspector","This is a specialized inspector that is embedded in  GTDebugger.It is special in two ways:- the first presentation is different in that it shows all variables active in the debugging context- the looking up of presentation ignores the default state presentation because the vertical splitting of state and workspace does not work in the context of the debugger due to space limitations. Instead, the workspace is offered in a separate presentation."
"FTExamples","A list of examples. See class side."
"ClySubclassN1OfClass1FromP1",""
"ReadWriteStream","I represent an accessor for a sequence of objects. My instances can both read and store objects."
"ZnRequestTests",""
"RFThisContextReification","I can be used to pass the context to the meta object"
"RPackagePrequisitesTest","SUnit tests for RPackage prerequisites"
"RFTempRead","I model temp read"
"ClassHierarchyTest","SUnit tests for the class hierarchy"
"ManifestToolTranscript","Package for hosting the tool related part of Transcript"
"EpTCodeChangeVisitor","I am a visitor for EpCodeChange subinstances."
"IceMergeAborted","Attempting to merge arised a conflict so merge was aborted."
"STONReaderError","STONReaderError is the error/exception signalled by STONReader when illegal/incorrect input is seen. "
"RubLipsumWithSegmentsExample","[self openWrapped] timeToRun     [self openNotWrapped] timeToRun "
"EpClassChange","I represent a change in the definition of a class."
"LGitRemoteAutotagOptionTypeEnum",""
"InstanceVariableSlot","I add some special behavior: 	-  I override bytecode generation to generate ivar read and write bytecodes	- I print the definition as #name "
"RBInstanceVariableNode","I am a specialized variable node for instance variables.Just like RBGlobalNode, RBInstanceVariableNodes are only used in a RBMethodNode after we do a semantic analyzing with a proper compilation context to deduce the class for which this variable is an instance variable."
"GTGenericStackDebuggerSmokeTest",""
"FFI_i386","I represent i386 architectures."
"RxsEpsilon","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--This is an empty string.  It terminates some of the recursive constructs."
"GTSpotterHeaderBrick",""
"SDL_ControllerButtonUpEvent","SDL2 library structure representing a game controller button up event data."
"RBSuperSendsNewRule","This rule checks for method that wrongly initialize an object twice. Contrary to other Smalltalk implementations Pharo automatically calls #initiailize on object creation.A warning is raised when the statement self new initialize is found in a method."
"GLMArea",""
"Collection","I am the abstract superclass of all classes that represent a group of elements."
"EpTraitAddition","I represent the creation of a trait."
"RBAddClassChange","I am a refactoring change for a class addition. Executing this change is just like an ordinary class definition by calling on ""my superclass"" (or ProtoObject) subclass:....instancevariable... etc."
"FLHeader","An instance of FLHeader is serialized together with the orignal object graph to serialize. This header is useful to:1) Attach additional state or metadata associated to the graph being serialized.2) Attach pre and post materialization actions"
"OSTouchPinchDetector","I am the abstract class for all the Pinch gesture detectors"
"CmdToolContextStub2",""
"EpMonticelloVersionSave","I represent a Monticello ""Save Version"" operation performed in the system."
"NullAnnotationContext","I represent undefined annotation context which is initialized by default for annotation instances.Annotations with undefined contexts (unspecified context) are never returned from contextual query of annotations.I has singleton #instance on class side which is used by annotations as default context value"
"RFMessageNode","A message node"
"IceTipCreateTagCommand","I an a commander command that will be activated on any commitish or repository and ask the selected item to create a tag on itself."
"MailAddressParser","Parse mail addresses.  The basic syntax is:	addressList := MailAddressParser addressesIn: aStringThis currently only returns the bare addresses, but it could also return a list of the address ""source codes"".  For example, if you give it ""Joe <joe@foo>, <jane>"", it will currently return a list ('joe@foo' 'jane').  It would be nice to also get a list ('Joe <joe@foo>'  '<jane>')."
"TConvertAsSortedTest","A trait for test purposes"
"ClyWatchpointMethodGroupProviderTest",""
"CompiledMethodTest","This is the unit test for the class CompiledMethod. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"OSWindowDropEvent","I am delivered when user drop something into the window (of course, if there's a drag and drop support by underlaying platform)."
"IceProxyMCVersionInfo","I'm a proxy to keep information on pre-loaded packages when repository is not present.This is the case of pharo project, which is distributed without a repository connection, but users may still need to link with it to make contributions."
"GTSimpleMethodsBrowser","This browser is used to browse the class structure of every object in the inspector.Example:self openOn: World"
"TApplyingOnClassSide","Kernel trait for applying on the class side"
"EpLostChangesDetectorTest","An EpLostChangesDetectorTest is a test class for testing the behavior of EpLostChangesDetector"
"ZnUTF8Encoder","I am ZnUTF8Encoder, a concrete subclass of ZnCharacterEncoder.I implement the variable length UTF-8 encoding and decoding of Unicode according to RFC 3629.Wikipedia reference http://en.wikipedia.org/wiki/UTF-8Part of Zinc HTTP Components."
"EpMethodAddition","I represent a addition of a method in a class or a trait."
"SugsWatchpointSuggestion","This class defines AST node menus for watchpoints"
"ClyLongQueryExample",""
"SpecStubMenuItemAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"IceTipToolbarDisplayModeIconAndLabel","I implement display mode ""icons and labels"""
"GLMExamplesBrowser","self new  openOn: GLMBasicExamples"
"MorphTreeMorphSelection","Superclass for selections in a morphic based tree"
"GTSpotterStepAdded",""
"MetacelloAbstractVersionConstructor",""
"LGitOpenFlagEnum",""
"ClyProjectChildItem","I represent the item of project.Concrete project manager plugins are supposed to implement my subclasses to represent concrete types of project items.Subclasses should implement following methods:- items- allPackages- classes- isEmptyInstancees should be creation with project: 	ClyProjectChildItem project: aProject	 Internal Representation and Key Implementation Points.    Instance Variables	project:		<ClyManagedProject>"
"FLReplacementMock",""
"IceTipRepositoryListContext","I'm a context for the project managet tool.I'm to be used with project lists."
"GLMPortUpdater","This is a strategy that populates a portSymbol with the result of evaluating valueBlock."
"TSequencedStructuralEqualityTest","A trait for test purposes"
"SpecWrapper","I am a small wrapper used to encapsulate data created and used during spec interpretation"
"GTInspectorVariableValuePairsTest",""
"EpLogBrowserPresenter","I am a Spec browser for an EpLog.For example, open with:self open"
"MemoryStore","I'm a specific store for memory file system"
"ClyClassComment","I represent class comment.To create my instances use following script: 	ClyClassComment of: Object.	My instances are returned from class comments query.Internal Representation and Key Implementation Points.    Instance Variables	definingClass:		<Class>"
"LazyMorphListMorph","Support for morph lists in PluggableMorphListMorph."
"BitsLayout","I am a specialized layout which does not hold slots but only raw data (bytes or words)."
"ClyMethodSourcesQueryTest",""
"MCPackageLoader","A MCPackageLoader is responsible for loading packages.  It gets used by VersionLoader, so it is eventually responsible for loading everything.Instance Variables	additions:		<Definitions>  Definitions that need to be added	errorDefinitions:		<Object>	obsoletions:		<Object>	provisions:		<Object>	removals:		<Object>	requirements:		<Object>	unloadableDefinitions:		<Object>	methodAdditions  <MethodAdditions> MethodDefinitions corresponding to the Definitions in ""additions"" that have been added so far."
"RubKeystroke","I am raised when a keystroke is done"
"EpApplyPreviewer","I take as input a collection of  EpCodeChange instances and output the equivalent of such changes as if they were applied in current image."
"ManifestMonticello","Includes the Monticello source code control system."
"Year","I represent a year."
"TextMessageLink","A link to a hidden mail message.  Clicking on it allows the message to be viewed or saved to disk."
"MacRomanTextConverter","Text converter for Mac Roman.  An encoding used for the languages originated from Western Europe area."
"GLMPresentation","A GLMPresentation is the abstract class for the hierarchy of presentations. A presentation specifies how the pane (held in the pane instance variable) is going to be displayed. It typically reads at least the #entity port of a pane and populates at least the #selection port.updateActions holds a collection of GLMUpdateAction that are used to update the presentation via announcements.rawSelectionTransmissions holds a collection of transmission whose origins are this presentation's #rawSelection port. Destinations of this transmissions are on the pane. This collection always contains at least one transmission to the pane's #selection port. To transform the values travelling through this transmission use #send:. To add new transmissions, use #send:as:.Because Glamour has a prototype-based design it relies on copying the presentations before installing them in panes (via transmissions). The parentPrototype instance variable keeps track of the presentation from which the current one was copied.It raises:- GLMContextChanged to let the world know that something has changed in the containing pane. This is typically used by the renderer to update the rendering.- GLMPresentationUpdated to let the world know that the presentations wants to be updated because of reasons other than the pane context changed."
"GTMockSpotterTask",""
"IceCypressPropertiesChange",""
"ClyDataSourceItem","I represent item of ClyDataSource.I am created with owner data source and browser item which I wrap:	ClyDataSourceItem of: aDataSource value: aBrowserItemYou can access actual object of browser item:	aDataSourceItem actualObjectYou can control expansion- supportsExpansion- collapse- expand- isExpandedWhen I expand I keep children items in childrenDataSource.Methods to manage position in table: - position. It is position of environment item in owner environment content.- depth. It is depth of environment item in owner environment content.- globalPosition. It is row index in owner data source table.Methods to manage tree structure in table:- parentItem. It is parent data source.- rootParentItem- rootDataSource- childrenItems- childrenCount- childrenItemAt: ownerIndexYou can convert me to selection instance with single item: - asSelectionYou can retrieve item properties:- getProperty: aPropertyClass - getProperty: aPropertyClass ifAbsent: aBlock- hasProperty: aPropertyClass- isMarkedWith: aPropertyTagClass Internal Representation and Key Implementation Points.    Instance Variables	browserItem:		<ClyBrowserItem>	ownerDataSource:		<ClyDataSource>	childrenDataSource:		<ClyDataSource>"
"MetacelloAtomicMonticelloResource",""
"ManifestSystemBasicCommandLineHandler","Package to provide basic command line handling."
"ClyRunTestsFromMethodDataSourceCommand","I am a root of commands hierarchy which supposed to run all method available in particular method data source.My subclasses are used in ClyQueryBrowser to run all tests available in the list. Internal Representation and Key Implementation Points.    Instance Variables	methodDataSource:		<ClyDataSource>"
"GTSpotterHideHints",""
"TextStyle","A textStyle comprises the formatting information for composing and displaying a unit (usually a paragraph) of text.  Typically one makes a copy of a master textStyle (such as TextStyle default), and then that copy may get altered in the process of editing.  Bad things can happen if you do not copy first.Each of my instances consists of...	fontArray		An array of StrikeFonts	fontFamilySize	unused	lineGrid			An integer; default line spacing for paragraphs	baseline			An integer; default baseline (dist from line top to bottom of an 'a')	alignment		An integer; text alignment, see TextStyle alignment:	firstIndent		An integer; indent of first line in pixels	restIndent		An integer; indent of remaining lines in pixels	rightIndent		An integer; indent of right margin rel to section	tabsArray		An array of integers giving tab offsets in pixels	marginTabsArray	An array of margin tabs	leading			An integer giving default vertical line separationFor a concrete example, look at TextStyle default copy inspect"
"LGitBranchIterator",""
"ReExceptionProperty","This property represents exceptions that occured during other properties computation. This way tools can work witout interuptions, but users will be aware the there were some exceptions."
"ZnResourceMetaUtilsTests",""
"CmdWorldMenuContext","I represent a global context of World.My tool is a current World morph instance.Users can use me as context for commands which should be available in world menu or accessible by global shortcut. For example: 	SycOpenBrowserCommand class>>worldMenuActivation		<classAnnotation>		^CmdContextMenuCommandActivation byRootGroupItemOrder: -1 for: CmdWorldMenuContext 			SycOpenBrowserCommand class>>shortcutActivation		<classAnnotation>		^CmdShortcutCommandActivation by: $b meta for: CmdWorldMenuContext "
"ClyQueryBrowserFilterTest",""
"LGitDiffFileCallback",""
"MorphicIconListAdapter","I am the adapter used to bridge an IconListPresenter and a PluggableIconListMorph"
"CallbackForIA32","A CallbackForIA32 is a callback for platforms with x86 processors using the System V ABI."
"Integer","I am a common abstract superclass for all Integer implementations. My implementation subclasses are SmallInteger, LargePositiveInteger, and LargeNegativeInteger.	Integer division consists of:	/	exact division, answers a fraction if result is not a whole integer	//	answers an Integer, rounded towards negative infinity	\\	is modulo rounded towards negative infinity	quo: truncated division, rounded towards zero"
"MorphGotFocus","I'm an announcement raised when a morph gets keyboard focus. "
"PluggableButtonMorphExample","I keep some examples on how to use a PluggableButtonMorph"
"RectangleTest","SUnit tests for class Rectangle"
"SpecStubDropListAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"AbstractResizerMorph","I am the superclass of a hierarchy of morph specialized in allowing the user to resize or rearrange windows and panes."
"GLMTestAnnouncement2",""
"ProceedDialogWindow","Yes/no dialog. Test result as to whether the dialog is cancelled (no) or not (yes)."
"ManifestFileSystemCore","This package contains the core of Pharo's FileSystem manager. It offers an expressive and elegant object-oriented design. A documentation of this library is available in the Deep Into Pharo book, «Chapter 3: Files with FileSystem»."
"ClassWithAnnotationsDefinedForUserClass",""
"MCThreeWayMerger","A MCThreeWayMerger is more advanced merge operation.Operations are subclasses of MCPatchOperation:  addition (MCAddition), modification of an entity (MCModification ) and removal (MCRemoval)."
"ClyVariable","I represent variables of class with explicit information about defining class.I am always created on some actual variable instance like Slot or ClassVariable:	ClyVariable on: aSlot definedIn: aClassMy subclasses implement three methods:- isAccessibleFrom: aClass- isReadIn: aMethod- isWrittenIn: aMethodInternal Representation and Key Implementation Points.    Instance Variables	actualVariable:		<Slot, ClassVariable>	declaringClass:		<Class>"
"ManifestTranscript","Primary package for Transcript related implementation"
"GTSpotterDiveInElement",""
"RubCharacterScanner","I scan characters"
"SugsFindImplementors","I know how to find implementors for a message"
"OSTouchPunctualGestureDetector","I am an abstract class for gestures which sends events that are puntuals"
"SpecStubDiffAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"EpBehaviorNameChange","I represent a rename of a class or a trait."
"Latin2Environment","This class provides the support for the languages in 'Latin-2' category.  Although we could have different language environments for different languages in the category, so far nobody seriously needed it.  I (Yoshiki) don't have good knowledge in these language, so when Pavel Krivanek volunteered to implement the detail, it was a good test to see how flexible my m17n framework was.  There are a few glitches, but with several email conversations over a few days, we managed to make it work relatively painlessly.  I thought this went well.  There seem that some source of headache, as Windows doesn't exactly use Latin-2 encoded characters, but a little modified version called 'code page 1250'.  Similar to Japanese support, the encode interpreters are swapped based on the type of platform it is running on."
"FullBlockClosure","A FullBlockClosure is a closure that can be independent of any outerContext if desired.  It has its own method (currently reusing the startpc inst var) and its own receiver.  outerContext can be either a MethodContext/Context or nil.Instance Variables	outerContext 	<Context>	(startpc) compiledBlock <CompiledBlock> for compatibility, this is startpc.	numArgs 		<SmallInteger>	receiver:		<Object>"
"GLMMenuInvoked",""
"SwappedColorDiffPresenter",""
"ReLaterInvocationCritique","A critic which represents that the method is missing some required messages after the one in questiong"
"ThreeWayComparisonTest","Unit test for three way comparision"
"IceTipRepositoryCommand","I'm a the abstract superclass of commands that act on repositories. "
"MonthTest","This is the unit test for the class Month."
"WorldModel","This is deprecated class because the original class WorldModel was renamed to WorldPresenter. You should stop to use this class and modify your code to use WorldPresenter."
"ClySortByDefiningClassFunction","I sort objects in ascending order using the name of their defining class"
"ClyBrowserQueryResult","I am a root of hierarchy of query result classes which represent retrieved items as ClyBrowserItem instances.My subclasses represent items in browser compatible form which includes information about:- position inside internal result items- depth inside internal result hierarchy  - extendable properties of actual underlying items  I lazely compute properties of items when they are requested by user. I just ask items to prepare themselves:	item prepareIn: environmentAnd depending on actual item type the ClyBrowserItem delegates preparation to every plugin in the environment using appropriate method. For example:	anEnvironmentPlugin decorateBrowserItem: aBrowserItem ofMethod: aBrowserItem actualObjectAnd plugin decorates given item with appropriate properties.So I override all query methods to prepare found items. And in addition I implement new ones: - findItemsSimilatTo: otherBrowserItems It finds all items which are similar to given items collection. For comparison I use #isSimilarTo: method.-findItemsWith: actualObjects It returnes items which represent actualObjects.	Result will be in same order as given actualObjects array. For the missing items there will be nil in the result array.Also I implement rawItems methods by returning actual unwrapped objects"
"LGitDiffBinaryCallback",""
"HColorSelectorMorph","ColorComponentSelector showing a hue rainbow palette."
"GoferConstraintReference","A GoferPackageReference refers to the latest version of a Monticello package satisfying an additional constraint."
"FFICallbackArgumentReader","I am an abstract class that is responsible for extracting the arguments of a callback.The callbacks provides the arguments in different forms depending of the architecture.Each of my subclasses implements special behavior for the given architectures.I have the common behavior for all the architectures.Basically, I am a stateful object that is used during the process of extraction.I am created with a callback and a callback context.A new instance of myself is created in each callback invocation, and it should not be reused.From the callback I extract the type of return of the callback and the type of the parameters.I am used in the method FFICallback >> #argumentsFor: stackPointer context: callbackContext.Each of the architectures is able to create the correct subclass of me.My users just use the #extractArguments method and then access teh arguments through #arguments.In the extractArguments, I take the arguments from the FFICallback and send my message extractNext: with the type of the arguments.The #extractNext: method checks if the type represents a pointer or a value type. If it is a pointer the message #extractPointerOfType: is used. If it is a value,there is a double dispatch with the type. The message #extractFromCallbackOn: is sent to the type.Then the type use one of the following methods to indicate its type: #extractCharacterType#extractDouble#extractFloat#extractIntegerType #extractExternalString: #extractStructType:Each of this methods calculates the base address and the correct offset to extract the value or the pointer. For this calculation the messages #nextBaseAddressFor: aType and #nextBaseAddressForStructure: aStructType are used.My base implementation extracts all the parameters from the stack. So the base address is always the stack pointer and the offset is updated according to the type.Once the base address is opteined, the type objects is used with the message #handle:at: to get the value from the stack.These methods all modify the collection of extracted elements.Note: When a callback should return a struct by copy, the caller function allocates the returning struct. The pointer to this struct is stored in a new first parameter to the callback. This hidden parameter is extracted in the #initialize if it is required.The callback can access to the pointer through the returnValueHolder instance variable."
"KMFactory","I am a class used to access some of the main classes of Keymapping. See my class side to have an idea of what can I give you."
"GLMBrickThemerModule",""
"GTMockSpotter",""
"EncoderForV3","I add behaviour to Encoder to size and emit bytecodes for the Squeak V3.x VM bytecode set, a close variant of the original Smalltalk-80 bytecode set defined in the Blue Book.Bytecode set specification:	0-15 		0000iiii 	Push Receiver Variable #iiii	16-31 		0001iiii 	Push Temporary Location #iiii	32-63 		001iiiii 		Push Literal Constant #iiiii	64-95 		010iiiii 		Push Literal Variable #iiiii	96-103 	01100iii 	Pop and Store Receiver Variable #iii	104-111 	01101iii 	Pop and Store Temporary Location #iii	112-119 	01110iii 	Push (receiver, true, false, nil, -1, 0, 1, 2) [iii]	120-123 	011110ii 	Return (receiver, true, false, nil) [ii] From Message	124-125 	0111110i 	Return Stack Top From (Message, Block) [i]	(126-127 unassigned)	128 		10000000 jjkkkkkk 	Push (Receiver Variable, Temporary Location, Literal Constant, Literal Variable) [jj] #kkkkkk	129 		10000001 jjkkkkkk 	Store (Receiver Variable, Temporary Location, Illegal, Literal Variable) [jj] #kkkkkk	130 		10000010 jjkkkkkk 	Pop and Store (Receiver Variable, Temporary Location, Illegal, Literal Variable) [jj] #kkkkkk	131 		10000011 jjjkkkkk 	Send Literal Selector #kkkkk With jjj Arguments	132 		10000100 iiijjjjj kkkkkkkk 	(Send, Send Super, Push Receiver Variable, Push Literal Constant, Push Literal Variable, Store Receiver Variable, Store-Pop Receiver Variable, Store Literal Variable)[iii] #kkkkkkkk jjjjj (for sends jjjjj = numArgs)	133 		10000011 jjjkkkkk 	Send Literal Selector #kkkkk To Superclass With jjj Arguments	134 		10000011 jjjkkkkk 	Send Literal Selector #kkkkk With jjj Arguments	135 		10000111 	Pop Stack Top	136 		10001000 	Duplicate Stack Top	137 		10001001 	Push Active Context	138   10001010 jkkkkkkk		Push (Array new: kkkkkkk) (j = 0)								or	Pop kkkkkkk elements into: (Array new: kkkkkkk) (j = 1)	139   10001011 kkkkkkkk jjjjjjjj 	Invoke primitive number jjjjjjjjkkkkkkkk	140   10001100 kkkkkkkk jjjjjjjj 	Push Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	141   10001101 kkkkkkkk jjjjjjjj 	Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	142   10001110 kkkkkkkk jjjjjjjj 	Pop and Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	143   10001111 llllkkkk jjjjjjjj iiiiiiii	Push Closure Num Copied llll Num Args kkkk BlockSize jjjjjjjjiiiiiiii	144-151 	10010iii 		Jump iii + 1 (i.e., 1 through 8)	152-159 	10011iii 		Pop and Jump 0n False iii +1 (i.e., 1 through 8)	160-167 	10100iii jjjjjjjj 	Jump(iii - 4) *256+jjjjjjjj	168-171 	101010ii jjjjjjjj 	Pop and Jump On True ii *256+jjjjjjjj	172-175 	101011ii jjjjjjjj 	Pop and Jump On False ii *256+jjjjjjjj	176-191 	1011iiii 		Send Arithmetic Message #iiii	192-207 	1100iiii 		Send Special Message #iiii	208-223 	1101iiii 		Send Literal Selector #iiii With No Arguments	224-239 	1110iiii 		Send Literal Selector #iiii With 1 Argument	240-255 	1111iiii 		Send Literal Selector #iiii With 2 Arguments"
"IceTipAddRemoteDialog","I'm a dialog to add remotes to a repository."
"FFICalloutMethodBuilderTest","Tests for FFICalloutMethodBuilder"
"ReCritiqueAutofixed","Event of a critic being automatically fixed by entity transformation"
"MCConfiguration","An MCConfiguration specifies the configuration of a set of related Monticello packages. It maintains an ordered list of package versions and a list of repositories in which the packages may be found.An MCConfiguration may be filed out for storage as an array specification, and new instances can be created from a stored array specification."
"ClyBrowserItemContext","I represent any browser context of the selected items which belongs to the given environment scope class.I was introduced to activate browser commands and tools in the context of concrete type of selected items. It avoids duplication of annotaions for every browser type. So you can annotated command in context of ClyMethodScope. And it will be available in all browser which shows methods.You can use the scope class directly as context in browser annotations:	ClyRenameMessageCommand class>>shortcutActivation		^CmdShortcutCommandActivation by: $r meta for: ClyMethodScopeInternal Representation and Key Implementation Points.    Instance Variables	scopeClass:		<ClyEnvironmentScope class>"
"PostorderGuide","I traverse the filesystem in depth-first post order. Given this hierarchy:alpha	beta	gammadelta	epsilonI would visit the nodes in the following order:  beta, gamma, alpha, epsilon, delta.I use my work instance variable as a stack. I push messages that cause nodes to be traversed or visited, and execute them in reverse order."
"LinkInstallerTests",""
"GTSpotterCandidateLink",""
"ClyDeprecatedMethodGroupProvider","I provide ""deprecated"" method groups when given classes define them"
"JPEGReadWriter","I am JPEGReadWriter.I am a concrete subclass of ImageReadWriter.I implement the JPEG image format.  https://en.wikipedia.org/wiki/JPEGNOTE: I only implement reading, not writing, see PluginBasedJPEGReadWriter for that.I am a subclass of ImageReadWriter that understands JFIF file streams, and can decode JPEG images.This code is based upon the Independent Joint Photographic Experts Group (IJPEG) software, originally written in C by Tom Lane, Philip Gladstone, Luis Ortiz, Jim Boucher, Lee Crocker, Julian Minguillon, George Phillips, Davide Rossi, Ge' Weijers, and other members of the Independent JPEG Group."
"Base64MimeConverterTest","This is the unit test for the class Base64MimeConverter. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"ShouldBeImplemented","I am ShouldBeImplemented, an exception signaled when some method should have been implemented but was not.This is more like a placeholder during development."
"WeekTest","SUnit tests for weeks"
"GLMDebugSelection","I am event indicating to the renderer to debug the currently selected text."
"UTF8InvalidText","UTF8InvalidText"
"LGitCredentialsSSHAgent","I'm a set of credentials who feeds from the ssh-agent client."
"GTEventDeliveryTest","A GTEventDeliveryTest is a test class for testing the behavior of GTEventDelivery"
"ClyMethodChange","I represent all possible changes with method.I am used to subscribe with single subscription to any changes related to methods.So you can write code like this: 	SystemAnnouncer uniqueInstance when: (ClyMethodChange of: MyClass >> #someMethod) do: [ :ann | ann logCr ].	I provide more general subscription logic than subscribing on base MethodAnnouncement class. Many other events can be also related to method changes like renaming package or running test. They are not covered by MethodAnnouncement hierarchy.I reuse logic of queries how they detect that their result is affected by system changes: 		ClyMethodChange>>handlesAnnouncement: anAnnouncement  		^anAnnouncement affectsMethod: affectedMethod	Also I provide class side method to get AnnouncementSet representing multiple method changes: 	ClyMethodChange ofAll: { MyClass >> #someMethod. MyClass >> #someMethod2 }.I am used by method editor tools to be updated when editing method is changed.	Internal Representation and Key Implementation Points.    Instance Variables	affectedMethod:		<CompiledMethod>"
"DebugActionAboutToExecute","A DebugActionAboutToExecute is an event send to the debugger before a debugging action is executed."
"ReflectiveMethod","I am a method, but not a compiled method storing bytecode, but a high-level model of a method referencing the AST.to be compatible to CompiledMethod, I forward sends to a compiled method of myself.When I am installed in a class, #run:with:in: will compile a new compiledMethod and install it. This compiledMethod has a reference to me. We form a ""twin"" were we reference each other and either can be installed.call #invalidate to force the installation of the ReflectiveMethod, and therefore code generation on the next execution."
"IceTipRevertChangeCommand","I'm a command to install a chunk of code from a commit (shown in a diff) into the image. ""chunk"" can be a package, class or single method."
"ClyAddOnceBreakpointCommand","I am a command to add once breakpoint into particular source node."
"MCFilteredVersionSorter","Sort filtered versions "
"GLMPaneSelected","A pane was selected"
"TextFontChangeTest","SUnit tests for class TextFontChange"
"GLMPagerScrollBrick",""
"IRPushLiteralVariable","push literal variable"
"Cubic","I am a segment between to points. In the form of a cubic polynomial that can be evaluated between 0..1 to obtain the end points and intermediate values."
"ShClassInstallerTest",""
"IceRemoval","I am a removal in a tree. I contain the definition I'm removing. I know what is the icon for removal and how to calculate a conflict with other operations."
"TabState","I represent the current state of a tab.This class is abstract so have a look at my subclasses to have a better overview.I have tree responsibilities:	- influence the rendering (color, border)	- point out if the state changement asked on my tab is relevant (trying to enable an enabled tab by example)	- provide the next state for each change (disable, enable, selected)"
"ListItemWrapper","Contributed by Bob Arning as part of the ObjectExplorer package."
"SycSourceCodeCommand","I am a base class for commands which perform operations with particular ast-node of given method.  Internal Representation and Key Implementation Points.    Instance Variables	method:		<CompiledMethod>	sourceNode:		<RBProgramNode>"
"DAPackageTreeModel","A PDPackageTreeModel is an abstract class. It's a the superclass of the two tree model vizualisations (package dependency and cycle detection)."
"ClyUndeclaredMethodGroupProvider","I provide ""undeclared"" method group when classes include any method which uses undeclared variable"
"WorldState","The state of a Morphic world.  (This needs some serious commenting!!)The MinCycleLapse variable holds the minimum amount of time that a morphic cycle is allowed to take.  If a cycle takes less than this, then interCyclePause: will wait until the full time has been used up."
"LGitOdb",""
"Clipboard","The Clipboard class is the abstract superclass for the concrete platform specific clipboard. The legacy clipboard support using the VM supplied primitives is implemented by Clipboard/ExternalClipboard.The Clipboard implements a basic buffering scheme for text. The currently selected text is also exported to the OS so that text can be copied from and to other applications. Commonly only a single instance is used (the default clipboard) but applications are free to use other than the default clipboard if necessary."
"DosTimestampTest","SUnit tests for class  DosTimeStamp"
"FLIndexStreamTest","SUnit tests for index streams"
"LGitIndex",""
"MetacelloMCBaselineProject","The **MetacelloMCBaselineProject**  is a wrapper for the **BaselineOf** version specification for file-based repositories.There is a single version in a **MetacelloMCBaselineProject**, named *'baseline'*.A typical **BaselineOf** is specification:```Smalltalkbaseline: spec    <baseline>    spec        package: 'External-Core';        package: 'External-Tests' with: [ spec requires: 'External-Core' ];        yourself.    spec        group: 'Core' with: #('External-Core');        group: 'default' with: #('Core');        group: 'Tests' with: #('External-Tests');        yourself```The `<baseline>` pragma marks the method containing the baseline specification."
"GLMPagerPreviewUpdate",""
"DAPackageDependencyWrapper","Wrapper for dependent package (use in TreePresenter)"
"ClyUnimplementedMethodsQueryTest",""
"Trait3",""
"GLMPagerScrollPositionChanged",""
"MetacelloMemberSpec",""
"JobProgressMorph","I combine a progress title and a JobPorgressBarMorph to a visual representation of a Job.Usually I am contained in the global instance of the SystemProgressMorph"
"GLMPharoMethodPresentation","I provide support for displaying a Smalltalk method.self pharoMethodPresentationExample"
"GTEventMultiBundleFactoryTest","A GTEventMultiBundleFactoryTest is a test class for testing the behavior of GTEventMultiBundleFactory"
"CmdMenuGroupExample2",""
"PharoBootstrapRuleTest",""
"RBIdentifierToken","RBIdentifierToken is the first class representation of an identifier token (e.g. Class)"
"ClyCriticMethodGroupProviderTest",""
"IceTipAnnouncement","I'm a general announcement for Tip UI events.(the announcements happened here are just for UI consumption)"
"TextStyleAsFontFamilyMember","TextStyleAsFont Family members"
"GTSpotterBlockIterator",""
"NNavDirectionFirstChild","I navigate throw the childs picking allways the firs one"
"MorphTreeNodeModel","I wrap an item to be displayed in a TreeMorph, so I can answer content and representation in a polymorphic way. My hierarchy usually follows TreeMorphModel one."
"LGitDiffBinaryFile","/** The contents of one of the files in a binary diff. */"
"FLPositive32SmallIntegerCluster","unsigned, 32-bit integer"
"SpecDemoTextInputPage","Demo page for SpecDemoTextInputPresenter"
"AbstractMethodReferenceConverter","Abstract wrapper for method references"
"FLPluggableSubstitutionTest","SUnit tests for fuels pluggable substitutions"
"RelativePath","I represent a relative path (a position starting from Path workingDirectory)"
"RBProgramNode","RBProgramNode is an abstract class that represents an abstract syntax tree node in a Smalltalk program.Subclasses must implement the following messages:	accessing		start		stop	visitor		acceptVisitor:	testing		isFaultyThe #start and #stop methods are used to find the source that corresponds to this node. ""source copyFrom: self start to: self stop"" should return the source for this node.The #acceptVisitor: method is used by RBProgramNodeVisitors (the visitor pattern). This will also require updating all the RBProgramNodeVisitors so that they know of the new node.The #isFaulty method is used to distinguish between valid nodes and nodes created from invalid source Smalltalk code. For example, code parsed with RBParsers #parseFaultyExpression: or #parseFaultyMethod:.Subclasses might also want to redefine match:inContext: and copyInContext: to do parse tree searching and replacing.Subclasses that contain other nodes should override equalTo:withMapping: to compare nodes while ignoring renaming temporary variables, and children that returns a collection of our children nodes.Instance Variables:	properties	<Dictionary of: Symbol -> Object>	A set of properties set to this node, for example every node can have the Property #comment to attach the method comment or the comment of the code line this node represents. Other classes or tools may add more type of properties, for example, the reflectivity support adds properties for managing Metalinks. 	parent	<RBProgramNode>	the node we're contained inClass Variables:	FormatterClass	<Behavior>	the formatter class that is used when we are formatted"
"FLBadVersion","I represent an error produced during materialization when the serialized version doesn't match the materializer's version (accessible via FLMaterializer>>version). A version is encoded in 16 bits and is enconded heading the serialized stream, after the signature."
"MorphicShortcutHandler","I am a null shortcut handler for morphic. I register myself as a tool to be replaced by somebody else who really wants to handle shortcuts."
"AthensBalloonPaint","i am an abstract root of many balloon-specific paints"
"IRPrimitive","I represent a primitive.  I am more than just a number if I am a named primitive.Structure: num	<Integer>	Primitive number. spec	<Object>		Stored in first literal when num is 117 or 120."
"TutorialPlayerTestWithMockTutorial","SUnit tests for tutorial player"
"SycInspectVariableCommand","I am a command to inspect given variable.For live variables lile globals or class variables I open inspector on variable value.Also I open inspector on instance variable of class side because they also have live values.For instance side instance variable I inspect slot definition instance."
"GLMBrickCheckBoxStyle","I'm a style module related to a checkbox and its componenets"
"ZnEntityReaderTests",""
"SHPreferences","Preferences for Shout"
"PharoBootstrapAnalyzerStubWithNoNewDependency","Stub class to do not compute dependencies of the given package butrather give pre-established responses back.#dependenciesOf will return  packages already in the bootsrap layer."
"MorphTreeMorph","A MorphTreeMorph is a list and a tree in one easily customizable widget. A list or tree is made of nodes. Each node can be made of whatever object . This allows the use of morphs inside the tree. A MorphTreeMorph works with a model which must use the TMorphTreeModel trait. MorphTreeModel uses it and can serves  as the model or as a superclass for a specific tree model.Customizable columns:Several customizable columns can be viewed. Columns are separated by resizers used in order to increase or decrease the columns width with the mouse.A MorphTreeMorph can have a top header composed of buttons, one button per column. Such a button can have an icon and/or a title and may run some action when clicked on (a typical action is the ordering of the list). You can also allow column drag-and-drop so that a column  can be dynamically moved with a simple drop.See this in action with following example:-----------ClassListExample new openOn: Collection-----------By default, the last column is not bounded, so that no resizer is added for it and threre exists no unused space between the last scroller and the right side of the whole tree. But, in some case one want to have a resizer also for the last column. This is the case for data grid as an example This is possible by sending #makeLastColumnBounded to the MorphTreeMorph.Try it with:-----------SimpleGridExample new open-----------Single and multi-selection:A MorphTreeMorph implements single and multiple selection. Multi-selection is allowed by sending  #multiSelection: with true as argument. Several items can be selected with ctrl-click (or cmd-click on mac) or with shift-click (see MorphTreeMorphModel comments to see how to handle selection from the model).Try multi-selection with following example:------------SimplestClassListExample new openOn: Collection------------Double-click handling:You can allow double-click just by indicating the message to send to the model with the doubleClickSelector: selector.Try this with the package-tree example where double-clicking on a class node or or a method node open a browser on the class or on the method:------------PackageTreeExample new open------------Long list handling:For very long lists or trees, two kind of pager can be used to limit the number of items visible in the list. The idea  is that when you have very long lists, you most of the time do not  want to see all details but just want some visual support for what is in the list: - with a simple pager, you indicate how much items are to be seen in one page, the list items are viewed page by page,- with a chunk pager you can expand either incrementally or  all-together the number of items once you get to the bottom of the existing items.See SimplestClassListWithPagerExample and SimplestClassListWithChunkExample examples.Try them with:------------SimplestClassListWithPagerExample new openOn: Object.SimplestClassListWithChunkExample new openOn: Object.------------Columns/rows coloring:MorphTreeMorph makes it possible the coloring of either the columns or the rows. A MorphTreeMorph understands #rowColorForEven:odd: for rows coloring and columnColorForEven:odd: for columns coloring with two colors passed as argument (nil means no color). See following examples:-------------PackageTreeExample new open. ""For row coloring""ClassListExample new openOn: Collection. ""For column coloring""-------------Column drag and dropA column can be dragged. Inside the tree, a column can be dropped into another one. Then, the two columns are swapped (the roughly implemented)Try it with:-------------ClassListExample new openOn: Collection.-------------Instance Variables	autoDeselection:		<Object>	autoMultiSelection:		<Object>	columnColors:		<Object>	columnDropUnabled:		<Object>	columnInset:		<Object>	columnResizers:		<Object>	columns:		<Object>	doubleClickSelector:		<Object>	expandedToggleImage:		<Object>	gapAfterIcon:		<Object>	gapAfterToggle:		<Object>	getListSelector:		<Object>	getSelectionSelector:		<Object>	hasToggleAtRoot:		<Object>	iconReservedExtent:		<Object>	indentGap:		<Object>	keystrokeActionSelector:		<Object>	lastSelectedMorph:		<Object>	lineColor:		<Object>	multipleSelection:		<Object>	nodeList:		<Object>	nodeSortBlock:		<Object>	notExpandedToggleImage:		<Object>	pager:		<Object>	potentialDropMorph:		<Object>	preferedPaneColor:		<Object>	resizerWidth:		<Object>	rowColors:		<Object>	rowInset:		<Object>	scrollDeltaHeight:		<Object>	selectedMorphList:		<Object>	setSelectionSelector:		<Object>	shiftSelectedMorph:		<Object>	topHeader:		<Object>	topHeaderBackground:		<Object>	unboundLastColumn:		<Object>	withHLines:		<Object>autoDeselection	- xxxxxautoMultiSelection	- xxxxxcolumnColors	- xxxxxcolumnDropUnabled	- xxxxxcolumnInset	- xxxxxcolumnResizers	- xxxxxcolumns	- xxxxxdoubleClickSelector	- xxxxxexpandedToggleImage	- xxxxxgapAfterIcon	- xxxxxgapAfterToggle	- xxxxxgetListSelector	- xxxxxgetSelectionSelector	- xxxxxhasToggleAtRoot	- xxxxxiconReservedExtent	- xxxxxindentGap	- xxxxxkeystrokeActionSelector	- xxxxxlastSelectedMorph	- xxxxxlineColor	- xxxxxmultipleSelection	- xxxxxnodeList	- xxxxxnodeSortBlock	- xxxxxnotExpandedToggleImage	- xxxxxpager	- xxxxxpotentialDropMorph	- xxxxxpreferedPaneColor	- xxxxxresizerWidth	- xxxxxrowColors	- xxxxxrowInset	- xxxxxscrollDeltaHeight	- xxxxxselectedMorphList	- xxxxxsetSelectionSelector	- xxxxxshiftSelectedMorph	- xxxxxtopHeader	- xxxxxtopHeaderBackground	- xxxxxunboundLastColumn	- xxxxxwithHLines	- xxxxx"
"FLFileStreamStrategy","I am a strategy for traditional file streams."
"OCBlockScope","I modelt the scope of a block"
"IceLibgitCommitWalk","Utility class for searching through a commit history taking advantage of git revwalk utilities. Found and returned commits will be added to the commit cache of the corresponding IceRepository."
"ClyGlobalContextOfFullBrowser","I am a global context of full browser"
"OSWindowWorldMorphWithModel","I am an OSWindow world morph that includes a model, to be used with Spec and Glamour."
"MalHits",""
"OSJoyAxisEvent","I am the  joystick axis event.This event is generated when a joystick stick is moved.The which parameter gives the joystick index.The axis parameter is the index of the axis that moved.The value parameter is how much the axis was moved.The mapped parameter tells if the axis index has been mapped into the index of a standard layout.The hasMapping parameters tells if this joystick is generating a mapped version of the event."
"IceTipStandardAction","I'm a generic UI action.I will perform an action by informing user what's happening.I will also check for errors happening while performing the task and try to recover from them."
"SycGenerateAllInstVarAccessorsCommand","I am a command to generate accessors for all inst vars of given classes"
"GTStonPacking","I serialize or materialize objects using STON framework. Create instance of me calling GTEventPacking ston."
"RubTextStopConditions","I represent the conditions to stop the scan"
"LabelMorph","String morph with enablement support. When disabled the text will appear inset."
"LGit_GIT_EAUTH",""
"EpMethodRemoval","I represent a removal of a method in a class or a trait."
"SycClassCommand","I am a base class for commands which perform operations with collection of classes Internal Representation and Key Implementation Points.    Instance Variables	classes:		<Colletion of<Class>>"
"IceConflictingOperation","I reprensent a conflict between two operations that can be solved by using #selectLeft and #selectRight."
"ClyConcreteCritiqueMethodGroup","I am a method group which include methods with critiques of particular severity level. Internal Representation and Key Implementation Points.    Instance Variables	ruleSeverity:		<ClyCritiqueSeverity>"
"LGitPushOptionsVersionEnum",""
"AthensCurveFlattener","This converter flattens all curves by converting them to series of lines.This means that path can be rendered using simple polygon rendering techniqueand nothing else."
"PluggableSet","PluggableSets allow the redefinition of hashing and equality by clients. This is in particular useful if the clients know about specific properties of the objects stored in the set which in turn can heavily improve the performance of sets and dictionaries.Note: As of Pharo 1.1#11284, using normal Dictionary is actually faster as the bench below shows... ;-)Instance variables:	hashBlock	<BlockContext>	A one argument block used for hashing the elements.	equalBlock	<BlockContext>	A two argument block used for comparing the elements.Example: Adding 1000 integer points in the range (0@0) to: (100@100) to a set.	| rnd set max pt |	set := Set new: 1000.	rnd := Random new.	max := 100.	Time millisecondsToRun:[		1 to: 1000 do:[:i|			pt := (rnd next * max) truncated @ (rnd next * max) truncated.			set add: pt.		].	].The above is way slow since the default hashing function of points leads to an awful lot of collisions in the set. And now the same, with a somewhat different hash function:	| rnd set max pt |	set := PluggableSet new: 1000.	set hashBlock:[:item| (item x bitShift: 16) + item y].	rnd := Random new.	max := 100.	Time millisecondsToRun:[		1 to: 1000 do:[:i|			pt := (rnd next * max) truncated @ (rnd next * max) truncated.			set add: pt.		].	]."
"GTChangeDebuggerAction","I am an action for switching to another debugger.My class side methods register one such action for every debugger that can be used with the current execution."
"GTSpotterEventCollector","I represent a GTEventCollector for GTSpotter application.I am a bit spetial because I send only closed sessions. It means, bundle always end with closing event. The rest of the events are postponed for the next delivery cycle."
"TaEmptyComposition","I am an empty compositionI have no methods or slots :("
"RBRemovePragmaTransformationTest",""
"IRStoreRemoteTemp","store remote temp"
"MemoryFileWriteStream","A file write stream - but within memory"
"ZnStatusLine","I am an HTTP Status Line.I consist of an HTTP protocol version, an integer HTTP status code and an HTTP reason string.I can be used for generating and parsing.Part of Zinc HTTP Components."
"MalTNormalize",""
"DAAbstractPackageNode","Abstract class from package node displaying in the tree."
"EpClassModification","I represent the modification of a class."
"SpecDemoTextInputPresenter","This demo shows differenty styles of text inputs."
"TextComposer","Utility class to compose text"
"MetacelloPlatformTestCase",""
"ReSingleCritiqueEvent","A Renraku event with a single critic."
"RBAddClassTest",""
"ClyAsyncQueryIsDone","I am announcing the async query completion.Every async query announces me at the end of execution when result is completelly built.To create instance use: 	ClyAsyncQueryIsDone with: anAsyncQueryResult Internal Representation and Key Implementation Points.    Instance Variables	queryResult:		<ClyAsyncQueryResult>"
"TermInfoCharacter","I'm a TermCap which define the styles with the printing of characters, used when OSSubProcess is not installed in the image.Not really powerfull, better install OSSubProcess and use TermCapTput"
"RBTrueFalseDuplicationRule","Checks for ifTrue:ifFalse: blocks that have the same code at the beginning or end. While you might not originally write such code, as it is modified, it is easier to create such code. Instead of having the same code in two places, you should move it outside the blocks.For example, test 	ifTrue: [self foo. self bar ] 	ifFalse: [ self foo. self baz ] is equivalent to: self foo.  test 	ifTrue: [ self bar ] 	ifFalse: [ self baz ]"
"ClyBrowserNavigationCommand","I am a root of navigation command classes.I just define common places (activations) where commands should be accessible.By default shorcuts are alt+left and alt+right to go back and forward."
"ZipStore","I'm a specific store for Zip file systems"
"GTSpotterWidgetDarkThemer",""
"LGitRevwalkSortTypeEnum","/** * Sort the repository contents in no particular ordering; * this sorting is arbitrary, implementation-specific * and subject to change at any time. * This is the default sorting for new walkers. */#define GIT_SORT_NONE			(0)/** * Sort the repository contents in topological order * (parents before children); this sorting mode * can be combined with time sorting. */#define GIT_SORT_TOPOLOGICAL (1 << 0)/** * Sort the repository contents by commit time; * this sorting mode can be combined with * topological sorting. */#define GIT_SORT_TIME			(1 << 1)/** * Iterate through the repository contents in reverse * order; this sorting mode can be combined with * any of the above. */#define GIT_SORT_REVERSE		(1 << 2)"
"TabLabelMorph","Specially themed label used for tab selector items. "
"SpecStubFastTableAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"FTRootItem","I represent the root item node in a FTTreeDataSource.Description-------------------------------------------------I am store by a FTTreeDataSource and my children are the roots elements of the dataSource.I store the a collection of Items build from the data of the dataSource.Example------------------------------------------------- FTRootItem data: Object allSubclasses from: aDataSource"
"IceGitHubAcceptPullRequestModel","I'm a dialog for collecting data to accept a pull request."
"GLMTextPresentationTest",""
"ZnRequestLine","I am an HTTP Request Line.I consist of an HTTP method, an URI and an HTTP protocol version.I can be used for generating and parsing.Part of Zinc HTTP Components."
"PickListModel","This is deprecated class because the original class PickListModel was renamed to PickListPresenter. You should stop to use this class and modify your code to use PickListPresenter."
"GLMPagerWidgetThemer",""
"UndefinedSortFunction","An  UndefinedSortFunction is a specialization usefull for sorting undefined objects (nil), either first or last according to direction.The non nil objects are sorted according to the baseSortFunction defined in superclass.instance variables:	direction	<Integer>	-1 for sorting nil first, 1 for sorting nil last"
"RBDeadBlockRule","Dead Block. The block is not assigned, not returned and no message is send to it.Often this is a left over from using blocks to comment out code."
"IceGitHubTreeNewPullRequestCommand","I'm a command to create a Pull Request"
"NumberParser","NumberParser is an abstract class for parsing and building numbers from string/stream.It offers a framework with utility methods and exception handling.Number syntax is not defined and should be subclassResponsibility.Instance variables:sourceStream <Stream> the stream of characters from which the number is readbase <Integer> the radix in which to interpret digitsneg <Boolean> true in case of minus signintegerPart <Integer> the integer part of the numberfractionPart <Integer> the fraction part of the number if anyexponent <Integer> the exponent used in scientific notation if anyscale <Integer> the scale used in case of ScaledDecimal number if anynDigits <Integer> number of digits read to form an IntegerlasNonZero <Integer> position of last non zero digit, starting at 1 from left, 0 if all digits are zerorequestor <?> could eventually be used to insert an error message in a text editorfailBlock <BlockClosure> Block to execute whenever an error occurs"
"ClySpotterModel","I'm a model to collect options for ""spotter navigation"" mode in a full browser."
"WeakValueDictionaryTest","SUnit tests for weak value dictionaries"
"SycRenamePackageCommand","I am a command to rename given package. Internal Representation and Key Implementation Points.    Instance Variables	newName:		<String>	package:		<RPackage>"
"DAPackageCycleDetectionTreeModel","A PDPackageDetectCycleTreeModel shows all cycles among packages from a graph of dependencies."
"IceTipRefreshCommitCommand","Command that launches a refresh of the commit tree during commit"
"RBAddClassRefactoring","I am a refactoring for creating new classes. You can define the name, superclass, category and subclasses.I am used by other refactorings that may create new classes, for example, RBSplitClassRefactoring.My preconditions verify that I use a valid class name, that does not yet exists as a global variable, and the subclasses (if any) were direct subclasses of the superclass."
"MetacelloPackageSpecResolutionError",""
"GlobalIdentifier","I keep global IDs that are used for tracking user activity, e.g. computer id. By default, you should access me by calling #uniqueInstance.Responsibility:The IDs that are important to store onto disk (and shared by all images) should be placed in persistedInformation instance variable. On other hand, if you do not want to store it onto disk, create a new instance variable. I can #loadPreferences and #savePreferences onto a disk.I know computer ID and secret ID. Computer ID is a global UUID that is share among all the images. It is stored on a local disk. Secret ID is use for encrypting information, e.g., class names, method names. You can use #hashForText: method.Collaborators: I do not collaborate with other classes. I only offer the basic IDs for other frameworks.Public API and Key Messages- computerUUID - ensureComputerUUID- hashForText:- loadPreferences - savePreferences.Before using #computerUUID, you should call #ensureComputerUUID. It will update UUID from the disk or stores existing one if it is not stored yet. I behave like this as automatic storing data to disk on image start-up leads to errors.Internal Representation and Key Implementation Points.    Instance Variables	persistedInformation:		<Dictionary>	preferences:		<FileReference>"
"LGitPushUpdateReferenceCallback",""
"GLMPagerMorphTest",""
"SycPromotePackageFromTagCommand","I am a command to promote given package and tag to be separate package.Internal Representation and Key Implementation Points.    Instance Variables	classTag:		<Symbol>	package:		<RPackage>"
"RBAddInstanceVariableRefactoring","I am a refactoring for adding new instance variables.My precondition verifies that the variable name is valid, not yet used in the whole hierarchy and not a global name."
"ClyClassCommentTableDecorator","I decorate table with simple constant icon for class comments.For example query browser can show ClyClassComment instances in the table"
"LGitDiffBinaryTypeEnum","/** * When producing a binary diff, the binary data returned will be * either the deflated full (""literal"") contents of the file, or * the deflated binary delta between the two sides (whichever is * smaller). */"
"ClyFFIEnvironmentPlugin","I am special plugin which analyzes ffi methods and mark them with ClyFFIMethodTag.Also I provide ffi method group to see all ffi calls together"
"RBInlineMethodRefactoring","I am a refactoring for replacing method calls by the method implementation.You can select a message send in a method and refactoring this message send to inline its code.Any temporary variable used in the original message send is added  into this method and renamed if there are already variables with this name.My preconditions verify that the inlined method is not a primitive call, the method does not have multiple returns. I'll show a warning if the method is overriden in subclasses."
"LineSegment","This class represents a straight line segment between two pointsInstance variables:	start	<Point>	start point of the line	end		<Point>	end point of the line"
"HEScaledDecimal","I represent a scaled decimal.I am stored as a Fraction (check HEFraction class) but also adding the scale.The scale is stored as a exported literal."
"GTSpotterExceptionMock5Filter",""
"ClyTestResultProperty","I provide information about result of running tests which are related to my environment item.My instances are created from method ot test case: 	ClyTestResultProperty ofMethod: aCompiledMethod.	ClyTestResultProperty ofMethod: aTestCaseClass. Internal Representation and Key Implementation Points.    Instance Variables	allCount:		<Integer>	errorsCount:		<Integer>	failuresCount:		<Integer>	successesCount:		<Integer>"
"GTInspectorMethodListFilter","GTInspectorMethodListFilter implements a filtering strategy for presentations based on method signatures (method selector and class).The filter returns true for a method if the signature of that method is selected in the filter. To be taken into account during filtering a signature must be first added to the filter and the selected. Only signatures that have been first added can be selected. "
"GLMRubScrolledTextBrick","A GLMRubScrolledTextBrick is a wrapper for rubric scrolled text morph, to allow simple integration of rubric text field in brickInstance Variables	rubricMorph:		<Object>rubricMorph	- xxxxx"
"RBAbstractClassVariableRefactoring","I am a refactoring for replacing every direct access to  class variables with accessor methods.My precondition verifies that the variable is directly defined in that class.I create new accessor methods for the variables and replace every read and write to this variable with the new accessors."
"SocketTest","SUnit tests for sockets"
"SugsTranscriptContext","I know how to use a Transcript to extract the information needed for the suggestions"
"GTSpotterDeploymentExceptionHandlerMock",""
"TextAction","A sepcific text attribute to run actions on a text"
"GLMNorthDirection",""
"StringInitializationTests","SUnit tests for String initialization"
"LGitTreeBuilder",""
"ClySortFunctionTestCase",""
"SHA1","This class implements the Secure Hash Algorithm (SHA) described in the U.S. government's Secure Hash Standard (SHS). This standard is described in FIPS PUB 180-1, ""SECURE HASH STANDARD"", April 17, 1995.The Secure Hash Algorithm is also described on p. 442 of 'Applied Cryptography: Protocols, Algorithms, and Source Code in C' by Bruce Schneier, Wiley, 1996.See the comment in class DigitalSignatureAlgorithm for details on its use.Implementation notes:The secure hash standard was created with 32-bit hardware in mind. All arithmetic in the hash computation must be done modulo 2^32. This implementation uses ThirtyTwoBitRegister objects to simulate hardware registers; this implementation is about six times faster than using LargePositiveIntegers (measured on a Macintosh G3 Powerbook). Implementing a primitive to process each 64-byte buffer would probably speed up the computation by a factor of 20 or more."
"STONMapWriter","STONDictionaryWriter helps in writing dictionary based STON representations."
"MorphOpened","I'm an announcement raised when a morph is opened.  Subscribe to me when you want to do things after the morph is opened.Take into account that when a morph is opened, all it's children also get opened and they raise a similar announcement."
"DatePrintFormatTester","I am a helper object used for validating formatted Date strings."
"MenubarMorph","Description--------------------I am a Morph of the form of a Menubar that can be displayed at the top of the World. You can disable me with: `self showMenubar: false`.For now, when you open me, by default I will use the world menu pragma to collect the items to display. If you want a custom menu, just update the WorldMenu pragma to use. Internal Representation and Key Implementation Points.--------------------    Instance Variables	menuBarItems:		<aCollection>	A collection of items to show at the root of the Menubar. Those items can also contains submenus."
"LGitDiffFindTypeEnum",""
"ZipWriteStreamTests","Unit tests for ZipWriteStream"
"OCSemanticError","Raises a semantic error during semantic analysis"
"FreeTypeExternalMemory","FreeType externalMemory "
"DateAndTime","I am DateAndTime.I represent a point in time or timestamp as defined by ISO 8601. I am a Magnitude. I have nanosecond precision.I am TimeZone aware. I have zero duration.  DateAndTime now.  DateAndTime now asUTC rounded.  DateAndTime fromString: '1969-07-20T20:17:40.123+02:00'.  DateAndTime fromString: '1969-07-20T20:17:40Z'.My implementation uses three SmallIntegers and a Duration:  julianDayNumber - julian day number (starting at midnight UTC rather than noon GMT).  seconds - number of seconds since midnight UTC. Always positive, between 0 and 86399.  nanos	 - the number of nanoseconds since the second. Always positive, between 0 and 999999999.  offset	- duration from UTC.The offset is used to print the date and time in a local time zone, but the date and time are handled in UTC internally.The nanosecond attribute is often zero but it defined for full ISO compliance and is suitable for timestamping."
"FFIi386CallbackArgumentReader","I am the subclass responsible of handling i386 parameter passing.All the parameters in i386 are passed in the stack.The integer types are promoted to Int32 or UInt32 depending if they are signed or unsigned.The structs are always passed in the stack.I do not modify the behavior of my superclass."
"SlotExampleMovie","A SlotExampleMovie is an example class to demonstrate the workings of relation slots."
"GLMPaneTest",""
"SycPackageCommand","I am a base class for commands which perform operations with given packages.Internal Representation and Key Implementation Points.    Instance Variables	packages:		<Collection of<RPackage>>"
"GTBytecodeDebuggerSession","I provide debugging actions at the level of the bytecode.I also make sure  that step over only goes over one single bytecode instruction."
"LGitDiffFile",""
"ClyHierarchicallySortedClassesTest",""
"FT2Face","Do not rearrange these fields!New fields should go at the end, because the plugin has to know about these indexes.ByteArray representing a pointer to the malloc'd FT_Face struct:handleCopied from the FT_Face struct on creation:numFaces faceIndex faceFlags styleFlags numGlyphs familyName styleName numFixedSizes availableSizes numCharmaps charmapsCopied on creation, but only relevant to scalable outlines:bbox unitsPerEm ascender descender height maxAdvanceWidth maxAdvanceHeight underlinePosition underlineThickness Working memory:glyph -- FT2GlyphSlot, set by loadGlyph or loadCharsize -- the active size, set by activateSize, used by loadGlyph, getKerning, etc.charmap -- set by setCharmap"
"FileReferenceAttributeTests","Try and test file attribute access from FileReference.As Pharo doesn't provide a mechanism to set the attributes, pick a few well known files and make sure they have reasonable attributes, e.g. the VM is executable, it isn't older than when the classes were first created or newer than today, etc."
"GLMTreePresentationTest",""
"EpMorphFactory","I provide convenience methods to create morphs."
"MetacelloVersionDefinitionError",""
"T2TraitAnnouncementsTest","Unit test for announcement handling when dealing with traits"
"BorderedMorph","BorderedMorph introduce borders to morph. Borders have the instanceVariables borderWidth and borderColor. BorderedMorph new borderColor: Color red; borderWidth: 10; openInWorld.BorderedMorph also have a varaity of border styles: simple, inset, raised, complexAltFramed, complexAltInset, complexAltRaised, complexFramed, complexInset, complexRaised.These styles are set using the classes BorderStyle, SimpleBorder, RaisedBorder, InsetBorder and ComplexBorder.BorderedMorph new borderStyle: (SimpleBorder width: 1 color: Color white); openInWorld.BorderedMorph new borderStyle: (BorderStyle inset width: 2); openInWorld."
"TraitTransformation","It is kept for compatibility with extension methodsCheck the class TaAbstractComposition for the new implementation."
"RubTextAcceptedInModel","I am raised when the text is accepted in the model side"
"ReBasicScenarioExceptionStrategyTest",""
"WorkspaceVariable","I am a binding in a Workspace. Used for non-defined temps"
"SycCategorizeAllUnclassifiedMethodsCommand","I am a command to categorize all unclassified methods of given classes"
"LGitExternalObject",""
"ManifestHermes","Hermes is a tool to binary serialize/deserialize behavior.It uses the basic elements in the bootstraped image, so it can be used to load code in a really small image.Basically it contains the packages:    - Hermes: Core classes and behavior to load the code in the image. This is loaded in the default image. This package is loaded by the bootstrap process, so it should be small.   - Hermes-Exporter: It has all the behavior to export the classes, traits and methods. This is not loaded in the default image, as  it is only used to export the code. This decition minimizes the footprint of hermes in the bootstrapped image.   - Hermes-Extensions: This package extends the behavior of the core package. This allows to load extra behavior after the bootstrap image is generated. This is loaded by Hermes it self. To Load code check: HEInstaller and HermesCommandLineHandler. To Export code check the comments in the Hermes-Exporter package."
"RubTextLine","I represent a line of text"
"GTSpotterAllCandidatesAdded",""
"PragmaAnnouncement","A PragmaAnnouncement is announced by a PragmaCollector when it adds, removes or updates a PragmaHandler.Instance Variables	pragma:		<Pragma>pragma	- the pragma which has been added, removed or updated"
"AthensCharacterSpan","A text command to render a character span containing the range of characters for with same attributes"
"RBRemoveVariableTransformation","Removes a variable from a class. It does not remove direct accesses to this variable in the class.Usage:transformation := (RBRemoveVariableTransformation 	variable: 'isClassVariable'	class: #RBVariableTransformation	classVariable: false)	transform. (ChangesBrowser changes: transformation model changes changes) openPreconditions:- the class exists- the class defines a variable with the given name"
"ManifestIcebergLibgit","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"CompiledMethod","Specific version of compiled code for method's.CompiledMethod instances can be in two forms:- up until Pharo 6, they encode both the method and the inner closures bytecodes and literals.- since Pharo 6, they encode only the method's bytecodes and literals.In addition the execution mechanics, a compiled method have two extra optional literals. The last literal, optional if there are no super sends, is the class in which the method is installed. The last but one literal is either the method's selector or an AdditionalMethodState instance. AdditionalMethodState instances are used to encode additional state to a method, as for example the pragmas."
"RFStoreIntoTempNode","I define a temp that I can store into"
"IceInMergeWorkingCopy","I am a working copy whose packages are all in merge status in the same commits."
"OCExtraBindingScope","Bindings normally only come from the scope hierarchy that the variable is in: method, instance, class, requestor (if any). The ExtraBinding Scope allows to define bindings via a compiler API.	result := Smalltalk compiler		bindings: {(#a -> 3)} asDictionary;		evaluate: '1+a'.		these binding shadow all other bindings, even globals:result := Smalltalk compiler		bindings: {(#Object -> 3)} asDictionary;		evaluate: 'Object + 1'.		Shadowed global variables can be assigned to even if they referene a class."
"PrivacyChangedAnnoucement","I announce  changes on Privacy settings in SystemAnnouncer uniqueInstance."
"SDL2AthensDrawingExample","I am a basic example to show how we can handle an event and draw something with this event.Left mouse button = draw lines Other mouse buttons = clear sketchTo launch the example:self new open"
"UUIDTest","SUnit tests for UUID"
"ClySubclassLOfClass0FromPExtendedByP1",""
"SearchableList","SearchableList 	new items: #( aaa abc axz bbb bfbg bof c);	openWithSpec	should it be a subclass of ListPresenter?Because now I will have to delegate a lot? and I cannot plug a IconListHow do I make textModel react to every keystroke without an accept"
"ProcessorScheduler","My single instance, named Processor, coordinates the use of the physical processor by all Processes requiring service.My instances variables are managed by the VM. The VM has for role to choose which process should be executed and when.NB: DelayScheduler is THE HIGHEST priority code which is run in Pharo. See DelayScheduler for additional comments."
"FTBitmap","I represent the FT_Bitmap type"
"LargeInteger","I represent integers of more than 30 bits.  These values are beyond the range of SmallInteger, and are encoded here as an array of 8-bit digits. "
"MetacelloTestsPackageSet","This class is used to speed up Metacello tests."
"GTPlaygroundBindingsList",""
"LayoutFrame","I define a transformation frame relative to some rectangle. I'm basic data structure used for graphics.Do not use fractions: fractionsOrNil offsets: offsetsOrNil or frations: fractionsOrNil if you do not have already  the rectangles that should be passed as arguments. If you are creating the rectangles representing the numbers you need, better use the accessors. For example like this.  	(LayoutFrame identity			topOffset: topHeight;			bottomFraction: 0;			bottomOffset: self buttonsBarHeight;			leftOffset: -1;			rightOffset: 1)	Instance variables:	leftFraction 	topFraction 	rightFraction 	bottomFraction 	<Float>		The fractional distance (between 0 and 1) to place the morph in its owner's bounds	leftOffset 	topOffset 	rightOffset 	bottomOffset 	<Integer>	Fixed pixel offset to apply after fractional positioning (e.g., ""10 pixel right of the center of the owner"")"
"ClyDataSource","I am a root of fast table data source classes which adopt Calypso query result to FastTable interface.My subclasses represent concrete kind of underlying tree structure: all items can be initialy expanded or initialy collapsed.To create my instances use following expression:	dataSource := ClyCollapsedDataSource on: aQuery.It just creates instance of data source without executing given query.Query is opened by ClyQueryView when you pass data source to it: 	queryView dataSource: aDataSource It ask data source to open for itself:	dataSource openOn: queryViewIt executes the query and retrieves cursor to access result items in optimized way.Also it subscribes on result changes. So the query view is updated when result is changed.When data source is not needed anymore it should be closed:	dataSource closeI represent actual elements of fast table by ClyDataSourceItem.	dataSource elementAt: 1 ""=>aDataSourceItem""  Management of children is implemented by my subclasses. According to type of tree structure they implement following methods: - numberOfRows- elementAt: rowIndex- globalPositionOf: childDataSourceItem- countChildrenOf: aDataSourceItem- isItemHasChildren: aDataSourceItem- definesChildren- collapse: aDataSourceItem- expand: aDataSourceItem- isExpanded: aDataSourceItem- updateExpandingItemsChildren are represented by data sources too. My parentItem and depth variables point to the position in full tree.You can ask global position in the tree using: 	dataSource globalPositionOf: childDataSourceItemIt should return global row index in the table of given children item.I implement query interface to find items- findItemsWhere: conditionBlock - findItemsWith: actualObjects - findItemsSimilarTo: dataSourceItemsMy instances are subscribed on ClyEnvironmentChanged event which happen when underlying query result is changed.In case of the event I update my children structure and refresh table:- itemsChangedUpdate is performed in special logic to prevent multiple updates during complex system changes.First I check if I am already dirty. In that case I do nothing.Otherwise I mark myself as dirty and defer actual update using UpdateScheduler which performs update in low priority process when there is a time. So if complex system change is initiated from UI operation (which is common scenario) I will be updated only when full operation will be finished. And it will be always single update independently how many changes operation produces with the system. For details look at ClyDataSourceUpdateScheduler comments.Internal Representation and Key Implementation Points.    Instance Variables	query:		<ClyQuery>	queryView:		<ClyQueryView>	itemCursor:		<ClyBrowserQueryCursor>	parentItem:		<ClyDataSourceItem>	depth:		<Integer>	dirty: <Boolean>	lastFilteredDataSource: <ClyDataSource>"
"LabelledTextInput","I am a LabelledContainer specialized to manage a TextInputFieldPresenter.See LabelledContainerself exampleI provide the accessor input to be more intuitive than subwidget.I provide shortcuts for the most common methods of the TextInputFieldPresenter api to avoid the use of the DoesNotUnderstand or the writing of long chain of accessors."
"DiffJoinMorph","Morph to display a diff join"
"IceTipPushContext","I'm a context for the push browser."
"SpecStubAdapterBindings","I am used to link the Spec presenter names to the stub adapters that generate no real views.Usefull  for images or UI managers without possible real UI output or  for tests. Can serve as template for real Spec adaptersUsage:CurrentSpecDefaultBindings value: SpecStubAdapterBindings during: [ 	ButtonPresenter new openWithSpec.]."
"NECClassVarTypeGuesser","I'm a simple InstructionClient that tries to guess the type of a given class variable name of a class. "
"SpecDemoStandaloneFormPresenter","The presenter that provides only the standalone form for the form demo"
"LGitDiffFlagTypeEnum",""
"RBTempVarOverridesInstVarRule","Finds methods whose temporary variables override an instance variable. This causes problems if you want to use the instance variable inside the method."
"HistoryIteratorTest","SUnit tests for HistoryIterator"
"EpOmbuExporter","I know how to export Epicea entries from one log to a new one."
"IceTipFilter",""
"LayoutAbstractScope","Layout scopes reify how classes extend the layout of their superclass."
"GLMBrickExtensionTrait","I declare an api to store and read extention properties. It should be inplemented in any Brick UI to make it work."
"LGitObjectNotInitialized",""
"ClyClassScriptProperty","I am used to extend method items with information about script which they represent.To create my instances use following method: 	ClyClassScriptProperty script: aScriptInternal Representation and Key Implementation Points.    Instance Variables	script:		<ClyClassScript>"
"IceMCDefinitionImporter","I am an importer that visits MCDefinitions and creates IceDefinitions from them. I install those definitions into a corresponding package node."
"GTSpotterGlobalShortcut","KMRepository reset"
"OSKeyDownEvent","This event is delivered when user pressing down a key"
"NECEntry","I represent a completion entry that is management by a ECModel and shown in the ECMenuMorph as a menu entry.Each of my subclass will represent a specific kind of entity. For example a globalvariable, self..."
"FuzzyMatcherTests","Tests for FuzzyMatcher. "
"CriticWorkingConfiguration","A CriticWorkspace holds the current worspace for the CriticBrowser.It's composed of the set of rules to check (as a composite rule) and the environment to work in."
"ClyItemGroupProviderTestCase",""
"HDChangeReport","A change report"
"IcePushTransferProgress",""
"LGitIllegalArgument",""
"SpecDemoFormModel","Simple structure-like model for the form demo"
"ColorTest","SUnit tests for class Color"
"RBInlineParameterTest",""
"RBTransformationRuleTest",""
"LimitedWriteStream","A LimitedWriteStream is a specialized WriteStream that has a maximum size of the collection it streams over. When this limit is reached a special limitBlock is executed. This can for example be used to ""bail out"" of lengthy streaming operations before they have finished.  For a simple example take a look at the universal Object printString.The message SequenceableCollection class streamContents:limitedTo: creates a LimitedWriteStream. In this case it prevents very large (or possibly recursive) object structures to ""overdo"" their textual representation. "
"DAManuallyAddedDependentPackageNode","I'm a node  representing a dependency not computed automatically but added manually on the package Manifest."
"RBVariableTransformation",""
"ClyShowMessageSenderCommand","I am a command to show all message senders.To show senders I ask the browser to spawn new query browser.Internal Representation and Key Implementation Points.    Instance Variables	browser:		<ClyBrowser>"
"MCAddition","A MCAddition represents the operation to add an entity to a snapshot. "
"ObjectFinalizerTests",""
"RBUndeclaredReferenceRule","Checks for references to variables in the Undeclared dictionary. If you remove a referenced variable from a class, you will create an undeclared variable reference for those methods that accessed the variable."
"FreeTypeNameParser","A name parser"
"ZnEncodedStream","I am ZnEncodedStream, an abstract support class for read and write streams on an encoded binary stream.Part of Zinc HTTP Components"
"OmBlockFileStore","I am a single-file store of entries. Each new entry is appended at the end. Entries are lazily read in blocks (represented by OmBlock) from file on demand."
"InputEventHandler","An InputEventHandler is the abstract superclass for all input event handlers.Subclasses need to implement handleEvent:.Instance Variables	eventFetcher:		<InputEventFetcher>eventFetcher	- the event fetcher I'm registered with and receiving my events from."
"AthensCairoSurfaceForm","I'm a form that keeps a surface with the only purpose of prevent GC when is still being used to copy data.I'm used at AthensCairoSurface>>#asForm"
"GLMNoBrowser","A NoBrowser is a browser without behavior and that does not require a container pane. The root pane is always placed in a NoBrowser.Given that it has no behavior, a NoBrowser is a singleton to avoid multiple unnecessary instances."
"DAPackageTest",""
"ClyInheritedMethodGroupProviderTest",""
"GTInspectorNoneFilter","I do not filter presentation and allow all of them to be displayed"
"ZnMultiValueDictionaryTests",""
"MultiCanvas","A canvas which forwards drawing commands to sub-canvases."
"ClyHierarchicalSystemItems","I am a special kind of system query result which merges together multiple kind of system items in single hierarchy.So I sort hierarchically classes, methods and class comments, all together.I am used in query browser to show items.First I build subclass hierarchy of all classes with define given objects.For this I convert every object to the browser item and ask it systemDefinitionClass.At the end I got map between class and children items which are defined by this class. The children are sorted using special ClySortSystemItemFunction which takes into account different type of items and their own default sort logic.Using this built hierarchy I fill my items in hierarchical order."
"ConnectionClosed","Signals a prematurely closed connection."
"MetacelloValidationIssue",""
"RBDummySubclassOfClassToRename","This is a dummy class to test RenameClass transformation"
"GTObjectVariablesBrowser","This is a helper browser for the main view in the GTInspector.Example:self openOn: Smalltalk"
"GTSpotterActOn",""
"SDL_ControllerAxisEvent","SDL2 library structure representing a game controller axis event data."
"TextLineEndingsTest","This is a test case for Text>>withSqueakLineEndings and String>>withSqueakLineEndings.The main problem we've seen with the Text version is that it doesn't preserve formatting correctly."
"RubTextAreaExamples","RubTextAreaExamples blueTextOnGrayBacgroundNotWrapped.RubTextAreaExamples blueTextOnGrayBacgroundWrappedTo400.RubTextAreaExamples blueTextOnGrayBacgroundWrappedTo400Version2.RubTextAreaExamples profileSourcesFileViewing.RubTextAreaExamples rightFlushed.RubTextAreaExamples shoutedScriptingTextArea.RubTextAreaExamples simplestEmptyNotWrapped.RubTextAreaExamples simplestEmptyWrappedTo400.RubTextAreaExamples simplestWrappedTo400.RubTextAreaExamples smalltalkCodeWrappedTo400.RubTextAreaExamples sourceCodeTemplateWrappedTo400.RubTextAreaExamples smalltalkCodeWrappedWithUnderlineSegments.RubTextAreaExamples textFieldWithCRAction.RubTextAreaExamples withOnlyThePrimarySelection.RubTextAreaExamples wrappedTo400WithMarginsOf40."
"SimpleTextGlyphInfo","Simple glyph infos"
"IceModification","I am a modification in a tree. I contain the definition I'm changing (right) and the new (left) version of the definition. I know what is the icon for modification and how to calculate a conflict with other operations."
"LGit_GIT_EEXISTS",""
"IceTipBrowseCommand","I'm a command to ""browse"" a change definition (method, class or package)."
"Monitor","A monitor provides process synchronization that is more high level than the one provided by a Semaphore. Similar to the classical definition of a Monitor it has the following properties:1) At any time, only one process can execute code inside a critical section of a monitor.2) A monitor is reentrant, which means that the active process in a monitor never gets blocked when it enters a (nested) critical section of the same monitor.3) Inside a critical section, a process can wait for an event that may be coupled to a certain condition. If the condition is not fulfilled, the process leaves the monitor temporarily (in order to let other processes enter) and waits until another process signals the event. Then, the original process checks the condition again (this is often necessary because the state of the monitor could have changed in the meantime) and continues if it is fulfilled.4) The monitor is fair, which means that the process that is waiting on a signaled condition the longest gets activated first.5) The monitor allows you to define timeouts after which a process gets activated automatically.Basic usage:Monitor>>critical: aBlockCritical section.Executes aBlock as a critical section. At any time, only one process can execute code in a critical section.NOTE: All the following synchronization operations are only valid inside the critical section of the monitor!Monitor>>waitUnconditional waiting for the default event.The current process gets blocked and leaves the monitor, which means that the monitor allows another process to execute critical code. When the default event is signaled, the original process is resumed.Monitor>>waitWhile: aBlockConditional waiting for the default event.The current process gets blocked and leaves the monitor only if the argument block evaluates to true. This means that another process can enter the monitor. When the default event is signaled, the original process is resumed, which means that the condition (argument block) is checked again. Only if it evaluates to false, does execution proceed. Otherwise, the process gets blocked and leaves the monitor again...Monitor>>waitUntil: aBlockConditional waiting for the default event.See Monitor>>waitWhile: aBlock.Monitor>>signalOne process waiting for the default event is woken up.Monitor>>signalAllAll processes waiting for the default event are woken up.Using non-default (specific) events:Monitor>>waitFor: aSymbolUnconditional waiting for the non-default event represented by the argument symbol.Same as Monitor>>wait, but the process gets only reactivated by the specific event and not the default event.Monitor>>waitWhile: aBlock for: aSymbolConfitional waiting for the non-default event represented by the argument symbol.Same as Monitor>>waitWhile:for:, but the process gets only reactivated by the specific event and not the default event.Monitor>>waitUntil: aBlock for: aSymbolConfitional waiting for the non-default event represented by the argument symbol.See Monitor>>waitWhile:for: aBlock.Monitor>>signal: aSymbolOne process waiting for the given event is woken up. If there is no process waiting for this specific event, a process waiting for the default event gets resumed.Monitor>>signalAll: aSymbolAll process waiting for the given event or the default event are woken up.Monitor>>signalReallyAllAll processes waiting for any events (default or specific) are woken up.Using timeoutsMonitor>>waitMaxMilliseconds: anIntegerMonitor>>waitFor: aSymbol maxMilliseconds: anIntegerSame as Monitor>>wait (resp. Monitor>>waitFor:), but the process gets automatically woken up when the specified time has passed.Monitor>>waitWhile: aBlock maxMilliseconds: anIntegerMonitor>>waitWhile: aBlock for: aSymbol maxMilliseconds: anIntegerSame as Monitor>>waitWhile: (resp. Monitor>>waitWhile:for:), but the process gets automatically woken up when the specified time has passed.Monitor>>waitUntil: aBlock maxMilliseconds: anIntegerMonitor>>waitUntil: aBlock for: aSymbol maxMilliseconds: anIntegerSame as Monitor>>waitUntil: (resp. Monitor>>waitUntil:for:), but the process gets automatically woken up when the specified time has passed."
"ReProperMethodProtocolNameRuleForUtilities","Rule to favour 'utilities' method protocol over similar ones (like 'utils' or other)"
"MetacelloScriptEngine","MetacelloScriptEngine runs the execution of the script for one projectSpec"
"RBLiteralToken","RBLiteralToken is the first-class representation of a literal token (entire literals, even literal arrays, are a single token in the ST80 grammar.).Instance Variables:	stopPosition	<Integer>	The position within the source code where the token terminates."
"GLMTabulator","A GLMTabulator is an explicit browser that allows us to place panes in columns and rows."
"ClyAsyncMethodGroup","I represent method group based on async method query.I am decorated in the browser with animation indicating background query processing.My instances are usually created from another method group using converting method: 	aMethodGroup asAsyncQueryGroupI hold reference to async query result. So it is kept in memory together with my instance.Internal Representation and Key Implementation Points.    Instance Variables	asyncQueryResult:		<ClyAsyncQueryResult>"
"PluggableDictionaryTest","SUnit tests for pluggable dictionaries"
"ClassCommented","This announcement will be emitted when a class or a trait comment changes"
"GLMActionAnnouncement",""
"HiDirectLinkRenderer","I draw links in a straight line. See comment in superclass."
"KeyboardEvent","I am a keyboard event. I contain the char code of the event pressed, the modifiers pressed, and the keycode of the key pressed."
"RBUncommonMessageSendRule","Sending messages with a common literal (e.g. ""Object self"") or an uppercase selector name are usually bugs, introduced through missing statement separators."
"RPackage","A RPackage is a new implementation of package. Note that it does not touch classes but it is just a layer on top of classes therefore removing a method from a package does not change the underlying class. Instance Variables	classDefinedSelectors:		Dictionary	classExtensionSelectors:		Dictionary	metaclassDefinedSelectors:		Dictionary	metaclassExtensionSelectors:		Dictionary	packageName:		String	classes: OrderedCollection of Symbols	classTags: is a mapping from tags to classNamesThe reason we use four dictionaries is that this way we only store #Point in both as the class and the metaclass are involved. We do not have to with Point_class problem when comparing defined and extended classes. The idea is taken from the RBSelectorEnvironment. 							Class Invariant one:	Classes should not contain metaclass name, but only class names		Implementation notes ====================This class went over 3 internal representations implementation. 	- first: 	a list of class + two dictionaries: class * methods	This was not good since we add to go all the time over the list of classes.	- second: 4 dictionaries class * selectors 	This was not good since we want to have defined classes without methods. 	- third: 4 dictionaries + definedClassesOriginally I wanted to avoid to have a defined class list and I wanted to avoid to have to declare the class as defined. But this is not really good since	- we will want to know if a class definition (without method for example is defined in a given package)	- second this is easier to hook the packageOf: behavior (we register the package class when the class is 	added to the package).defined classes information is redundant with the dictionary keys of defined methods but we would have to check and register the class to the packageOrganizer the first time a method is defined then also check on remove to unregister the class from the packageOrganizer.Adding a method does not define the class as a defined package class. This has to be done explictly. The reason for this choice is that a class should register to the packageOrganizer and that I do not want to do it each time a method is added and I do not want to test it each time a method is added. Now this is done only when the class is declared as defined. We could also give the complete freedom to the client to register the class but I thought it was a good compromise. 		ClassTag are tags that can be associated to classes. They help user organizing their class internal. So that we can have a package infrastructure as follows:	Package1		ClassA		ClassB	in case there is no tags associated to the package	or	Package2			Tag1			ClassA			ClassB		Tag2			ClassC			ClassD			ClassE			ClassA			Todo====	Next: 	- finish 	- build up a synchronizer that import PackageInfo.			"
"CalendarPresenterTest","Tests for CalendarPresenter."
"ChoseDate","A ChoseDate is an announcement raised by the CalendarMorph"
"WindowClosed","I am emitted when a window is closed."
"TextFontReferenceTest","SUnit tests for TextFontReference"
"FTFaceRec","I implement the FT_Face_Rec, I am the main structure used by the library."
"MetacelloAlternateResource",""
"IceMetacelloLoadSession","I'm a metacello execution sesssion. I will be active during the context of a ""metacello load"" command, and it will be shared between all dependent baselines/configurations to be traversed in that execution.Tipically, I will be used to keep some state needed during the full execution, like a choice of what whas selected when conflicting or upgraded versions acts.  "
"MetacelloReferenceConfig",""
"RxmPredicate","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--Instance holds onto a one-argument block and matches exactly one character if the block evaluates to true when passed the character as the argument.Instance variables:	predicate		<BlockClosure>"
"ClassBuilderError","I represent an error raised while building a class. "
"IceAbstractProject",""
"SpecWindowTest","SUnit tests for SpecWindow"
"RFBlockOperation","I model block creation. on #value, I return the created block"
"TabPresenter","I am a spec presenter representing a single tab.I should not be used without being contained into a TabManagerPresenter.You can also have a look at TabsExample for another example.!! #retrievingBlock: warningIf you specify #retrievingBlock: directly, you should also set the ownership of the appropriate. (See TabPresenter>>#model:)"
"ComposablePresenter","ComposablePresenter is an abstract class which represent a applicative presenter made to be composed with other ComposablePresenterMost often, I am used to display other subclasses of ComposablePresenter or subclasses of AbstractWidgetPresenter.I collaborate with -  ValueHolder to managed some of my variables.- SpecFocusOrder when no focusOrder are specified.- SpecLayout- WindowPresenter or DialogWindowPresenter to display myself.A new subclass of ComposablePresenter must at least define initializeWidgets and defaultSpec on the class side.I provide the following methods- aboutText: set the text displayed in the About.- title: set the title of the window.- extent: set the initial size of the window, alternative possibility is define again initialExtent, it must be called before have displayed the widget. - focusOrder: set an instance what manage the order of focus of the keyboard navigation.- bindKeyCombination:toAction: create a shortcut on keyboard what perform the block of the  action.- owner getter of my parent.- window getter of the window displaying me.On my class side, I provide methods returning standard height and width for some elements.todo- announce:- applyMenuModel: and neglectMenuModel:- keyStrokeForNextFocus: , giveFocusToNextFrom: and takeKeyboardFocus- ensureExtentFor:- hide- needRebuild- on:do:- update:- widgetWindow=======- openWithSpec instantiate a WindowPresenter using the lookup to found the layout to use.- openDialogWithSpec instanciate a DialogWindowPresenter using the lookup to found the layout to use.Their variants openWithSpec: and openDialogWithSpec:  use the layout parameter.These methods can be useful to manage the window- isDisplayed return true if the window of the widget is displayed- hasWindow return true if the widget have a window- centered to center the window in the world.- delete to delete the window.todo- cancelled- setModal:- windowIcon:Instantiation===========* initializeWidgets is called by the initialize method, it should contain initialization of subwidgets and of the focusorder.The instantiation of a subwidget should use one of that way- instantiate: take a class in parameter and return the created instance.- methods named 'new' followed by a widget name are shortcut working with instatiate:Usually, the subwidgets must be added in the focusOrder using something like 'self focusOrder add: accessor of  the  subwidget'Note that instantiateModels: is legacy code in ComposablePresenter and must not be used. It will be deprecated and removed.* initializePresenter is called by the initialize method after initializeWidgets, it should manage interaction of subwidgets.Methods named 'when' followed by an event provide hook to perform the action in parameter.Note-------Be careful about code order if you are overriding initialize method.Normally in Spec initializing instance variables should be done BEFORE calling super initialize (so the opposite of the normal approach), because super initialize calls initalizeWidgets and initializePresenter that normally would make use of those variables.Layout======See SpecLayoutdefaultSpec or a method containing the pragma <spec: #default> must be defined in the class side of my subclasses.It contains informations about how place its elements.It possible to define more than one method to give the possibility to use another layout, by default the one containing the pragma will be used if it exists, if not defaultSpec will be used."
"GTSpotterCandidatesProcessor","This processor adds the ability of computing and caching all possible candidates. It is useful when we know all candidates upfront."
"ColorForm","ColorForm is a normal Form plus a color map of up to 2^depth Colors. Typically, one reserves one entry in the color map for transparent. This allows 1, 3, 15, or 255 non-transparent colors in ColorForms of depths 1, 2, 4, and 8 bits per pixel. ColorForms don't support depths greater than 8 bits because that would require excessively large color maps with little real benefit, since 16-bit and 32-bit depths already support thousands and millions of colors.ColorForms have several uses:  1) Precise colors. You can have up to 256 true colors, instead being limited to the 8-bit color palette.  2) Easy transparency. Just store (Color transparent) at the desired position in the color map.  3) Cheap color remapping by changing the color map.A color map is an Array of up to 2^depth Color objects. A Bitmap colorMap is automatically computed and cached for rapid display. Note that if you change the color map, you must resubmit it via the colors: method to flush this cache.ColorForms can be a bit tricky. Note that:  a) When you BitBlt from one ColorForm to another, you must remember to copy the color map of the source ColorForm to the destination ColorForm.  b) A ColorForm's color map is an array of depth-independent Color objects. BitBlt requires a BitMap of actual pixel values, adjusted to the destination depth. These are different things! ColorForms automatically maintain a cache of the BitBlt-style color map corresponding to the colors array for the last depth on which the ColorForm was displayed, so there should be little need for clients to work with BitBlt-style color maps.  c) The default map for 8 bit depth has black in the first entry, not transparent.  Say (cform colors at: 1 put: Color transparent)."
"IceMetacelloRepositoryType","I'm a base class to provide different type of MCRepositories from iceberg, so metacello can do his work of installing packages.My children define specific types, visit them to have more details of what you can do."
"Gofer",": Gofer, a person who runs errands. Origin 1960s: from go for, i.e. go and fetch.: ''The New Oxford American Dictionary''! SynopsisGofer is a small tool on top of Monticello that loads, updates, merges, diffs, reverts, commits, recompiles and unloads groups of Monticello packages. Contrary to existing tools Gofer makes sure that these operations are performed as clean as possible:- Gofer treats packages from one or more repository in one operation.- Gofer works with fixed versions or tries to find the ""latest"" version using a given package name.- Gofer automatically assigns repositories to all packages, so that the other tools are ready to be used on individual packages.- Gofer makes sure that there is only one repository instance registered for a single physical location.- Gofer works with Monticello dependencies and uniformly treats them like the primary package.- Gofer prefers to work with faster repositories if there is a choice.- Gofer cleans up after Monticello, no empty class categories and no empty method protocols are to be expected.- Gofer supports operations to sync remote and local repositories with each other.! InstallationGofer is included with the latest Pharo and GemStone distributions. To update to the latest version you can use Gofer itself:== Gofer upgradeIn case you are missing Gofer in your image, grab it from *http://source.lukas-renggli.ch/gofer.html*.! DescriptionGofer is very simple by design, the basic useage scenario is always the same and consists of three steps:# You specify one or more Monticello repository URLs. You can do this using the methods ==url:==, ==url:username:password:== (HTTP, FTP), ==directory:==, or ==repository:== if you need full control. You might also use the convenience methods like ==squeaksource:==, ==wiresong:==, or ==gemsource:== for well known repositories. Additionally the following settings are available:#- Gofer implicitly declares the local package cache as a repository. To disable the local package cache use the method ==disablePackageCache==, to re-enable use ==enablePackageCache==.#- Gofer throws an error if a repository is not reachable. To silently ignore repository erros use the message ==disableRepositoryErrors==, to re-enable use ==enableRepositoryErrors==.# You specify one or more Monticello packages you want to work with, by adding them to the Gofer instance. Use ==version:== to add a specific version, or use ==package:== to add the ""latest"" version in the given repository. Furthermore there is ==package:constraint:== that allows you to further constraint the version to be loaded in a block passed in as the second argument.# You specify one or more actions to be performed on the specified packages:| ==load==	| Load the specified packages.| ==update==	| Update the specified packages.| ==merge==	| Merge the specified packages into their working copies.| ==localChanges==	| Answer the changes between the base version and the working copy.| ==browseLocalChanges==	| Browse the changes between the base version and the working copy.| ==remoteChanges==	| Answer the changes between the working copy and the remote changes.| ==browseRemoteChanges==	| Browse the changes between the working copy and the remote changes.| ==cleanup==	| Cleans the specified packages.| ==commit==	| Commit the modified specified packages.| ==commit:==	| Commit the modified specified packages with the given commit message.| ==revert==	| Revert the specified packages to the currently loaded version.| ==recompile==	| Recompile the specified packages.| ==reinitialize==	| Call the class side initializers on the specified packages.| ==unload==	| Unload the specified packages.| ==fetch==     | Download versions from remote repositories into the local cache.| ==push==      | Upload local versions from local cache into remote repositories.! ExampleTo use Gofer to update to exact versions of the Kom Server, the 'latest' code of Seaside 2.8 and the 'latest' code of the Scriptaculous package that is committed by the author with the initials 'lr' one could evaluate:== Gofer new==     squeaksource: 'KomHttpServer';==     version: 'DynamicBindings-gc.7';==     version: 'KomServices-gc.19';==     version: 'KomHttpServer-gc.32';==     update.== Gofer new==     squeaksource: 'Seaside';==     package: 'Seaside2.8a';==     package: 'Scriptaculous' constraint: [ :version | version author = 'lr' ];==     load"
"AthensBorderStrokePaint","i am used to convert ComplexBorder (raised/inset) into paint, used in Morphic."
"FLGlobalSendNotPresentMock","A test mock where a global send is not present"
"ClySuperclassVisibilityLevel","I represent visibility of methods of concrete class.My extra scope is created for single class: 	visibleScope asScope: ClyClassScope of: aConcreteSuperclass	My instances are created using following method:	ClySuperclassVisibilityLevel of: aClassScope toShow: aClass"
"IceBasicProject",""
"OCVectorTempVariable","I model a temp variable that is stored in a temp vector."
"MetacelloAbstractConstructor",""
"TickSelectionCheckboxButtonMorph","A TickSelectionCheckboxButtonMorph is the button hidden into the TickSelectionCheckboxMorph"
"ShModifyClassTest",""
"GTSpotterSettingsProcessorFilter","I implement a filtering strategy for processors that takes into account the GTSpotterExtensionSettings. Essentially, I will only allow processors that appear as enabled in the Settings Browser."
"CmdCommandActivationStrategy","I am a root of command activation strategy hierarchy. My subclasses represent different ways how to access and execute commands in specific context, how to represent them to user, how initialize their state.Users attach concrete activation strategy to commands as class annotation (look at ClassAnnotation comment).For example to make YourCommand executable by shortcut you need following method:	YourCommand class>>yourAppShortcutActivator		<classAnnotation>		^CmdShortcutCommandActivator by: $e meta for: YourAppContext My instances should be created for concrete context of application tool, subclass of CmdToolContext. Application/tool provides instance of this context for the command lookup:	CmdShortcutCommandActivation allAvailableInContext: aToolContext do: [:activationStrategy  | ]This method enumerates all registered strategies which are declared to be used in given context. You can check it  manually: 	anActivationStrategy canBeUsedInContext: aToolContextThere is another enumaration method to access all strategies which are able execute commands in specified context:	CmdShortcutCommandActivation allExecutableInContext: aToolContext do: [:activationStrategy  | ]Each command defines the method which checks that given context is appropriate for command execution:	commandClass canBeExecutedInContext: aToolContext.Also you can ask the activation strategy about it:	anActivationStrategy canExecuteCommandInContext: aToolContextMy instances itself are not supposed to execute commands. For this purpose you  need an activator instances:	activator := anActivationStrategy newActivatorFor: aToolContextThe activator instance incapsulates the current context where command should be executed. And you can work with it as a self containt object.You can check if activator can execute the command:	activator canExecuteCommandYou can execute the command:	activator executeCommandInternally activator creates command instance and initializes it with the state related to the current context. But actual logic of these operations is implemented by command itself. So activator delegates it to the command:	command readParametersFromContext:  context 	command prepareFullExecutionInContext: context	command execute.Initialization logic of the command depends on the type of activation strategy. For example drag and drop activation will require two steps to prepare command:	command prepareExecutionInDragContext: aToolContextIt will initialize the state of command which is available from the context of drag operation.	command prepareExecutionInDropContext: aToolContextIt will initialize the state of command in the context of drop operation.Look at CmdCommand and CmdCommandActivator for details on these logic.I also provide simple method to work with all commands using activators prepared for the given context:	activationStrategyClass activateAllInContext: aToolContext by: [:activator | ]Also you can collect all these activators:	activationStrategyClass creatActivatorsExecutableInContext: aToolContext	Internal Representation and Key Implementation Points.    Instance Variables	contextDefinition:		<CmdContextDefinition>	definition of the context where command can be activated"
"ClyPackageQuery","I am abstract query of all packages from given scope.I only implement method related to the retrieved items type.So my subclasses still should implement main query methods"
"MCFileTreeVersionInfoWriter","Write for the version info"
"FLCharacter32Cluster","I'm a cluster for Unicode characters."
"ClyVariableReferencesQuery","I return all methods which reference one of the variables retrieved by given variableQuery.To create my instance use following expressions: 	ClyVariableReferences toVariablesFrom: aVariableQuery.	ClyVariableReferences from: aScope toVariablesFrom: aVariableQuery.Query argument here is supposed return variables, instances of ClyVariable subclasses. So it can be complex query instead of concrete variable query.  And for simple cases there is another set of expressions when you need references to existing list of variables: 		ClyVariableReferences of: aVariable.	ClyVariableReferences of: aVariable from: aScope.		ClyVariableReferences ofAny: { 		ClyInstanceVariable named: #x definedIn: Point.		ClyInstanceVariable named: #y definedIn: Point}.	ClyVariableReferences ofAny: variables from: aScope.Variables here are represented by subclasses of ClyVariable. 		I have few subclases which define specific meaning of reference like only readers or only writers. They redefine method #doesMethod:useVar: for this purpose.Internal Representation and Key Implementation Points.    Instance Variables	variableQuery:		<ClyVariableQuery>"
"TDictionaryComparingTest","A trait for test purposes"
"BaselineOfPharoBootstrap","This baseline describes packages included in the bootstrapped Pharo image. It is not supposed to be part of bootstrapped image because it is dependent on Metacello.This baseline includes several utility methods required to prepare data for the bootstrapping and initial image initialization."
"ClyMethodVisibilityGroupsTest",""
"MethodToolbar","A MethodToolbar is xxxxxxxxx.self example"
"GLMMorphicVariablePanesFinderRenderer",""
"MCMockClassA","This is a mock class. The Monticello tests manipulated it to simulate a developer modifying code in the image."
"RenrakuRuleHelp","Rules are constraint descriptions about entities. Think of a rule as a function that consumes an entity and produces a collection of a critiques about it (which can be empty if there are no violations)"
"CairoUTF8Converter","i use persistent buffer to convert strings to utf-8 strings (an input neede by cairo)"
"OCArgumentVariable","I model argument variables. By definition, an argument variable is always initialized, and can't be written to."
"RBInlineMethodFromComponentRefactoring","I am a refactoring for replacing method calls by the method implementation.Just like RBInlineMethodRefactoring,  I replace a message send by the implementation of that  message , but you can provide the componentwhere this implementation is taken from or choose one if there are move than one implementors.If the method implementation has some direct variable references, accessor for this variable are created (just as by the generate accessor refactoring)."
"IRBuilderTest",""
"CoverageRubricStyler","A styler that highlight with green all executed statement.For simplicity we extend from MetaLinkIconStyler"
"ClassListExample","ClassListExample new openOn: Object"
"CursorWithMask","A Cursor which additionally has a 16x16 transparency bitmap called a ""mask"".  See the comment of beCursorWithMask: for details on how the mask is treated."
"ZipStringMember","ZipStringMember instances are used to represent files that are going to be written to a ZipArchive.Their data comes from in-image strings, though."
"IRPopIntoRemoteTemp","pop into remote temp"
"MetacelloVersion",""
"FFICallbackFunctionResolution","I install callbacks as functions (to be used with ffiCall: later)I can register any callback with a name, the callback thunk will be used as an entry point for this function.I implement the option:  optCallbackCall 	Example: ========callAbsoluteMethod	 |  callback |	callback := FFICallback 		signature: #(double (double x)) 		block: [ :x | x abs ].	FFICallbackFunctionResolution register:  callback as:  #absolute.	self absolute: 42.0.absolute: aNumber	self ffiCall: #(double absolute (double aNumber)) options: #(+optCallbackCall)	"
"LibC","I'm a module defining access to standard LibC. I'm available under Linux and OSX, but not under Windows for obvious reasons :)"
"LGit_GIT_EBAREREPO",""
"CriticBrowserRulesGroup","I represent a group of rules in CriticBrowser tree view"
"OmMemoryStoreTest",""
"SettingPackageFilter","A SettingPackageFilter is a SettingFilter used to select settings from a given list of packages: a setting is kept only if the package in which it is defined is present in the given package listInstance Variables	packages:		<Collection>packages	- The collection of PackageInfo the filter is currently using"
"ClyRequestMethodPackageForEditorCommand","I am a command to request package from the user which should be used as editing method package"
"LabelledTextInputTest",""
"KMDispatchChainTest","SUnit tests for testing the dispatch chain"
"ClyMonticelloBrowserPlugin","I am very simple plugin to allow disable table decoration of dirty package items.Decoration is active only when I am installed into the browser"
"ClySwitchPackageViewModeCommand","I am a base class for commands which switch full browser package modeIt can be either raw packages or projects"
"LGitReturnCodeEnum",""
"SpecLayout","A SpecPresenter is a object used to describe a user interface"
"IceInvalidProjectReader","I am a reader for invalid project commits.I return an invalid project for those commits that are not the current checked out commit and do not have a .project file.This is because an invalid project cannot be fixed since it is already in the history."
"ActiveMetaContext","I am a process local variable that stores the currently active meta level "
"RGMonticelloTest","SUnit tests for monticello"
"IceTipToolbarDisplayModeIcon","I implement display mode ""just icons"""
"RxsRegex","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--The body of a parenthesized thing, or a top-level expression, also an atom.  Instance variables:	branch		<RxsBranch>	regex		<RxsRegex | RxsEpsilon>"
"TextConverter","The abstract class for all different type of text converters.  nextFromStream: and nextPut:toStream: are the public accessible methods.  If you are going to make a subclass for a stateful text conversion, you should override restoreStateOf:with: and saveStateOf: along the line of CompoundTextConverter."
"ProgressNotification","Used to signal progress without requiring a specific receiver to notify. Caller/callee convention could be to simply count the number of signals caught or to pass more substantive information with #signal:."
"AthensFlakeDemo","AthensFlakeDemo new openInWindow"
"TDictionaryAddingTest","A trait for test purposes"
"GLMFastTreePresentation","I'm a fast table presentation who introduces FTTableMorph into Glamour  as a Tree. Description--------------------I know how to render myself and I store some options for the Tree.  I keep some options specific to the FastTable inside a Dictionary. I work with GLMMorphicFastTreeRenderer to render the FastTable. I use TGLMFastTableFunctionsPresentation in order to manage some options.Public API and Key Messages--------------------You can use the public API of my super class. You also use the public API of TGLMFastTableFunctionsPresentation (See his class comment) and you can also use:- #maxDepth: anInteger 		to define a max depth for the tree.   		- #expandedUntil: aDepth 		this is use to expand the tree at the opening until a certain depth.		 - #strategy: aSymbole 		this is use to define a Strategy for the search or the filter inside a Tree. I can take in parameter #default, #rootsOnly, #allItems.                #default is selected by default, it will search/filter the tree for all visible rows.                      #rootsOnly will search/filter only the first level of the tree               #allItems will search/filter all the Tree and open the needed items. Do not use this if the tree is not finish.Example--------------------	GLMWrapper new		show:				[ :a | 			a fastTree				children: [ :x | x subclasses ];				enableFilterWithAction: [ :dataSource :pattern :item | item browse ];				strategy: #rootsOnly;				maxDepth: 3;				rootsExpanded ];		openOn: (Object subclasses) asArray Internal Representation and Key Implementation Points.--------------------    Instance Variables	parameters:		This is a Dictionary use to store some parameters of the presentation."
"FLPair","A test mock for pairs"
"RBMethodName","I represent a method name (selector and arguments) in the refactoring framework.I am used by refactoring operations - for example RBMoveMethodRefactoring.I have a selector name and a list of arguments and I use RBScanner to validate the syntax of my selector name.In the refactory framework I am used for representing a new method name, generated by the refactoring operation or requested by the caller.You can create instances of me by RBMethodName selector: 'color:' arguments:{'aColor'}.(RBMethodName selector:'color' arguments:{}) isValid."
"TestValueWithinFix","SUnit tests for a fix on #valueWithin:"
"RGSlice","A slice is an arbitrary container of elements (working unit)By inheritance it knows how to treat classes and methods"
"Margin","I represent a margin (for now of rectangle-based operations).It can be expressed as different objects:- A number. When specified using a number, it sets all the four values to be the same.- A point. When specified as a point, pairs top/bottom and left/right take their values from a point y and x. - Four numbers. They represent all the four directions.- A rectangle. (do not use this version because it is proposed just for migration and it may force you to create an unnecessary rectangle)."
"MetacelloCoreSymbolicVersionTest",""
"MetacelloMCVersion",""
"FFICalloutMethodBuilderTestContext","I'm a context for make tests run. I'm polymorphic with Context and in some way also with CompiledMethod (but just in the context of the execution of the tests for method builder)."
"MetacelloAllowLockedProjectChange",""
"LGit_GIT_EBUFS",""
"AthensTextMorph","this class is subject of changes/removal. do not use it."
"ClyTestCommand","I am a root of hierarchy of commands to run any kind of tests"
"ClyProjectTableIndentationDecorator","I decorate table of projects with full identation mode.So projects tree in the full browser shifts children together with collapsing items.I am always applied to the projects"
"T2TraitInTraitClass",""
"GLMCompileText","I am event indicating to the renderer to compile the code of the given presentation."
"RWBinaryOrTextStream","A simulation of a FileStream, but living totally in memory.  Hold the contents of a file or web page from the network.  Can then fileIn like a normal FileStream.Need to be able to switch between binary and text, as a FileStream does, without recopying the whole collection.  Convert to binary upon input and output.  Always keep as text internally."
"MetacelloRepositorySqueakCommonTestCase",""
"MCMethodDefinitionTest",""
"ClyUnclassifiedMethodGroupProvider","I provide unclassified method group"
"ZnFileUrlTests",""
"RubConfigurationChange","I am raised when the configuration of a view changes"
"CodeSearchingRule","A CodeSearchingRule is rule using a RBParseTreeSearcherfor the search.use #matcher: for setting the parse tree searcher."
"ColorMap","I'm a transformation of pixel values. I apply up to four masks and shifts to compute the transformed pixel value.I'm used when applying a BitBlt transfer, whenever pixels from a source to a destination have diferent depths. For further information refer to BitBlt class comments."
"CopyToClipboardDebugAction","A CopyToClipboardDebugAction copies a short debugging stack to the clipboard."
"RGContainer","A concrete container already knows how to treat classes, methods and packages. "
"SlotEnvironmentTest",""
"ClyInstantEnvironmentUpdateStrategy","I am default updating strategy for navigation environment. I force query result to notify observers immediatelly when any change was happen"
"UUIDGeneratorTests","I test the UUID Generator"
"GLMUpdateMorphicTest",""
"ClyQueryBrowserFilter","I am a query filter which specifically created for the query browser which can represent different kind of items in one list.I delegate actual testing logic to the actual object of given browser items:	actualObject matchesQueryBrowserFilter: selfThis method is implemented by methods, classes and class comments. So this objects can be shown and filtered in query browser.Implementors call be back with #matchesString: messge where I check given string for my pattern.I also provide special trick to filter items by script. To activate it the pattern string should be in form of one arg block. For example:	[ :each | each linesOfCode > 10 ] Such block will be evaluated with actual object of browser item.  Internal Representation and Key Implementation Points.    Instance Variables	badScript:		<Boolean>	scriptBlock:		<BlockClosure>"
"GLMKeyStroke",""
"ProvideAnswerNotification","Notify to provide an answer"
"ContextTempEyeElement","I am an eye element for temporaries in context"
"MorphChanged","I am raised when a morph property changed, and should be propagated to dependents"
"ManifestMultilingualTextConversion","Package for multilingual text conversion classes"
"FLMethodNotFound","I represent an error produced during materialization when a serialized method in a class or trait name doesn't exist (at Smalltalk globals)."
"IRStackCount","This keeps track of the stack count for the BytecodeGenerator."
"SugsNullContext","I define a default null suggestion context that provides no suggestions"
"ManifestNonInteractiveTranscript","Package for hosting classes to provide non-interactive Transcript (for headless scenario or other)"
"GTGenericStackDebugger","I am a browser that provides Smalltalk debugging functionality. "
"LazyTabPageRemoved",""
"RBVariableRefactoring","I am an abstract base class of refactorings modifying class or instance variables."
"MorphChangedWithArguments","I am an announcement raised when a Morph changed and need to propagate the information to dependents. In addition, I also propagate a value"
"RGClassInstanceVariableDefinition","A class instance variable definition"
"KMKeymapTest","SUnit tests for the key map"
"EpLogBrowserOperation","I represent an operation done in a EpLogBrowser."
"ZnMessageBenchmarkTests",""
"GTSettingBrowserTest",""
"OSTouchTwoFingersScrollEvent","I am the abstract class for all two fingers scroll events"
"SettingTokenFilter","A SettingTokenFilter is SettingFilter which makes use of a token (substring) in order to keep or not a SettingHandler.Instance Variables	token:		<String>"
"GTMockSpotterStream",""
"KSX1001","This class represents the domestic character encoding called KS X 1001 used for Korean."
"Context","Instance variables:	receiver: <Object> (self)	closureOrNil: <BlockClosure|nil> 		nil if I'm a method context		the blockClosure being executed if I'm a block context	method <CompiledMethod> 		method being executed if I'm a method context		method holding the block if I'm a block context	variable fields: <Object> temporary variables (including arguments)My instances hold all the dynamic state associated with the execution of either a method activation resulting from a message send or a block activation resulting from a block evaluation.	MethodContexts, though normal in their variable size, are actually only used in two sizes, small and large, which are determined by the temporary space required by the method being executed.MethodContexts must only be created using the method newForMethod:.  Note that it is impossible to determine the real object size of a MethodContext except by asking for the frameSize of its method.  Any fields above the stack pointer (stackp) are truly invisible -- even (and especially!) to the garbage collector.  Any store into stackp other than by the primitive method stackp: is potentially fatal."
"LGitTree",""
"SycSourceCodeMenuActivation","I represent activation of commands using separate source code menu.In Nautilus I was implemented as Suggestions menu"
"ShiftJISTextConverter","Text converter for Shift-JIS.  Mac and Windows in Japanese mode use this encoding."
"IceGitNetworkRemote","Base abstract class for SCP and HTTPS remotes."
"RBAddProtocolTransformationTest",""
"FFIExternalUnionTests","Tests for external unions"
"RBRemoveSubtreeTransformationTest",""
"RBRemoveReturnStatementTransformation","I am responsible for removing a return statement inside a method.Usage:| transformation |transformation := (RBRemoveReturnStatementTransformation			return: '^ variable'			inMethod: #methodBefore			inClass: #RBRemoveReturnStatementTransformationTest)			transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- Checks whether the method has a return.Observations about the transformation:- This transformation is straightforward: just remove the last node of the method.- In Pharo, return statements can also be declared inside blocks. In this case, the transformation will try to match return statement passed as argument and remove the return values in this method. If no matching return value is found, the transformation will remove the last node."
"ManifestIceberg","I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser"
"RBRefactoringClassesHelp","All exising RBRefactorings "
"ShAbstractClassChangeDetector","I can detect changes in the class structure.My subclasses provides three blocks:builderAccessor: a block to access the fill in the builder. classAccessor : a block to access in the old class.comparer: (optional) to compare both values.By default I have a  comparer. This is a block to compare the values from the old class and the builder.The subclasses can provide another comparer if they need to. "
"ClassWithAnnotationDefinedForUserSuperclass",""
"IceTipEditCredentialCommand","I open the edit dialog on the credential.I colaborate with the credential to know the specific class of the dialog model.Check #editModelClass in IceSshCredentials and IcePlaintextCredentials"
"VTermOutputStyle","I'm the style of a VTermOutputDriver.I have a font, a background and a styles and I'm able to modify them to change the color of font (for example) or to add stylesI can't delete my styles, to get a basic VTermOutputStyle you must create a new one."
"MCMockClassF",""
"OSWindowGestureHandler","I am a handler who can manage gestures and provide them informations on past and current touch events"
"ClyCritiquesTableDecorator","I decorate table of critiques with severity level icon"
"IceTipRemoveCredentialCommand","I remove a credential from the credential store."
"OCCleanBockTest",""
"ClyBrowserSearchDialogWindow","I a a search dialog to select one or multiples items from the queries objects.I am created by browser and users should call me using following methods: 	browser searchDialog 		requestSingleObject: 'Choose package' from: ClyAllPackages sorted.	browser searchDialog 		requestMultipleObjects: 'Choose classes' from: ClyAllClasses sortedI always force semi async execution of given query.In case when query result include just a couple of items I hide default view filters.To select items in the list users can use #enter key. To close dialog they can use #esc. By default filter is focused. And as soon as dialog openes user can type filter.If after filter there is only item in the list I will choose it when user submit the dialog.If there are multiple items I try to find the item with exact same name as filter text.Internal Representation and Key Implementation Points.    Instance Variables	browser:		<ClyBrowser>	itemsView:		<ClyQueryView>"
"DropListExample","A DropListExample is a simple example of how to use drop lists.self example"
"GlobalForTesting","I am used for testing"
"RBParseTreeRule","RBParseTreeRule is the abstract superclass of all of the parse tree searching rules. A parse tree rule is the first class representation of a particular rule to search for. The owner of a rule is the algorithm that actually executes the search. This arrangement allows multiple searches to be conducted by a single Searcher.Instance Variables:	owner	<ParseTreeSearcher>	The searcher that is actually performing the search.	searchTree	<RBProgramNode>	The parse tree to be searched."
"RBSmalllintTestDefinesEqualNotHashObject","This class should trigger the RBDefinesEqualNotHashRule critic."
"IceTipStatusBarItem","I'm a status bar item. I'm the most commonly used item and I will be displaying a text on the statusbar.My children can extend this behaviour."
"LGitDiffDelta","I represent the difference between two entities (e.g. two files). If one of the entities is new or deleted the ""nfiles"" field will hold be set to 1, otherwise it will be set to 2."
"GLMFallbackScrollListBrick","Use me in case something went wrong on production"
"MacStore","I'm a specific store for OSX file systems"
"WorldPresenter","I am a model representing Pharo World.This way, every spec application can be opened as the Pharo system window as window, to simulate native a application."
"ZnDigestCredential","I am ZnDigestCredential, a concrete subclass of ZnCredential and subclass of ZnBasicCredential.I implement digest HTTP authentication.I hold a nounce and opaque.Part of Zinc HTTP Components."
"OSVMWindowHandle","An OSVMWindowHandle is created by VMWindowDriver. "
"FLDelayedSerializerMock",""
"BadEqualer","I am an object that doesn't always report #= correctly.  Used for testing the EqualityTester."
"GLMNoStrategy","This is the default strategy that does nothing (an implementation of the Null pattern)"
"T2TraitWithConflicts","Unit test for trait conflict scenarios"
"LGitPushStatusForeachCallback",""
"MalDijkstra","Dijkstra's algorithm is an algorithm for finding the shortest paths between nodes in a graph, which may represent, for example, road networks. It was conceived by computer scientist Edsger W. Dijkstra in 1956 and published in 1959. The algorithm exists in many variants; Dijkstra's original variant found the shortest path between two nodes, but a more common variant fixes a single node as the ""source"" node and finds shortest paths from the source to all other nodes in the graph, producing a shortest path tree. (source: Wikipedia)"
"SortedCollectionTest","SUnit tests for sorted collections"
"ZnResponse","I am ZnResponse, representing an HTTP Response consisting of a status line, headers and an optional entity (body).I am a ZnMessage.I can be used for generating and parsing.Part of Zinc HTTP Components."
"ClyDeprecatedItemTag","I mark deprecated objects like methods or classes "
"FileExists","I am raised on an attempt to create a file or directory over top of an existing file."
"RBCodeCruftLeftInMethodsRule","This smell arises when a breakpoint,  logging statement,  etc is found in a method. This debugging code should not be left in production code.  Here are messages currently checked: clearHaltOnce,  doOnlyOnce: ,  halt, halt:   onCount:  object2, haltOnCount: , haltOnce, hatIf: , inspectOnCount: , inspectOnce, inspectUntilCount: , rearmOneShot, setHaltOnce, flag: , isThisEverCalled, isThisEverCalled: , logEntry, logExecution, logExit, needsWork and Transcript  messages."
"Dictionary","I am a collection of elements that associate a key object with a value object.Description--------------------------I  can be viewed from one of two perspectives: a set of associations, or a container of values that are externally named where the name can be any object that responds to #=. The external name is referred to as the key.  I inherit many operations from Set.I use the #= method to locate a key. If you want a collection that use the #== method (same pointers) you can use an IdentityDictionary.I'm used when we need a collection of objects which I can access with a key. For example if you associate some words with a definition, the word will be the key and the definition will be the value. Both of them can be any kind of objects.Internally I use Associations. The Association class can help to use me. (See examples lower)Public API and Key Messages--------------------------- #at: aKey put: aValue / #at: aKey ifAbsentPut: aValue 		allow to add an element.  - #at: aKey / #at: aKey ifAbsent: aBlock / #at: aKey ifPresent: aBlock ifAbsent: aBlock 		allow to access my values.- #keysDo: aBlock / #valuesDo: aBlock / #associationsDo: 		allow to iterate on me effectivelyExamples --------------------------To create a dictiony with indexes as key: 	Dictionary withAll: #(7 3 1 3)   		""returns:  a Dictionary(1->7 2->3 3->1 4->3 ""To use Objects as key (here symbols): 	colors := Dictionary new 				at: #yellow put: Color yellow; 				at: #blue put: Color blue;				at: #red put: Color red;				yourself.					colors at: #yellow. 	""returns:  Color yellow""	colors keys          ""returns: a Set(#blue #yellow #red)""	colors values       ""returns:  {Color blue. Color yellow. Color red}""  You can also directly use Associations: 	colors := Dictionary with: #yellow -> Color yellow with: #blue -> Color blue.	colors add: #red -> Color red.		colors associations  	""returns: {#yellow->Color yellow. #red->Color red. #blue->Color blue}""		Here some more examples: 	colors := Dictionary newFrom: { #blue->Color blue . #red->Color red . #yellow->Color yellow }. 	colors removeKey: #blue. 	colors at: #red ifPresent: [ :color |  color darker] ifAbsent: [ Error signal: 'The red color should be here.' ] .		""return: (Color r: 0.92 g: 0.0 b: 0.0 alpha: 1.0)""	colors associations 		 ""{#yellow->Color yellow. #red->Color red}"" Internal Representation and Key Implementation Points.--------------------------I am just a collection of associations. If I need my keys I will just return the keys of my associations. Idem for my values.I use the #= method in order to manipulate my keys. I cannot have two associations that are equals with the #= method."
"RBBrowserSourceRefactoringHelp","This is the chapter of the refactoring help book about source code refactorings available from System Browsers code pane."
"ClyTestedMethodProperty","I mark methods which has covering test. I include information about result of such test. Internal Representation and Key Implementation Points.    Instance Variables	coveringTest:		<TestCase>	testResult:		<ClyTestResultProperty>"
"ClyOverriddenMethodGroupProvider","I provide ""overridden"" method group which includes all methods of given classes which are overridden by subclasses"
"IceRemoteNotFoundError",""
"RFMethodReification","I reify the method where the link is installed.Note: this is the *current* method, that is, the one that has the code of the link.it is the same that you would get with ""thisContext method"", without the need to access the context (which is slow)"
"IceGitHubTreeCommand","I represent all the Github commands that work on a Tree item"
"GLMBrickDarkThemer",""
"RBRefactoryChangeManager","I am a change manager keeping track of all changes applied by the refactory manager. Typically there is only a singleinstance of me used in the system, so all changes can be globally added/inspected/ executed and undone/redone.The size of my undo list is configurable in the settings browser."
"MetacelloRepositoriesSpec",""
"AthensTextDisplayCommand","An abstract base class for all text rendering commands.A text rendered takes a stream (or list) of my (sub)instances and in that way it renders the text"
"ManifestRenraku",""
"IceTipCommandStrongSelectionActivation",""
"OSStateModifiers","i holding a collection of various key/button modifier flags, usually carried by certain events and accessible through #modifiers message."
"RFASTClosureAnalyzer","We need to analyse the #after hook: it is a block"
"ClyQueryExampleReturningScopeBasis2",""
"RBRenameTemporaryVariableTransformationTest",""
"RBMetaclass2","I represent the class side of a class in a refactoring namespace. I shouldn't be created directly, but always be part of a refactoring namespace.My  namespace usally knows me and my non meta class."
"RFVariableReification","I reify #variable- GlobaVar (or subclass) - Slot for ivars "
"SycVariableCommand","I am a base class for command which perform operations with given collection of variables. Internal Representation and Key Implementation Points.    Instance Variables	variables:		<Collection of<Variable>>"
"GLMBrickLayoutState",""
"SystemResolver","I resolve origins that are related to the currently running Smalltalk system, using primitives provided by the VM. "
"RBInlineAllSendersRefactoring","I am a refactoring for inlining code of this method.The call to this method in all other methods of this class is replaced by its implementation. The method itself will be removed.For example, a method foo	^ 'text'.	is called inbaz	|a|	a:= self foo.	^ self foo.	inlining in all senders replaces the call to method foo, with its code:baz	|a|	a:= 'text'.	^ 'text'."
"EUCJPTextConverter","Text converter for Japanese variation of EUC."
"FFIConstantHandleType","I'm a constant handle type (see ==FFIConstantHandle==  comment)."
"FTCellMorph","I represent a cell for the table. Description------------------I contains other Morph that need to be render. I should be answered in FTDataSource>>#cellTable:column:row:, with this method a FTTableContainer can display all the needed cells.Technically, FTDataSource can answer  any kind of morph, but I'm better prepared  for the role so is recommendable  to  use me.Public API and Key Messages-------------------- #withTopSeparator 		this is use to put a separator before the cell. (For exmple on a FTOutlineDataSource).Example-------------------FTCellMorph new		addMorphBack: 'Example' asMorph;		withTopSeparator;		openInWindow. Internal Representation and Key Implementation Points.-----------------    Instance Variables	topSeparator:		This is a boolean to know if the cell need a topSeparator."
"ZnRequestResponseHandledEvent","ZnRequestResponseHandledEvent signals that the handler (delegate) processed a request and produced a response in duration in milliseconds. This duration is thus the time taken by the application itself."
"ManifestCodeImport","Package manifest for package metadata"
"RGElementDefinition","RGElementDefinition is the abstract class for representing elements of a class-alike definition (i.e., methods, variables, comment).parent holds the RGClassDefinition or RGMetaclassDefinition defining this element.		Now a RingEntityDefinition offers two APIs: one that is generic and works for all the source code entities and this is the one we just presented: parent, parentName and realParent. Having such interface is important to build generic tools that could manipulate any entities in a polymorphic way (yes no isKindOf: everywhere).In addition, a ring method definition offers a specific interface that should only be used when you know that you are solely manipulatespecific entity such as class element: method definition, class comment, and variables. Here is the equivalence table	realParent 				realClass	parent					ringClass	parentName			className	For example for a methodDefinition we will have the following:GENERIC API------------------* To access the ring class definition name, use parentName	aRGMethodDefinition parentName	Example:	(Point>>#dist:) asRingDefinition parentName		->  #Point		* If you have a complete model where classes and methods are ring definition, to access the ring class definition , use parent	aRGMethodDefinition parent	Example:	aRGMethodDefinition(Point>>#dist:) parent		->  aRGClassDefinition(Point)		* If you want to access the smalltalk class that contains the compiledMethod that is represented by a ringMethodDefinition, use realParent	aRGMethodDefinition realParent	Example:	(Point>>#dist:) asRingDefinition realParent		->  Point		CLASS Element specific API------------------------------------------* The message class returns the class of the object :). Yes as you see we could not use class and className because class is already used to refer to the class of the object.Example:	(Point>>#dist:) asRingDefinition class		->  RingMethodDefinition		* The message className returns the name of the ring class defining the reingMethodDefinition.Example:	(Point>>#dist:) asRingDefinition className		->  #Point				* If you have a complete model where classes and methods are ring definition, to access the ring class definition , use parent	aRGMethodDefinition ringClass	Example:	aRGMethodDefinition(Point>>#dist:) ringClass		->  aRGClassDefinition(Point)				* If you want to access the smalltalk class that contains the compiledMethod that is represented by a ringMethodDefinition, use realClass	aRGMethodDefinition realClass	Example:	(Point>>#dist:) asRingDefinition realClass		->  Point"
"FFIIntegerType","A generic (abstract) integer type."
"MorphicEventDispatcher","The class represents a strategy for dispatching events to some immediate child of a morph. It is used by morphs to delegate the somewhat complex action of dispatching events accurately. "
"HEReplaceOnDuplication","When there is a duplication I replace the existing version in the target image with the version I am loading from the hermes package."
"ZnServerTransactionTiming","I am ZnServerTransactionTiming.I hold timing information related to the handling of an HTTP transaction by a server."
"ClassWithoutAnnotations",""
"RBMetaclass","I represent the class side of a class in a refactoring namespace. I shouldn't be created directly, but always be part of a refactoring namespace.My  namespace usally knows me and my non meta class."
"EpRedo","I represent a ReDo operation performed in a EpLogBrowser."
"TestCommandLineHandler","Usage: test [--junit-xml-output] [--fail-on-failure] [<package> ...]	--junit-xml-output    output the test results in a junit compatible format	--fail-on-failure     if there is a test error or failure, it will exit with error code 1	--fail-on-error       if there is a test error it will exit with error code 1	--save                save after executing tests	--stage-name=aName						it adds a prefix to the xml generated, this is useful 					when running in the CI infrastructure	 <package>            a String matching a package name	Examples:	#Run all the tests in the Tests-Exceptions package	pharo Pharo.image test Tests-Exceptions		#Run all the tests in packages matching Test-.* and KernelTests	pharo Pharo.image test ""Tests-.*"" ""KernelTests-.*""		# Run test on a Hudson/Jenkins server	pharo Pharo.image test --junit-xml-output ""Tests-.*"" ""KernelTests-.*""	"
"BlockLocalTempCounter","I am a support class for the decompiler that is used to find the number of local temps in a block by finding out what the stack offset is at the end of a block."
"AthensCubicBezier","Cubic bezier with 4 control points encapsulation.Main purpose of this class is to keep subdivision logic in clean and separate place"
"ClyHighlightingSelection","I represent highlighted table items.When data source is changed I responsible to update highlighted rows of table.For example when user expands tree node highlighted indexes should be shifted when expansion happens before selection. Same should be done when items of data source are removed or added.I just override how set up table selection by applying highlighted row indexes to table"
"ManifestSystemFinalization","Finalization and Ephemerons"
"TableContainerPresenter","I am a model for a container with table layout. My purpose is to hold multiple subwidgets to glue them together.I should not be used directly"
"IceTipRepositoryContext",""
"OpenOnNilExample","I am the component of DynamycSpecExample used for nil.self exampleI display simply an TextInputFieldPresenter, disable to don't be edditable by the user."
"SDL_WindowEvent","SDL2 library structure"
"IceTipBrowsePackageCommand","Command that browses the selected package as it is loaded in the image."
"GLMSingleUpdateAction","This class specifies that the updating announcement should come only from the single announcer object."
"ClyVariableReadersQuery","I return only methods which read given variables"
"DelayWaitTimeout","DelayWaitTimeout is a special kind of Delay used in waitTimeoutMSecs: to avoid signaling the underlying semaphore when the wait times out."
"WindowAnnouncementTest",""
"GLMDynamicMorphicTest",""
"ClySuperclassScope","I represent scope of all superclasses of my basis classes.  I show all superclasses, their methods and variables"
"WeakAnnouncerTest","SUnit tests for weak announcements"
"NullStream","I am a stream that does nothing i.e. generates and consumes an infinite number of elements (NullObject pattern). I can be used as an equivalent of /dev/null (for example a logging in off mode) or for performance benchmarks."
"MCWorkingCopyTest",""
"RubTextScrollPane","I am a text morph with a scrollbar "
"GTInspectorContextIndexedTempNode","I am a variable node for representing an  indexed variable stored in a  Context object that does not have a name.  These are values that are pushed and popped on the stack when executing message sends. For example, the parameters neede to perform a message send are pushed in a Context object."
"ClyTaggedMethodsQuery","I return methods which are marked by particular tag.To instantiate my instances use following expressions: 	ClyTaggedMethods by: #accessing.	ClyTaggedMethods by: #accessing from: aScope Internal Representation and Key Implementation Points.    Instance Variables	tag:		<Symbol>"
"FT2Library","This is a wrapper for the global 'library' in the plugin.It is provided for the use of Cairo APIs that take an FT_Library argument."
"HiTestNode","I am a node in Hiedra tests and examples."
"ZnNetworkingUtils","I am ZnNetworkingUtils holding various utilities related to HTTP networking.My class side is a general API.My instance side is a factory.ZnNetworkingUtils default socketStreamClass: SocketStream.ZnNetworkingUtils default socketStreamClass: ZdcSocketStream.Part of Zinc HTTP Components."
"ZnEntityReader","I am ZnEntityReader, I help reading ZnEntities from a stream given meta data in headers.I deal with chunking and gzip decoding.I have several options:	- to read streaming entities, where the client has to do the actual reading	- to read binary entities, where textual content is not interpreted	- to allow reading up to end, when there is no content length setPart of Zinc HTTP Components."
"MCMcmWriter","Writer for Metacello MCM"
"NECInstVarTypeGuesserTest",""
"ClyMethodQuery","I am abstract query of all methods from given scope.Subclasses should define concrete condition which all retrieved methods should satisfy: - selectsMethod: aMethod Scope should support #methodsDo: which I use to collect and filter all available methods."
"ReCritiqueDescriptionViewed","Happens when someone clicks a question mark and a popup with critic's description appears"
"GLMScrollPaneBandBrick","A GLMScrollPaneBandBrick is a band that is used with GLMScrollPaneBrick. It supports force updating of Morph bounds that is triggered after small delay to have no influence on performanceInstance Variables	asyncTask:		<GLMAsyncTask>	scrollpane:		<GLMScrollPaneBrick>	shouldLayoutMorphs:		<Boolean>asyncTask	- asynchronous task used to delay the update of morph boundsscrollpane	- reference to my scrollpane, so that I could update scrollbarshouldLayoutMorphs	- true if I need to update morphic bounds, false otherwise"
"SpecStubCheckBoxAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"RBPushDownMethodRefactoring","I am a refactoring for moving a method down to all direct subclasses.My preconditions verify that this method isn't refered  as a super send in the subclass. And the class defining this method is abstract or not referenced anywhere."
"RBPatternBlockNode","RBPatternBlockNode is the node in matching parse trees (it never occurs in normal Smalltalk code) that executes a block to determine if a match occurs. valueBlock takes two arguments, the first is the actual node that we are trying to match against, and second node is the dictionary that contains all the metavariable bindings that the matcher has made thus far.Instance Variables:	valueBlock	<BlockClosure>	The block to execute when attempting to match this to a node."
"MCSerializationTest",""
"ClyTraitChild2Child",""
"NameLookupFailure","Signals that a name lookup operation failed.	hostName	hostName for which the name loopup failed"
"FFITestArrayStructure","An array  structure for test purposes"
"SymbolTest","This is the unit test for the class Symbol. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"GLMHorizontalBandBrick","A GLMHorizontalBandBrick is a simple Brick with width that shrinks to wrap  subbricks.Usually used within horizontal scroll panes"
"OCMethodScope","I am the scope for a Method"
"FFI_x86_64","I represent x86_64 architectures."
"IceTipNewBranchFromIssueCommand","icon"
"RBVariableReferencedOnceRule","Checks for instance variables that might better be defined as temporary variables. If an instance variable is only used in one method and it is always assigned before it is used, then that method could define that variable as a temporary variable of the method instead (assuming that the method is not recursive)."
"IceAbstractCredentials","I represent the common behavior of all iceberg credentials."
"NNavNavigateTest","I tests the navigations directions"
"MCStWriterTest",""
"RubMorphEdited","I am raised when a morph is edited"
"Base64Tests","Test for user level Base64 access"
"GTDebuggerHelp","A utility class containing the help for GT Debugger.Customs debuggers that want to provide a help topic should create a subclass and override GTMoldableDebugger class>>#helpClass.I dynamically build and display  the list of actions  available for a debugger."
"ManifestSpecHelp","Help descriptions for Spec UI framework"
"ClyOverridingSubclassesChanged","I represent event when superclass (overriddenSuperclass) of some classes is changed. In that case all subclasses which could override his methods are also changed: their methods should update the ""override status"".Read more details in superclass comment. Internal Representation and Key Implementation Points.    Instance Variables	overriddenSuperclass:		<Class>"
"MetacelloClearStackCacheNotification",""
"LabelledList","I am a LabelledContainer specialized to manage a ListPresenter.See LabelledContainerself exampleI provide the accessor list to be more intuitive than subwidget.I provide shortcuts for the most common methods of the list api to avoid the use of the DoesNotUnderstand or the writing of long chain of accessors."
"EyeDateAndTimeInspector","I am EyeDateAndTimeInspector.I am an EyeInspector.I am a specialized Inspector for DateAndTime.I show  all individual elements by name, as well as a UTC representation."
"InputTextDropList","I am an elementary Spec widget that associates an TextInputField and a DropListPresenter.self exampleI provide accessors dropList and input and shortcuts for the most common methods of their api."
"KMShiftModifier","I represent the Shift key modifier. Look at my superclass for a more detailed explanaition."
"OSTouchThreeFingersScrollEvent","I am the abstract class for all three fingers scroll events"
"RBSmalllintTestClassNotReferencedObject","This class should trigger the RBClassNotReferencedRule critic. All other classes in this hierarchy must be referenced somewhere. After adding a class to the hierarchy, evaluate the following to ensure it has at least one explicit reference:	RBSmalllintTestSuperclassObject updateDefaultExplicitClassReferences."
"MetacelloGoferCommit",""
"LabelledInputTextDropListTest",""
"OSPlatform","An OSPlatform is an abstract representation of a 'OS platform'.Platforms can be hierarchical, e.g., a ""general"" platform as superclass and more specific platforms as subclasses as long as the subclasses provide sufficient means to identify themselves.The original implementation was for Tweak.Current		holds the current OSPlatform subclassArchitectural considerations:most platform specific methods that need to be added to the platform class should be in the form of extensions rather then adding them directly to this package. Otherwise the platform class will degenerate very quickly into a dependence hub for all kinds of sub systems."
"ClyIconProperty","I am used to mark objects with icon.To instantiate me execute:	ClyIconProperty named: aSymbol  Internal Representation and Key Implementation Points.    Instance Variables	iconName:		<Symbol>"
"ScrollSyncExample","I am an example that exposes to the world how to use a ScrollPane announcement to have a nice morph being in sync with the current vertical scrollbar position.self example"
"SycBrowseClassCommand","I am a command to open browser on given class"
"ZnCharacterEncoderTests",""
"RBMoveInstVarToClassRefactoring","RBMoveInstVarToClassRefactoring knows how to move instance variable from one class to another.Instance Variables	newClass:		<RBClass>newClass	- class, in which user moves an instance variable"
"IceTipLoadPackageCommand","Command that loads the current non-loaded selected package"
"ClyClassGroupProvider","I am a root of hierarchy of class group providers.My subclasses must build class groups for given package scope.They should implement following method: - classGroupsIn: aPackageScope do: aBlockIt should create class group instances and pass them into the block.Look at ClyClassGroup comment to see how create groups."
"ClyTextEditorToolMorph","I am a root for browser tools which requires text editor.I install hooks into standard text morph to intercept all navigation requests and evaluated by Calypso logic.Also I provide support for smart suggestions.My subclasses should implement two methods: - editingText The text which is actually edited - applyChanges The operation to accept editing text changes Internal Representation and Key Implementation Points.    Instance Variables	applyingChanges:		<Boolean>	changesCancelRequested:		<Boolean>	textModel:		<RubScrolledTextModel>	textMorph:		<RubScrolledTextMorph>"
"NECEntryDescription","A NECEntryDescription is a holder for some information to be displayed."
"GTSpotterStreamMock",""
"GTIRBrowser","This is a simple browser that displays the Opal IR and previews each instructions on the source code.Example:self openOn: (self>>#compose) ast ir"
"LGitRemoteCallbacks","/** * The callback settings structure * * Set the callbacks to be called by the remote when informing the user * about the progress of the network operations. */"
"IceUnbornProjectReader","I create unborn projects from a commitish if it is HEAD and it does not have a '.project' file."
"TextMorphForFieldView","Single-line text field editor with DialogWindow key integration (return for default, escape for cancel) and keyboard focus navigation (tab/shift-tab)."
"GLMCompositePresentationTest",""
"IRPushClosureCopy","Instruction push closure copy bytecodeI am modelled as a Jump as the bytecode of the block is inlined into the method, with the execution jumping over these embedded bytecodes. "
"ClyNoTagMethodGroup","I am group of unclassified methods. I include only methods without any tag"
"RGMetatraitDefinition","RGMetatraitDefinition is a concrete representation of metaclasses of traits"
"GLMAlertBrick",""
"ManifestCodeExportTraits","Package includes trait extensions useful for export of code"
"CombinedChar","Compositions classVar is a:<Dictionary       key: firstLetter charCode       value: (Dictionary             	  key: diacritical charCode              	 value: combined charCode)>	combined instVar is a <Character>"
"ClassAnnotationTestCase",""
"PharoCommandLineHandler","Usage: [<subcommand>] [--help] [--copyright] [--version] [--list] [ --no-quit ]	--help       print this help message	--copyright  print the copyrights	--version    print the version for the image and the vm	--list       list a description of all active command line handlers	--no-quit    keep the image running without activating any other command line handler	--deploymentPassword if a password needs to be used by the user to launch the command	<subcommand> a valid subcommand in --list		Preference File Modification:	--preferences-file   load the preferences from the given <FILE>	--no-default-preferences    do not load any preferences from the default locations	Documentation:A PharoCommandLineHandler handles default command line arguments and options.The PharoCommandLineHandler is activated before all other handlers. It first checks if another handler is available. If so it will activate the found handler."
"TIterateSequencedReadableTest","A trait for test purposes"
"CheckboxButtonMorph","Checkbox/radio - button only."
"RPackageTraitSynchronisationTest","SUnit tests for RPackage trait synchronization"
"HEInteger","I represent an Integer.I am stored as:   - sign (1 for negative, 0 for possitive)   - a byte array of the content.This allows to serialize any given Integer in the image"
"PragmaAdded","A PragmaAdded is announced by a PragamColllector when a method defined with an acceptable pragma according to the PragmaCollector filter is added.Instance Variables"
"SDL_SysWMinfo_WindowsRTInfo","A structure that contains WindowsRT specific information about a window. "
"FreeTypeFace","Do not rearrange these fields!"
"SpecDemoPage","A superclass for particular Spec demo pages, that need to define a page name and priority in the list of demos."
"ManifestRingCoreContainers","Deprecated package for Ring Core containerss"
"OrderedIdentityDictionary","An IdentityDictionary version that uses == instead of = for key comparing.For more information about my usage, check OrderedDictionary and Dictionary comments.Examples------------------	object := Object new.	otherObject := Object new.	dict := OrderedIdentityDictionary new.	dict		at: object put: 1;		at: otherObject put: 2.	dict.		""returns: an OrderedIdentityDictionary(an Object->1 an Object->2)""	dict at: object put: 3.	dict 		""returns: an OrderedIdentityDictionary(an Object->3 an Object->2)"""
"DateModel","This is deprecated class because the original class DateModel was renamed to DatePresenter. You should stop to use this class and modify your code to use DatePresenter."
"LGitCommit","A LGitCommit represents a specific commit and the associate information.Instance Variables	handle:		NBExternalObjecthandle	- the handle to the external data object"
"MetacelloVersionNumber","# Metacello version formatThanks to [Mozilla Toolkit version format](https://developer.mozilla.org/en/Toolkit_version_format) for inspiration.##Version FormatA version string consists of one or more version parts, separated with dots or dashes.A version part with a leading dot is numeric. A version part with a leading dash is string.The rationale behind splitting a version part into a sequence of strings and numbers is that when comparing version parts, the numeric parts are compared as numbers, e.g. '1.0-pre.1' < '1.0-pre.10', while the strings are compared bytewise. See the next section for details on how versions are compared.##Comparing versionsWhen two version strings are compared, their version parts are compared left to right. Empty parts are ignored.If at some point a version part of one version string is greater than the corresponding version part of another version string, then the first version string is greater than the other one.If a version string has extra parts and the common parts are equal, the shorter version string is less than the longer version string (1.0 is less than 1.0.0).Otherwise, the version strings are equal. ##Comparing version partsVersion parts are also compared left to right, A string-part that exists is always less-then a nonexisting string-part (1.6-a is less than 1.6).Examples```1 == 1. < 1.0 == 1..--0< 1.1-a < 1.1-aa < 1.1-ab < 1.1-b < 1.1-c< 1.1-pre < 1.1-pre.0 < 1.1-pre.1-a < 1.1-pre.1-aa < 1.1-pre.1-b < 1.1-pre.1< 1.1-pre.2< 1.1-pre.10< 1.1 < 1.1.0 < 1.1.00< 1.10< 2.0```"
"GLMBrickGeneralWrapper",""
"KMModifier","I'm an abstract class representing a key modifier. A modifier is a key that is pressed to modify the value of a following key. For example, valid modifiers are Alt, Ctrl, Cmd (only for macosx), Shift. Additionally, I could be a composed modifier, combining several of the named above. For example, I could have a value of Alt + Ctrl."
"MCGemstoneRepository","An explicit subclass of MCHttpRepository to provide a template for gemstone repositories."
"IceEmptyNode","I am a null object representing an empty node of a tree. I'm used together with IceNode."
"RubFindReplaceService","RubFindReplaceService default newDialog openInWorldRubFindReplaceService "
"AbstractMorphicAdapter","I am an abstract class providing all the properties shared amongs all the morphic specific adapters"
"SDL_GameController","I represent a handler for a game controller coming from SDL2. A game controller is a joystick with an mapping. According to the SDL2 documentation, if a game es being executed via Steam, the game controller mapping is provided automatically."
"GLMRenderer","A GLMRenderer is the abstract class for the renderer hierarchy. This should be subclassed for each rendering platform (e.g. Morphic)"
"ImmediateLayout","I am the special layout for SmallIntegers.SmallIntegers are typically implemented as tagged pointers and thus require a special format."
"IceTipRemoteActionContext","I'm a base context for remote action contexts (pull, push)"
"ZnDispatcherDelegate","I am ZnDispatcherDelegate, doing a straight-forward dispatching to mapped URLs.ZnDispatcherDelegate API:(server := ZnServer startDefaultOn: 9090)	delegate: (ZnDispatcherDelegate new 		map: '/hello' to: [ :request :response | response entity: (ZnEntity html: '<h1>hello server</h1>') ];		map: '/counter' to: [ :request :response | counterApplication handleRequest: request response: response ])."
"WatchpointTests",""
"TextAlignment","I'm a Text attribute that tells how content should be aligned.TextMorph new   newContents: (Text streamContents: [:aStream| 										aStream 											nextPutAll: 'Left flush' asText; 											cr;											nextPutAll: ('Centered' asText addAttribute: TextAlignment centered);  											cr;											nextPutAll: ('Right flush' asText addAttribute: TextAlignment rightFlush);  											cr ]);  openInWindowLabeled: 'TextAlignment demo'"
"GLMPopupBrickCloser","I am a popup closer responsible for closing a popup if any of my predicates are activated as the result of an event"
"GLMPagePopedAndReplaced",""
"EyeEditor","I am an abstract view model for editors displayed in the inspector"
"SycPushDownMethodCommand","I am a command to push down given methods"
"IceTipTreeSelectingDataSource",""
"PickOneSettingDeclaration","A CheckListSettingDeclaration is a setting for which the value domain is a list. Each element of the list is an instance of FixedSettingValue. If domainValues is set, then the list of valid values is constant (initialized at declaration time). Instead, if getter is set, then the setting list is always dynamically computed. See SettingManager comment for more explanations. Instance Variables"
"GoferOperation","Common superclass of Gofer operations"
"RecentMessageList","MessageList is a simple object that holds a set of ordered method definitions.See MessageList example for an example.MessageList exampleInstance Variables:	methodReferenceList	<Collection>"
"BaselineOfBasicTools","This baseline is used to generate Pharo images from the local clone of pharo-project/pharo repository. Depends on:- BaselineOfUILoad type: - atomicInstalls:- SUnit UI- BlueInk- Nautilus- NECompletion- ProcessBrowsers- profillers- different Metacello repositories- Monticello GUI- ProfStef- Athens..and some other packages"
"MCRepositoryInspector","Inspector for a repository"
"RBPushDownMethodTest",""
"TextHighlightByBounds","Definition of a clickable highlighted range of text with optional borders."
"ManifestGraphicsPrimitives","Primitive graphics support such as support for BitBlt and Bitmaps"
"OmFileStoreReadingError","I am a notification raised when a OmFileStore has a problem reading an entry from its file."
"MetacelloRemoveMemberSpec",""
"ColorSelectorDialogWindow","Standard dialog for selecting a colour by HSVA colour selector, picking from the screen or editing of values."
"RubSmalltalkCommentMode","I represent the mode to use for editing class comments"
"DisplayScreen","There is only one instance of me, Display. It is a global and is used to handle general user requests to deal with the whole display screen. 	Although I offer no protocol, my name provides a way to distinguish this special instance from all other Forms. This is useful, for example, in dealing with saving and restoring the system.	To change the depth of your Display...		Display newDepth: 16.		Display newDepth: 8.		Display newDepth: 1.Valid display depths are 1, 2, 4, 8, 16 and 32.  It is suggested that you run with your monitors setting the same, for better speed and color fidelity.  Note that this can add up to 4Mb for the Display form.  Finally, note that newDepth: ends by executing a 'ControlManager restore' which currently terminates the active process, so nothing that follows in the doit will get executed.Depths 1, 2, 4 and 8 bits go through a color map to put color on the screen, but 16 and 32-bit color use the pixel values directly for RGB color (5 and 8 bits per, respectivlely).  The color choice an be observed by executing Color fromUser in whatever depth you are using."
"IceTipToolbarDisplayMode","I'm a toolbar display mode.Toolbars can be displayed in different ways: icons and labels (the default), just icons and just labels (other configurations could be added).My children implement this display modes.aToolbar displayModel: IceTipToolbarDisplayMode modeIconAndLabel"
"NECInstVarEntry","I represent an instance variable."
"SharedPoolTest","Tests related to SharedPool"
"AllocationTest","Test originally from Andreas Raab"
"OSTouchActionPointerEvent","Superclass of all the pointer Event	Can be a finger or something else."
"RBOverridesSpecialMessageRule","Checks that a class does not override a message that is essential to the base system. For example, if you override the #class method from object, you are likely to crash your image. #classShouldNotOverride returns the list of messages which should not be overriden."
"Color","This class represents abstract color, regardless of the depth of bitmap it will be shown in.  At the very last moment a Color is converted to a pixelValue that depends on the depth of the actual Bitmap inside the Form it will be used with.  The supported depths (in bits) are 1, 2, 4, 8, 16, and 32.  The number of actual colors at these depths are: 2, 4, 16, 256, 32768, and 16 million.  (See comment in BitBlt.)  To change the depth of the Display and set how many colors you can see, execute: (Display newDepth: 8).  (See comment in DisplayMedium)	Color is represented as the amount of light in red, green, and blue.  White is (1.0, 1.0, 1.0) and black is (0, 0, 0).  Pure red is (1.0, 0, 0).  These colors are ""additive"".  Think of Color's instance variables as:	r	amount of red, a Float between 0.0 and 1.0.	g	amount of green, a Float between 0.0 and 1.0.	b	amount of blue, a Float between 0.0 and 1.0.(But, in fact, the three are encoded as values from 0 to 1023 and combined in a single integer, rgb.  The user does not need to know this.)	Many colors are named.  You find a color by name by sending a message to class Color, for example (Color lightBlue).  Also, (Color red: 0.2 green: 0.6 blue: 1.0) or (Color r: 0.2 g: 0.6 b: 1.0) creates a color. (see below)	A color is essentially immutable.  Once you set red, green, and blue, you cannot change them.  Instead, create a new Color and use it.		Applications such as contour maps and bar graphs will want to display one of a set of shades based on a number.  Convert the range of this number to an integer from 1 to N.  Then call (Color green lightShades: N) to get an Array of colors from white to green.  Use the Array messages at:, atPin:, or atWrap: to pull out the correct color from the array.  atPin: gives the first (or last) color if the index is out of range.  atWrap: wraps around to the other end if the index is out of range.		Messages:	mixed: proportion with: aColor	Answer this color mixed with the given color additively. The proportion, a number between 0.0 and 1.0, determines what what fraction of the receiver to use in the mix.	+ 	add two colors	- 	subtract two colors	*	multiply the values of r, g, b by a number or an Array of factors.  ((Color named: #white) * 0.3) gives a darkish gray.  (aColor * #(0 0 0.9)) gives a color with slightly less blue.	/	divide a color by a factor or an array of three factors.	errorForDepth: d     How close the nearest color at this depth is to this abstract color.  Sum of the squares of the RGB differences, square rooted and normalized to 1.0.  Multiply by 100 to get percent.	hue			Returns the hue of the color. On a wheel from 0 to 360 with pure red at 0 and again at 360.	saturation	Returns the saturation of the color.  0.0 to 1.0	brightness	Returns the brightness of the color.  0.0 to 1.0	name    Look to see if this Color has a name.	lightShades: thisMany		An array of thisMany colors from white to the receiver. 	darkShades: thisMany		An array of thisMany colors from black to the receiver.  Array is of length num.	mix: color2 shades: thisMany		An array of thisMany colors from the receiver to color2.	wheel: thisMany			An array of thisMany colors around the color wheel starting and ending at the receiver.	pixelValueForDepth: d    Returns the bits that appear be in a Bitmap of this depth for this color.  Represents the nearest available color at this depth.  Normal users do not need to know which pixelValue is used for which color. Messages to Class Color.	red: r green: g blue: b		Return a color with the given r, g, and b components.	r: g: b:		Same as above, for fast typing. 	hue: h saturation: s brightness: b		Create a color with the given hue, saturation, and brightness.	pink 	blue	red ...	Many colors have messages that return an instance of Color.	canUnderstand: #brown	  Returns true if #brown is a defined color.	names		An OrderedCollection of the names of the colors.	named: #notAllThatGray put: aColor    Add a new color to the list and create an access message and a class variable for it.   colorFromPixelValue: value depth: d    Returns a Color whose bit pattern (inside a Bitmap) at this depth is the number specified.  Normal users do not need to use this.(See also comments in these classes: Form, Bitmap, BitBlt,.)"
"CatalogSettings","Settings for catalog"
"RBAddProtocolTransformation","I am responsible to add a protocol to a class.Usage:| transformation |transformation := (RBAddProtocolTransformation				protocol: 'transforming'				inClass: #RBDummyEmptyClass)				transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- The class exists;- The protocol name is a valid name."
"ClyRemoveClassGroupCommand","I am a command to remove class group with containing classes. Internal Representation and Key Implementation Points.    Instance Variables	classGroup:		<ClyClassGroup>"
"IceTipTreeNode","I'm a node of a tree.I understand 	- descriptionWithDecoration	- icon"
"RBFooLintRuleTest1",""
"GLMStringBrick","A GLMStringBrick is low level String Brick. Text can't be drawn outside of Brick's bounds, which makes it very usefull for smart text shrinking.Instance Variables	familyName:		<Object>	font:		<Object>	fontSize:		<Object>	text:		<Object>	textColor:		<Object>	textPosition:		<Object>	textSize:		<Object>familyName	- xxxxxfont	- xxxxxfontSize	- xxxxxtext	- xxxxxtextColor	- xxxxxtextPosition	- xxxxxtextSize	- xxxxx"
"CommandLineUIManager","I am UI manager for a headless setup.I block all UI manager API that uses Morphs and will trow an error instead."
"SugsMonticelloToolContext","I am a general suggestion context for a monticello tools. I give the Suggestion framework information about the selection so it can propose the correct suggestions."
"GLMActionButtonBrick","A GLMActionButtonBrick is a basic iconified action button without label that supports mouse click, hover and unhover actions.action: with object argument to set on mouse clicked action.hoverAction action: with object argument to set on mouse hover action.unhoverAction: with object argument to set on mouse unhover action.User can set normal icon and icon that will be used when action button is hovered with mouse sending:icon: aFormhoverIcon: aFormInstance Variables	clickAction:		<Object>	hoverAction:		<Object>	unhoverAction:		<Object>clickAction	- action on mouse clickedhoverAction	- action on mouse hoveredunhoverAction	- action on mouse unhovered"
"LabelledContainer","I am an elementary Spec widget that adds a LabelPresenter at another widget.self exampleI provide the method content: that take a class in parameter, it instantiates it in the variable subwidget and add it at the focusOrder. Note it does not reset the focusOrder.I provide accessors for the label and the subwidget, but I specialize doesNotUnderstand: to send the message at the subwidget.I provide four layouts on my class side, to chose the position of the label."
"FTRegexFilter","I am filter implemented by regex expressionsInternal Representation and Key Implementation Points.    Instance Variables	regex:		<RxMatcher>"
"ClyCriticContext","I am a context of critique decorators tool representing selected critiques Internal Representation and Key Implementation Points.    Instance Variables	analyzedObject:		<Object>"
"IceGitHubPullRequest","I'm a pull request from github API. I represent (more or less), what is described here: https://developer.github.com/v3/pulls/#list-pull-requests"
"RGAbstractContainer","This is the abstract class for container-based elements.Elements are separated in groups by kind (e.g classes, methods, pools, etc.)Subclasses have to define the kind of collection for a particular group of entities.For a container the use of a dictionary or another collection (e.g. SortedCollection) to store group of elements is independent."
"IceTipRepairCreateSubdirectory","I will create the missing source subdirectory.I'm active when: 	- src subdirectory is not found."
"TClassDescription","Kernel trait for ClassDescription"
"ContextualClassAnnotationExample2",""
"OSWindowMouseLeaveEvent","I am delivered when mouse leaves the area , covered by a window"
"GLMWizard","A wizard Instance Variables	cancelButtonAction:		<Object>	currentIndex:		<Object>	externalCancelButtonAction:		<Object>	externalNextButtonAction:		<Object>	externalPreviousButtonAction:		<Object>	externalTerminateButtonAction:		<Object>	genericStep:		<Object>	nextButtonAction:		<Object>	previousButtonAction:		<Object>	specificAnnouncementActions:		<Object>	steps:		<Object>	stepsAndPanes:		<Object>	stepsDictionary:		<Object>	terminateButtonAction:		<Object>	wizardSize:		<Object>cancelButtonAction	- xxxxxcurrentIndex	- xxxxxexternalCancelButtonAction	- xxxxxexternalNextButtonAction	- xxxxxexternalPreviousButtonAction	- xxxxxexternalTerminateButtonAction	- xxxxxgenericStep	- xxxxxnextButtonAction	- xxxxxpreviousButtonAction	- xxxxxspecificAnnouncementActions	- xxxxxsteps	- xxxxxstepsAndPanes	- xxxxxstepsDictionary	- xxxxxterminateButtonAction	- xxxxxwizardSize	- xxxxx"
"ClyQueryResultToolbarGroup","I am a toolbar menu group to show together query browser controlling commands"
"GTSpotterExceptionMock1",""
"RBAndEnvironment","I am the combination of two RBEnvironments, a logical AND. That is: entity A is in this environment if it is in BOTH environment I am constructed from.Do not construct instances of me directly, use method #& for two existing environments:env1 & env2 -> a RBAndEnvironment."
"BalloonFillData","This class is a simulation of the code that's run by the Balloon engine. For debugging purposes only."
"RBClassCategoryChange","I'm a change corresponding to a change in the class protocols. "
"IceTipMetacelloMenuGroup","I'm the common group for metacello extensions."
"SmalllintManifestCheckerTest","SUnit tests for SmalllintManifestChecker"
"ManifestMultilingualTextConverterOtherLanguages","Package for additional multilingual text conversion classes"
"MemoryFileSystemTest","SUnit tests for MemoryFileSystem"
"GLMRubricTextMorphicTest",""
"FTEasyListDataSource","I'm a datasource who works with FTEasyListMorph.I receive blocks to provide my contents. "
"IceTipFetchRemoteCommand","Command that fetches from remote repositories"
"GLMEvaluateSelection","I am event indicating to the renderer to execute the currently selected text and perform an action with the result."
"SpecStubMenuGroupView","Only stub object, no real view is displayed."
"RBParseTreeRewriterTest","SUnit tests for RBParseTreeRewriter"
"BMPReadWriterTest","SUnit tests for class BMPReadWriter"
"T2TraitSlotScopeTest","Unit test for trait related slot scopes"
"GRInstanceVariableCapitalizationRule","Instance variable names on the instance- and class-side should start with a lowercase letter."
"GlamourPresentationModel","/!\ I AM DEPRECATED. Please, use my superclass instead."
"AthensBalloonRadialGradient","i represent a radial gradient paint in balloon backend."
"PackageClassNodeExample","Example for a package class node"
"ClyJumpToTestClassCommand","Description--------------------I am a command available in the class context menu of Calypso. When activated I'll jump on the test class corresponding to the class. If the class does not exists I will create it in the corresponding package.	Internal Representation and Key Implementation Points.--------------------    Instance Variables	testClass:		<aClass>		Test class corresponding to the class I was activated with"
"SDL_TouchFingerDownEvent","SDL2 library structure"
"SpecStubMenuAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"SpecDemoFormPage","Demo page for SpecDemoFormPresenter"
"GLMPresentationToolbarUpdated","A GLMPresentationToolbarUpdated is announced by the presentation when it's toolbar actions ned to be updated. By toolbar actions we refer to those actions that apply on the entire presentations and not those that apply on the selection (which are usually displayed in a context menu).Only the part of the morph that displays the actions is updated. "
"DictionaryValueHolder","I am designed specifically for dictionaries."
"SycMoveMethodsToClassSideCommand","I am a command to move method to the class side of defining class"
"RBCreateAccessorsForVariableTest",""
"SpecStubContainerAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"ReparseAfterSourceEditing","Notify about the need to reparse after source code was edited"
"GLMMorphicTreeRenderer",""
"RubFloatingEditorBuilder","I provide the capability to open a floating editor to edit something on the fly.The user is responsible for deciding on how to open the editor. See #exampleEditableStringMorph class side as an example on how to do it with #on:send:to.One opened:- if the escape character is pressed or if the keyboard focus is lost or in case of a mouse down anywhere else than inside the editor then the editing is aborted.- the Enter key or Cmd+s save the contents in the Morph, then an announcement of class RubMorphEdited is sent so that the user can take desired action (checking the input, definitively accept it or reject it).see #exampleEditableStringMorph class side Internal Representation and Key Implementation Points.Instance Variables	announcer:		<Announcer>	editor:		<RubScrolledTextMorph>	acceptOnCR:	<Boolean>	initialContents: <String>	font: <LogicalFont>	customizeValuable: <Valuable>Implementation notes"
"EqualityTester","I provide a simple way to test the equality properties of any object."
"RPackageCompleteSetupButForModificationTest","SUnit tests for RPackage"
"LGitWritepackCommitCallout",""
"SDL_TouchFingerMotionEvent","SDL2 library structure"
"MCClassTraitParser","MCClassTraitParser identifies classTrait. "
"ClyLocalClassScope","I am a root of hierarchy of local class scopes.My subclasses represent only given basis classes. They do not look at any hierarchical relationship like superclasses or subclasses.The visibility of methods and variables are defined in terms of meta levels which given scope provides: 	aLocalClassScope metaLevelsOf: aClass do: aBlockIt supposed to evaluate given aBlock with either instance side or class side of given aClass or with both of them.	I delegate this method to the class side. So it can be used from classes themselves.So subclasses should implement the method #metaLevelsOf:do: on class side.My subclasses define local scope of any class scope: 	aClassScope localScopeClass	For example ClyClassHierarchyScope has a variable to keep local scope class. And different values affect actual classes which are visible from given hierarchy.While my subclasses are used by hierarchy scopes they has extra responsibility to define separate meta level which should be used to build hierarchies.They should implement class side method: - metaLevelForHierarchyOf: aClassSubclasses should decide what meta level of given class should be used to retrieve/build hierarchy.For example superclass hierarchy of ""ProtoObject class"" can be empty according to the ""instance side hierarchy"" 		ProtoObject superclass >>> nilOr it can follow full ""native"" superclass chain which will ends at Object and ProtoObject		ProtoObject class superclass >>> Classbecause any metaclass inherits from Class which by itself inherits from Object.So the method #metaLevelForHierarchyOf: adds such decision to concrete kind of local scope which allows local scopes restrict visibility of class hierarchy"
"MetacelloVersionNumberTestCase",""
"BitBltDisplayScanner","A BitBltDisplayScanner displays characters on Screen or other Form with help of a BitBlt.Instance Variables	bitBlt:		<BitBlt>	fillBlt:		<BitBlt>bitBlt	- the object which knows how to copy bits from one Form (the font glyph data) to another (the destination Form)fillBlt	- another object for copying form bits, initialized for displaying the background."
"HEIgnoreOnDuplication","When there is a duplication, I do not do nothing. I keep the version already in the image"
"ClyTaggedClassGroup","I represent group of classes which does marked by specific tag.You can create my instance using: 	ClyTaggedClassGroup withClassesFrom: aPackageScope taggedBy: aSymbol.	 I provide simple method to rename this tag:	aGroup renameClassTagTo: aSymbolWhich in fact untags all classes and then marks them with new tag.For the #removeWithClasses operation I remove empty class tag from registrered tags of package.	My class query is ClyTaggedClasses"
"OCContextTempMappingTest","This testcase tests that we can correctly get the value of the temp vars from a context. That is, - it finds the correct context where the variable is defined to get the value - it handles well copying and temp vectorsProbably tests are missing covering all possible combinations of   - temps  - copying temps  - temp vectors  - nested blocks  - blocks from dead contexts  - optimized blocksHowever this class is a starting point for this."
"MorphicEvent","This class represents the base for all events.Instance variables:	stamp	<Integer>	The millisecond clock time stamp (based on Time millisecondClock)	source	<Hand | nil>	If non-nil the hand that generated the event."
"ClyWatchpointMethodGroupProvider","I provide a ""watchpoints"" method group which put together all methods with installed watchpoints"
"FFIExternalArray","I am class which provides a convenient interface to work with arrays which elements are values of some external (C) type.This class uses double dispatch to solve #at: and #at:put: methods, if you need to achieve speed, is recommendable to subclass me and override this methods to avoid the indirection."
"WeakKeyAssociation","I am an association holding only weakly on my key."
"OSTouchThreeFingersSwipeMoveEvent","Three fingers are swiping"
"LGitDiffHunkCallback",""
"WPDummy","I am a dummy class to test watchpoints"
"ClyTraitUserScope","I represent class scope of all users of my basis traits.I see methods of all classes and traits which use my basis traits "
"OSMouseButtonReleaseEvent","i am delivered when user releases a mouse button"
"AthensPathBuilder","i am abstract path builder, to specify an interface protocol which is available for building paths,by using  canvas or surface #createPath: method."
"ClyMethodGroupTestCase",""
"FFIExternalValueHolder","I am a generic meta class for creating a subclasses, which instances will hold a single value of specified C type.To create a new class for some concrete C type you need to declare an anonnymous class and indicate the type you want to use:[ [ [ floatHolderClass := FFIExternalValueHolder ofType: 'float' ] ] ]Then you can use  given class(es) as a value holders for type you specified:[ [ [  float := floatHolderClass new.float value:  1.5float value ] ] ]By combining this with class/pool variables we have a convenient way of defining a values, which are passed by pointer to a function.For instance, imagine that we need to create a binding to a function:[ [ [ void getFoo( SomeType * value)  ] ] ]which is not an unusual situation, when C function using pointer arguments for storing it's output there.And this is what ==FFIExternalValueHolder== is done for. To define a binding to this function you can declare a subclass named SomeType and then use it in function signature:[ [ [ getFoo: value  ^ self ffiCall: #(void getFoo ( SomeType *  value ))] ] ]and call it like: [ [ [ var := SomeType new.self getFoo: var.var value  ""will read the value"" ]]]"
"SycInsertSubclassCommand","I am a command to insert new subclass into my target class hierarchy.All current subclasses of targetClass will become subclasses of new created class"
"MethodConstantTests",""
"ClyTextEditorContext","I am default text editor context"
"MetacelloValidationNotification",""
"ClyFilteringCritiqueQueryTestCase",""
"OSTouchScrollDetector","I am the abstract class for all the Scroll gesture detectors"
"TransferMorph","This is a Morph that is used to visually indicate the progress of a drag operation, and also as a container for various bits of drag state information.It polls the shift state in its step method to update its copy state (shift pressed = should copy).And if you hit the Escape key while dragging, it aborts the drag operation."
"ManifestSpecTools","System Tools based on Spec UI framework"
"ClyClassWithFFIMethods","I am example class which has ffi methods"
"IceGitHubAPIPaginatedResult","I'm a paginated answer from github (he sends results in pages and includes information in headers)"
"RBRenameClassVariableTest",""
"WindowActivated","Emitted when navigating between windows. "
"Message","I represent a selector and its argument values.	Generally, the system does not use instances of Message for efficiency reasons. However, when a message is not understood by its receiver, the interpreter will make up an instance of me in order to capture the information involved in an actual message transmission. This instance is sent it as an argument with the message doesNotUnderstand: to the receiver."
"GLMItemRemoved",""
"GTSpotterA3",""
"WordLayout","I am a raw data layout that holds words (32 bits )."
"FLGlobalEnvironmentTest","SUnit tests for global fuel environment"
"KMCtrlModifier","I represent the Ctrl key modifier. Look at my superclass for a more detailed explanaition."
"ASTTransformationPluginTest",""
"T2TraitTest","Unit test for trait handling"
"ReflectivityTest",""
"MetacelloPlatform",""
"BaselineOfMorphicCore","This baseline is used to generate Pharo images from the local clone of pharo-project/pharo repository. Depends on:- SUnit, Display, UnifiedFFILoad type: - linearInstalls:- minimal working Morphic subset without fonts support"
"IceTipTreeFilterFunction","I'm a filter function that will expand all children of a tree when updating. Of course, I'm to be used when searching tree structures."
"CollatorBlockFunction","I represent two args collator block which must return 1, -1 or 0.Usually I am created directly from block using sorting messages:	[:a :b | ] ascending	[:a :b | ] descending.Look at SortFunction comments for more details.Internal Representation and Key Implementation Points.    Instance Variables	collatorBlock:		<BlockClosure>	This is the collation function that must return a -1, 0, or 1"
"RBSplitClassRefactoring","I am a refactoring for extracting a set of instance variables to a new class.You can choose which instance variables should be moved into the new class. The new class becomes an instvar of the original class and every reference to the moved variables is replaced by a accessor call.My precondition verifies that  the new instance variable is a valid variable name and not yet used in this class or its hierarchy the name of the new class representing the set of instance variables is a valid class nameExample:In the following class:Object subclass: #TextKlass	instanceVariableNames: 'text color font style'	classVariableNames: ''	package: 'TestKlasses'	the avariables color/font/style should be moved to a new ""TextAttributes""-Class.We apply the Split Refactoring with this three variables and select a new class name TextAttributes used as variable new ""textAttributes"".The class definition will be changed toObject subclass: #TextKlass	instanceVariableNames: 'text textAttributes'	classVariableNames: ''	package: 'TestKlasses'	and every reference to the old vars color/font/style will be replaced by textAttributes color / textAttributes style / textAttributesFont"
"MessageBrowser","A MessageBrowser is a UI to browse a list of method, regardless of what they could be.example: MessageBrowser new	openWithSpec;	messages: (SystemNavigation new allSendersOf: #at:)	yourself"
"TraitedMetaclass","All the traited class metaclasses are instances of myself.I include all the custom behavior to implement traits.I override a number of methods in Metaclass to implement traits.Also I have the localMethodDict and the traitComposition of the base class.  So it is not needed to recompile the methods from TraitedClass. Check #initializeBasicMethods for more details"
"DatePresenter","A DatePresenter is a widget for choosing dates. It consists of:- A text box, into which you can type any string which can be converted into a Smalltalk date- A button, which displays a calendar, from which you can select a dateUsage:- the simplest way is to add a DatePresenter in your UI, and send #date when you want its value.- or, register to be notified when the date changes:	DatePresenter new		date: self date;		whenDateChanged: [ :newDate | self date: newDate ].As it is Spec-based, it can be easily adapted and composed into a larger UI."
"FT2Constants","The various flags from the Freetype/2 header.The LoadXXXX flags can be used with primitiveLoadGlyph:flags: or with the Cairo primCairoFtFontCreateForFtFace:flags:scale: primitives.FT_LOAD_DEFAULT ::  Corresponding to 0, this value is used a default glyph load.  In this  case, the following will happen:                                                                          1. FreeType looks for a bitmap for the glyph corresponding to the     face's current size.  If one is found, the function returns.  The     bitmap data can be accessed from the glyph slot (see note below).                                                                          2. If no embedded bitmap is searched or found, FreeType looks for a     scalable outline.  If one is found, it is loaded from the font     file, scaled to device pixels, then ""hinted"" to the pixel grid in     order to optimize it.  The outline data can be accessed from the     glyph slot (see note below).                                                                          Note that by default, the glyph loader doesn't render outlines into  bitmaps.  The following flags are used to modify this default  behaviour to more specific and useful cases.                                                                        FT_LOAD_NO_SCALE ::  Don't scale the vector outline being loaded to 26.6 fractional  pixels, but kept in font units.  Note that this also disables  hinting and the loading of embedded bitmaps.  You should only use it  when you want to retrieve the original glyph outlines in font units.                                                                        FT_LOAD_NO_HINTING ::  Don't hint glyph outlines after their scaling to device pixels.  This generally generates ""blurrier"" glyphs in anti-aliased modes.                                                                          This flag is ignored if @FT_LOAD_NO_SCALE is set.                                                                        FT_LOAD_RENDER ::  Render the glyph outline immediately into a bitmap before the glyph  loader returns.  By default, the glyph is rendered for the  @FT_RENDER_MODE_NORMAL mode, which corresponds to 8-bit anti-aliased  bitmaps using 256 opacity levels.  You can use either  @FT_LOAD_TARGET_MONO or @FT_LOAD_MONOCHROME to render 1-bit  monochrome bitmaps.                                                                          This flag is ignored if @FT_LOAD_NO_SCALE is set.                                                                        FT_LOAD_NO_BITMAP ::  Don't look for bitmaps when loading the glyph.  Only scalable  outlines will be loaded when available, and scaled, hinted, or  rendered depending on other bit flags.                                                                          This does not prevent you from rendering outlines to bitmaps  with @FT_LOAD_RENDER, however.                                                                        FT_LOAD_VERTICAL_LAYOUT ::  Prepare the glyph image for vertical text layout.  This basically  means that `face.glyph.advance' will correspond to the vertical  advance height (instead of the default horizontal advance width),  and that the glyph image will be translated to match the vertical  bearings positions.                                                                        FT_LOAD_FORCE_AUTOHINT ::  Force the use of the FreeType auto-hinter when a glyph outline is  loaded.  You shouldn't need this in a typical application, since it  is mostly used to experiment with its algorithm.                                                                        FT_LOAD_CROP_BITMAP ::  Indicates that the glyph loader should try to crop the bitmap (i.e.,  remove all space around its black bits) when loading it.  This is  only useful when loading embedded bitmaps in certain fonts, since  bitmaps rendered with @FT_LOAD_RENDER are always cropped by default.                                                                        FT_LOAD_PEDANTIC ::  Indicates that the glyph loader should perform pedantic  verifications during glyph loading, rejecting invalid fonts.  This  is mostly used to detect broken glyphs in fonts.  By default,  FreeType tries to handle broken fonts also.                                                                        FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH ::  Indicates that the glyph loader should ignore the global advance  width defined in the font.  As far as we know, this is only used by  the X-TrueType font server, in order to deal correctly with the  incorrect metrics contained in DynaLab's TrueType CJK fonts.                                                                        FT_LOAD_NO_RECURSE ::  This flag is only used internally.  It merely indicates that the  glyph loader should not load composite glyphs recursively.  Instead,  it should set the `num_subglyph' and `subglyphs' values of the glyph  slot accordingly, and set ""glyph->format"" to  @FT_GLYPH_FORMAT_COMPOSITE.                                                                          The description of sub-glyphs is not available to client  applications for now.                                                                        FT_LOAD_IGNORE_TRANSFORM ::  Indicates that the glyph loader should not try to transform the  loaded glyph image.  This doesn't prevent scaling, hinting, or  rendering.                                                                        FT_LOAD_MONOCHROME ::  This flag is used with @FT_LOAD_RENDER to indicate that you want  to render a 1-bit monochrome glyph bitmap from a vectorial outline.                                                                          Note that this has no effect on the hinting algorithm used by the  glyph loader.  You should better use @FT_LOAD_TARGET_MONO if you  want to render monochrome-optimized glyph images instead.                                                                        FT_LOAD_LINEAR_DESIGN ::  Return the linearly scaled metrics expressed in original font units  instead of the default 16.16 pixel values.                                                                        FT_LOAD_NO_AUTOHINT ::  Indicates that the auto-hinter should never be used to hint glyph  outlines.  This doesn't prevent native format-specific hinters from  being used.  This can be important for certain fonts where unhinted  output is better than auto-hinted one.One of following flags (as LoadTargetXXX) can be used to further specify the result.   FT_RENDER_MODE_NORMAL ::                                               This is the default render mode; it corresponds to 8-bit             anti-aliased bitmaps, using 256 levels of opacity.                                                                                      FT_RENDER_MODE_LIGHT ::                                                This is similar to @FT_RENDER_MODE_NORMAL, except that this          changes the hinting to prevent stem width quantization.  This        results in glyph shapes that are more similar to the original,       while being a bit more fuzzy (""better shapes"", instead of            ""better contrast"" if you want :-).                                                                                                      FT_RENDER_MODE_MONO ::                                                 This mode corresponds to 1-bit bitmaps.                                                                                                 FT_RENDER_MODE_LCD ::                                                  This mode corresponds to horizontal RGB/BGR sub-pixel displays,      like LCD-screens.  It produces 8-bit bitmaps that are 3 times        the width of the original glyph outline in pixels, and which use     the @FT_PIXEL_MODE_LCD mode.                                                                                                            FT_RENDER_MODE_LCD_V ::                                                This mode corresponds to vertical RGB/BGR sub-pixel displays         (like PDA screens, rotated LCD displays, etc.).  It produces         8-bit bitmaps that are 3 times the height of the original            glyph outline in pixels and use the @FT_PIXEL_MODE_LCD_V mode.                                                                       <Note>                                                                 The LCD-optimized glyph bitmaps produced by FT_Render_Glyph are      _not filtered_ to reduce color-fringes.  It is up to the caller to   perform this pass.                                                 "
"ClyAbstractItemTag","I am used to mark abstract classes and methods"
"AboutDialogWindow","Default superclass for application about dialogs."
"RBClassTransformation","I'm a transformation whose focus is class.  "
"FLLargeIdentitySet","A LargeIdentitySet is an IdentitySet for large collections.Rather than using linear probing, it takes advantage of the fact that identityHash (on a classic, 32bit VM) in Pharo only has 4096 unique values, using a bucket for each of those.It will still work if hash range changes (ie buckets are chosen mod 4096), but the potential gain will be lower the more diverse the hash space is.With linear probing you risk an array looking like this:Index:	Hash:	1	X	2	X	3	X	4	4	5	5	6	4	7	4	8	7	9	6	10	XWhile with buckets the same dataset looks:Index:	Hash:	1	X	2	X	3	X	4	[4, 4, 4]	5	5	6	6	7	7	8	X	9	X	10	XSo includes: can generally be done faster (also sped up byusing a special primitive), and removal of objects does not have to do extensive cleanup if object was part of a chain."
"SycRemovePackageCommand","I am a command to remove given packages"
"Breakpoint","A Breakpoint is an object used for stopping the execution of the program in a determined instruction, normally with debugging purposes. There are three types of breakpoints:-halt once: These are triggered once, and then removed.-halt always: Once installed, they have to be explicitly removed (by using #remove on the instance side, or #removeAll on class side)-halt on condition: Before being installed prompts the user for a condition (a block with a boolean expression), and it is only triggered when that condition is met.Breakpoints are installed via SmartSuggestions menu (available for RBMethodNode, RBMessageNode and RBAssignmentNode), or programmatically:""(Breakpoint inMethod: (Bar>>#foo2) inNode: ((Bar>>#foo2) ast allChildren at: 9) )break: #when: withArguments: { [ RFCounter counter isZero ] }"""
"IconHardcodedMessageRule","According to the new API you should use	#iconName asIcon	Instead of	Smalltalk ui icons iconName"
"IceTipEditPlaintextCredentialsModel","I implement the dialog to edit plaintext credentials."
"ShBitLayoutChanged","I detect if there is a change in the layout. Specially if there is a change from PointerLayout to BitLayout and if there is need to propagate to the subclasses."
"MetacelloSpec",""
"FindReplaceService","Model for a find and replace service in editors"
"GLMTableMorphicTest",""
"IceWorkingCopyPatcherVisitor","I visit a tree of changes and apply those changes to the working copy."
"IceGitHubOpenOnGithubCommand","Description--------------------I am a command opening the repository page of the remote on GitHub if possible."
"SDL2","A bunch of functions in a single class for accessing SDL2 interface"
"MCClassVariableDefinition","A MCClassVariableDefinition represent a class variable."
"ClassTagAdded","I am announced when new class tag is added into package"
"SettingBrowser","<help>! The User interfaceA SettingBrowser allows the browsing as well as the editing of setting values.For each setting, a label and an input widget allowing the change of the setting value are shown.!! Browsing standards settingsIn order to open a setting browser one can also use the expression below:--------------------SettingBrowser open--------------------It opens a SettingBrowser for all settings declared with the standard 'systemsettings' pragma keyword. To see how these settings are declared in the image, you can browse all senders of #systemsettings:--------------SystemNavigation new  browseAllSendersOf: #systemsettings--------------!! Browsing application specific settingsFor specific applications, other pragma keywords can be used. These keywords can be passed as follow:--------------------(SettingBrowser forKeywords: #('blob')) open.--------------------Then, only settings which are declared with the keyword 'blob' are viewed. Here is an example of such a setting declared in the class side of a class BlobSettings --------------------BlobSettings class>>blobSettingOn: aBuilder	<blob>	(aBuilder group: #blobEditing) 		label: 'Editing' translated;		parent: #blobBrowsing; 		description: 'All settings concerned with blob editing' translated;		with: [				(aBuilder setting: #color)	...--------------------The expression 'SettingBrowser open' is then equivalent to the '(SettingBrowser forKeywords: #('systemsettings')) open' expression.!! FilteringThe SettingBrowser has a filtering functionality to limitate the number of settings. You can enter a token in the input field of the toolbar in order to show only settings that are matching the token.Two filtering modes are allowed:  with a substring or with a regular expression.- with a substring: only settings which name, description, pragma class or method selector includes this substring are viewed; - with a regular expression: the same as with a substring except that the input is used as a regular expression. This filtering is applied if the Regexp checkbox is checked.! How to declare a settingA setting is declared with a method class side. This kind of method takes a builder as argument and a standard setting is tagged with the <systemsettings> pragma. The builder argument serves as a facade for the declaration.!!A simple boolean setting exampleLet's start with a setting declaration example:CodeHolderSystemSettings class>>caseSensitiveFindsSettingsOn: aBuilder	<systemsettings>	(aBuilder setting: #caseSensitiveFinds) 		label: 'Case sensitive search' translated;		description: 'If true, then the ""find"" command in text will always make its searches in a case-sensitive fashion' translated;		setSelector: #caseSensitiveFinds:;		getSelector: #caseSensitiveFinds;		target: TextEditor;		parent: #codeEditing.For this setting to be declared, we make the asumption that we have TextEditor class>>caseSensitiveFinds and TextEditor class>>caseSensitiveFinds: methods in order to change the preference value. To declare a setting, just send #setting: to the builder with its identifier, a Symbol passed as argument. It creates a setting node. Then you can set the label, the description with #label: and #description sent to the newly created setting node. You also have to set the selectors for setting and getting the preference value as well as the target to which these accessors are sent  (often a class). This is done by sending respectively, #setSelector:, #getSelector: and #target: to the setting node.Because all settings are organized in trees we need a way to indicate what is the position of the setting node in the overall setting trees list. In fact it can be done two ways. The first way is to use the #parent: message (A second possibility is to declare a subtree in one method, it is explained later in this documentation).The #parent: message is send for non root settings. #parent takes the identifier of the parent setting as argument.You may notice that in this example,  if we don't take into account the $: at the end of the setting accessor, the getting and the setting accessors are the same. This is often the case. You can simply set the setter and the getter by sending the #selector: message to the setting node. Thus the declaration is simplified as follow:CodeHolderSystemSettings class>>caseSensitiveFindsSettingsOn: aBuilder	<systemsettings>	(aBuilder setting: #caseSensitiveFinds) 		label: 'Case sensitive search' translated;		description: 'If true, then the ""find"" command in text will always make its searches in a case-sensitive fashion' translated;		selector: #caseSensitiveFinds;		target: TextEditor;		parent: #codeEditing.You may also notice that the identifier of the setting is then the same as the selector. In this case, you can omit to set the selector because by default, the identifier is used as the selector for getting the preference value and the identifier concatenated with a $: at the end is used as the setting selector. Thus the declaration is simplified again as follow:CodeHolderSystemSettings class>>caseSensitiveFindsSettingsOn: aBuilder	<systemsettings>	(aBuilder setting: #caseSensitiveFinds) 		label: 'Case sensitive search' translated;		description: 'If true, then the ""find"" command in text will always make its searches in a case-sensitive fashion' translated;		target: TextEditor;		parent: #codeEditing.Finally, if you decide to declare a setting directly in the class which implements the selector, the target information can be also omitted because the class in which the setting is declared is used by default. Thus the simplest declaration can be:TextEditor class>>caseSensitiveFindsSettingsOn: aBuilder	<systemsettings>	(aBuilder setting: #caseSensitiveFinds) 		label: 'Case sensitive search' translated;		description: 'If true, then the ""find"" command in text will always make its searches in a case-sensitive fashion' translated;		parent: #codeEditing.!!Declaring a subtree in one single methodDirectly declaring a sub-tree of settings in one method is also possible. Then, typically, a root group is declared for the application settings and the children settings themselves are also declared within the same method as in the example below in which #formatCommentWithStatements and #indentString are directly declared as children of the #configurableFormatter setting:RBConfigurableFormatter class>>settingsOn: aBuilder	<systemsettings>		(aBuilder group: #configurableFormatter)		target: self;		parent: #refactoring;		label: 'Configurable Formatter' translated;		description: 'Settings related to the formatter' translated;		with: [			(aBuilder setting: #formatCommentWithStatements)				label: 'Format comment with statements' translated.			(aBuilder setting: #indentString)				label: 'Indent string' translated]!!Optional settingAny setting can have children. In the case where a boolean setting is used as a parent, then, its children are chown only if the parent preference value is true.!!Range settingYou send the #range: message to the builder instead of the #setting: message. In addition, you send the #range: message to the setting with an interval as argument in order to indicate the valid range.screenMarginSettingOn: aBuilder	<systemsettings>	(aBuilder range: #fullscreenMargin)		target: SystemWindow;		parent: #windows;		label: 'Fullscreen margin' translated;		description: 'Specify the amount of space that is let around a windows when it''s opened fullscreen' translated;		range: (-5 to: 100).!!List settingFor this kind of setting, the SettingBrowser will show a drop list. Here is an example for the window position strategy. Notice that the setting is declared by sending the #pickOne message to the builder. Notice also that the list of valid values are given by sending the #domainValues: message to the setting. The argument is an array of association. Each association key is the label that is shown and the corresponding association value gives the value that will be assigned to the preference.windowPositionStrategySettingsOn: aBuilder	<systemsettings>	(aBuilder pickOne: #usedStrategy) 		label: 'Window position strategy' translated;		target: RealEstateAgent;		domainValues: {			'Reverse Stagger' translated -> #staggerFor:initialExtent:world:. 			'Cascade' translated -> #cascadeFor:initialExtent:world:. 			'Standard' translated -> #standardFor:initialExtent:world:};!!LauncherA launcher is a particular setting. It allows to launch a script directly from the setting browser. Imagine that you have changed some settings and that you need to evaluate a script in order to update some other objets. It can be used also to configurate globally a package of the entire image.As an example, in order to use True Type Fonts, the system must be updated by collecting all the available TT fonts. This can be done by evaluating the following expression:-------------FreeTypeFontProvider current updateFromSystem-------------In order to be able to launch this script from the setting browser, you have to declare a launcher. For example, look-at how the script for the TT fonts is declared in GraphicFontSettings class >> #standardFontsSettingsOn:.GraphicFontSettings class >> #standardFontsSettingsOn:	<systemsettings>	(aBuilder group: #standardFonts)		...		(aBuilder launcher: #updateFromSystem)				order: 1; 				target: FreeTypeFontProvider;				targetSelector: #current;				description: 'Update available fonts by scanning the current system';				script: #updateFromSystem;				label: 'Update fonts from system' translated.Notice that you send #launcher: to the builder in order to create the setting node, then you send #script: to the created node with the selector of the script passed as argument.</help>Implementation detailsSee also SettingNode, SettingTree, SettingNodeBuilder and SettingTreeBuilder classes.Instance Variables	roots:		<Collection of SettingTreeNode>	searchedText:		<String>	status:		<WriteStream>	collector:		<SettingCollector>roots	- the roots of the viewed setting treessearchedText	- the string used as a filter token or regexp in order to select viewed settingsstatus	- a WriteStream used in order to store useful information which are shown when no current item is selectedcollector	- The SettingCollector which has the responsibility to collect settings and to build viewed trees"
"GTSpotterEventCollectorBackwardCompatibilityTest",""
"Number","Class Number holds the most general methods for dealing with numbers. Subclasses Float, Fraction, and Integer, and their subclasses, provide concrete representations of a numeric quantity.All of Number's subclasses participate in a simple type coercion mechanism that supports mixed-mode arithmetic and comparisons.  It works as follows:  If	self<typeA> op: arg<typeB>fails because of incompatible types, then it is retried in the following guise:	(arg adaptTypeA: self) op: arg adaptToTypeA.This gives the arg of typeB an opportunity to resolve the incompatibility, knowing exactly what two types are involved.  If self is more general, then arg will be converted, and viceVersa.  This mechanism is extensible to any new number classes that one might wish to add to Pharo.  The only requirement is that every subclass of Number must support a pair of conversion methods specific to each of the other subclasses of Number.Implementation notes----------------------------------The implementation of #degreeCos and #degreeSin is such that results are exact for any multiple of 90.Care is also taken to evaluate the sine between -90° and 90°, this will avoid #degreesToRadians and i386 FPU sine function to accumulate round off errors due to approximate representation of pi.We can thus evaluate 240 degreeCos with at most 1 ulp error. It's not perfect, but better than previous implementation.For cosine, we know that:	cosd(x)=cosd(abs(x))	cosd(x)=sind(90-x)thus the trick is to evaluate:	cosd(x)=sind(90-abs(x)) after appropriate modulo in [-180,180[This way, we are sure to evaluate the sine between -90° and 90°The #degreesToRadians and #sin are used rather than #degreeSin to avoid cycles.For sine, it would be necessary to evaluate eithersind(x) if abs(x) <=90or sind(180-x) if abs(x) >= 90A possible implementation would be:	| x |	x := 90 + self \\ 360 - 90.	x >= 180 ifTrue: [x := 180 - x].	^x degreesToRadians sinWe prefer evaluating cosd(90-x) thus providing a branch free implementation."
"MalWeightedHits",""
"SDL_DropEvent","SDL2 library structure representing a dropped file into the window."
"GlobalIdentifierPersistenceTest","A GlobalIdentifierPersistenceTest is a test class for testing the behavior of GlobalIdentifierPersistence"
"MyBooleanObject",""
"IceError","Base class for all errors in Iceberg."
"ManifestColors","Support for colors and color maps"
"OCASTSemanticCleaner","I am cleaning the semantic analysis of the AST.-> scopes of Blocks and Methpd-> binding from Variables"
"GLMAsyncTask","This is a utility that: - executes a job asynchroniously- it remembers the process so that it can terminate the job, if needed- triggers a callback when it's done"
"ClyBrowserQueryCursorTestCase",""
"OmFileStoreTest",""
"RBParseTreeEnvironment",""
"CharacterSet","A set of characters.  Lookups for inclusion are very fast."
"RubLipsumBasicExample","""When the text is wrapped, it is slower but the text has 1798 lines""[self openWrapped] timeToRun       ""Enjoy the speed when not wrapped! ""[self openNotWrapped] timeToRun  "
"ApplicationWithToolbarTest",""
"SlotTest",""
"GLMCollapsableBrick",""
"GTSpotterRecorderDiveInElementEvent","A GTSpotterRecorderDiveInElementEvent models the action of diving in a selected element."
"PaginatedMorphTreeModel","A morphic based tree model with pagination"
"GlobalIdentifierMerger","I am able to merge dictionaries of existing (in the image) and stored (on a disk) values.First, I identify if the image values belongs to the current computer. Then I decide to favor existing or stored values. It is importatnt to notice that I change the existing dictionary received by #existing: message. GlobalIdentifierPersistence used me when he needs to load values from the local disk.Collaborators: GlobalIdentifierPersistence Public API and Key Messages- existing:- stored: - mergeExample:	GlobalIdentifierMerger new		existing: (Dictionary newFromPairs: #(#a 1 #b  2));		stored: (Dictionary newFromPairs: #(#a 3 #c  4));		merge;		existing Internal Representation and Key Implementation Points.    Instance Variables	existing:		<Dictionary>	stored:		<Dictionary>"
"GLMCompositePresentationAsStartMorphicTest",""
"CmdSimpleToolContext","I represent context of simple tool where tool itself provide required and complete information about own state.I pass tool as context instance to command activation methods. For example:	aCommand prepareFullExecutionInContext: tool.	I simplify command activation for tools when context is not really needed.But it is not recomended to use me for tool with list widgets because in that case I do not keep actual selection state. And every my instance will represent same state which is not appropriate in many cases. For example drag and drop operation of list items requires real context reification."
"RelationSetTest",""
"LGitCredentialsPlaintext",""
"SycExtractTempCommand","I am a command to extract selected ast node into temp variable using assignment. Internal Representation and Key Implementation Points.    Instance Variables	tempName:		<String>"
"GLMPagerModel",""
"WideCharacterSetTest","WideCharacterSetTest holds tests for WideCharacterSet"
"MCPTest",""
"RBPharoBootstrapRule","I check that packages constituing the Pharo Bootstrap do not depend on any other package."
"UIManager","UIManager is a dispatcher for various UI requests."
"ManifestSystemObjectEvents","System support for object events (change/update mechanism)"
"MethodMapExamples",""
"RingChunkImporter","I'm an object holding the result of loading a file containing Pharo code definitions in chunk format.I create ring definitions for the elements inside the chunk stream.Heavily inspired from FilePackage.| internalStream |internalStream := (String new: 1000) writeStream.SystemOrganization 	fileOutCategory: 'Tool-ExternalBrowser'	on: internalStream.RingChunkImporter fromStream: internalStream contents readStream."
"IceMergeWorkingCopyCommand","I'm a command to perform a merge  of current image sources with head commit."
"KMShortcutTest","SUnit tests for key mapping shortcuts"
"FileLocator","I am a late-bound reference. I refer to a file or directory in relation to a well-known location on the filesystem, called an origin. When asked to perform concrete operation, I look up the current location of my origin, and resolve my path against it. Usage----------FileLocator vmDirectory parent pathString	> '/Applications'FileLocator desktop.FileLocator desktop basename.FileLocator home basename.FileLocator image.FileLocator vmBinary asAbsolute pathString 	>  '/Applications/CogVM.app/Contents/MacOS/CogVM'FileLocator vmBinary pathString 	> '/Applications/CogVM.app/Contents/MacOS/CogVM'		Implementation------------------------origin 	A symbolic name for base reference I use to resolve myself.path	A relative path that is resolved against my origin""		"
"GTSpotterRecorderExitAnnouncementEvent","A GTSpotterRecorderExitAnnouncementEvent  models the action of  exiting Spotter. Instance Variables	timestamp:		<Object>timestamp	- xxxxx"
"MetacelloConflictingProjectError",""
"MorphicCheckBoxAdapter","I am an adapter to ease the bridge a CheckBoxPresenter and a CheckboxMorph"
"SystemAnnouncerLiveTest","Tests verifiying the behaviour of the default SystemAnnouncer instance."
"DefaultSortFunction","A DefaultSortFunction is a collator using the default threeWayCompareTo: operator.It is known to work on String and Magnitude.It is generally not usefull to create a new instance, and the recommended pattern is to use the single instance available by sending the message  SortFunction default .For other objects  that don't understand threeWayCompareTo: it is necessary to use a custom SortFunction rather than the default one."
"TheManifestBuilder","I'm a tool to build manifest that handles small lint false positive and other information.My name is strange but this is to avoid to match with a Manifest class which is recognized because it starts with Manifest*."
"GTSelector","This is a helper class for modeling a selector. We need this in order to support diving in such a selector and to offer specific processors (like implementors or senders) in Spotter ."
"TIdentityAddTest","A trait for test purposes"
"EpOrFilter","My instances decide if an OmEntry is accepted applying an ""or"" logic operation with sub filters."
"FFIConstants","Constants definitions for FFI"
"GTSpotterExceptionMock4",""
"IceTipInstallVersionCommand","Command used in the version browser, inside the code browser.This command takes the selected version and installs it (also called revert)."
"DAPackageAnalyzerWindow","A PDPackageAnalyzerWindow class is an abstract class.It represents the UI merging the SpecTreeModel (package dependencies or cycles) and browser.The main feature is to browse automatically in the browser when you click on a node (package or dependency)."
"IRBlockReturnTop","I model the bytecode for block returns."
"ZnPositionableReadStreamTests",""
"RBFileBlocksRule","Checks assignment to a variable that is the first statement inside the value block that is also used in the unwind block. For example| inputStream  |    [    inputStream := self openStream. ""may fail !""    inputStream doSomeOperation. ""may fail !""    ] ensure: [ inputStream ifNotNil: [ inputStream close ]]. if ""openStream"" fails, we don't need to ensure the stream is closed.And otherwise, if we move the assignment outside of the block, we don't needan ""ifNotNil""-check for the ensure block if ""doSomeOperation"" fails.This code can be changed to| inputStream  |    inputStream := self openStream. ""may fail !""    [inputStream doSomeOperation. ""may fail !""    ] ensure: [ inputStream close ]."
"Announcement","This class is the superclass for events that someone might want to announce, such as a button click or an attribute change. Typically you create subclasses for your own events you want to announce.See in the help browser for more documentation. Just do:HelpBrowser openOn: AnnouncementsHelp"
"DropListPresenterTest",""
"FFIExternalValueHolderTests","Tests for FFIExternalValueHolder"
"GLMPortReferenceTest",""
"GoferSynchronize","Synchronize repos "
"RubExtentChanged","I am raised when the right bounds of the text area are changed"
"FFITestStructure2DoubleStructure",""
"IceTipSelectingDataSource","Description--------------------I am a datasource which elements are dislpayed with a checkbox to be able to select some of them. Public API and Key Messages--------------------- #selectedItems 					Accessor to get the selected items- #onSelectionChangedBlock 		Optional block executed when an item is selected/deselected. It takes as first parameter the item and as second parameter a boolean (true on selection, false on deselection)Examples--------------------	IceTipSelectingDataSource new		tool: self;		elements: self allPackagesNotRegistered;		yourself	 Internal Representation and Key Implementation Points.--------------------    Instance Variables	onSelectionChangedBlock:		<aBlock>		Optional block executed when an item is selected/deselected. It takes as first parameter the item and as second parameter a boolean (true on selection, false on deselection)	selectedItems:					<aSet>			Collection containing all the selected items"
"RPackageTestCase","Common superclass for RPackage related tests"
"OSWindowHandle","I am abstract class, representing an OSWindow handle.Each instance of OSWindow holds a handle, through which it communicates with underlaying operating system.The implementation of OSWindowHandle (and subclasses) is highly driver-specific and therefore considered private."
"SmalltalkEditor","The editor built specifically for Smalltalk code"
"DefaultExternalDropHandler","An alternative default handler that uses the file-list services to process files."
"ClySwitchToInstanceSideCommand","I am a command to switch full browser to the instance side mode"
"ZnServerConnectionClosedEvent","ZnServerConnectionClosedEvent signals that the server closed a client connection to address. "
"GTPlayBindingDarkThemer",""
"MetacelloScriptGitBasedDownloadNotification",""
"IceTipTreeDataSource","I'm a generic tree datasource for Tip components."
"GTUnorderedFilter",""
"ISO88592TextConverter","Text converter for ISO 8859-2.  An international encoding used in Eastern Europe."
"ZnLineReader","I am ZnLineReader and I help reading CRLF terminated lines from a stream.I can work on ascii and binary streams doing conversions as necessary.I limit lines to a maximum length.I work with a reusable buffer.Part of Zinc HTTP Components."
"GLMBrickColorThemer","I define different usefull colors"
"MetacelloResolveProjectUpgrade",""
"MCSliceMaker","MCSliceMaker is a dialog to help you making slices.It allows you to enter the slice number, the summary and to directly select dependent dirty packages.Then a slice package is added for you in the working copy browser from which it is opened.Just copy-paste issue number and summary. All is formated for you.Instance Variables	info:		<MCSliceInfo>	okToDoSlice:		<Boolean>	window:		<StandardWindow>info	- It is the model for the user interfaceokToDoSlice	- true if the OK button is clicked, it is to avoid slice making in case of cancel and in the case where the close button of the window has been clickedwindow	- my window"
"ReadWriteStreamTest","This is the unit test for the class ReadWriteStream.Unit tests are a good way to exercise thefunctionality of your system in a repeatable andautomatic manner. They are therefore recommended ifyou plan to release anything. For more information,see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"DebugAction","A DebugAction is the entry point for creating debugging actions.A new debugging action is created by subclassing it and implementing, by default, the method executeAction (This can be configured by using the method actionSelector).  An id must also be provided uniquely identifying the action among all the others.The initialize method should only set default values or initialize attributes that are independent of the debugger or session. The others must be initilized in the method forDebugger:.A debugging action has the following lifecycle: 	- the action is created using #new and #initialized is called	- #appliesToDebugger:, and for contextual actions #appliesToContext: are called	- if the actions applies to the current situation #forDebugger: is used to set the debugger	- #execute is called when the user triggers the action.	- when the debugger updates its action this process is repeated."
"CmdMouseCommandActivation","My subclasses represent particular kind of mouse events which should activate annotated commands.For example it can be mouse click or double click.My instances are configured with type of mouse button and keyboard modifier which are expected to be used to activate commands.By default the left click is expected:	CmdClickActivation for: aCommandUser.With extra parameter you can configure modifier: 	CmdClickActivation with: KMModifier shift for: aCommandUser.	To specify mouse button use following messages: 	(CmdClickActivation for: aCommandUser) beBlueButton.	(CmdClickActivation for: aCommandUser) beYellowButton.	(CmdClickActivation for: aCommandUser) beRedButtonAnd there is special constructor for yellow button which is usefull for various context menu activations:	CmdClickActivation byYellowButtonFor: aCommandUser.	CmdClickActivation byYellowButtonWith: KMModifier shift for: aCommandUserMy instances are active when they are match last mouse event:	aMouseActivation isActiveInContext: aToolContext 	I extend this method to check that last mouse event matches expected button and modifier. 		There are few methods how to enable mouse commands in the morphs: 	aMorph enableMouseCommands: CmdClickActivation withContextFrom: aToolContext.It enables click action to execute commands in given aMorph instance.	aMorph enableAllMouseCommandsFrom: aToolContext.    	 		It enables all kind of mouse events to execute commands in given aMorph instance.Internal Representation and Key Implementation Points.    Instance Variables	keyboardModifier:		<KMModifier>	whichButton:		<Integer>"
"RubSmalltalkCodeMode","I represent the mode to use for editing smalltalk code"
"EvaluateCommandLineHandler","Usage: eval [--help] [--save] [ --no-quit ] <smalltalk expression>	--help                   list this help message	--save                   save the image after evaluation of the expression	--no-quit                if specified, the image continues runing after	                         evaluating the <smalltalk expression>	<smallltalk expression>  a valid Smalltalk expression which is evaluated and 	                         the result is printed on stdoutDocumentation:A CommandLineHandler that reads a string from the command line, outputs the evaluated result and quits the image. This handler either evaluates the arguments passed to the image:	pharo Pharo.image eval  1 + 2	or it can read directly from stdin:	echo ""1+2"" | $PHARO_VM my.image evalImportant: don't manually save the image at the end of the expression by calling something like 'Smalltalk snapshot: true andSave: true'! Instead, use the safer --save option."
"RePropertyAction","I am an action that appears in the Nautiluas qa plugin next the the item's title.icon - a Form that will appear on the button (green square by default)description - the description that will be present on popup on howeraction - a two (ortional) parameter block that is evaluated with the critic and the current code entity (class, method…) when the button is pressed No newline at end of file"
"LGitRepositoryNotFound",""
"ZnCharacterEncoder","I am ZnCharacterEncoder, I encode and decode Character objects to and from a binary stream.I am an abstract class with following protocol:#nextFromStream:#nextPut:toStream:#encodedByteCountFor:#backOnStream:The first two are compatible with TextConverter and subclasses.I add some convenience methods:#encodeString:#decodeBytes:#encodedByteCountForString:Contrary to older encoders, I work strictly from strings to bytes and vice versa and I will throw errors instead of silently ignoring them.I also implement optimized bulk operations:#next:putAll:startingAt:toStream:#readInto:startingAt:count:fromStream:Additionally, I can encode Integer code points to a binary stream as well as read Integer code points from a binary stream. This is in a sense a more fundamental operation that avoids instanciating Character objects.#nextCodePointFromStream:#nextPutCodePoint:toStream:#encodedByteCountForCodePoint:#decodeAsCodePoints:#encodeCodePoints:#encodedByteCountForCodePoints:Part of Zinc HTTP Components."
"IceCheckoutAlreadyLoadedPackages","I'm a strategy thet will load into image JUST the packages that were already loaded on it. Loading same-named packages of those already in image is probably the best strategy possible before an installation following a project description.This strategy is still dangerous bacause packages installed may be incorrectly initialisated. Or a refactor could have split a package and now half of the data are not there anymore. But still... is the best possible approach when you do not have a propper project description."
"ReTestClassNameShouldNotEndWithTests","Check if a test class' name ends with 'Tests' instead of 'Test'"
"EpPropagateRefactoring","I represent a refactoring that consists in the propagation (i.e. the ""redo"") of another refactoring."
"RubEditingAreaTest","A RubEditingAreaTest is a test class for testing the behavior of RubEditingArea"
"BalloonMorph","A balloon with text used for the display of explanatory information.Balloon help is integrated into Morphic as follows:If a Morph has the property #balloonText, then it will respond to #showBalloon by adding a text balloon to the world, and to #deleteBalloon by removing the balloon.Moreover, if mouseOverEnabled is true (see class msg), then the Hand will arrange to cause display of the balloon after the mouse has lingered over the morph for a while, and removal of the balloon when the mouse leaves the bounds of that morph.  In any case, the Hand will attempt to remove any such balloons before handling mouseDown events, or displaying other balloons.Balloons should not be duplicated with veryDeepCopy unless their target is also duplicated at the same time."
"GRClassVariableCapitalizationRule","Class and pool variable names should start with an uppercase letter."
"ManifestFiles","Includes file and directory handling as well as file streams"
"SugsFindSenders","I know how to find senders from a message"
"RBTransformationDummyRuleTest",""
"SystemProgressMorph","I display a set of progress indicator in a list.Special care is taken to update the view while the rest of the UI process is blocked.Reset.SystemProgressMorph reset.Examples.self show: 'Doing...' from: 500 to: 600 during: [ :bar |	500 to: 600 do: [ :x | 		bar current: x.		(Delay forMilliseconds: 20) wait 		""Just to slow it down so we can see what's going on"" ] ].self show: 'Doing...' from: 0 to: 50 during: [ :bar |	0 to: 50 do: [ :x | 		bar increment.		bar label: x asString.		(Delay forMilliseconds: 20) wait ""Just to slow it down so we can see what's going on"" ] ]."
"HEPragma","I represent a Pragma.I am stored as a methodLiteral, a keyword and an array of  arguments.The literals are exported as HEAbstractLiteral.The method is a HEMethodLiteralThe keyword is a HESymboland the arguments si a HEArray"
"BasicCommandLineHandler","I'm a command line handler who is not aware of any UI or Tools present in the system.I'm used as base handler for loading executing stripped images (kernel images, for example). My usage is the same as PharoCommandLineHandler, see his comment as better explanation.I also implement a way to password-protect command lines. The password will not be saved as in clear. It will be hash using pepper and iterations.The pepper of a hash is a fix string happened to a password to increase the difficulty of finding the password. Also, we hash multiple times (iterations) to increase the strenght of the protection.If you wish to define ""application"" command lines who do not need a password protection, implement the method #requirePasswordInDeployment on the class side to return false.Examples of password protection----------------""Enable password protection""CommandLinePasswordManager protectCommandLinesByPasswordWith: 'PharoPassword'""You can also customize the pepper and number of iterations for the hashing of the password.""CommandLinePasswordManager protectCommandLinesByPasswordWith: 'PharoPassword' pepper: 'SomePepper' numberOfHashIterations: 10""Remove password protection""CommandLinePasswordManager removePasswordProtectionHow to specify the password----------------Command line without password:	Pharo.exe Pharo.image eval ""1+1""Command line with password:	Pharo.exe Pharo.image eval ""1+1"" --deploymentPassword=Test"
"FreeTypeEmbeddedFileInfo","File info for embbeded FreeType fonts"
"DynamicLeftToRightColumnsLayoutTest","I hold tests for DynamicLeftToRightColumnsLayout."
"MetacelloCypressPackageSpec","I am a package spec specific to metadataless projects (filetree/tonel)."
"GLMRubTextFieldBrick","A GLMRubTextFieldBrick is basic text editor brick used for single line input fields. Supports variety of layout properties: vShrinkWrap - height fits text size + vertical paddingshShrinkWrap - width fits text size + horizontal paddingsvSpaceFill - fills parent vertically. Actual text editor height = parent height - vertical paddingshSpaceFill - fills parent hprozontally. Actual text editor width = parent width - horizontal paddingsbeCentered - actuall text editor field will be centered verticallyInstance Variables	isCentered:		<Boolean>isCentered	- true if actual text editor field should be centered vertically,	   false otherwise"
"OSWindowPlatformSpecificHandle","I represent a collection of platform specific handles that can be passed to external graphics rendering APIs such as OpenGL, Vulkan, Direct 3D and Metal.Instance Variables	display:		The display handle.	platform:		The a symbol with the name of the platform.	surface:		The window drawing surface handle.	window:		The window handle."
"ClyNavigationEnvironment","I am environment where user navigates over particular system by quering objects from particular scope of other objects. I cache query results and extend retrieved objects using builtin plugin system.My instances should be created over some system: 	environment := ClyNavigationEnvironment over: aSystemI do not provide any requirement for the class of target system. It can be any object from particular domain which represents the global view on it.But Calypso requires two things which system should implement. It can define them as extension inside Calypso integration package:1) The system should provide global scope which will adopt it to Calypso navigation model. This scope will represent the root place where all objects in system can be reached.Concrete system should implement subclass of ClySystemScope and return it instance as global scope of actual system object. It should be returned from method #asGlobalScopeIn: which system should implement.Users can access the system and it scope from my instance:		environment system	environment systemScope2) The system should notify my instance about changes.I maintain query cache and it requires invalidation when system is changed. So responsibility of any system is to subscribe and unsubscribe my instances for possible changes: 		aSystem subscribe: environment	aSystem unsubscribe: environment	I am subscribed when I am attaching to the system:		environment attachToSystem	And I am unsubscribed when detaching: 	environment detachFromSystem	User should manually attach my instances to the system when they are interested in updates.I should not be subclassed. Users can maintain singleton instance of me for concrete system. It will provide global cache for all queries over given system.For this purpose I provide class side variable defaultGlobalEnvironments. It maps system instance to my instance (aNavigationEnvironment) over it.Idea that applications usually have kind of default system instance (imaging Smalltalk global). And to provide default navigation over it users can extend my class side with appropriate accessing method. For example navigation over current Smalltalk image is accessed using #currentImage method: 	ClyNavigationEnvironment class>>currentImage 			^self defaultOver: ClySystemEnvironment currentImageThe method #defaultOver: retrieves existing instance or creates new one. Such default instances are automatically attached to the system.In this example the system is an instance of ClySystemEnvironment which represents Smalltalk system. (it was suitable to introduce extra wrapper for this domain. Look it comment for details).To reset all global environments send #reset message to me: 	ClyNavigationEnvironment reset	It will detach (unsubscribe) environments from their systems and clear collection.I provide #query: method to execute queries using cache. But userrs should not use it directly.Users should prepare scope instance using given environment:	scope := ClyClassScope of: Object in: environment And then create and execute query instance: 	query := ClyAllMethods from: scope.	query executeUnderhood my #query: method is called by scope during query execution logic. I returns existing result if it exists. Otherwise I build new one.There is another method which allow to check that given query will produce empty result:		environment isQueryEmpty: query	It also should not be used directly. But query should be asked directly: 	query hasEmptyResultIf there is existing result then I just check that it is not empty. Otherwise I ask query to #checkEmptyResult where it evaluates actual logic.To maintain query cache I use two mutexes:- accessGuard, protects any modification of queryCache- updateGuard, protects cache updating in the way that multiple changes will be always processed in sequenceIn my cache the query is a key and the result is a value. The cache is weak and unused result is cleaned by GC. In same time unused keys (queries which result is cleaned) are collected when new query is executed (using #cleanGarbageInCache).I am extendable by plugins, subclasses of ClyEnvironmentPlugin. Plugins are responsible to extend queries of particular system in following ways:- plugin can extend properties of query result (ClyBrowserItem instances and query metadata).- plugin can supply information about other systems. Plugins are packaged separatelly. Plugin package can extend visibility of existing scopes by providing new information from external systems. This information can be retrieved by new queries.And to manage this information plugin should notify environment about external changes.To add plugin use following method:	environment addPlugin: MyTestPlugin new.	And to access plugins use: 		environment pluginsDo: aBlock	When I am attached to the system I also attach all my plugins to it using:	plugin attachToSystemIn this method plugin is able to subscribe on own system changes to notify environment about them. Internal Representation and Key Implementation Points.    Instance Variables 	plugins:		<Collection of<ClyEnvironmentPlugin>>>	queryCache:		<WeakValueDictionary of<ClyQuery, ClyQueryResult>>	system: 	<Object>	updateStrategy:	<ClyEnvironmentUpdateStrategy>	updateGuard:	<Mutex>	accessGuard:	<Mutex>"
"RBFooDummyLintRuleTest",""
"STONTestAssociation","STONTestAssociation is used to support unit tests."
"GLMMorphMorphicTest",""
"MCTool","Common superclass for Monticello toolsPlaceholder for a MCVersionCache for MCLazyVersionInfo"
"IceGitHubBadCredentialsError","I'm an error that happens when credentials are bad."
"NautilusRefactoring","NautilusRefactoring is a facade for refactorings:- class- method- inst var- class var- source code"
"TextEditorTest","Unit test for text editor "
"MorphTreeListManager","A manager caring about a morphic based tree"
"WidgetExamples","This class provides examples on how different widgets can be made.See the methods starting with ""example"" in my class side.Examples for different widgets:WidgetExamples exampleBasicControls.WidgetExamples exampleOtherControls.WidgetExamples exampleColorControls.WidgetExamples exampleDialogs.WidgetExamples exampleGroups.WidgetExamples exampleTextEntryWithCompletionDialog.WidgetExamples exampleWindowWithToolbars."
"OCStoreIntoSpecialVariableError","Error when trying to assign to a special Variable.(like self )."
"GLMMorphicCompositeRenderer",""
"RxMatcherTest","This class provides tests for the regular expression matcher."
"FileSystemHandleTest","SUnit tests for FileSystemHandle"
"FuzzyMatcher","FuzzyMatcher is an approximate string matching algroithm that can determine if a string includes a given pattern.For example, the string 'axby' matches both the pattern 'ab' and, 'ay', but not 'ba'. The algorithm is based on lib_fts[1], and includes an optional scoring algorithm that can be used to sort all the matches based on their similarity to the pattern.1: https://blog.forrestthewoods.com/reverse-engineering-sublime-text-s-fuzzy-match-4cffeed33fdbhttps://github.com/forrestthewoods/lib_fts"
"LGitPushUpdate",""
"IceUpstreamNotConfigured",""
"IceTipRepairCloneRepository","I'm a repair action to clone again a repository (in case something moved).I'm active when repository can not be located in disk.Notice that doing this can lead you to another situation that needs repair (like a detached status)"
"RFASTTranslatorForEffect","WORKAROUND: copy of OCASTTranslatorForEffectWill be removed when the new Translor design is in place"
"RBParseTreeSearcherTest","SUnit tests for RBParseTreeSearcher"
"OSTouchThreeFingersScrollBeginEvent","Three fingers started to scroll"
"GTEventMultiBundleFactory","I know how to create GTEventMultiBundle object from a collection of GTEventBundle objects."
"MessageCatcher","Any message sent to me is returned as a Message object.""Message catcher"" creates an instance of me."
"RBSizeCheckRule","Check for code that checks that a collection is non-empty before sending it an iteration message (e.g., do:, collect:, etc.). Since the collection iteration messages work for empty collections, we do not need to clutter up our method with the extra size check."
"BottomBorder","Description--------------------BottomBorder is a border style that will fill only the bottom of the rectangle.Public API and Key Messages--------------------- #trimSize: 	This option allow to trim the bottom borderExamples--------------------	BottomBorder new		width: 1;		baseColor: Color white;		trimSize: 2;		yourself	 Internal Representation and Key Implementation Points.--------------------    Instance Variables	trimSize:		<anInteger>		An amount of pixel to trim from both side of the bottom border"
"EpProtocolChange","I represent a change in the protocols of a class."
"MCDirectoryRepositoryTest",""
"GTBytecodeDebugger","I am a debugger that provides the ability to step through the execution at the bytecode level (e.g. one bytecode at a time)."
"GTSpotterNullProcessorFilter","I implement a filtering strategy for processors that always returns true. Use me by default instead of adding null checks to determnine if a filter is present."
"FLSingletonMock","A mock for a singleton"
"SQSurfaceDispatch","A structure from SurfacePlugin.h  typedef struct sqSurfaceDispatch {	/* Version information. Must be provided by the client	   so the surface manager can check if certain operations	   are supported. */	int majorVersion;	int minorVersion;	/* Version 1.0 */	fn_getSurfaceFormat getSurfaceFormat;	fn_lockSurface lockSurface;	fn_unlockSurface unlockSurface;	fn_showSurface showSurface;} sqSurfaceDispatch; "
"SimpleTestResourceCircular","I'm a simple test ressource for test purposes"
"GLMContextChanged","A GLMContextChanged is announced by a presentation when an outer port event raises."
"ClyPackageScopeTest",""
"LGit_GIT_EAPPLIED",""
"UnhandledError","I am the ultimate error. By default if an Error or Exception is not handled by the code the default action is to raise an UnhandledError which in interactive mode triggers the UIManager to open a debugger.	Error signal	...	UnhandledError signalForException: error	...	UIManager opens a debugger	"
"ShiftClassBuilder","I know how to create classes in the system.The classes are nor installed or modifies other objects. That is part of the job of the ShiftClassInstaller.I can be extended by using a different builder enhancer. See ShDefaultBuilderEnhancer for a default implementation. I can be used directly to create anonymous classes, but it is better if you use the annonymous class installer.I also can compare the old class with the configured new class to calculate the required changes."
"QuotedPrintableMimeConverterTest","SUnit tests for QuotedPrintableMimeConverter"
"DoesNotUnderstandDebugAction","A DoesNotUnderstandDebugAction is a debugging action that can create a method if the debugger was opened as a result of a #doesNotUnderstand mesage send."
"StdioStream","I am a concrete subclass of AbstractBinaryFileStream for stdio streams.StdioStreams map to one of three types of underlying file: - Terminal input/output.- Piped input/output and named pipes (FIFO files) such as created with the shell pipe character ""|"".- A file mounted on the file system.  This includes all the files that can be opened with a FileReference, including sysfs files such as /proc/cpuinfo and character devices such as /dev/urandom.The operations that can be performed on these vary, e.g. it is possible to position the stream for a regular file, but not for piped input.  Currently it is up to the user of StdioStream to know which type of input they are dealing with.As pipes can't be positioned and FilePlugin doesn't provide a peek primitive, simulate #peek by reading the next character and holding on to it until it is consumed.Despite providing both input and output methods, StdioStreams are either read-only or write-only.  Currently it is up to the user to know which type of stream they are dealing with.Normally instances of StdioStream are not created directly but via Stdio, e.g: Stdio stdin.Stdio stdout.Stdio stderr.Instance Variables:- peekBuffer     <SmallInteger or nil> The next character to be read from the stream or nil."
"GTBasicRecorderEvent","I represent a basic event for the event recorder."
"IceTipAcceptCommand","I'm a generic accept action command. My user needs to implement the method #accept."
"SimpleServiceEntry","I represent a serviceprovider : the service providerlabel : to be display in a menuselector : to do the serviceuseLineAfterstateSelector : a secondary selector (to be able to query state of the provider for example)description : a description for balloon for exampleargumentGetter : a selector to get additional arguments with (if selector requres them)buttonLabel : a short labelThe entire client interface (provided by FileList and other users of the registry)is this (browse #getArgumentsFrom: and the senders of #argumentGetter:):fullName (returns a String with the full filename)dirAndFileName (returns {directory. fileName})readOnlyStream (returns an open read-only stream)"
"OmSTONEntryReader","I implement how to read entries from a stream using Ston serializer."
"ClyClassScope","I represent the local scope of classes which they define by themselves:	ClyClassScope of: Array 	It represents instance side of Array.	ClyClassScope of: Array class 	It represents class side of Array.Also I provide natural hierarchy traversal of basis classes. It means that 	ClySuperclassScope of: Array class localScope: ClyClassScope  will see Class and Object because any metaclass is subclass of Class which by itself is subclass of Object.It is ortogonal to behaviour of ClyMetaLevelClassScope subclasses which restrict hierarchical traversal to the relationships of instance side. For example 	ClySuperclassScope of: Array class localScope: ClyClassSideScope	will not see Class and Object. It will end up at Object class and ProtoObject class.So I am the default local scope for hierarchy scopes which gives the natural look at classes without user metalevel restrictions"
"AbstractTool","I'm an abstract class grouping generic methods for managing packages/classes/groups/methods from a browser"
"NoBroadcastAllowed","A socket primitive failed due to no broadcast being allowed on this socket.This failure is fairly specific, as IPv6 does not include broadcast, and it is not supported by the TCP protocol.Usually, the cause is one of two things;- We tried sending to the wrong address- We should have #setOption: 'SO_BROADCAST' value: true on the (UDP) socket"
"RBConsistencyCheckRule","Checks for code using equality tests instead of the message sends. Since the code ""aCollection size = 0"" works for all objects, it is more difficult for someone reading such code to determine that ""aCollection"" is a collection. Whereas, if you say ""aCollection isEmpty"" then aCollection must be a collection since isEmpty is only defined for collections."
"GLMDashboardTest",""
"MetacelloVersionConstructor",""
"EncoderForSistaV1","EncoderForSistaV1 encodes a bytecode set for Sista, the Speculative Inlining Smalltalk Architecture, a project by Clément Bera and Eliot Miranda.  Sista is an optimizer that exists in the Smalltalk image, /not/ in the VM,  and optimizes by substituting normal bytecoded methods by optimized bytecoded methods that may use special bytecodes for which the Cogit can generate faster code.  These bytecodes eliminate overheads such as bounds checks or polymorphic code (indexing Array, ByteArray, String etc).  But the bulk of the optimization performed is in inlining blocks and sends for the common path.  This bytecode set therefore differs from a normal Smalltalk set in providing a set of inlined primitives that do not validate their arguments that the compiler generates only when it can prove that the primitives' arguments are valid.The basic scheme is that the Cogit generates code containing performance counters.  When these counters trip, a callback into the image is performed, at which point Sista analyses some portion of the stack, looking at performance data for the methods on the stack, and optimises based on the stack and performance data.  Execution then resumes in the optimized code.The Sista Cogit (e.g. SistaStackToRegisterMappingCogit) adds counters to conditional branches.  Each branch has an executed and a taken count.  On execution the executed count is decremented and if the count goes below zero the VM sends a message at a special index in the specialObjectsArray (as of writing, conditionalCounterTrippedOn:).  Then if the branch is taken the taken count is decremented.  The two counter values allow the Sista optimizer to collect basic block execution paths and to know what are the ""hot"" paths through execution that are worth agressively optimizing.  Since conditional branches are about 1/6 as frequent as sends, and since they can be used to determine the hot path through code, they are a better choice to count than, for example, method or block entry.The VM provides a primitive that fills an Array with the state of the counters, and the state of each linked send in a method.  Tthe optimizer obtains the branch and send data for a method via this primitive.This bytecde set encodes a bytecode set for Smalltalk that lifts limits on the number of literals and branch distances, and extended push integer and push character bytecodes.  Bytecodes are ordered by length to make decoding easier.  Bytecodes marked with an * are extensible via a prefix bytecode.N.B.  Extension bytecodes can only come before extensible bytecodes, and only if valid (one cannot extend a bytecode extensible by Ext A with an Ext B).  An extensible bytecode consumes (and zeros) its extension(s).  Hence the hidden implicit variables holding extensions are always zero except after a valid sequence of extension bytecodes.Instance Variables (inherited)1 Byte Bytecodes	code	(note)	binary			name	0-15			0000 iiii 				Push Receiver Variable #iiii	16-31		0001 iiii				Push Literal Variable #iiii	32-63		001 iiiii				Push Literal #iiiii	64-71		01000 iii				Push Temp #iii	72-75		010010 ii				Push Temp #ii + 8	76			01001100			Push Receiver	77			01001101			Push true	78			01001110			Push false	79			01001111			Push nil	80			01010000			Push 0	81			01010001			Push 1*	82			01010010			Push thisContext, (then Extend B = 1 => push thisProcess)	83			01010011			Duplicate Stack Top	84-87		010101 ii				UNASSIGNED	88-91		010110 ii				Return Receiver/true/false/nil	92			01011100			Return top	93			01011101			BlockReturn nil*	94			01011110			BlockReturn Top [* return from enclosing block N, N = Extend A, then jump by Ext B ]*	95			01011111			Nop	96-111		0110 iiii				Send Arithmetic Message #iiii #(#+ #- #< #> #<= #>= #= #~= #* #/ #\\ #@ #bitShift: #// #bitAnd: #bitOr:)	112-127	0111 iiii					Send Special Message #iiii #(#at: #at:put: #size #next #nextPut: #atEnd #== class #~~ #value #value: #do: #new #new: #x #y)	128-143	1000 iiii					Send Literal Selector #iiii With 0 Argument	144-159	1001 iiii					Send Literal Selector #iiii With 1 Arguments	160-175	1010 iiii					Send Literal Selector #iiii With 2 Arguments	176-183	10110 iii					Jump iii + 1 (i.e., 1 through 8)	184-191	10111 iii					Pop and Jump 0n True iii +1 (i.e., 1 through 8)	192-199	11000 iii					Pop and Jump 0n False iii +1 (i.e., 1 through 8)	200-207	11001 iii					Pop and Store Receiver Variable #iii	208-215	11010 iii					Pop and Store Temporary Variable #iii	216		11011000				Pop Stack Top	217		11011001				Unconditional trap [Sista specific]	218-219	1101101 i				UNASSIGNED	220-223	110111 ii					UNASSIGNED2 Byte Bytecodes*	224		11100000	aaaaaaaa	Extend A (Ext A = Ext A prev * 256 + Ext A) A is an unsigned extension.*	225		11100001	bbbbbbbb	Extend B (Ext B = Ext B prev * 256 + Ext B) B is a signed extension.*	226		11100010	iiiiiiii		Push Receiver Variable #iiiiiiii (+ Extend A * 256)*	227		11100011	iiiiiiii		Push Literal Variable #iiiiiiii (+ Extend A * 256)*	228		11100100	iiiiiiii		Push Literal #iiiiiiii (+ Extend A * 256)	229		11100101	iiiiiiii		Push Temporary Variable #iiiiiiii	230		11100110	iiiiiiii		UNASSIGNED (was pushNClosureTemps)	231		11100111	jkkkkkkk	Push (Array new: kkkkkkk) (j = 0)									&	Pop kkkkkkk elements into: (Array new: kkkkkkk) (j = 1)*	232		11101000	iiiiiiii		Push Integer #iiiiiiii (+ Extend B * 256, where bbbbbbbb = sddddddd, e.g. -32768 = i=0, a=0, s=1)*	233		11101001	iiiiiiii		Push Character #iiiiiiii (+ Extend B * 256)**	234		11101010	iiiiijjj		Send Literal Selector #iiiii (+ Extend A * 32) with jjj (+ Extend B * 8) Arguments**	235	(1)	11101011	iiiiijjj	ExtendB < 64										ifTrue: [Send To Superclass Literal Selector #iiiii (+ Extend A * 32) with jjj (+ Extend B * 8) Arguments]										ifFalse: [Send To Superclass of Stacked Class Literal Selector #iiiii (+ Extend A * 32) with jjj (+ (Extend B bitAnd: 63) * 8) Arguments]	236		11101100	iiiiiiii		Call Mapped inlined primitive #iiiiiiii [Sista specific]*	237		11101101	iiiiiiii		Jump #iiiiiiii (+ Extend B * 256, where bbbbbbbb = sddddddd, e.g. -32768 = i=0, a=0, s=1)**	238		11101110	iiiiiiii		Pop and Jump 0n True #iiiiiiii (+ Extend B * 256, where Extend B >= 0) **	239		11101111	iiiiiiii		Pop and Jump 0n False #iiiiiiii (+ Extend B * 256, where Extend B >= 0)*	240		11110000	iiiiiiii		Pop and Store Receiver Variable #iiiiiii (+ Extend A * 256) *	241		11110001	iiiiiiii		Pop and Store Literal Variable #iiiiiiii (+ Extend A * 256) 	242		11110010	iiiiiiii		Pop and Store Temporary Variable #iiiiiiii*	243		11110011	iiiiiiii		Store Receiver Variable #iiiiiii (+ Extend A * 256) *	244		11110100	iiiiiiii		Store Literal Variable #iiiiiiii (+ Extend A * 256) 	245		11110110	iiiiiiii		Store Temporary Variable #iiiiiiii	246-247	1111011 i	xxxxxxxx	UNASSIGNED3 Byte Bytecodes	248	(2)	11111000 	iiiiiiii	mssjjjjj		Call Primitive #iiiiiiii + (jjjjj * 256) 								m=1 means inlined primitive, no hard return after execution. 								ss defines the unsafe operation set used to encode the operations. 								(ss = 0 means sista unsafe operations, ss = 01 means lowcode operations, other numbers are not used) [Sista specific]	249		11111001 	xxxxxxxx	siyyyyyy	push Closure Compiled block literal index xxxxxxxx (+ Extend A * 256) numCopied yyyyyy receiverOnStack: s = 1 ignoreOuterContext: i = 1**	250		11111010 	eeiiikkk		jjjjjjjj		Push Closure Num Copied iii (+ExtA//16*8) Num Args kkk (+ ExtA\\16*8) BlockSize jjjjjjjj (+ExtB*256). ee = num extensions	251		11111011 	kkkkkkkk	jjjjjjjj		Push Temp At kkkkkkkk In Temp Vector At: jjjjjjjj*	252	(3)	11111100 	kkkkkkkk	jjjjjjjj		Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj*	253	(3)	11111101 	kkkkkkkk	jjjjjjjj		Pop and Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	254		11111110	kkkkkkkk	jjjjjjjj		UNASSIGNED	255		11111111	xxxxxxxx	jjjjjjjj			UNASSIGNED(1) Bytecode 235 is a super send bytecode that starts the lookup in the superclass of some class.  It has two forms, ""normal"" and ""directed"". In the normal form, the class is the value of the method's methodClassAssociation which must be the last literal.  In the directed form the class is the class on top of stack.(2) The Call Primitive Bytecode specifies either a primitive in the primitive table (m=0) or an inlined primitive (m=1). Non-inlined primtiives from the primitive table have index (jjjjjjj * 256) + iiiiiiii and return from the method if they succeed.  This bytecode is only valid as the first bytecode of a method.  Inline primitives have index (jjjjjjj * 256) + iiiiiiii, cannot fail, and do not return when they succeed, yielding a result (typically on top of stack after popping their arguments, but possibly in a byte data stack, for example for unboxed floating-point primitives).[Sista specific] The 3 bytecodes with this annotations are not used in the default Pharo runtime but only in specific circumstances (Sista runtime, etc.)Here is the specification of the sista unsafe instructions (unsafe operations, set 00). The lowcode set uses external specifications.We sort the inline primitive operations by arity.  Nullary primitives occupy the 0-999 range. Unary primitives occupy the 1-1999 range, up until 5 args. Primitives starting at 6000 are jumps. 6000-6999 are 1 parameter jump (the distance), 7000-7999 are 2 parameters jump and jumps over 8000 have 3 parameters.All jumps encoded as inlined primitives (mapped or not) use the pushIntegerLong: scheme to push their jump size on stack.We define the following *non-mapped* inlined primitives:1000	rawClassnot a forwarder => Behavior (Same as class special send, but receiver is not a forwarder)1001	numSlotspointer object => Smi between 0 and SmallInteger maxVal // 4 - 1 (Answers total size in pointer-sized slots)1002	numBytesbyte object => Smi between 0 and SmallInteger maxVal - 9 (Includes compiled code)1003	numShortsshort object => Smi between 0 and SmallInteger maxVal - 91004	numWordsword object => Smi between 0 and SmallInteger maxVal - 91005	numDoubleWordsdouble word object => Smi between 0 and SmallInteger maxVal - 91011	rawNewliteral which is a fixed-sized behavior => instance of the receiver with fields nilled out1012	rawNewNoInitliteral which is a fixed-sized behavior => instance of the receiver (Fields of returned value contain undefined data)1020	objectIdentityHashnon-immediate and non-behavior => 22 bits strictly positive Smi1021	smiIdentityHashSmi => Smi1022	charIdentityHashCharacter => 22 bits strictly positive Smi1023	smallfloatIdentityHashSmallFloat => Smi1024	behaviorIdentityHashBehavior => 22 bits strictly positive Smi1030	characterAsIntegerCharacter => 22 bits strictly positive Smi (Unicode)1031	smallFloatAsIntegerSmallFloat => Smi1032	smiAsFloatSmi => SmallFloat1039	unforwardNonImmediatenon immediate => Not a forwarder1040	unforwardAnything => Not a forwarder1041	possibleRootnon-immediate, not a forwarder => receiver is returned (should be effect-only) (If old, becomes gray and remembered to allow many unchecked stores in a row afterwards)2000	smiAdd:Smi, Smi => Smi (no overflow, optimised if one operand is a constant)2001	smiSub:Smi, Smi => Smi (no overflow, optimised if one operand is a constant)2002	smiMul:Smi, Smi => Smi (no overflow, optimised if one operand is a constant)2003	smiDivide:Smi, Smi => Smi (no overflow, optimised if one operand is a constant)2004	smiDiv:Smi, Smi => Smi (no overflow, optimised if one operand is a constant)2005	smiMod:Smi, Smi => Smi (no overflow, optimised if one operand is a constant)2006	smiQuo:Smi, Smi => Smi (no overflow, optimised if one operand is a constant)2016	smiBitAnd:Smi, Smi => Smi (optimised if one operand is a constant)2017	smiBitOr:Smi, Smi => Smi (optimised if one operand is a constant)2018	smiBitXor:Smi, Smi => Smi (optimised if one operand is a constant)2019	smiBitShiftLeft:Smi greater or equal to 0, Smi greater or equal to 0 => Smi (no overflow, optimised if arg1 is a constant)2020	smiBitShiftRight:Smi, Smi greater or equal to 0 => Smi (optimised if arg1 is a constant)2032	smiGreater:Smi, Smi => Boolean (optimised if one operand is a constant, Pipelined with ifTrue:ifFalse:)2033	smiLess:Smi, Smi => Boolean (optimised if one operand is a constant, Pipelined with ifTrue:ifFalse:)2034	smiGreaterOrEqual:Smi, Smi => Boolean (optimised if one operand is a constant, Pipelined with ifTrue:ifFalse:)2035	smiLessOrEqual:Smi, Smi => Boolean (optimised if one operand is a constant, Pipelined with ifTrue:ifFalse:)2036	smiEquals:Smi, Smi => Boolean (optimised if one operand is a constant, Pipelined with ifTrue:ifFalse:)2037	smiNotEquals:Smi, Smi => Boolean (optimised if one operand is a constant, Pipelined with ifTrue:ifFalse:)2038	rawEqualsEquals:not a forwarder, not a forwarder => Boolean (optimised if one operand is a constant, Pipelined with ifTrue:ifFalse:)2039	rawNotEqualsEquals:not a forwarder, not a forwarder => Boolean (optimised if one operand is a constant, Pipelined with ifTrue:ifFalse:)2048	rawNewColon:literal which is a variable-sized behavior, Smi => instance of receiver, fields nilled/zeroed out (optimised if arg1 is a constant)2049	rawNewColonNoInit:literal which is a variable-sized behavior, Smi => instance of receiver (Fields of returned value contain undefined data, optimised if arg1 is a constant)2064	pointerAt:Pointer object (Fixed sized or not) and not a context, Smi =>  (1-based, optimised if arg1 is a constant)2065	maybeContextPointerAt:Pointer object (Fixed sized or not), Smi =>  (1-based, optimised if arg1 is a constant)2066	byteAt:byte object, Smi => 8 bits unsigned Smi (1-based, optimised if arg1 is a constant)2067	shortAt:short object, Smi => 16 bits unsigned Smi (1-based, optimised if arg1 is a constant)2068	wordAt:word object, Smi => 32 bits unsigned Smi (1-based, optimised if arg1 is a constant)2069	doubleWordAt:double word object, Smi => 64 bits unsigned Smi or LargePositiveInteger (1-based, optimised if arg1 is a constant)3000	pointerAt:put:Mutable pointer object (Fixed sized or not) and not a context, Smi, Anything => arg2 (1-based, optimised if arg1 is a constant)3001	storeCheckPointerAt:put:Mutable pointer object (Fixed sized or not) and not a context, Smi, Anything => arg2 (1-based, optimised if arg1 is a constant)3002	maybeContextPointerAt:put:Mutable pointer object (Fixed sized or not), Smi, Anything => arg2 (1-based, optimised if arg1 is a constant)3003	maybeContextStoreCheckPointerAt:put:Mutable pointer object (Fixed sized or not), Smi, Anything => arg2 (1-based, optimised if arg1 is a constant)3004	byteAt:put:Mutable byte object, Smi, 8 bits unsigned Smi => arg2 (1-based, optimised if arg1 is a constant)3005	shortAt:put:Mutable short object, Smi, 16 bits unsigned Smi => arg2 (1-based, optimised if arg1 is a constant)3006	wordAt:put:Mutable word object, Smi, 32 bits unsigned Smi => arg2 (1-based, optimised if arg1 is a constant)3007	doubleWordAt:put:Mutable double word object, Smi, 64 bits unsigned Smi or LargePositiveInteger => arg2 (1-based, optimised if arg1 is a constant)6000	backjumpNoInterruptliteral which is a Smi7016	jumpWritable:Not a forwarder, literal which is a Smi7017	jumpReadOnly:Not a forwarder, literal which is a Smi7018	jumpYoung:Not a forwarder, literal which is a Smi7019	jumpOld:Not a forwarder, literal which is a Smi8000	instanceOf:jumpTrue:Anything, literal which is a Behavior, literal which is a Smi8001	instanceOf:jumpFalse:Anything, literal which is a Behavior, literal which is a Smi8002	instanceOfOneOf:jumpTrue:Anything, Array of behaviors, literal which is a Smi8003	instanceOfOneOf:jumpFalse:Anything, Array of behaviors, literal which is a SmiMapped primitives are a bit different. They're sorting by arity up to 3 parameters (0-49 is nullary, 50-99 is binary, etc.). 200 and over are variable number of parameter instructions. 250 and over are mapped jumped. We define the folloing mapped primitives:50	ensureEnoughSlotsliteral which is a Smi => ret value is receiver150	immCheckPointerAt:put:pointer object (Fixed sized or not) and not a context, Smi, Anything => arg2 (1-based, optimised if arg1 is a constant)151	immCheckStoreCheckPointerAt:put:pointer object (Fixed sized or not) and not a context, Smi, Anything => arg2 (1-based, optimised if arg1 is a constant)152	immCheckMaybeContextPointerAt:put:pointer object (Fixed sized or not), Smi, Anything => arg2 (1-based, optimised if arg1 is a constant (Concept-only, contexts are mutable right now))153	immCheckMaybeContextStoreCheckPointerAt:put:pointer object (Fixed sized or not), Smi, Anything => arg2 (1-based, optimised if arg1 is a constant (Concept-only, contexts are mutable right now))154	immCheckByteAt:put:byte object, Smi, 8 bits unsigned Smi => arg2 (1-based, optimised if arg1 is a constant)155	immCheckShortAt:put:short object, Smi, 16 bits unsigned Smi => arg2 (1-based, optimised if arg1 is a constant)156	immCheckWordAt:put:word object, Smi, 32 bits unsigned Smi => arg2 (1-based, optimised if arg1 is a constant)157	immCheckDoubleWordAt:put:double word object, Smi, 64 bits unsigned Smi or LargePositiveInteger => arg2 (1-based, optimised if arg1 is a constant)200	withArgs:executeMethod:literal index of the method to call on top of stack =>  (variable number of parameters (on contrary to what the selector suggests, no array), the index and not the method is pushed for efficient inline caches.)250	backjumpAlwaysInterruptliteral which is a Smi"
"RxsMessagePredicate","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A message predicate represents a condition on a character that is tested (at the match time) by sending a unary message to the character expecting a Boolean answer.Instance variables:	selector		<Symbol>"
"IceMissingRepositoryEntry","Directory does not exist in the specified version in the repository."
"ManifestManifestTests","Tests for Manifests"
"WeakLayout","I am a special layout for weak variable sized objects such as WeakArray.I contain a fixed number of Slots plus.Instances of classes using this kind of layout have only a minimum given size. Instances have a custom number of additional weak fields which can be accessed with an index.References held in the variable part are held weakly and might be nilled out by the garbage collector at any time. References in the named section are held strongly as in the default layout."
"AdvancedHelpBrowserDummy","This is a dummy for a custom Help browser that can be registered as a replacement for the HelpBrowser class.Instance Variables	rootTopic:		<HelpTopic>rootTopic	- The root help topic"
"TPrintOnSequencedTest","A trait for test purposes"
"LabelledListTest",""
"EpApplyPreviewerTest",""
"LGitObjectTypeEnum",""
"IRClosureStackCount","IRClosureStackCount is used to distinguish between a stack in the method scope and a stack within a closure block. Theclosure stack size is independent of the number of tempvars from the compiled method, therefore that number is subtractedfrom this stack size length."
"LiteralVariable","I am abstract. Subclasses of me model meta objects for global variables (Class, Global, Pool), called ""Literal Variables"" in Smalltalk.I am just a subclass of Association, modeling the binding of the global in either the Smalltalk globals, Undeclared or classPools.When chaning emit* methods, do not forget to recompile exisiting code:aGlobal usingMethods do: #recompile ***NOTE***When moving binding from Undeclared, we change the class of that binding to either ClassVariable or GlobalVariable.==> when we use Global subclasses, we will either need to restrict adding variables or add a slow path where we create a new binding and update all users. But this can be done later."
"RBAddClassVariableChange","I am a refactoring for a class variable addition. My changes are executed on the instance side."
"GoferFetch","Fetch packages using Gofer"
"SpecStubRadioButtonView","Only stub object, no real view is displayed."
"SpecSplitterHorizontal","A SpecSplitterHorizontal is a description of the addition of a horizontal splitter"
"DAClassNode","A PDClassDependencyNode is the superclass node for PDInheritanceNode and PDTraitDependencyNode. Indeed these two nodes have the same behavior to browse the dependency in the browser"
"ContextTest","I am an SUnit Test of Context.See pages 430-437 of A. Goldberg and D. Robson's  Smalltalk-80 The Language (aka the purple book), which deal with Contexts. My fixtures are from their example. (The Squeak byte codes are not quite the same as Smalltalk-80.)My fixtures are:aReceiver         - just some arbitrary object, ""Rectangle origin: 100@100 corner: 200@200""aSender           - just some arbitrary object, thisContextaCompiledMethod - just some arbitrary method, ""Rectangle rightCenter"".aMethodContext   - just some arbitray context ...  "
"MCMethodDefinition","A MCMethodDefinition represents a method definition. It captures the following information.Instance Variables	category:		<Object>	classIsMeta:		<Object>	className:		<Object>	selector:		<Object>	source:		<Object>	timeStamp:		<Object>"
"SystemAnnouncer","This class plays the role of the announcer for events raised by the Pharo system.BEWARE: You should not need to subclass me. Think about just using me to send your announces (if you need system behavior) or using your own announcers as instance or class  variables."
"GTSpotterCategoryTitleBrick",""
"OmMemoryStore","I am an in-memory store of entries."
"ClassTagRenamed","I am announced when existing class tag is removed"
"MetacelloSymbolicVersionDoesNotExistError",""
"IcePushed","Announces when a repository has been pushed."
"MetacelloConfigurationSpecGenerator",""
"GTEventRegistry","I am weak holder of an object that uses GTEventCollector. If the object disappears from object memory (or #liberate message is sent), GTEventCollector can be removed from a GTEventRecorder object.For the Collaborators Part: GTEventCollectorPublic API and Key Messages- object: - liberate- isLiberatedInternal Representation and Key Implementation Points.    Instance Variables	weakHolder:		<Object>"
"GLMMorphicRubricTextRenderer",""
"SpecExamples","A SpecExamples is the first sub-book of SpecHelpTopics. It contains examples of using Spec.See class side for selectors."
"LGitPatch",""
"T2ObsoleteClassTest","Unit test for trait handling when classes are removed"
"ClyClassChange","I represent all possible changes with class.I am used to subscribe with single subscription to any changes related to classes.So you can write code like this: 	SystemAnnouncer uniqueInstance when: (ClyClassChange of: MyClass) do: [ :ann | ann logCr ].	I provide more general subscription logic than subscribing on base ClassAnnouncement class. Many other events can be also related to class changes like renaming package or running class tests. They are not covered by ClassAnnouncement hierarchy.I reuse logic of queries how they detect that their result is affected by system changes: 		ClyClassChange>>handlesAnnouncement: anAnnouncement  		^anAnnouncement affectsClass: affectedClass	I am used by class editor tools to be updated when editing class is changed.	Internal Representation and Key Implementation Points.    Instance Variables	affectedClass:		<Class>"
"GTSpotterResultsBrick",""
"TestAsserter","I understand methods beginning #assert:... and #deny:... (and my class-side understands #assert:description:).  I am the superclass of TestCase and TestResource and can also be the superclass of any test helper classes you create to factor out test behaviour.  I exist so that test code can be refactored between my subclasses without difficulty.Send #assert:description: when you want to check for an expected value. For example, you might say	self assert: socket isOpen description: 'We requested a socket but now it is not open'.to test whether or not a socket is open at a point in a test.  Use description strings both to give more information about where a test failed in debugger notifiers and logs, and to document the intent of a test.  Other methods include #assert:, #assert:description:resumable:, #deny:, #deny:description:, #deny:description:resumable:, #should:raise:, #should:raise:description:, #shouldnt:raise:, #shouldnt:raise:description:.  All these methods are defined on the superclass, TestAsserter.  (Any convenience assertion methods you create for general use should also be defined in my 'convenience' protocol.)Override my class-side #isLogging in subclasses to have failed assertion descriptions shown on the Transcript.  To have them appear elsewhere, also override my class-side #failureLog."
"SDL_KeyboardEvent","SDL2 library structure"
"CRCError","CRC failed"
"SpecStubViews","I am an abstract stub view. My subclasses do not display any real UI component"
"ClyActiveBreakpointsQueryTest",""
"RBRemoveProtocolChange","RBRefactoryProtocolChange is responsible for removing a protocol in classes in a RB model"
"RBMissingTranslationsInMenusRule","This rule should be updated to verify the inverse no translated messsages should be sent to menu element."
"TreePresenter","I am the Spec presenter of a MorphTreeMorph tree."
"UnsafeAlien","Instances of UnsafeAlien represent the addresses of heap-resident non-pointer Smalltalk objects as actual parameters in FFI call-outs.  An UnsafeAlien on (e.g.) a ByteString used as a parameter in an FFI call causes the FFI machinery to pass the address of the first byte in the ByteString.  THIS IS UNSAFE!  It is unsafe becausea) the garbage collector can potentially move the ByteString (or any other object) during the call, because the call may call-back, invoking the garbage collector,b) if external code retains the address for longer than the duration of the call and dereferences it in a subsequent call the object may have moved in the mean time,c) the address of the object is passed without any other potentially necessary conversions such as null-terminationd) the hundred other problems this benighted author hasn't thought of.Hence UnsafeAlien is to be used carefully by clients that know that the usage is safe.You have been warned ;)Create instances via	UnsafeAlien forPointerTo: 'You are on your own!', (ByteString with: (Character value: 0))"
"ZnRequest","I am ZnRequest, representing an HTTP Request, consisting of a request line, headers and an optional entity (body).I am a ZnMessage.I can be used for generating and parsing.Part of Zinc HTTP Components."
"ClyMethodContextOfFullBrowser","I am a context of selected methods in full browser"
"DoItChunk","I represent the declaration of some code to evaluate.  My contents are the code to evaluate.Sending me the message #import makes me evaluate the code and return the result of the computation.Be careful, my #import method also handles ChangeSet interaction so far, handling Changeset preambles and Postscripts."
"ClyAllBasisCritiqueQuery","I return all critiques directly from basis objects of my scope.So I am a kind of universal query because I do not restrict scopes for information which they provide.I just ask scope basis objects for critiques"
"AthensColorChange","A command to change the current font color"
"IceTipDiffEntryRemoved","I announce when an entry (a method, a class or a package) has been reverted. I'm used to refresh diff panels without recalculate everything again.  "
"EpCategoryRename","I represent the rename of a category in a package."
"ClyCommandBasedTableDecorator","I delegate decoration of table to all commands annotated by ClyTableIconCommandActivation.I allow extend table cell with command based iconic buttons. Any command class which is annotated with ClyTableIconCommandActivation will be represented by clickable icon in main table cell"
"RBClassModelFactory","None of the classes inside this package should be directly accessed. They should be accessed via myself. I'm a class factory. I'm an important design point: I will let future evolution of the system to be experimented without the needs to change all the users. Then once the experiments and a good solution is found it may be the time to remove me and to think that I'm an overengineered solution. Right now I'm a change enabler. For example people can try to use Ring models to model RBmodel. "
"HEClass","I implement all the behavior to export a class.My header includes:	className	superclass	instanceVariables	classInstancevariables	classVariables	sharedPools	layoutClass	All exported as ByteStrings (and symbols).I do not support exporting special slots (yet)."
"FloatPrintPolicy","I am FloatPrintPolicy.I am a DynamicVariable.I control whether Float instances are printed exactly or inexactly. The inexact printing is much faster, but can be less accurate. The default policy is ExactFloatPrintPolicy.FloatPrintPolicy 	value: InexactFloatPrintPolicy new 	during: [ Float pi printString ]"
"MethodFinderSend","I am a message send that can be tested against an expected result.If the result of the message send does not correpond to the expected result, or the message send provoked an error, or the comparison raised an error I return false."
"GTSpotterSearchFinished",""
"GTPlayPage","It holds one page of code. It is the model behind the Playground.It also knows how to store itself on disk, and every time its content changes, it updates the corresponding file."
"WindowMoved","I am emitted when a window is moved.I provide the old and new window position. A window position changes even when the topleft corner changed by a window resize operation or the windows collapses."
"IceGitHubCommand","I'm a generic command to perform plugin actions for GitHub.My children define the real behavior, and they need to implement #execute."
"KMCategoryTarget","I am the reification of the relation morph<->category, created when a morph gets attached a category of shortcuts."
"WinPlatform","I am a an object representing a Windows platform. Use myself to access platform specific features.Please keep me polymorphic to the the other platform objects.To get the current platform, you can evaluate:OSPlatform current."
"DynamicTopToBottomRowsLayout","I am the layout for which you define the number of rows to store you presenters and set them from top to bottom in these rows."
"MetacelloExternalScriptingTestCase",""
"TaClassCompositionElement","I represent the root element in a TraitComposition.I wrap a metaclass or classTrait to be used as a trait in a trait composition."
"ClassFactoryWithOrganizationTest","SUnit tests for ClassFactoryWithOrganization"
"ClyQueryResultBrowserAdapter","I adopt arbitrary query result to ClyBrowserQueryResult.I implement query interface of ClyBrowserQueryResult and convert actual raw items to the ClyBrowserItem instances. I prepare converted browser items with full semantics of ClyBrowserQueryResult. So all requested items include precomputed properties.I am used to be able represent any query result in the browser. Browser always work with result using cursor. And cursor expects to be created over ClyBrowserQueryResult. So I am used to open cursor on any other kind of result. The hook is in the result method #adoptForBrowser:		ClyQueryResult>>adoptForBrowser		^ClyQueryResultBrowserAdapter for: self	ClyBrowserQueryResult>>adoptForBrowser		^selfInternal Representation and Key Implementation Points.    Instance Variables	actualResult:		<ClyQueryResult>"
"TextFontReference","A TextFontReference encodes a font change applicable over a given range of text.  The font reference is absolute:  unlike a TextFontChange, it is independent of the textStyle governing display of this text."
"RubSmalltalkEditorTest","A RubSmalltalkEditorTest is a test class for testing the behavior of RubSmalltalkEditor"
"OSEnvironmentTest","This tests the OSEnvironment. The tests assume that there is at least 1 environment variable given."
"RBPullUpClassVariableTest",""
"IceLibgitFiletreeFileUtils","Emulates other 'file utils' classes by reading from a git repository (its blob, not a working copy'). Allows for reading any tree (from any commit) in the repository."
"IdentityDictionaryTest","SUnit tests for identity dictionaries"
"GLMBrickTabLabelDarkThemer","I'm a style module related to tab label modified for Dark Theme"
"RPackageOrganizer","A RPackageOrganizer is responsible for providing all the package currently defined in the system.In addition it provides a back pointer from the class to its package.The classPackageMapping and the classExtendingPackageMapping should be moved in the future to the classes themselves. For tests or actions that could destroy the package organizer,  do not access directly the singleton of RPackageOrganizer.Use instead 		RPackage withOrganizer: aNewOrganizer do: ablock			or via RPackage organizer			RPackageOrganizer fillUp will fill up the system from the current PackageOrganizer	""self fillUp""	-----------------------------------------------------------------------------------------------------------------------------------------------			A rpackageOrganizer update itself when some changes are made in the system. It does that by registering to a systemAnnoucer, specifying an action when an annoucement is triggered.Here is what I (Cyrille Delaunay) propose to do for each annocuement triggered:SystemCategoryAddedAnnouncement 		=> I would just register a new RPackage (if it does not already exist) in the RPackageOrganizer	SystemCategoryRemovedAnnouncement      => I would just unregister the RPackage concerned from the organizerSystemCategoryRenamedAnnouncement     => I would update the RPackage concerned, by changing its name     => I would update the 'packages' dictionary of the organizer, putting the new name as keySystemClassAddedAnnouncement     => Import the class in the RPackage concerned (RPackage >> importClass:)    => Register the class in the 'classPackageMapping' dictionary of the organizer (RPackageOrganizer >> registerPackage:forClass)    (=> maybe we should pay attention if both the class and the metaclass launch this kind of event ?)SystemClassRecategorizedAnnouncement    => I would update the old RPackage concerned:            => unregister the class            => unregister all defined methods of the class    => I would update the new RPackage:            => Import the class in the RPackage (importClass:)    => I would update the organizer:            => update the 'classPackageDictionary' to point on the new RPackage SystemClassRemovedAnnouncement    => I would update the RPackake concerned             => unregister the class             => unregister all defined methods of the class    => I would update the organizer:             => update the 'classPackageDictionary' to remove the classSystemClassRenamedAnnouncement    => I would update the RPackage in which the class is defined:             => update the 'classDefinedSelectors' dictionary (replace the old key by the new one)             => update the 'metaclassDefinedSelectors' dictionary (replace the old key by the new one)    => I would update all RPackages extending this class             => update the 'classExtensionsSelectors' dictionary (replace the old key by the new one)             => update the 'metaclassclassExtensionsSelectors' dictionary (replace the old key by the new one)    => I would update the organizer             => update the 'classPackageDictionary' to replace the key with the new class name             => update the 'classExtendingPackagesMapping' to replace the key with the new class name                          SystemClassReorganizedAnnouncement     (=> I guess we should check if extensions have not been added or removed ?       (to retrieve this information, the only thing I found is ClassDescription >> organization, and then check each category begining with '*' and compare with the organizer. seems to be painful, no?))	=> when an extension is removed, all methods inside are removed. Therefore, the MethodRemovedAnnounecement will do the job. Not sur this one still usefullSystemProtocolAddedAnnouncement    => I don't see anything to do for this annoucementSystemProtocolRemovedAnnoucement    => If the category is an extension from a package, I would move all the methods concerned, from the extending RPackage to the class RPackageSystemMethodAddedAnnouncement       => I would check the category in which the method has been defined               => if it correspond to an extending package -> add the method to the extending RPackage               => if not, add the method to the class parentPackageSystemMethodModifiedAnnouncement       this annoucement can correspond to several kind of modifications:	       *  a method has been renamed                       => I would update the rPackage in which the method is defined to replace the old selector by the new one		* a method has been move to another category 			-maybe from a classic category to an extending package                             => we should move the method from the  method class parentPackage to extendingPackage package			-maybe from an extending package to another extending package                             => we should move the method from the  extendingPackage package to the other extendingPackage package			-maybe from an extending package to a classic category                             =>  we should move the method from the  extendingPackage to the method class parentPackage		        -maybe from a classic category to another classic category                             => we have nothing to do			SystemMethodRecategorizedAnnouncement          same thing than aboveSystemMethodRemovedAnnouncement       => I would simply remove the method from the RPackage in which it is register"
"RxMatchOptimizer","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A match start optimizer, handy for searching a string. Takes a regex syntax tree and sets itself up so that prefix characters or matcher states that cannot start a match are later recognized with #canStartMatch:in: method.Used by RxMatcher, but can be used by other matchers (if implemented) as well."
"FLInMemoryBasicSerializationTest","SUnit tests for basic in memory serialization"
"ClassOrganization","This object is in charge of system notifications.It manages the class comment, the class comment stamp and a protocol organizer"
"ClyTestSetUpEditorTool","I am special method editor which operates on #setUp method.So I am appears only on TestCase's and edit most relevant #setUp method. Internal Representation and Key Implementation Points.    Instance Variables	testClass:		<TestCase>"
"ClyTestedClassTest",""
"CategoryRenamed","This announcement will be emited when renaming a category using:=> SystemOrganizer >> renameCategory:toBe:"
"ZnLineTooLong","ZnLineTooLong is signalled when an HTTP CRLF terminated input line exceeds a predefined limit.Part of Zinc HTTP Components. "
"MorphTreeModel","I'm the base class for tree models.  See ClassListExample for basic usage."
"DockingBarMenuItemMorph","A DockingBarMenuItemMorph is a specialized version of its superclass for DockingBar behavior."
"BaselineOfCalypso",""
"MorphTreeSelectionChanged","Used to announce the change of a selection in the tree"
"SimpleTestResourceA1","I'm a simple test ressource for test purposes"
"ClySubclassLOfClass2FromP1",""
"KeyboardKey","I represent a keyboard Key. I am mapped from the platform specific keycodes into a common keycode base, by using my class side methods."
"DAPackageRelationGraphGenerator","A PDGraphVizGenerator is a class able to generate a dot file from a relationGraph (PDPackageRelationGraph)"
"NOCController","I am the entrance door to the ocompletion algorithm. I can resolve the queried sequences and retrieve a list of answers according to ocompletion algorithm based on the last accepted sequences from the user."
"SpecStubTreeNodeView","Only stub object, no real view is displayed."
"ZnHttpUnsuccessful","ZnHttpUnsuccessful is signalled when an HTTP client receives a non success response.See ZnResponse>>#isSuccessI hold the response that was unsuccessful.Part of Zinc HTTP Components. "
"GTSelectionGoDebugAction","This action is responsible for evaluating the selection in a code pane of a debugger and pushing the result in the inspector of the debugger."
"ManifestSystemCommandLineHandler","Default command line handling"
"RemoteString","My instances provide an external file reference to a piece of text.  It may be the sourceCode of a method, or the class comments of a class.The changes file or file-in file usually has a chunk that is just the source string of a method:max: aNumber	^ self > aNumber ifTrue: [self] ifFalse: [aNumber]!I can return either a String or a Text.  Some a chunk is followed by a second chunk (beginning with ]style[) containing style information.  The encoding is like this:max: aNumber	^ self > aNumber ifTrue: [self] ifFalse: [aNumber]!]style[(14 50 312)f1,f1b,f1LInteger +;i!Allowed TextAttributes are TextFontChange, TextEmphasis, TextColor, TextDoIt, TextKern, TextLink, TextURL.  TextFontReference and TextAnchor are not supported.See PositionableStream nextChunkText and RunArray class scanFrom:."
"ToolDockingBarMorph","A non user-moveable docking bar that uses theme-based fill styles."
"GLMFilterBlock","I implement a filter for fast table. The filter (filterBlock) is a BlockClosure with two arguments. The first argument is a filtered item, the second argument is a string pattern. The block has to return true if the item should be displayed; false otherwise."
"PrintVersionCommandLineHandler","Usage: printVersion [ --numeric | --release ]	--numeric   Print the full version number only (e.g. 12345)	--release   Print the major relase number only (e.g. 1.2)	Documentation:Prints the version number in an easy to parse format. This can be used in Jenkins with the ""Description Setter"" Plugin. Configure it like this:Regular expression:  \[version\] (.*)Description: \1Examples:	pharo Pharo.image printVersion	#result will be something like:	[version] 3.0 #30100	pharo Pharo.image printVersion --numeric	# will print a simpler version	30100		pharo Pharo.image printVersion --release	# prints the Pharo release version	3.0"
"ClyCritiqueCommand","I am a root of commands hierarhcy which perform various set of operations with critiques.My subclasses are shown as icons in critiques tables.Internal Representation and Key Implementation Points.    Instance Variables	analyzedObject:		<Object>	critique:		<Object>"
"LGitWriteBackValue",""
"GTSpotterCandidatesList","A model utility class that provides a way to handle the list of candidates shown in the spotter result.The candidates are stored in a linked list."
"EyeCompiledMethodInspector","Specialized version of inspector showing bytecodes symbolic representation, ast, ir, literals."
"MetacelloTutorialConfig",""
"FFIULong","I'm an unsigned long.Longs are different from other types because they can have different sizes depending on the architecture, reason why they need a special treatment (and we cannot reduce them to a int32 or int64 type). For example, this are the sizes according architecture: - i386: 4 bytes- x86_64 SystemV: 8 bytes- x86_64 Windows: 4 bytesSo we model long as a special type and we use platform speciphic settings."
"LGitDiffBinary","/** Structure describing the binary contents of a diff. */"
"MCFileTreeFileUtils","Utility class for file access"
"MCMcdReader","Reader for an MCD format"
"IceMCPackageImporter","I am an importer of MCPackages into an IceNode. I am created from a version and a node. I calculate the snapshot of that definition and import all those definitions into my node, delegating to a IceMCDefinitionImporter."
"MetacelloConfigurationResource",""
"RBAddVariableTransformation","Adds a variable in a class. It is necessary to indicate whether the variable is an instance or class variable.Usage:| transformation |transformation := (RBAddVariableTransformation 	variable: 'asdf'	class: #RBVariableTransformation	classVariable: false)	transform. (ChangesBrowser changes: transformation model changes changes) openPreconditions:- the variable name should not be a class name- the class (and any class in the hierarchy) should not have a variable with the same name"
"DenyDialogWindow","Dialog window displaying a message with a single OK button. Escape/return will close. Icon is a themed lock icon."
"IceTipModel","I'm a base model for tip UI. Each tip component refers to one (and just one) model, which will provide model actions and access from presenters to backend.Models can be cached using #beCached."
"ClyMoveMethodGroupsToPackageCommand","I am a command to move all methods of given method groups to another package.Internal Representation and Key Implementation Points.    Instance Variables	package:		<RPackage>"
"Unicode","This class holds the entry points for the utility functions around characters."
"RGBehaviorDefinition","An RGBehaviorDefinition is an abstract definition for class-alike entities (e.g. classes, traits)Instance Variables	methods:		<Collection>	protocols:		<Collection>	superclass:		<Object>"
"SHA256Test","SHA256Tests contains unit tests for SHA256.Test vectors taken fromhttp://en.wikipedia.org/wiki/Sha256http://csrc.nist.gov/publications/fips/fips180-2/fips180-2withchangenotice.pdf"
"MCDoItParser","A MCDoItParser is a simple 'parser' which understand the addDefinitionsTo: message. Each parser can use the sourceand add definitions to the list of entities that is passed to them.MCDoitParser invokes automatically its subclasses to parse the correct source.Each Doit entities (entities which are defined as doits) extend this entry point to add specific behavior."
"TViewModel","This trait contains the necessary methods to manipulate correctly a RubScrolledTextMorph via a model.Should be use in the model class of the architecture. The interactionModel can represents your model or a model of the higher level (AbstractNautilusUI for the text area of Nautilus for example)."
"SubclassResponsibility","I am SubclassResponsibility, an exception signaled when an inherited method should have been implemented in a subclass but was not."
"PharoTutorialHelpTest","SUnit tests for PharoTutorialHelp"
"MetacelloCleanLoadNotification",""
"FFICallbackParametersTests","This TestSuite evaluates the correct implementation of the callback parameter extraction."
"PathShape","I represent a model of an open sequence of connected points that can be queried forenclosing bounds and whether a point lies along any segment. I am typically used for drawing with a Canvas.ps := PathShape new        addVertex: 0@0;        addVertex: 30@30;        addVertex: 50@10.        self assert: (ps containsPoint: 24@24).self assert: (ps containsPoint: 40@30) not.Transcript show: ps calculatedBounds asString; cr."
"MalGraphAlgorithm","I'm the common superclass for all graphs related algorithms.I store edges and nodes and provides convenience methods to add, access and find nodes or edges.Once configured, send the run message to execute the algorithm."
"RBMissingSubclassResponsibilityRule","This smell arises when a class defines a method in all subclasses, but not in itself as an abstract method. Such methods should most likely be defined as subclassResponsibility methods. Furthermore, this check helps to find similar code that might be occurring in all the subclasses that should be pulled up into the superclass."
"GLMHaloBrick",""
"MetacelloScriptApiExecutor","MetacelloScriptExecutor decodes script args and launches MetacelloScriptEngine to run for each projectSpec encounters...i,e., primarily here to handl array and block args to configuration:, baseline: or project:."
"GLMActionBrickThemer",""
"FLSingletonMockEnforced","A test mock where a new instance is enforced"
"GTSnippets","GTSnippets instance"
"TextAttribute","Tells a piece of text to be a certain way.Select text, press Command-6, choose a attribute.  If selected text is of the form 	Hi There<Smalltalk beep>the part in angle brackets is saved for action, and the Hi There appears in the paragraph.  If selection has no angle brackets, use the whole thing as both the text and the action.TextDoIt  --  eval as a Smalltalk expression (the part in angle brackets)TextLink -- Show a method, class comment, class hierarchy, or class defintion.	<Point extent:>, <Point Comment>, <Point Hierarchy>, or <Point Defintion> are what you type.TextURL -- Show the web page. <www.disney.com>These attributes of text need to be stored on the disk in a regular file-out.  It is done in this form: 	Hi There   	in the text, and a Run containing   dSmalltalk beep;;	Click here to see the extent:   	in the text, and a Run containing   method LPoint extent:;See RunArray class scanFrom: where decoding is done."
"ChangesBrowser","A ChangesBrowser is a browser used to browse a composite change wich gather all the wanted changes"
"StringTest","This is the unit test for the class String. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org/)	- the sunit class category"
"LayoutProperties","This class provides a compact bit encoding for the most commonly used layout properties."
"IceTipLocationPresenter","I'm an abstract model to provide locations (directories or files). I need to be included in other components (search references to my children for examples)"
"GRTemporaryNeitherReadNorWrittenRule","There is something wrong in the method as you have variables that are either nor read or not written (or both)."
"RBFindBlockArgumentAssignment","Find assignment nodes with block arguments on its left side."
"RBStringConcatenationRule","Check for string concatenation inside some iteration message. Since string concatenation is O(n^2), it is better to use streaming since it is O(n) - assuming that n is large enough. As a general principal avoid , since the receiver is copied. Therefore chaining , messages will lead to multiple useless copies of the receiver. Instead of writing	| string | 	string := String new.	#(1 2 3) do: [ :each |		string := string, each asString].	^ stringWrite, it is much more efficient.	String streamContents: [:s | 		#(1 2 3)  do: [:each | s nextPutAll: each asString]]	or more concisely...	'''' join: {1. 1+1. 3}	"
"SDL2Structure","Common things for all SDL2 structs"
"WeakFinalizerItem","My instances is used by weak registry to hold a single weak referenceand executor(s).Once object, referenced weakly by my instance become garbage, a weak registry triggers its executionby sending #finalizeValues to my instance.Note, that a new VM finalization scheme does not implies to use this particular classin order to implement finalization scheme. VM refers only to WeakFinalizationList class. In this way, my class and its implementation can serve as an example for implementing various finalization actions, which may differ from this one, provided by default for use by weak registry.Once initialized, my instance should: - point to particular list (an instance of WeakFinalizationList), - next should be nil - executor or multiple executors initialized - weak reference slot should point to some object of interestAt the moment, when object, referenced weakly, become garbage, VM checks if its fist instance variable is an instance of WeakFinalizationList.If it so, then it adds a given object to this list, and also links the tail of list through 'next' instance variable. So, as a result of garbage collection, a list will contain all objects, which had weak references to garbage collected objects. It is a responsibility of application to manage the instances of WeakFinalizationList's , as well as clear this list before the next garbage collection.As a consequence of that you can: - use multiple different lists and manage them differently in order to react differently when some objects became garbage - you are not obliged to handle/clear the list(s) immediately after GC. You can clean up them periodically. - you can implement own kind of weak referencing object(s), which could use same finalization, provided by newer VMs.VM requires only that an object with weak reference having at least two instance variables,and its first instance variable points to instance of WeakFinalizationList. Everything else is optional."
"GoferMetacelloLoad","I am a Gofer Operation that extracts a metacello configuration from the current repository and loads the given version."
"CairoFontExtents","I represent thecairo_font_extents_t structure typeThe cairo_font_extents_t structure stores metric information for a font. Values are given in the current user-space coordinate system.Because font metrics are in user-space coordinates, they are mostly, but not entirely, independent of the current transformation matrix. If you call cairo_scale(cr, 2.0, 2.0), text will be drawn twice as big, but the reported text extents will not be doubled. They will change slightly due to hinting (so you can't assume that metrics are independent of the transformation matrix), but otherwise will remain unchanged.double ascent;	the distance that the font extends above the baseline. Note that this is not always exactly equal to the maximum of the extents of all the glyphs in the font, but rather is picked to express the font designer's intent as to how the font should align with elements above it.double descent;	the distance that the font extends below the baseline. This value is positive for typical fonts that include portions below the baseline. Note that this is not always exactly equal to the maximum of the extents of all the glyphs in the font, but rather is picked to express the font designer's intent as to how the font should align with elements below it.double height;	the recommended vertical distance between baselines when setting consecutive lines of text with the font. This is greater than ascent+descent by a quantity known as the line spacing or external leading. When space is at a premium, most fonts can be set with only a distance of ascent+descent between lines.double max_x_advance;	the maximum distance in the X direction that the origin is advanced for any glyph in the font.double max_y_advance;	the maximum distance in the Y direction that the origin is advanced for any glyph in the font. This will be zero for normal fonts used for horizontal writing. (The scripts of East Asia are sometimes written vertically.)"
"TDictionaryImplementationTest","A trait for test purposes"
"IceGitHubMenuGroup","I represent the group in the menu that holds the Github Plugin options"
"ClyQueryViewStateTest",""
"DAMethodDependencyNode","A PDMethodNode is the superclass node for PDReferenceDependencyNode and PDExtensionDependencyNode. Indeed these two nodes have the same behavior to browse the dependency in the browser"
"GLMMorphicDashboardRenderer",""
"ThirtyTwoBitRegister","I represent a 32-bit register. An instance of me can hold any non-negative integer in the range [0..(2^32 - 1)]. Operations are performed on my contents in place, like a hardware register, and results are always modulo 2^32.This class is primarily meant for use by the SecureHashAlgorithm class."
"OSTouchThreeFingersScrollDetector","I am detecting the scrolls made with three fingers.I send these event back to my handler: 	- OSTouchThreeFingersScrollBeginEvent 	- OSTouchThreeFingersScrollMoveEvent 	- OSTouchThreeFingersScrollEndEvent "
"UnixDynamicLoader","I'm a unix platform (works in mac too) dynamic library loader."
"PluggableTextMorph","A pluggable text editor"
"PluggableTextAttribute","An attribute which evaluates an arbitrary block when it is selected."
"GTInspectorPresentationFilter","A GTInspectorPresentationFilter is the root class for filters that can limit the number if visible presentations for an object.Subclasses need to implement  #shouldDisplayPresentationCreateBy: to indicate whether or not a give presentation should be displayed."
"SpecDemoLabeledContainer","A component that should encapsulate a form part with a specific label"
"GLMAnnouncerTest",""
"GLMBrickWidthTraverser",""
"MetacelloPostLoadDirective",""
"TabsExample","I am an example of how to use tabs reusing DynamicWidgetChange, ClassMethodBrowser and MessageBrowser, and using an EyeInspector.self example"
"FFIInt8","I'm an signed byte."
"DualChangeSorterApplication","A DualChangeSorterApplication is a dual change sorter based on spec.DualChangeSorter shares the model between its two subcomponents (ChangeSorterApplication).ChangeSorterModel defines the application logic."
"BaselineOfTonel",""
"StdioStreamTestResource","StdioStreamTestResource provides a StdioStream to test for StdioStreamTest.As redirecting stdio during testing isn't practical a normal file is opened and an instance StdioStream attached to it.  This provides the same result as: 	pharo test.image < tmpfile.binary 	pharo test.image > tmpfile.binaryStdioStreams normally cannot be both read and written, and the tests must take that into account.Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	fileReference:		<Object>	stdioStream:		<Object>    Implementation Points"
"GLMMorphBrick","A GLMMorphBrick is used as container for morphs to embed them inside bricksInstance Variables	morph:		<Morph>morph	- xxxxx"
"RBMethodRefactoring","I am an abstract base class for method refactorings.I only provide a helper method for generating  selector names."
"OrderedDictionary","I am a collection that act as a Dictionary except that I use key insertion order when enumerating, printing, or returing collections of keys/values/associations, but not when testing for equality (but it does not matters in this case).I will assume that you know the Dictionary class in this comment.Description--------------------I work mainly as a Dictionary except that I also store the keys in an Array that keeps the order of elements. I should be used ONLY if you need to keep the keys ordered. Else you should use a Dictionary that is faster and keep less values into memory. (I duplicate the keys).Insertion, update, and inclusion testing have O(1) complexity while removing has O(n) worst-case.Public API and Key Messages--------------------- #at: aKey put: aValue / #at: aKey ifAbsentPut: aValue 		allow to add an element.  - #at: aKey / #at: aKey ifAbsent: aBlock / #at: aKey ifPresent: aBlock ifAbsent: aBlock 		allow to access my values.- #keysDo: aBlock / #valuesDo: aBlock / #associationsDo: 		allow to iterate on me effectively.		- #keyAtIndex: anIndex / KeyAtIndex: anIndex ifAbsent: aBlock 		allow to acess my keys from an index.Examples------------------	""For basic examples see Dictionary comment.""		ordDic := (Dictionary with: 1 -> $a with: 2 -> $b) asOrderedDictionary.	ordDic.   		""returns:  an OrderedDictionary(1->$a 2->$b)""	ordDic keyAtIndex: 2.		""returns:  2""	Internal Representation and Key Implementation Points.-------------------    Instance Variables	dictionary:			<Dictionary>		A dictionary where I store my keys and values.	orderedKeys:		<Array>			An ordered collection where I store my keys to maintain the order.I base my implementation on a Dictionary and when I need to execute an action where the order of the values is important I use the keys in my ordered collection."
"LGitCallout",""
"MCMcmReader","Reader for Metacello MCM"
"IcePharoManuscriptPlugin","I'm a pluging to handle fogbugz issues integration. It just add options to easily handle the creation of branchs with the ""convention"" issue naming format (number-plus-normalised-title): 12345-a-sample-of-issue-branchNOTE: In the future we can add other fogbugz elements (like list issues, etc.), but since API is very slow we will consider it very carefully. "
"RxsNode","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A generic syntax tree node, provides some common responses to the standard tests, as well as tree structure printing -- handy for debugging."
"ClyClassSideBoldTableDecorator","I decorate table with bold font for method groups and methods when full browser shows the class side"
"FreeTypeCacheTest","SUnit tests for FreeType cache"
"OCAbortCompilation","Raises an error that represents that the compilation has been aborted. If not handled, it signals an UnhandledError."
"SpecColumnLayout","A SpecColumnLayout is the layout used to specify a new column"
"ClySemiAsyncQueryResult","I am special kind of async query result which tries to emulate synchronous execution of fast queries.Idea is to wait half second until background processing is finished. If it is enough time for query then for users I will be normal synchronous result. Otherwise they will see indication of processing. Implementation is based on semaphore which I am waiting for a half second before return to user. And my background process signals it at the end of execution. So in case of fast query this semahore will be signaled before delay expiration and I will return to the user with the normal synchronous state with ready to use built items.Otherwise I will return to the user after half second with the indication of asynchronous processing.To force semi async query execution you need convert given query using: 	aQuery semiAsync	It returns ClyAsyncQuery instance with #asyncResult variable which points to me"
"RBReturnsIfTrueRule","Check for methods that return the value of an ifTrue: or ifFalse: message. These statements return nil when the block is not executed."
"OSWindowRenderer","My instances are used for updating the OSWindow contents by rendering on it.There is no way to obtain a valid instance of window renderer other than asking a valid instance of OSWindow for window renderer instance.See newFormRenderer: / newOpenGLRenderer factory methods."
"ListPresenter","A ListPresenter is an applicative presenter which handle a basic list.See AbstractWidgetPresenterself exampleself example2self example3You can also have a look at ExampleListPresenter >> exampleRegisteredColor and ListSelectionPresenter for more examples.I provide the following variables and their accessors- backgroundColorBlock should convert an item in the color in the background in the line of this item.- displayBlock should convert an item in something that can be displayed in a list, use asStringOrText by default.- filteringBlock should convert an item in a boolean representing if the item will be displayed, initialize with self defaultFilteringBlock.- multiSelection is a boolean representing if several items can be selected in the same time, it have shortcut beMultipleSelection and beSingleSelection.- sortingBlock should convert two items in a boolean representing if the first item must be place before the second, initialize with self defaultSortingBlock.Blocks should be set before items.I provide the following methods- items: to set the list with the elements of the collection in parameter- getIndex is the getter of the index of the selected item or the last selected item.- getList is the getter of the list.- listSize is the number of items.todo- allowToSelect- autoDeselect- menu- listItems- clickOnSelectedItem- getSelectionStateFor:- listElementAt:ifAbsent:- refresh ...- select ... , setSelected ...- updateList"
"SugsExtractToLocalVariable","The classic option to extract a line of code in a local variable"
"PrototypeTester","I am a simple holder of a prototype object and hand out copies when requested.My subclasses should define resultFor: a"
"HashedCollection","I am an abstract collection of objects that implement hash and equality in a consitent way. This means that whenever two objects are equal, their hashes have to be equal too. If two objects are equal then I can only store one of them. Hashes are expected to be integers (preferably SmallIntegers). I also expect that the objects contained by me do not change their hashes. If that happens, hash invariants have to be re-established, which can be done by #rehash.Since I'm abstract, no instances of me should exist. My subclasses should implement #scanFor:, #fixCollisionsFrom: and #noCheckNoGrowFillFrom:.Instance Variables	array:		<ArrayedCollection> (typically Array or WeakArray)	tally:		<Integer> (non-negative)array	- An array whose size is a prime number, it's non-nil elements are the elements of the collection, and whose nil elements are empty slots. There is always at least one nil. In fact I try to keep my ""load"" at 75% or less so that hashing will work well.tally	- The number of elements in the collection. The array size is always greater than this.Implementation details:I implement a hash table which uses open addressing with linear probing as the method of collision resolution. Searching for an element or a free slot for an element is done by #scanFor: which should return the index of the slot in array corresponding to it's argument. When an element is removed #fixCollisionsFrom: should rehash all elements in array between the original index of the removed element, wrapping around after the last slot until reaching an empty slot. My maximum load factor (75%) is hardcoded in #atNewIndex:put:, so it can only be changed by overriding that method. When my load factor reaches this limit I replace my array with a larger one (see #grow) ensuring that my load factor will be less than or equal to 50%. The new array is filled by #noCheckNoGrowFillFrom: which should use #scanForEmptySlotFor: instead of #scanFor: for better performance. I do not shrink."
"NECSelfEntry","I represent self"
"MCMockClassB","This comment has a bang! Bang! Bang!"
"ClyTextMorphToolMorph","I am a root of possible tools which affect text editors.Instances are supposed to be placed in the status bar of the editor.They should be created using following method: 	ClyTextMorphTool of: aTextMorph	If subclass need to be notified about text changes it should implement changes subscription in #attachToTextMorph method.By default it do nothing.Internal Representation and Key Implementation Points.    Instance Variables	textMorph:		<Object>"
"GLMExpander","GLMExpander aims to implement a Hopscotch-like browser. This is similar to a tree where each tree node content is itself a presentation."
"RestartDebugAction","A RestartDebugAction restarts the execution of the current context."
"ManifestMonticelloOldDataStreamCompatibility","Compatibility package for old data streams"
"MetacelloProjectSpec",""
"ZLibWriteStream","I use the zlib implementation of the deflate algorithm to compress a ByteArray. According to Wikipedia, ""this algorithm provides good compression on a wide variety of data with minimal use of system resources."" See http://en.wikipedia.org/wiki/DEFLATE for details on the deflate algorithm.This is how you get a compressed ByteArray from your input:zipStream := ZLibWriteStream on: (ByteArray new).zipStream 	nextPutAll: myByteArray;	close.compressed := zipStream encodedStream contents."
"GTEventMultiBundleTest","A GTEventMultiBundleTest is a test class for testing the behavior of GTEventMultiBundle"
"GTSpotterDebuggingExceptionHandler",""
"ClySemiAsyncQueryResultTest",""
"SlotClassBuilderTest",""
"ClyDirtyPackageTag","I mark dirty package items"
"EncoderForV3PlusClosures","An encoder for the V3 bytecode set augmented with the following bytecodes that are part of the full closure implementation.	138   10001010 jkkkkkkk		Push (Array new: kkkkkkk) (j = 0)								or	Pop kkkkkkk elements into: (Array new: kkkkkkk) (j = 1)	140   10001100 kkkkkkkk jjjjjjjj 	Push Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	141   10001101 kkkkkkkk jjjjjjjj 	Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	142   10001110 kkkkkkkk jjjjjjjj 	Pop and Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	143   10001111 llllkkkk jjjjjjjj iiiiiiii	Push Closure Num Copied llll Num Args kkkk BlockSize jjjjjjjjiiiiiiiiThis is an exact duplicate of EncoderForLongFormV3PlusClosures.Could be a trait (or in Newspeak, a Mixin).For now we impose upon you to synchronise any and all changes between these two classes."
"FTPluggableIconListMorphAdaptorDataSource","I'm a datasource to interpret messages in teh form provided for a PluggableIconListMorph."
"IceTipToolbar","I am a toolbar. I can create toolbars to be added to spec windows (usually on top).You can instantiate it in a Spec component as is:toolbar := self instantiate: IceTipToolbar.toolbar displayModel: IceTipToolbarDisplayMode modeIconAndLabel.toolbar addItem: (IceTipToolbarItem new	label: 'Test';	icon: #add asIcon;	position: IceTipToolbarItemPosition left;	yourself)"
"LGitDiffSimilarityMetric",""
"SharedPool","A shared pool represents a set of bindings which are accessible to all classes which import the pool in its 'pool dictionaries'. SharedPool is NOT a dictionary but rather a name space. Bindings are represented by 'class variables' - as long as we have no better way to represent them at least."
"RBSelfNode","I am a specialized version for the 'self'"
"ClyTaggedClassGroupProvider","I provide tagged class groups. I collect all class tags from the package scope and create ClyTaggedClassGroup instances for each of them"
"FBDConditionalLoop","I represent a conditional loop (typically, a for or while loop). In addition to my superclass I hold the pc of the conditional jump that exits the loop body.exitCondition <Smi> pc of the conditional jump where the execution flows exits the loop body."
"MetacelloVersionDoesNotExistError",""
"ClyDeprecatedMethodsQuery","I return all deprecated methods from my scope"
"KMShortcutDeclaration","I represent a shortcut declaration for the settings pharo framework."
"MorphicTransform","This class implements simple translation, scaling and rotation for points, as well as inverse transformations.  These transformations are used in TransformMorphs (clipping scrollers) and TransformationMorphs (general flex-morph wrappers) to map, eg, global mouse coords into local coords, and to invert, eg, local damage rectangles into global damage rectangles."
"GTSpotterRecorderShowPreviewEvent","A GTSpotterRecorderShowPreviewEvent models the action of explicitly closing the preview of an object."
"FFIDereferencedOpaqueObjectError","I indicate that user tried to access an opaque type in a derreferenced way.Opaque types can just be accessed by reference (as a pointer to them). Example:self ffiCall: #( void function(FFIOpaqueObject  *var)  ""Correct""self ffiCall: #( void function(FFIOpaqueObject  var)  ""WRONG"""
"RBMoveMethodTest",""
"IceTipItemPosition","I'm a position in a toolbar.My children define where IceTipToolbarItem instance will be located. "
"ClyTextEditor","I am used to override standard text editor operations in Calypso way.I override all kind of navigation requests like sendersOfIt, implementorsOfIt and others.I always call my actual browser owner to perform requested navigation query"
"LookupKey","I represent a key for looking up entries in a data structure. Subclasses of me, such as Association, typically represent dictionary entries."
"GLMPhlowBrick",""
"Float","My instances represent IEEE-754 floating-point double-precision numbers.  They have about 16 digits of accuracy and their range is between plus and minus 10^307. Some valid examples are:		8.0 13.3 0.3 2.5e6 1.27e-30 1.27e-31 -12.987654e12Mainly: no embedded blanks, little e for tens power, and a digit on both sides of the decimal point.  It is actually possible to specify a radix for Float constants.  This is great for teaching about numbers, but may be confusing to the average reader:	3r20.2 --> 6.66666666666667	8r20.2 --> 16.25If you don't have access to the definition of IEEE-754, you can figure out what is going on by printing various simple values in Float hex.  It may help you to know that the basic format is...	sign		1 bit	exponent	11 bits with bias of 1023 (16r3FF) to produce an exponent						in the range -1023 .. +1024				- 16r000:					significand = 0: Float zero					significand ~= 0: Denormalized number (exp = -1024, no hidden '1' bit)				- 16r7FF:					significand = 0: Infinity					significand ~= 0: Not A Number (NaN) representation	mantissa	53 bits, but only 52 are stored (20 in the first word, 32 in the second).  This is because a normalized mantissa, by definition, has a 1 to the right of its floating point, and IEEE-754 omits this redundant bit to gain an extra bit of precision instead.  People talk about the mantissa without its leading one as the FRACTION, and with its leading 1 as the SIGNFICAND.The single-precision format is...	sign		1 bit	exponent	8 bits, with bias of 127, to represent -126 to +127                    - 0x0 and 0xFF reserved for Float zero (mantissa is ignored)                    - 16r7F reserved for Float underflow/overflow (mantissa is ignored)	mantissa	24 bits, but only 23 are storedThis format is used in FloatArray (qv), and much can be learned from the conversion routines, Float asIEEE32BitWord, and Float class fromIEEE32Bit:.Thanks to Rich Harmon for asking many questions and to Tim Olson, Bruce Cohen, Rick Zaccone and others for the answers that I have collected here."
"ClySortBrowserItemFunctionTest",""
"WeakMessageSendTest","SUnit tests for WeakMessageSend"
"ClyQueryMenuGroup","I am reusable menu group for commands.I am supposed to group commands which are related to querying the system"
"MetacelloCommandLineHandlerTest","A MetacelloCommandLineHandlerTest is a test class for testing the behavior of MetacelloCommandLineHandler"
"BaselineOfMetacello",""
"String","A String is an indexed collection of Characters. Class String provides the abstract super class for ByteString (that represents an array of 8-bit Characters) and WideString (that represents an array of  32-bit characters).  In the similar manner of LargeInteger and SmallInteger, those subclasses are chosen accordingly for a string; namely as long as the system can figure out so, the String is used to represent the given string.Strings support a vast array of useful methods, which can best be learned by browsing and trying out examples as you find them in the code.Here are a few useful methods to look at...	String match:	String contractTo:String also inherits many useful methods from its hierarchy, such as	SequenceableCollection ,	SequenceableCollection copyReplaceAll:with:"
"ManifestCollectionsTests","I contain tests for collections"
"DependentsArrayTest","SUnit tests for class  DependentsArray"
"ShMetaclassChanged","When there is a change in the metaclass structure I announce that change.I announce with a copy of the old class and the new class."
"FloatTest","I provide a test suite for Float values. Examine my tests to see how Floats should behave, and see how to use them."
"GTEventPackingTest","A GTEventPackingTest is a test class for testing the behavior of GTEventPacking"
"RBRemoveProtocolTransformationTest",""
"CacheStatistics","I am CacheStatistics.I keep track of hits and misses of a cache."
"ClyClass2FromP1",""
"TabSelectorMorph","Row of tabs for a TabGroupMorph."
"AthensBezierConverter","I converting all bezier segments to a sequence of line segments, by approximating the curve along its path.This classs is used for generating strokes."
"ManifestPharoDocComment","This package supports the handling (syntax highlighting and first class manipulation) of small executable examples inline in method comment. Assuming the following method is definedAbstractFileReference >> basename            ""Returns the basename, i.e. /foo/gloops.taz basename is 'gloops.taz'""            ""'/foo/gloops.taz' asFileReference basename >>> 'gloops.taz'""            ^ self fullPath basenameThe following expression allows one to access to the expression and its expected result. [[[| doc |doc := (AbstractFileReference >> #basename) ast pharoDocCommentNodes.doc first expression > '/foo/gloops.taz' asFileReference basenamedoc result>  'gloops.taz']]]The code browser will show a little icon with the executed examples.  In that case you will get the original expression, its returned result and the expected result. Now you can also execute manually the expression and you will get a pair containing the result of the Implementation Notes- may be PharoDocCommentNode and PharoDocCommentExpression should be subclass of ProgramNode.- questions for nicolai	it would be nice to address 		example expression expressionCode - I renamed expression and result into expressionNode, resultNode. To be able to make the difference between an expression, its expected value and its effective value. 			"
"TGLMFastTableFunctionsPresentation","I am a Trait that manage the differents functionnalities for a FastTable related presentation.Description--------------------My users have to define a #parameters method that need to be a getter for a Dictionary. Then I will store the informations I manage into this dictionary.I work with all the presentations that use a FastTable as GLMFastLastPresentation, GLMFastTablePresentation or GLMFastTreePresentation.Public API and Key Messages--------------------- #enableFilter 		add a filter to the GLMFastTable. (not compatible with the search)- #enableSearch 		add a search to the GLMFastTable (A filter will remove the elements that doesn't match when a search will just highlight the matching results).		- #enableFilterWithAction: aBlock / #enableFilterWithAction:  aBlock named: aString 		add a filter and an action button. The action is define by a block that can take 3 parameters (the dataSource with the currents elements, the current filter pattern and the selected row of the table)		#searchOn: and #filterOn: are not implemented yet.Example--------------------	aGLMFastTablePresentation enableFilterWithAction: [ :dataSource :pattern :item | item browse ] named: 'Browse'. Internal Representation and Key Implementation Points.--------------------To remember the options I keep some values inside a Dictionary. This dictionary is manage by a presentation and I get it via the #parameters method."
"ExceptionSetWithExclusions","I am ExceptionSetWithExclusions, an ExceptionSet that explicitely does not handle a number of exclusion Exceptions."
"SpecDemoCheckboxesPage","Demo page for SpecDemoCheckboxesPresenter"
"GTInspectorProtoObjectNode","I am a variable node for representing the slots of objects that subclass ProtoObject directly and not Object. My main responsability is to extract the value of a slot using thisContext and not a direct message send to the object.  I used the name of a slot as a key. I extract the value from the host object every time #rawValue is called."
"AthensCairoMatrix","I implement an AthensAffineTransform interface."
"ClyScopeCompoBox","I am a tool to switch query browser to new choosen scope.I use compobox to allow user choose it.I am shown as first item in the browser toolbar.By instances should be created on browser: 	ClyScopeCompoBox for: ClyQueryBrowser.	Internal Representation and Key Implementation Points.    Instance Variables	browser:		<ClyQueryBrowser>	dropList:		<Object>"
"GTSpotterBrickThemer",""
"SelectEntity","A to-1 relationship field with keyboard selection with entry completion and a separate dialog for detailed searching (and creating new entities).See my class side for an example"
"LocalTimeZone","I am the local time zone which will use the system's current time offset dynamically.This is the default timezone."
"ZnEntityWriterTests",""
"RBProtectVariableTransformation","Creates accessors for a variable in a class, then replaces all the direct accesses to this variable by invocation to the accessors.Usage:transformation := (RBProtectVariableTransformation	instanceVariable: 'class'	class: #RBTransformationRuleTest)	transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:overriden from RBAddAccessorsForClassTransformation and RBRemoveDirectAccessToVariableTransformation"
"OSTouchTwoFingersRotationDetector","I am detecting the rotations made with two fingers.I send these event back to my handler: 	- OSTouchTwoFingersRotationBeginEvent 	- OSTouchTwoFingersRotationMoveEvent 	- OSTouchTwoFingersRotationEndEvent "
"RBRefactoringBrowserTest",""
"EpEntryReferencesFilter","This filter rejects an arbitrary collection of log entries."
"ManifestSystemLocalization","Localization support"
"MetacelloMCConfigurationOfProjectSpec",""
"ClyClassHierarchyScope","I am a root of scope classes which show objects accessible from the particular kind of class hierarchy. For example there is ClySuperclassScope with superclasses of basis classes and all their methods (inherited by basis).And there is ClySubclassScope which shows all subclasses and their methods.I implement all abstract methods from superclass and introduce new method which should be defined by subclasses: - classesRelatedTo: aClass do: aBlockIn this method subclasses should evaluate given block with all other classes which are related to given aClass according to the logic of given class hierarchy.My varable localScopeClass specifies what part of class itself is visible. It can be instance side, class side or both with corresponsing variable values: ClyInstanceSideScope, ClyClassSideScope and ClyBothMetaLevelClassScope.I use this variable to define methods required for scope query protocol. Look at overrides for details.To create instance I provide several new methods where you can specify local scope class:	ClySubclassScope of: Array localScope: ClyClassSideScope.	ClySubclassScope of: Array in: ClyNavigationEnvironment currentImage localScope: ClyInstanceSideScope.	ClySubclassScope ofAll: {Array. Point} localScope: ClyBothMetaLevelClassScope.	ClySubclassScope ofAll: {Array. Point} in: ClyNavigationEnvironment currentImage  localScope: ClyClassScope.	Internal Representation and Key Implementation Points.    Instance Variables	localScopeClass:		<ClyLocalClassScope class>"
"GTEventAnnouncement","I represent data that are sent to a server.When GTEventPacking object asks for data to send, the data are packed and added to #data:, then there are other general information about the bundle, e.g. computer id. I keep all those information. I can also unpack the data using #unpackedData.For the simple backward compatibility, all my data are stored in a dictionary.For the Collaborators Part:  - GTEventCollector creates instance of me and adds additional information about sent data, see GTEventCollector>>#updateAnnouncement:- GTEventPacking serialize #data and me in order to send me to a serverPublic API and Key Messages- unpackedData    Internal Representation and Key Implementation Points.    Instance Variables	dictionary:		<Dictionary>"
"IRJump","Instruction ""goto: labelNum"""
"DADependentPackageItemDiff","A PDDependentPackageItemDiff is a object which represent a dependent package who added/modified/removed from an old analysis."
"EpRBPropagateRefactoring","I am a RBRefactoring intended for prepagating another refactoring. We call to propagate a refactoring to redo just the secondary effects of such refactoring. For example, the propagation of a 'message rename' is to change the senders of the old selector to use the new selector. "
"ClyConcreteGroupCritiquesTest",""
"PasswordDialogWindow","I'm a Dialog whose TextEditors characters are replaced by *. Example:(UITheme builder openModal:         (PasswordDialogWindow new                title: 'Authentification';                textFont: StandardFonts defaultFont;                text: 'Enter your password')) entryText explore"
"AthensBalloonStrokePaint","i represent stroke paint for balloon backend"
"SlotTraitsTest",""
"JapaneseEnvironment","This class provides the Japanese support.  Since it has been used most other than default 'latin-1' languages, this tends to be a good place to look at when you want to know what a typical subclass of LanguageEnvironment should do."
"WindowEdgeGripMorph","Window edge gripper allowing resizing of a window by a particular side."
"TonelReaderTest",""
"ExpanderMorphAnnouncement",""
"GLMPagerButtonSelected",""
"FLClusterization","I manage the clusters collected during the analysis step of serialization."
"OCScopesCollector","I am a helper class to simplify tests related to scopes. I collect all scopes of the AST.This way one can easily check for scopes and variables even when the scopes are deeply nested.Simple example (with just a method scope):|ast scopes ivar|ast := (OCOpalExamples>>#exampleiVar) 		parseTree doSemanticAnalysisIn: OCOpalExamples.scopes := (OCScopesCollector new visitNode: ast) scopes.ivar := scopes first lookupVar: #iVar"
"HashFunction","Common superclass for hash functions"
"ZnBase64Encoder","I am ZnBase64Encoder.Base64 encoding is a technique to encode binary data as a string of characters that can be safely transported over various protocols. Basically, every 3 bytes are encoded using 4 characters from an alphabet of 64. Each encoded character represents 6 bits.The most commonly used alphabet is 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'. One or two equal signs (= or ==) are used for padding.  ZnBase64Encoder new encode: #[0 1 2 3 4 5].  ZnBase64Encoder new encode: #[10 20]  ZnBase64Encoder new decode: 'BQQDAgEA'.  ZnBase64Encoder new decode: 'FAo='.The encoded data can optionally be broken into lines. Characters not part of the alphabet are considered as white space and are ignored when inbetween groups of 4 characters.My #encode: method works from ByteArray to String, while my #decode: method works from String to ByteArray.Note that to encode a String as Base64, you first have to encode the characters as bytes using a character encoder.See also http://en.wikipedia.org/wiki/Base64Part of Zinc HTTP Components."
"IceTipBranchContext",""
"GLMTestAnnouncement",""
"GTPlayPageFilePersistence",""
"ClyMethodWithExecutionCounterTag","I mark methods that they have installed execution counters"
"RBRenameInstanceVariableTest",""
"GTGenericStackDebuggerUITest",""
"RubCursor","I represent a cursor for the mouse "
"MetacelloCopyMemberSpec",""
"ReadStreamTest","I am an SUnit test for ReadStream.I have no test fixtures."
"ISOLanguageDefinition","The language definitions from International Organization for Standardization.You can obtain the list of the all the ISOCountries and languages."
"GLMPopupBrickListener","I am an internal popup brick event listener. I know a popup I belong to"
"LGitDiffLine",""
"KMCompleteMatch","I am an announcement raised when there is a full match between the key buffer and a shortcut."
"MetacelloProjectRegistration",""
"RBCommentChange","I am a refactory change for a class comment change. Creating a RBClass during a refactoring operation and setting its class comment will create a comment change. Executing this change will set the class comment of theclass with my change stamp."
"RPackageOrganizerTest","RPackageOrganizerTest tests the behavior of PackageOrganizer. Note that it does not rely on announcement to be emitted to maintain invariants.Therefore the new created PackageOrganizer is not registered to listen to event."
"RBPushDownClassVariableTest",""
"HiNodesAndLinksIterator","I know how to iterate a collection of HiNode in a specific depth-first way."
"ToggleMenuItemShortcutWithSymbol","I prepare a shortcut as a combination of symbols (the command, alt, etc. symbols... check #symbolTable to have a detail). We also trust in the presence of FreeType fonts (a default nowadays) and ""Lucida Grande"" font, the mac font used to show menus. If any of this conditions are not fullfilled, ToggleMenuIttemMorph with not use me but my sibling."
"SycRenameClassCommand","I am a command to rename given class.Internal Representation and Key Implementation Points.    Instance Variables	newName:		<String>"
"TabSelected","I am the state of a selected tab"
"NECControllerTest","A NECControllerTest is a test class for testing the behavior of NECController"
"T2UsingTraitsWithSlotsTest",""
"ZdcSecureSocketStream","I am ZdcSecureSocketStream, a binary read/write stream for SSL communication.I am a ZdcOptimizedSocketStream.When I am used as a client, call #connect on me before using me as a normal stream.When I am used as a server, call #accept on me before using me as a normal stream.Currently, certificate management is ignored."
"InvalidSocketStatusException","Signals if an operation on a Socket found it in a state invalid for that operation."
"KOI8RTextConverter","A KOI8RTextConverter class is used to convert cyrillic inputs."
"ReSmalllintChecker","Same as SmalllintManifestChecker but with tweaks for Renraku model "
"IceTipTreeBranch",""
"SpecStubTickingWindowView","Only stub object, no real view is displayed."
"HistoryNode","A HistoryNode is composite node of an history tree. It is made to contain some other HistoryNode or HistoryLeaf instances.A subnode is added with #addItem:In order to add and feed a new subtree, one can use openGroup which add a new HistoryNode. When openGroup is sent to an HistoryNode named H, then a new group G is added and all subsequent sent of #addItem: or of #openGroup to H will update the new node G until G is closed by a closeGroup. As examples:---------------H := HistoryNode new.H addItem: (i1 := HistoryLeaf new).---------------gives:H	i1---------------H := HistoryNode new.H openGroup. ""add a new group named g1""H addItem: (i1 := HistoryLeaf new).H addItem: (i2 := HistoryLeaf new).--------------gives:H	g1		i1		i2--------------H := HistoryNode new.H openGroup. ""add a new group named g1""H openGroup. ""add a new group named g2""H addItem: (i1 := HistoryLeaf new).H addItem: (i2 := HistoryLeaf new).--------------gives:H	g1		g2			i1			i2			--------------H := HistoryNode new.H openGroup. ""add a new group named g1""H openGroup. ""add a new group named g2""H addItem: (i1 := HistoryLeaf new).H closeGroup. ""close g2""H addItem: (i2 := HistoryLeaf new).H closeGroup. ""close g1""H addItem: (i3 := HistoryLeaf new).--------------gives:H	g1		g2			i1		i2	i3	Also se HistoryNodeTest.Instance Variables	history:		<OrderedCollection>	opened:		<Boolean>history	- The list of subnodes (HistoryLeaf or HistoryNode instances)opened	- true if the node is opened for adding"
"RBChildrenToSiblingsTest",""
"WindowResizing","I am emitted when a window is resized.Collapsing and expanding a window changes the size and therefore it may trigger this announcement.I provide the old and new window size."
"OmFileStoreWritingError","I am a notification raised when a OmFileStore has a problem writing an entry into its file."
"MacOSXPlatform","I am a an object representing a MacOSX platform. Use myself to access platform specific features.Please keep me polymorphic to the the other platform objects.To get the current platform, you can evaluate:OSPlatform current."
"SetEyeElement","I am an eye element for sets, showing appropriate thing with indexes"
"TComparable","This trait is a protocol for comparable objects. Classes using it must implement #<, #=, and #hash."
"STONWriteAsciiOnlyReadTests","Unit tests for writing ASCII only"
"FLGlobalCompiledMethodCluster","I clusterize CompiledMethods that will be obtained on materialization accessing method dictionary of the corresponding class in Smalltalk globals."
"RxMatcher","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--This is a recursive regex matcher. Not strikingly efficient, but simple. Also, keeps track of matched subexpressions.  The life cycle goes as follows:1. Initialization. Accepts a syntax tree (presumably produced by RxParser) and compiles it into a matcher built of other classes in this category.2. Matching. Accepts a stream or a string and returns a boolean indicating whether the whole stream or its prefix -- depending on the message sent -- matches the regex.3. Subexpression query. After a successful match, and before any other match, the matcher may be queried about the range of specific stream (string) positions that matched to certain parenthesized subexpressions of the original expression.Any number of queries may follow a successful match, and any number or matches may follow a successful initialization.Note that `matcher' is actually a sort of a misnomer. The actual matcher is a web of Rxm* instances built by RxMatcher during initialization. RxMatcher is just the interface facade of this network.  It is also a builder of it, and also provides a stream-like protocol to easily access the stream being matched.Instance variables:	matcher				<RxmLink> The entry point into the actual matcher.	stream				<Stream> The stream currently being matched against.	markerPositions		<Array of: Integer> Positions of markers' matches.	markerCount		<Integer> Number of markers.	lastResult 			<Boolean> Whether the latest match attempt succeeded or not.	lastChar			<Character | nil> character last seen in the matcher stream"
"ClySwitchToProjectsCommand","I am a command to switch full browser to the projects mode.Projects mode is not really supported. It requires plugin which provides package manager implementation.There is Cargo package manager. But it is not ready yet.Normally we should implement Metacello integration."
"ClyBothMetaLevelClassScope","I represent local scope of classes which merges both instance and class sides"
"RBClass","I represent the instance side of a class in a refactoring namespace. You can query methods and (instance) var names, poolDictionaries, class category and comment.I shouldn't be created directly, but always be part of a refactoring namespace.My  namespace usally knows me and my meta class."
"IceSemanticVersion","I represent the semver (http://semver.org) of libgit2. Since I exist just to be able to compare versions, I'm limited (reason why I'm not promoted to a more general package)."
"ClyTraitRoot1",""
"SugsBreakOnceSuggestion","This class defines AST node menus for one time breakpoints"
"IceTipAskForPlaintextCredentialsModel","I implement the dialog to ask plaintext credentials.This dialog is used when the IceTipInteractiveCredentialsProvider needs to ask a plaintext credential."
"SycRemoveEmptyMethodTagsCommand","I am a command to clean all unused method tags (empty protocols) of given classes"
"TonelCommentScanner","I scan comments."
"ManifestKernelTests","I contain tests for the Kernel package."
"FLMapper","The purpose of my hierarchy is to map objects with clusters."
"FileSystemDirectoryEntry","I am a cache for metadata about a file or directory. The information I hold is as follows:reference	A reference to the file or directory to which my data pertains.	creation	The creation date and time, stored as number seconds since the 	Smalltalk epoch.	modification	The modification date and time, number seconds since the Smalltalk epoch.	isDirectory 	True if my data pertains to a directory, false if a file.	size	Size in bytes for a file, 0 for a directory."
"FLGlobalSendCluster","I clusterize objects that will be obtained on materialization via a message send to a global object. Explained with an example:Suppose we have a special instance of User that represents the admin user, and it is a unique instance in the image. In case the admin user is referenced in our graph, we want to treat that object as a global. We can do that in this way:User >> fuelAccept: aVisitor    ^self == User admin        ifTrue: [aVisitor visitGlobalSend: self]        ifFalse: [super fuelAccept: aVisitor]User >> fuelGlobalName    ^#UserUser >> fuelSelector    ^#adminSo what will happen is that during serialization, the admin user won't be completly serialized (with all its intance variables) but instead its global name and selector are stored. Then, at materialization time, Fuel will send the selector #admin to the class User, and use what that answers as the admin user of the materialized graph.We test this feature in FLGlobalSendSerializationTest."
"RBInlineParameterRefactoring","I am a refactoring for removing and inlining method arguments.If all callers of a method with arguments, call that method with the same literal argument expression, you can remove that argument and inline the literal into that method.My precondition verifies that the method name without that argument isn't already used and that all callerssupplied the same literal expression.For example, a method foo: anArgfoo: anArg	anArg doSomething.and all senders supply the same argument: 	     method1	anObject foo: 'text'.method2	anObject foo: 'text'.	the method argument can be inlined:foo | anArg | anArg := 'text'.	anArg doSomething.and the callers just call the method without any arguments:method1	anObject foo.method1	anObject foo."
"RBPlatformDependentUserInteractionRule","Check the methods that  use platform dependent user interactions.This rule should be updated."
"ZnClientLogEvent","I am ZnClientLogEvent, a ZnLogEvent generated by ZnClient.I hold an optional clientId attribute."
"GLMPopupBrickOutisideClickPredicate","I am activated when user clicks outside of a popup"
"ChronologyConstants","ChronologyConstants is a SharedPool for the constants used by the Kernel-Chronology classes."
"SystemSystemSettings","Settings for the system itself"
"TonelScannerTest",""
"FileHandleTest","SUnit tests for file handles, the tests may be found in superclass"
"AthensDemoMorph","Demos for Athens, just run:	AthensDemoMorph exampleYou can find an implementation of each figure incorresponding #figure<#>: method"
"ClyCritiqueSeverityProperty","I represent first class severity levels of critiques.There are three of them: information, warning, error. You can get me from critique using: 		ClyCrituqueSeverity of: aCritiques.	I provide name and color for the UI. And I allow to sort critiques by severity using my method #isMoreImportantThan:. Internal Representation and Key Implementation Points.    Instance Variables	color:		<Color>	name:		<String>"
"BooleanFilter","A filter for booleans"
"GLMMorphicExamplesTest",""
"ClyPackageCommentEditorToolMorph","I am an editor of package comment Internal Representation and Key Implementation Points.    Instance Variables	editingPackage:		<RPackage>"
"DateAndTimeTest","SUnit tests for date and time"
"EpImpactCodeChangeFilter","This filter only accepts code changes that would produce a change if applied in current image."
"RubTextFieldExample","self open.self openWithScrollbar.self openWithBorderOfWidth: 1.self openWithBorderOfWidth: 5.self openWithScrollbarAndBorderOfWidth: 0.self openWithScrollbarAndBorderOfWidth: 1.self openWithScrollbarAndBorderOfWidth: 5.self openAutoAccept."
"FLClassWithRecursiveSubstitution","A test mock for a class with recursive substitution"
"ClyOverriddenMethodTableDecorator","I decorate table with special double icon (up and down arrows) for overridden and overriding methods.I add two or one iconic buttons as single icon which allow to open overridden or overriding methods for selected item.I am activated only in browser with installed ClyInheritanceAnalysisBrowserPlugin"
"CairoTextExtents","I represent thecairo_text_extents_tstructure typeThe cairo_text_extents_t structure stores the extents of a single glyph or a string of glyphs in user-space coordinates. Because text extents are in user-space coordinates, they are mostly, but not entirely, independent of the current transformation matrix. If you call cairo_scale(cr, 2.0, 2.0), text will be drawn twice as big, but the reported text extents will not be doubled. They will change slightly due to hinting (so you can't assume that metrics are independent of the transformation matrix), but otherwise will remain unchanged.double x_bearing;	the horizontal distance from the origin to the leftmost part of the glyphs as drawn. Positive if the glyphs lie entirely to the right of the origin.double y_bearing;	the vertical distance from the origin to the topmost part of the glyphs as drawn. Positive only if the glyphs lie completely below the origin; will usually be negative.double width;	width of the glyphs as drawndouble height;	height of the glyphs as drawndouble x_advance;	distance to advance in the X direction after drawing these glyphsdouble y_advance;	distance to advance in the Y direction after drawing these glyphs. Will typically be zero except for vertical text layout as found in East-Asian languages."
"MCMczReader","Reader for an MCZ format"
"ReNodeBasedRule","A base superclass for rules that check AST nodes."
"ClyAllProblemMethodQuery","I return methods from my scope which include critiques from my critiquesQuery parameter.To create my instance use following methods: 	ClyAllProblemMethods from: aScope withCritiquesFrom: aCritiqueQuery.	ClyAllProblemMethods from: aScope withCritiquesFromGroup: crituqueGroupName.	Internal Representation and Key Implementation Points.    Instance Variables	critiqueQuery:		<ClyCritiqueQuery>"
"DummySoundSystem","A BeepingSoundSystem is a simple sound system just doing beep and niling everything else. "
"WindowExpanded","This announcement is emitted when a window leaves a collapsed mode. This happens when you press on a window icon in the taskbar."
"FLPositive16SmallIntegerCluster","unsigned, 16-bit integer cluster"
"OpalCompiler","I provide the API of the whole Compiler Package for the case that the input is sourcecode.(if there is alreay and AST, call #generate (to compile) or #evaluate directly on the node)a pre-configures compiler instance can be requested with:  - Smalltalk compiler - a Class compiler The compiler instance (atually: the compilation context) needs to be setup. See #class: #source: #noPattern: #requestor: for the most important accessors (more are in the accessing protocol). See the class comment of CompilationContext for more information.The final step is one of three actions:-> parsing: parse source and return an AST.-> compile: parse and compile, return a CompiledMethod -> evaluate: parse, compile, evaluate and return resultExample:Smalltalk compiler	source: 'test 1+2';	class: Object;	compile.This returns a CompiledMethod."
"ShAbstractChange","I represent a change in a class detected when compared with the old version of the class.In the changes could be only one instance of each change. So the equals and hashcode is implemented in that way.This is because, many different change detectors can detect the same change, but I only care once. My  subclasses should know:- To announce the changes if they have to.- If they represent a change in the instance shape, requiring a  migration of instances.- If the change affect the subclasses."
"TransferModel","This is deprecated class because the original class TransferModel was renamed to TransferPresenter. You should stop to use this class and modify your code to use TransferPresenter."
"UserInputEvent","A general user input event like for keyboard or mouse"
"IceMetacelloRepositoryAdapter","Adapter for allowing metacello to use Iceberg to download packages and versions."
"FFIFunctionParser","I parse function specs."
"ZnUTFEncoder","I am ZnUTFEncoder. I am a ZnCharacterEncoder. My subclasses deal with the full range of Unicode character code points."
"CatalogProject","I'm a project from an official pharo repository. I can load 	- stable versions	- just configurations.My class side provides some helper to access distribution repositories.[[[self pharoDistributionRepository			]]]			[[[self availableRepositoryURLStrings		 ]]]"
"TraitBehavior","This class is only kept for compatibility to load extension methods. Will be removed.Check Trait for the new implementation of traits"
"InspectorNavigator","This a wrapper around inspectors for diving. It is used in the case where the inspector is dynamically replaced by another inspector. For example, EyeCollectionInspector would be replaced by EyeIntegerInspector."
"FFIExternalStructure","I'm an extension of ExternalStructure.I extend my parent functionality by adding: - field description - field accessing implementation - ..."
"ClyClassWithFlags","I am example class which has methods with flag"
"TextStream","I'm a Stream of Text objects. ex:	|ts|	ts := TextStream on: (Text new: 50). 	ts nextPutAll: 'I ' asText.	ts nextPutAll: 'love' asText allBold. 	ts nextPutAll: ' Pharo'.	TextMorph new 		newContents: ts contents; 		openInWindowLabeled: 'TextStream test'"
"SimpleAnnotationContext","I represent any annotation user from particular class hierarchy.I am hidden from programmers. They just specify the class of annotation user when they create annotations:	MyClassAnnotation for: MyUserClassInternally given class is converted to my instance:	MyUserClass asAnnotationContextWhen annotations are queried for particular user instance the result will include all annotations defined for given user class and its subclasses.	I provide little hook to redefine this rule by annotation user. Instead of simple isKindOf check:	anAnnotationUser isKindOf: annotationUserClass I ask given user if it represents simple annotation user:	anAnnotationUser representsSimpleAnnotationUser: annotationUserClassAnd by default objects just performs isKindOf: check to implement it.To create my instance manually use:	SimpleAnnotationContext of: MyUserClassI define comparison methods in the way that two contexts with same user class will be equal. Internal Representation and Key Implementation Points.    Instance Variables	annotationUserClass:		<Class>"
"ClySugsMethodContext","I provide compatibility of ClyMethodEditor with suggestions menu"
"ZnUTF32Encoder","I am ZnUTF32Encoder, a concrete subclass of ZnCharacterEncoder.I implement the fixed length UTF-32 encoding and decoding of Unicode according to http://www.unicode.org/versions/Unicode8.0.0/ch03.pdf definitions D90, D99, D100 and D101.Wikipedia reference http://en.wikipedia.org/wiki/UTF-32UCS-4 is another name for the same encoding.Part of Zinc HTTP Components."
"RBPragmaEnvironment","I am a RBBrowserEnvironment on a set of Pragmas.I containt all entities that define methods using this pragmas.Example:(RBBrowserEnvironment new) forPragmas:{ #primitive:}."
"LGitExternalStructure","Important: structs in libgit2 are usually freed by libgit2 itself.	We therefore disable freeing of structs during GC to prevent invalid	memory accesses. However, users of any struct need to make sure that	they free the struct (using a manual #free send) iff it is necessary.	Otherwise the structs will leak and we can't reclaim the space once the	object representing the struct has been collected"
"LGitNoCredentialsProvided","I'm an error thrown in callbacks when no credentials has been found.Callbacks supplying credentials HAVE to throw this error and not one created by themselves (because libgit2 aborts processing with this exception and not with others). "
"ClassRemoved","the annoucement will be emitted when removing a class or a trait using:  	=> removeFromSystem"
"AnimatedImageMorph","I am a Morph that displays a sequence of Forms order, each as represented by AnimatedImageFrame objects.To set or access the AnimatedImageFrame objects that I should display, use #frames and #frames: with a collection of frames.For convenience, the #forms message will respond with a collection of the Forms inside of each AnimatedImageFrame.Unlike ImageMorph (from whom I do not subclass), my extent must be explicitly set since each frame's form can have different dimensions and offsets."
"SmallIdentityDictionaryTest","SUnit tests for small identity dictionaries"
"ScaledDecimal","ScaledDecimal implement a special kind of Fraction that prints in decimal notation.It uses a limited number of digits (scale) after the decimal separation dot and round the result.Note that a ScaledDecimal does not printOn: exactly, however it will storeOn: exactly because the full precision fraction is kept in memory.This is mostly usefull with denominators being powers of 10."
"FFIExternalStructureFieldParser","I'm a parser for fields in FFIExternalStructure"
"RBCascadeNode","RBCascadeNode is an AST node for cascaded messages (e.g., ""self print1 ; print2"").Instance Variables:	messages	<SequenceableCollection of: RBMessageNode>	the messages 	semicolons	<SequenceableCollection of: Integer>	positions of the ; between messages"
"CatalogBrowser","I'm a browser to show project catalog from pharo official repositories. I'm a replacement for the old Metacello Configuration Browser.I interact with a ==CatalogProvider== and manipulate ==CatalogProject== instances.Pharo catalog can be found at:  *http://catalog.pharo.org*[[[CatalogBrowser new open			]]]"
"RFNameReification","I reify the name of variables"
"ClyDefaultSystemEnvironmentPlugin","I represent default plugin for navigation environment. I fill items with basic properties related to Smalltalk meta model.And I provide standart method and class groups"
"CP1253TextConverter","Text converter for CP1253.  Windows code page used for Greek. "
"RubOpeningClosingDelimiterDecorator","I am the decorator for highliting opposite character in a text area (like parenthese or square bracket)"
"IRPopIntoTemp","pop into temp"
"Form","A rectangular array of pixels, used for holding images.  All pictures, including character images are Forms.  The depth of a Form is how many bits are used to specify the color at each pixel.  The actual bits are held in a Bitmap, whose internal structure is different at each depth.  Class Color allows you to deal with colors without knowing how they are actually encoded inside a Bitmap.	  The supported depths (in bits) are 1, 2, 4, 8, 16, and 32.  The number of actual colors at these depths are: 2, 4, 16, 256, 32768, and 16 million.	Forms are indexed starting at 0 instead of 1; thus, the top-left pixel of a Form has coordinates 0@0.	Forms are combined using BitBlt.  See the comment in class BitBlt.  Forms that repeat many times to fill a large destination are InfiniteForms.	colorAt: x@y		Returns the abstract Color at this location	displayAt: x@y		shows this form on the screen	displayOn: aMedium at: x@y	shows this form in a Window, a Form, or other DisplayMedium	fillColor: aColor		Set all the pixels to the color.	edit		launch an editor to change the bits of this form.	pixelValueAt: x@y	The encoded color.  The encoding depends on the depth."
"IceProjectReader","I am a project reader that knows how to return a project object from a commit.New readers can be created by inheriting this class, and will be detected by inheritance.Then, a reader must implement: - #canReadProjectFromCommitish: returns a boolean that indicates if the reader knows how to read the project - #readProjectFromCommitish: returns a project object"
"UUIDPrimitivesTest","SUnit tests for UUIDPrimitives "
"RBLiteralNode","RBLiteralNode is an AST node that represents literals.Instance Variables	start: <Integer | nil> source position for the literal's beginning	stop: <Integer | nil> source position for the literal's end"
"RBMoveInstVarToClassTest",""
"Notification","A Notification is an indication that something interesting has occurred.  If it is not handled, it will pass by without effect."
"WebBrowser","General access to a webbrowser"
"GTSUnitExampleFailingTest","I am not a test! I provide usage examples for the SUnit debugger."
"BalloonSolidFillSimulation","This class is a simulation of the code that's run by the Balloon engine. For debugging purposes only."
"PharoTutorialsHelp","I'm a HelpSystem book which list all Pharo tutorials"
"WikiStyleHelpTest","SUnit tests for WikiStyleHelp"
"FFIOpaqueObjectType","I'm  an opaque object type (see ==FFIOpaqueObject== comment)"
"MetacelloConfigurationTutorialPart1",""
"IceLog","I'm an abstract log tool.I'm used to crate a full history of a method (see #historyOfMethod:)I'm used through a repository: aRepository ice historyOfMethod: aMethod"
"MCFileTreeAbstractReader","Abstract reader superclass for FileTree"
"FileLocatorTest","SUnit test for FileLocator"
"LGitError",""
"Symbol","I represent Strings that are created uniquely. Thus, someString asSymbol == someString asSymbol.To see the difference between Symbol and Strings look at this example:| s1 s2 |s1 := 1234 asString.s2 := 1234 asString.""Strings are not unique, while Symbols are""s1 = s2. ""true""s1 == s2. ""false""s1 asSymbol = s2 asSymbol. ""true""s1 asSymbol == s2 asSymbol. ""true""(s1 class allInstances select: [:s | s = s1 ]) size. ""2""(s1 asSymbol class allInstances select: [:s | s = s1 asSymbol ]) size. ""1""""Comparing Symbols takes less time than comparing Strings""[ #stringA = #stringB ] bench. ""26,812,864 per second""[ 'StringA' = 'StringB' ] bench. ""3,492,987 per second"""
"Unix64Platform","I am a an object representing a Unix platform (64bits). Use myself to access platform specific features.Please keep me polymorphic to the the other platform objects.To get the current platform, you can evaluate:OSPlatform current."
"MorphTreeMorphSingleSelection","Single selections in a morphic based tree"
"ZnByteArrayEntity","I am ZnByteArrayEntity, a concrete HTTP Entity based on a ByteArray.It is used to hold binary (non textual) data.I am a ZnEntity.Part of Zinc HTTP Components."
"IceGitlabRepositoryType","I resolve Gilab repositories"
"ClyTaggedMethodGroupProvider","I provide tagged method groups. I collect all tags from class scope and create ClyTaggedMethodGroup instances for each of them.I skip any tag which represent class extension, according to star convention('*PackageName'). Class extensions are handled by different provider: ClyExtendedMethodGroupProvider. It creates only general ""extensions"" group which can be expanded by subgroups for each package which extends given class. Subgroups are represented by explicit ClyExternalPackageMethodGroup. No star-convension is needed here"
"RootClassPoolUser","I'm a class using a single shared pool (which hides a system class). My subclasses should be able to access the class variable defined in the pool I use. "
"UTF8DecomposedTextConverter","An UTF8DecomposedTextConverter converts from decomposed UTF8 using the UnicodeCompositionStream.Instance Variables"
"AthensBalloonPath","i represent a path shape in balloon backend"
"CmdExtraMenuGroup","I represent kind of reusable additional method group which users can reuse for grouping set of extra rarely used commands.I am always the last group in the menu which is always separated by line in the context menu "
"CmdTextLeftBarClickActivation","I am activation of commands by click on left side bar in text editors.Currently this bar is known as #textSegmentIcons ruler in the Rubric editor. It shows various iconic tips about source code. I provide the way how activate commands by clicking on this Rubric area: most priority activation strategy is used to execute single command"
"DialogWindowPresenter","A DialogWindowPresenter is a presenter used to describe a DialogWindow"
"SHParserST80","I am a Smalltalk method / expression parser supporting syntax highligthing. "
"IceTipAbstractCredentialCommand","I am the common class of all the commands over an specific credential."
"ClyAbstractClassTableDecorator","I decorate table with special italic font for abstract classes.I am activated only in browser with installed ClyInheritanceAnalysisBrowserPlugin"
"RubSurfaceSelectionShape",""
"MCScriptParser","A MCScriptParser identifies script and add MCScriptDefinition. "
"HelpTopicTest","SUnit tests for HelpTopic class"
"WBUnixWebBrowser","Provides native access to the web browser on Unix. Do not use directly, use class WebBrowser instead."
"RBInlineMethodTest",""
"IceGitHubAction","I represent a common behavior for the actions of the GithubPlugin"
"FTIndentedCellMorph","FTCell with adjustable indentation in the X axis that can be configured so that children will be laid out from indentation to #right."
"VGTigerDemo","self runDemo "
"ClyConstantMethodQuery","I am most trivial method query which just returns constant set of methods.I implement logic to always return live method instances:- I filter out removed methods- I return actual version of methods if they were modifiedLook at the method #filterInstalledMethods: for details.To create my instances use:	ClyConstantMethodQuery with: {Rectangle >> #area}Or with special description:	ClyConstantMethodQuery named: 'todo methods' with: {Rectangle >> #area} Internal Representation and Key Implementation Points.    Instance Variables	description:		<String>	methods:		<IdentitySet of: CompiledMethod>"
"Model","Provides optimized model support"
"AthensCairoSolidPaint","i represent solid color paint in cairo backend"
"KMTarget","I am the reification of the Keymap target.  I am the one that receives the actions."
"GTSpotterProcessor","This is the abstract class that models a processor that is associated with a spotter category. It can spot items to be displayed in that category by reacting to a filter: message. "
"GTSpotterDoubleLinkedList",""
"ClassTreeNodeExample","Example for class tree nodes"
"ClyMethodCallCountersQuery","I return all methods which has installed execution counters"
"TDictionaryKeyAccessTest","A trait for test purposes"
"MalWeightedEdge","I represent a weighted edge in a graph. Public API and Key Messages- weight Instance Variables	weight: <Number>"
"MetacelloAtomicConfigurationResource",""
"FFIFloatType","A generic (abstract) float type."
"RBBooleanPrecedenceRule","Checks precedence ordering of & and | with equality operators. Since | and & have the same precedence as =, there are common mistakes where parenthesis are missing around the equality operators."
"NewHandleMorph","A more recent implementation of a handle morph"
"ClyAllProjectsQuery","I am a query of all projects from given scope.The project managers should return a subclass of myself."
"TGLMFastTableColumnsRenderer","I am a Trait that provides methods for creating rows in a Glamour presentation with columns. I exist mainly ro provides code reuse. Description --------------------My main entry point is #cellColumn:row:. This is the method called by FTTableMorph on a data source for obtaining the rows to display.  I can configure rows to also be editable.Internal Representation and Key Implementation Points.--------------------- #rowMorphElementsForFirstColumn:item:in:    I am a  hook method for configuring the first column (tables and tree need a different first column)- #dataFromPresentationItem:                                     I am a hook methods for getting the actual data from an item of the FTTableMorph"
"EpAsEpiceaRingDefinitionTest",""
"EpBehaviorCategoryChange","I represent a change in the category of a class or a trait."
"RBBadMessageRule","This smell arises when methods send messages that perform low level things. You might want to limit the number of such messages in your application. Messages such as #isKindOf: can signify a lack of polymorphism. You can see which methods are ""questionable"" by editing the RBBadMessageRule>>badSelectors method. Some examples are: #respondsTo: #isMemberOf: #performMethod: and #performMethod:arguments:"
"GLMRubricTextModel",""
"RBPatternMessageNode","RBPatternMessageNode is a RBMessageNode that will match other message nodes without their selectors being equal. Instance Variables:	isCascadeList	<Boolean>	are we matching a list of message nodes in a cascaded message	isList	<Boolean>	are we matching each keyword or matching all keywords together (e.g., `keyword1: would match a one argument method whereas `@keywords: would match 0 or more arguments)"
"GLMMorphicMorphRenderer",""
"MenuModel","This is deprecated class because the original class MenuModel was renamed to MenuPresenter. You should stop to use this class and modify your code to use MenuPresenter."
"BasicDatePrinter","I have the simple task of printing a date, time and DateTime.I do it in the simplest way possible, my subclasses can extend me, and I will use them.I only print in a single format, does not matter what format the parameter is.I use ISO 8601 for formatting Date, Time and DateTimehttps://en.wikipedia.org/wiki/ISO_8601"
"AllInstVarsEyeElement","I am an eye element for all inst vars, printing a description of all the instance vriables (usually second field in the inspector)"
"OSTouchFingerTracker","I am recording all movements and informations from a finger"
"RBPullUpInstanceVariableTest",""
"SystemProgressItemMorph","A SystemProgressItemMorph is 'bar' in a SystemProgressMorph. "
"Exit","An Exit is an exception that quit the image without saving with a given success status.Exit signalFaillure: 'something went wrong'"
"DecoratorStream","I am a basic decorator stream that will wrap a stream and forward messages to my decoree.Subclass me to write a decorator that reuses some methods."
"MalReducedGraphNode","Node used by the MalReducedGraph algorithm.It has an additional instance variable to track merged nodes."
"RBDefinesEqualNotHashRule","This smell arises when a class defines #= also and not #hash. If #hash is not defined then the instances of the class might not be able to be used in sets since equal element must have the same hash.When a class defines = also and not hash, this can lead to really subtle bugs and behavior where sometimes it appears that an object is in a set and sometimes not. One pattern proposed by Kent Beck in Best Smalltalk Practices is to define hash in terms of instance variable hash xor. Here is an example:		Book>>= anotherBook		^ (self author = anotherBook author) and: [self title = anotherBook title]		Book>>hash		^ (self title hash bitXor: self title hash		"
"MorphicSliderAdapter","I am the adapter used to bridget a SliderPresenter and a PluggableSliderMorph"
"RBAddProtocolChange","RBRefactoryProtocolChange is responsible for adding a protocol in classes in a RB model"
"MCVersion","A Metacello version"
"ClyMethodTableDecorator","I am a base class for method table decorators.I am annotated by decoration strategy in context of selected method.So my subclasses should just implement decoration logic"
"FFIOpaqueObject","I represent an opaque type (https://en.wikipedia.org/wiki/Opaque_data_type) living in the C heap. This is usefull when working with obscure types (types we do not know its composition).Take this as an example (taken from SQLite bindings): [ [ [ typedef struct sqlite3 sqlite3;typedef struct sqlite3_stmt sqlite3_stmt; ] ] ]this defines a type of a structure, and then is used along the api in this way: int sqlite3_open(char *filename, sqlite3 **handle);char *sqlite3_column_name(sqlite3_stmt* aStatement, int aColumn)this means we always access them through a reference. Now, we could declare the pointer to the structures, but then our declarations wouldn't be as close to C as we want. This i where I come to help. Instead using a FFIExternalObject, we use an FFIOpaqueObject. This means we will have a type reference (that we cannot use dereferenced, see ==FFIDereferencedOpaqueObjectError==).In the case of the example, it would work like this: [ [ [ TypeMap := Dictionary newFromPairs: #(	sqlite3		      	FFIOpaqueObject	sqlite3_stmt		FFIOpaqueObject).self ffiCall: #(int sqlite3_open(String filename, sqlite3 **handle)).... self ffiCall: #(const void *sqlite3_column_blob (sqlite3_stmt* aStatement, int aColumn)) ] ] ]"
"ClassReorganized","This announcement corresponds to the ReorganizedEvent, which seems to (by looking at the references of ReorganizedEvent) be raised when:- we rename a protocol (see 'renameCategory:toBe: '). if The category is not empty, SystemMethodRecategorizedAnnouncement will also be emitted- we sort (modify the order of) protocols (see 'sortCategories')- we add a protocol (see 'addCategory:before:')- we remove a protocol (see 'removeCategory:' 'removeEmptyCategories')"
"ClyProjectManagerRegistry","I provide access to all projects from different kind of package managers.It can be Cargo manager, Metacello manager, etc.ClySystemEnvironment instance keeps my instance. To register new package manager in image use following expression: 		ClySystemEnvironment currentImage registerPackageManager: aPackageManager	I allow different kind of package managers to be used by Calypso browser to display all available projects.Internal Representation and Key Implementation Points.    Instance Variables	packageManagers:		<Collection of<ClyPackageManager>>"
"DADependencyCheckerTest",""
"GLMExpanderTreeMorphModel",""
"TextModel","This is deprecated class because the original class TextModel was renamed to TextPresenter. You should stop to use this class and modify your code to use TextPresenter."
"IceTipDiffPanel","I'm a diff panel that shows packages/classes/methods changed in a column and a diff in the other.I receive a model that needs to understand #elements.also #elements answer should be a collection of elements that also understand elements.(IceTipDiffPanel onDiff: (IceRepository registry first workingCopyDiff)) openWithSpec"
"RGClassVariableDefinition","A class variable definition"
"JobTest","SUnit tests for Job class"
"SpecDemoDynamicPresentersListBuilder","Demo page for SpecDemoDynamicPresentersListBuilder."
"StandardFonts","I am a facade and a global reference to actual fonts to be used system wide in a number of predefined categories.I also provide methods to interactively choose these fonts, to reset all fonts to some default value, to set larger demo fonts, to construct a font menu and to manipulate the current settings as an external specification.The font categories that I know of are: ButtonFont, CodeFont, HaloFont, ListFont, MenuFont and WindowTitleFontExamples:- I open a dialog to choose the font for buttons with:StandardFonts chooseButtonFont.- To change base size for all fonts (when you want big fonts for a screencast or a presentation):StandardFonts setDemoFonts.- Then restore default fonts with:StandardFonts restoreDefaultFonts."
"GlamourPresentationPresenter","I am a Spec ComposableModel for all Glamour presentations (GLMPresentation subclasses.) By default I open a GLMPharoScriptPresentation, a Smalltalk code snippet editor.For examples see my class side."
"ClyInheritanceAnalysisEnvironmentPlugin","I plug environment with many kind of inheritance hints.I tag abstract classes and method.I analyze method inheritance and tag method with overriden and overriding tags.I maintain cache of override method statuses in variable methodCache.It is a dictionary in form of selector->methodClass->status.Status is represented by simple two items array in form {ClyOverridingMethodTag instance. ClyOverriddenMethodTag instance}. If method does not overridden then there will be nil in this status array at 2 second position.I am subscribed on system changes and invalidate methodCache when related classes or methods are changed (look at #attachToSystem method for details).In addition I provide following method groups:	- abstract methods	- override methods	- overridden methods 	- should be implemented methods"
"RBMethodNameEditor","I am an editor to set the name of a method from a given collection of arguments. Optionally, one can add or remove arguments."
"MultistateButtonMorph","A simple button that handles multiple fillstyle states:	Normal	Mouse-over	Mouse-down-inside	Mouse-down outside	with variants being a combination of passive/active and enabled/disabled."
"RBAddMethodTest",""
"RBRenameClassVariableRefactoring","I am a refactoring for rename class variables.I rename the class variable in the class definition and in all methods refering to this variable.My precondition verifies that the new variable is valid and not yet used in the whole class hierarchy."
"SycRemoveMethodStrategy","I am a strategy on how remove methods.You can see my subclasses when you try remove method in the browser which is still in use.Usualy you see four options what to do:- just remove - remove and show senders- do not remove and show senders- cancel  My subclasses reprsent this choices using following method: - removeMethods: methods And they implement supporting methods to be shown in this dialog nicely: - orderForBrowser Strategy selection dialog orders collected strategy using this message. - userRequestString It is a string which should be displayed in strategy selection dialog."
"GLMOriginPortReference","Used by BundleTransmission to annotate its originating ports whether they are active or passive.When a BundleTransmission consideres a port as active, the browser will trigger it when the corresponding port changes."
"MorphicTextAdapter","I am the adapter used to bridge a TextPresenter and a PluggableTextMorph"
"KMCommandModifier","I represent the default modifier key for the current platform, late bound to Meta or Ctrl key modifier depending on the platform."
"TRemoveForMultiplenessTest","A trait for test purposes"
"UnreferencedSharedPool","Just a class for testing"
"ClyMethodExtensionSwitchMorph","I am status bar tool for method editors to switch the extension status of the editing method. Internal Representation and Key Implementation Points.    Instance Variables	checkbox:		<Object>"
"GTEventMultiBundle","I keep all GTEventBundle objects that should be delivered to the same remote server. That way, all data can be sent to the server at one HTTP request.By calling #entity, you receive ZnMultiPartFormDataEntity object that contains ZnMimePart objects in a sequence 'category', 'data', 'category', 'data', etc. Server is then responsible for spliting this object into the parts and store each data in to a right position (directory).For the Collaborators Part: - GTEventBundle: I keep collection of those objects and asks them for a ZnEntity object calling #entity.- GTEventMultiBundleFactory knows how to create instances.- GTEventDelivery knows how to send my #entity to a server.Internal Representation and Key Implementation Points.    Instance Variables	bundles:		<Collection>	url:			<ZnUrl>"
"MCScanner","I scan / tokenize metadata  (package name, version info, ancestry, dependencies, ...) found in .mcz files.For example, try:MCScanner scan:  '(name ''MyPackage-ll.6'' message ''Fix bug xxx'' id ''b21dbd73-f1c3-2746-a3cc-92f1d4edea28'')' readStream"
"MCPatch","I represent a set of patch operations which can be applied by sending message applyTo: to my instances. "
"AthensWrappedWorldDisplay","An AthensWrappedWorldDisplay acts as a DisplayScreenfor a wrapped WorldMorph.Instance Variables	realDisplay:		the realdisplay	wrapMorph:	the wrapped world"
"MessageTallyTest","SUnit tests for MessageTally"
"IceTipUnloadAndRemovePackageCommand","Command that opens a dialog to remove a package.It gives the user with two checkboxes to choose: - remove from repository - unloadRight now this is only shown for loaded packages."
"GTStonPackingTest",""
"IceTipToolbarItem","I'm a toolbar item. I define elements in a toolbar.Items can have label, icon, help text, a badge and or course, an action.They can also have a position (an instance of IceTipToolbarItemPosition): they can be at left or right of the toolbar."
"TLGitCalloutTrait",""
"GTInspector","This is meant to be used for inspecting objects. It offers multiple views and it uses a finder as a navigation. One particular feature is that you can use the evaluator tab to enter code, and evaluating it results in opening another pane to the right.The object finder asks dynamically the object for the actual presentations that are displayed in each pane.Example:self openOn: Smalltalk.Register it as a replacement for explorer:self registerToolsOn: Smalltalk tools."
"ClyVariableReadersQueryTest",""
"AthensSurface","I representing a surface, where all drawing operations will happen.I also having a number of factory methods to create paints, paths and other objects involved in drawing.AthensSurface is an abstract, while subclasses implement a specific kind of surface for one or another backend.The primary role of AthensSurface class is to define a public protocol for all Athens surfaces, which can be used by applications which using Athens framework.To get a new surface, use:<one of my subclasses> extent: x@yfor surfaces which don't need to have dimensions specified,it would just #new."
"GLMActionTest",""
"ZipCrcTests","Tests for correct CRC handling in ZipWriteStream"
"TDictionaryValueAccessTest","A trait for test purposes"
"ManifestKernel","Core classes of Pharo Smalltalk including basic objects, types, exceptions, process, etc."
"GLMEastDirection",""
"ZdcReferenceSocketStreamTests","ZdcReferenceSocketStreamTests test the reference SocketStream in the image"
"FTGeneric","I implement the FT_Generic type"
"LazyTabPage",""
"ExternalDropHandler","Handle a number of dropped files from the OS"
"SwappedColorDiffMorph","I swap colors for the original diff morph, so the additions are green and removals are red.(and order left to right is preserved)"
"HEMethodContainer","I implement the common behavior between classes and traits.I implement all the handling of methods (instance side and class side) and the trait compositions (instance side and class side).The headers of a class and a trait are different. Each subclass implements this reading."
"PluggableMenuItemSpec","I'm a spec for an item menu. The World menu pragma based registration uses it for now. I'm moved in this package so that later we can decide what to do with it. We could probably avoid MenuSpec and just use MenuMorph instead. "
"GTEventUnpackingTest","A GTEventUnpackingTest is a test class for testing the behavior of GTEventUnpacking"
"ExternalAddress","An ExternalAddress is an opaque handle to objects outside Smalltalk memory (e.g., a pointer)."
"GLMBrickAnnouncement","A GLMBrickAnnouncement is default announcement used for any purpose by bricks.Instance Variables	data:		<Object>data	- xxxxx"
"SnapshotDone","I am announced when the image has been saved. Note that the announcement is done *after* the execution was frozen. So you can send me #isNewImage to know if the current image instance is the same that started the save action."
"EpCompositeRefactoring","I represent a refactoring that is composed of other refactorings."
"ClySystemBrowserContext","I am a root of contexts hierarchy which represent the state of any kind of system browsers.I define main interface to check the browser state:  - For packages: 		- selectedPackages 	- lastSelectedPackage	- isPackageSelected	- For classes 	- selectedClasses 	- lastSelectedClass	- isClassSelected- For methods 	- selectedMethods 	- lastSelectedMethod	- isMethodSelected- For messages 	- selectedMessages 	- lastSelectedMessage	- isMessageSelectedMessage is a selector+arguments. Any method defines correspondant message. So it allows to have polymorphic interface to work with messages like in the source code editor. In addition I provide tool controlling methods: - showClass: aClass- showMethod: aMethod - showMessage: aMessage renamedTo: newSelector And I implement simplified search requests: - requestSinglePackage: 'Choose a package'- requestSingleClass: 'Choose a class'- requestSingleMethodTag: 'Choose a protocol'"
"GLMPaneReplaced","An old pane was replaced with a new oneInstance Variables	newPane:		<Object>	oldPane:		<Object>newPane	- the new pane	oldPane	- the old pane"
"UnlimitedInstanceVariableSlotTest",""
"BaselineOf","You should use a *baseline* when you are using a disk-based sourcecode manager (SCM) like [git][1].When using a disk-based SCM it is not necessary to use the Metacello*version* method, because it is intended for use with `.mcz` files. With a disk-based SCM you only need a single `baseline:` method. Whenyou change the structure of your project you can change the baseline andsave everything in a single commit. So multiple `baseline:` methods areno longer needed.You may still need a *configuration* when using a *baseline*. The[Sample project][3] on GitHub has a good example of a configuration usedin conjunction with a *baseline*. See the [**ConfigurationOf** class comment][2] for information on creating a *configuration*.To create a new Metacello baseline:1. Create a subclass of the **BaselineOf** class. The baseline   class for your project should be named by appending the name of   your project to the string `BaselineOf`. The name of the category and   package should be the same as the name of the class:    ```Smalltalk    BaselineOf subclass: #BaselineOfExample      instanceVariableNames: ''      classVariableNames: ''      poolDictionaries: ''      category: 'BaselineOfExample'    ```2. Create a **baseline:** method where you specify the structure of your project:    ```Smalltalk    baseline: spec      <baseline>      spec for: #common do: [        spec          package: 'Example-Core';          package: 'Example-Tests' with: [            spec requires: 'Example-Core' ]].    ```3. Create a Monticello package for your **BaselineOf** class and save it in the repository where your packages are stored.4. To load a package from GitHub that contains a baseline evaluate the following:```Smalltalk| repositorySpec |""edit to match your username, repository name and branch""repositorySpec := 'dalehenrich/metacello-work:master'.Metacello new  baseline: 'Sample';  repository: 'github://', repositorySpec;  load.```For further documentation see For more information on the [github://](MetacelloScriptingAPI.md#github) url specifigation see the [Metacello Scripting APIreference](MetacelloScriptingAPI.md). There more information on [working with GitHub here](GettingStartedWithGitHub.md).[1]: http://git-scm.com/[2]: https://github.com/dalehenrich/metacello-work/blob/master/repository/Metacello-Base.package/ConfigurationOf.class/README.md[3]: https://github.com/dalehenrich/sample/tree/configuration/ConfigurationOfSample.package/ConfigurationOfSample.class"
"TestingComposablePresenterWithModel","A testing composable presenter for testing of the class ComposablePresenterWithModel"
"ApplicationWithToolbar","I am a simple example showing how to use a menu model to have a menu toolbar.self example"
"EpMonitor","I am a system monitor.I subscribe to the system announcer to translate announcements to Epicea events (ie. subclasses of EpEvent), and record them into a log."
"MessageSend","Instances of MessageSend encapsulate message sends to objects. Arguments can be either predefined or supplied when the message send is performed. Use #value to perform a message send with its predefined arguments and #valueWithArguments: if additonal arguments have to supplied.Structure: receiver		Object -- object receiving the message send selector		Symbol -- message selector arguments		Array -- bound arguments"
"RBUnpackagedCodeRule","Code that is not contained in a Monticello package is not versioned and cannot be brought into a different image."
"FFIExternalArrayType","I define the type for FFIExternalArray objects."
"GLMPortChangeAction",""
"GLMPagerButtonsPaneBrick",""
"ClyOpenDependencyBrowserCommand","I am a command to open dependency browser on set of packages"
"IceGitHubOpenOnGithubAction","Description--------------------I am a simple action taking as parameters an owner of a project and the project name and I open the project on github from that.	 Internal Representation and Key Implementation Points.--------------------    Instance Variables	organisation:		<aString>		The name of the owner of the project.	projectName:			<aString>		The project name."
"GLMAbstractWizardStep","Abstract step in a wizardInstance Variables	input:		<Object>	name:		<Object>	numberOfDisplay:		<Object>	presentationBlock:		<Object>	previousStep:		<Object>input	- xxxxxname	- xxxxxnumberOfDisplay	- xxxxxpresentationBlock	- xxxxxpreviousStep	- xxxxx"
"WindowCollapsed","This announcement is emitted when a window is collapsed, by pressing the '-' top left button of a window."
"ClySpawnFullBrowserCommand","I am a command to spawn full browser from current browser state.I simply ask browser #spawnFullBrowser.By default I am available everywhere using cmd+b shortcut and ""Browse"" context menu item.Internal Representation and Key Implementation Points.    Instance Variables	browser:		<ClyBrowser>"
"SpecStubButtonView","Only stub object, no real view is displayed."
"TimeProfiler","TimeProfiler is a graphical front end of MessageTally. It gives nice facilities to navigate and browse a profile.Use examples:TimeProfiler new openTimeProfiler new openOnBlock: [SimpleGridExample new open]TimeProfiler new openOnBlock: [ClassTreeExample new openOn: Object] MessageTally spyAllOn: [ClassTreeExample new openOn: Object]"
"FTListRec","I implement the FT_LIST_REC, I am used as a linked list inside the FT library."
"GLMTabulatorTest",""
"GLMPresentationUpdated","A GLMPresentationUpdated is announced by the presentation when an update is wanted."
"ZnEncodedWriteStream","I am ZnEncodedWriteStream, an abstract support class for write streams on a binary encoded wrapped stream.Part of Zinc HTTP Components"
"TaDeepAliasMethod","I extend my superclass not only aliasing the method but also rewriting all the users of the method in my methods.I am useful when you want to rename a method. You alias deeply with me and then remove it.I implement the #@=  operator."
"RBRenameClassRefactoring","I am a refactoring for renaming a class.My preconditions verify, that the old class exists (in  the current namespace) and that the new class name is valid and not yet used as a global variable name The refactoring transformation will replace the current class and its definition with the new class name. And update all references in all methods in this namespace, to use the new name. Even the definition for subclasses of the old class will be changed."
"AssertEqualSignIntoAssertEquals","Using assert:equals: produces better context on rule failure"
"HDTestCoverage","Used to measure test coverage for Hudson reports"
"LocaleID","The ID for localization"
"ImagePresenterTest",""
"GLMPagePoped",""
"IceLibgitRepository","I am an iceberg repository that uses libgit as backend.I have a handle to a LGitRepository that is lazily initialized on usage, and cleaned up on every shutdown (automatically done by uFFI).Every access to the libgit repository should be wrapped with a call to #handleLibgitError: to manage possible libgit errors and transform them to a correct iceberg error."
"CustomQuestionDialogWindow","QuestionDialog supporting custom text/buttons for yes/no choices."
"HEFloat","I represent a Float numberI am stored as two unsigned int32 numbers.These numbers are got from the instance (Float >> #at:)When readed back I always create a BoxedFloat. Then this instance is operated to generate the correct immediate instance if required.This hack allows us to load the same hermes file in 32bits or 64 bits"
"BecomeTest",""
"RBVariableEnvironment","I am a RBBrowserEnvironment for items referring class or instvars.Constructed by quering extisting environments with refering, reading or writing to the variables of a class.Example:(RBBrowserEnvironment new) instVarWritersTo:#color in: Morph.-> a RBVariableEnvironment"
"PharoDocCommentNode","I represent a example expression (expression and value) within a methodcomment (RBCommentNode). Every pair of Pharo expression and a separator (default "">>>"") can be styled as Pharo code and the editor iconstyler  can highlight the code and evaluate the expression.Example, within a method comment:"" 3 + 4 >>> 7""The example code should show an  expression 3 + 4 and the expected value 7.See setting on ""Code Browsing"" to enable / disable this doc comment style."
"TabMorph","I represent a simple tabI have a IconicListItem which wrap my label and my icon.I also have a morph to display when selected.This morph can in fact be anything responding to #asMorph. Moreover it could be a block for lazy initialization.I also have a state representing if I am selecting or not, enabled or not, etc"
"FLPluggableSubstitutionMapper","I map substituted objects. For example, suppose you want to substitute instances of WriteStream by nil. In such case, I will map every WriteStream instance to my substitutions cluster, and its factory block will value to nil with any argument."
"FastInflateStream","This class adds the following optimizations to the basic Inflate decompression:a) Bit reversed accessIf we want to fetch the bits efficiently then we have them in the wrong bit order (e.g., when we should fetch 2r100 we would get 2r001). But since the huffman tree lookup determines the efficiency of the decompression, reversing the bits before traversal is expensive. Therefore the entries in each table are stored in REVERSE BIT ORDER. This is achieved by a reverse increment of the current table index in the huffman table construction phase (see method increment:bits:). According to my measures this speeds up the implementation by about 30-40%.b) Inplace storage of code meanings and extra bitsRather than looking up the meaning for each code during decompression of blocks we store the appropriate values directly in the huffman tables, using a pre-defined mapping. Even though this does not make a big difference in speed, it cleans up the code and allows easier translation into primitive code (which is clearly one goal of this implementation).c) Precomputed huffman tables for fixed blocksSo we don't have to compute the huffman tables from scratch. The precomputed tables are not in our superclass to avoid double storage (and my superclass is more intended for documentation anyways)."
"TAbleToRotate","A trait for morphs able to rotate"
"ClassAnnotationExample2",""
"OSWindowMorphicEventHandler","I can be used to convert OSWindow-level events to Morphic events.So, that installing my instance as event handler for specific window would allow running Morphic World in it.Later, the Morphic can be integrated with OSWindow API to avoid unnecessary conversion and thus eliminating the need in having this class."
"MonticelloRepositoryBrowser","MonticelloRepositoryBrowser example"
"MCCredentialsRequest","I am used to prompt in a UI indepentent way for a username and a password.If the user successfully entered the two strings I return an MCServerCredential if not I return nil."
"TestCaseAnnouncement","This is a common superclass for announcements related to SUnit test cases.Instance Variables        testCase:                       <TestCase>        testResult:                     <TestResult>        testSelector:           	   <Symbol>testCase        - The test casetestResult        - The result of the test casetestSelector        - The selector of the test method"
"OSPlatformTest",""
"DAInheritanceDependency","A PDInheritanceDependency is an inheritance dependency between two packages.	superclass:		the superclass that includes in the target PDPackag"
"ExternalLibraryFunction","An ExternalLibraryFunction specifies a fully qualified function from an external library.Instance variables:	name			<String | Integer>	name or ordinal of function	module			<String | nil>		name of module (nil if bound in the VM).	errorCodeName <String | nil>		name of temp receiving error code, if any"
"GLMBrickPropertiesTrait","I declare api and logic to work with properties of a Brick, such as color, shadow, renderer and more"
"Transcripter","Transcripter is a dog-simple scrolling stream with display.  It is intended to operate with no support from MVC or color in a minimal, or headless version of Pharo.  No attention has been paid to appearance or performance.type exit (without quote) to exit the evaluatortype revert (without quote) to revert the last changes.Transcripter askForEmergencyEvaluatorOrExitWithText: 'Emergency Evaluator'Transcripter emergencyEvaluator"
"MCFileRepositoryInspector","I'm a monticello tool composed of three panes to browse repositories and the packages they contain. You get an instance of me when you click on a repository in Monticello browser and press open. My left pane presents the packages, my right one their versions and the bottom one the commit log of the selected package versions.I underline the packages you already loaded, and highlight the ones you don't have updated to the last version. I also highlight the versions you did not load yet.Example: I can browse packages of PharoInbox with:(MCFileRepositoryInspector 	repository: (MCHttpRepository					location: 'http://www.squeaksource.com/PharoInbox'					user: ''					password: '')	workingCopy: nil) show.	COTDC - S.Ducasse, G.Polito, L.Laffont"
"Alien","Copyright 2008 Cadence Design Systems, Inc.      Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0Instances of Alien represent actual parameters, return results and function pointers in FFI call-outs and call-backs and provide handles on external data.  See NewsqueakIA32ABIPlugin for the VM code that actually implements call-outs and call-backs.See the class-side examples category for some simple example workspaces.Aliens represent ABI (C language) data.  They can hold data directly in their bytes or indirectly by pointing to data on the C heap.  Alien instances are at least 5 bytes in length. The first 4 bytes of an Alien hold the size, as a signed integer, of the datum the instance is a proxy for.  If the size is positive then the Alien is ""direct"" and the actual datum resides in the object itself, starting at the 5th byte.  If the size is negative then the proxy is ""indirect"", is at least 8 bytes in length and the second 4 bytes hold the address of the datum, which is assumed to be on the C heap.  Any attempt to access data beyond the size will fail.  If the size is zero then the Alien is a pointer, the second 4 bytes hold a pointer, as for ""indirect"" Aliens, and accessing primitives indirect through the pointer to access data, but no bounds checking is performed.When Aliens are used as parameters in FFI calls then all are ""passed by value"", so that e.g. a 4 byte direct alien will have its 4 bytes of data passed, and a 12-byte indirect alien will have the 12 bytes its address references passed.  Pointer aliens will have their 4 byte pointer passed.  So indirect and pointer aliens are equivalent for accessing data but different when passed as parameters, indirect Aliens passing the data and pointer Aliens passing the pointer.Class Variables:GCMallocedAliens <AlienWeakTable of <Alien -> Integer>> - weak collection of malloced aliens, used to free malloced memory of Aliens allocated with newGC:LoadedLibraries <Dictionary of <String -> Alien>> - library name to library handle mapClass instance variableslifoCallbackSemaphore <Semaphore> - The lifoCallbackSemaphore queues callbacks which cannot return because they are not the most recent callback.  Callback return must be last-in-first-out (LIFO) to avoid scrambling the C stack.  See Alien class>>invokeCallbackContext:."
"LGitRepositoryObject",""
"FullStackDebugAction","A FullStackDebugAction displays the entire stack in the stack widget."
"RBLiteralArrayCharactersRule","Literal arrays containing only characters can more efficiently represented as strings."
"ExampleRadioButtonModel","Model used for radio buttons in example of basic controls (see ""UITheme exampleBasicControls"")."
"RBReadBeforeWrittenTester","RBReadBeforeWrittenTester is a visitor that identifies variables that may have been read before they are initialized.Instance Variables:	checkNewTemps	<Boolean>	description of checkNewTemps	read	<Collection>	description of read	scopeStack	<OrderedCollection>	description of scopeStack"
"MetacelloVisitedPackages",""
"IceTipPackageCommand","Abstract class representing commands to be applied on top of packages."
"ShCBEmptyClass","I am a test class."
"LGitRemote",""
"KMCategoryTest","SUnit tests for key mapping categories"
"DAPackageAnalyzerTreeModel","A PDPackageAnalyzerTreeModel shows all dependent packages from a set of packages. Also you can see all type of the dependency, and browse them."
"IceMergeListWrapper","I am a morphic list wrapper that wraps iceberg diff tree nodes (potentially with conflicts)"
"RBSuperSendsRule","Rewrite super messages to self messages when both refer to same method"
"BaselineOfUnifiedFFI","This baseline is used to generate Pharo images from the local clone of pharo-project/pharo repository. Depends on:- BaselineOfDisplayLoad type: - linearInstalls:- UnifiedFFI"
"OmReference","I represent a reference to an entry into a store."
"RBSmalltalkGlobalsRule","Do not send requests to ""Smalltalk"" (which models the whole image)  that are related to the envionment of defines classes and globals"
"MorphTest","This is the unit test for the class Morph. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- http://minnow.cc.gatech.edu/squeak/1547	- the sunit class category"
"RubTextFieldMorph","I am a morph for a text area which has only one line, like search field"
"ZipReadStream","ZipReadStream is intended for uncompressing the compressed contents of Zip archive members.Since Zip archive members keep their expected CRC value separately in Zip headers, this class does not attempt to read the CRC from its input stream.Instead, if you want the CRC verification to work you have to call #expectedCrc: with the expected CRC-32 value from the Zip member header."
"IceTipVersionModel","I'm a model for IceLogVersion entries. - I provide log-specific entries.- I can install a certain method version."
"IceGitHubRemoveBranchesAction","I'm an action to remove branches from remotes."
"ZnUrlOperation","I am ZnUrlOperation.I am an abtract superclass of operations that can be performed on ZnUrl objects.Some operations, like retrieving the contents of a resource described by a URL, depend on elements, most likely the scheme, of the URL. By creating the appropriate subclasses, this behavior can be added.I implement searching/matching logic on my class side.  #performOperation:with:on:which defaults to matching the #operation and #schemes.I am instanciated to be executed.   #performOperationA concrete example is ZnUrl>>#retrieveContents with subclasses ZnHttpRetrieveContents and ZnFileRetrieveContents.Part of Zinc HTTP Components."
"OSMouseButtonEvent","i am the root of various mouse button events."
"DropListButton","I am an elementary Spec widget that associates a DropListPresenter and a ButtonPresenter.self exampleI provide accessors dropList and input and shortcuts for the most common methods of their api."
"SDL2Union","Common things for all SDL2 unions."
"OSWindowFocusOutEvent","I am delivered when window loses the user input focus."
"TDictionaryCopyingTest","A trait for test purposes"
"DAPackageDependency","A PDPackageDependency is a dependency between two packages.	source:		the source PDPackage 	target:	      the target PDPackage"
"RBAddMessageSendTransformationTest",""
"EpEntryContentVisitor","I am an abstract superclass for some visitors that answer objects describing EpEvent instances."
"LGit_GIT_ERROR",""
"STONTestUser3","STONTestUser3 extends STONTestUser but wants nil instance variables to be written"
"FFIExternalValueHolderType","I'm an external value holder type (see ==FFIExternalValueHolder==  comment)."
"RBLiteralArrayNode","A RBLiteralArrayNode is an AST node that represents literal arrays and literal byte arrays.Instance Variables	contents: <Array of: RBLiteralNode> literal nodes of the array	isByteArray: <Boolean> if the receiver is a literal byte array"
"GLMRubricSmalltalkTextModel",""
"HEExportedMetaclass","I represent a MetaclassI am stored as a symbol.When serialized I get the name of the base class.When deserialized I find the metaclass in the target environment"
"WindowPresenter","A WindowPresenter is a spec presenter for a Window"
"ReExceptionStrategy","The subclasses of this class define how Renraku should handle exceptions signallied by analyzers"
"GLMTextMorphicTest",""
"IceTipGitHubRepositoryPanel","I'm a presenter to define a new remote repository from a github repository (owner/project)."
"ClyMultipleClassRelationScope","I represent complex hierarchy scope which merges together multiple kind of class relationship.Class relations are represented by subclasses of ClySingleClassRelationScope. I use their #classesRelatedTo:do: method to enumerate all classes related to my basis:	ClyMultipleClassRelationScope>>classesRelatedTo: aClass do: aBlock		relationScopeClasses do: [ :each | 			each classesRelatedTo: aClass do: aBlock ]There is big difference between me and possible composition scope of other class relation scopes. For example try look at SomeTrait from the composition scope of ClySuperclassScope and ClyTraitUserScope.First one will return no classes because traits has no superclass.And the last one will return all classes and traits which uses given SomeTrait.But my instance will behaves differently. For every class it will analyze both relationships: superclass and trait user. So every trait user will provide superclasses for the scope:	ClyMultipleClassRelationScope of: SomeTrait merging: { ClySuperclassScope. ClyTraitUserScope }From this scope you will see all classes and traits which uses given SomeTrait. But in addition it will show all superclasses of those classes and traits.So idea behind me is to expand class visibility by multiple relationships. Every class retrieved from the basis will be recursivelly analyzed using all given relationships. Internal Representation and Key Implementation Points.    Instance Variables	relationScopeClasses:		<Collection of<ClySingleClassRelationScope class>>"
"EpClassAddition","I represent the creation of a class."
"LGitDiffOptionTypeEnum",""
"StoredSettingsFactory","I am responsible for creating new StoredSetting objects from existing SettingNodes. I know how to create a StoredSetting from a SettingNode.Collaborators: SystemSettingsPersistencePublic API and Key Messages- from:- fromSettingNodes: Internal Representation and Key Implementation Points.    Instance Variables	storedSetting:		<StoredSettings>	storedSettings:		<Collection of StoredSettings>"
"CollectionValueHolder","I am designed specifically for collections."
"ThemeIcons","I'm an icon pack who retrieve icons from a remote repository (https://github.com/pharo-project/pharo-icon-packs).You should access this icons using #iconNamed: idiom: Smalltalk ui icons iconNamed: #add.Iuse an override of #doesNotUnderstand: to provide compatibility with ""old way"" of providing icons: Smalltalk ui icon addIcon. Installation:----------------ThemeIconPack new 	name: 'idea11';	loadIconsFromUrl;	beCurrent.NOTE: ""name"" is the branch name in the repository."
"MCRepository","A Metacello repository"
"CmdCommandExampleInRootMenu",""
"ButtonPresenterTest","SUnit tests for Button model"
"SlotErrorsTest",""
"ClyBrowserQueryResultExample",""
"LGitStatusList",""
"GTEventConsolidateTest","A GTEventConsolidateTest is a test class for testing the behavior of GTEventConsolidate"
"SlotLayoutEqualityTest",""
"EpInverseVisitor","I convert a code change to it's inverse operation. For example, a class addition into a class removal."
"TAsStringCommaAndDelimiterSequenceableTest","A trait for test purposes"
"RPackageConflictError","I'm an error that happens when someone attempts to register a package with a conflicting name. Conflicting names can be of two ways: PackageA(tagB) conflicts with PackageA-BPackageA-B conflicts with PackageA(tagB)"
"MCChangeNotificationTest",""
"ClyBrokenCritiqueTag","I mark broken critiques. They raise some exception when are computed.I am used to show broken critiques in full critiques list allowing to debug and fix failure."
"LocaleChanged","Announce that a locale was changed"
"LGitFileSignatureCallback",""
"GTSpotterExceptionsTest",""
"GLMAnnouncingCollection",""
"GLMVariableBindingsAccessRequest","Request to perform an action on the current bindings from the editor."
"OSMouseWheelEvent","i am delivered when user scrolling the mouse wheel"
"SDL_JoyButtonUpEvent","SDL2 library structure representing a joystick button up event data."
"RGTraitDescriptionDefinition","RGTraitDescriptionDefinition is the common parent for traits and metatraits that know their users (ie. classes/metaclasses)"
"TopLeftGripMorph","I am the handle in the left top of windows used for resizing them."
"SpecStubDialogWindowView","Only stub object, no real view is displayed."
"ClyOverriddenMethodGroupProviderTest",""
"FTArrayIndexColumn","I am a fast table column to represent item in array at particular index. Internal Representation and Key Implementation Points.This class has and extends API of FTColumn    Instance Variables	id:			An id for the column	width:		An Integer that represent the width of a column.	index:		<Number>"
"MCFileTreeRepository","A file tree repository"
"DosTimestamp","DOS stores timestamps, in local time, as 32 bit integers with the following format:	32 bits (low to high):		Low 16 bits:			Bits 0-4: seconds / 2	 		Bits 5-10: minutes 0-59			Bits 11-15: hours 0-23		High 16 bits:			16-20: day of month 1-31	 		21-24: month 1-12			25-31: year offset from 1980 (e.g. 1981 -> 1)References (with visual aids): http://blogs.msdn.com/b/oldnewthing/archive/2003/09/05/54806.aspx & http://mindprod.com/jgloss/zip.html"
"OSWindowAttributesTest","An OSWindowAttributesTest is a test class for testing the behavior of OSWindowAttributes"
"TPutBasicTest","A trait for test purposes"
"SHA1Test","This is the unit test for the class SecureHashAlgorithm. Unit tests are a good way to exercise the functionality of your system in a repeatable and automatic manner. They are therefore recommended if you plan to release anything. For more information, see: 	- http://www.c2.com/cgi/wiki?UnitTest	- there is a chapter in the PharoByExample book (http://pharobyexample.org)	- the sunit class category"
"GLMTextModel",""
"RBGlobalNode","I am a specialized variable node for global  variables, class variables and pool variables. These variables are class names(#Object -> Object) pointing to objects or other names pointing to objects that are accessible from e,g. the global scope(Processor  -> ""ProcessorScheduler"").The parser does not know about this type of variables until you call doSemanticAnalysis:(RBParser parseMethod:'foo Object new') body statements first receiver class. ""RBVariableNode""(RBParser parseMethod:'foo Object new') doSemanticAnalysis body statements first receiver class.  ""RBGlobalNode"""
"ReTestClassNameShouldEndWithTest","Check if a subclass of TestCase ends with 'Test'"
"ClyBothMetaLevelClassScopeTest",""
"GLMCustomRow",""
"AtomicSharedQueue","I am using semaphore to signal/wait for new items available in queueI am introducing extra protocol - #next, which blocks the sender until it can successfully fetch next item from queue."
"ClyFormatAsReadSwitchMorph","I am a tool to force method editor to automatically format given source code. Internal Representation and Key Implementation Points.    Instance Variables	checkbox:		<Object>"
"ManifestToolDiff","Package to support displaying changes in the form of diffs for tools"
"GLMPopupBrickUpwardLayout","I am a special upward popup layout.I make sure that content is above the trigger brick"
"FTDisplayColumn","I'm a container for columns in the process of being shown in container. I have display column properties (that might or might not be in column it self).Originally I'm used to send data outside container that might be used (for example, resizing)."
"GTFilterImplementor",""
"KMNoModifier","I represent the absense of a key modifier. I fulfill the role of a null pattern, having as default no printing and not matching."
"RBValueToken","RBValueToken is the abstract superclass of all tokens that have additional information attached. For example, the BinarySelector token holds onto the actual character (e.g. $+).Instance Variables:	value	<String>	The value of this token"
"TextStyleAsFontFamily","Text style as font family"
"ClyMethodScopeTest",""
"SimplifiedChineseEnvironment","This class provides the Simplified Chinese support (Used mainly in Mainland China).  Unfortunately, we haven't tested this yet, but as soon as we find somebody who understand the language, probably we can make it work in two days or so, as we have done for Czech support."
"LGitSafeFFICalloutAPI","I'm a variant of FFICalloutAPI that uses a different builder to generate methods with an extra check to see if the object is 'ready' or not."
"MorphicMenuAdapter","I am the adapter used to build a MenuMorph from a MenuPresenter"
"STONReader","STONReader materializes objects using the Smalltalk Object Notation format.This parser is backwards compatible with standard JSON.Customization options are:- acceptUnknownClasses <Boolean> default is false	if true, unknown class names are allowed, the standard #mapClass (Dictionary) is instanciated and the class name is added under #classNameKey (#className)	if false, unknown class names result in a NotFound error- convertNewLines <Boolean> default is false	if true, any unescaped EOL sequence CR, LF or CRLF inside strings or symbols is read and converted as the chosen EOL sequence	if false, CR, LF and CRLF are read unmodified- newLine <String> default is String cr	sequence to use as EOL"
"SpecRowLayout","A SpecRowLayout isthe layout used to specify a new row"
"MalKruskal","Kruskal's algorithm is a greedy algorithm in graph theory that finds a minimum spanning tree for a connected weighted graph. This means it finds a subset of the edges that forms a tree that includes every vertex, where the total weight of all the edges in the tree is minimized. If the graph is not connected, then it finds a minimum spanning forest (a minimum spanning tree for each connected component).See https://en.wikipedia.org/wiki/Kruskal%27s_algorithm"
"TopRightGripMorph","I am the handle in the right top of windows used for resizing them."
"NaNException","I am NaNException, an ArithmeticException signaled when Float nan was encountered where it was not allowed. "
"ZnConnectionAcceptedEvent","ZnConnectionAcceptedEvent is signalled when an HTTP server accepts an incoming connection from a client at address."
"GraphicFontSettings","Settings for the fonts"
"ChunkWriteStream","I am a write stream that write chunks of Strings. That is, pieces of text separated by!!symbols"
"MorphTreeNavigationBar","I'm a pager control used to navigate in a MorphTreeMorph that has a lot of entries.You can see one of my subclass in action using:""May take a while to open""ClassListExample new open"
"RubSegmentMorph","3. The CLOSED and SEGMENTED variant looks like polygon. This is actually what you get when you do	PolygonMorph new openInWorldYou get a triangle. See below how to manipulate these objects...4. The CLOSED and SMOOTHED variant looks like blob (???)"
"GLMDropDownMorphicTest",""
"IceTipInteractiveErrorVisitor","I'm a visitor to provide users with an interactive way to react to iceberg errors."
"SpecStubTabAdapter","Adapt the presenter on a stub view that displays no real UI elements."
"DATraitDependency","A PDTraitDependency is a trait dependency between two packages. Instance Variable	trait:		the trait"
"ClyFilterQuery","I represent query which filters results of another query.My instances can be created by:	ClyFilterQuery for: anQuery filter: anItemFilterOr you can simply convert any query using filter: 	aQuery filteredBy: anItemFilterDuring execution I evaluate #actualQuery and filter received items with my #itemFilter.Look at method #buildResult: for details.itemFilter is a kind of ClyItemFilter. For example there is ClyItemNameFilter which matches items by name using specified pattern. Look ClyItemFilter comments for details. Internal Representation and Key Implementation Points.    Instance Variables	itemFilter:		<ClyItemFilter>"
"ClassAPIHelpBuilder","A builder to build the API Help for a classInstance Variables	addMethods:		<Boolean>	addSubclasses:		<Boolean>	subclassesAsSeparateTopic:		<Boolean>addMethods	- When true the builder will include method helpaddSubclasses	- When true the builder will recursively go through and add subclassessubclassesAsSeparateTopic	- xxxxx"
"MCVersionHistoryBrowser","Browser for version history"
"InlineTextDiffBuilder","Line based Text diff builder"
"RunArray","My instances provide space-efficient storage of data which tends to be constant over long runs of the possible indices. Essentially repeated values are stored singly and then associated with a ""run"" length that denotes the number of consecutive occurrences of the value.My two important variables are	runs	An array of how many elements are in each run	values	An array of what the value is over those elementsThe variables lastIndex, lastRun and lastOffset cache the last accessso that streaming through RunArrays is not an N-squared process.Many complexities of access can be bypassed by using the method	RunArray withStartStopAndValueDo:"
"ZdcIOBuffer","I am ZdcIOBuffer.I manage a fixed SequenceableCollection buffer for simultaneous input and output.I maintain a readPointer and a writePointer.When data is written to me, it is stored at the end, past my writePointer.When data is read from me, it is retrieved from the front, past my readPointer.Invariant: readPointer <= writePointerMy valid contents for reading is defined from contentsStart to contentsEnd, from readPointer + 1 to writePointer.Data can be added to the free space defined from freeSpaceStart to freeSpaceEnd, from writePointer + 1 to the buffer's' size.There can be a gap at my front. Compacting moves data if necessary to make (more) room at the end."
"IceTipOutlineHeaderCellMorph","Description--------------------I am a cell used to render the header of an outline datasource.Since the header should not be part of the tree, to collapse it we do not have a button but I am clickable. (I show a web cursor to show the feature to the user)"
"DAPackage","I am a PDPackage and i represent a package (RPackageSet) and all his dependencies (PDPackageDependency).Instance variables :	- dependencies : a collection of PDPackageDependency (actually the nodes of a graph dependency, from a source PDPackage to a target PDPackage)	- included : says if the PDPackage is included or not in the set of packages at the beginning.	- rpackage : the instance of asRPackageSet 		- inStack : useful for tarjan algorithm and cycle algorithm. It avoid stack access	- tarjanIndex and tarjanLowLink : integer for the tarjan algorithm.	- bfsParent : see cycle algorithm	- seen : says if all dependencies have been added to the Package"
"LGitCredentialsTypeEnum",""
"TreeListMorph","A SimpleHierarchicalListMorph subclass supporting alternative fonts for all items.This class is badly named and should be merged with its superclass - Stephane Ducasse"
"MCFileTreeStCypressReader","Reader for Cypress formatsee https://github.com/CampSmalltalk/Cypress"
"EmbeddedFreeTypeFontInstallerTest","An EmbeddedFreeTypeFontInstallerTest is a test class for testing the behavior of EmbeddedFreeTypeFontInstaller"
"ClyMethodCodeEditorToolMorph","I am a method source code editor.I am opened in the browser when method is selected.I am subscribed on the system changes related to my editing method.Internal Representation and Key Implementation Points.    Instance Variables	editingMethod:		<CompiledMethod>"
"IceTagAlreadyExists",""
"IRInstVarAccess","I am a bytecode accessing an instance variable. As such, I have an index."
"ClyRunTestsFromMethodsCommand","I run all selected test methods using selected test cases (runTestCases) as their implementation.I am allow browser to run inherited test method by selected class. Internal Representation and Key Implementation Points.    Instance Variables	runTestCases:		<Collection of<TestCase class>>"
"ListDialogWindow","A ListDialogWindow is a dialog window used to search an element into a list.A text field is provided to on the fly reduce the field or search"
"GLMBrickButtonStyle","I'm a style module related to the button and its componenets"
"GLMBrickLayoutProperties","A GLMBrickLayoutProperties is  a holder class of layout properties used by layout policyInstance Variables	horizontalPercent:		<Object>	marginBottom:		<Object>	marginLeft:		<Object>	marginRight:		<Object>	marginTop:		<Object>	maxHeightBlock:		<Object>	maxWidthBlock:		<Object>	minHeight:		<Object>	minWidth:		<Object>	paddingBottom:		<Object>	paddingLeft:		<Object>	paddingRight:		<Object>	paddingTop:		<Object>	verticalPercent:		<Object>horizontalPercent	- xxxxxmarginBottom	- xxxxxmarginLeft	- xxxxxmarginRight	- xxxxxmarginTop	- xxxxxmaxHeightBlock	- xxxxxmaxWidthBlock	- xxxxxminHeight	- xxxxxminWidth	- xxxxxpaddingBottom	- xxxxxpaddingLeft	- xxxxxpaddingRight	- xxxxxpaddingTop	- xxxxxverticalPercent	- xxxxx"
"ZnStreamingEntity","I am ZnStreamingEntity, a concrete HTTP Entity based on a stream.I am a ZnEntity.When a ZnStreamingEntity is created using #readFrom: its content type and length are set but no body is actually read.Instead, stream is set to a ZnLimitedReadStream that clients can/mustuse to read from.When the client is done, either all data must be read or #consumeContent must be called.A client should normally not close the stream.A ZnStreamingEntity can also be instanciated with an existing read stream.During #writeOn: this stream is copied to the output stream.Part of Zinc HTTP Components."
"HSVAColorSelectorMorph","Colour selector featuring a saturation/volume area, hue selection strip and alpha selection strip."
"ClyExpectedFailedTestMethodsQuery","I return all test methods which are marked with <expectedFailure> pragma"
"ClySubclassMOfClass1FromP2",""
"OCPragmaTest",""
"ClyDataSourceUpdateScheduler","I organize scheduled updates of data sources.Idea to always defer update of browser until current UI command will be completelly done. It ensures that browser updates will not affect general performance of basic operations which modifies system because any update will be just queued and processes in low priority process when there will be time for this.My single instance is created by ClyDataSource as shared class variable UpdateScheduler.Data sources register themselfs for updates when they receives event that items were changed: 		UpdateScheduler register: aDataSource.	 In addition actual update is executed in UI process using standart deferring logic: 	UIManager default defer: [ next runUpdate ]But this deferring is triggered from low priority process.Internal Representation and Key Implementation Points.    Instance Variables	process:		<Process>	updateQueue:		<AtomicSharedQueue>"
"AbstractStoredSettingTest","An AbstractStoredSettingTest is a test class for testing the behavior of AbstractStoredSetting"
"SystemVersion","I am responsible for maintaining what version of Pharo and the VM is running.  I also track all of the update items that have been included in the image.I'm invoked at auto start to get the latest plugins, etc.Some queries are	SystemVersion current major	SystemVersion current minor	SystemVersion current suffix	SystemVersion current	highestUpdate"
"IceTipAddPackageCommand","Command that opens a dialog to add a/many package/s into the selected repository."
"AnnotationUserExample",""
"FFIExternalReference","I represent a reference to some variable (a pointer, a memory space, an obscure structure) living in the C heap. I'm abstract, my children keep the real references.A referenced type is  some variable that lives in the C heap and is seen in Pharo as an external  reference (an ==ExternalAddress==) ."
"RBModifiesCollectionRule","Checks for remove:''s of elements inside of collection iteration methods such as do:. These can cause the do: method to break since it will walk of the end of the collection. The common fix for this problem is to copy the collection before iterating over it.For example turningaCol do: [ :each |  ... aCol remove:... ]into aCol copy do: [ :each |  ... aCol remove:... ]"
"RubPluggableTextFieldMorph","This class was introduced to ease the migration to Rubric.Thus, I''am a replacement for compatibility with old PluggableTextFieldMorph.It is still partly based on change/update.Do not use this class for new developments since it will be deprecated asap.Use RubTextFieldMorph instead"
"GLMPopupActionBrick","I am a special popup brick designed to work with GLMPopupAction"
"EpContentStringVisitor","I am an abstract superclass for some visitors that answer Strings describing EpEvent instances."
"FTColumn","I'm a column definition for a fast  table.Description ------------------ I keep an id and relevant information of my behaviour, but this behaviour is better defined in FTDataSource>>#headerTable:column: Internal Representation and Key Implementation Points.-----------------    Instance Variables	id:		An id for the column	width:		An Integer that represent the width of a column."
"KMCategory","I am a keymap category.  I represent a set of keymaps that can be attached to a morph, so morphs can share my keymaps."
"SettingFilter","A SettingFilter is a filter wich is used by a SettingBrowser in order to select which nodes of the setting trees are to be shown. A SettingFilter subclass must redefine the #keepHandler: method which return true if the argument handler is to be kept.Instance Variables"
"FinderExampleClassNode","A FinderExampleClassNode is a node used by the FinderUI's tree representing the Class for the method deducedfrom an examples (by MethodFinder)"
"GTSpecPreDebugWindow","I implement a pre debug window for GTDebugger. I reuse the debug window for the SpecDebugger and adapt the way stack frames are obtained from the debugger.I receive a instance to a full debugger that I'll open if the user continues debugging."
"CalendarMorph","A CalendarMorph is a standalone morph that represents a selectable monthly calendar.CalendarMorph openOn: Date todayInstance Variables	date:		<Date>	days:		<OrderedCollection of: <CalendarChooserDay>>	touchPoints:	<Dictionary key: <Rectangle> value: <Symbol>>date	- the currently selected date (always within the current month)days	- all the days that are visible, including days from the previous month, the current month, and the next monthtouchPoints	- extra hotspots that are touch-responsive (key rectangle is in world coordinates)"
"ImportingResourceHelp","A help topic on how to import resources into the image"
"OSTouchOneFingerHoldDetector","I am the detector of the hold with one finger.I send these event back to my handler: 	- OSTouchOneFingerHoldEvent"
"MetacelloScriptImageExecutor",""
"Bezier2Segment","This class represents a quadratic bezier segment between two pointsInstance variables:	via		<Point>	The additional control point (OFF the curve)"
"Mutex","A Mutex is a light-weight MUTual EXclusion object being used when two or more processes need to access a shared resource concurrently. A Mutex grants ownership to a single process and will suspend any other process trying to aquire the mutex while in use. Waiting processes are granted access to the mutex in the order the access was requested.Instance variables:	semaphore	<Semaphore>		The (primitive) semaphore used for synchronization.	owner		<Process>		The process owning the mutex."
"TSetArithmetic","A trait for test purposes"
"EpLostChangesDetector","I check on image startup that there is lost logs for current image and I open browser on it to show changes to user.I super usefull for recovering lost changes after image crash"
"GLMPort","GLMPort represents the abstract port. Any port has a name. Subclasses can provide further semantics to a port."
"T2TraitWithAlias",""
"RBSendsMethodDictRule","Nobody should directly access the method dictionary. It is purely an implementation artefact that we use one dictionary and it might change in the future."
"MCDefinition","A MCDefinition is the root of inheritance of entities representing code. "
"PackageMethodCategoryNodeExample","Example for a package method node"
"FreeTypeCacheConstants","Constants for the FreeType cache"
"ClyEnvironmentUpdateStrategy","I am a root strategy which subclasses defines how environment should be updated due to accepted change events.Subclasses should implement two methods:- announceChangesOf: aQueryResulthere subclasses should define what to do with given change- publishCollectedChangeshere subclasses can publish all collected changes at once when their logic is to collect events instead of instant announcing them"
"HookGeneratorForVariables","I am a version of the HookGenerator that is used when generating hooks for  first class variables like Globals, ClassVariables, Slots and TemporaryVariables "
"PoolDefiner2","A pool used for testing purposes"
"PSMCMergeMorph","A PSMCMergeMorph is a graphical tool to navigate changes and select changes in case of conflicts."
"LocalRecursionStopperTest","SUnit tests for class  LocalRecursionStopper"
"IceTipCheckoutNewBranchPanel","I'm a panel to create a new local branch "
"MetacelloScriptEnsureProjectLoadedForDevelopment",""
"ByteArray","I represent an ArrayedCollection whose elements are integers between 0 and 255."
"GLMSpecPresentation","This presentation offers a means to embed a Spec user interface within Glamour. "
"NECModel","I'm an abstract class that stores the entries to be completed."
"FTColumnResizerMorph","A resizer morph for a fast table.I can be added to any place but in current implementation I'm used in table headers (because would be expensive to add to each cell)."
"MalBfsNode",""
"ContextCannotReturn","This exception is thrown when a value is returned from a context, but the context is dead and the return can not be done."
"TarArchiveMember","A member of a TAR archive"
"T2TraitMCDefinitions","Unit test for correct handling of MC class definitions"
"DelayMillisecondTickerSimulation","To facilitate unit tests without interferring with the live VM interface,I simulate the VM code for the millisecond primitives."
"OCBytecodeDecompilerExamplesTest",""
"SpecLayoutAddWithSpec","A SpecLayoutAddWithSpec is an action representing an add in the spec layout with a spec selector precised"
"SourceFileArrayTest","This test documents the source pointer address conversion methods for ExpandedSourceFileArray.The available address space for source pointers in a traditional CompiledMethod is 16r1000000 through 16r4FFFFFF. StandardSourceFileArray maps positions in the sources file to address range 16r1000000 through 16r1FFFFFF and 16r3000000 through 16r3FFFFFF, and positions in the changes file to address range 16r2000000 through 16r2FFFFFF and 16r4000000 through 16r4FFFFFF. This permits a maximum file size of 16r2000000 (32MB) for both the sources file and the changes file. ExpandedSourceFileArray extends the source pointer address space using bit 25 of the source pointer to identify the external sources and changes files, with the remaining high order bits treated as address extension. This limits the number of external file references to two (the traditional sources and changes files). If additional external file references are needed in the future, some higher order bits in the source pointer address space should be allocated for that purpose.The use of bit 25 of the source pointer for file references permits backward compatibility with StandardSourceFileArray, with essentially unlimited address space expansion for the sources and changes files."
"MalNodeWithNext","A basic node able to host the model and to represent edges with no additional class.Edges are navigable in one way through the nextNodes instance variable."
"LazyTabPageChanged",""
"IceOperationMerge","I represent a merge between two operations. I know if I'm a conflict or not, if I have changes, and the user can use me to resolve a conflict."
"SycTagMethodCommand","I am a command to classify given methods with given tag.Internal Representation and Key Implementation Points.    Instance Variables	targetTag:		<Symbol>"
"Duration","I represent a duration of time. I have nanosecond precision"
"GLMBrick","A GLMBrick is the superclass of all Bricks. It subclasses cleaned morph with deleted layouting mechanismInstance Variables	brickBounds:		<GLMBrickBounds>	ports:		<Dictionary>brickBounds	- wrapper object for brick geometry.  		holds margin, padding properties.,		responsible for calculation of outer/inner bounds depending on margin/paddingports	- dictionary of phlow bindings. is not implemented yet"
"TSizeTest","A trait for test purposes"
"DoubleByteArray","DoubleByteArrays store 16-bit unsigned Integer values."
"SystemNavigation","I support the navigation of the system. I act as a facade but as I could require some state or different way of navigating the system all my behavior are on the instance side.I should (it is not complety done yet) be parametrized by an environment (aSystemDictionary) that scopes my queries."
"ZnRequestLineTests",""
"OSWindowMinimizedEvent","I am delivered when the window got minimized."
"ManifestFileSystemMemory","This package contains a memory file system part of Pharo's FileSystem manager. It allow to emulate a file system directly into the memory of the computer. This memory file system can be used during tests for two reasons:- To avoid to write temporary files (it will also help when Pharo is stored in a read only environment)- To speed up the tests executionsA documentation of this library is available in the Deep Into Pharo book, «Chapter 3: Files with FileSystem»."
"RBUnoptimizedToDoRule","Checks for inefficient uses of to:do: that create an unnecessary Interval instance.( 1 to: 10 ) do: aBlockcan be more efficiently expressed as 1 to: 10 do: aBlock"
"DateParser","Read a Date from the stream based on the pattern which can include the tokens:			y = A year with 1 to n digits (after 2000)		yy = A year with 2 digits (after 2000)		yyyy = A year with 4 digits		m = A month with 1 or 2 digits		mm = A month with 2 digits		d = A day with 1 or 2 digits		dd = A day with 2 digits			...and any other Strings inbetween. Representing $y, $m and $d is done using	\y, \m and \d and slash itself with \\. Simple example patterns:		'yyyy-mm-dd'		'yyyymmdd'		'yy.mm.dd'		'y-m-d'"
"ClyInstanceSideScope","I represent instance side of classes"
"FLCluster","I represent a cluster of objects grouped by some specific similarity. I know how to serialize and materialize them all together."
"RBRenameClassVariableChange","I am a refactory change for a class variable renaming. The RBRefactory api is implemented in my super class, I just definethe concrete ""classvariable"" renaming."
"IceTipBranchFilter",""
"FFIExternalUnion","I'm an extension of FFIExternalStructure.I put all of my fields at the same offset, which is zero."
"TestStartupUIManager","I'm an startup UI manager used for test purposes.I provide a way to not use the default session manager."
"PharoIssue","I represent a Pharo development issue.Responsibilities:- create text templates (e.g. for the mailing list or issue tracker comments) for common events like issue creation and slice submission- communicate with the issue trackerCollaborators:- ZnClient - my link to the issue tracker- MCSliceInfo - I can get you one if you need itPublic API and Key Messages:Most of my behavior is illustrated in my tests. The noticable exception are my text template creation messages, the testing of which seemed to hurt as much in duplication as it added in QA."
"LGitPathSpecMatchList",""
"SugsBreakConditionSuggestion","This class defines AST node menus for conditional  breakpoints"
"EpPlatform","My API has methods whose implementation might depend on the Pharo image version."
"TabsExampleTest",""
"MetacelloScriptingError",""
"FFITypeArrayTests","Tests for FFITypeArray"
"GLMPagerScrollButtonBrick",""
"ZnUtilsTests",""
"STONWritePrettyPrinterReadTests","STONWritePrettyPrinterReadTests tests pretty printed serialization followed by materialization."
"ReduceTest","SUnit tests for reducing collections"
"MethodQueryTest","Unit tests for queries on methods"
"MCTraitDefinition","A MCTraitDefinition represents a trait."
"FFITestStructure4Int64Structure",""
"RBParseTreeRewriter","ParseTreeRewriter walks over and transforms its RBProgramNode (tree). If the tree is modified, then answer is set to true, and the modified tree can be retrieved by the #tree method.Here is a little script to rewrite a self halt into self dormantHalt. 	| rewriter node |	rewriter := RBParseTreeRewriter new.	rewriter replace: 'self halt' with: 'self dormatHalt'.	node := (ProtoObjectTest>>#testIfNil) parseTree.	rewriter executeTree: node.	^ node formattedCodeNote how do we get the transformed code. Have a look at the users of deprecated:		deprecated: 'Please use #isPinnedInMemory instead'		transformWith: '`@receiver isPinned' -> '`@receiver isPinnedInMemory'.You can also have a look at the ParseTreeRewriterTest classInstance Variables:	tree	<RBProgramNode>	the parse tree we're transforming				"
"SDL_SysWMinfo_InfoUnion","I am union inside of SDL_SysWMinfo used to hold platform specific information about a window."
"RBRenameInstanceVariableRefactoring","I am a refactoring for rename instance variables.I rename the instance variable in the class definition, in all methods refering to this variable and rename the old accessors.My precondition verifies that the new variable is valid and not yet used in the whole class hierarchy."
"RBRemoveMethodChange","I am a refactoring change for a method removement. I know about the class of this method, the selector and whether it is from the class or instance side. On removing this method (selector) will be removed from the class."
"LazyTabGroupMorph",""
"GLMCompositeBrick","I'm a composite brick that provides an api of creating different kind of scriptabe presentations like:  - list - pharoMethod - table - tree"
"ClySortSystemItemFunction","I implement sorting of different kind of system items like methods and classes.First I check the type of given items using #calypsoEnvironmentType. If items are belongs to same type I use their #defaultSortFunctionForCalypso to sort them.In addition I cache all created sort functions.And when items are belongs to the different type I compare this types using #itemsSortOrderForCalypso number.Look at #collate:with: method for details Internal Representation and Key Implementation Points.    Instance Variables	functionsForTypes:		<Dictionary<Class, SortFunction>>"
"CmdCommandExampleInMultipleMenuGroups",""
"RGBSlidersTest",""
"SycAddMessageArgumentCommand","I am a command to add new argument into the message.Internal Representation and Key Implementation Points.    Instance Variables	argumentDefaultValue:		<Object>	newSelector:		<Symbol>"
"AuthorTest","SUnit tests for Author"
"SessionManagerRegistrationOrderTest","SUnit tests for registration order on the Pharo session manager"
"PharoBootstrapRule","A package from the bootstrap layer (minimal image) is depending on an external package."
"GlobalIdentifierWithFuel","SUnit tests for GlobalIdentifier with FUEL"
"MCConfigurationBrowser","A MCConfigurationBrowser displays an MCConfiguration, and edits the configuration to add or remove package dependencies and repository specifications. It allows a configuration to be stored in a repository or posted to an update stream."
"OmSessionStore","I wrap a file store that is renewed each time either the Smalltalk session changes, among others (check #needsReset)."
"DelayMicrosecondUncappedTicker","In contrast to the traditional ticker (DelayMicrosecondTicker) I am not capped at a maximum sleep of 1 second, making a quieter idle image.When there is no scheduled delay, the VM will sleep indefinitely until woken by another mechanism (which is what?)"
"RBAbstractCondition","I am the abstract base class of refactoring conditions.Conditions are used by refactoring operation for checking preconditions before applying the refactoring.I implement some common behavior for error handling - errorMacro.And to combine conditions with boolean operatiosn (and/or/not).Most of the condition checking behavior is implemented on my subclass RBCondition. Instances of RBConditions are created by factory methods on its class side."
"ValueLink","A ValueLink is a Link containing a Value.Adding an object to a LinkedList which is not a Link will create a ValueLink containing that object.value - The object this link points to."
"RFGlobalRead","I model the read from a global variable"
"ColorFillStyle","Simple fillstyle that draws a color at the specified origin with option extent."
"OSTouchSwipeEvent","Superclass of all swipes events"
"ClyBrowserStateTestCase",""
"ZnCommonLogFormat","I am ZnCommonLogFormat, I can output ZnServerTransactionEvent objects using Apache Common Log Format (CLF).https://en.wikipedia.org/wiki/Common_Log_Formathttps://httpd.apache.org/docs/trunk/logs.html#common| formatter |formatter := ZnCommonLogFormat new.ZnLogEvent announcer   when: ZnServerTransactionEvent   do: [ :event |     formatter format: event on: Transcript.    Transcript cr; endEntry ]."
"Win32Platform","I am a an object representing a Windows platform (32bits). Use myself to access platform specific features.Please keep me polymorphic to the the other platform objects.To get the current platform, you can evaluate:OSPlatform current."
"IRReturnLiteral","specific node when returning a constant"
"MCWorkingCopyCreated","A MCWorkingCopyCreated is a announcement raised when a new MCWorkingCopy is created"
"ZipDirectoryMember","ZipFileMember instances represent directories inside ZipArchives.They don't do much other than hold names and permissions (and extra fields).You can add files in subdirectories to a ZipArchive without using any ZipDirectoryMembers."
"RBMoveVariableDefinitionRefactoring","I am a refactoring for moving the definition of a variable to the block/scope where it is used.For a method temporary variable declared but not initialized in the method scope and only used within a block, the definition can be moved to the block using this variable."
"AbstractKeymappingTest","This is an abstract class for test cases for the Keymapping project. It includes some utility methods to make it simpler to test different key events.When tests are run this class will ensure that the current Keymap global repository is swiched out with a dummy one to not interfer with the running system.  (see #setUp/#tearDown)."
"MetacelloPackageSpecTestCase",""
"LabelledDropListTest",""
"MetacelloMCValueHolderSpecTestCase",""
"ProtocolRemoved","This class is not used, but should be used when we hook into the addition and removal of protocols. Right now, we only get ClassReorganizedAnnouncement"
"IceIndex","I represent an index of temporary stored files for later commit. I'm used internally, usually people should not use me.My main responsibility is to store temporary changes and commit them.However, I'm an abstract class, check my subclasses for more concrete information."
"GTWhereIsDebugAction","This debugger action is responsible for reselecting the code corresponding with the current instruction to be executed."
"HEMethod","I represent a serialized method.I store all the information needed to regenerate the method in the target image.I store this information and all the bytecode as a byteArray.Also I store all the literals that have been transformed to HEExportedLiteral's subclassesI have:   - the name   - the class name   - the protocol   - the name of the encoderClass    - the number of arguments (useful not to parse the selector, in the target system).   - the number of temporaries   - if it is a primitive.  - the bytecode  - the literals.Check the methods #readFrom: and #writeInto: for details of how it is written in the file."
"GLMInteractableBrickRenderer","A GLMInteractableBrickRenderer is more advanced Brick renderer, that is used in all interactable Bricks to allow on-fly change of background color or image"
"GLMApproximateScrollbarBrick","A GLMApproximateScrollbarBrick can be used only with GLMScrollListBrick or with other lists that uses adaptors.Approximates the height of band depending on average height of all visible items."
"ClyShowCritiqueDetailsCommand","I am a command to show critique details.I just show the dialog with critique description and title"
"GLMPresentationsChanged","A GLMPresentationsChanged is announced by the pane when the set of presentations changes."
"MethodChangeRecord","MethodChangeRecords are used to record method changes.  Here is a simple summary of the relationship between the changeType symbol and the recording of prior state			|	prior == nil			|	prior not nil		---------	|----------------------------	|--------------------	add		|	add					|	change	---------	|----------------------------	|--------------------	remove	|	addedThenRemoved	|	removeStructure:changeType			symbol -- as summarized abovecurrentMethod	method				This is the current version of the method.				It can be used to assert this change upon entry to a layer. infoFromRemoval -- an array of size 2.				The first element is the source index of the last version of the method.				The second element is the category in which it was defined, so it				can be put back there if re-accepted from a version browser.Note that the above states each have an associated revoke action:	add --> remove	change --> change back	remove --> add back	addedThenRemoved --> no changeHowever all of these are accomplished trivially by restoring the original method dictionary."
"MorphTreeResizerMorph","A resizer morph for a morphic based tree"
"GLMOSWindowWorldMorph","I am an OSWindow world morph that is used by Glamour to display its content in a external OSWindow.Usage examples:GTInspector new openInExternalWindowOn: 3.3 inspectInExternalWindow."
"MorphicEventHandler","I'm the class in charge of handling the subscriptions to events such as clicks or key presses.I'm a provisory solution while my clients are fixed and I can be replaced by announcements"
"ClassAdded","This announcement will be emitted when a class or a trait is added, using:	=> Trait >> named: (the notification is done in Trait >> named:uses:category:env:)	=> Class >> subclass:	"
"WorldMenuHelp","Provide help topic for world menu"
"MCVersionSorter","Sort versions"
"ZnCodePointReadStream","I am ZnCodePointReadStream.I wrap another binary ReadStream and use a ZnCharacerEncoder to allow Integer code points to be read.I am not positionable, but I do allow a one code point peek using a one code point internal buffer.Part of Zinc HTTP Components."
"CircularHierarchyError","I am signaled if a new class introduces a circular class hierarchy."
"CacheWeight","I  am CacheWeight.I keep track of the weight of a cache.The weight of a cache is the sum of the weight of all values currently present. The simplest and default weight calculation returns a constant 1 for each value, effectively counting the number of values.The default maximum is 16.Using compute, a selector or block, applied to a value, different calculation can be made. Consider for example #sizeInMemory."
"ClyFilterQueryTest",""
"IceUnknownVersionWorkingCopy",""
"SelfEvaluatingObjectTest","SUnit tests for self evaluting objects "
"SDL_QuitEvent","SDL2 library structure"
"GTInspectorVariableNode","I model an attribute of an object in the GTInspector. I am used in the Raw presentation of an Object. My main responsibility is to associate a variable name of a host object with its value. Public API and Key Messages- hostObject return the object (host) holding the  attribute that I represent;- label return a string label of the attribute, which may be an instance variable name or a dynamically generated name for dynamic attributes;- value return the value  of the attribute; catches any errors and returns nil;- rawValue return the value of the attribute without any catch for errors;- key return an object used as unique key to identify an attribute, it may be an integer for indexed variables or a string for dynamic ones. Internal Representation and Key Implementation Points.    Instance Variables	hostObject:		<Object>"
"RBRefactoringExamplesHelp","This chapter of the refactoring help book is about how to manually use the refactoring operations."
"ComputedSlot","This is an example for a virtual slot that computes its value. It stores a block which is evaluated with the object as a parameter to calculate the valueon read. Writing is ignored.e.g. make a class lile this:Object subclass: #TT	slots: { #i => ComputedSlot with: [ :o | o class methods size ] }	classVariables: {  }	category: 'TT'"
"CurrentExecutionEnvironment","I am container for special meta object ExecutionEnvironment which represent current execution environment for active process.Look at ExecutionEnvironment for details"
"Finder","I'm the finderUI model in the MVC pattern.I'm compute the search string and I construct a resultDictionary.Then I throw events everywhere and my views are redrawn."
"ZnCrPortableWriteStreamTests",""
"OkCancelToolbar","An OkCancelToolbar is a model for a basic Ok-Cancel toolbar"
"ShSuperclassChangedDetector","I detect if there is a change in the superclass"
"ClySampleInstanceScript","I represent the action of the performed on class side methods marked with pragma <sampleInstance>.After method execution I open an inspector on the result.Note that if your method is named [[[  example1	<sampleInstance>	^ 42]]]It will still open an inspector even if the browser consider them as example (see comments of the ClyExampleScript class)"
"GLMPopperNotificationStrategy","I opened a new popper window that displays the given notification. (I do not alter the content of the text editor.)"
"GoferCleanup","Cleanup working copies"
"StackTest","SUnit tests for stacks"
"ClyActivityAnimationIconMorph","I implement rotated icon anomation.I use TabMorph animation icons (#refreshIcon1, #refreshIcon2, ..) to switch rotating splines at every UI step. Internal Representation and Key Implementation Points.    Instance Variables	progress:		<Integer>	progressIconMorph:		<ImageMorph>"
"IceNonConflictingOperation","I reprensent a non-conflict between two operations that can be solved automatically. The user can still override the automatic choice using #selectLeft and #selectRight."
"GTEventDelivery","I know how to deliver usage and diagnostic data to a remote server.I start and maintain a process for sending data on a regular inteval (#standardDuration).I maintain a queue with the data that needs to be send. If a delivert fails I re-add the data to the queue.Data that is added to my queue must be packaged in an object of type GTEventBundle.  I use the url specified by the bundle.I send the recorder the message #pack to notify it that I enter the delivery cycle.Public API and Key Messages- #activate initializes the delivery process; clients must call this method; it's not called automatically on object creation. - #deliveryCycle implements  the main logic of the delivery process"
"WeakFinalizationList","IMPORTANT!!!This class is a special object, recognized by VM.Its only purpose is to a) identify a special kind of objects who usually having a weak references but  also having an instance of me held by first non-weak fixed slot (instance variable).b) a 'first' instance variable points to the head of a list of items, reported by VM which has weak references which became garbage during last garbage collectionAt my class side, there are some public behavior, which is used by finalization process to detect if VM supports new finalization scheme or should use the old one.Weak registry using #hasNewFinalization for switching to correct finalization logic,depending on VM it currently runs on."
"InexactFloatPrintPolicy","I am InexactFloatPrintPolicy.Through FloatPrintPolicy and double dispatch I force Float>>#printOn:base: to dynamically use the faster but potentially less accurate way to print Floats using Float>>#absPrintOn:base:"
"ClyItemStringFilter","I am a root of hierarchy of filters which use string pattern to filter objects.Concrete filter function is still responsibility of subclasses.I only define correct comparison with other filters and suitable constructors:	StringFilterClass regexPattern: aRegexString.	StringFilterClass substringPattern: aSubString	StringFilterClass pattern: aStringPattern	Internal Representation and Key Implementation Points.    Instance Variables	pattern:		<ClyStringPattern>"
"IceTipWorkingCopyContext",""
"RBDoNotSendSuperInitializeInClassSideRule","Don't send super initialize in class side because the class initialize methods of your superclass  may maintain state level shared state and it can be dangerous to automatically reinitialize it. For example, [[[  ZnServer class>>initialize	ManagedServers := IdentitySet new.	AlwaysRestart := true.	Smalltalk addToStartUpList: self.	Smalltalk addToShutDownList: self]]]"
"IceGitHubViewPullRequestCommand","I'm a command to show the pull request review browser."
"MethodAddition","I represent the addition of a method to a class.  I can produce the CompiledMethod, install it, and then notify the system that the method has been added.  This allows Monticello to implement atomic addition.  A loader can compile all classes and methods first and then install all methods only after they have been all compiled, and in a way that executes little code.ß"
"ClyManagedProject","I represent the project which is managed by concrete package system.Calypso provides infrastructure for various package management systems. Each system should implement subclass of ClyPackageManager which returns my instances created over projects in that system:	ClyManagerProject for: aConcreteSystemProject named: aString managedBy: aPackageManagerCurrently there is only Cargo implementation. But in future we can also provide Metacello support.So I was introduced for project mode in the browser. Internal Representation and Key Implementation Points.    Instance Variables	manager:		<ClyPackageManager>	name:		<String>	project:		<Object>"
"RBAddMessageSendTransformation","I am responsible for adding a message send inside a method. In this implementation, all the message send, e.g., 'variable message: (arg)' shall be described as a string. It was implemented this way to avoid having another transformation just to add the receiver as a literal node.Usage:| transformation |transformation := (RBAddMessageSendTransformation				messageSend: 'variable byteAt: 1'				inMethod: #methodBefore				inClass: #RBAddMessageSendTransformationTest)				transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- the method exists.- all accesses in the message send, e.g., receiver and arguments, are previously defined in the methodObservations about the transformation:- The transformation does not know the location on which it will place the message send. Therefore, it extracts all the accesses in the message to be added, and adds the message after all the accesses are assigned.- If there is no access, the message send will be the first statement of the method."
"ShAnonymousClassInstallerTest",""
"PharoDarkTheme","A dark theme for pharo, inspired on http://blog.jetbrains.com/blog/2013/06/11/inside-darcula-look-and-feel-an-interview-with-konstantin-bulenkov/This theme works well with the ""Dark"" text styling. You can have ""the full experience"", executing: self installFullTheme."
"ManifestMonticelloGUI","Provides the graphical user interface (UI) for Monticello source code management system"
"EpLogEntriesComment","I represent a comment to Epicea entries  performed in an EpLogBrowser."
"OSWindowAnimated","I am an animated window who interacts with the OSWindowRenderThread"
"DADependenciesHTMLPublisher","This class generates an HTML report of system dependencies in HTML format.Example:  '/tmp/report.html' asFileReference writeStreamDo: [ :stream |	 DADependenciesHTMLPublisher 		publishReportFrom: (DADependencyChecker new transitiveDependenciesOf: #Kernel)		stream: stream ]"
"RxmLookahaed","Instance holds onto a lookead which matches but does not consume anything.Instance variables:	predicate		<RxmLink>"
"LGitCommitBuilder",""
"ClyAllPackagesQuery","I return all packages from the scope"
"SelectBrowser","A simple selection browser."
"WeakOrderedCollection","I am just like an OrderedCollection except that I hold my objects weakly.In use, be aware that objects only referenced by me are not ""removed"" (like in OrderedCollection), but merely nilled. So guard against nils when iterating/accessing, and don't expect #size to represent the number of objects I hold. For more details, read my tests in WeakOrderedCollectionTest. "
"MCMockClassI",""
"RBRenameClassTransformation","Renames a class and all the references to this class as wellUsage:| transformation |transformation := (RBRenameClassTransformation				rename: #RBDummyClassToRename				to: #RBNewDummyClassName)				transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- the class must exist- the new class name should be a valid name: not a reserved name, or the name of an existing class variable in the hierarchy"
"GTSpotterExitAnnouncement",""
"TickingSpecWindow","TickingSpecWindow new openInWorld"
"UITestCase","All instances of UITestCase are skipped in headless mode."
"TabModel","This is deprecated class because the original class TabModel was renamed to TabPresenter. You should stop to use this class and modify your code to use TabPresenter."
"STONStreamWriter","STONStreamWriter helps in streaming writing STON representations.This is an abstract class."
"LGitSimilarityCallback",""
"ReSmalllintCheckerTest",""
"OCCaseOfTest",""
"Rectangle","I represent a rectangular area of the screen. Arithmetic functions take points as arguments and carry out scaling and translating operations to create new instances of me. Rectangle functions create new instances by determining intersections of rectangles with rectangles.Note 1: only rectangles parallel to reference frame (Screen) can be represented by this class.Note 2: the Rectangle is represented by two extremities of one diagonal. By convention, it must be the diagonal:	from rectangle origin (the point having smallest coordinates in reference frame),	to rectangle corner (the point having largest coordinates in reference frame).Note 3: Screen coordinates conventions are:	x is horizontal axis, zero at left border, oriented toward right;	y is vertical axis, zero at top border, oriented toward bottom.This corresponds to the latin convention for writing text from left to right and top to bottom.Note 4: the Rectangle extent is obtained by subtracting rectangle origin to rectangle corner coordinates.If this leads to a negative width (extent x coordinate) and/or a negative height (extent y coordinate), then the Rectangle is degenerated and considered empty.Instance variables:	origin	<Point> the coordinates of corner having smallest coordinates (top left in Screen coordinates)	corner	<Point> the coordinates of corner having largest coordinates (bottom right in Screen coordinates)"
"MetacelloAllowProjectDowngrade",""
"ExternalFunction","This class represents an external function called from Smalltalk. Instances of ExternalFunction can be created if the address/parameters of the function are known by some other means than loading from a shared library or compiling the appropriate primitive specification.Instance variables:	flags	<Integer>	a set of flags encoding the calling convention	args	<Array of: ExternalType>		the parameters of the functionImplementation notes:The arguments consist of an array with the first element defining the return type, the remaining arguments defining the parameters of the call."
"IceTipMergeBranchPanel","I'm a panel to peform the merge of an existing branch."
"ManifestRingChunkImporter","Manifest for deprecated Ring-Deprecated-ChunkImporter package"
"FFIExternalArrayTests","Tests for FFIExternalArray"
"DropListModel","This is deprecated class because the original class DropListModel was renamed to DropListPresenter. You should stop to use this class and modify your code to use DropListPresenter."
"GLMBrickStructureTrait","I declare api and logic to work with structure of a Brick as adding, removing, testing for existance and some more"
"GLMBrickTextStyle","I'm a style module related to a string brick"
"TextPresenterTest",""
"UnixClipboard","The Unix vm does not do line-ending conversion, thus this subclass which specifies we convert CR's to LF's when pasting to it"
"SDL_MouseMotionEvent","SDL2 library structure"
"RBDefineBasicCheckRule","Each rule should define a #basicCheck: method which accepts an entity to be validated by the rule.If the entity violates the rule, method should ruturn ""true"", otherwise - ""false"".It is recommended to reuse #basicCheck: functionality in #checkClass: and #checkMethod:"
"EpSessionStart","When an image is launched, a session starts. I represent the start of a session."
"FLFuelCommandLineHandler","I handle .fuel files that are passed as arguments when starting the image. Usage: fuel [save] [quit] <fuelFile> 	save    save the image after loading <fuelFile>	quit    Don't save the image and directly quit the image fater loading <fuelFile>	Documentation:This command will load the <fuelFile> and materialize/install it's contents. If no argument is specified the image continues running with the loaded contents.Example:	#Load a fuel file and save and quit the image with the contents:	pharo Pharo.image save quit path/to/foo.fuel	#Load the contents of foo.fuel and save the image, but continue running:	pharo Pharo.image save path/to/foo.fuel		#Load the contents of foo.fuel and continue running without saving:	pharo Pharo.image path/to/foo.fuel"
