"class","comment"
"SugsStoresIntoInstVar","I know how to find stores into for an instance var"
"ManifestRingCoreKernel","Manifest for DEPRECATED package of Ring"
"FailingTestResourceTestCase","SUnit tests for failing test resources"
"IceTipAddSSHCredentialsModel","I implement the dialog to add SSH credentials."
"OCThisContextVariable","I model thisContext variables"
"EpClassChange","I represent a change in the definition of a class."
"OSWindowExposeEvent","I am delivered when part (or whole) window are exposed on the desktop and needs refreshing."
"FillStyleBorder","BorderStyle supporting general (potentially composite) fillstyles. "
"RGContainerTest","SUnit tests for container"
"IceTipAbstractCredentialCommand","I am the common class of all the commands over an specific credential."
"ClyClassContextOfFullBrowser","I am a context of selected classes in full browser"
"FFIExternalEnumerationTests","Tests for external enumerations"
"FLPrimitiveCluster","I am a cluster that serializes and materializes interacting directly with the stream."
"TApplyingOnClassSide","Kernel trait for applying on the class side"
"InlineTextDiffBuilder","Line based Text diff builder"
"WatchpointWindow","I am a minimal user interface that shows the last entries in the watchpoint history."
"GLMPortReference","A PortReference is used in Transmissions to bahavior that is specific to a Transmission instance."
"RPackageTestCase","Common superclass for RPackage related tests"
"ClyClassWithFlags","I am example class which has methods with flag"
"MCWorkingHistoryBrowser","Browser for working history"
"WeakIdentityValueDictionaryTests","SUnit tests for WeakIdentityValueDictionaty"
"AndreasSystemProfilerTest","SUnit tests for AndreasSystemProfiler"
"EpHelp","Help for Epicea project."
"TIndexAccess","A trait for test purposes"
"EmptyLayout","Empty top-level layout used to delimit the layout chains."
"FLContextSerializationTest","SUnit tests for fuel serialization of methods contexts"
"ClassTagAdded","I am announced when new class tag is added into package"
"OSWindowMoveEvent","I am delivered when window moved by user or OS/window manager."
"MCClassDefinition","A MCClassDefinition represents a class."
"ZnEndianessReadWriteStream","I am a stream decorator that knows how to read and write little endian numbers from my underlying stream."
"FTOutline","I am the FT_Outline mapping."
"RFASTTranslator","subclass of Opal that takes links into account"
"EpBehaviorNameChange","I represent a rename of a class or a trait."
"SugsDeprecateMethod","I know how to deprecate method."
"PreorderGuideTest","SUnit tests for class PreorderGuide"
"OSTouchRotationEvent","Superclass of all rotation events"
"FLSerializationError","I represent an error happened during serialization."
"LockableTabMorph","I am a tab which can be locked/unlocked with according action and icon"
"ExampleForTest12","An example class at level 2 (indirectly below Object) used for testing class hierarchy"
"FindReplaceService","Model for a find and replace service in editors"
"FastTablePresenter","An FastTablePresenter is a spec presenter for a FastTable"
"PrivacyChangedAnnoucement","I announce  changes on Privacy settings in SystemAnnouncer uniqueInstance."
"HelpBrowserTest","SUnit tests for the help browser"
"IceTipGitHubRepositoryPanel","I'm a presenter to define a new remote repository from a github repository (owner/project)."
"IdentityTransform","Identity transformation"
"EpLogBrowserOperationVisitor","I am an abstract superclass useful for visitors of EpLogBrowserOperation."
"FLPositive64SmallIntegerCluster","unsigned, 64-bit integer"
"PharoSyntaxTutorialTest","SUnit tests for PharoSyntaxTutorial"
"ClySortMethodByPackageFunction","See comment of my collate:with: method"
"ClyCritiqueMenuItemMorph","I simulate the functionality of MenuItemMorph while providing more sophisticated visualization for rubric annotations "
"GLMMorphicPagerRenderer","A GLMMorphicPagerRenderer is xxxxxxxxx."
"StrikeFontStoredSetting","I am responsible for storing information about StrikeFont objects."
"FLSingletonMockEnforced","A test mock where a new instance is enforced"
"GoferMerge","Merge work"
"RBAddClassTraitChange","I am a refactoring change for a class trait  addition, the meta side of a trait definition."
"ManifestCollectionsStrings","Contains String, ByteString, Symbol, ByteSymbol, WideSymbol and WideString"
"MCReader","Common superclass for Monticello readers"
"RFNewValueReification","reify newValue"
"EpBehaviorChange","I represent a change in a class or a trait."
"AllocationTest","Test originally from Andreas Raab"
"TickSelectionCheckboxButtonMorph","A TickSelectionCheckboxButtonMorph is the button hidden into the TickSelectionCheckboxMorph"
"ManifestFiles","Includes file and directory handling as well as file streams"
"MCVersionLoaderStopped","Announcement sent when a Version has finished loading"
"ExampleForTest11","An example class at level 2 (indirectly below Object) used for testing class hierarchy"
"NECVarTypeGuesser","I'm an InstructionClient that tries to guess the type of a given instance variable name of a class. "
"SpecDemoCheckboxesPage","Demo page for SpecDemoCheckboxesPresenter"
"WideCharacterSetTest","WideCharacterSetTest holds tests for WideCharacterSet"
"RbScriptingSetBeforeModel","You have to call scripting methods after #model: or it will not work"
"FFICompilerPluginTests","Tests for FFICompilerPlugin"
"MorphicImageAdapter","I am the bridge between an ImagePresenter and a AlphaImageMorph"
"TAddForUniquenessTest","A trait for test purposes"
"AnimationSettings","Animation settings"
"RFReceiverReification","I reify the receiver of a Message or a method"
"GLMPopupBrick","I am a popup with an action button hint text"
"RGNamespace","A namespace is a container that in addition to managing classes and methods, it also knows how to treat pools and global variables"
"SDL_Version","A structure that contains information about the version of SDL in use. "
"DateAndTimeTest","SUnit tests for date and time"
"EpMethodRemoval","I represent a removal of a method in a class or a trait."
"RubSmalltalkCodeMode","I represent the mode to use for editing smalltalk code"
"ManifestSystemLocalization","Localization support"
"ManifestCollectionsSupport","Some basic classes used in collections: Link, Associtation, Weak*, CharacterSet, SetElement, etc."
"ClySugsMethodContext","I provide compatibility of ClyMethodEditor with suggestions menu"
"IceGitHubBranchSelectCommand","This command represent the commands with submenus to select remotes"
"NNavDirectionParent","I'm the one who knows how to navigate going to the parent node."
"RubPrimarySelectionUpdatedInModel","I am raised when the selection changes in the model side"
"GTDebuggerSystemSettings","I register settings only needed for GTDebugger."
"NavigationHistory","I act as a web browser history"
"Model","Provides optimized model support"
"MorphTreeColumn","A column in a morphic based tree"
"KMKeymapTest","SUnit tests for the key map"
"RBPharoBootstrapRule","I check that packages constituing the Pharo Bootstrap do not depend on any other package."
"AbstractEnumerationVisitorTest","SUnit tests for AbstractEnumerationVisitor"
"RePatternCodeRule","An abstract class containing common tools for match and rewrite rules"
"RFSenderReification","I reify the sender for message sends and methods"
"ClyClassSideBoldTableDecorator","I decorate table with bold font for method groups and methods when full browser shows the class side"
"RBSearchingLiteralRule","Checks for repeated literal equalitity tests that should rather be implemented as a search in a literal collection."
"FLTraitSerializationTest","I have the common behavior for testing trait serialization."
"RBIfTrueReturnsRule","Checks for common ifTrue: returns that could be simplified using a boolean expression."
"ClyOverriddenMethodTag","I mark overridden methods which are overridden by any of subclasses"
"IceTipAction","I'm like a lightweight command, used in general for apply concrete actions. "
"GTBrowseMethodDebuggerAction","I am a debugging action for browsing the currently selected class."
"EpBehaviorCommentChange","I represent a change in the comment of a class or a trait."
"SmallDictionaryTest","SUnit tests for small dictionaries"
"TimeTest","This is the unit test for the class Time."
"ClySpotterModel","I'm a model to collect options for ""spotter navigation"" mode in a full browser."
"MD5Test","SUnit tests for MD5"
"FIFOQueueTests","SUnit tests for FIFO queues"
"EpProtocolChange","I represent a change in the protocols of a class."
"KeyNotFound","I am KeyNotFound, an exception indicating that a key was not found in a Dictionary."
"PackageNodeExample","Example for a pakage node"
"LargeNegativeInteger","Just like LargePositiveInteger, but represents a negative number."
"RPackageRenamed","I am a public announcement sent when a new RPackage is renamed"
"ProportionalLayout","I represent a layout that places all children of some morph in their given LayoutFrame."
"GRTemporaryNeitherReadNorWrittenRule","There is something wrong in the method as you have variables that are either nor read or not written (or both)."
"SparseLargeArray","A version of SparseLargeTable that does not populate its bins until a value other than the default is stored.!"
"GLMLipsumWithSegmentsExample","self new open"
"OSTouchGestureNeedingThresholdDetector","I am a gesture detector for gestures who has to travel a certain distance before being detected"
"TOccurrencesTest","A trait for test purposes"
"ShAbstractClassBuilderTest","Abstract Test class for the Shift Class Builder tests"
"GTSpotterEventCollectorTest","A GTSpotterEventCollectorTest is a test class for testing the behavior of GTSpotterEventCollector"
"FinderClassNode","A FinderClassNode is a node used by the FinderUI's tree representing a Class"
"RBAddMetaclassChange","I am a refactoring change for the class side of a class addition."
"LazyClassListExample","LazyClassListExample new openOn: Object"
"FFITestStructureByPlatform","A structure for test purposes"
"OSTouchThreeFingersScrollEndEvent","Three fingers finished to scroll"
"OSTouchOneFingerHoldEvent","One finger is down and has not moved on the screen"
"BehaviorTest","SUnit tests for Behavior"
"WeakRegistryTest","A trait for test purposes"
"SDL2","A bunch of functions in a single class for accessing SDL2 interface"
"AdditionalMethodStateTest","SUnit tests for AdditionalMethodState"
"ColorChooserMorph","ColorPresenter that opens a colour selector when clicked."
"ShNoChangesInClass","This notification is raised if there is no changes in a class when invoked the class builder."
"SDL_MouseButtonEvent","SDL2 library structure"
"FLGlobalCluster","I am a cluster for objects that are reachables from Smalltalk global dictionary."
"EyeMethodContextInspector","I am an eye inspector specified for MethodContext"
"MCMockAPoolDictionary","Mocking a pool"
"ZipWriteStreamTests","Unit tests for ZipWriteStream"
"ClyExplicitAbstractClassExample","I am example of a class which is explicitly definined as abstract by overrideing class side method #isAbstract"
"TDictionaryImplementationTest","A trait for test purposes"
"ReSettings","i have settings for QA recording functions"
"IceTipRemoveFromRepositoryPackageCommand","Command that removes a package from the repository, without removing it from the system."
"CannotDeleteFileException","Notfify when not able to delete"
"Abort","Notify to abort a task"
"RenrakuRuleCreationHelp","Each rule has a few fundamental features to implement in this book with will walk through all the steps of rule creation"
"CallbackForWin64X64","A CallbackForWin64X64 is a callback for platforms with x64/x86_64 processors using the Win64 ABI."
"ManifestNetworkUUID","A package providing Universally Unique Identifiers (UUID) following RFC4122."
"RBRefactoringClassesHelp","All exising RBRefactorings "
"OmSessionStoreUpdated","I am announced when a OmSessionStore updated its current #store."
"FLSmallIntegerCluster","I don't have so much sense as a class."
"IceNothingToCommit","I indicate when there is nothing to commit (and you tried to do it)"
"SortFunctionTest","Unit test for sort functions"
"MCSubDirectoryRepositoryTest","I am not a subclass of MCRepositoryTest because my purpose was to show that a bug had been fixed and my author didn't feel like implementing all the reuirements of MCRepositoryTests"
"ReLogExceptionStrategy","Report exception as a property (critique) which can be debuged afterwards"
"FFIExternalStructurePlatformTests","Tests for external structures on platform"
"RubCancelEditRequested","I am raised when edits are cancelled in the text area"
"FormCanvas","Note that when shadowDrawing is true, shadowStipple may be either a color, for a solid shadow of the given color, or it may be a stipple used to simulate gray shading when the display cannot support alpha blending."
"RBBrowserEnvironmentsClassesHelp","Book from RBBrowserEnvironments classes"
"DADependentPackageItemDiff","A PDDependentPackageItemDiff is a object which represent a dependent package who added/modified/removed from an old analysis."
"FLSerializationTest","Superclass for serialization tests"
"LGitSafeFFICalloutMethodBuilder","I'm a variant of FFICalloutMethodBuilder  that adds a call to  #signalIfNotReady  before the actual ffi call."
"WeakKeyAssociation","I am an association holding only weakly on my key."
"ClyAbstractClassExample","I am example of class with abstract methods"
"SHStyleElement","A Shout style element"
"TonelCommentScanner","I scan comments."
"ReTestClassNotInPackageWithTestEndingName","A subclass of TestCase should be in package which name is ending with '-Tests'"
"RBLiteralArrayCharactersRule","Literal arrays containing only characters can more efficiently represented as strings."
"PointerLayout","I am the superclass for all layouts with Slots."
"ShSuperclassChangedDetector","I detect if there is a change in the superclass"
"SpaceTallyItem","I'm represent an entry in the spaceTally."
"StoredSettingsMergerTest","A StoredSettingsMergerTest is a test class for testing the behavior of StoredSettingsMerger"
"MetacelloLookupProjectSpecForLoad","**MetacelloLookupProjectSpecForLoad** ends up returning an instance of **MetacelloProjectSpecForLoad**"
"GLMBrickRubricStyle","I'm a style module related to a rubric text fields and its componenets"
"RBAddProtocolChange","RBRefactoryProtocolChange is responsible for adding a protocol in classes in a RB model"
"EpLogBrowserOperation","I represent an operation done in a EpLogBrowser."
"CannotDecompileNativeBoostCalls","Notify that a method can not be decompiled because of a native boost call"
"ReEntityCriticized","I am an event of an entity being criticized by the rules. Happens when #critics is called"
"IllegalResumeAttempt","This class is private to the EHS implementation.  An instance of it is signaled whenever an attempt is made to resume from an exception which answers false to #isResumable."
"IceTipCommitDiffModel","I'm a ""static"" diff. I represent a diff between two concrete commits."
"LGitDiffDelta","I represent the difference between two entities (e.g. two files). If one of the entities is new or deleted the ""nfiles"" field will hold be set to 1, otherwise it will be set to 2."
"ClyInheritedTraitScope","I represent class scope of all inherited traits excluding basis.I see methods of all traits which are used by my basis classes or traits"
"OSTouchActionPointerEvent","Superclass of all the pointer Event	Can be a finger or something else."
"OSWindowEventVisitor","i am a abstract visitor for handling events.. serving just to cover complete protocol, which user(s) will need to implement in order to act as an OSWindow event handler."
"ImageModel","This is deprecated class because the original class ImageModel was renamed to ImagePresenter. You should stop to use this class and modify your code to use ImagePresenter."
"TextDoIt","A doIt action on a text. When the text is clicked the text is seen as source code and evaluated"
"BISettingPreviewer","Preview to see the effect of a setting on the behavior of the pretty printer.self new openWithSpec "
"RBAddPoolVariableChange","I am a refactoring for a pool  variable addition. My changes are executed on the instance side."
"TickingWindowModel","This is deprecated class because the original class TickingWindowModel was renamed to TickingWindowPresenter. You should stop to use this class and modify your code to use TickingWindowPresenter."
"IceTipCommand","I'm a generic iceberg command. My children implement real functionality available through iceberg tools."
"IceTipItemPosition","I'm a position in a toolbar.My children define where IceTipToolbarItem instance will be located. "
"KMPragmaKeymapBuilder","I am a singleton object, subscribed to system events, to listen to the creation of methods marked with the <keymap> and keymap:> pragmas.When I listen one of those events, I reinitialize the KMRepository default instance and reload it with all declared keymaps."
"RGSlice","A slice is an arbitrary container of elements (working unit)By inheritance it knows how to treat classes and methods"
"TreeNodeModel","This is deprecated class because the original class TreeNodeModel was renamed to TreeNodePresenter. You should stop to use this class and modify your code to use TreeNodePresenter."
"ClyTraitMethodDecorator","I decorate table with special icon for methods which are defined in traits.Notice that I only apply decoration when selected class is different than method defining trait"
"TextModel","This is deprecated class because the original class TextModel was renamed to TextPresenter. You should stop to use this class and modify your code to use TextPresenter."
"RBSendsMethodDictRule","Nobody should directly access the method dictionary. It is purely an implementation artefact that we use one dictionary and it might change in the future."
"SpecPragmaCollector","A SpecPragmaCollector is a specialized PragmaCollector.Sonce we just want specs defined on class side, we do not have to check the whole system, then to restrain."
"GLMWindowRequest","I indicate to the renderer to execute a message on the window that rendered this presentation. It will only execute if the presentation is directly rendered in a window (i.e., if this is the presentation to which #openWith: was sent)"
"TraitAlias","It is kept for compatibility with extension methodsCheck the class TaAbstractComposition for the new implementation."
"DADependencyFromClass","A PDDependencyFromClass is a dependency from the class. The source class is stored in the inst var."
"ReExceptionProperty","This property represents exceptions that occured during other properties computation. This way tools can work witout interuptions, but users will be aware the there were some exceptions."
"VTermTestRunner","I am command line test runner. I run a TestSuite and outpout the progress in a terminal friendly way with XTerm characters."
"Notification","A Notification is an indication that something interesting has occurred.  If it is not handled, it will pass by without effect."
"NOCModel","I keep the state of the ocompletion algorithm. See comments of my parents for details. "
"ProtocolAdded","This class is not used, but should be used when we hook into the addition and removal of protocols. Right now, we only get ClassReorganizedAnnouncement"
"BalloonEngine","BalloonEngine is the representative for the Balloon engine inside Squeak. For most purposes it should not be used directly but via BalloonCanvas since this ensures proper initialization and is polymorphic with other canvas uses."
"RBRemoveClassChange","I am a class refactoring change for removing a class. On execution, my class will be removed from the system (all globals)."
"IceUnbornProjectReader","I create unborn projects from a commitish if it is HEAD and it does not have a '.project' file."
"FLMaterialization","I implement the algorithm for materializing an object graph on a stream. FLMaterializer known how to build instances of me."
"ClyGroupedCritiqueResult","I am critique query result which group given critiques by group name.I represent these groups with ClyConcreteCritiqueMethodGroup instances"
"HaltOnCountIconStyler","I'm in charge to style  the editor for  a ""haltOnCount:"". Clicking on it resets the counter."
"AthensCubicBezier","Cubic bezier with 4 control points encapsulation.Main purpose of this class is to keep subdivision logic in clean and separate place"
"TabManagerModel","This is deprecated class because the original class TabManagerModel was renamed to TabManagerPresenter. You should stop to use this class and modify your code to use TabManagerPresenter."
"IceSemanticVersion","I represent the semver (http://semver.org) of libgit2. Since I exist just to be able to compare versions, I'm limited (reason why I'm not promoted to a more general package)."
"OverridesDeprecatedMethodRule","The method overrided a deprecated method. This is a sign that an API has changed in an upstream project and most likely the method should override another one"
"TPointAccess","Contains methods for accessing points stored in variable word classes.Initially used by PointArray & ShortPointArray"
"NECPreferences","I control the preferences for completion framework. It is the same for NECompletion and NOCompletion (and other potential completion algorithms should be configured here too)"
"FinderPragmaMethodNode","A FinderPragmaMethodNode is a method node for a selector name found by the pragma collector. Unlike a FinderMethod node, this node is not bound to unique compiled method, it is just the selector."
"RBAddClassVariableChange","I am a refactoring for a class variable addition. My changes are executed on the instance side."
"GLMDropDownListPresentation","A GLMDropDownListPresentation is takes a list of objects and displays them in a drop down view.For an example see GLMBasicExamples>>#dropDownList"
"GTRawObjectVariablesBrowser","This is a helper browser for the Raw view in the GTInspector. It provides an overview of the slots and it offers an evaluator."
"MCCodeTool","MCCodeTool is an abstract superclass for those Monticello browsers that display code.It contains copies of the various CodeHolder methods that perform the various menu operations in the method list."
"IceGitHubPullRequestDataSource","I'm a datasource for pull request status, to be used when showing pull requests details. See IceGitHubPullRequestDetailModel"
"GTBytecodeDebuggerSession","I provide debugging actions at the level of the bytecode.I also make sure  that step over only goes over one single bytecode instruction."
"GLMAnnouncer","This is a specialization of the Announcer. The main added functionality is the ability to suspend the announcements from this announcer."
"MethodAdded","This announcement is emited when we add a method to a class or a trait using:	=> Behavior >> compile: or TraitBehavior >> compile:"
"ShSmalltalkGlobalsEnvironment","I represent the Smalltalk globals environment. I am used to generate the classes by the ShiftClassBuilder when it is using directly the Smalltalk environment."
"ZnRequestResponseHandledEvent","ZnRequestResponseHandledEvent signals that the handler (delegate) processed a request and produced a response in duration in milliseconds. This duration is thus the time taken by the application itself."
"IceTipInstallVersionCommand","Command used in the version browser, inside the code browser.This command takes the selected version and installs it (also called revert)."
"IceTipPullCommand","I'm a command to perform a pull of incomming commits. I open a pull view window."
"RBNullFormatter","A simple null formatter that just delegates  to source code and is not good when nodes are reflectively built.Will be replaced by RBSimpleFormatter"
"TraitMethodDescription","Used by Trait to encapsulates a collection of methods for one particular selector when querying for changes. According to the number and kind of those methods a provided method exists, there is a conflict or there are no provided nor conflicting methods at all. I provide the interface to query for those situations, e.g., effectiveMethod returns the provided method or the conflict marker method."
"HECharacter","I represent a character.I serialize myself as a String of a single character.When I am readed back I just read the first character of the value.My value is always a String"
"RBRemoveParameterRefactoring","I am a refactoring for removing (unused) arguments.My preconditions verify that the argument to be removed is not referenced by the methods and that the new method name isn't alread used.Any sender of the prior selector will be changed to the new.If the method contains more than one argument, I request the user to choose one of the arguments."
"SycMethodCommand","I am a base class for commands which perform operations with collection of methods.Internal Representation and Key Implementation Points.    Instance Variables	methods:		<Colletion of<CompiledMethod>>"
"GLMEmptyPopupBrick","I am a general popup widget that also visually preserves a context of a trigger element.I can opened based on opening strategy (hover, shift + hover, or double click + shift).Subclasses should implement #onCreated method to customize popup content"
"SycNewClassCreationCommand","I am a base class for commands which create new class.They all needs new class nameInternal Representation and Key Implementation Points.    Instance Variables	newClassName:		<String>"
"FFICallbackType","I'm a FFICallback type. I can handle callback type parameters.What I actually do is to pass the content of #thunk instVar of the objectClass as parameter. Thunk needs to be a callback thunk (and then an ExternalAddress).The C side of a callback is void* (because is a pointer to a function)"
"AthensFontDescription","Creates a new font description from a string representation in the form ""[FAMILY-LIST] [STYLE-OPTIONS] [SIZE]"", 1)FAMILY-LIST is a comma separated list of families optionally terminated by a comma,2)STYLE_OPTIONS is a whitespace separated list of words where each WORD describes one of style, variant, weight, stretch, or gravity. If STYLE-OPTIONS is missing, then all style options will be set to the default values3)SIZE is a decimal number (size in points) or optionally followed by the unit modifier ""px"" for absolute size. "
"AthensCairoSurface","i am a concrete implementation of Athens surface which using cairo graphics library for rendering.Cairo library, by itself can have multiple surface types.This class uses image surface (a bitmap located in system memory) and maps to cairo_image_surface_t* C type.**NOTE**As a workaround of bitblt bug, the actual Cairo surfaces, created internally is with 1 extra pixel higher than requested. This is, however completely hidden from users."
"RxMatchOptimizer","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--A match start optimizer, handy for searching a string. Takes a regex syntax tree and sets itself up so that prefix characters or matcher states that cannot start a match are later recognized with #canStartMatch:in: method.Used by RxMatcher, but can be used by other matchers (if implemented) as well."
"HETrait","I implement the custom behavior for exporting a trait.My header only includes the name of the trait.Mostly of my behavior is from HEMethodContainer."
"FloatingPointException","I am FloatingPointException, an ArithmeticError indicating a problem in a floating point calculation.Precision underflow or overflow could be considered FloatingPointExceptions.ZeroDivide, DomainError and NaNException are examples of more specific ArithmeticErrors that can be signaled before an operation is actually attempted."
"IceTipRepositoriesBrowser","I'm a tool to show all repositories registered on this image. I define basic actions and an entry point to manage each repository individually.IceTipRepositoriesBrowser new openWithSpec."
"RBCascadeNode","RBCascadeNode is an AST node for cascaded messages (e.g., ""self print1 ; print2"").Instance Variables:	messages	<SequenceableCollection of: RBMessageNode>	the messages 	semicolons	<SequenceableCollection of: Integer>	positions of the ; between messages"
"ClyClassGroupProvider","I am a root of hierarchy of class group providers.My subclasses must build class groups for given package scope.They should implement following method: - classGroupsIn: aPackageScope do: aBlockIt should create class group instances and pass them into the block.Look at ClyClassGroup comment to see how create groups."
"EUCTextConverter","Text converter for Extended Unix Character.  This is an abstract class.  The CJK variations are implemented as subclasses."
"GTFilter","I am the root class of the hierarchy of filter objects  that can be used by Spotter. The main entry point is the #value method that performs and returns the list of filtered items.Subclasses should return the list of filtered elements in sorted order based on the filtering criteria."
"ClyAllVariablesQuery","I return all type of variables from given scope.Scope should support #variablesDo:.Now only class scopes support it."
"IceTipRepairFetchRemoteBranch","I will fetch repositories to try to find the unknown commit. matches if: 	- workingCopy referenceCommit isUnknownCommit"
"RFMethodReification","I reify the method where the link is installed.Note: this is the *current* method, that is, the one that has the code of the link.it is the same that you would get with ""thisContext method"", without the need to access the context (which is slow)"
"RBLiteralArrayContainsSuspiciousTrueFalseOrNilRule","Some times ago, arrays were not allowed to contain true false and nil objects. They only contain their symbol representation: evaluating #(true false nil) returns #(#true #false #nil). Nowadays, #(true false nil) is equivalent to {true . false . nil }, i.e., it returns an array with the objects true, false, and nil. This smells checks methods having #(#true #false #nil) in their literal frame since it can be the source of potential bugs. 	 "
"SycMoveMethodsToPackageCommand","I am a command to move method to another package.I am used to convert method to extension. Internal Representation and Key Implementation Points.    Instance Variables	package:		<RPackage>"
"InstanceVariableSlot","I add some special behavior: 	-  I override bytecode generation to generate ivar read and write bytecodes	- I print the definition as #name "
"ClyPackageScope","I am a scope of packages.So I see all objects which are defined by given packages: - packages- classes - methods"
"BaseSlot","I am a hidden non-virtual slot that the virtual slots BooleanSlot and PropertySlot store into.They, when a class is created containing it, makes sure that there is one slot of me defined. When the last virtual slot is removed, I am removed."
"DualChangeSorterApplication","A DualChangeSorterApplication is a dual change sorter based on spec.DualChangeSorter shares the model between its two subcomponents (ChangeSorterApplication).ChangeSorterModel defines the application logic."
"ModificationForbidden","This exception is raised when mutating a read-only object.My instances have 4 fields to be able to reproduce the modification through retryModification method.object <Object> read-only object that the code attempted to mutateindex <SmallInteger> index of the field in the object mutated, relevant for the corresponding selectorvalue <Object> value that was attempted to be stored into the read-only objectselector <Symbol> selector that can be used to reproduce the mutation (typically, #at:put:, #instVarAt:put:, etc.)"
"RubHoverHighlightSegmentMorph","I am a text segment morph used for highlighting a text segment on mouse over. My default color are the text secondary (light) color.And my default behavior is to delete myself when the mouse focus leaves me."
"RBDefineBasicCheckRule","Each rule should define a #basicCheck: method which accepts an entity to be validated by the rule.If the entity violates the rule, method should ruturn ""true"", otherwise - ""false"".It is recommended to reuse #basicCheck: functionality in #checkClass: and #checkMethod:"
"ClyAllClassVariablesQuery","I return all class variables from given scope.Scope should support #classVariablesDo:.Now only class scopes support it."
"FBDASTBuilder","I am used to create AST nodes. This class is reserved for the RBAST. methodClass <Behavior> behavior where the compiled method is installed."
"OSWindowWorldMorph","I am a morphic world that uses OSWindow.For opening a World in a external window, the following script can be used:world := OSWindowWorldMorph new.world open."
"ClyGlobalVariable","I represent a glopbal variable.I am like GlobalVariable.You can create my instance using:	ClyGlobalVariable on: aGlobalVariable "
"RBRefersToClassRule","This smell arises when a class has its class name directly in the source instead of ""self class"" (or just ""self"" when on the class side). The self class / self variant allows you to create subclasses without needing to redefine that method.However we cannot systematically replace Class reference by self class or self because a Class reference is static and a self expression is dynamic. So the programmer may want to send messages to root of an hierarchy and not to the leaf classes. Therefore this rule generates false positives, please double check when fixing!"
"ReAbstractRule","I an the root of all quality rules rules.If you want to learn about the features of rules or how to create your own, please read:RenrakuRuleHelp readInHelpBrowser"
"RBCompositeRefactoryChange","I am a composition of RBRefactoryChanges. I hold a list of changes. I implement many ""environment change"" operation like renameClass/removeClass/ rename instance variable that areactually called on the name space by a refactoring operation and my responsibilty is to create a appropriate refactoring changeand save it in my list of changes."
"ZipDirectoryMember","ZipFileMember instances represent directories inside ZipArchives.They don't do much other than hold names and permissions (and extra fields).You can add files in subdirectories to a ZipArchive without using any ZipDirectoryMembers."
"BalloonMorph","A balloon with text used for the display of explanatory information.Balloon help is integrated into Morphic as follows:If a Morph has the property #balloonText, then it will respond to #showBalloon by adding a text balloon to the world, and to #deleteBalloon by removing the balloon.Moreover, if mouseOverEnabled is true (see class msg), then the Hand will arrange to cause display of the balloon after the mouse has lingered over the morph for a while, and removal of the balloon when the mouse leaves the bounds of that morph.  In any case, the Hand will attempt to remove any such balloons before handling mouseDown events, or displaying other balloons.Balloons should not be duplicated with veryDeepCopy unless their target is also duplicated at the same time."
"HEExtendedEnvironment","I wrap the target environment.I provide access to all the elements in the environment and also to:- The class being deserialized- The method being deserialized- The selector of the method being deserialized."
"RBPackageEnvironment","I am a RBBrowserEnvironment on a set of packages or package names.I containt all entities are defined in this packages.(classes and class that have extensions from this packages)Example:(RBBrowserEnvironment new) forPackageNames:{ 'Morphic-Base'}."
"IRMethod","I am a method in the IR (intermediate representation) language consisting of IRInstructions grouped by IRSequence (basic block).  The IRSequences form a control graph (therefore I only have to hold onto the starting sequence).  #compiledMethod will convert me to a CompiledMethod.  #methodNode will convert me back to a parse tree."
"DialogWindow","Dialog style window with no window controls (expand, collapse etc). Usually opened modally (the morph that is used to modally open determines the modal scope, use of World implies ""system modal"").Designed to be subclassed with content.Supports Escape key for cancel and Enter key for default button."
"GLMMorphicFastTreeRenderer","I am a Morphic renderer for a GLMFastTreePresentation.Description--------------------I use a GLMFastTreeDataSource to manage the data of the tree."
"ChangeSorterApplication","A ChangeSorterApplication is spec version of the dual sorter.ChangeSorterApplication 	new openWithSpec"
"IceTipEditCredentialCommand","I open the edit dialog on the credential.I colaborate with the credential to know the specific class of the dialog model.Check #editModelClass in IceSshCredentials and IcePlaintextCredentials"
"RBAddClassRefactoring","I am a refactoring for creating new classes. You can define the name, superclass, category and subclasses.I am used by other refactorings that may create new classes, for example, RBSplitClassRefactoring.My preconditions verify that I use a valid class name, that does not yet exists as a global variable, and the subclasses (if any) were direct subclasses of the superclass."
"IceBasicProjectReader","I am a basic project reader that is used by default in case no other project reader was found.I create an IceBasicProject in case a .project file is found, or an IceUnbornProject otherwise."
"PreDebugResumeDebugAction","A PreDebugResumeDebugAction adds the ResumeDebugAction to the pre debug window.Instance Variables	preDebugWindow:		<Object>preDebugWindow	- xxxxx"
"GTEventRecorderSettings","I represents Privacy settings. You can open Settings Browser and see Privacy group.Execute: SettingBrowser open"
"TimeZone","TimeZone is a simple class to colect the information identifying a UTC time zone.offset			-	Duration	- the time zone's offset from UTCabbreviation	-	String		- the abbreviated name for the time zone.name			-	String		- the name of the time zone.TimeZone class >> #timeZones returns an array of the known time zonesTimeZone class >> #default returns the default time zone (Grenwich Mean Time)"
"RBMetaclass2","I represent the class side of a class in a refactoring namespace. I shouldn't be created directly, but always be part of a refactoring namespace.My  namespace usally knows me and my non meta class."
"SpecExamples","A SpecExamples is the first sub-book of SpecHelpTopics. It contains examples of using Spec.See class side for selectors."
"ZnServerSession","I am ZnServerSession.I represent an HTTP session in the context of a ZnServer.To get a reference to the current session, send #session to a ZnMessage (request or response).Part of Zinc HTTP Components."
"RussianEnvironment","EncodedCharSet initialize.LanguageEnvironment resetKnownEnvironments.Locale switchToID: (LocaleID isoLanguage: 'ru')."
"GLMOSWindowWorldMorph","I am an OSWindow world morph that is used by Glamour to display its content in a external OSWindow.Usage examples:GTInspector new openInExternalWindowOn: 3.3 inspectInExternalWindow."
"FLPointCluster","FLPointCluster is an optional class that optimizes Point instances, since there are a lot of instances in the system, it makes sense to optimize them. We take advantage of bytecode optimizations done by Pharo for messages like #@, #x and #y. In addition, we avoid the overhead of class reshape, etc. "
"NullAnnotationContext","I represent undefined annotation context which is initialized by default for annotation instances.Annotations with undefined contexts (unspecified context) are never returned from contextual query of annotations.I has singleton #instance on class side which is used by annotations as default context value"
"CNGBTextConverter","Text converter for Simplified Chinese variation of EUC.  (Even though the name doesn't look so, it is what it is.)"
"IceTipRepairCheckoutBranch","I will perform the chechout of an existing branch, but I will remove all changes on image. I'm active when: 	- working copy is detached 	- repository HEAD is detached"
"RBCommentNodeVisitor","Visit any RBCommentNode in the syntax tree and evaluate a generic block.The block  has two optional parameters:  	aCommentArray (the collection of 1 or more RBComment's)	aNode (the node which containts the comment)"
"SimpleSwitchMorph","I represent a switch that can be either on or off.  I chnage my state in response to a mouse click.  When clicked, I also send my actionSelector to my target, just like a SimpleButtonMorph.	SimpleSwitchMorph new openInWorld"
"ReSourceAnchor","A source anchor has a refference to the actual class, method, or other entity that is criticized. An anchor also has a #providesInterval method that returns a boolean indicating if the anchor provides a selection interval to the actual source of the critique. The interval can be accessed through the #interval method"
"IceTipBrowser","I'm a base tool for iceberg Tip-UI. My children will implement real tools, but I provide certain common elements. Some remarks about design: 1. Each tool has to have ONE model as entry point for data, and JUST ONE. It will be contained    in #model accessor."
"ZnEntity","I am ZnEntity, an abstract HTTP Entity.An entity has a content type (mime-type), a content length (byte length) and a contents.Entities can encode and decode themselves to and from binary streams.Part of Zinc HTTP Components."
"FTExampleMethodTableDataSource","I'm an example of fast table, who will use a list of methods as data source elements.self example1.self example2."
"SycInspectVariableCommand","I am a command to inspect given variable.For live variables lile globals or class variables I open inspector on variable value.Also I open inspector on instance variable of class side because they also have live values.For instance side instance variable I inspect slot definition instance."
"ClyItemCellMorph","I represent simple label based cell in QueryView table.You can decorate this lable using special color or font styles: 	cellMorph label emphasis: TextEmphasis italic emphasisCode. Internal Representation and Key Implementation Points.    Instance Variables	label:		<Morph>"
"TableContainerPresenter","I am a model for a container with table layout. My purpose is to hold multiple subwidgets to glue them together.I should not be used directly"
"ClyFindMethodInBrowserCommand","I am a command to find method in methodView of full browser.I request user with search dialog using method view query.So dialog shows all methods from method view panel.By default I am activated by cmd+f."
"RBMoveClassTransformation","Moves a class to a new category or packageUsage:| transformation |transformation := (RBMoveClassTransformation				move: #RBMoveClassTransformation				to: #'Refactoring2-Refactorings-Tests')				transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- the class must exist- the category or package must exist"
"AthensSurface","I representing a surface, where all drawing operations will happen.I also having a number of factory methods to create paints, paths and other objects involved in drawing.AthensSurface is an abstract, while subclasses implement a specific kind of surface for one or another backend.The primary role of AthensSurface class is to define a public protocol for all Athens surfaces, which can be used by applications which using Athens framework.To get a new surface, use:<one of my subclasses> extent: x@yfor surfaces which don't need to have dimensions specified,it would just #new."
"FBDLoopScanner","I scan compiled method to detect loops. I answer an array or the size of the compiled method I scanned, which holds a FBDLoop at the pc where a loop starts and nil for any other pc. The FBDLoop describes the loop.instructionStream <InstructionStream> allows me to decode the method's bytecodebranchTargets <Array of (Smi | nil)> at any pc where a conditional jump goes, I put an annotation in this array. This is used to know if a loop is conditional or unconditional.loops <Array of (FBDLoop | nil)> array answered by the scanner. it holds a FBDLoop at the pc where a loop starts and nil for any other pc.currentPC <Smi> by opposition to self pc which holds the pc just *after* the instruction being decoded, currentPC holds the pc of the instruction being decoded. This is useful as you can't read the bytecode backward due to multiple bytecodes instructions."
"RBAbstractClass","I am the base class of RBClass and RBMetaclass implementing the common behavior for creating and accessing class and metaclass elements in a refactoring namespace. My subclass instances are created in a refactoring namespace when querying the environment for existing classes (or metaclasses) and when creating or changing classes during refactoring operations.RBClass and RBMetaclass are used to model existing, changed or newly added classes before actually applying the refactoring change to the system. You can query the class name,  defined methods and  variables. They provide a similar interface like the real classes, but only the part that is necessary  for the refactoring framework.They shouldn't be directly used and always be a part of a refacotoring namespace - the model.Likewise this classes, my methods aren't real methods but models (RBMethod) that representing a real methods.Changes for my methods during refactoring are stored in a list ofnewMethods and removedMethods.Like a real class I referre to my superclass and subclass, which again are actually RBClasses."
"OCCompilerNotifyingTest","A CompilerNotifyingTest is a TestCase for checking that Compiler/Parser notifications are inserted at the right place in a TextEditor.Instance Variables	expectedErrorPositions:		<Array of: Integer>	expectedErrors:		<Array of: String>	failure:		<Object>	morph:		<TextMorph>	text:		<String>errorPositions	- the position where error text should be inserted for each chunk of text evaluatederrors	- the error text that should be inserted on evaluation of each chunk of text evaluatedfailure	- an object returned in case of evaluation error and whose identity can be uniquely recognized as a failure	morph	- the Morph holding the text	text	- the string containing all the chunks to be evaluated (separated by %)	  and the expected error messages (`enclosed in back quotes`)	  this text will be stripped of the error messages before being evaluated."
"ClyTypedQuery","My subclasses represent queries which retrieve particular kind of objects.Subclasses should return class of items from class side method #resultItemsType.I implement many required methods of superclass. The rest is responsibility of subclasses:- buildResult: aQueryResult It is the method where query retrieves items from the scope and fill given result with them. Look at implementors.- checkEmptyResultSubclasses should be able detect that result will be empty without execution.-isResult: aQueryResult affectedBy: aSystemAnnouncementAny query can be affected by system changes. Subclasses should implement what change affects their results.- retrivesItem: anObjectSubclasses should check that given item can be retrieved independently on scope.-collectMetadataOf: aQueryResult by: anEnvironmentPluginSubclasses should dispatch metadata collection to the given environment plugin.I provide many instance creation methods. For example you can execute any typed query with sorted result:	ClyAllClasses sortedFrom: ClyNavigationEnvironment currentImageScope.And I provide union query support. Typed queries can be concatinated using command message:	aClassQuery, aMethodQueryLook at class side for more options"
"ClyItemStringFilter","I am a root of hierarchy of filters which use string pattern to filter objects.Concrete filter function is still responsibility of subclasses.I only define correct comparison with other filters and suitable constructors:	StringFilterClass regexPattern: aRegexString.	StringFilterClass substringPattern: aSubString	StringFilterClass pattern: aStringPattern	Internal Representation and Key Implementation Points.    Instance Variables	pattern:		<ClyStringPattern>"
"FT2Constants","The various flags from the Freetype/2 header.The LoadXXXX flags can be used with primitiveLoadGlyph:flags: or with the Cairo primCairoFtFontCreateForFtFace:flags:scale: primitives.FT_LOAD_DEFAULT ::  Corresponding to 0, this value is used a default glyph load.  In this  case, the following will happen:                                                                          1. FreeType looks for a bitmap for the glyph corresponding to the     face's current size.  If one is found, the function returns.  The     bitmap data can be accessed from the glyph slot (see note below).                                                                          2. If no embedded bitmap is searched or found, FreeType looks for a     scalable outline.  If one is found, it is loaded from the font     file, scaled to device pixels, then ""hinted"" to the pixel grid in     order to optimize it.  The outline data can be accessed from the     glyph slot (see note below).                                                                          Note that by default, the glyph loader doesn't render outlines into  bitmaps.  The following flags are used to modify this default  behaviour to more specific and useful cases.                                                                        FT_LOAD_NO_SCALE ::  Don't scale the vector outline being loaded to 26.6 fractional  pixels, but kept in font units.  Note that this also disables  hinting and the loading of embedded bitmaps.  You should only use it  when you want to retrieve the original glyph outlines in font units.                                                                        FT_LOAD_NO_HINTING ::  Don't hint glyph outlines after their scaling to device pixels.  This generally generates ""blurrier"" glyphs in anti-aliased modes.                                                                          This flag is ignored if @FT_LOAD_NO_SCALE is set.                                                                        FT_LOAD_RENDER ::  Render the glyph outline immediately into a bitmap before the glyph  loader returns.  By default, the glyph is rendered for the  @FT_RENDER_MODE_NORMAL mode, which corresponds to 8-bit anti-aliased  bitmaps using 256 opacity levels.  You can use either  @FT_LOAD_TARGET_MONO or @FT_LOAD_MONOCHROME to render 1-bit  monochrome bitmaps.                                                                          This flag is ignored if @FT_LOAD_NO_SCALE is set.                                                                        FT_LOAD_NO_BITMAP ::  Don't look for bitmaps when loading the glyph.  Only scalable  outlines will be loaded when available, and scaled, hinted, or  rendered depending on other bit flags.                                                                          This does not prevent you from rendering outlines to bitmaps  with @FT_LOAD_RENDER, however.                                                                        FT_LOAD_VERTICAL_LAYOUT ::  Prepare the glyph image for vertical text layout.  This basically  means that `face.glyph.advance' will correspond to the vertical  advance height (instead of the default horizontal advance width),  and that the glyph image will be translated to match the vertical  bearings positions.                                                                        FT_LOAD_FORCE_AUTOHINT ::  Force the use of the FreeType auto-hinter when a glyph outline is  loaded.  You shouldn't need this in a typical application, since it  is mostly used to experiment with its algorithm.                                                                        FT_LOAD_CROP_BITMAP ::  Indicates that the glyph loader should try to crop the bitmap (i.e.,  remove all space around its black bits) when loading it.  This is  only useful when loading embedded bitmaps in certain fonts, since  bitmaps rendered with @FT_LOAD_RENDER are always cropped by default.                                                                        FT_LOAD_PEDANTIC ::  Indicates that the glyph loader should perform pedantic  verifications during glyph loading, rejecting invalid fonts.  This  is mostly used to detect broken glyphs in fonts.  By default,  FreeType tries to handle broken fonts also.                                                                        FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH ::  Indicates that the glyph loader should ignore the global advance  width defined in the font.  As far as we know, this is only used by  the X-TrueType font server, in order to deal correctly with the  incorrect metrics contained in DynaLab's TrueType CJK fonts.                                                                        FT_LOAD_NO_RECURSE ::  This flag is only used internally.  It merely indicates that the  glyph loader should not load composite glyphs recursively.  Instead,  it should set the `num_subglyph' and `subglyphs' values of the glyph  slot accordingly, and set ""glyph->format"" to  @FT_GLYPH_FORMAT_COMPOSITE.                                                                          The description of sub-glyphs is not available to client  applications for now.                                                                        FT_LOAD_IGNORE_TRANSFORM ::  Indicates that the glyph loader should not try to transform the  loaded glyph image.  This doesn't prevent scaling, hinting, or  rendering.                                                                        FT_LOAD_MONOCHROME ::  This flag is used with @FT_LOAD_RENDER to indicate that you want  to render a 1-bit monochrome glyph bitmap from a vectorial outline.                                                                          Note that this has no effect on the hinting algorithm used by the  glyph loader.  You should better use @FT_LOAD_TARGET_MONO if you  want to render monochrome-optimized glyph images instead.                                                                        FT_LOAD_LINEAR_DESIGN ::  Return the linearly scaled metrics expressed in original font units  instead of the default 16.16 pixel values.                                                                        FT_LOAD_NO_AUTOHINT ::  Indicates that the auto-hinter should never be used to hint glyph  outlines.  This doesn't prevent native format-specific hinters from  being used.  This can be important for certain fonts where unhinted  output is better than auto-hinted one.One of following flags (as LoadTargetXXX) can be used to further specify the result.   FT_RENDER_MODE_NORMAL ::                                               This is the default render mode; it corresponds to 8-bit             anti-aliased bitmaps, using 256 levels of opacity.                                                                                      FT_RENDER_MODE_LIGHT ::                                                This is similar to @FT_RENDER_MODE_NORMAL, except that this          changes the hinting to prevent stem width quantization.  This        results in glyph shapes that are more similar to the original,       while being a bit more fuzzy (""better shapes"", instead of            ""better contrast"" if you want :-).                                                                                                      FT_RENDER_MODE_MONO ::                                                 This mode corresponds to 1-bit bitmaps.                                                                                                 FT_RENDER_MODE_LCD ::                                                  This mode corresponds to horizontal RGB/BGR sub-pixel displays,      like LCD-screens.  It produces 8-bit bitmaps that are 3 times        the width of the original glyph outline in pixels, and which use     the @FT_PIXEL_MODE_LCD mode.                                                                                                            FT_RENDER_MODE_LCD_V ::                                                This mode corresponds to vertical RGB/BGR sub-pixel displays         (like PDA screens, rotated LCD displays, etc.).  It produces         8-bit bitmaps that are 3 times the height of the original            glyph outline in pixels and use the @FT_PIXEL_MODE_LCD_V mode.                                                                       <Note>                                                                 The LCD-optimized glyph bitmaps produced by FT_Render_Glyph are      _not filtered_ to reduce color-fringes.  It is up to the caller to   perform this pass.                                                 "
"LayoutFrame","I define a transformation frame relative to some rectangle. I'm basic data structure used for graphics.Do not use fractions: fractionsOrNil offsets: offsetsOrNil or frations: fractionsOrNil if you do not have already  the rectangles that should be passed as arguments. If you are creating the rectangles representing the numbers you need, better use the accessors. For example like this.  	(LayoutFrame identity			topOffset: topHeight;			bottomFraction: 0;			bottomOffset: self buttonsBarHeight;			leftOffset: -1;			rightOffset: 1)	Instance variables:	leftFraction 	topFraction 	rightFraction 	bottomFraction 	<Float>		The fractional distance (between 0 and 1) to place the morph in its owner's bounds	leftOffset 	topOffset 	rightOffset 	bottomOffset 	<Integer>	Fixed pixel offset to apply after fractional positioning (e.g., ""10 pixel right of the center of the owner"")"
"RubFloatingEditorBuilder","I provide the capability to open a floating editor to edit something on the fly.The user is responsible for deciding on how to open the editor. See #exampleEditableStringMorph class side as an example on how to do it with #on:send:to.One opened:- if the escape character is pressed or if the keyboard focus is lost or in case of a mouse down anywhere else than inside the editor then the editing is aborted.- the Enter key or Cmd+s save the contents in the Morph, then an announcement of class RubMorphEdited is sent so that the user can take desired action (checking the input, definitively accept it or reject it).see #exampleEditableStringMorph class side Internal Representation and Key Implementation Points.Instance Variables	announcer:		<Announcer>	editor:		<RubScrolledTextMorph>	acceptOnCR:	<Boolean>	initialContents: <String>	font: <LogicalFont>	customizeValuable: <Valuable>Implementation notes"
"ClyMethodVisibilityLevel","I am a root of hierarchy of different kind of method visibilities.Instances are created with currently visible class scope and extra scope which can be activated.Activation/decactivation methods returns new scope which represent result method visibility: - activateExtraScope - deactivateExtraScope My instances are used by browser to switch method visibility of inherited classes. They use simple method #toggleScope which also returns result method scope.To represent current state of visible scope I compute #isActive flag:If any of classes from extra scope is included in the visible scope then my instance is considered activeMy instances are created on currently visible class scope. And subclasses create extra scope according to their logic. Internal Representation and Key Implementation Points.    Instance Variables	visibleClassScope:		<ClyClassScope>	extraClassScope:		<ClyAbstractClassScope>	isActive:		<Boolean>	    Implementation Points"
"FFICallbackReturnValue","Obsolete support for old-style callbacks.  An instance of FFICallbackReturnValue specifies a return value to be passed to a callback callee.  It is intended to have overlaid the following struct:/* * Returning values from callbacks is done through a CallBackReturnSpec * which contains a type tag and values.  It is designed to be overlaid upon * an FFICallbackReturnProxy created at the Smalltalk level to return values. */typedef struct {    long type;# define retint32  0 # define retint64  1# define retdouble 2# define retstruct 3    long _pad; /* so no doubt that valflt64 & valint32 et al are at byte 8 */    union {        long valint32;        struct { long low, high; } valint64;        double valflt64;        struct { void *addr; long size; } valstruct;    } rvs;} CallBackReturnSpec;"
"BottomBorder","Description--------------------BottomBorder is a border style that will fill only the bottom of the rectangle.Public API and Key Messages--------------------- #trimSize: 	This option allow to trim the bottom borderExamples--------------------	BottomBorder new		width: 1;		baseColor: Color white;		trimSize: 2;		yourself	 Internal Representation and Key Implementation Points.--------------------    Instance Variables	trimSize:		<anInteger>		An amount of pixel to trim from both side of the bottom border"
"ClyAllClassGroupsQuery","I am a query of all class groups from given scope.Scope should support #classGroupsDo:. Currently it is only ClyPackageScope.The scope delegates class group building to the environment plugins.It asks each plugin to collect class group providers using: 	plugin collectClassGroupProviders And then each provider creates set of class groups using method: 	groupProvider classGroupsIn: aPackageScope do: aBlockWithGroup	Look at ClyClassGroupProvider for details"
"WidgetExamples","This class provides examples on how different widgets can be made.See the methods starting with ""example"" in my class side.Examples for different widgets:WidgetExamples exampleBasicControls.WidgetExamples exampleOtherControls.WidgetExamples exampleColorControls.WidgetExamples exampleDialogs.WidgetExamples exampleGroups.WidgetExamples exampleTextEntryWithCompletionDialog.WidgetExamples exampleWindowWithToolbars."
"ListPresenter","A ListPresenter is an applicative presenter which handle a basic list.See AbstractWidgetPresenterself exampleself example2self example3You can also have a look at ExampleListPresenter >> exampleRegisteredColor and ListSelectionPresenter for more examples.I provide the following variables and their accessors- backgroundColorBlock should convert an item in the color in the background in the line of this item.- displayBlock should convert an item in something that can be displayed in a list, use asStringOrText by default.- filteringBlock should convert an item in a boolean representing if the item will be displayed, initialize with self defaultFilteringBlock.- multiSelection is a boolean representing if several items can be selected in the same time, it have shortcut beMultipleSelection and beSingleSelection.- sortingBlock should convert two items in a boolean representing if the first item must be place before the second, initialize with self defaultSortingBlock.Blocks should be set before items.I provide the following methods- items: to set the list with the elements of the collection in parameter- getIndex is the getter of the index of the selected item or the last selected item.- getList is the getter of the list.- listSize is the number of items.todo- allowToSelect- autoDeselect- menu- listItems- clickOnSelectedItem- getSelectionStateFor:- listElementAt:ifAbsent:- refresh ...- select ... , setSelected ...- updateList"
"BitBlt","I represent a block transfer (BLT) of pixels into a rectangle (destX, destY, width, height) of the destinationForm.  The source of pixels may be a similar rectangle (at sourceX, sourceY) in the sourceForm, or a constant color, currently called halftoneForm.  If both are specified, their pixel values are combined with a logical AND function prior to transfer.  In any case, the pixels from the source are combined with those of the destination by as specified by the combinationRule.The combination rule whose value is 0 through 15 programs the transfer to produce 1 or 0 according to its 4-bit representation as follows:	8:	if source is 0 and destination is 0	4:	if source is 0 and destination is 1	2:	if source is 1 and destination is 0	1:	if source is 1 and destination is 1.At each pixel the corresponding bits of the source and destination pixel values determine one of these conditions;  if the combination rule has a 1 in the corresponding bit position, then the new destination value will be 1, otherwise it will be zero.  Forms may be of different depths, see the comment in class Form.In addition to the original 16 combination rules, this BitBlt supports	16	fails (to simulate paint bits)	17	fails (to simulate erase bits)	18	sourceWord + destinationWord	19	sourceWord - destinationWord	20	rgbAdd: sourceWord with: destinationWord.  Sum of color components	21	rgbSub: sourceWord with: destinationWord.  Difference of color components	22	OLDrgbDiff: sourceWord with: destinationWord.  Sum of abs of differences in components	23	OLDtallyIntoMap: destinationWord.  Tallies pixValues into a colorMap			these old versions don't do bitwise dest clipping.  Use 32 and 33 now.	24	alphaBlend: sourceWord with: destinationWord.  32-bit source and dest only	25	pixPaint: sourceWord with: destinationWord.  Wherever the sourceForm is non-zero, it replaces the destination.  Can be used with a 1-bit source color mapped to (0, FFFFFFFF), and a fillColor to fill the dest with that color wherever the source is 1.	26	pixMask: sourceWord with: destinationWord.  Like pixPaint, but fills with 0.	27	rgbMax: sourceWord with: destinationWord.  Max of each color component.	28	rgbMin: sourceWord with: destinationWord.  Min of each color component.	29	rgbMin: sourceWord bitInvert32 with: destinationWord.  Min with (max-source)	30	alphaBlendConst: sourceWord with: destinationWord.  alpha is an arg. works in 16 bits.	31	alphaPaintConst: sourceWord with: destinationWord.  alpha is an arg. works in 16 bits.	32	rgbDiff: sourceWord with: destinationWord.  Sum of abs of differences in components	33	tallyIntoMap: destinationWord.  Tallies pixValues into a colorMap	34	alphaBlendScaled: srcWord with: dstWord. Alpha blend of scaled srcWord and destWord.The color specified by halftoneForm may be either a Color or a Pattern.   A Color is converted to a pixelValue for the depth of the destinationForm.  If a Pattern, BitBlt will simply interpret its bitmap as an array of Color pixelValues.  BitBlt aligns the first element of this array with the top scanline of the destinationForm, the second with the second, and so on, cycling through the color array as necessary.  Within each scan line the 32-bit value is repeated from left to right across the form.  If the value repeats on pixels boudaries, the effect will be a constant color;  if not, it will produce a halftone that repeats on 32-bit boundaries.Any transfer specified is further clipped by the specified rectangle (clipX, clipY, clipWidth, clipHeight), and also by the bounds of the source and destination forms.	To make a small Form repeat and fill a big form, use an InfiniteForm as the source.	To write on a form and leave with both transparent and opapue areas, use a MaskedForm as the source.Pixels from a source to a destination whose pixels have a different depth are converted based on the optional colorMap.  If colorMap is nil, then conversion to more bits is done by filling the new high-order bits with zero, and conversion to fewer bits is done by truncating the lost high-order bits.  The colorMap, if specified, must be a either word array (ie Bitmap) with 2^n elements, where n is the pixel depth of the source, or a fully specified ColorMap which may contain a lookup table (ie Bitmap) and/or four separate masks and shifts which are applied to the pixels. For every source pixel, BitBlt will first perform masking and shifting and then index the lookup table, and select the corresponding pixelValue and mask it to the destination pixel size before storing.	When blitting from a 32 or 16 bit deep Form to one 8 bits or less, the default is truncation.  This will produce very strange colors, since truncation of the high bits does not produce the nearest encoded color.  Supply a 512 long colorMap, and red, green, and blue will be shifted down to 3 bits each, and mapped.  The message copybits...stdColors will use the best map to the standard colors for destinations of depths 8, 4, 2 and 1.  Two other sized of colorMaps are allowed, 4096 (4 bits per color) and 32786 (five bits per color).	Normal blits between 16 and 32 bit forms truncates or pads the colors automatically to provide the best preservation of colors.	Colors can be remapped at the same depth.  Sometimes a Form is in terms of colors that are not the standard colors for this depth, for example in a GIF file.  Convert the Form to a MaskedForm and send colorMap: the list of colors that the picture is in terms of.  MaskedForm will use the colorMap when copying to the display or another Form. (Note also that a Form can be copied to itself, and transformed in the process, if a non-nil colorMap is supplied.)"
"TraitedClass","I contain the methods that are included in a TraitedClass.The Traits are also TraitedClass, as they share the same behavior.These methods override the implementation in Class I am added during the creation of the class, if the superclass does not have them.Check TraitedMetaclass >> #initializeBasicMethods This method is invoked during the construction of the class, and flattens my methods in the new traited class."
"AthensSceneView","i am simple morph for representing some scene.The scene is any object which implements #renderOn: method,or a block with single argument.(an argument passed is an Athens canvas).I implement a simple view panning and zooming with mouse drag and mouse-wheel (correspondigly).Example1: open scene view, by passing a simple rendering block.| view |view  := AthensSceneView new.view scene: [:canvas |	canvas surface clear:  Color black.	canvas setPaint: Color red.	canvas drawShape: (0@0 corner:120@100)].view openInWindow.Example2: open scene view on imported SVG file (note you need 'Athens-SVG' package loaded):| view |view  := AthensSceneView new.view scene: (AthensSVGConverter fromFile: 'lion.svg').view openInWindow."
"ProcessList","I am a VM Special class! Do not break me!I am a linked list that contains processes as Nodes. My implementation is tied to the VM: - every node I contain should have as first instance variable the next node in the list.My main user is ProcessScheduler, which contains an array with instances of myself. Each entry in that array a priority for processes. Processes are queues in each process list by the VM automatically."
"Privacy","I represent basic privacy question about collecting user activities and other data that helps to improve Pharo and related tools.Responsibility: I keep information about sending diagnostic and usage data. Collaborators:I only keep the privacy information. All services that collects diagnostic and usage data should do it only if #sendDiagnosticsAndUsageData is true. If you want to add more specific settings related to privacy, you can put it to the privacy group.Public API and Key Messages- sendDiagnosticsAndUsageData   "
"MorphicUIBugTest","A MorphicUIBugTest is a class for testing the shortcomings and repairs of the MorphicUI manager..Instance Variables	cases:		<aCollection>cases	- a list of morphs that may need to be deleted during teardown.	the tests are expected to fill this list it starts out empty by default.		"
"Point","I represent an x-y pair of numbers usually designating a location on the screen.My instances are created either using the message @ or x:y: or r:degrees: as follows:[[[| pt |pt := 10@20.pt x > 10pt y> 20 			 ]]][[[| pt |pt := Point x: 10 y: 20.pt x > 10pt y> 20 			 ]]]I define many nice messages that deal with point such as: - arithmetic such as +, *, reciprocal, min, abs,- comparison <, <=, =, >, >=, closeTo: - geometry such as sideOf:, to:intersects:to:, - polar coordinates,- extent such as scaleTo:- transformation such as negated, translatedBy:, scaleBy:- rounding with roundTo:, roundUpTo:, truncateTo:, truncated"
"ExternalData","Instances of ExternalData explicitly describe objects with associated type. They can be used for describing atomic C types like arrays of atomic types (e.g., 'int[]') or pointer to atomic types (e.g., 'int *').Instance variables:	type	<Integer | Behavior>	The basic type of the receiver.The encoding of type is equivalent to that of the basic type in class ExternalType. The interpretation of whether the receiver describes an array of data or a pointer to data depends on the contents of the instance variable 'handle'. If handle contains an ExternalAddress the receiver is treated as pointer to type. If the handle contains a ByteArray the receiver is interpreted as describing an array of type. Note that both interpretations are treated equivalent in external calls, e.g., if one describes an argument to an external call as taking 'int*' then, depending on the type of handle either the actual contents (if ExternalAddress) or a pointer to the contents (if ByteArray) is passed."
"FFIUnknownLibrary","I'm used when there is no defined library as a module. In case FFI users want to declare modules as simple strings, I'm used to model the access to that library.I'm never used directly! Instead, users will utilize Strings that will be converted to me thru #asFFILibrary method. That way, is completely the same to do a call this way: self ffiCall: #( void fn () ) module: 'libc'. and self ffiCall: #( void fn () ) module: LibC. (but of course recomended way is to use a module, in case you need a strategy to find libraries in different platforms. "
"ClyInheritedMethodGroup","I am group of inherited methods. Depending on my query I include methods from on or all traits and superclasses which are inherited by given classes.I can be expanded by subgroups of each inherited class. It will be also my instances but they will be configured by single class scope method query.In the browser I provide few checkboxes to switch method visibility. It is based on my visibilityLevels, collection of ClyMethodVisibilityLevel instances.They are extended by plugins. For example Traits plugin adds local trait visibility level. Internal Representation and Key Implementation Points.    Instance Variables	visibilityLevels:		<Collection of<ClyMethodVisibilityLevel>>"
"SycMessageOriginHack","I represent class of message implementor for method refactorings.Implementing class is required for current method refactorings but it should be removed in future because it should be always message refactoring. For example RBRenameMethodRefactoring renames any selectors in image which is not restrited by any existing method. Probably reason of such restriction was how browser implements rename of methods when user activated it on selected methods.Same is valid for add/remove method parameter.So now these  refactorings check that given class defines given selector which is not needed actually because we modify message.I used in place of class for all such refactorings to allow them work on messages"
"RBMethodName","I represent a method name (selector and arguments) in the refactoring framework.I am used by refactoring operations - for example RBMoveMethodRefactoring.I have a selector name and a list of arguments and I use RBScanner to validate the syntax of my selector name.In the refactory framework I am used for representing a new method name, generated by the refactoring operation or requested by the caller.You can create instances of me by RBMethodName selector: 'color:' arguments:{'aColor'}.(RBMethodName selector:'color' arguments:{}) isValid."
"IceTipGitHubPullRequestListBrowser","Description--------------------I am a spec presenter to show the list of PR available for a remote and informations on them. Internal Representation and Key Implementation Points.--------------------    Instance Variables	details:				<aPresenter>		A presenten showing the details for a PR.	pullRequests:		<anAdaptor>		An adaptor corresponding to a table containing the pull requests to view.	remote:				<aRemote>			The remote we should view the PR of."
"EncoderForV3","I add behaviour to Encoder to size and emit bytecodes for the Squeak V3.x VM bytecode set, a close variant of the original Smalltalk-80 bytecode set defined in the Blue Book.Bytecode set specification:	0-15 		0000iiii 	Push Receiver Variable #iiii	16-31 		0001iiii 	Push Temporary Location #iiii	32-63 		001iiiii 		Push Literal Constant #iiiii	64-95 		010iiiii 		Push Literal Variable #iiiii	96-103 	01100iii 	Pop and Store Receiver Variable #iii	104-111 	01101iii 	Pop and Store Temporary Location #iii	112-119 	01110iii 	Push (receiver, true, false, nil, -1, 0, 1, 2) [iii]	120-123 	011110ii 	Return (receiver, true, false, nil) [ii] From Message	124-125 	0111110i 	Return Stack Top From (Message, Block) [i]	(126-127 unassigned)	128 		10000000 jjkkkkkk 	Push (Receiver Variable, Temporary Location, Literal Constant, Literal Variable) [jj] #kkkkkk	129 		10000001 jjkkkkkk 	Store (Receiver Variable, Temporary Location, Illegal, Literal Variable) [jj] #kkkkkk	130 		10000010 jjkkkkkk 	Pop and Store (Receiver Variable, Temporary Location, Illegal, Literal Variable) [jj] #kkkkkk	131 		10000011 jjjkkkkk 	Send Literal Selector #kkkkk With jjj Arguments	132 		10000100 iiijjjjj kkkkkkkk 	(Send, Send Super, Push Receiver Variable, Push Literal Constant, Push Literal Variable, Store Receiver Variable, Store-Pop Receiver Variable, Store Literal Variable)[iii] #kkkkkkkk jjjjj (for sends jjjjj = numArgs)	133 		10000011 jjjkkkkk 	Send Literal Selector #kkkkk To Superclass With jjj Arguments	134 		10000011 jjjkkkkk 	Send Literal Selector #kkkkk With jjj Arguments	135 		10000111 	Pop Stack Top	136 		10001000 	Duplicate Stack Top	137 		10001001 	Push Active Context	138   10001010 jkkkkkkk		Push (Array new: kkkkkkk) (j = 0)								or	Pop kkkkkkk elements into: (Array new: kkkkkkk) (j = 1)	139   10001011 kkkkkkkk jjjjjjjj 	Invoke primitive number jjjjjjjjkkkkkkkk	140   10001100 kkkkkkkk jjjjjjjj 	Push Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	141   10001101 kkkkkkkk jjjjjjjj 	Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	142   10001110 kkkkkkkk jjjjjjjj 	Pop and Store Temp At kkkkkkkk In Temp Vector At: jjjjjjjj	143   10001111 llllkkkk jjjjjjjj iiiiiiii	Push Closure Num Copied llll Num Args kkkk BlockSize jjjjjjjjiiiiiiii	144-151 	10010iii 		Jump iii + 1 (i.e., 1 through 8)	152-159 	10011iii 		Pop and Jump 0n False iii +1 (i.e., 1 through 8)	160-167 	10100iii jjjjjjjj 	Jump(iii - 4) *256+jjjjjjjj	168-171 	101010ii jjjjjjjj 	Pop and Jump On True ii *256+jjjjjjjj	172-175 	101011ii jjjjjjjj 	Pop and Jump On False ii *256+jjjjjjjj	176-191 	1011iiii 		Send Arithmetic Message #iiii	192-207 	1100iiii 		Send Special Message #iiii	208-223 	1101iiii 		Send Literal Selector #iiii With No Arguments	224-239 	1110iiii 		Send Literal Selector #iiii With 1 Argument	240-255 	1111iiii 		Send Literal Selector #iiii With 2 Arguments"
"Integer","I am a common abstract superclass for all Integer implementations. My implementation subclasses are SmallInteger, LargePositiveInteger, and LargeNegativeInteger.	Integer division consists of:	/	exact division, answers a fraction if result is not a whole integer	//	answers an Integer, rounded towards negative infinity	\\	is modulo rounded towards negative infinity	quo: truncated division, rounded towards zero"
"PharoDocCommentNode","I represent a example expression (expression and value) within a methodcomment (RBCommentNode). Every pair of Pharo expression and a separator (default "">>>"") can be styled as Pharo code and the editor iconstyler  can highlight the code and evaluate the expression.Example, within a method comment:"" 3 + 4 >>> 7""The example code should show an  expression 3 + 4 and the expected value 7.See setting on ""Code Browsing"" to enable / disable this doc comment style."
"RxsPredicate","-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov--This represents a character that satisfies a certain predicate.Instance Variables:	predicate	<BlockClosure>	A one-argument block. If it evaluates to the value defined by <negated> when it is passed a character, the predicate is considered to match.	negation	<BlockClosure>	A one-argument block that is a negation of <predicate>."
"RBAddReturnStatementTransformation","I am responsible for adding a return statement inside a method. In this implementation, all the return value (including the '^') shall be described.Usage: | transformation |transformation := (RBAddReturnStatementTransformation				return: '^ variable'				inMethod: #methodBefore				inClass: #RBAddReturnStatementTransformationTest)				transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:- the method does not have a return statementObservations about the transformation:- The transformation is straightforward: parse the return value and add the resulting node to the end of the method"
"RBClassModelFactory","None of the classes inside this package should be directly accessed. They should be accessed via myself. I'm a class factory. I'm an important design point: I will let future evolution of the system to be experimented without the needs to change all the users. Then once the experiments and a good solution is found it may be the time to remove me and to think that I'm an overengineered solution. Right now I'm a change enabler. For example people can try to use Ring models to model RBmodel. "
"FT2BitmapSize","Do not rearrange these fields!This structure models the size of a bitmap strike (i.e., a bitmapinstance of the font for a given resolution) in a fixed-size fontface.  It is used for the `availableSizes' field of theFT2Face structure.<Fields>height :: The (vertical) baseline-to-baseline distance in pixels.It makes most sense to define the height of a bitmapfont in this way.width  :: The average width of the font (in pixels).  Since thealgorithms to compute this value are different for thevarious bitmap formats, it can only give an additionalhint if the `height' value isn't sufficient to selectthe proper font.  For monospaced fonts the average widthis the same as the maximum width.size   :: The point size in 26.6 fractional format this font shallrepresent (for a given vertical resolution).x_ppem :: The horizontal ppem value (in 26.6 fractional format).y_ppem :: The vertical ppem value (in 26.6 fractional format).Usually, this is the `nominal' pixel height of the font.<Note>The values in this structure are taken from the bitmap font.  Ifthe font doesn't provide a parameter it is set to zero to indicatethat the information is not available.The following formula converts from dpi to ppem:ppem = size * dpi / 72where `size' is in points.Windows FNT:The `size' parameter is not reliable: There exist fonts (e.g.,app850.fon) which have a wrong size for some subfonts; x_ppemand y_ppem are thus set equal to pixel width and height given inin the Windows FNT header.TrueType embedded bitmaps:`size', `width', and `height' values are not contained in thebitmap strike itself.  They are computed from the global fontparameters."
"RBRenameVariableTransformation","Renames a variable in a class and all its direct accesses. It is necessary to indicate whether the variable is an instance or class variable. It is not implemented as a composite transformation because the rename is made internally in the model.Usage:transformation := (RBRenameVariableTransformation			rename: 'classBlock' to: 'asdf'			in: #RBBasicLintRuleTest			classVariable: false)			transform.(ChangesBrowser changes: transformation model changes changes) openPreconditions:overrides from RBAddVariableRefactoring and RBRemoveVariableRefactoring"
"ExternalStructure","This class provides an abstract base for all structures that can be used by external functions. ExternalStructures have two possible handle types:	- ExternalAddress		If the handle is an external address then the object described does not reside in the Smalltalk object memory.	- ByteArray		If the handle is a byte array then the object described resides in Smalltalk memory.Useful methods should be implemented by subclasses of ExternalStructure using the common ByteArray/ExternalAddress platform dependent access protocol which will transparently access the correct memory location."
"AthensPathConverter","i am a base class for path conversion. i take a path as input and producing a path commands as output.My default implementation just passing all path commands without changes to destination without any conversionExample of use: converter := AthensXYZConverter dest: (AthensPolygonPath new).convertedPath := converter convert: sourcePath.You can chain multiple converters:basicConverter := AthensZYXConv dest: AthensPolygonPath new. compoundConverter := AthensABCConverter dest: basicConverter.compoundConverter convert: somePathin this case, an initial conversion is performed by instance of AthensABCConverter, and then conversion results are passed down to AthensZYXConv,and then finally to instance of AthensPolygonPath."
"AnnouncementSetWithExclusions","I am an AnnouncementSet that explicitely does not handle a number of exclusion Announcements.You could define me by #- message:	announcer when: Announcement - ValueChanged do: [...].	announcer when: Announcement - ValueChanged - ValueAdded do: [...].	announcer when: ValueAdded, ValueRemoved - ValueAdded Internal Representation and Key Implementation Points.    Instance Variables	exclusions:		<OrderedCollection>"
"OCASTTranslator","I visit an abstract syntax tree and generate IR (intermediate representation) instructions for each node by sending the appropriate message to my methodBuilder (an IRBuilder).  I hold onto my two subclasses OCASTTranslatorForValue for generating instructions for effect and value, andOCASTTranslatorForEffect for generating instructions for effect only.Which one to use depends on the AST nodes and whether the code will only be executed (for effect only) or if the value is used afterwards (for value).For example, when translating a return, the value to return needs to be pushed on stack, so the valueTranslator is used:visitReturnNode: aReturnNode 	valueTranslator visitNode: aReturnNode value.	methodBuilder returnTop.	Whereas, in #visitMethodNode:,  the effectTranslator is used, because no value is pushed on stack at the end of the method body:...effectTranslator visitNode: aMethodNode body.."
"RBAllAnyNoneSatisfyRule","Replace ad-hoc implementations (using explicit logic based on do:) of ==allSatisfy:==, ==anySatisfy:== and ==noneSatisfy:== by the adequate calls to ==allSatisfy:==, ==anySatisfy:== or ==noneSatisfy:==. For example [[[  collection do: [ :each |				...				condition					ifFalse: [ ^ false ] ]]]]is transformed into [[[  collection allSatisfy: [ :each | condition ]]]]"
"ShiftClassInstaller","I am the responsible of installing a class in the system.I interact with the ShiftClassBuilder to generate the classes.You can use me as in:Smalltalk classInstaller make: [ :aBuilder |		aBuilder			superclass: Object;			name: #MyClass;			slots: #(varA varB);			category: 'My-Category' ].		See that I should never be referenced directly, only through the accesor in Smalltalk or in any class in the system. The block passed is used to configure the builder. Check ShiftClassBuilder to see the available messages.I have a subclass to anonymous generate classes, without registering in the environment. "
"ClyOldMessageBrowserQuery","I am a special query which is based on constant list of methods or class comments. I am introduced to support old (current) approach for system queries which is based on SystemNavigation collecting list of methods.I am used by ClyOldMessageBrowserAdapter which is installed as default as part of Calypso toolset.I implement semantics of old MessageBrowser. Internal Representation and Key Implementation Points.    Instance Variables	criteriaBlock:		<BlockClosure>	criteriaString:		<String>	extraMethods:		<Collection of<CompiledMethod>>"
"MD5NonPrimitive","This class implements the MD5 128-bit one-way hash function.  It relies onthe ThirtyTwoBitRegister class supplied as part of the ""Digital Signatures""functionality included in Squeak 2.7.  As of this date (1/20/2000), theU.S. Government has lifted many of the previous restrictions on the exportof encryption software, but you should check before exporting anythingincluding this code.  MD5 is commonly used for some secure Internetprotocols, including authentication in HTTP, which is why I wrote it.Submitted by Duane Maxwell"
"GLMPresentation","A GLMPresentation is the abstract class for the hierarchy of presentations. A presentation specifies how the pane (held in the pane instance variable) is going to be displayed. It typically reads at least the #entity port of a pane and populates at least the #selection port.updateActions holds a collection of GLMUpdateAction that are used to update the presentation via announcements.rawSelectionTransmissions holds a collection of transmission whose origins are this presentation's #rawSelection port. Destinations of this transmissions are on the pane. This collection always contains at least one transmission to the pane's #selection port. To transform the values travelling through this transmission use #send:. To add new transmissions, use #send:as:.Because Glamour has a prototype-based design it relies on copying the presentations before installing them in panes (via transmissions). The parentPrototype instance variable keeps track of the presentation from which the current one was copied.It raises:- GLMContextChanged to let the world know that something has changed in the containing pane. This is typically used by the renderer to update the rendering.- GLMPresentationUpdated to let the world know that the presentations wants to be updated because of reasons other than the pane context changed."
"FTAllItemsStrategy","I am a Strategy that will use the function on all the tree.BE CAREFUL, do NOT use me if you are not sur that your tree is finish. If a branch is infinite I will go in an infinite loop. If you are sure about it, use this otherwise use other search strategies. Description-----------------------I will search in every item of the tree and I needed I will expand the items to show the results of the function.As said in my superclass I am use by a FTTreeDataSource to help with a FTFunction.Public API and Key Messages------------------------ #realSearch 	is the method that will launch the search.Example-----------------------	| ds |	ds := FTTreeDataSource		roots:			((ProtoObject allSubclasses sort: [ :a :b | a asString < b asString ])				reject: [ :e | e asString endsWith: 'class' ])		children: [ :item | item subclasses sort: [ :a :b | a asString < b asString ] ].	ds searchStrategy: #allItems. ""This will say to the FTTreeDataSource to use me.""	FTTableMorph new		extent: 200 @ 400;		dataSource: ds;		explicitFunction;		openInWindow Internal Representation and Key Implementation Points.-----------------------    Instance Variables	index:		I am the index of tfe elements I am testing now. 	result:		I am a collection of index that is the result of the search."
"ImageMorph","ImageMorph is a morph that displays a picture (Form). My extent is determined by the extent of my form.Use #image: to set my picture.Structure: instance var		Type 		Description image				Form		The Form to use when drawingCode examples:	ImageMorph new openInWorld; grabFromScreen	(Form fromFileNamed: 'myGraphicsFileName') asMorph openInWorldRelationship to SketchMorph: ImageMorph should be favored over SketchMorph, a parallel, legacy class -- see the Swiki FAQ for details ( http://minnow.cc.gatech.edu/squeak/1372 ). "
"ClyItemLocalHierarchyProperty","I represent how many local children exist for object in concrete query result.For example if you look at classes as a hierarchy then you can see Object and its subclasses. This hierarchy can be limited by package scope.So in case of one particular package Object can have 10 subclasses. But in another package it can be 30 (for example).And I represents such local hierarchy size. To access it from browser item use following methods:	- aBrowserItem localHierarchySize	- aBrowserItem localHierarchySize: countI am used by tools to organize tree view for list of items which provide local hierarchy by themselves. Item has no real list of children. But instead it knows count of internal tree. It allows tool hide right number of items when given parent node needs to be collapsed. Important condition here is that I must hold count of full subtree of local hierarchy (not just first level children). To manually create my instances use:	ClyItemLocalHierarchyProperty size: 10Internal Representation and Key Implementation Points.    Instance Variables	subtreeSize:		<Integer>"
"RBTrueFalseDuplicationRule","Checks for ifTrue:ifFalse: blocks that have the same code at the beginning or end. While you might not originally write such code, as it is modified, it is easier to create such code. Instead of having the same code in two places, you should move it outside the blocks.For example, test 	ifTrue: [self foo. self bar ] 	ifFalse: [ self foo. self baz ] is equivalent to: self foo.  test 	ifTrue: [ self bar ] 	ifFalse: [ self baz ]"
"ClyMethodSourcesQuery","I return all methods which source code includes particular string pattern.For example it can be simple substring or regex expression. But generally pattern is represented by ClyStringPattern subclasses.To create my instances use following methods:	ClyMethodSources withString: 'probe string'.	ClyMethodSources withString: 'probe string' caseSensitive: true.	ClyMethodSources filteredBy: aStringPattern	Internal Representation and Key Implementation Points.    Instance Variables	pattern:		<ClyStringPattern>"
"PermaLink","I specify a kind of persistence for links to be put on a slot, a temporary variable or a class variable.  I can be of kind: - #read only read nodes- #write only assignment nodes - #all bothI know the class of the slot/var the link will be put on. I also know my link, although several versions of me can exist for the same link, but with different targets (slots/var).The isInstanceSpecific inst var seems to be needed to keep track that the metalink is installed on an object, because this information is lost after the link is installed through the API. It could be done better perhaps. "
"ClyEnvironmentPlugin","I am a root of environment plugins hierarchy.My subclasses are responsible for three things:1) Extend browser items with arbitrary properties. Any plugin can compute specific properties for given item. For example plugin can mark class that it is abstract:		MyPluginClass>>decorateBrowserItem: anItem ofClass: aClass		aClass isAbstract ifTrue: [ anItem markWith: ClyAbstractItemTag  ]		Concrete decoration methods which plugin can implement are depends on the item types which plugin is going support. For another example to decorate methods plugin should implement: - decorateBrowserItem: anItem ofMethod: aMethodNormally when you develop navigation over concrete system you build some common superclass plugin which will provide stubs for all item types form your domain. In case of Smalltalk navigation there is ClySystemEnvironmentPlugin which implements empty methods to decorate packages, classes and methods (like in examples)2) Connect external systems to the navigation environment. Plugin package can provide new kind of queries and scopes which retrieves new kind of items. These items can be from systems which are external to the main navigation environment. Plugin should take care about external updates by subscribing to external system for the changes and by delegating them to the navigation environment.For example SUnit plugin extends Smalltalk environment with information about tests. It subscribes on SUnit events about test ran. And when it happens it delegates event to the environment which updates methods queries with new information about test result.To connect to external system plugin implements following method:- attatchToSystem Here plugin can subscribe on external events. For example SUnit plugin subscribes on ""TestCase historyAnnouncer"" to know when user run tests.And to disconnect from system should implement:- detatchFromSystemFor example SUnit plugin unsubscribes from ""TestCase historyAnnouncer"".3) Collect query result metadata. For example SUnit plugin can collect how many success tests are retrieved by method query.The exact methods which plugin should implement depends on the kind of queries it is supposed to support. In case of SUnit it implements:- collectMetadataOfMethods: aQueryResultBut decision what method to use is responsibility of queries. For example: 	ClyMethodQuery>>collectMetadataOf: aQueryResult by: anEnvironmentPlugin		anEnvironmentPlugin collectMetadataOfMethods: aQueryResultAs in case of items decoration the superclass of plugins can provide empty methods for metadata collection. So concrete plugin only chooses what it wants.That is all responsibility. To activate plugin it should be added to navigation environment: 	environment addPlugin: anEnvironmentPlugin Default global environment adds all plugins automatically. Only plugins marked as auto-activated are used (which is true by default):		ClyEnvironmentPlugin class>>isAutoActivated		^isAutoActivated ifNil [true]You can disable any plugin using: 		ClyConcretePlugin disableBut it do not affect default navigation environment. You will need recreate it. Internal Representation and Key Implementation Points.    Instance Variables	environment:		<ClyNavigationEnvironment>"
"FFIExternalStructureReferenceHandle","I'm an offset accessor for nested structures. The idea is that I remap the accessing to an offseted byte array, thus providing access to the inner structure without copying the values. This is useful when you have nested structures, something like this: struct StructNested {	int value;}struct StructA {	int one;	struct StructNested theNest;}then you can do something like this: s := StructA new.s theNest value: 42. And the value will be set in the StructA instance, not in a copy as before. "
"ZdcByteArrayManager","I manage the allocation and recycling of ByteArrays. For each size, I maintain up to limit instances, configurable using #limit:I never preallocate.I am threadsafe.My public API consists of just 2 messages: #byteArrayOfSize:zero: and #recyle:There is one global current instance for me, but I can be used as needed.	ZdcByteArrayManager current limit: 4.		ZdcByteArrayManager current limit: 0."
"MetacelloCommandLineHandler","Command line handler for dealing with Metacello from the command line.Usage:metacello --helpmetacello install <repository url> (<baseline>|<configuration>) [--version=<version>] [--groups=<group name>,...] [--no-quit] [--no-save]	<repository url>    A Monticello repository name 	<baseline>          A valid Metacello Baseline name	<configuration>     A valid Metacello Configuration name	<version>           A valid version for the given Configuration (incompatible with Baseline)	<group name>        A valid Metacello group name(s)	--help              Show this help message	--no-quit           Keep the image running after Baseline/Configuration install	--no-save           Don't save the image after Baseline/Configuration install	Examples:	# Display this help message	pharo Pharo.image metacello OR pharo Pharo.image metacello --help		# Install group 'Core' and 'Tests' of latest version	pharo Pharo.image metacello install $REPOS_URL BaselineOfFoo --groups=Core,Tests		# Install a specific version '1.5' and only a specific group 'Tests'	pharo Pharo.image metacello install $REPOS_URL ConfigurationOfFoo --version=1.5 --groups=Tests		"
"Class","I add a number of facilities to those in ClassDescription:	A set of all my subclasses (defined in ClassDescription, but only used here and below)	A name by which I can be found in a SystemDictionary	A classPool for class variables shared between this class and its metaclass	A list of sharedPools which probably should be supplanted by some better mechanism.My instances describe the representation and behavior of objects. I add more comprehensive programming support facilities to the basic attributes of Behavior and the descriptive facilities of ClassDescription.The slot 'subclasses' is a redundant structure.  It is never used during execution, but is used by the development system to simplify or speed certain operations.  "
"CornerRounder","This class is a quick hack to support rounded corners in morphic.Rather than produce rounded rectangles, it tweaks the display of corners.Rather than work for any radius, it only supports a radius of 6.Rather than work for any border width, it only supports widths 0, 1 and 2.The corners, while apparently transparent, still behave opaquely to mouse clicks.Worse than this, the approach relies on the ability to extract underlying bits from the canvas prior to display.  This ran afoul of top-down display, it seems, in SystemWindow spawnReframeHandle: (qv).  It will also make a postscript printer very unhappy.But, hey, it's cute."
"FTPClient","A minimal FTP client program.  Could store all state in inst vars, and use an instance to represent the full state of a connection in progress.  But simpler to do all that in one method and have it be a complete transaction.Always operates in passive mode (PASV).  All connections are initiated from client in order to get through firewalls.See ServerDirectory openFTP, ServerDirectory getFileNamed:, ServerDirectory putFile:named: for examples of use.See TCP/IP, second edition, by Dr. Sidnie Feit, McGraw-Hill, 1997, Chapter 14, p311."
"DateParser","Read a Date from the stream based on the pattern which can include the tokens:			y = A year with 1 to n digits (after 2000)		yy = A year with 2 digits (after 2000)		yyyy = A year with 4 digits		m = A month with 1 or 2 digits		mm = A month with 2 digits		d = A day with 1 or 2 digits		dd = A day with 2 digits			...and any other Strings inbetween. Representing $y, $m and $d is done using	\y, \m and \d and slash itself with \\. Simple example patterns:		'yyyy-mm-dd'		'yyyymmdd'		'yy.mm.dd'		'y-m-d'"
"Color","This class represents abstract color, regardless of the depth of bitmap it will be shown in.  At the very last moment a Color is converted to a pixelValue that depends on the depth of the actual Bitmap inside the Form it will be used with.  The supported depths (in bits) are 1, 2, 4, 8, 16, and 32.  The number of actual colors at these depths are: 2, 4, 16, 256, 32768, and 16 million.  (See comment in BitBlt.)  To change the depth of the Display and set how many colors you can see, execute: (Display newDepth: 8).  (See comment in DisplayMedium)	Color is represented as the amount of light in red, green, and blue.  White is (1.0, 1.0, 1.0) and black is (0, 0, 0).  Pure red is (1.0, 0, 0).  These colors are ""additive"".  Think of Color's instance variables as:	r	amount of red, a Float between 0.0 and 1.0.	g	amount of green, a Float between 0.0 and 1.0.	b	amount of blue, a Float between 0.0 and 1.0.(But, in fact, the three are encoded as values from 0 to 1023 and combined in a single integer, rgb.  The user does not need to know this.)	Many colors are named.  You find a color by name by sending a message to class Color, for example (Color lightBlue).  Also, (Color red: 0.2 green: 0.6 blue: 1.0) or (Color r: 0.2 g: 0.6 b: 1.0) creates a color. (see below)	A color is essentially immutable.  Once you set red, green, and blue, you cannot change them.  Instead, create a new Color and use it.		Applications such as contour maps and bar graphs will want to display one of a set of shades based on a number.  Convert the range of this number to an integer from 1 to N.  Then call (Color green lightShades: N) to get an Array of colors from white to green.  Use the Array messages at:, atPin:, or atWrap: to pull out the correct color from the array.  atPin: gives the first (or last) color if the index is out of range.  atWrap: wraps around to the other end if the index is out of range.		Messages:	mixed: proportion with: aColor	Answer this color mixed with the given color additively. The proportion, a number between 0.0 and 1.0, determines what what fraction of the receiver to use in the mix.	+ 	add two colors	- 	subtract two colors	*	multiply the values of r, g, b by a number or an Array of factors.  ((Color named: #white) * 0.3) gives a darkish gray.  (aColor * #(0 0 0.9)) gives a color with slightly less blue.	/	divide a color by a factor or an array of three factors.	errorForDepth: d     How close the nearest color at this depth is to this abstract color.  Sum of the squares of the RGB differences, square rooted and normalized to 1.0.  Multiply by 100 to get percent.	hue			Returns the hue of the color. On a wheel from 0 to 360 with pure red at 0 and again at 360.	saturation	Returns the saturation of the color.  0.0 to 1.0	brightness	Returns the brightness of the color.  0.0 to 1.0	name    Look to see if this Color has a name.	lightShades: thisMany		An array of thisMany colors from white to the receiver. 	darkShades: thisMany		An array of thisMany colors from black to the receiver.  Array is of length num.	mix: color2 shades: thisMany		An array of thisMany colors from the receiver to color2.	wheel: thisMany			An array of thisMany colors around the color wheel starting and ending at the receiver.	pixelValueForDepth: d    Returns the bits that appear be in a Bitmap of this depth for this color.  Represents the nearest available color at this depth.  Normal users do not need to know which pixelValue is used for which color. Messages to Class Color.	red: r green: g blue: b		Return a color with the given r, g, and b components.	r: g: b:		Same as above, for fast typing. 	hue: h saturation: s brightness: b		Create a color with the given hue, saturation, and brightness.	pink 	blue	red ...	Many colors have messages that return an instance of Color.	canUnderstand: #brown	  Returns true if #brown is a defined color.	names		An OrderedCollection of the names of the colors.	named: #notAllThatGray put: aColor    Add a new color to the list and create an access message and a class variable for it.   colorFromPixelValue: value depth: d    Returns a Color whose bit pattern (inside a Bitmap) at this depth is the number specified.  Normal users do not need to use this.(See also comments in these classes: Form, Bitmap, BitBlt,.)"
"ExpanderMorphContracted","I am an Announcement that occurs when an ExpanderMorph is contracted (rolled-up). Example where visibility of another UI component depends on the expanded/contracted state of Expander 2 |builder expanders ex1 ex2 text list row|builder := UITheme builder.expanders := builder newColumn: { ex1 := builder newExpander: 'Expander 1'. ex2 := builder newExpander: 'Expander 2'}.expanders width: 100; hResizing: #rigid.text := builder newTextEditorFor: (ValueHolder new contents: 'Some text') getText: #contents setText: #contents:.list := (builder newListFor: (ListModel new list: #('One' 'Two' 'Three' 'Four'); selectionIndex: 3) list: #list selected: #selectionIndex changeSelected: #selectionIndex: help: 'This is a list')  minWidth: 120;  visible: false;  disableTableLayout: true.ex2 announcer when: ExpanderMorphContracted do: [list hide; disableTableLayout: true]; when: ExpanderMorphExpanded do: [list show; disableTableLayout: false].row := builder newRow: { expanders. (builder newRow: {text. list})  vResizing: #spaceFill}."
"RBRefactoryTyper","I am a type guesser used by refactoring operations.I try to determine the types used for variables in a class.Refactoring operations are using me to provide a possible list of classes that are affected by a refactoring. For example, for moving or delegating a method implementation to an instance variable, it might be necessary to add this implementation to multiple classes.I analyze message sends to the instance variables and try to guess the type by looking at implementors of that messages. (If a method sends ifTrue:ifFalse: to an instance variable I can guess that the instance variable may be a Boolean object).If I can guess the type to be a collection, I'll try to investigate the types of the possible contained elements as well.You can ask for the guessed type of the variable: typer guessTypeFor: 'variablename'and the contained elements: typer guessTypeFor: '-variablename-'Example usage: | typer |""create and initialize for a class to analyze""typer := (RBRefactoryTyper new runOn: RBMessageNode).""guess types for RBMessageNodes instane var 'arguments' ""typer  guessTypesFor:'arguments'.  ""a Set(SequenceableCollection)""""guess types for objects that may be put  into  'arguments' collection ""typer  guessTypesFor:'-arguments-' ""a Set(RBBlockNode RBMethodNode)""You can print a full report on all results with #printString.(RBRefactoryTyper new runOn: Point ) printString.""'Point	x	<Integer>	y	<Integer>'""There are two class side methods, one for creating an instance and setting the environment used to resolve names - a RBNamespace.And another one for guessing types in a parseTree:RBRefactoryTyper typesFor: 'var' in: (RBParser parseExpression: 'var squared') model: RBNamespace new ""a Set(Number Collection)""(Here, I can guess the types Number and Collections as these are the classes implementing the message #squared)"
"HermesCommandLineHandler","This is the command line handler to load Hermes files in the image.The format is intented to export any of the objects. However, the command line expects to have a package as its root element.It loads the hermes files passed as parameter.They are loaded in the order of the parameters.Usage: loadHermes [--save] [extendedOptions] [<hermesFiles> ...]	--save                		save after loading the packages if there is no error	 <hermesFiles>      	a list of .hermes files to load in the image.	extendedOptions 	read the extension section.	Examples:	#Load the package Test-Package	pharo Pharo.image loadHermes Test-Package.hermes		#Load the package Test-Package and saving	pharo Pharo.image loadHermes --save Test-Package.hermes		Extensions =========When Hermes-Extensions is loaded additional options are present: 	no-fail-on-undeclared		It does not fail the loading if there are new undeclared variables. By default it fails.	on-duplication=action	When there is a duplication in the loading package what is the action to take:								fail		(default) Fail on a duplication								ignore	Ignore the error and do not do nothing. Keeping the image version								replace	Replace the image version with the one in the Hermes Package.									Examples									#Load the package Test-Package without failing on new undeclared variables.	pharo Pharo.image loadHermes --save --no-fail-on-undeclared Test-Package.hermes	#Load the package Test-Package replacing the image version with the ones in the hermes file.	pharo Pharo.image loadHermes --save --on-duplication=replace Test-Package.hermes"
"ClySystemEnvironment","I represent environment of Pharo system. I incapsulate globals (Smalltalk globals), packageOrganizer (RPackageOrganizer  default) and changesAnnouncer (SystemAnnouncer uniqueInstance). I have class side #currentImage instance created with all corresponding globals of current image.I am used to navigate over system by ClyNavigationEnvironment.Public API and Key Messages- packages- createPackageNamed: aString- removePackage: aPackage- includesClassNamed: aString - defaultClassCompiler- subscribe: aNavigationEnvironment- unsubscribe: aNavigationEnvironmentInternal Representation and Key Implementation Points.    Instance Variables	changesAnnouncer:		<SystemAnnouncer>	globals:		<SmalltalkDictionary> ""Smalltalk globals class""	name:		<String>	packageOrganizer:		<RPackageOrganizer>	projectManager:		<ClyProjectManager>"
"GTEventCollectors","I represent a collection of GTEventCollector objects. GTEventRecorder uses me and I am responsible for adding and removing the collectors.Public API and Key Messages- add:  - remove: Internal Representation and Key Implementation Points.    Instance Variables	collectors:		<OrderedCollection>	mutex:		<Mutex>"
