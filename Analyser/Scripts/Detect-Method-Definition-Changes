reader := NeoCSVReader on: '/CommentAnalysisInPharo/Data/Methods-definition/2-MethodsDefinition.csv' asFileReference readStream.
v1 := reader upToEnd.
reader close.

reader := NeoCSVReader on: '/Users/poojarani/gitProjects/CommentAnalysisInPharo/Data/Methods-definition/3-MethodsDefinition.csv' asFileReference readStream.
v2 := reader upToEnd.
reader close.

v1 := ((v1 groupedBy: [ :e | e first ]) associations collect: [ :f |  f key -> (f value collect: [:m |  {m third.m second. m fourth}])]) sorted: [ :a :b |  a key < b key ].
v2 := ((v2 groupedBy: [ :e | e first ]) associations collect: [ :f |  f key -> (f value collect: [:m | 
		 {m third.m second. m fourth}])]) sorted: [ :a :b |  a key < b key ].

methodChanges := v2 select: [ :e | 
	((v1 collect:#key) includes: e key)] thenCollect: [  :e | 
		c1Methods := ((v1 detect: [:a | a key = e key]) value) sorted: [ :a :b | a first < b first ]. 
		c2Methods := (e value)sorted: [ :a :b | a first < b first ]. 
	
		((c1Methods = c2Methods) or: [((c1Methods difference: c2Methods) isEmpty and: [ 	(c2Methods difference: c1Methods)isEmpty])]) 
		ifTrue: [ e key -> (#methodsNotChanged -> c1Methods)]
		ifFalse: [ 
			c1Differences :=  (c1Methods difference: c2Methods).
			c2Differences :=  (c2Methods difference: c1Methods).
			
			c1DifferencesMethodNames := c1Differences collect: #first.
			c2DifferencesMethodNames := c2Differences collect: #first.
			
			methodsChanged := OrderedCollection new.			
			commonMethods := c1DifferencesMethodNames intersection: c2DifferencesMethodNames.
			
			commonMethods ifNotEmpty: [
					methodsCodeChanged := commonMethods select: [ :p |
						c1 := c1Differences detect: [:f | p = f first].
						c2 := c2Differences detect: [:f | p = f first].
						c1 second = c2 second].
						
						methodsCodeChanged ifNotEmpty: [  
					methodsChanged add: #methodsCodeChanged -> (methodsCodeChanged)].
					
					methodsDuplicated := commonMethods select: [ :m |
						c1 := c1Differences detect: [:f | m = f first].
						c2 := c2Differences detect: [:f | m = f first].
						c1 second ~= c2 second].
				
				 methodsDuplicated ifNotEmpty: [  
					methodsChanged add: #methodsDuplicated -> (methodsDuplicated)]].
					
				c1DifferentMethods := c1DifferencesMethodNames difference: c2DifferencesMethodNames.
			c2DifferentMethods := c2DifferencesMethodNames difference: c1DifferencesMethodNames.
			
			c1DifferentMethods ifNotEmpty:
			 		[ methodsChanged add: (#methodsRemoved -> (c1DifferentMethods))].
			c2DifferentMethods ifNotEmpty:
					[ methodsChanged add: (#methodsAdded -> (c2DifferentMethods))].
				
		 e key -> (#methodsChanged -> methodsChanged asOrderedDictionary).
	]
].

(methodChanges groupedBy: [ :e | e value key])

