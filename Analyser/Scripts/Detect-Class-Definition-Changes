reader := NeoCSVReader on: '/CommentAnalysisInPharo/Data/Code-changes/Classes-Definition/2-ClassDefinitions.csv' asFileReference readStream.
v1 := reader upToEnd.
reader close.

reader := NeoCSVReader on: '/CommentAnalysisInPharo/Data/Code-changes/Classes-Definition/3-ClassDefinitions.csv' asFileReference readStream.
v2 := reader upToEnd.
reader close.

v1 := (v1 collect: [ :e | e first -> { e second .  e third } ]) sorted: [:a :b | a key < b key].
v2 := (v2 collect: [ :e | e first -> { e second .  e third } ]) sorted: [:a :b | a key < b key].  



classChanges := (v2 select: [ :e | 
	((v1 collect:#key) includes: e key)] thenCollect: [  :e | 
		
	def1 := (v1 detect: [ :c | e key = c key ]) value.
	def2 := (v2 detect: [ :c | e key = c key ]) value.
	def1 = def2
		ifTrue: [ e key -> #ClassDefintiionSame ]
		ifFalse: [  
			 ((def1 intersection: def2) size =  def1 size and: [ (def1 intersection: def2) size =  def2 size ])
			ifTrue:[e key -> #ClassDefintiionSame]
			ifFalse: [			  
				((def1 first ~= def2 first) or: [ def1 second ~= def2 second ])
				ifTrue: [ 
					|classDefChanged|
					classDefChanged := OrderedCollection new. 
					
					(def1 first ~= def2 first) ifTrue: [ 
						classDefChanged add: #InstanceSideChanged].
					(def1 second ~= def2 second) ifTrue: [ 
						classDefChanged add: #ClassSideChanged].
					e key -> (#ClassDefintiionChanged -> classDefChanged) ].
			]
		]
	])groupedBy: [ :e | e value ]